/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "include/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "include/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "include/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "include/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "include/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "include/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "include/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 221 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 221 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 226 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 226 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 227 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 232
struct hlist_node;
#line 232 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 236 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 247 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 60
struct completion;
#line 61
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 710 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/bug.h"
struct timespec;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2224_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2239_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2240_12 {
   struct __anonstruct_ldv_2224_13 ldv_2224 ;
   struct __anonstruct_ldv_2239_14 ldv_2239 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2240_12 ldv_2240 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2868_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2868_19 ldv_2868 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 637 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5195_24 {
   u64 rip ;
   u64 rdp ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5201_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5202_23 {
   struct __anonstruct_ldv_5195_24 ldv_5195 ;
   struct __anonstruct_ldv_5201_25 ldv_5201 ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5211_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5202_23 ldv_5202 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5211_26 ldv_5211 ;
};
#line 339 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 385 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 433
struct kmem_cache;
#line 434
struct perf_event;
#line 435 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5940_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5940_29 ldv_5940 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5947_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5947_31 ldv_5947 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6163_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6164_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6163_33 ldv_6163 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6164_32 ldv_6164 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 48 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 53 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 701 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 341
struct tvec_base;
#line 342 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 556 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 835 "include/linux/sysctl.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 176
struct nsproxy;
#line 37 "include/linux/kmod.h"
struct cred;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 445
struct sock;
#line 446
struct kobject;
#line 447
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 453 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13535_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13535_134 ldv_13535 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 225 "include/linux/jump_label.h"
struct tracepoint;
#line 226 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct module_param_attrs;
#line 34 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 43 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 69
struct exception_table_entry;
#line 198
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 204 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 219
struct module_sect_attrs;
#line 219
struct module_notes_attrs;
#line 219
struct ftrace_event_call;
#line 219 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 217 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 427 "include/linux/mod_devicetable.h"
struct i2c_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 586
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 52 "include/linux/device.h"
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 126
struct device_type;
#line 183 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 246 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 300
struct class_attribute;
#line 300 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 395 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 448 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 475 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 563 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 573
struct dma_coherent_mem;
#line 573 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 691 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 559
struct prio_tree_node;
#line 559 "include/linux/capability.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_trap_nr ;
   unsigned long saved_scratch_register ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
   atomic_t count ;
};
#line 121
struct address_space;
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15302_138 {
   unsigned long index ;
   void *freelist ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15312_142 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15313_141 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15312_142 ldv_15312 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15315_140 {
   union __anonunion_ldv_15313_141 ldv_15313 ;
   atomic_t _count ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15316_139 {
   unsigned long counters ;
   struct __anonstruct_ldv_15315_140 ldv_15315 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15317_137 {
   union __anonunion_ldv_15302_138 ldv_15302 ;
   union __anonunion_ldv_15316_139 ldv_15316 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_15324_144 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15325_143 {
   struct list_head lru ;
   struct __anonstruct_ldv_15324_144 ldv_15324 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_15330_145 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 122 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_15317_137 ldv_15317 ;
   union __anonunion_ldv_15325_143 ldv_15325 ;
   union __anonunion_ldv_15330_145 ldv_15330 ;
   unsigned long debug_flags ;
};
#line 203 "include/linux/mm_types.h"
struct __anonstruct_vm_set_147 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 203 "include/linux/mm_types.h"
union __anonunion_shared_146 {
   struct __anonstruct_vm_set_147 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 203
struct anon_vma;
#line 203
struct vm_operations_struct;
#line 203
struct mempolicy;
#line 203 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_146 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 266 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 272 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 285 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 298
struct linux_binfmt;
#line 298
struct mmu_notifier_mm;
#line 298 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 107
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_148 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_148 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_150 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_151 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_152 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_153 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_154 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_155 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigsys_156 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_149 {
   int _pad[28U] ;
   struct __anonstruct__kill_150 _kill ;
   struct __anonstruct__timer_151 _timer ;
   struct __anonstruct__rt_152 _rt ;
   struct __anonstruct__sigchld_153 _sigchld ;
   struct __anonstruct__sigfault_154 _sigfault ;
   struct __anonstruct__sigpoll_155 _sigpoll ;
   struct __anonstruct__sigsys_156 _sigsys ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_149 _sifields ;
};
#line 109 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 397
struct pid_namespace;
#line 397 "include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 46 "include/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 457 "include/linux/rculist.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 20 "include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct plist_head wait_list ;
   struct task_struct *owner ;
   int save_state ;
   char const   *name ;
   char const   *file ;
   int line ;
   void *magic ;
};
#line 38
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 460 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115 "include/linux/key.h"
union __anonunion_ldv_16591_159 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_16600_160 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_161 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_162 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_16591_159 ldv_16591 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_16600_160 ldv_16600 ;
   time_t last_used_at ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_161 type_data ;
   union __anonunion_payload_162 payload ;
};
#line 319
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 151 "include/linux/sched.h"
struct cfs_rq;
#line 408 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 452 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 460 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 467 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 484 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 520
struct autogroup;
#line 521
struct tty_struct;
#line 521
struct taskstats;
#line 521
struct tty_audit_buf;
#line 521 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 702 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 746
struct backing_dev_info;
#line 747
struct reclaim_state;
#line 748 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 762 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1035
struct io_context;
#line 1063
struct pipe_inode_info;
#line 1065
struct rq;
#line 1066 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1131 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1136 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1171 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1197
struct rt_rq;
#line 1197 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1220
struct mem_cgroup;
#line 1220 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1578
struct files_struct;
#line 1578
struct css_set;
#line 1578
struct compat_robust_list_head;
#line 1578
struct ftrace_ret_stack;
#line 1578 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct hlist_head task_works ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
   int uprobe_srcu_id ;
};
#line 28 "include/linux/of.h"
typedef u32 phandle;
#line 30 "include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 39
struct proc_dir_entry;
#line 39 "include/linux/of.h"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 41 "include/linux/i2c.h"
struct i2c_msg;
#line 42
struct i2c_algorithm;
#line 43
struct i2c_adapter;
#line 44
struct i2c_client;
#line 45
struct i2c_driver;
#line 46
union i2c_smbus_data;
#line 47
struct i2c_board_info;
#line 119 "include/linux/i2c.h"
struct i2c_driver {
   unsigned int class ;
   int (*attach_adapter)(struct i2c_adapter * ) ;
   int (*detach_adapter)(struct i2c_adapter * ) ;
   int (*probe)(struct i2c_client * , struct i2c_device_id  const  * ) ;
   int (*remove)(struct i2c_client * ) ;
   void (*shutdown)(struct i2c_client * ) ;
   int (*suspend)(struct i2c_client * , pm_message_t  ) ;
   int (*resume)(struct i2c_client * ) ;
   void (*alert)(struct i2c_client * , unsigned int  ) ;
   int (*command)(struct i2c_client * , unsigned int  , void * ) ;
   struct device_driver driver ;
   struct i2c_device_id  const  *id_table ;
   int (*detect)(struct i2c_client * , struct i2c_board_info * ) ;
   unsigned short const   *address_list ;
   struct list_head clients ;
};
#line 200 "include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct i2c_driver *driver ;
   struct device dev ;
   int irq ;
   struct list_head detected ;
};
#line 252 "include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   void *platform_data ;
   struct dev_archdata *archdata ;
   struct device_node *of_node ;
   int irq ;
};
#line 337 "include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter * , struct i2c_msg * , int  ) ;
   int (*smbus_xfer)(struct i2c_adapter * , u16  , unsigned short  , char  , u8  ,
                     int  , union i2c_smbus_data * ) ;
   u32 (*functionality)(struct i2c_adapter * ) ;
};
#line 369 "include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm  const  *algo ;
   void *algo_data ;
   struct rt_mutex bus_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
};
#line 487 "include/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 552 "include/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 54 "include/linux/delay.h"
enum led_brightness {
    LED_OFF = 0,
    LED_HALF = 127,
    LED_FULL = 255
} ;
#line 60
struct led_trigger;
#line 60 "include/linux/delay.h"
struct led_classdev {
   char const   *name ;
   int brightness ;
   int max_brightness ;
   int flags ;
   void (*brightness_set)(struct led_classdev * , enum led_brightness  ) ;
   enum led_brightness (*brightness_get)(struct led_classdev * ) ;
   int (*blink_set)(struct led_classdev * , unsigned long * , unsigned long * ) ;
   struct device *dev ;
   struct list_head node ;
   char const   *default_trigger ;
   unsigned long blink_delay_on ;
   unsigned long blink_delay_off ;
   struct timer_list blink_timer ;
   int blink_brightness ;
   struct rw_semaphore trigger_lock ;
   struct led_trigger *trigger ;
   struct list_head trig_list ;
   void *trigger_data ;
   bool activated ;
};
#line 136 "include/linux/leds.h"
struct led_trigger {
   char const   *name ;
   void (*activate)(struct led_classdev * ) ;
   void (*deactivate)(struct led_classdev * ) ;
   rwlock_t leddev_list_lock ;
   struct list_head led_cdevs ;
   struct list_head next_trig ;
};
#line 238 "include/linux/leds.h"
struct bd2802_led_platform_data {
   int reset_gpio ;
   u8 rgb_time ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[26U] ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 76 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 366 "include/linux/slab.h"
enum led_ids {
    LED1 = 0,
    LED2 = 1,
    LED_NUM = 2
} ;
#line 372
enum led_colors {
    RED = 0,
    GREEN = 1,
    BLUE = 2
} ;
#line 378
enum led_bits {
    BD2802_OFF = 0,
    BD2802_BLINK = 1,
    BD2802_ON = 2
} ;
#line 384 "include/linux/slab.h"
struct led_state {
   unsigned char r : 2 ;
   unsigned char g : 2 ;
   unsigned char b : 2 ;
};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
struct bd2802_led {
   struct bd2802_led_platform_data *pdata ;
   struct i2c_client *client ;
   struct rw_semaphore rwsem ;
   struct work_struct work ;
   struct led_state led[2U] ;
   struct led_classdev cdev_led1r ;
   struct led_classdev cdev_led1g ;
   struct led_classdev cdev_led1b ;
   struct led_classdev cdev_led2r ;
   struct led_classdev cdev_led2g ;
   struct led_classdev cdev_led2b ;
   int adf_on ;
   enum led_ids led_id ;
   enum led_colors color ;
   enum led_bits state ;
   int wave_pattern ;
   int rgb_current ;
};
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 221 "include/linux/kernel.h"
extern int kstrtoull(char const   * , unsigned int  , unsigned long long * ) ;
#line 223 "include/linux/kernel.h"
__inline static int kstrtoul(char const   *s , unsigned int base , unsigned long *res ) 
{ 
  int tmp ;

  {
#line 231
  tmp = kstrtoull(s, base, (unsigned long long *)res);
#line 231
  return (tmp);
}
}
#line 323
extern int sprintf(char * , char const   *  , ...) ;
#line 45 "include/linux/string.h"
extern int strncmp(char const   * , char const   * , __kernel_size_t  ) ;
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 67 "include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore * , char const   * , struct lock_class_key * ) ;
#line 80
extern void down_read(struct rw_semaphore * ) ;
#line 90
extern void down_write(struct rw_semaphore * ) ;
#line 100
extern void up_read(struct rw_semaphore * ) ;
#line 105
extern void up_write(struct rw_semaphore * ) ;
#line 156 "include/linux/workqueue.h"
extern void __init_work(struct work_struct * , int  ) ;
#line 380
extern int schedule_work(struct work_struct * ) ;
#line 392
extern bool cancel_work_sync(struct work_struct * ) ;
#line 511 "include/linux/device.h"
extern int device_create_file(struct device * , struct device_attribute  const  * ) ;
#line 513
extern void device_remove_file(struct device * , struct device_attribute  const  * ) ;
#line 559
extern void *devm_kzalloc(struct device * , size_t  , gfp_t  ) ;
#line 802
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 803
extern int dev_set_drvdata(struct device * , void * ) ;
#line 900
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 906
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 88 "include/linux/i2c.h"
extern s32 i2c_smbus_write_byte_data(struct i2c_client  const  * , u8  , u8  ) ;
#line 243 "include/linux/i2c.h"
__inline static void *i2c_get_clientdata(struct i2c_client  const  *dev ) 
{ 
  void *tmp ;

  {
#line 245
  tmp = dev_get_drvdata(& dev->dev);
#line 245
  return (tmp);
}
}
#line 248 "include/linux/i2c.h"
__inline static void i2c_set_clientdata(struct i2c_client *dev , void *data ) 
{ 


  {
#line 250
  dev_set_drvdata(& dev->dev, data);
#line 251
  return;
}
}
#line 170 "include/asm-generic/gpio.h"
extern void __gpio_set_value(unsigned int  , int  ) ;
#line 176
extern int gpio_request_one(unsigned int  , unsigned long  , char const   * ) ;
#line 55 "include/linux/gpio.h"
__inline static void gpio_set_value(unsigned int gpio , int value ) 
{ 


  {
#line 57
  __gpio_set_value(gpio, value);
#line 58
  return;
}
}
#line 10 "include/asm-generic/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 84 "include/linux/leds.h"
extern int led_classdev_register(struct device * , struct led_classdev * ) ;
#line 86
extern void led_classdev_unregister(struct led_classdev * ) ;
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
__inline static int bd2802_is_rgb_off(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 


  {
#line 123
  switch ((unsigned int )color) {
  case 0U: ;
#line 125
  return ((unsigned int )led->led[(unsigned int )id].r == 0U);
  case 1U: ;
#line 127
  return ((unsigned int )led->led[(unsigned int )id].g == 0U);
  case 2U: ;
#line 129
  return ((unsigned int )led->led[(unsigned int )id].b == 0U);
  default: 
#line 131
  dev_err((struct device  const  *)(& (led->client)->dev), "%s: Invalid color\n",
          "bd2802_is_rgb_off");
#line 132
  return (-22);
  }
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
__inline static int bd2802_is_led_off(struct bd2802_led *led , enum led_ids id ) 
{ 


  {
#line 138
  if (((unsigned int )led->led[(unsigned int )id].r != 0U || (unsigned int )led->led[(unsigned int )id].g != 0U) || (unsigned int )led->led[(unsigned int )id].b != 0U) {
#line 139
    return (0);
  } else {

  }
#line 141
  return (1);
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
__inline static int bd2802_is_all_off(struct bd2802_led *led ) 
{ 
  int i ;
  int tmp ;

  {
#line 148
  i = 0;
#line 148
  goto ldv_19383;
  ldv_19382: 
#line 149
  tmp = bd2802_is_led_off(led, (enum led_ids )i);
#line 149
  if (tmp == 0) {
#line 150
    return (0);
  } else {

  }
#line 148
  i = i + 1;
  ldv_19383: ;
#line 148
  if (i <= 1) {
#line 149
    goto ldv_19382;
  } else {

  }

#line 152
  return (1);
}
}
#line 155 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
__inline static u8 bd2802_get_base_offset(enum led_ids id , enum led_colors color ) 
{ 


  {
#line 157
  return ((unsigned int )((u8 )id) * 10U + (unsigned int )((u8 )color) * 3U);
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
__inline static u8 bd2802_get_reg_addr(enum led_ids id , enum led_colors color , u8 reg_offset ) 
{ 
  u8 tmp ;

  {
#line 163
  tmp = bd2802_get_base_offset(id, color);
#line 163
  return ((int )tmp + (int )reg_offset);
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_write_byte(struct i2c_client *client , u8 reg , u8 val ) 
{ 
  int ret ;
  s32 tmp ;

  {
#line 173
  tmp = i2c_smbus_write_byte_data((struct i2c_client  const  *)client, (int )reg,
                                  (int )val);
#line 173
  ret = tmp;
#line 174
  if (ret >= 0) {
#line 175
    return (0);
  } else {

  }
#line 177
  dev_err((struct device  const  *)(& client->dev), "%s: reg 0x%x, val 0x%x, err %d\n",
          "bd2802_write_byte", (int )reg, (int )val, ret);
#line 180
  return (ret);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_update_state(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                                enum led_bits led_bit ) 
{ 
  int i ;
  u8 value ;
  int tmp ;
  int tmp___0 ;

  {
#line 189
  i = 0;
#line 189
  goto ldv_19416;
  ldv_19415: ;
#line 190
  if ((unsigned int )i == (unsigned int )id) {
#line 191
    switch ((unsigned int )color) {
    case 0U: 
#line 193
    led->led[i].r = (unsigned char )led_bit;
#line 194
    goto ldv_19410;
    case 1U: 
#line 196
    led->led[i].g = (unsigned char )led_bit;
#line 197
    goto ldv_19410;
    case 2U: 
#line 199
    led->led[i].b = (unsigned char )led_bit;
#line 200
    goto ldv_19410;
    default: 
#line 202
    dev_err((struct device  const  *)(& (led->client)->dev), "%s: Invalid color\n",
            "bd2802_update_state");
#line 204
    return;
    }
    ldv_19410: ;
  } else {

  }
#line 189
  i = i + 1;
  ldv_19416: ;
#line 189
  if (i <= 1) {
#line 190
    goto ldv_19415;
  } else {

  }

#line 209
  if ((unsigned int )led_bit == 1U || (unsigned int )led_bit == 2U) {
#line 210
    return;
  } else {

  }
#line 212
  tmp = bd2802_is_led_off(led, id);
#line 212
  if (tmp == 0) {
#line 213
    return;
  } else {

  }
#line 215
  tmp___0 = bd2802_is_all_off(led);
#line 215
  if (tmp___0 != 0 && led->adf_on == 0) {
#line 216
    gpio_set_value((unsigned int )(led->pdata)->reset_gpio, 0);
#line 217
    return;
  } else {

  }
#line 224
  value = (unsigned int )id == 0U ? 16U : 1U;
#line 225
  bd2802_write_byte(led->client, 1, (int )value);
#line 226
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_configure(struct bd2802_led *led ) 
{ 
  struct bd2802_led_platform_data *pdata ;
  u8 reg ;

  {
#line 230
  pdata = led->pdata;
#line 233
  reg = bd2802_get_reg_addr(LED1, RED, 2);
#line 234
  bd2802_write_byte(led->client, (int )reg, (int )pdata->rgb_time);
#line 236
  reg = bd2802_get_reg_addr(LED2, RED, 2);
#line 237
  bd2802_write_byte(led->client, (int )reg, (int )pdata->rgb_time);
#line 238
  return;
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_reset_cancel(struct bd2802_led *led ) 
{ 


  {
#line 242
  gpio_set_value((unsigned int )(led->pdata)->reset_gpio, 1);
#line 243
  __const_udelay(429500UL);
#line 244
  bd2802_configure(led);
#line 245
  return;
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_enable(struct bd2802_led *led , enum led_ids id ) 
{ 
  enum led_ids other_led ;
  u8 value ;
  u8 other_led_on ;
  int tmp ;

  {
#line 249
  other_led = (unsigned int )id == 0U;
#line 252
  tmp = bd2802_is_led_off(led, other_led);
#line 252
  other_led_on = tmp == 0;
#line 253
  if ((unsigned int )id == 0U) {
#line 254
    value = (u8 )((int )((signed char )((int )other_led_on << 4)) | 1);
  } else {
#line 256
    value = (unsigned int )other_led_on | 16U;
  }
#line 258
  bd2802_write_byte(led->client, 1, (int )value);
#line 259
  return;
}
}
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int tmp ;

  {
#line 266
  tmp = bd2802_is_all_off(led);
#line 266
  if (tmp != 0 && led->adf_on == 0) {
#line 267
    bd2802_reset_cancel(led);
  } else {

  }
#line 269
  reg = bd2802_get_reg_addr(id, color, 3);
#line 270
  bd2802_write_byte(led->client, (int )reg, (int )((u8 )led->rgb_current));
#line 271
  reg = bd2802_get_reg_addr(id, color, 4);
#line 272
  bd2802_write_byte(led->client, (int )reg, 0);
#line 273
  reg = bd2802_get_reg_addr(id, color, 5);
#line 274
  bd2802_write_byte(led->client, (int )reg, 7);
#line 276
  bd2802_enable(led, id);
#line 277
  bd2802_update_state(led, id, color, BD2802_ON);
#line 278
  return;
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_blink(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int tmp ;

  {
#line 285
  tmp = bd2802_is_all_off(led);
#line 285
  if (tmp != 0 && led->adf_on == 0) {
#line 286
    bd2802_reset_cancel(led);
  } else {

  }
#line 288
  reg = bd2802_get_reg_addr(id, color, 3);
#line 289
  bd2802_write_byte(led->client, (int )reg, 0);
#line 290
  reg = bd2802_get_reg_addr(id, color, 4);
#line 291
  bd2802_write_byte(led->client, (int )reg, (int )((u8 )led->rgb_current));
#line 292
  reg = bd2802_get_reg_addr(id, color, 5);
#line 293
  bd2802_write_byte(led->client, (int )reg, (int )((u8 )led->wave_pattern));
#line 295
  bd2802_enable(led, id);
#line 296
  bd2802_update_state(led, id, color, BD2802_BLINK);
#line 297
  return;
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_turn_on(struct bd2802_led *led , enum led_ids id , enum led_colors color ,
                           enum led_bits led_bit ) 
{ 


  {
#line 302
  if ((unsigned int )led_bit == 0U) {
#line 303
    dev_err((struct device  const  *)(& (led->client)->dev), "Only \'blink\' and \'on\' are allowed\n");
#line 305
    return;
  } else {

  }
#line 308
  if ((unsigned int )led_bit == 1U) {
#line 309
    bd2802_set_blink(led, id, color);
  } else {
#line 311
    bd2802_set_on(led, id, color);
  }
#line 312
  return;
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_turn_off(struct bd2802_led *led , enum led_ids id , enum led_colors color ) 
{ 
  u8 reg ;
  int tmp ;

  {
#line 319
  tmp = bd2802_is_rgb_off(led, id, color);
#line 319
  if (tmp != 0) {
#line 320
    return;
  } else {

  }
#line 322
  reg = bd2802_get_reg_addr(id, color, 3);
#line 323
  bd2802_write_byte(led->client, (int )reg, 0);
#line 324
  reg = bd2802_get_reg_addr(id, color, 4);
#line 325
  bd2802_write_byte(led->client, (int )reg, 0);
#line 327
  bd2802_update_state(led, id, color, BD2802_OFF);
#line 328
  return;
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x00(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 352
  __mptr = (struct device  const  *)dev;
#line 352
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 352
  led = (struct bd2802_led *)tmp;
#line 352
  if (count == 0UL) {
#line 352
    return (-22L);
  } else {

  }
#line 352
  ret = kstrtoul(buf, 16U, & val);
#line 352
  if (ret != 0) {
#line 352
    return ((ssize_t )ret);
  } else {

  }
#line 352
  down_write(& led->rwsem);
#line 352
  bd2802_write_byte(led->client, 0, (int )((unsigned char )val));
#line 352
  up_write(& led->rwsem);
#line 352
  return ((ssize_t )count);
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x00_attr  =    {{"0x00", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x00};
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x01(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 353
  __mptr = (struct device  const  *)dev;
#line 353
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 353
  led = (struct bd2802_led *)tmp;
#line 353
  if (count == 0UL) {
#line 353
    return (-22L);
  } else {

  }
#line 353
  ret = kstrtoul(buf, 16U, & val);
#line 353
  if (ret != 0) {
#line 353
    return ((ssize_t )ret);
  } else {

  }
#line 353
  down_write(& led->rwsem);
#line 353
  bd2802_write_byte(led->client, 1, (int )((unsigned char )val));
#line 353
  up_write(& led->rwsem);
#line 353
  return ((ssize_t )count);
}
}
#line 353 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x01_attr  =    {{"0x01", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x01};
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x02(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 354
  __mptr = (struct device  const  *)dev;
#line 354
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 354
  led = (struct bd2802_led *)tmp;
#line 354
  if (count == 0UL) {
#line 354
    return (-22L);
  } else {

  }
#line 354
  ret = kstrtoul(buf, 16U, & val);
#line 354
  if (ret != 0) {
#line 354
    return ((ssize_t )ret);
  } else {

  }
#line 354
  down_write(& led->rwsem);
#line 354
  bd2802_write_byte(led->client, 2, (int )((unsigned char )val));
#line 354
  up_write(& led->rwsem);
#line 354
  return ((ssize_t )count);
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x02_attr  =    {{"0x02", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x02};
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x03(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 355
  __mptr = (struct device  const  *)dev;
#line 355
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 355
  led = (struct bd2802_led *)tmp;
#line 355
  if (count == 0UL) {
#line 355
    return (-22L);
  } else {

  }
#line 355
  ret = kstrtoul(buf, 16U, & val);
#line 355
  if (ret != 0) {
#line 355
    return ((ssize_t )ret);
  } else {

  }
#line 355
  down_write(& led->rwsem);
#line 355
  bd2802_write_byte(led->client, 3, (int )((unsigned char )val));
#line 355
  up_write(& led->rwsem);
#line 355
  return ((ssize_t )count);
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x03_attr  =    {{"0x03", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x03};
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x04(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 356
  __mptr = (struct device  const  *)dev;
#line 356
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 356
  led = (struct bd2802_led *)tmp;
#line 356
  if (count == 0UL) {
#line 356
    return (-22L);
  } else {

  }
#line 356
  ret = kstrtoul(buf, 16U, & val);
#line 356
  if (ret != 0) {
#line 356
    return ((ssize_t )ret);
  } else {

  }
#line 356
  down_write(& led->rwsem);
#line 356
  bd2802_write_byte(led->client, 4, (int )((unsigned char )val));
#line 356
  up_write(& led->rwsem);
#line 356
  return ((ssize_t )count);
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x04_attr  =    {{"0x04", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x04};
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x05(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 357
  __mptr = (struct device  const  *)dev;
#line 357
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 357
  led = (struct bd2802_led *)tmp;
#line 357
  if (count == 0UL) {
#line 357
    return (-22L);
  } else {

  }
#line 357
  ret = kstrtoul(buf, 16U, & val);
#line 357
  if (ret != 0) {
#line 357
    return ((ssize_t )ret);
  } else {

  }
#line 357
  down_write(& led->rwsem);
#line 357
  bd2802_write_byte(led->client, 5, (int )((unsigned char )val));
#line 357
  up_write(& led->rwsem);
#line 357
  return ((ssize_t )count);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x05_attr  =    {{"0x05", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x05};
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x06(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 358
  __mptr = (struct device  const  *)dev;
#line 358
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 358
  led = (struct bd2802_led *)tmp;
#line 358
  if (count == 0UL) {
#line 358
    return (-22L);
  } else {

  }
#line 358
  ret = kstrtoul(buf, 16U, & val);
#line 358
  if (ret != 0) {
#line 358
    return ((ssize_t )ret);
  } else {

  }
#line 358
  down_write(& led->rwsem);
#line 358
  bd2802_write_byte(led->client, 6, (int )((unsigned char )val));
#line 358
  up_write(& led->rwsem);
#line 358
  return ((ssize_t )count);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x06_attr  =    {{"0x06", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x06};
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x07(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 359
  __mptr = (struct device  const  *)dev;
#line 359
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 359
  led = (struct bd2802_led *)tmp;
#line 359
  if (count == 0UL) {
#line 359
    return (-22L);
  } else {

  }
#line 359
  ret = kstrtoul(buf, 16U, & val);
#line 359
  if (ret != 0) {
#line 359
    return ((ssize_t )ret);
  } else {

  }
#line 359
  down_write(& led->rwsem);
#line 359
  bd2802_write_byte(led->client, 7, (int )((unsigned char )val));
#line 359
  up_write(& led->rwsem);
#line 359
  return ((ssize_t )count);
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x07_attr  =    {{"0x07", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x07};
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x08(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 360
  __mptr = (struct device  const  *)dev;
#line 360
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 360
  led = (struct bd2802_led *)tmp;
#line 360
  if (count == 0UL) {
#line 360
    return (-22L);
  } else {

  }
#line 360
  ret = kstrtoul(buf, 16U, & val);
#line 360
  if (ret != 0) {
#line 360
    return ((ssize_t )ret);
  } else {

  }
#line 360
  down_write(& led->rwsem);
#line 360
  bd2802_write_byte(led->client, 8, (int )((unsigned char )val));
#line 360
  up_write(& led->rwsem);
#line 360
  return ((ssize_t )count);
}
}
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x08_attr  =    {{"0x08", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x08};
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x09(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 361
  __mptr = (struct device  const  *)dev;
#line 361
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 361
  led = (struct bd2802_led *)tmp;
#line 361
  if (count == 0UL) {
#line 361
    return (-22L);
  } else {

  }
#line 361
  ret = kstrtoul(buf, 16U, & val);
#line 361
  if (ret != 0) {
#line 361
    return ((ssize_t )ret);
  } else {

  }
#line 361
  down_write(& led->rwsem);
#line 361
  bd2802_write_byte(led->client, 9, (int )((unsigned char )val));
#line 361
  up_write(& led->rwsem);
#line 361
  return ((ssize_t )count);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x09_attr  =    {{"0x09", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x09};
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0a(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 362
  __mptr = (struct device  const  *)dev;
#line 362
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 362
  led = (struct bd2802_led *)tmp;
#line 362
  if (count == 0UL) {
#line 362
    return (-22L);
  } else {

  }
#line 362
  ret = kstrtoul(buf, 16U, & val);
#line 362
  if (ret != 0) {
#line 362
    return ((ssize_t )ret);
  } else {

  }
#line 362
  down_write(& led->rwsem);
#line 362
  bd2802_write_byte(led->client, 10, (int )((unsigned char )val));
#line 362
  up_write(& led->rwsem);
#line 362
  return ((ssize_t )count);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0a_attr  =    {{"0x0a", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0a};
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0b(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 363
  __mptr = (struct device  const  *)dev;
#line 363
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 363
  led = (struct bd2802_led *)tmp;
#line 363
  if (count == 0UL) {
#line 363
    return (-22L);
  } else {

  }
#line 363
  ret = kstrtoul(buf, 16U, & val);
#line 363
  if (ret != 0) {
#line 363
    return ((ssize_t )ret);
  } else {

  }
#line 363
  down_write(& led->rwsem);
#line 363
  bd2802_write_byte(led->client, 11, (int )((unsigned char )val));
#line 363
  up_write(& led->rwsem);
#line 363
  return ((ssize_t )count);
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0b_attr  =    {{"0x0b", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0b};
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0c(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 364
  __mptr = (struct device  const  *)dev;
#line 364
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 364
  led = (struct bd2802_led *)tmp;
#line 364
  if (count == 0UL) {
#line 364
    return (-22L);
  } else {

  }
#line 364
  ret = kstrtoul(buf, 16U, & val);
#line 364
  if (ret != 0) {
#line 364
    return ((ssize_t )ret);
  } else {

  }
#line 364
  down_write(& led->rwsem);
#line 364
  bd2802_write_byte(led->client, 12, (int )((unsigned char )val));
#line 364
  up_write(& led->rwsem);
#line 364
  return ((ssize_t )count);
}
}
#line 364 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0c_attr  =    {{"0x0c", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0c};
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0d(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 365
  __mptr = (struct device  const  *)dev;
#line 365
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 365
  led = (struct bd2802_led *)tmp;
#line 365
  if (count == 0UL) {
#line 365
    return (-22L);
  } else {

  }
#line 365
  ret = kstrtoul(buf, 16U, & val);
#line 365
  if (ret != 0) {
#line 365
    return ((ssize_t )ret);
  } else {

  }
#line 365
  down_write(& led->rwsem);
#line 365
  bd2802_write_byte(led->client, 13, (int )((unsigned char )val));
#line 365
  up_write(& led->rwsem);
#line 365
  return ((ssize_t )count);
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0d_attr  =    {{"0x0d", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0d};
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0e(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 366
  __mptr = (struct device  const  *)dev;
#line 366
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 366
  led = (struct bd2802_led *)tmp;
#line 366
  if (count == 0UL) {
#line 366
    return (-22L);
  } else {

  }
#line 366
  ret = kstrtoul(buf, 16U, & val);
#line 366
  if (ret != 0) {
#line 366
    return ((ssize_t )ret);
  } else {

  }
#line 366
  down_write(& led->rwsem);
#line 366
  bd2802_write_byte(led->client, 14, (int )((unsigned char )val));
#line 366
  up_write(& led->rwsem);
#line 366
  return ((ssize_t )count);
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0e_attr  =    {{"0x0e", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0e};
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x0f(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 367
  __mptr = (struct device  const  *)dev;
#line 367
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 367
  led = (struct bd2802_led *)tmp;
#line 367
  if (count == 0UL) {
#line 367
    return (-22L);
  } else {

  }
#line 367
  ret = kstrtoul(buf, 16U, & val);
#line 367
  if (ret != 0) {
#line 367
    return ((ssize_t )ret);
  } else {

  }
#line 367
  down_write(& led->rwsem);
#line 367
  bd2802_write_byte(led->client, 15, (int )((unsigned char )val));
#line 367
  up_write(& led->rwsem);
#line 367
  return ((ssize_t )count);
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x0f_attr  =    {{"0x0f", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x0f};
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x10(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 368
  __mptr = (struct device  const  *)dev;
#line 368
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 368
  led = (struct bd2802_led *)tmp;
#line 368
  if (count == 0UL) {
#line 368
    return (-22L);
  } else {

  }
#line 368
  ret = kstrtoul(buf, 16U, & val);
#line 368
  if (ret != 0) {
#line 368
    return ((ssize_t )ret);
  } else {

  }
#line 368
  down_write(& led->rwsem);
#line 368
  bd2802_write_byte(led->client, 16, (int )((unsigned char )val));
#line 368
  up_write(& led->rwsem);
#line 368
  return ((ssize_t )count);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x10_attr  =    {{"0x10", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x10};
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x11(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 369
  __mptr = (struct device  const  *)dev;
#line 369
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 369
  led = (struct bd2802_led *)tmp;
#line 369
  if (count == 0UL) {
#line 369
    return (-22L);
  } else {

  }
#line 369
  ret = kstrtoul(buf, 16U, & val);
#line 369
  if (ret != 0) {
#line 369
    return ((ssize_t )ret);
  } else {

  }
#line 369
  down_write(& led->rwsem);
#line 369
  bd2802_write_byte(led->client, 17, (int )((unsigned char )val));
#line 369
  up_write(& led->rwsem);
#line 369
  return ((ssize_t )count);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x11_attr  =    {{"0x11", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x11};
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x12(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 370
  __mptr = (struct device  const  *)dev;
#line 370
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 370
  led = (struct bd2802_led *)tmp;
#line 370
  if (count == 0UL) {
#line 370
    return (-22L);
  } else {

  }
#line 370
  ret = kstrtoul(buf, 16U, & val);
#line 370
  if (ret != 0) {
#line 370
    return ((ssize_t )ret);
  } else {

  }
#line 370
  down_write(& led->rwsem);
#line 370
  bd2802_write_byte(led->client, 18, (int )((unsigned char )val));
#line 370
  up_write(& led->rwsem);
#line 370
  return ((ssize_t )count);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x12_attr  =    {{"0x12", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x12};
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x13(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 371
  __mptr = (struct device  const  *)dev;
#line 371
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 371
  led = (struct bd2802_led *)tmp;
#line 371
  if (count == 0UL) {
#line 371
    return (-22L);
  } else {

  }
#line 371
  ret = kstrtoul(buf, 16U, & val);
#line 371
  if (ret != 0) {
#line 371
    return ((ssize_t )ret);
  } else {

  }
#line 371
  down_write(& led->rwsem);
#line 371
  bd2802_write_byte(led->client, 19, (int )((unsigned char )val));
#line 371
  up_write(& led->rwsem);
#line 371
  return ((ssize_t )count);
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x13_attr  =    {{"0x13", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x13};
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x14(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 372
  __mptr = (struct device  const  *)dev;
#line 372
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 372
  led = (struct bd2802_led *)tmp;
#line 372
  if (count == 0UL) {
#line 372
    return (-22L);
  } else {

  }
#line 372
  ret = kstrtoul(buf, 16U, & val);
#line 372
  if (ret != 0) {
#line 372
    return ((ssize_t )ret);
  } else {

  }
#line 372
  down_write(& led->rwsem);
#line 372
  bd2802_write_byte(led->client, 20, (int )((unsigned char )val));
#line 372
  up_write(& led->rwsem);
#line 372
  return ((ssize_t )count);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x14_attr  =    {{"0x14", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x14};
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_reg0x15(struct device *dev , struct device_attribute *attr ,
                                    char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 373
  __mptr = (struct device  const  *)dev;
#line 373
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 373
  led = (struct bd2802_led *)tmp;
#line 373
  if (count == 0UL) {
#line 373
    return (-22L);
  } else {

  }
#line 373
  ret = kstrtoul(buf, 16U, & val);
#line 373
  if (ret != 0) {
#line 373
    return ((ssize_t )ret);
  } else {

  }
#line 373
  down_write(& led->rwsem);
#line 373
  bd2802_write_byte(led->client, 21, (int )((unsigned char )val));
#line 373
  up_write(& led->rwsem);
#line 373
  return ((ssize_t )count);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_reg0x15_attr  =    {{"0x15", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0}, {(char)0},
                                  {(char)0}, {(char)0}, {(char)0}}}}, 0, & bd2802_store_reg0x15};
#line 375 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute *bd2802_addr_attributes[22U]  = 
#line 375
  {      & bd2802_reg0x00_attr,      & bd2802_reg0x01_attr,      & bd2802_reg0x02_attr,      & bd2802_reg0x03_attr, 
        & bd2802_reg0x04_attr,      & bd2802_reg0x05_attr,      & bd2802_reg0x06_attr,      & bd2802_reg0x07_attr, 
        & bd2802_reg0x08_attr,      & bd2802_reg0x09_attr,      & bd2802_reg0x0a_attr,      & bd2802_reg0x0b_attr, 
        & bd2802_reg0x0c_attr,      & bd2802_reg0x0d_attr,      & bd2802_reg0x0e_attr,      & bd2802_reg0x0f_attr, 
        & bd2802_reg0x10_attr,      & bd2802_reg0x11_attr,      & bd2802_reg0x12_attr,      & bd2802_reg0x13_attr, 
        & bd2802_reg0x14_attr,      & bd2802_reg0x15_attr};
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_enable_adv_conf(struct bd2802_led *led ) 
{ 
  int i ;
  int ret ;
  int tmp ;

  {
#line 404
  i = 0;
#line 404
  goto ldv_19731;
  ldv_19730: 
#line 405
  ret = device_create_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_addr_attributes[i]);
#line 407
  if (ret != 0) {
#line 408
    dev_err((struct device  const  *)(& (led->client)->dev), "failed: sysfs file %s\n",
            (bd2802_addr_attributes[i])->attr.name);
#line 410
    goto failed_remove_files;
  } else {

  }
#line 404
  i = i + 1;
  ldv_19731: ;
#line 404
  if ((unsigned int )i <= 21U) {
#line 405
    goto ldv_19730;
  } else {

  }
#line 414
  tmp = bd2802_is_all_off(led);
#line 414
  if (tmp != 0) {
#line 415
    bd2802_reset_cancel(led);
  } else {

  }
#line 417
  led->adf_on = 1;
#line 419
  return;
  failed_remove_files: 
#line 422
  i = i - 1;
#line 422
  goto ldv_19734;
  ldv_19733: 
#line 423
  device_remove_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_addr_attributes[i]);
#line 422
  i = i - 1;
  ldv_19734: ;
#line 422
  if (i >= 0) {
#line 423
    goto ldv_19733;
  } else {

  }

#line 427
  return;
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_disable_adv_conf(struct bd2802_led *led ) 
{ 
  int i ;
  int tmp ;

  {
#line 431
  i = 0;
#line 431
  goto ldv_19743;
  ldv_19742: 
#line 432
  device_remove_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_addr_attributes[i]);
#line 431
  i = i + 1;
  ldv_19743: ;
#line 431
  if ((unsigned int )i <= 21U) {
#line 432
    goto ldv_19742;
  } else {

  }
#line 435
  tmp = bd2802_is_all_off(led);
#line 435
  if (tmp != 0) {
#line 436
    gpio_set_value((unsigned int )(led->pdata)->reset_gpio, 0);
  } else {

  }
#line 438
  led->adf_on = 0;
#line 439
  return;
}
}
#line 441 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_show_adv_conf(struct device *dev , struct device_attribute *attr ,
                                    char *buf ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  ssize_t ret ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 444
  __mptr = (struct device  const  *)dev;
#line 444
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 444
  led = (struct bd2802_led *)tmp;
#line 447
  down_read(& led->rwsem);
#line 448
  if (led->adf_on != 0) {
#line 449
    tmp___0 = sprintf(buf, "on\n");
#line 449
    ret = (ssize_t )tmp___0;
  } else {
#line 451
    tmp___1 = sprintf(buf, "off\n");
#line 451
    ret = (ssize_t )tmp___1;
  }
#line 452
  up_read(& led->rwsem);
#line 454
  return (ret);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_adv_conf(struct device *dev , struct device_attribute *attr ,
                                     char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 460
  __mptr = (struct device  const  *)dev;
#line 460
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 460
  led = (struct bd2802_led *)tmp;
#line 462
  if (count == 0UL) {
#line 463
    return (-22L);
  } else {

  }
#line 465
  down_write(& led->rwsem);
#line 466
  if (led->adf_on == 0) {
#line 466
    tmp___1 = strncmp(buf, "on", 2UL);
#line 466
    if (tmp___1 == 0) {
#line 467
      bd2802_enable_adv_conf(led);
    } else {
#line 466
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 468
  if (led->adf_on != 0) {
#line 468
    tmp___0 = strncmp(buf, "off", 3UL);
#line 468
    if (tmp___0 == 0) {
#line 469
      bd2802_disable_adv_conf(led);
    } else {

    }
  } else {

  }
#line 470
  up_write(& led->rwsem);
#line 472
  return ((ssize_t )count);
}
}
#line 475 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_adv_conf_attr  =    {{"advanced_configuration", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0},
                                                    {(char)0}, {(char)0}, {(char)0},
                                                    {(char)0}, {(char)0}}}}, & bd2802_show_adv_conf,
    & bd2802_store_adv_conf};
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_show_wave_pattern(struct device *dev , struct device_attribute *attr ,
                                        char *buf ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  ssize_t ret ;
  int tmp___0 ;

  {
#line 520
  __mptr = (struct device  const  *)dev;
#line 520
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 520
  led = (struct bd2802_led *)tmp;
#line 520
  down_read(& led->rwsem);
#line 520
  tmp___0 = sprintf(buf, "0x%02x\n", led->wave_pattern);
#line 520
  ret = (ssize_t )tmp___0;
#line 520
  up_read(& led->rwsem);
#line 520
  return (ret);
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_wave_pattern(struct device *dev , struct device_attribute *attr ,
                                         char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 520
  __mptr = (struct device  const  *)dev;
#line 520
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 520
  led = (struct bd2802_led *)tmp;
#line 520
  if (count == 0UL) {
#line 520
    return (-22L);
  } else {

  }
#line 520
  ret = kstrtoul(buf, 16U, & val);
#line 520
  if (ret != 0) {
#line 520
    return ((ssize_t )ret);
  } else {

  }
#line 520
  down_write(& led->rwsem);
#line 520
  led->wave_pattern = (int )val;
#line 520
  up_write(& led->rwsem);
#line 520
  return ((ssize_t )count);
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_wave_pattern_attr  =    {{"wave_pattern", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                          {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & bd2802_show_wave_pattern, & bd2802_store_wave_pattern};
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_show_rgb_current(struct device *dev , struct device_attribute *attr ,
                                       char *buf ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  ssize_t ret ;
  int tmp___0 ;

  {
#line 521
  __mptr = (struct device  const  *)dev;
#line 521
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 521
  led = (struct bd2802_led *)tmp;
#line 521
  down_read(& led->rwsem);
#line 521
  tmp___0 = sprintf(buf, "0x%02x\n", led->rgb_current);
#line 521
  ret = (ssize_t )tmp___0;
#line 521
  up_read(& led->rwsem);
#line 521
  return (ret);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static ssize_t bd2802_store_rgb_current(struct device *dev , struct device_attribute *attr ,
                                        char const   *buf , size_t count ) 
{ 
  struct bd2802_led *led ;
  struct device  const  *__mptr ;
  void *tmp ;
  unsigned long val ;
  int ret ;

  {
#line 521
  __mptr = (struct device  const  *)dev;
#line 521
  tmp = i2c_get_clientdata((struct i2c_client  const  *)((struct i2c_client *)__mptr + 0xffffffffffffffd8UL));
#line 521
  led = (struct bd2802_led *)tmp;
#line 521
  if (count == 0UL) {
#line 521
    return (-22L);
  } else {

  }
#line 521
  ret = kstrtoul(buf, 16U, & val);
#line 521
  if (ret != 0) {
#line 521
    return ((ssize_t )ret);
  } else {

  }
#line 521
  down_write(& led->rwsem);
#line 521
  led->rgb_current = (int )val;
#line 521
  up_write(& led->rwsem);
#line 521
  return ((ssize_t )count);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute bd2802_rgb_current_attr  =    {{"rgb_current", 420U, (_Bool)0, 0, {{{(char)0}, {(char)0}, {(char)0}, {(char)0},
                                         {(char)0}, {(char)0}, {(char)0}, {(char)0}}}},
    & bd2802_show_rgb_current, & bd2802_store_rgb_current};
#line 523 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static struct device_attribute *bd2802_attributes[3U]  = {      & bd2802_adv_conf_attr,      & bd2802_wave_pattern_attr,      & bd2802_rgb_current_attr};
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_led_work(struct work_struct *work ) 
{ 
  struct bd2802_led *led ;
  struct work_struct  const  *__mptr ;

  {
#line 531
  __mptr = (struct work_struct  const  *)work;
#line 531
  led = (struct bd2802_led *)__mptr + 0xffffffffffffff60UL;
#line 533
  if ((unsigned int )led->state != 0U) {
#line 534
    bd2802_turn_on(led, led->led_id, led->color, led->state);
  } else {
#line 536
    bd2802_turn_off(led, led->led_id, led->color);
  }
#line 537
  return;
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led1r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 567
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 567
  led = (struct bd2802_led *)__mptr + 0xffffffffffffff08UL;
#line 567
  led->led_id = LED1;
#line 567
  led->color = RED;
#line 567
  if ((unsigned int )value == 0U) {
#line 567
    led->state = BD2802_OFF;
  } else {
#line 567
    led->state = BD2802_ON;
  }
#line 567
  schedule_work(& led->work);
#line 568
  return;
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led1r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 567
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 567
  led = (struct bd2802_led *)__mptr + 0xffffffffffffff08UL;
#line 567
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 567
    return (-22);
  } else {

  }
#line 567
  led->led_id = LED1;
#line 567
  led->color = RED;
#line 567
  led->state = BD2802_BLINK;
#line 567
  schedule_work(& led->work);
#line 567
  return (0);
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led1g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 568
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 568
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffd68UL;
#line 568
  led->led_id = LED1;
#line 568
  led->color = GREEN;
#line 568
  if ((unsigned int )value == 0U) {
#line 568
    led->state = BD2802_OFF;
  } else {
#line 568
    led->state = BD2802_ON;
  }
#line 568
  schedule_work(& led->work);
#line 569
  return;
}
}
#line 568 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led1g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 568
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 568
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffd68UL;
#line 568
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 568
    return (-22);
  } else {

  }
#line 568
  led->led_id = LED1;
#line 568
  led->color = GREEN;
#line 568
  led->state = BD2802_BLINK;
#line 568
  schedule_work(& led->work);
#line 568
  return (0);
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led1b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 569
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 569
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffbc8UL;
#line 569
  led->led_id = LED1;
#line 569
  led->color = BLUE;
#line 569
  if ((unsigned int )value == 0U) {
#line 569
    led->state = BD2802_OFF;
  } else {
#line 569
    led->state = BD2802_ON;
  }
#line 569
  schedule_work(& led->work);
#line 570
  return;
}
}
#line 569 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led1b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 569
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 569
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffbc8UL;
#line 569
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 569
    return (-22);
  } else {

  }
#line 569
  led->led_id = LED1;
#line 569
  led->color = BLUE;
#line 569
  led->state = BD2802_BLINK;
#line 569
  schedule_work(& led->work);
#line 569
  return (0);
}
}
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led2r_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 570
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 570
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffa28UL;
#line 570
  led->led_id = LED2;
#line 570
  led->color = RED;
#line 570
  if ((unsigned int )value == 0U) {
#line 570
    led->state = BD2802_OFF;
  } else {
#line 570
    led->state = BD2802_ON;
  }
#line 570
  schedule_work(& led->work);
#line 571
  return;
}
}
#line 570 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led2r_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 570
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 570
  led = (struct bd2802_led *)__mptr + 0xfffffffffffffa28UL;
#line 570
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 570
    return (-22);
  } else {

  }
#line 570
  led->led_id = LED2;
#line 570
  led->color = RED;
#line 570
  led->state = BD2802_BLINK;
#line 570
  schedule_work(& led->work);
#line 570
  return (0);
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led2g_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 571
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 571
  led = (struct bd2802_led *)__mptr + 0xfffffffffffff888UL;
#line 571
  led->led_id = LED2;
#line 571
  led->color = GREEN;
#line 571
  if ((unsigned int )value == 0U) {
#line 571
    led->state = BD2802_OFF;
  } else {
#line 571
    led->state = BD2802_ON;
  }
#line 571
  schedule_work(& led->work);
#line 572
  return;
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led2g_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 571
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 571
  led = (struct bd2802_led *)__mptr + 0xfffffffffffff888UL;
#line 571
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 571
    return (-22);
  } else {

  }
#line 571
  led->led_id = LED2;
#line 571
  led->color = GREEN;
#line 571
  led->state = BD2802_BLINK;
#line 571
  schedule_work(& led->work);
#line 571
  return (0);
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_set_led2b_brightness(struct led_classdev *led_cdev , enum led_brightness value ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 572
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 572
  led = (struct bd2802_led *)__mptr + 0xfffffffffffff6e8UL;
#line 572
  led->led_id = LED2;
#line 572
  led->color = BLUE;
#line 572
  if ((unsigned int )value == 0U) {
#line 572
    led->state = BD2802_OFF;
  } else {
#line 572
    led->state = BD2802_ON;
  }
#line 572
  schedule_work(& led->work);
#line 573
  return;
}
}
#line 572 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_set_led2b_blink(struct led_classdev *led_cdev , unsigned long *delay_on ,
                                  unsigned long *delay_off ) 
{ 
  struct bd2802_led *led ;
  struct led_classdev  const  *__mptr ;

  {
#line 572
  __mptr = (struct led_classdev  const  *)led_cdev;
#line 572
  led = (struct bd2802_led *)__mptr + 0xfffffffffffff6e8UL;
#line 572
  if (*delay_on == 0UL || *delay_off == 0UL) {
#line 572
    return (-22);
  } else {

  }
#line 572
  led->led_id = LED2;
#line 572
  led->color = BLUE;
#line 572
  led->state = BD2802_BLINK;
#line 572
  schedule_work(& led->work);
#line 572
  return (0);
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_register_led_classdev(struct bd2802_led *led ) 
{ 
  int ret ;
  struct lock_class_key __key ;
  atomic_long_t __constr_expr_0 ;

  {
#line 578
  __init_work(& led->work, 0);
#line 578
  __constr_expr_0.counter = 2097664L;
#line 578
  led->work.data = __constr_expr_0;
#line 578
  lockdep_init_map(& led->work.lockdep_map, "(&led->work)", & __key, 0);
#line 578
  INIT_LIST_HEAD(& led->work.entry);
#line 578
  led->work.func = & bd2802_led_work;
#line 580
  led->cdev_led1r.name = "led1_R";
#line 581
  led->cdev_led1r.brightness = 0;
#line 582
  led->cdev_led1r.brightness_set = & bd2802_set_led1r_brightness;
#line 583
  led->cdev_led1r.blink_set = & bd2802_set_led1r_blink;
#line 585
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1r);
#line 586
  if (ret < 0) {
#line 587
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led1r.name);
#line 589
    goto failed_unregister_led1_R;
  } else {

  }
#line 592
  led->cdev_led1g.name = "led1_G";
#line 593
  led->cdev_led1g.brightness = 0;
#line 594
  led->cdev_led1g.brightness_set = & bd2802_set_led1g_brightness;
#line 595
  led->cdev_led1g.blink_set = & bd2802_set_led1g_blink;
#line 597
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1g);
#line 598
  if (ret < 0) {
#line 599
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led1g.name);
#line 601
    goto failed_unregister_led1_G;
  } else {

  }
#line 604
  led->cdev_led1b.name = "led1_B";
#line 605
  led->cdev_led1b.brightness = 0;
#line 606
  led->cdev_led1b.brightness_set = & bd2802_set_led1b_brightness;
#line 607
  led->cdev_led1b.blink_set = & bd2802_set_led1b_blink;
#line 609
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led1b);
#line 610
  if (ret < 0) {
#line 611
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led1b.name);
#line 613
    goto failed_unregister_led1_B;
  } else {

  }
#line 616
  led->cdev_led2r.name = "led2_R";
#line 617
  led->cdev_led2r.brightness = 0;
#line 618
  led->cdev_led2r.brightness_set = & bd2802_set_led2r_brightness;
#line 619
  led->cdev_led2r.blink_set = & bd2802_set_led2r_blink;
#line 621
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2r);
#line 622
  if (ret < 0) {
#line 623
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led2r.name);
#line 625
    goto failed_unregister_led2_R;
  } else {

  }
#line 628
  led->cdev_led2g.name = "led2_G";
#line 629
  led->cdev_led2g.brightness = 0;
#line 630
  led->cdev_led2g.brightness_set = & bd2802_set_led2g_brightness;
#line 631
  led->cdev_led2g.blink_set = & bd2802_set_led2g_blink;
#line 633
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2g);
#line 634
  if (ret < 0) {
#line 635
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led2g.name);
#line 637
    goto failed_unregister_led2_G;
  } else {

  }
#line 640
  led->cdev_led2b.name = "led2_B";
#line 641
  led->cdev_led2b.brightness = 0;
#line 642
  led->cdev_led2b.brightness_set = & bd2802_set_led2b_brightness;
#line 643
  led->cdev_led2b.blink_set = & bd2802_set_led2b_blink;
#line 644
  led->cdev_led2b.flags = led->cdev_led2b.flags | 65536;
#line 646
  ret = led_classdev_register(& (led->client)->dev, & led->cdev_led2b);
#line 647
  if (ret < 0) {
#line 648
    dev_err((struct device  const  *)(& (led->client)->dev), "couldn\'t register LED %s\n",
            led->cdev_led2b.name);
#line 650
    goto failed_unregister_led2_B;
  } else {

  }
#line 653
  return (0);
  failed_unregister_led2_B: 
#line 656
  led_classdev_unregister(& led->cdev_led2g);
  failed_unregister_led2_G: 
#line 658
  led_classdev_unregister(& led->cdev_led2r);
  failed_unregister_led2_R: 
#line 660
  led_classdev_unregister(& led->cdev_led1b);
  failed_unregister_led1_B: 
#line 662
  led_classdev_unregister(& led->cdev_led1g);
  failed_unregister_led1_G: 
#line 664
  led_classdev_unregister(& led->cdev_led1r);
  failed_unregister_led1_R: ;
#line 667
  return (ret);
}
}
#line 670 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static void bd2802_unregister_led_classdev(struct bd2802_led *led ) 
{ 


  {
#line 672
  cancel_work_sync(& led->work);
#line 673
  led_classdev_unregister(& led->cdev_led2b);
#line 674
  led_classdev_unregister(& led->cdev_led2g);
#line 675
  led_classdev_unregister(& led->cdev_led2r);
#line 676
  led_classdev_unregister(& led->cdev_led1b);
#line 677
  led_classdev_unregister(& led->cdev_led1g);
#line 678
  led_classdev_unregister(& led->cdev_led1r);
#line 679
  return;
}
}
#line 681 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_probe(struct i2c_client *client , struct i2c_device_id  const  *id ) 
{ 
  struct bd2802_led *led ;
  struct bd2802_led_platform_data *pdata ;
  int ret ;
  int i ;
  void *tmp ;
  struct bd2802_led_platform_data *tmp___0 ;
  struct lock_class_key __key ;

  {
#line 688
  tmp = devm_kzalloc(& client->dev, 2768UL, 208U);
#line 688
  led = (struct bd2802_led *)tmp;
#line 689
  if ((unsigned long )led == (unsigned long )((struct bd2802_led *)0)) {
#line 690
    dev_err((struct device  const  *)(& client->dev), "failed to allocate driver data\n");
#line 691
    return (-12);
  } else {

  }
#line 694
  led->client = client;
#line 695
  tmp___0 = (struct bd2802_led_platform_data *)client->dev.platform_data;
#line 695
  led->pdata = tmp___0;
#line 695
  pdata = tmp___0;
#line 696
  i2c_set_clientdata(client, (void *)led);
#line 699
  gpio_request_one((unsigned int )pdata->reset_gpio, 2UL, "RGB_RESETB");
#line 702
  __const_udelay(429500UL);
#line 705
  ret = bd2802_write_byte(client, 0, 0);
#line 706
  if (ret < 0) {
#line 707
    dev_err((struct device  const  *)(& client->dev), "failed to detect device\n");
#line 708
    return (ret);
  } else {
#line 710
    _dev_info((struct device  const  *)(& client->dev), "return 0x%02x\n", ret);
  }
#line 713
  gpio_set_value((unsigned int )(led->pdata)->reset_gpio, 0);
#line 716
  led->wave_pattern = 3;
#line 717
  led->rgb_current = 16;
#line 719
  __init_rwsem(& led->rwsem, "&led->rwsem", & __key);
#line 721
  i = 0;
#line 721
  goto ldv_19931;
  ldv_19930: 
#line 722
  ret = device_create_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_attributes[i]);
#line 724
  if (ret != 0) {
#line 725
    dev_err((struct device  const  *)(& (led->client)->dev), "failed: sysfs file %s\n",
            (bd2802_attributes[i])->attr.name);
#line 727
    goto failed_unregister_dev_file;
  } else {

  }
#line 721
  i = i + 1;
  ldv_19931: ;
#line 721
  if ((unsigned int )i <= 2U) {
#line 722
    goto ldv_19930;
  } else {

  }
#line 731
  ret = bd2802_register_led_classdev(led);
#line 732
  if (ret < 0) {
#line 733
    goto failed_unregister_dev_file;
  } else {

  }
#line 735
  return (0);
  failed_unregister_dev_file: 
#line 738
  i = i - 1;
#line 738
  goto ldv_19934;
  ldv_19933: 
#line 739
  device_remove_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_attributes[i]);
#line 738
  i = i - 1;
  ldv_19934: ;
#line 738
  if (i >= 0) {
#line 739
    goto ldv_19933;
  } else {

  }

#line 740
  return (ret);
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
static int bd2802_remove(struct i2c_client *client ) 
{ 
  struct bd2802_led *led ;
  void *tmp ;
  int i ;

  {
#line 745
  tmp = i2c_get_clientdata((struct i2c_client  const  *)client);
#line 745
  led = (struct bd2802_led *)tmp;
#line 748
  gpio_set_value((unsigned int )(led->pdata)->reset_gpio, 0);
#line 749
  bd2802_unregister_led_classdev(led);
#line 750
  if (led->adf_on != 0) {
#line 751
    bd2802_disable_adv_conf(led);
  } else {

  }
#line 752
  i = 0;
#line 752
  goto ldv_19944;
  ldv_19943: 
#line 753
  device_remove_file(& (led->client)->dev, (struct device_attribute  const  *)bd2802_attributes[i]);
#line 752
  i = i + 1;
  ldv_19944: ;
#line 752
  if ((unsigned int )i <= 2U) {
#line 753
    goto ldv_19943;
  } else {

  }

#line 755
  return (0);
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
struct i2c_device_id  const  __mod_i2c_device_table  ;
#line 841
void ldv_check_final_state(void) ;
#line 844
extern void ldv_check_return_value(int  ) ;
#line 847
extern void ldv_check_return_value_probe(int  ) ;
#line 850
extern void ldv_initialize(void) ;
#line 853
extern void ldv_handler_precall(void) ;
#line 856
extern int nondet_int(void) ;
#line 859 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 862 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/08_1a/drivers/leds/leds-bd2802.c.prepared"
void main(void) 
{ 
  struct device *var_group1 ;
  struct device_attribute *var_group2 ;
  char *var_bd2802_show_adv_conf_16_p2 ;
  char const   *var_bd2802_store_adv_conf_17_p2 ;
  size_t var_bd2802_store_adv_conf_17_p3 ;
  struct i2c_client *var_group3 ;
  struct i2c_device_id  const  *var_bd2802_probe_21_p1 ;
  int res_bd2802_probe_21 ;
  int res_bd2802_remove_22 ;
  int ldv_s_bd2802_i2c_driver_i2c_driver ;
  int tmp ;
  int tmp___0 ;

  {
#line 1332
  ldv_s_bd2802_i2c_driver_i2c_driver = 0;
#line 1320
  LDV_IN_INTERRUPT = 1;
#line 1329
  ldv_initialize();
#line 1335
  goto ldv_20024;
  ldv_20023: 
#line 1339
  tmp = nondet_int();
#line 1339
  switch (tmp) {
  case 0: 
#line 1384
  ldv_handler_precall();
#line 1385
  bd2802_show_adv_conf(var_group1, var_group2, var_bd2802_show_adv_conf_16_p2);
#line 1461
  goto ldv_20017;
  case 1: 
#line 1505
  ldv_handler_precall();
#line 1506
  bd2802_store_adv_conf(var_group1, var_group2, var_bd2802_store_adv_conf_17_p2, var_bd2802_store_adv_conf_17_p3);
#line 1582
  goto ldv_20017;
  case 2: ;
#line 1586
  if (ldv_s_bd2802_i2c_driver_i2c_driver == 0) {
#line 1688
    res_bd2802_probe_21 = bd2802_probe(var_group3, var_bd2802_probe_21_p1);
#line 1689
    ldv_check_return_value(res_bd2802_probe_21);
#line 1690
    ldv_check_return_value_probe(res_bd2802_probe_21);
#line 1691
    if (res_bd2802_probe_21 != 0) {
#line 1692
      goto ldv_module_exit;
    } else {

    }
#line 1700
    ldv_s_bd2802_i2c_driver_i2c_driver = ldv_s_bd2802_i2c_driver_i2c_driver + 1;
  } else {

  }
#line 1706
  goto ldv_20017;
  case 3: ;
#line 1710
  if (ldv_s_bd2802_i2c_driver_i2c_driver == 1) {
#line 1812
    ldv_handler_precall();
#line 1813
    res_bd2802_remove_22 = bd2802_remove(var_group3);
#line 1814
    ldv_check_return_value(res_bd2802_remove_22);
#line 1815
    if (res_bd2802_remove_22 != 0) {
#line 1816
      goto ldv_module_exit;
    } else {

    }
#line 1824
    ldv_s_bd2802_i2c_driver_i2c_driver = 0;
  } else {

  }
#line 1830
  goto ldv_20017;
  default: ;
#line 1831
  goto ldv_20017;
  }
  ldv_20017: ;
  ldv_20024: 
#line 1335
  tmp___0 = nondet_int();
#line 1335
  if (tmp___0 != 0 || ldv_s_bd2802_i2c_driver_i2c_driver != 0) {
#line 1337
    goto ldv_20023;
  } else {

  }

  ldv_module_exit: ;
#line 1840
  ldv_check_final_state();
#line 1843
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/leds/leds-bd2802.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
