/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 32 "include/uapi/linux/types.h"
typedef __u16 __le16;
#line 34 "include/uapi/linux/types.h"
typedef __u32 __le32;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 176 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 176 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 181 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 181 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 182 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 187
struct hlist_node;
#line 187 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 191 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 202 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 157 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2023_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2023_8 ldv_2023 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2030_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2030_10 ldv_2030 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2147_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2162_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2163_11 {
   struct __anonstruct_ldv_2147_12 ldv_2147 ;
   struct __anonstruct_ldv_2162_13 ldv_2162 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2163_11 ldv_2163 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 335
struct thread_struct;
#line 337
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2766_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2766_18 ldv_2766 ;
};
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5121_23 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5127_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5128_22 {
   struct __anonstruct_ldv_5121_23 ldv_5121 ;
   struct __anonstruct_ldv_5127_24 ldv_5127 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5137_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5128_22 ldv_5128 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5137_25 ldv_5137 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 445
struct kmem_cache;
#line 446
struct perf_event;
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5956_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5957_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5956_29 ldv_5956 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5957_28 ldv_5957 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
struct timespec;
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 721 "include/linux/mmzone.h"
struct rw_semaphore;
#line 722 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 854 "include/linux/rcupdate.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 313 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 334
struct tvec_base;
#line 335 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 188 "include/linux/slab.h"
struct sock;
#line 189
struct kobject;
#line 190
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 196 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 93 "include/linux/bit_spinlock.h"
struct hlist_bl_node;
#line 93 "include/linux/bit_spinlock.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_12736_129 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_12738_128 {
   struct __anonstruct_ldv_12736_129 ldv_12736 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_12738_128 ldv_12738 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct inode;
#line 87
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_130 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_130 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 419 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380 "include/linux/radix-tree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 83
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 90
struct pid_namespace;
#line 90 "include/linux/rbtree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 42
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 54 "include/linux/delay.h"
struct percpu_rw_semaphore {
   unsigned int *counters ;
   bool locked ;
   struct mutex mtx ;
};
#line 85 "include/linux/percpu-rwsem.h"
struct block_device;
#line 86
struct io_context;
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 58
struct iovec;
#line 59
struct kiocb;
#line 60
struct pipe_inode_info;
#line 61
struct poll_table_struct;
#line 62
struct kstatfs;
#line 63
struct cred;
#line 64
struct swap_info_struct;
#line 64 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 240 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_14115_132 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_14115_132 ldv_14115 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 409
struct address_space;
#line 410
struct writeback_control;
#line 339 "include/linux/fs.h"
union __anonunion_arg_134 {
   char *buf ;
   void *data ;
};
#line 339 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_133 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_134 arg ;
   int error ;
};
#line 339 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_133 read_descriptor_t;
#line 342 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 401
struct backing_dev_info;
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 423
struct request_queue;
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
   struct percpu_rw_semaphore bd_block_size_semaphore ;
};
#line 498
struct posix_acl;
#line 499
struct inode_operations;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14552_135 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14572_136 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 499
struct file_lock;
#line 499
struct cdev;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_14588_137 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 499 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_14552_135 ldv_14552 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_14572_136 ldv_14572 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_14588_137 ldv_14588 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 727 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 735 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 758 "include/linux/fs.h"
union __anonunion_f_u_138 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 758 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_138 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 901
struct files_struct;
#line 901 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 902 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 907 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 924
struct nlm_lockowner;
#line 925 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_140 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_139 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_140 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_139 fl_u ;
};
#line 1011 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1217 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1233
struct file_system_type;
#line 1233
struct super_operations;
#line 1233
struct xattr_handler;
#line 1233
struct mtd_info;
#line 1233 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1474 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1513 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1548 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1595 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1808 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 93 "include/asm-generic/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/termios.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36
struct serial_icounter_struct;
#line 37 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 288 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 288
struct tty_port;
#line 288 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev *cdevs ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   unsigned int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   unsigned long flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct tty_port **ports ;
   struct ktermios **termios ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/pps.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 568 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 578
struct dma_coherent_mem;
#line 578 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 703 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 48 "include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec ts_real ;
};
#line 124 "include/linux/pps_kernel.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   void (*dcd_change)(struct tty_struct * , unsigned int  , struct pps_event_time * ) ;
   struct module *owner ;
   int refcount ;
};
#line 154 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   atomic_t users ;
   wait_queue_head_t wq_idle ;
};
#line 160 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 42 "include/linux/tty.h"
struct tty_bufhead {
   struct work_struct work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 62
struct signal_struct;
#line 63 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   void (*drop)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 189 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   unsigned char console : 1 ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 211 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct device *dev ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex legacy_mutex ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios termios ;
   struct ktermios termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct kernel_param;
#line 45 "include/linux/elf.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_19720_147 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_19720_147 ldv_19720 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 bInterfaceNumber ;
   kernel_ulong_t driver_info ;
};
#line 225 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 247 "include/uapi/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 269 "include/uapi/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 337 "include/uapi/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 357 "include/uapi/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 607 "include/uapi/linux/usb/ch9.h"
struct usb_ss_ep_comp_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bMaxBurst ;
   __u8 bmAttributes ;
   __le16 wBytesPerInterval ;
};
#line 686 "include/uapi/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 745 "include/uapi/linux/usb/ch9.h"
struct usb_bos_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumDeviceCaps ;
};
#line 795 "include/uapi/linux/usb/ch9.h"
struct usb_ext_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __le32 bmAttributes ;
};
#line 805 "include/uapi/linux/usb/ch9.h"
struct usb_ss_cap_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bmAttributes ;
   __le16 wSpeedSupported ;
   __u8 bFunctionalitySupport ;
   __u8 bU1devExitLat ;
   __le16 bU2DevExitLat ;
};
#line 834 "include/uapi/linux/usb/ch9.h"
struct usb_ss_container_id_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bDevCapabilityType ;
   __u8 bReserved ;
   __u8 ContainerID[16U] ;
};
#line 899
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_WIRELESS = 4,
    USB_SPEED_SUPER = 5
} ;
#line 908
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 189 "include/linux/hardirq.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112 "include/linux/uprobes.h"
union __anonunion_ldv_22270_151 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 112 "include/linux/uprobes.h"
struct __anonstruct_ldv_22280_155 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 112 "include/linux/uprobes.h"
union __anonunion_ldv_22282_154 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_22280_155 ldv_22280 ;
   int units ;
};
#line 112 "include/linux/uprobes.h"
struct __anonstruct_ldv_22284_153 {
   union __anonunion_ldv_22282_154 ldv_22282 ;
   atomic_t _count ;
};
#line 112 "include/linux/uprobes.h"
union __anonunion_ldv_22285_152 {
   unsigned long counters ;
   struct __anonstruct_ldv_22284_153 ldv_22284 ;
};
#line 112 "include/linux/uprobes.h"
struct __anonstruct_ldv_22286_150 {
   union __anonunion_ldv_22270_151 ldv_22270 ;
   union __anonunion_ldv_22285_152 ldv_22285 ;
};
#line 112 "include/linux/uprobes.h"
struct __anonstruct_ldv_22293_157 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 112
struct slab;
#line 112 "include/linux/uprobes.h"
struct __anonstruct_ldv_22299_158 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 112 "include/linux/uprobes.h"
union __anonunion_ldv_22300_156 {
   struct list_head lru ;
   struct __anonstruct_ldv_22293_157 ldv_22293 ;
   struct list_head list ;
   struct __anonstruct_ldv_22299_158 ldv_22299 ;
};
#line 112 "include/linux/uprobes.h"
union __anonunion_ldv_22305_159 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 112 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_22286_150 ldv_22286 ;
   union __anonunion_ldv_22300_156 ldv_22300 ;
   union __anonunion_ldv_22305_159 ldv_22305 ;
   unsigned long debug_flags ;
};
#line 170 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 218 "include/linux/mm_types.h"
struct __anonstruct_linear_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 218 "include/linux/mm_types.h"
union __anonunion_shared_160 {
   struct __anonstruct_linear_161 linear ;
   struct list_head nonlinear ;
};
#line 218
struct anon_vma;
#line 218
struct vm_operations_struct;
#line 218
struct mempolicy;
#line 218 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_160 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 278 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 284 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 297 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 310
struct linux_binfmt;
#line 310
struct mmu_notifier_mm;
#line 310 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 32
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_162 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_162 sigset_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_164 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_165 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_168 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_169 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_170 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_163 {
   int _pad[28U] ;
   struct __anonstruct__kill_164 _kill ;
   struct __anonstruct__timer_165 _timer ;
   struct __anonstruct__rt_166 _rt ;
   struct __anonstruct__sigchld_167 _sigchld ;
   struct __anonstruct__sigfault_168 _sigfault ;
   struct __anonstruct__sigpoll_169 _sigpoll ;
   struct __anonstruct__sigsys_170 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_163 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 11 "include/linux/signal.h"
struct user_struct;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 80 "include/linux/seccomp.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/seccomp.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23122_173 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23131_174 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_175 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_176 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_23122_173 ldv_23122 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_23131_174 ldv_23131 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_175 type_data ;
   union __anonunion_payload_176 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 111 "include/linux/sched.h"
struct cfs_rq;
#line 112
struct task_group;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 38 "include/linux/uio.h"
struct kioctx;
#line 39 "include/linux/uio.h"
union __anonunion_ki_obj_177 {
   void *user ;
   struct task_struct *tsk ;
};
#line 39
struct eventfd_ctx;
#line 39 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_177 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 368 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 428 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 435 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 452 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 488
struct autogroup;
#line 489
struct taskstats;
#line 489
struct tty_audit_buf;
#line 489 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 664 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 724 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1025
struct rq;
#line 1026 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1092 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1097 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1158
struct rt_rq;
#line 1158 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1181
struct mem_cgroup;
#line 1181 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1544
struct css_set;
#line 1544
struct compat_robust_list_head;
#line 1544 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 250 "include/linux/pm_runtime.h"
struct usb_device;
#line 251
struct usb_driver;
#line 252
struct wusb_dev;
#line 253
struct ep_device;
#line 254 "include/linux/pm_runtime.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct usb_ss_ep_comp_descriptor ss_ep_comp ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 75 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   int extralen ;
   unsigned char *extra ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
};
#line 90
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 97 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   unsigned char resetting_device : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   atomic_t pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 204 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 231 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 295 "include/linux/usb.h"
struct usb_host_bos {
   struct usb_bos_descriptor *desc ;
   struct usb_ext_cap_descriptor *ext_cap ;
   struct usb_ss_cap_descriptor *ss_cap ;
   struct usb_ss_container_id_descriptor *ss_id ;
};
#line 307 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 319
struct mon_bus;
#line 319 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 uses_pio_for_control ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   unsigned char no_stop_on_short : 1 ;
   unsigned int sg_tablesize ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct usb_bus *hs_companion ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 364
struct usb_tt;
#line 365
enum usb_device_removable {
    USB_DEVICE_REMOVABLE_UNKNOWN = 0,
    USB_DEVICE_REMOVABLE = 1,
    USB_DEVICE_FIXED = 2
} ;
#line 378 "include/linux/usb.h"
struct usb3_lpm_parameters {
   unsigned int mel ;
   unsigned int pel ;
   unsigned int sel ;
   int timeout ;
};
#line 432 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   u32 route ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_bos *bos ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   unsigned char lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_capable : 1 ;
   unsigned char usb2_hw_lpm_enabled : 1 ;
   unsigned char usb3_lpm_enabled : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   int maxchild ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   unsigned long connect_time ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char port_is_suspended : 1 ;
   struct wusb_dev *wusb_dev ;
   int slot_id ;
   enum usb_device_removable removable ;
   struct usb3_lpm_parameters u1_params ;
   struct usb3_lpm_parameters u2_params ;
   unsigned int lpm_disable_count ;
};
#line 763 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 934 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 944 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*unlocked_ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char disable_hub_initiated_lpm : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 1122 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1164
struct urb;
#line 1165 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
#line 1182
struct scatterlist;
#line 1182 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   unsigned int stream_id ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   struct scatterlist *sg ;
   int num_mapped_sgs ;
   int num_sgs ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1689 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 273 "include/linux/scatterlist.h"
struct __kfifo {
   unsigned int in ;
   unsigned int out ;
   unsigned int mask ;
   unsigned int esize ;
   void *data ;
};
#line 65 "include/linux/kfifo.h"
union __anonunion_ldv_28375_179 {
   struct __kfifo kfifo ;
   unsigned char *type ;
   char (*rectype)[0U] ;
   void *ptr ;
   void const   *ptr_const ;
};
#line 65 "include/linux/kfifo.h"
struct kfifo {
   union __anonunion_ldv_28375_179 ldv_28375 ;
   unsigned char buf[0U] ;
};
#line 851
struct usb_serial;
#line 851 "include/linux/kfifo.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_in_buffers[2U] ;
   struct urb *read_urbs[2U] ;
   unsigned long read_urbs_free ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   struct kfifo write_fifo ;
   unsigned char *bulk_out_buffers[2U] ;
   struct urb *write_urbs[2U] ;
   unsigned long write_urbs_free ;
   __u8 bulk_out_endpointAddress ;
   int tx_bytes ;
   unsigned long flags ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   unsigned long sysrq ;
   struct device dev ;
};
#line 134 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 134 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char attached : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 183 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   size_t bulk_in_size ;
   size_t bulk_out_size ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*disconnect)(struct usb_serial * ) ;
   void (*release)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*reset_resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * ) ;
   void (*close)(struct usb_serial_port * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   void (*dtr_rts)(struct usb_serial_port * , int  ) ;
   int (*carrier_raised)(struct usb_serial_port * ) ;
   void (*init_termios)(struct tty_struct * ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
   void (*process_read_urb)(struct urb * ) ;
   int (*prepare_write_buffer)(struct usb_serial_port * , void * , size_t  ) ;
};
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
struct cp210x_serial_private {
   __u8 bInterfaceNumber ;
};
#line 2392 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
typedef int ldv_func_ret_type___6;
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 168 "include/linux/mutex.h"
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_8(struct mutex *ldv_func_arg1 ) ;
#line 173
extern void mutex_unlock(struct mutex * ) ;
#line 176
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) ;
#line 35
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 39
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 43
void ldv_mutex_lock_disc_mutex_of_usb_serial(struct mutex *lock ) ;
#line 47
void ldv_mutex_unlock_disc_mutex_of_usb_serial(struct mutex *lock ) ;
#line 51
void ldv_mutex_lock_lock(struct mutex *lock ) ;
#line 55
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
#line 59
void ldv_mutex_lock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) ;
#line 63
void ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) ;
#line 67
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 68
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 71
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 267 "include/linux/slab.h"
__inline static void *kmalloc_array(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 269
  if (size != 0UL && 0xffffffffffffffffUL / size < n) {
#line 270
    return (0);
  } else {

  }
#line 271
  tmp = __kmalloc(n * size, flags);
#line 271
  return (tmp);
}
}
#line 280 "include/linux/slab.h"
__inline static void *kcalloc(size_t n , size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 282
  tmp = kmalloc_array(n, size, flags | 32768U);
#line 282
  return (tmp);
}
}
#line 375 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 377
  tmp = kmalloc(size, flags | 32768U);
#line 377
  return (tmp);
}
}
#line 921 "include/linux/device.h"
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 923
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 423 "include/linux/tty.h"
extern void tty_encode_baud_rate(struct tty_struct * , speed_t  , speed_t  ) ;
#line 605 "include/linux/usb.h"
extern int usb_reset_device(struct usb_device * ) ;
#line 1587
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1711 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1714
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 174 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_data(struct usb_serial *serial ) 
{ 


  {
#line 176
  return (serial->private);
}
}
#line 179 "include/linux/usb/serial.h"
__inline static void usb_set_serial_data(struct usb_serial *serial , void *data ) 
{ 


  {
#line 181
  serial->private = data;
#line 182
  return;
}
}
#line 318
extern int usb_serial_generic_open(struct tty_struct * , struct usb_serial_port * ) ;
#line 322
extern void usb_serial_generic_close(struct usb_serial_port * ) ;
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_open(struct tty_struct *tty , struct usb_serial_port *port ) ;
#line 85
static void cp210x_close(struct usb_serial_port *port ) ;
#line 86
static void cp210x_get_termios(struct tty_struct *tty , struct usb_serial_port *port ) ;
#line 87
static void cp210x_get_termios_port(struct usb_serial_port *port , unsigned int *cflagp ,
                                    unsigned int *baudp ) ;
#line 89
static void cp210x_change_speed(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) ;
#line 91
static void cp210x_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                               struct ktermios *old_termios ) ;
#line 93
static int cp210x_tiocmget(struct tty_struct *tty ) ;
#line 94
static int cp210x_tiocmset(struct tty_struct *tty , unsigned int set , unsigned int clear ) ;
#line 95
static int cp210x_tiocmset_port(struct usb_serial_port *port , unsigned int set ,
                                unsigned int clear ) ;
#line 97
static void cp210x_break_ctl(struct tty_struct *tty , int break_state ) ;
#line 98
static int cp210x_startup(struct usb_serial *serial ) ;
#line 99
static void cp210x_release(struct usb_serial *serial ) ;
#line 100
static void cp210x_dtr_rts(struct usb_serial_port *p , int on ) ;
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 322 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_get_config(struct usb_serial_port *port , u8 request , unsigned int *data ,
                             int size ) 
{ 
  struct usb_serial *serial ;
  struct cp210x_serial_private *spriv ;
  void *tmp ;
  __le32 *buf ;
  int result ;
  int i ;
  int length ;
  void *tmp___0 ;
  unsigned int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;

  {
#line 325
  serial = port->serial;
#line 326
  tmp = usb_get_serial_data(serial);
#line 326
  spriv = (struct cp210x_serial_private *)tmp;
#line 331
  length = (((size + -1) | 3) + 1) / 4;
#line 333
  tmp___0 = kcalloc((size_t )length, 4UL, 208U);
#line 333
  buf = (__le32 *)tmp___0;
#line 334
  if ((unsigned long )buf == (unsigned long )((__le32 *)0)) {
#line 335
    dev_err((struct device  const  *)(& port->dev), "%s - out of memory.\n", "cp210x_get_config");
#line 336
    return (-12);
  } else {

  }
#line 340
  tmp___1 = __create_pipe(serial->dev, 0U);
#line 340
  result = usb_control_msg(serial->dev, tmp___1 | 2147483776U, (int )request, 193,
                           0, (int )spriv->bInterfaceNumber, (void *)buf, (int )((__u16 )size),
                           5000);
#line 346
  i = 0;
#line 346
  goto ldv_28809;
  ldv_28808: 
#line 347
  *(data + (unsigned long )i) = *(buf + (unsigned long )i);
#line 346
  i = i + 1;
  ldv_28809: ;
#line 346
  if (i < length) {
#line 347
    goto ldv_28808;
  } else {

  }
#line 349
  kfree((void const   *)buf);
#line 351
  if (result != size) {
#line 352
    descriptor.modname = "cp210x";
#line 352
    descriptor.function = "cp210x_get_config";
#line 352
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 352
    descriptor.format = "%s - Unable to send config request, request=0x%x size=%d result=%d\n";
#line 352
    descriptor.lineno = 353U;
#line 352
    descriptor.flags = 0U;
#line 352
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 352
    if (tmp___2 != 0L) {
#line 352
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - Unable to send config request, request=0x%x size=%d result=%d\n",
                        "cp210x_get_config", (int )request, size, result);
    } else {

    }
#line 354
    if (result > 0) {
#line 355
      result = -71;
    } else {

    }
#line 357
    return (result);
  } else {

  }
#line 360
  return (0);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_set_config(struct usb_serial_port *port , u8 request , unsigned int *data ,
                             int size ) 
{ 
  struct usb_serial *serial ;
  struct cp210x_serial_private *spriv ;
  void *tmp ;
  __le32 *buf ;
  int result ;
  int i ;
  int length ;
  void *tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  struct _ddebug descriptor ;
  long tmp___3 ;

  {
#line 372
  serial = port->serial;
#line 373
  tmp = usb_get_serial_data(serial);
#line 373
  spriv = (struct cp210x_serial_private *)tmp;
#line 378
  length = (((size + -1) | 3) + 1) / 4;
#line 380
  tmp___0 = kmalloc((unsigned long )length * 4UL, 208U);
#line 380
  buf = (__le32 *)tmp___0;
#line 381
  if ((unsigned long )buf == (unsigned long )((__le32 *)0)) {
#line 382
    dev_err((struct device  const  *)(& port->dev), "%s - out of memory.\n", "cp210x_set_config");
#line 383
    return (-12);
  } else {

  }
#line 387
  i = 0;
#line 387
  goto ldv_28826;
  ldv_28825: 
#line 388
  *(buf + (unsigned long )i) = *(data + (unsigned long )i);
#line 387
  i = i + 1;
  ldv_28826: ;
#line 387
  if (i < length) {
#line 388
    goto ldv_28825;
  } else {

  }

#line 390
  if (size > 2) {
#line 391
    tmp___1 = __create_pipe(serial->dev, 0U);
#line 391
    result = usb_control_msg(serial->dev, tmp___1 | 2147483648U, (int )request, 65,
                             0, (int )spriv->bInterfaceNumber, (void *)buf, (int )((__u16 )size),
                             5000);
  } else {
#line 397
    tmp___2 = __create_pipe(serial->dev, 0U);
#line 397
    result = usb_control_msg(serial->dev, tmp___2 | 2147483648U, (int )request, 65,
                             (int )((__u16 )*data), (int )spriv->bInterfaceNumber,
                             0, 0, 5000);
  }
#line 404
  kfree((void const   *)buf);
#line 406
  if ((size > 2 && result != size) || result < 0) {
#line 407
    descriptor.modname = "cp210x";
#line 407
    descriptor.function = "cp210x_set_config";
#line 407
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 407
    descriptor.format = "%s - Unable to send request, request=0x%x size=%d result=%d\n";
#line 407
    descriptor.lineno = 408U;
#line 407
    descriptor.flags = 0U;
#line 407
    tmp___3 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 407
    if (tmp___3 != 0L) {
#line 407
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - Unable to send request, request=0x%x size=%d result=%d\n",
                        "cp210x_set_config", (int )request, size, result);
    } else {

    }
#line 409
    if (result > 0) {
#line 410
      result = -71;
    } else {

    }
#line 412
    return (result);
  } else {

  }
#line 415
  return (0);
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
__inline static int cp210x_set_config_single(struct usb_serial_port *port , u8 request ,
                                             unsigned int data ) 
{ 
  int tmp ;

  {
#line 426
  tmp = cp210x_set_config(port, (int )request, & data, 2);
#line 426
  return (tmp);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static unsigned int cp210x_quantise_baudrate(unsigned int baud ) 
{ 


  {
#line 435
  if (baud <= 300U) {
#line 436
    baud = 300U;
  } else
#line 437
  if (baud <= 600U) {
#line 437
    baud = 600U;
  } else
#line 438
  if (baud <= 1200U) {
#line 438
    baud = 1200U;
  } else
#line 439
  if (baud <= 1800U) {
#line 439
    baud = 1800U;
  } else
#line 440
  if (baud <= 2400U) {
#line 440
    baud = 2400U;
  } else
#line 441
  if (baud <= 4000U) {
#line 441
    baud = 4000U;
  } else
#line 442
  if (baud <= 4803U) {
#line 442
    baud = 4800U;
  } else
#line 443
  if (baud <= 7207U) {
#line 443
    baud = 7200U;
  } else
#line 444
  if (baud <= 9612U) {
#line 444
    baud = 9600U;
  } else
#line 445
  if (baud <= 14428U) {
#line 445
    baud = 14400U;
  } else
#line 446
  if (baud <= 16062U) {
#line 446
    baud = 16000U;
  } else
#line 447
  if (baud <= 19250U) {
#line 447
    baud = 19200U;
  } else
#line 448
  if (baud <= 28912U) {
#line 448
    baud = 28800U;
  } else
#line 449
  if (baud <= 38601U) {
#line 449
    baud = 38400U;
  } else
#line 450
  if (baud <= 51558U) {
#line 450
    baud = 51200U;
  } else
#line 451
  if (baud <= 56280U) {
#line 451
    baud = 56000U;
  } else
#line 452
  if (baud <= 58053U) {
#line 452
    baud = 57600U;
  } else
#line 453
  if (baud <= 64111U) {
#line 453
    baud = 64000U;
  } else
#line 454
  if (baud <= 77608U) {
#line 454
    baud = 76800U;
  } else
#line 455
  if (baud <= 117028U) {
#line 455
    baud = 115200U;
  } else
#line 456
  if (baud <= 129347U) {
#line 456
    baud = 128000U;
  } else
#line 457
  if (baud <= 156868U) {
#line 457
    baud = 153600U;
  } else
#line 458
  if (baud <= 237832U) {
#line 458
    baud = 230400U;
  } else
#line 459
  if (baud <= 254234U) {
#line 459
    baud = 250000U;
  } else
#line 460
  if (baud <= 273066U) {
#line 460
    baud = 256000U;
  } else
#line 461
  if (baud <= 491520U) {
#line 461
    baud = 460800U;
  } else
#line 462
  if (baud <= 567138U) {
#line 462
    baud = 500000U;
  } else
#line 463
  if (baud <= 670254U) {
#line 463
    baud = 576000U;
  } else
#line 464
  if (baud <= 999999U) {
#line 465
    baud = 921600U;
  } else
#line 466
  if (baud > 2000000U) {
#line 467
    baud = 2000000U;
  } else {

  }
#line 468
  return (baud);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_open(struct tty_struct *tty , struct usb_serial_port *port ) 
{ 
  int result ;
  int tmp ;

  {
#line 475
  result = cp210x_set_config_single(port, 0, 1U);
#line 477
  if (result != 0) {
#line 478
    dev_err((struct device  const  *)(& port->dev), "%s - Unable to enable UART\n",
            "cp210x_open");
#line 479
    return (result);
  } else {

  }
#line 483
  cp210x_get_termios(tty, port);
#line 486
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 487
    cp210x_change_speed(tty, port, 0);
  } else {

  }
#line 489
  tmp = usb_serial_generic_open(tty, port);
#line 489
  return (tmp);
}
}
#line 492 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_close(struct usb_serial_port *port ) 
{ 


  {
#line 494
  usb_serial_generic_close(port);
#line 496
  ldv_mutex_lock_12(& (port->serial)->disc_mutex);
#line 497
  if ((unsigned int )*((unsigned char *)port->serial + 24UL) == 0U) {
#line 498
    cp210x_set_config_single(port, 0, 0U);
  } else {

  }
#line 499
  ldv_mutex_unlock_13(& (port->serial)->disc_mutex);
#line 500
  return;
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_get_termios(struct tty_struct *tty , struct usb_serial_port *port ) 
{ 
  unsigned int baud ;
  unsigned int cflag ;

  {
#line 513
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 514
    cp210x_get_termios_port((struct usb_serial_port *)tty->driver_data, & tty->termios.c_cflag,
                            & baud);
#line 516
    tty_encode_baud_rate(tty, baud, baud);
  } else {
#line 519
    cflag = 0U;
#line 520
    cp210x_get_termios_port(port, & cflag, & baud);
  }
#line 522
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_get_termios_port(struct usb_serial_port *port , unsigned int *cflagp ,
                                    unsigned int *baudp ) 
{ 
  struct device *dev ;
  unsigned int cflag ;
  unsigned int modem_ctl[4U] ;
  unsigned int baud ;
  unsigned int bits ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  struct _ddebug descriptor___2 ;
  long tmp___2 ;
  struct _ddebug descriptor___3 ;
  long tmp___3 ;
  struct _ddebug descriptor___4 ;
  long tmp___4 ;
  struct _ddebug descriptor___5 ;
  long tmp___5 ;
  struct _ddebug descriptor___6 ;
  long tmp___6 ;
  struct _ddebug descriptor___7 ;
  long tmp___7 ;
  struct _ddebug descriptor___8 ;
  long tmp___8 ;
  struct _ddebug descriptor___9 ;
  long tmp___9 ;
  struct _ddebug descriptor___10 ;
  long tmp___10 ;
  struct _ddebug descriptor___11 ;
  long tmp___11 ;
  struct _ddebug descriptor___12 ;
  long tmp___12 ;
  struct _ddebug descriptor___13 ;
  long tmp___13 ;
  struct _ddebug descriptor___14 ;
  long tmp___14 ;
  struct _ddebug descriptor___15 ;
  long tmp___15 ;
  struct _ddebug descriptor___16 ;
  long tmp___16 ;
  struct _ddebug descriptor___17 ;
  long tmp___17 ;

  {
#line 531
  dev = & port->dev;
#line 536
  cp210x_get_config(port, 29, & baud, 4);
#line 538
  descriptor.modname = "cp210x";
#line 538
  descriptor.function = "cp210x_get_termios_port";
#line 538
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 538
  descriptor.format = "%s - baud rate = %d\n";
#line 538
  descriptor.lineno = 538U;
#line 538
  descriptor.flags = 0U;
#line 538
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 538
  if (tmp != 0L) {
#line 538
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s - baud rate = %d\n",
                      "cp210x_get_termios_port", baud);
  } else {

  }
#line 539
  *baudp = baud;
#line 541
  cflag = *cflagp;
#line 543
  cp210x_get_config(port, 4, & bits, 2);
#line 544
  cflag = cflag & 4294967247U;
#line 545
  switch (bits & 3840U) {
  case 1280U: 
#line 547
  descriptor___0.modname = "cp210x";
#line 547
  descriptor___0.function = "cp210x_get_termios_port";
#line 547
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 547
  descriptor___0.format = "%s - data bits = 5\n";
#line 547
  descriptor___0.lineno = 547U;
#line 547
  descriptor___0.flags = 0U;
#line 547
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 547
  if (tmp___0 != 0L) {
#line 547
    __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "%s - data bits = 5\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 548
  cflag = cflag;
#line 549
  goto ldv_28866;
  case 1536U: 
#line 551
  descriptor___1.modname = "cp210x";
#line 551
  descriptor___1.function = "cp210x_get_termios_port";
#line 551
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 551
  descriptor___1.format = "%s - data bits = 6\n";
#line 551
  descriptor___1.lineno = 551U;
#line 551
  descriptor___1.flags = 0U;
#line 551
  tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 551
  if (tmp___1 != 0L) {
#line 551
    __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)dev, "%s - data bits = 6\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 552
  cflag = cflag | 16U;
#line 553
  goto ldv_28866;
  case 1792U: 
#line 555
  descriptor___2.modname = "cp210x";
#line 555
  descriptor___2.function = "cp210x_get_termios_port";
#line 555
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 555
  descriptor___2.format = "%s - data bits = 7\n";
#line 555
  descriptor___2.lineno = 555U;
#line 555
  descriptor___2.flags = 0U;
#line 555
  tmp___2 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 555
  if (tmp___2 != 0L) {
#line 555
    __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)dev, "%s - data bits = 7\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 556
  cflag = cflag | 32U;
#line 557
  goto ldv_28866;
  case 2048U: 
#line 559
  descriptor___3.modname = "cp210x";
#line 559
  descriptor___3.function = "cp210x_get_termios_port";
#line 559
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 559
  descriptor___3.format = "%s - data bits = 8\n";
#line 559
  descriptor___3.lineno = 559U;
#line 559
  descriptor___3.flags = 0U;
#line 559
  tmp___3 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 559
  if (tmp___3 != 0L) {
#line 559
    __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)dev, "%s - data bits = 8\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 560
  cflag = cflag | 48U;
#line 561
  goto ldv_28866;
  case 2304U: 
#line 563
  descriptor___4.modname = "cp210x";
#line 563
  descriptor___4.function = "cp210x_get_termios_port";
#line 563
  descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 563
  descriptor___4.format = "%s - data bits = 9 (not supported, using 8 data bits)\n";
#line 563
  descriptor___4.lineno = 563U;
#line 563
  descriptor___4.flags = 0U;
#line 563
  tmp___4 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 563
  if (tmp___4 != 0L) {
#line 563
    __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)dev, "%s - data bits = 9 (not supported, using 8 data bits)\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 564
  cflag = cflag | 48U;
#line 565
  bits = bits & 4294963455U;
#line 566
  bits = bits | 2048U;
#line 567
  cp210x_set_config(port, 3, & bits, 2);
#line 568
  goto ldv_28866;
  default: 
#line 570
  descriptor___5.modname = "cp210x";
#line 570
  descriptor___5.function = "cp210x_get_termios_port";
#line 570
  descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 570
  descriptor___5.format = "%s - Unknown number of data bits, using 8\n";
#line 570
  descriptor___5.lineno = 570U;
#line 570
  descriptor___5.flags = 0U;
#line 570
  tmp___5 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 570
  if (tmp___5 != 0L) {
#line 570
    __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)dev, "%s - Unknown number of data bits, using 8\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 571
  cflag = cflag | 48U;
#line 572
  bits = bits & 4294963455U;
#line 573
  bits = bits | 2048U;
#line 574
  cp210x_set_config(port, 3, & bits, 2);
#line 575
  goto ldv_28866;
  }
  ldv_28866: ;
#line 578
  switch (bits & 240U) {
  case 0U: 
#line 580
  descriptor___6.modname = "cp210x";
#line 580
  descriptor___6.function = "cp210x_get_termios_port";
#line 580
  descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 580
  descriptor___6.format = "%s - parity = NONE\n";
#line 580
  descriptor___6.lineno = 580U;
#line 580
  descriptor___6.flags = 0U;
#line 580
  tmp___6 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 580
  if (tmp___6 != 0L) {
#line 580
    __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)dev, "%s - parity = NONE\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 581
  cflag = cflag & 4294967039U;
#line 582
  goto ldv_28879;
  case 16U: 
#line 584
  descriptor___7.modname = "cp210x";
#line 584
  descriptor___7.function = "cp210x_get_termios_port";
#line 584
  descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 584
  descriptor___7.format = "%s - parity = ODD\n";
#line 584
  descriptor___7.lineno = 584U;
#line 584
  descriptor___7.flags = 0U;
#line 584
  tmp___7 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 584
  if (tmp___7 != 0L) {
#line 584
    __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)dev, "%s - parity = ODD\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 585
  cflag = cflag | 768U;
#line 586
  goto ldv_28879;
  case 32U: 
#line 588
  descriptor___8.modname = "cp210x";
#line 588
  descriptor___8.function = "cp210x_get_termios_port";
#line 588
  descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 588
  descriptor___8.format = "%s - parity = EVEN\n";
#line 588
  descriptor___8.lineno = 588U;
#line 588
  descriptor___8.flags = 0U;
#line 588
  tmp___8 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 588
  if (tmp___8 != 0L) {
#line 588
    __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)dev, "%s - parity = EVEN\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 589
  cflag = cflag & 4294966783U;
#line 590
  cflag = cflag | 256U;
#line 591
  goto ldv_28879;
  case 48U: 
#line 593
  descriptor___9.modname = "cp210x";
#line 593
  descriptor___9.function = "cp210x_get_termios_port";
#line 593
  descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 593
  descriptor___9.format = "%s - parity = MARK\n";
#line 593
  descriptor___9.lineno = 593U;
#line 593
  descriptor___9.flags = 0U;
#line 593
  tmp___9 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 593
  if (tmp___9 != 0L) {
#line 593
    __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)dev, "%s - parity = MARK\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 594
  cflag = cflag | 1073742592U;
#line 595
  goto ldv_28879;
  case 64U: 
#line 597
  descriptor___10.modname = "cp210x";
#line 597
  descriptor___10.function = "cp210x_get_termios_port";
#line 597
  descriptor___10.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 597
  descriptor___10.format = "%s - parity = SPACE\n";
#line 597
  descriptor___10.lineno = 597U;
#line 597
  descriptor___10.flags = 0U;
#line 597
  tmp___10 = __builtin_expect((long )descriptor___10.flags & 1L, 0L);
#line 597
  if (tmp___10 != 0L) {
#line 597
    __dynamic_dev_dbg(& descriptor___10, (struct device  const  *)dev, "%s - parity = SPACE\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 598
  cflag = cflag & 4294966783U;
#line 599
  cflag = cflag | 1073742080U;
#line 600
  goto ldv_28879;
  default: 
#line 602
  descriptor___11.modname = "cp210x";
#line 602
  descriptor___11.function = "cp210x_get_termios_port";
#line 602
  descriptor___11.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 602
  descriptor___11.format = "%s - Unknown parity mode, disabling parity\n";
#line 602
  descriptor___11.lineno = 602U;
#line 602
  descriptor___11.flags = 0U;
#line 602
  tmp___11 = __builtin_expect((long )descriptor___11.flags & 1L, 0L);
#line 602
  if (tmp___11 != 0L) {
#line 602
    __dynamic_dev_dbg(& descriptor___11, (struct device  const  *)dev, "%s - Unknown parity mode, disabling parity\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 603
  cflag = cflag & 4294967039U;
#line 604
  bits = bits & 4294967055U;
#line 605
  cp210x_set_config(port, 3, & bits, 2);
#line 606
  goto ldv_28879;
  }
  ldv_28879: 
#line 609
  cflag = cflag & 4294967231U;
#line 610
  switch (bits & 15U) {
  case 0U: 
#line 612
  descriptor___12.modname = "cp210x";
#line 612
  descriptor___12.function = "cp210x_get_termios_port";
#line 612
  descriptor___12.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 612
  descriptor___12.format = "%s - stop bits = 1\n";
#line 612
  descriptor___12.lineno = 612U;
#line 612
  descriptor___12.flags = 0U;
#line 612
  tmp___12 = __builtin_expect((long )descriptor___12.flags & 1L, 0L);
#line 612
  if (tmp___12 != 0L) {
#line 612
    __dynamic_dev_dbg(& descriptor___12, (struct device  const  *)dev, "%s - stop bits = 1\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 613
  goto ldv_28892;
  case 1U: 
#line 615
  descriptor___13.modname = "cp210x";
#line 615
  descriptor___13.function = "cp210x_get_termios_port";
#line 615
  descriptor___13.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 615
  descriptor___13.format = "%s - stop bits = 1.5 (not supported, using 1 stop bit)\n";
#line 615
  descriptor___13.lineno = 615U;
#line 615
  descriptor___13.flags = 0U;
#line 615
  tmp___13 = __builtin_expect((long )descriptor___13.flags & 1L, 0L);
#line 615
  if (tmp___13 != 0L) {
#line 615
    __dynamic_dev_dbg(& descriptor___13, (struct device  const  *)dev, "%s - stop bits = 1.5 (not supported, using 1 stop bit)\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 616
  bits = bits & 4294967280U;
#line 617
  cp210x_set_config(port, 3, & bits, 2);
#line 618
  goto ldv_28892;
  case 2U: 
#line 620
  descriptor___14.modname = "cp210x";
#line 620
  descriptor___14.function = "cp210x_get_termios_port";
#line 620
  descriptor___14.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 620
  descriptor___14.format = "%s - stop bits = 2\n";
#line 620
  descriptor___14.lineno = 620U;
#line 620
  descriptor___14.flags = 0U;
#line 620
  tmp___14 = __builtin_expect((long )descriptor___14.flags & 1L, 0L);
#line 620
  if (tmp___14 != 0L) {
#line 620
    __dynamic_dev_dbg(& descriptor___14, (struct device  const  *)dev, "%s - stop bits = 2\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 621
  cflag = cflag | 64U;
#line 622
  goto ldv_28892;
  default: 
#line 624
  descriptor___15.modname = "cp210x";
#line 624
  descriptor___15.function = "cp210x_get_termios_port";
#line 624
  descriptor___15.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 624
  descriptor___15.format = "%s - Unknown number of stop bits, using 1 stop bit\n";
#line 624
  descriptor___15.lineno = 624U;
#line 624
  descriptor___15.flags = 0U;
#line 624
  tmp___15 = __builtin_expect((long )descriptor___15.flags & 1L, 0L);
#line 624
  if (tmp___15 != 0L) {
#line 624
    __dynamic_dev_dbg(& descriptor___15, (struct device  const  *)dev, "%s - Unknown number of stop bits, using 1 stop bit\n",
                      "cp210x_get_termios_port");
  } else {

  }
#line 625
  bits = bits & 4294967280U;
#line 626
  cp210x_set_config(port, 3, & bits, 2);
#line 627
  goto ldv_28892;
  }
  ldv_28892: 
#line 630
  cp210x_get_config(port, 20, (unsigned int *)(& modem_ctl), 16);
#line 631
  if ((modem_ctl[0] & 8U) != 0U) {
#line 632
    descriptor___16.modname = "cp210x";
#line 632
    descriptor___16.function = "cp210x_get_termios_port";
#line 632
    descriptor___16.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 632
    descriptor___16.format = "%s - flow control = CRTSCTS\n";
#line 632
    descriptor___16.lineno = 632U;
#line 632
    descriptor___16.flags = 0U;
#line 632
    tmp___16 = __builtin_expect((long )descriptor___16.flags & 1L, 0L);
#line 632
    if (tmp___16 != 0L) {
#line 632
      __dynamic_dev_dbg(& descriptor___16, (struct device  const  *)dev, "%s - flow control = CRTSCTS\n",
                        "cp210x_get_termios_port");
    } else {

    }
#line 633
    cflag = cflag | 2147483648U;
  } else {
#line 635
    descriptor___17.modname = "cp210x";
#line 635
    descriptor___17.function = "cp210x_get_termios_port";
#line 635
    descriptor___17.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 635
    descriptor___17.format = "%s - flow control = NONE\n";
#line 635
    descriptor___17.lineno = 635U;
#line 635
    descriptor___17.flags = 0U;
#line 635
    tmp___17 = __builtin_expect((long )descriptor___17.flags & 1L, 0L);
#line 635
    if (tmp___17 != 0L) {
#line 635
      __dynamic_dev_dbg(& descriptor___17, (struct device  const  *)dev, "%s - flow control = NONE\n",
                        "cp210x_get_termios_port");
    } else {

    }
#line 636
    cflag = cflag & 2147483647U;
  }
#line 639
  *cflagp = cflag;
#line 640
  return;
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_change_speed(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  u32 baud ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 673
  baud = tty->termios.c_ospeed;
#line 680
  baud = cp210x_quantise_baudrate(baud);
#line 682
  descriptor.modname = "cp210x";
#line 682
  descriptor.function = "cp210x_change_speed";
#line 682
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 682
  descriptor.format = "%s - setting baud rate to %u\n";
#line 682
  descriptor.lineno = 682U;
#line 682
  descriptor.flags = 0U;
#line 682
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 682
  if (tmp != 0L) {
#line 682
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - setting baud rate to %u\n",
                      "cp210x_change_speed", baud);
  } else {

  }
#line 683
  tmp___0 = cp210x_set_config(port, 30, & baud, 4);
#line 683
  if (tmp___0 != 0) {
#line 685
    dev_warn((struct device  const  *)(& port->dev), "failed to set baud rate to %u\n",
             baud);
#line 686
    if ((unsigned long )old_termios != (unsigned long )((struct ktermios *)0)) {
#line 687
      baud = old_termios->c_ospeed;
    } else {
#line 689
      baud = 9600U;
    }
  } else {

  }
#line 692
  tty_encode_baud_rate(tty, baud, baud);
#line 693
  return;
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                               struct ktermios *old_termios ) 
{ 
  struct device *dev ;
  unsigned int cflag ;
  unsigned int old_cflag ;
  unsigned int bits ;
  unsigned int modem_ctl[4U] ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;
  struct _ddebug descriptor___2 ;
  long tmp___2 ;
  struct _ddebug descriptor___3 ;
  long tmp___3 ;
  struct _ddebug descriptor___4 ;
  long tmp___4 ;
  struct _ddebug descriptor___5 ;
  long tmp___5 ;
  int tmp___6 ;
  struct _ddebug descriptor___6 ;
  long tmp___7 ;
  struct _ddebug descriptor___7 ;
  long tmp___8 ;
  struct _ddebug descriptor___8 ;
  long tmp___9 ;
  struct _ddebug descriptor___9 ;
  long tmp___10 ;
  struct _ddebug descriptor___10 ;
  long tmp___11 ;
  int tmp___12 ;
  struct _ddebug descriptor___11 ;
  long tmp___13 ;
  struct _ddebug descriptor___12 ;
  long tmp___14 ;
  struct _ddebug descriptor___13 ;
  long tmp___15 ;
  int tmp___16 ;
  struct _ddebug descriptor___14 ;
  long tmp___17 ;
  struct _ddebug descriptor___15 ;
  long tmp___18 ;
  struct _ddebug descriptor___16 ;
  long tmp___19 ;
  struct _ddebug descriptor___17 ;
  long tmp___20 ;

  {
#line 698
  dev = & port->dev;
#line 703
  descriptor.modname = "cp210x";
#line 703
  descriptor.function = "cp210x_set_termios";
#line 703
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 703
  descriptor.format = "%s - port %d\n";
#line 703
  descriptor.lineno = 703U;
#line 703
  descriptor.flags = 0U;
#line 703
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 703
  if (tmp != 0L) {
#line 703
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)dev, "%s - port %d\n",
                      "cp210x_set_termios", (int )port->number);
  } else {

  }
#line 705
  if ((unsigned long )tty == (unsigned long )((struct tty_struct *)0)) {
#line 706
    return;
  } else {

  }
#line 708
  cflag = tty->termios.c_cflag;
#line 709
  old_cflag = old_termios->c_cflag;
#line 711
  if (tty->termios.c_ospeed != old_termios->c_ospeed) {
#line 712
    cp210x_change_speed(tty, port, old_termios);
  } else {

  }
#line 715
  if (((cflag ^ old_cflag) & 48U) != 0U) {
#line 716
    cp210x_get_config(port, 4, & bits, 2);
#line 717
    bits = bits & 4294963455U;
#line 718
    switch (cflag & 48U) {
    case 0U: 
#line 720
    bits = bits | 1280U;
#line 721
    descriptor___0.modname = "cp210x";
#line 721
    descriptor___0.function = "cp210x_set_termios";
#line 721
    descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 721
    descriptor___0.format = "%s - data bits = 5\n";
#line 721
    descriptor___0.lineno = 721U;
#line 721
    descriptor___0.flags = 0U;
#line 721
    tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 721
    if (tmp___0 != 0L) {
#line 721
      __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)dev, "%s - data bits = 5\n",
                        "cp210x_set_termios");
    } else {

    }
#line 722
    goto ldv_28923;
    case 16U: 
#line 724
    bits = bits | 1536U;
#line 725
    descriptor___1.modname = "cp210x";
#line 725
    descriptor___1.function = "cp210x_set_termios";
#line 725
    descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 725
    descriptor___1.format = "%s - data bits = 6\n";
#line 725
    descriptor___1.lineno = 725U;
#line 725
    descriptor___1.flags = 0U;
#line 725
    tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 725
    if (tmp___1 != 0L) {
#line 725
      __dynamic_dev_dbg(& descriptor___1, (struct device  const  *)dev, "%s - data bits = 6\n",
                        "cp210x_set_termios");
    } else {

    }
#line 726
    goto ldv_28923;
    case 32U: 
#line 728
    bits = bits | 1792U;
#line 729
    descriptor___2.modname = "cp210x";
#line 729
    descriptor___2.function = "cp210x_set_termios";
#line 729
    descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 729
    descriptor___2.format = "%s - data bits = 7\n";
#line 729
    descriptor___2.lineno = 729U;
#line 729
    descriptor___2.flags = 0U;
#line 729
    tmp___2 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 729
    if (tmp___2 != 0L) {
#line 729
      __dynamic_dev_dbg(& descriptor___2, (struct device  const  *)dev, "%s - data bits = 7\n",
                        "cp210x_set_termios");
    } else {

    }
#line 730
    goto ldv_28923;
    case 48U: 
#line 732
    bits = bits | 2048U;
#line 733
    descriptor___3.modname = "cp210x";
#line 733
    descriptor___3.function = "cp210x_set_termios";
#line 733
    descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 733
    descriptor___3.format = "%s - data bits = 8\n";
#line 733
    descriptor___3.lineno = 733U;
#line 733
    descriptor___3.flags = 0U;
#line 733
    tmp___3 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 733
    if (tmp___3 != 0L) {
#line 733
      __dynamic_dev_dbg(& descriptor___3, (struct device  const  *)dev, "%s - data bits = 8\n",
                        "cp210x_set_termios");
    } else {

    }
#line 734
    goto ldv_28923;
    default: 
#line 740
    descriptor___4.modname = "cp210x";
#line 740
    descriptor___4.function = "cp210x_set_termios";
#line 740
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 740
    descriptor___4.format = "cp210x driver does not support the number of bits requested, using 8 bit mode\n";
#line 740
    descriptor___4.lineno = 740U;
#line 740
    descriptor___4.flags = 0U;
#line 740
    tmp___4 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 740
    if (tmp___4 != 0L) {
#line 740
      __dynamic_dev_dbg(& descriptor___4, (struct device  const  *)dev, "cp210x driver does not support the number of bits requested, using 8 bit mode\n");
    } else {

    }
#line 741
    bits = bits | 2048U;
#line 742
    goto ldv_28923;
    }
    ldv_28923: 
#line 744
    tmp___6 = cp210x_set_config(port, 3, & bits, 2);
#line 744
    if (tmp___6 != 0) {
#line 745
      descriptor___5.modname = "cp210x";
#line 745
      descriptor___5.function = "cp210x_set_termios";
#line 745
      descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 745
      descriptor___5.format = "Number of data bits requested not supported by device\n";
#line 745
      descriptor___5.lineno = 745U;
#line 745
      descriptor___5.flags = 0U;
#line 745
      tmp___5 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 745
      if (tmp___5 != 0L) {
#line 745
        __dynamic_dev_dbg(& descriptor___5, (struct device  const  *)dev, "Number of data bits requested not supported by device\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 748
  if (((cflag ^ old_cflag) & 1073742592U) != 0U) {
#line 750
    cp210x_get_config(port, 4, & bits, 2);
#line 751
    bits = bits & 4294967055U;
#line 752
    if ((cflag & 256U) != 0U) {
#line 753
      if ((cflag & 1073741824U) != 0U) {
#line 754
        if ((cflag & 512U) != 0U) {
#line 755
          bits = bits | 48U;
#line 756
          descriptor___6.modname = "cp210x";
#line 756
          descriptor___6.function = "cp210x_set_termios";
#line 756
          descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 756
          descriptor___6.format = "%s - parity = MARK\n";
#line 756
          descriptor___6.lineno = 756U;
#line 756
          descriptor___6.flags = 0U;
#line 756
          tmp___7 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 756
          if (tmp___7 != 0L) {
#line 756
            __dynamic_dev_dbg(& descriptor___6, (struct device  const  *)dev, "%s - parity = MARK\n",
                              "cp210x_set_termios");
          } else {

          }
        } else {
#line 758
          bits = bits | 64U;
#line 759
          descriptor___7.modname = "cp210x";
#line 759
          descriptor___7.function = "cp210x_set_termios";
#line 759
          descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 759
          descriptor___7.format = "%s - parity = SPACE\n";
#line 759
          descriptor___7.lineno = 759U;
#line 759
          descriptor___7.flags = 0U;
#line 759
          tmp___8 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 759
          if (tmp___8 != 0L) {
#line 759
            __dynamic_dev_dbg(& descriptor___7, (struct device  const  *)dev, "%s - parity = SPACE\n",
                              "cp210x_set_termios");
          } else {

          }
        }
      } else
#line 762
      if ((cflag & 512U) != 0U) {
#line 763
        bits = bits | 16U;
#line 764
        descriptor___8.modname = "cp210x";
#line 764
        descriptor___8.function = "cp210x_set_termios";
#line 764
        descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 764
        descriptor___8.format = "%s - parity = ODD\n";
#line 764
        descriptor___8.lineno = 764U;
#line 764
        descriptor___8.flags = 0U;
#line 764
        tmp___9 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 764
        if (tmp___9 != 0L) {
#line 764
          __dynamic_dev_dbg(& descriptor___8, (struct device  const  *)dev, "%s - parity = ODD\n",
                            "cp210x_set_termios");
        } else {

        }
      } else {
#line 766
        bits = bits | 32U;
#line 767
        descriptor___9.modname = "cp210x";
#line 767
        descriptor___9.function = "cp210x_set_termios";
#line 767
        descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 767
        descriptor___9.format = "%s - parity = EVEN\n";
#line 767
        descriptor___9.lineno = 767U;
#line 767
        descriptor___9.flags = 0U;
#line 767
        tmp___10 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 767
        if (tmp___10 != 0L) {
#line 767
          __dynamic_dev_dbg(& descriptor___9, (struct device  const  *)dev, "%s - parity = EVEN\n",
                            "cp210x_set_termios");
        } else {

        }
      }
    } else {

    }
#line 771
    tmp___12 = cp210x_set_config(port, 3, & bits, 2);
#line 771
    if (tmp___12 != 0) {
#line 772
      descriptor___10.modname = "cp210x";
#line 772
      descriptor___10.function = "cp210x_set_termios";
#line 772
      descriptor___10.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 772
      descriptor___10.format = "Parity mode not supported by device\n";
#line 772
      descriptor___10.lineno = 772U;
#line 772
      descriptor___10.flags = 0U;
#line 772
      tmp___11 = __builtin_expect((long )descriptor___10.flags & 1L, 0L);
#line 772
      if (tmp___11 != 0L) {
#line 772
        __dynamic_dev_dbg(& descriptor___10, (struct device  const  *)dev, "Parity mode not supported by device\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 775
  if (((cflag ^ old_cflag) & 64U) != 0U) {
#line 776
    cp210x_get_config(port, 4, & bits, 2);
#line 777
    bits = bits & 4294967280U;
#line 778
    if ((cflag & 64U) != 0U) {
#line 779
      bits = bits | 2U;
#line 780
      descriptor___11.modname = "cp210x";
#line 780
      descriptor___11.function = "cp210x_set_termios";
#line 780
      descriptor___11.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 780
      descriptor___11.format = "%s - stop bits = 2\n";
#line 780
      descriptor___11.lineno = 780U;
#line 780
      descriptor___11.flags = 0U;
#line 780
      tmp___13 = __builtin_expect((long )descriptor___11.flags & 1L, 0L);
#line 780
      if (tmp___13 != 0L) {
#line 780
        __dynamic_dev_dbg(& descriptor___11, (struct device  const  *)dev, "%s - stop bits = 2\n",
                          "cp210x_set_termios");
      } else {

      }
    } else {
#line 782
      bits = bits;
#line 783
      descriptor___12.modname = "cp210x";
#line 783
      descriptor___12.function = "cp210x_set_termios";
#line 783
      descriptor___12.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 783
      descriptor___12.format = "%s - stop bits = 1\n";
#line 783
      descriptor___12.lineno = 783U;
#line 783
      descriptor___12.flags = 0U;
#line 783
      tmp___14 = __builtin_expect((long )descriptor___12.flags & 1L, 0L);
#line 783
      if (tmp___14 != 0L) {
#line 783
        __dynamic_dev_dbg(& descriptor___12, (struct device  const  *)dev, "%s - stop bits = 1\n",
                          "cp210x_set_termios");
      } else {

      }
    }
#line 785
    tmp___16 = cp210x_set_config(port, 3, & bits, 2);
#line 785
    if (tmp___16 != 0) {
#line 786
      descriptor___13.modname = "cp210x";
#line 786
      descriptor___13.function = "cp210x_set_termios";
#line 786
      descriptor___13.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 786
      descriptor___13.format = "Number of stop bits requested not supported by device\n";
#line 786
      descriptor___13.lineno = 786U;
#line 786
      descriptor___13.flags = 0U;
#line 786
      tmp___15 = __builtin_expect((long )descriptor___13.flags & 1L, 0L);
#line 786
      if (tmp___15 != 0L) {
#line 786
        __dynamic_dev_dbg(& descriptor___13, (struct device  const  *)dev, "Number of stop bits requested not supported by device\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 789
  if ((int )(cflag ^ old_cflag) < 0) {
#line 790
    cp210x_get_config(port, 20, (unsigned int *)(& modem_ctl), 16);
#line 791
    descriptor___14.modname = "cp210x";
#line 791
    descriptor___14.function = "cp210x_set_termios";
#line 791
    descriptor___14.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 791
    descriptor___14.format = "%s - read modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n";
#line 791
    descriptor___14.lineno = 793U;
#line 791
    descriptor___14.flags = 0U;
#line 791
    tmp___17 = __builtin_expect((long )descriptor___14.flags & 1L, 0L);
#line 791
    if (tmp___17 != 0L) {
#line 791
      __dynamic_dev_dbg(& descriptor___14, (struct device  const  *)dev, "%s - read modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n",
                        "cp210x_set_termios", modem_ctl[0], modem_ctl[1], modem_ctl[2],
                        modem_ctl[3]);
    } else {

    }
#line 795
    if ((int )cflag < 0) {
#line 796
      modem_ctl[0] = modem_ctl[0] & 4294967172U;
#line 797
      modem_ctl[0] = modem_ctl[0] | 9U;
#line 798
      modem_ctl[1] = 128U;
#line 799
      descriptor___15.modname = "cp210x";
#line 799
      descriptor___15.function = "cp210x_set_termios";
#line 799
      descriptor___15.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 799
      descriptor___15.format = "%s - flow control = CRTSCTS\n";
#line 799
      descriptor___15.lineno = 799U;
#line 799
      descriptor___15.flags = 0U;
#line 799
      tmp___18 = __builtin_expect((long )descriptor___15.flags & 1L, 0L);
#line 799
      if (tmp___18 != 0L) {
#line 799
        __dynamic_dev_dbg(& descriptor___15, (struct device  const  *)dev, "%s - flow control = CRTSCTS\n",
                          "cp210x_set_termios");
      } else {

      }
    } else {
#line 801
      modem_ctl[0] = modem_ctl[0] & 4294967172U;
#line 802
      modem_ctl[0] = modem_ctl[0] | 1U;
#line 803
      modem_ctl[1] = modem_ctl[1] | 64U;
#line 804
      descriptor___16.modname = "cp210x";
#line 804
      descriptor___16.function = "cp210x_set_termios";
#line 804
      descriptor___16.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 804
      descriptor___16.format = "%s - flow control = NONE\n";
#line 804
      descriptor___16.lineno = 804U;
#line 804
      descriptor___16.flags = 0U;
#line 804
      tmp___19 = __builtin_expect((long )descriptor___16.flags & 1L, 0L);
#line 804
      if (tmp___19 != 0L) {
#line 804
        __dynamic_dev_dbg(& descriptor___16, (struct device  const  *)dev, "%s - flow control = NONE\n",
                          "cp210x_set_termios");
      } else {

      }
    }
#line 807
    descriptor___17.modname = "cp210x";
#line 807
    descriptor___17.function = "cp210x_set_termios";
#line 807
    descriptor___17.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 807
    descriptor___17.format = "%s - write modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n";
#line 807
    descriptor___17.lineno = 809U;
#line 807
    descriptor___17.flags = 0U;
#line 807
    tmp___20 = __builtin_expect((long )descriptor___17.flags & 1L, 0L);
#line 807
    if (tmp___20 != 0L) {
#line 807
      __dynamic_dev_dbg(& descriptor___17, (struct device  const  *)dev, "%s - write modem controls = 0x%.4x 0x%.4x 0x%.4x 0x%.4x\n",
                        "cp210x_set_termios", modem_ctl[0], modem_ctl[1], modem_ctl[2],
                        modem_ctl[3]);
    } else {

    }
#line 810
    cp210x_set_config(port, 19, (unsigned int *)(& modem_ctl), 16);
  } else {

  }
#line 812
  return;
}
}
#line 815 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_tiocmset(struct tty_struct *tty , unsigned int set , unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  int tmp ;

  {
#line 818
  port = (struct usb_serial_port *)tty->driver_data;
#line 819
  tmp = cp210x_tiocmset_port(port, set, clear);
#line 819
  return (tmp);
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_tiocmset_port(struct usb_serial_port *port , unsigned int set ,
                                unsigned int clear ) 
{ 
  unsigned int control ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 825
  control = 0U;
#line 827
  if ((set & 4U) != 0U) {
#line 828
    control = control | 2U;
#line 829
    control = control | 512U;
  } else {

  }
#line 831
  if ((set & 2U) != 0U) {
#line 832
    control = control | 1U;
#line 833
    control = control | 256U;
  } else {

  }
#line 835
  if ((clear & 4U) != 0U) {
#line 836
    control = control & 4294967293U;
#line 837
    control = control | 512U;
  } else {

  }
#line 839
  if ((clear & 2U) != 0U) {
#line 840
    control = control & 4294967294U;
#line 841
    control = control | 256U;
  } else {

  }
#line 844
  descriptor.modname = "cp210x";
#line 844
  descriptor.function = "cp210x_tiocmset_port";
#line 844
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 844
  descriptor.format = "%s - control = 0x%.4x\n";
#line 844
  descriptor.lineno = 844U;
#line 844
  descriptor.flags = 0U;
#line 844
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 844
  if (tmp != 0L) {
#line 844
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - control = 0x%.4x\n",
                      "cp210x_tiocmset_port", control);
  } else {

  }
#line 846
  tmp___0 = cp210x_set_config(port, 7, & control, 2);
#line 846
  return (tmp___0);
}
}
#line 849 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_dtr_rts(struct usb_serial_port *p , int on ) 
{ 


  {
#line 851
  if (on != 0) {
#line 852
    cp210x_tiocmset_port(p, 6U, 0U);
  } else {
#line 854
    cp210x_tiocmset_port(p, 0U, 6U);
  }
#line 855
  return;
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_tiocmget(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  unsigned int control ;
  int result ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 859
  port = (struct usb_serial_port *)tty->driver_data;
#line 863
  cp210x_get_config(port, 8, & control, 1);
#line 865
  result = ((((((int )control & 1 ? 2 : 0) | ((control & 2U) != 0U ? 4 : 0)) | ((control & 16U) != 0U ? 32 : 0)) | ((control & 32U) != 0U ? 256 : 0)) | ((control & 64U) != 0U ? 128 : 0)) | ((control & 128U) != 0U ? 64 : 0);
#line 872
  descriptor.modname = "cp210x";
#line 872
  descriptor.function = "cp210x_tiocmget";
#line 872
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 872
  descriptor.format = "%s - control = 0x%.2x\n";
#line 872
  descriptor.lineno = 872U;
#line 872
  descriptor.flags = 0U;
#line 872
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 872
  if (tmp != 0L) {
#line 872
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - control = 0x%.2x\n",
                      "cp210x_tiocmget", control);
  } else {

  }
#line 874
  return (result);
}
}
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_break_ctl(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned int state ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 879
  port = (struct usb_serial_port *)tty->driver_data;
#line 882
  if (break_state == 0) {
#line 883
    state = 0U;
  } else {
#line 885
    state = 1U;
  }
#line 886
  descriptor.modname = "cp210x";
#line 886
  descriptor.function = "cp210x_break_ctl";
#line 886
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared";
#line 886
  descriptor.format = "%s - turning break %s\n";
#line 886
  descriptor.lineno = 887U;
#line 886
  descriptor.flags = 0U;
#line 886
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 886
  if (tmp != 0L) {
#line 886
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& port->dev), "%s - turning break %s\n",
                      "cp210x_break_ctl", state == 0U ? (char *)"off" : (char *)"on");
  } else {

  }
#line 888
  cp210x_set_config(port, 5, & state, 2);
#line 889
  return;
}
}
#line 891 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static int cp210x_startup(struct usb_serial *serial ) 
{ 
  struct usb_host_interface *cur_altsetting ;
  struct cp210x_serial_private *spriv ;
  void *tmp ;

  {
#line 897
  usb_reset_device(serial->dev);
#line 899
  tmp = kzalloc(1UL, 208U);
#line 899
  spriv = (struct cp210x_serial_private *)tmp;
#line 900
  if ((unsigned long )spriv == (unsigned long )((struct cp210x_serial_private *)0)) {
#line 901
    return (-12);
  } else {

  }
#line 903
  cur_altsetting = (serial->interface)->cur_altsetting;
#line 904
  spriv->bInterfaceNumber = cur_altsetting->desc.bInterfaceNumber;
#line 906
  usb_set_serial_data(serial, (void *)spriv);
#line 908
  return (0);
}
}
#line 911 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
static void cp210x_release(struct usb_serial *serial ) 
{ 
  struct cp210x_serial_private *spriv ;
  void *tmp ;

  {
#line 915
  tmp = usb_get_serial_data(serial);
#line 915
  spriv = (struct cp210x_serial_private *)tmp;
#line 916
  kfree((void const   *)spriv);
#line 917
  return;
}
}
#line 941
void ldv_check_final_state(void) ;
#line 944
extern void ldv_check_return_value(int  ) ;
#line 950
void ldv_initialize(void) ;
#line 953
extern void ldv_handler_precall(void) ;
#line 956
extern int nondet_int(void) ;
#line 959 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  int res_cp210x_open_4 ;
  int var_cp210x_break_ctl_14_p1 ;
  struct ktermios *var_cp210x_set_termios_9_p2 ;
  unsigned int var_cp210x_tiocmset_10_p1 ;
  unsigned int var_cp210x_tiocmset_10_p2 ;
  struct usb_serial *var_group3 ;
  int var_cp210x_dtr_rts_12_p1 ;
  int ldv_s_cp210x_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;

  {
#line 1580
  ldv_s_cp210x_device_usb_serial_driver = 0;
#line 1570
  LDV_IN_INTERRUPT = 1;
#line 1579
  ldv_initialize();
#line 1584
  goto ldv_29046;
  ldv_29045: 
#line 1588
  tmp = nondet_int();
#line 1588
  switch (tmp) {
  case 0: ;
#line 1593
  if (ldv_s_cp210x_device_usb_serial_driver == 0) {
#line 1660
    ldv_handler_precall();
#line 1661
    res_cp210x_open_4 = cp210x_open(var_group1, var_group2);
#line 1662
    ldv_check_return_value(res_cp210x_open_4);
#line 1663
    if (res_cp210x_open_4 != 0) {
#line 1664
      goto ldv_module_exit;
    } else {

    }
#line 1665
    ldv_s_cp210x_device_usb_serial_driver = ldv_s_cp210x_device_usb_serial_driver + 1;
  } else {

  }
#line 1671
  goto ldv_29035;
  case 1: ;
#line 1675
  if (ldv_s_cp210x_device_usb_serial_driver == 1) {
#line 1742
    ldv_handler_precall();
#line 1743
    cp210x_close(var_group2);
#line 1744
    ldv_s_cp210x_device_usb_serial_driver = ldv_s_cp210x_device_usb_serial_driver + 1;
  } else {

  }
#line 1750
  goto ldv_29035;
  case 2: ;
#line 1754
  if (ldv_s_cp210x_device_usb_serial_driver == 2) {
#line 1821
    ldv_handler_precall();
#line 1822
    cp210x_release(var_group3);
#line 1823
    ldv_s_cp210x_device_usb_serial_driver = 0;
  } else {

  }
#line 1829
  goto ldv_29035;
  case 3: 
#line 1900
  ldv_handler_precall();
#line 1901
  cp210x_break_ctl(var_group1, var_cp210x_break_ctl_14_p1);
#line 1908
  goto ldv_29035;
  case 4: 
#line 1979
  ldv_handler_precall();
#line 1980
  cp210x_set_termios(var_group1, var_group2, var_cp210x_set_termios_9_p2);
#line 1987
  goto ldv_29035;
  case 5: 
#line 2058
  ldv_handler_precall();
#line 2059
  cp210x_tiocmget(var_group1);
#line 2066
  goto ldv_29035;
  case 6: 
#line 2137
  ldv_handler_precall();
#line 2138
  cp210x_tiocmset(var_group1, var_cp210x_tiocmset_10_p1, var_cp210x_tiocmset_10_p2);
#line 2145
  goto ldv_29035;
  case 7: 
#line 2216
  ldv_handler_precall();
#line 2217
  cp210x_startup(var_group3);
#line 2224
  goto ldv_29035;
  case 8: 
#line 2295
  ldv_handler_precall();
#line 2296
  cp210x_dtr_rts(var_group2, var_cp210x_dtr_rts_12_p1);
#line 2303
  goto ldv_29035;
  default: ;
#line 2304
  goto ldv_29035;
  }
  ldv_29035: ;
  ldv_29046: 
#line 1584
  tmp___0 = nondet_int();
#line 1584
  if (tmp___0 != 0 || ldv_s_cp210x_device_usb_serial_driver != 0) {
#line 1586
    goto ldv_29045;
  } else {

  }

  ldv_module_exit: ;
#line 2313
  ldv_check_final_state();
#line 2316
  return;
}
}
#line 2320 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2325
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 2327
  mutex_lock(ldv_func_arg1);
#line 2328
  return;
}
}
#line 2330 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2335
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 2337
  mutex_unlock(ldv_func_arg1);
#line 2338
  return;
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2345
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2347
  mutex_lock(ldv_func_arg1);
#line 2348
  return;
}
}
#line 2350 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_4(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2355
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2357
  mutex_unlock(ldv_func_arg1);
#line 2358
  return;
}
}
#line 2360 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2365
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2367
  mutex_lock(ldv_func_arg1);
#line 2368
  return;
}
}
#line 2370 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2375
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2377
  mutex_unlock(ldv_func_arg1);
#line 2378
  return;
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2385
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2387
  mutex_lock(ldv_func_arg1);
#line 2388
  return;
}
}
#line 2390 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
int ldv_mutex_trylock_8(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___6 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2395
  tmp = mutex_trylock(ldv_func_arg1);
#line 2395
  ldv_func_res = tmp;
#line 2397
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2397
  return (tmp___0);
#line 2399
  return (ldv_func_res);
}
}
#line 2402 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2407
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2409
  mutex_unlock(ldv_func_arg1);
#line 2410
  return;
}
}
#line 2412 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2417
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2419
  mutex_lock(ldv_func_arg1);
#line 2420
  return;
}
}
#line 2422 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2427
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2429
  mutex_unlock(ldv_func_arg1);
#line 2430
  return;
}
}
#line 2432 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2437
  ldv_mutex_lock_disc_mutex_of_usb_serial(ldv_func_arg1);
#line 2439
  mutex_lock(ldv_func_arg1);
#line 2440
  return;
}
}
#line 2442 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/32_7a/drivers/usb/serial/cp210x.c.prepared"
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2447
  ldv_mutex_unlock_disc_mutex_of_usb_serial(ldv_func_arg1);
#line 2449
  mutex_unlock(ldv_func_arg1);
#line 2450
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_disc_mutex_of_usb_serial  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_disc_mutex_of_usb_serial = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_disc_mutex_of_usb_serial = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_disc_mutex_of_usb_serial = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_disc_mutex_of_usb_serial = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_disc_mutex_of_usb_serial(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_disc_mutex_of_usb_serial = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_disc_mutex_of_usb_serial(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_disc_mutex_of_usb_serial == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_disc_mutex_of_usb_serial = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_lock  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_lock == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_lock = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_lock == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_lock = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_lock == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_lock = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_lock == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_lock = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_lock == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_lock = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_lock == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_lock == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_lock = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mtx_of_percpu_rw_semaphore  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mtx_of_percpu_rw_semaphore(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_mtx_of_percpu_rw_semaphore = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_device = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_device = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_device = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_device = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_device = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_device == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_device = 1;
#line 766
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 773
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 775
  ldv_mutex_disc_mutex_of_usb_serial = 1;
#line 777
  ldv_mutex_lock = 1;
#line 779
  ldv_mutex_mtx_of_percpu_rw_semaphore = 1;
#line 781
  ldv_mutex_mutex_of_device = 1;
#line 782
  return;
}
}
#line 785 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/cp210x.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 788
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 788
    ldv_error();
  }
#line 790
  if (ldv_mutex_disc_mutex_of_usb_serial == 1) {

  } else {
#line 790
    ldv_error();
  }
#line 792
  if (ldv_mutex_lock == 1) {

  } else {
#line 792
    ldv_error();
  }
#line 794
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 794
    ldv_error();
  }
#line 796
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 796
    ldv_error();
  }
#line 797
  return;
}
}
