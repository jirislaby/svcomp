/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_809_2 {
   unsigned long correct ;
   unsigned long incorrect ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct __anonstruct_ldv_813_3 {
   unsigned long miss ;
   unsigned long hit ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
union __anonunion_ldv_815_1 {
   struct __anonstruct_ldv_809_2 ldv_809 ;
   struct __anonstruct_ldv_813_3 ldv_813 ;
   unsigned long miss_hit[2U] ;
};
#line 103 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
struct ftrace_branch_data {
   char const   *func ;
   char const   *file ;
   unsigned int line ;
   union __anonunion_ldv_815_1 ldv_815 ;
};
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 108 "include/linux/kernel.h"
struct completion;
#line 109
struct pt_regs;
#line 207
struct pid;
#line 673
struct task_struct;
#line 674
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1843_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1843_8 ldv_1843 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 272
struct page;
#line 280
struct file;
#line 302
struct seq_file;
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2137_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2152_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2153_14 {
   struct __anonstruct_ldv_2137_15 ldv_2137 ;
   struct __anonstruct_ldv_2152_16 ldv_2152 ;
};
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2153_14 ldv_2153 ;
};
#line 292 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 1108
struct thread_struct;
#line 351 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct raw_spinlock;
#line 272 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6258_18 {
   u64 rip ;
   u64 rdp ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_6264_19 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6265_17 {
   struct __anonstruct_ldv_6258_18 ldv_6258 ;
   struct __anonstruct_ldv_6264_19 ldv_6264 ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_6274_20 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_6265_17 ldv_6265 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_6274_20 ldv_6274 ;
};
#line 333 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 365 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 411
struct kmem_cache;
#line 415 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
};
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_22 {
   unsigned long seg ;
};
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_22 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_6767_24 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_25 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_26 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_27 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_6789_23 {
   struct __anonstruct_ldv_6767_24 ldv_6767 ;
   struct __anonstruct_futex_25 futex ;
   struct __anonstruct_nanosleep_26 nanosleep ;
   struct __anonstruct_poll_27 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6789_23 ldv_6789 ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_28 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_28 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 21 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 164 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_29 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_29 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_30 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 104 "include/linux/math64.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 220 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_32 {
   unsigned long bits[8U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_32 nodemask_t;
#line 634 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 153
struct rw_semaphore;
#line 155 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 186
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 196 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_80 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_80 mm_context_t;
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 405
struct kobject;
#line 406 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10933_90 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10933_90 ldv_10933 ;
};
#line 50 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 56 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 225
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 34 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
};
#line 210 "include/linux/marker.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 272 "include/linux/rcupdate.h"
struct tracepoint;
#line 273 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
};
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 238 "include/linux/timer.h"
struct hrtimer;
#line 239
enum hrtimer_restart;
#line 251
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 80 "include/trace/kmemtrace.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57
struct module_param_attrs;
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 69
struct exception_table_entry;
#line 174
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 180
struct module_sect_attrs;
#line 180
struct module_notes_attrs;
#line 180 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 519
struct device_driver;
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct inode;
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_92 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_92 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 375 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
struct prio_tree_node;
#line 191 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 570 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct iovec;
#line 41
struct kiocb;
#line 42
struct pipe_inode_info;
#line 43
struct poll_table_struct;
#line 44
struct kstatfs;
#line 45
struct cred;
#line 409 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 468 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 117 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 150 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 186 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 208
struct quota_format_type;
#line 209 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 251 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 279 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 293 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 319 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 334 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 401
struct address_space;
#line 402
struct writeback_control;
#line 558 "include/linux/fs.h"
union __anonunion_arg_95 {
   char *buf ;
   void *data ;
};
#line 558 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_94 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_95 arg ;
   int error ;
};
#line 558 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_94 read_descriptor_t;
#line 561 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 609
struct backing_dev_info;
#line 610 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 631
struct hd_struct;
#line 631
struct gendisk;
#line 631 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 701
struct inode_operations;
#line 701
struct file_operations;
#line 701
struct file_lock;
#line 701
struct cdev;
#line 701 "include/linux/fs.h"
union __anonunion_ldv_14037_96 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 701
struct dnotify_struct;
#line 701 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_14037_96 ldv_14037 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 864 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 872 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 895 "include/linux/fs.h"
union __anonunion_f_u_97 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 895 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_97 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1018
struct files_struct;
#line 1018 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1019 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1024 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 162 "include/linux/nfs.h"
struct nlm_lockowner;
#line 163 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_99 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_98 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_99 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_98 fl_u ;
};
#line 1126 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1303
struct file_system_type;
#line 1303
struct super_operations;
#line 1303
struct xattr_handler;
#line 1303
struct mtd_info;
#line 1303 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
#line 1428 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1472 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1512 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1554 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1738 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2178
struct bio;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "include/linux/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 267 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 267 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 318 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 68 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 77
struct signal_struct;
#line 78
struct tty_port;
#line 79 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
};
#line 190 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
   int drain_delay ;
};
#line 206 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 336
struct class;
#line 22 "include/linux/tty_flip.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 27 "include/linux/serial.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1U] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 164 "include/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9U] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 464 "include/linux/mod_devicetable.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
};
#line 210 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 232 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 298 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 318 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 578 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 745
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 753
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_RECONNECTING = 3,
    USB_STATE_UNAUTHENTICATED = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 765
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 47 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_17532_102 {
   u16 inuse ;
   u16 objects ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_17533_101 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_17532_102 ldv_17532 ;
};
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_17538_104 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_17542_103 {
   struct __anonstruct_ldv_17538_104 ldv_17538 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_17546_105 {
   unsigned long index ;
   void *freelist ;
};
#line 29 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_17533_101 ldv_17533 ;
   union __anonunion_ldv_17542_103 ldv_17542 ;
   union __anonunion_ldv_17546_105 ldv_17546 ;
   struct list_head lru ;
};
#line 119 "include/linux/mm_types.h"
struct __anonstruct_vm_set_107 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 119 "include/linux/mm_types.h"
union __anonunion_shared_106 {
   struct __anonstruct_vm_set_107 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 119
struct anon_vma;
#line 119
struct vm_operations_struct;
#line 119
struct mempolicy;
#line 119 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_106 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 181 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 187 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 193
struct mmu_notifier_mm;
#line 193 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_108 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_108 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_110 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_111 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_112 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_113 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_114 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_115 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_109 {
   int _pad[28U] ;
   struct __anonstruct__kill_110 _kill ;
   struct __anonstruct__timer_111 _timer ;
   struct __anonstruct__rt_112 _rt ;
   struct __anonstruct__sigchld_113 _sigchld ;
   struct __anonstruct__sigfault_114 _sigfault ;
   struct __anonstruct__sigpoll_115 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_109 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 293
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_118 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_118 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 126 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 150 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 463 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 841 "include/linux/sysctl.h"
struct nsproxy;
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key_type;
#line 35
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_type_data_119 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_120 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_119 type_data ;
   union __anonunion_payload_120 payload ;
};
#line 285 "include/linux/key.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 76 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 90 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 212
struct futex_pi_state;
#line 213
struct robust_list_head;
#line 215
struct fs_struct;
#line 142 "include/linux/sched.h"
struct cfs_rq;
#line 143
struct task_group;
#line 344
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
struct kioctx;
#line 57 "include/linux/uio.h"
union __anonunion_ki_obj_121 {
   void *user ;
   struct task_struct *tsk ;
};
#line 57 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_121 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 413 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 448 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 456 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 473 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 500
struct taskstats;
#line 500
struct tty_audit_buf;
#line 500 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 636 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 682
struct reclaim_state;
#line 683 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 701 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 743
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 825 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 848
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 862 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 947
struct io_context;
#line 968
struct audit_context;
#line 970
struct rq;
#line 971 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   int (*needs_post_schedule)(struct rq * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1025 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1030 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1099
struct rt_rq;
#line 1099 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1115
struct linux_binfmt;
#line 1115
struct irqaction;
#line 1115
struct css_set;
#line 1115
struct compat_robust_list_head;
#line 1115
struct ftrace_ret_stack;
#line 1115 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
};
#line 75 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   cpumask_t mask ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 184 "include/linux/ioport.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct driver_private;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 152 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 182
struct class_attribute;
#line 182 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 207
struct device_type;
#line 238 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 270 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops *pm ;
};
#line 299 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 360 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 369
struct dma_coherent_mem;
#line 369 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 559
struct usb_device;
#line 560
struct usb_driver;
#line 561
struct wusb_dev;
#line 562
struct ep_device;
#line 563 "include/linux/device.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 71 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 85
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 92 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char is_active : 1 ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char ep_devs_created : 1 ;
   unsigned char unregistering : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   unsigned char reset_running : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
   struct work_struct reset_ws ;
};
#line 201 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 228 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 294 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 306
struct mon_bus;
#line 306 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 345
struct usb_tt;
#line 346 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char discon_suspended : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct work_struct autoresume ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char auto_pm : 1 ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   unsigned char autoresume_disabled : 1 ;
   unsigned char skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 643 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 773 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 785 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 941 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 974
struct urb;
#line 975 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
   unsigned char poisoned : 1 ;
};
#line 992 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   atomic_t reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   u32 transfer_buffer_length ;
   u32 actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 1550
struct usb_serial;
#line 1550 "include/linux/usb.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 114 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 114 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected : 1 ;
   unsigned char suspending : 1 ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 162 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*shutdown)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   void (*close)(struct usb_serial_port * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   void (*dtr_rts)(struct usb_serial_port * , int  ) ;
   int (*carrier_raised)(struct usb_serial_port * ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   struct urb *int_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   char zombie ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16U] ;
   char busy[16U] ;
   bool read_urb_busy ;
};
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
enum __anonenum_101 {
    LDV_SPIN_UNLOCKED = 0,
    LDV_SPIN_LOCKED = 1
} ;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 2 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
void ldv_spin_lock(void) ;
#line 3
void ldv_spin_unlock(void) ;
#line 81 "include/linux/compiler.h"
extern void ftrace_likely_update(struct ftrace_branch_data * , int  , int  ) ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 238 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__current_task));
#line 14
  goto ldv_1917;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1917: ;
#line 14
  return (ret__);
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/page.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_5996: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_5996;
  } else {

  }

#line 19
  return (order);
}
}
#line 84 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 86
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 86
  return (tmp);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t * ) ;
#line 47
extern void _spin_unlock(spinlock_t * ) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 137
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 429
extern long interruptible_sleep_on_timeout(wait_queue_head_t * , long  ) ;
#line 435
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 437
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 440
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 227 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 230
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 29 "include/trace/kmemtrace.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 29 "include/trace/kmemtrace.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  long tmp ;

  {
#line 23
  ______f___0.func = "trace_kmalloc";
#line 23
  ______f___0.file = "include/trace/kmemtrace.h";
#line 23
  ______f___0.line = 29U;
#line 23
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 23
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 23
  ______f___1.func = "trace_kmalloc";
#line 23
  ______f___1.file = "include/trace/kmemtrace.h";
#line 23
  ______f___1.line = 29U;
#line 23
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 23
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 23
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 1L);
#line 23
  ______r___1 = (int )tmp;
#line 23
  ftrace_likely_update(& ______f___1, ______r___1, 0);
#line 23
  ______r___0 = ______r___1 != 0;
#line 23
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 23
  if (______r___0 != 0) {
#line 23
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 23
    it_func = _________p1;
#line 23
    ______f.func = "trace_kmalloc";
#line 23
    ______f.file = "include/trace/kmemtrace.h";
#line 23
    ______f.line = 29U;
#line 23
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 23
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 23
    ______r = (unsigned long )it_func != (unsigned long )((void **)0);
#line 23
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 23
    if (______r != 0) {
      ldv_11734: 
#line 23
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 23
      it_func = it_func + 1;
#line 23
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 24
        goto ldv_11734;
      } else {

      }

    } else {

    }
  } else {

  }
#line 30
  return;
}
}
#line 141 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 147 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;

  {
#line 149
  ______f.func = "kmalloc_index";
#line 149
  ______f.file = "include/linux/slub_def.h";
#line 149
  ______f.line = 149U;
#line 149
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 149
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 149
  ______r = size == 0UL;
#line 149
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 149
  if (______r != 0) {
#line 150
    return (0);
  } else {

  }
#line 152
  ______f___0.func = "kmalloc_index";
#line 152
  ______f___0.file = "include/linux/slub_def.h";
#line 152
  ______f___0.line = 152U;
#line 152
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 152
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 152
  ______r___0 = size <= 8UL;
#line 152
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 152
  if (______r___0 != 0) {
#line 153
    return (3);
  } else {

  }
#line 156
  ______f___1.func = "kmalloc_index";
#line 156
  ______f___1.file = "include/linux/slub_def.h";
#line 156
  ______f___1.line = 156U;
#line 156
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 156
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 156
  ______r___1 = size > 64UL && size <= 96UL;
#line 156
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 156
  if (______r___1 != 0) {
#line 157
    return (1);
  } else {

  }
#line 158
  ______f___2.func = "kmalloc_index";
#line 158
  ______f___2.file = "include/linux/slub_def.h";
#line 158
  ______f___2.line = 158U;
#line 158
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 158
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 158
  ______r___2 = size > 128UL && size <= 192UL;
#line 158
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 158
  if (______r___2 != 0) {
#line 159
    return (2);
  } else {

  }
#line 161
  ______f___3.func = "kmalloc_index";
#line 161
  ______f___3.file = "include/linux/slub_def.h";
#line 161
  ______f___3.line = 161U;
#line 161
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 161
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 161
  ______r___3 = size <= 8UL;
#line 161
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 161
  if (______r___3 != 0) {
#line 161
    return (3);
  } else {

  }
#line 162
  ______f___4.func = "kmalloc_index";
#line 162
  ______f___4.file = "include/linux/slub_def.h";
#line 162
  ______f___4.line = 162U;
#line 162
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 162
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 162
  ______r___4 = size <= 16UL;
#line 162
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 162
  if (______r___4 != 0) {
#line 162
    return (4);
  } else {

  }
#line 163
  ______f___5.func = "kmalloc_index";
#line 163
  ______f___5.file = "include/linux/slub_def.h";
#line 163
  ______f___5.line = 163U;
#line 163
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 163
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 163
  ______r___5 = size <= 32UL;
#line 163
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 163
  if (______r___5 != 0) {
#line 163
    return (5);
  } else {

  }
#line 164
  ______f___6.func = "kmalloc_index";
#line 164
  ______f___6.file = "include/linux/slub_def.h";
#line 164
  ______f___6.line = 164U;
#line 164
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 164
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 164
  ______r___6 = size <= 64UL;
#line 164
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 164
  if (______r___6 != 0) {
#line 164
    return (6);
  } else {

  }
#line 165
  ______f___7.func = "kmalloc_index";
#line 165
  ______f___7.file = "include/linux/slub_def.h";
#line 165
  ______f___7.line = 165U;
#line 165
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 165
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 165
  ______r___7 = size <= 128UL;
#line 165
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 165
  if (______r___7 != 0) {
#line 165
    return (7);
  } else {

  }
#line 166
  ______f___8.func = "kmalloc_index";
#line 166
  ______f___8.file = "include/linux/slub_def.h";
#line 166
  ______f___8.line = 166U;
#line 166
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 166
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 166
  ______r___8 = size <= 256UL;
#line 166
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 166
  if (______r___8 != 0) {
#line 166
    return (8);
  } else {

  }
#line 167
  ______f___9.func = "kmalloc_index";
#line 167
  ______f___9.file = "include/linux/slub_def.h";
#line 167
  ______f___9.line = 167U;
#line 167
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 167
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 167
  ______r___9 = size <= 512UL;
#line 167
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 167
  if (______r___9 != 0) {
#line 167
    return (9);
  } else {

  }
#line 168
  ______f___10.func = "kmalloc_index";
#line 168
  ______f___10.file = "include/linux/slub_def.h";
#line 168
  ______f___10.line = 168U;
#line 168
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 168
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 168
  ______r___10 = size <= 1024UL;
#line 168
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 168
  if (______r___10 != 0) {
#line 168
    return (10);
  } else {

  }
#line 169
  ______f___11.func = "kmalloc_index";
#line 169
  ______f___11.file = "include/linux/slub_def.h";
#line 169
  ______f___11.line = 169U;
#line 169
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 169
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 169
  ______r___11 = size <= 2048UL;
#line 169
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 169
  if (______r___11 != 0) {
#line 169
    return (11);
  } else {

  }
#line 170
  ______f___12.func = "kmalloc_index";
#line 170
  ______f___12.file = "include/linux/slub_def.h";
#line 170
  ______f___12.line = 170U;
#line 170
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 170
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 170
  ______r___12 = size <= 4096UL;
#line 170
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 170
  if (______r___12 != 0) {
#line 170
    return (12);
  } else {

  }
#line 175
  ______f___13.func = "kmalloc_index";
#line 175
  ______f___13.file = "include/linux/slub_def.h";
#line 175
  ______f___13.line = 175U;
#line 175
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 175
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 175
  ______r___13 = size <= 8192UL;
#line 175
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 175
  if (______r___13 != 0) {
#line 175
    return (13);
  } else {

  }
#line 176
  ______f___14.func = "kmalloc_index";
#line 176
  ______f___14.file = "include/linux/slub_def.h";
#line 176
  ______f___14.line = 176U;
#line 176
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 176
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 176
  ______r___14 = size <= 16384UL;
#line 176
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 176
  if (______r___14 != 0) {
#line 176
    return (14);
  } else {

  }
#line 177
  ______f___15.func = "kmalloc_index";
#line 177
  ______f___15.file = "include/linux/slub_def.h";
#line 177
  ______f___15.line = 177U;
#line 177
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 177
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 177
  ______r___15 = size <= 32768UL;
#line 177
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 177
  if (______r___15 != 0) {
#line 177
    return (15);
  } else {

  }
#line 178
  ______f___16.func = "kmalloc_index";
#line 178
  ______f___16.file = "include/linux/slub_def.h";
#line 178
  ______f___16.line = 178U;
#line 178
  ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 178
  ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 178
  ______r___16 = size <= 65536UL;
#line 178
  ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 178
  if (______r___16 != 0) {
#line 178
    return (16);
  } else {

  }
#line 179
  ______f___17.func = "kmalloc_index";
#line 179
  ______f___17.file = "include/linux/slub_def.h";
#line 179
  ______f___17.line = 179U;
#line 179
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 179
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 179
  ______r___17 = size <= 131072UL;
#line 179
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 179
  if (______r___17 != 0) {
#line 179
    return (17);
  } else {

  }
#line 180
  ______f___18.func = "kmalloc_index";
#line 180
  ______f___18.file = "include/linux/slub_def.h";
#line 180
  ______f___18.line = 180U;
#line 180
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 180
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 180
  ______r___18 = size <= 262144UL;
#line 180
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 180
  if (______r___18 != 0) {
#line 180
    return (18);
  } else {

  }
#line 181
  ______f___19.func = "kmalloc_index";
#line 181
  ______f___19.file = "include/linux/slub_def.h";
#line 181
  ______f___19.line = 181U;
#line 181
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 181
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 181
  ______r___19 = size <= 524288UL;
#line 181
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 181
  if (______r___19 != 0) {
#line 181
    return (19);
  } else {

  }
#line 182
  ______f___20.func = "kmalloc_index";
#line 182
  ______f___20.file = "include/linux/slub_def.h";
#line 182
  ______f___20.line = 182U;
#line 182
  ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 182
  ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 182
  ______r___20 = size <= 1048576UL;
#line 182
  ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 182
  if (______r___20 != 0) {
#line 182
    return (20);
  } else {

  }
#line 183
  ______f___21.func = "kmalloc_index";
#line 183
  ______f___21.file = "include/linux/slub_def.h";
#line 183
  ______f___21.line = 183U;
#line 183
  ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 183
  ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 183
  ______r___21 = size <= 2097152UL;
#line 183
  ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 183
  if (______r___21 != 0) {
#line 183
    return (21);
  } else {

  }
#line 184
  return (-1);
}
}
#line 201 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 203
  tmp = kmalloc_index(size);
#line 203
  index = tmp;
#line 205
  ______f.func = "kmalloc_slab";
#line 205
  ______f.file = "include/linux/slub_def.h";
#line 205
  ______f.line = 205U;
#line 205
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 205
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 205
  ______r = index == 0;
#line 205
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 205
  if (______r != 0) {
#line 206
    return (0);
  } else {

  }
#line 208
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 218
extern void *kmem_cache_alloc(struct kmem_cache * , gfp_t  ) ;
#line 221
void *ldv_kmem_cache_alloc_7(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 223
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 226
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 231 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 233
  tmp = get_order(size);
#line 233
  order = (unsigned int )tmp;
#line 234
  tmp___0 = ldv___get_free_pages_2(flags | 16384U, order);
#line 234
  ret = (void *)tmp___0;
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *ldv_kmalloc_3(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    ______f.func = "ldv_kmalloc_3";
#line 246
    ______f.file = "include/linux/slub_def.h";
#line 246
    ______f.line = 246U;
#line 246
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 246
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 246
    ______r = size > 8192UL;
#line 246
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 246
    if (______r != 0) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    ______f___1.func = "ldv_kmalloc_3";
#line 249
    ______f___1.file = "include/linux/slub_def.h";
#line 249
    ______f___1.line = 249U;
#line 249
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 249
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 249
    ______r___1 = (flags & 1U) == 0U;
#line 249
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 249
    if (______r___1 != 0) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      ______f___0.func = "ldv_kmalloc_3";
#line 252
      ______f___0.file = "include/linux/slub_def.h";
#line 252
      ______f___0.line = 252U;
#line 252
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 252
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 252
      ______r___0 = (unsigned long )s == (unsigned long )((struct kmem_cache *)0);
#line 252
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 252
      if (______r___0 != 0) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 241
__inline static void *kmalloc(size_t size , gfp_t flags ) ;
#line 308 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) ;
#line 86 "include/linux/module.h"
extern struct module __this_module ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
void ldv_check_alloc_flags(gfp_t flags ) ;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess_64.h"
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 24
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 353 "include/linux/tty.h"
extern void tty_kref_put(struct tty_struct * ) ;
#line 392
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 396
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 411
extern void tty_wakeup(struct tty_struct * ) ;
#line 440
extern struct tty_struct *tty_port_tty_get(struct tty_port * ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct * , size_t  ) ;
#line 5
extern int tty_insert_flip_string(struct tty_struct * , unsigned char const   * ,
                                  size_t  ) ;
#line 342 "include/linux/sched.h"
extern void schedule(void) ;
#line 2161 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2163
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2163
  return (tmp);
}
}
#line 2181 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  long tmp___0 ;

  {
#line 2183
  ______f.func = "signal_pending";
#line 2183
  ______f.file = "include/linux/sched.h";
#line 2183
  ______f.line = 2183U;
#line 2183
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2183
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2183
  tmp = test_tsk_thread_flag(p, 2);
#line 2183
  tmp___0 = __builtin_expect(tmp != 0, 1L);
#line 2183
  ______r = (int )tmp___0;
#line 2183
  ftrace_likely_update(& ______f, ______r, 0);
#line 2183
  return (______r);
}
}
#line 27 "include/linux/smp_lock.h"
extern void lock_kernel(void) ;
#line 28
extern void unlock_kernel(void) ;
#line 425 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 427
  tmp = kobject_name(& dev->kobj);
#line 427
  return (tmp);
}
}
#line 452 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 454
  return ((void *)dev->driver_data);
}
}
#line 457 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 459
  dev->driver_data = data;
#line 460
  return;
}
}
#line 558
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 923 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 925 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 927
  tmp = usb_register_driver(driver, & __this_module, "mos7840");
#line 927
  return (tmp);
}
}
#line 929
extern void usb_deregister(struct usb_driver * ) ;
#line 1211 "include/linux/usb.h"
__inline static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 


  {
#line 1220
  urb->dev = dev;
#line 1221
  urb->pipe = pipe;
#line 1222
  urb->setup_packet = setup_packet;
#line 1223
  urb->transfer_buffer = transfer_buffer;
#line 1224
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1225
  urb->complete = complete_fn;
#line 1226
  urb->context = context;
#line 1227
  return;
}
}
#line 1242 "include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
#line 1250
  urb->dev = dev;
#line 1251
  urb->pipe = pipe;
#line 1252
  urb->transfer_buffer = transfer_buffer;
#line 1253
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1254
  urb->complete = complete_fn;
#line 1255
  urb->context = context;
#line 1256
  return;
}
}
#line 1276 "include/linux/usb.h"
__inline static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 1285
  urb->dev = dev;
#line 1286
  urb->pipe = pipe;
#line 1287
  urb->transfer_buffer = transfer_buffer;
#line 1288
  urb->transfer_buffer_length = (u32 )buffer_length;
#line 1289
  urb->complete = complete_fn;
#line 1290
  urb->context = context;
#line 1291
  ______f.func = "usb_fill_int_urb";
#line 1291
  ______f.file = "include/linux/usb.h";
#line 1291
  ______f.line = 1291U;
#line 1291
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1291
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1291
  ______r = (unsigned int )dev->speed == 3U;
#line 1291
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1291
  if (______r != 0) {
#line 1292
    urb->interval = 1 << (interval - 1);
  } else {
#line 1294
    urb->interval = interval;
  }
#line 1295
  urb->start_frame = -1;
#line 1296
  return;
}
}
#line 1299
extern struct urb *usb_alloc_urb(int  , gfp_t  ) ;
#line 1302
struct urb *ldv_usb_alloc_urb_14(int ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1306
struct urb *ldv_usb_alloc_urb_20(int ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1308
extern void usb_free_urb(struct urb * ) ;
#line 1311
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1314
int ldv_usb_submit_urb_10(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1318
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1322
int ldv_usb_submit_urb_12(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1326
int ldv_usb_submit_urb_13(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1330
int ldv_usb_submit_urb_15(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1334
int ldv_usb_submit_urb_16(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1338
int ldv_usb_submit_urb_17(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1342
int ldv_usb_submit_urb_18(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1346
int ldv_usb_submit_urb_19(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) ;
#line 1349
extern void usb_kill_urb(struct urb * ) ;
#line 1369
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1387
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1495 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1498
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 104 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 106
  tmp = dev_get_drvdata((struct device  const  *)(& port->dev));
#line 106
  return (tmp);
}
}
#line 109 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 112
  dev_set_drvdata(& port->dev, data);
#line 113
  return;
}
}
#line 256
extern int usb_serial_register(struct usb_serial_driver * ) ;
#line 257
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
#line 260
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
#line 262
extern void usb_serial_disconnect(struct usb_interface * ) ;
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_device_id moschip_port_id_table[6U]  = {      {3U, 38672U, 30784U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 38672U, 30752U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 2134U, 44100U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      2134U, 44098U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1367U, 8209U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_device_id moschip_id_table_combined[6U]  = {      {3U, 38672U, 30784U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 38672U, 30752U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 2134U, 44100U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      2134U, 44098U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      1367U, 8209U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int debug  ;
#line 251 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 254
  dev = (port->serial)->dev;
#line 255
  val = (unsigned int )val & 255U;
#line 256
  ______f.func = "mos7840_set_reg_sync";
#line 256
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 256
  ______f.line = 256U;
#line 256
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 256
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 256
  ______r = debug != 0;
#line 256
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 256
  if (______r != 0) {
#line 256
    printk("<7>%s: mos7840_set_reg_sync offset is %x, value %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )reg, (int )val);
  } else {

  }
#line 258
  tmp = __create_pipe(dev, 0U);
#line 258
  tmp___0 = usb_control_msg(dev, tmp | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 1250);
#line 258
  return (tmp___0);
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  unsigned int tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;

  {
#line 272
  dev = (port->serial)->dev;
#line 273
  ret = 0;
#line 275
  tmp = __create_pipe(dev, 0U);
#line 275
  ret = usb_control_msg(dev, tmp | 2147483776U, 13, 192, 0, (int )reg, (void *)val,
                        1, 1250);
#line 278
  ______f.func = "mos7840_get_reg_sync";
#line 278
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 278
  ______f.line = 278U;
#line 278
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 278
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 278
  ______r = debug != 0;
#line 278
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 278
  if (______r != 0) {
#line 278
    printk("<7>%s: mos7840_get_reg_sync offset is %x, return val %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )reg, (int )*val);
  } else {

  }
#line 279
  *val = (unsigned int )*val & 255U;
#line 280
  return (ret);
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 293
  dev = (port->serial)->dev;
#line 294
  val = (unsigned int )val & 255U;
#line 297
  ______f___3.func = "mos7840_set_uart_reg";
#line 297
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 297
  ______f___3.line = 297U;
#line 297
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 297
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 297
  ______r___3 = (unsigned int )(port->serial)->num_ports == 4U;
#line 297
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 297
  if (______r___3 != 0) {
#line 298
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
#line 300
    ______f.func = "mos7840_set_uart_reg";
#line 300
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 300
    ______f.line = 300U;
#line 300
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 300
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 300
    ______r = debug != 0;
#line 300
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 300
    if (______r != 0) {
#line 300
      printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (int )val);
    } else {

    }
  } else {
#line 302
    ______f___2.func = "mos7840_set_uart_reg";
#line 302
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 302
    ______f___2.line = 302U;
#line 302
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 302
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 302
    ______r___2 = (int )port->number == (int )(port->serial)->minor;
#line 302
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 302
    if (______r___2 != 0) {
#line 303
      val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
#line 305
      ______f___0.func = "mos7840_set_uart_reg";
#line 305
      ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 305
      ______f___0.line = 306U;
#line 305
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 305
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 305
      ______r___0 = debug != 0;
#line 305
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 305
      if (______r___0 != 0) {
#line 305
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (int )val);
      } else {

      }
    } else {
#line 308
      val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 2) << 8)) | (int )((short )val));
#line 311
      ______f___1.func = "mos7840_set_uart_reg";
#line 311
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 311
      ______f___1.line = 312U;
#line 311
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 311
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 311
      ______r___1 = debug != 0;
#line 311
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 311
      if (______r___1 != 0) {
#line 311
        printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (int )val);
      } else {

      }
    }
  }
#line 315
  tmp = __create_pipe(dev, 0U);
#line 315
  tmp___0 = usb_control_msg(dev, tmp | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 1250);
#line 315
  return (tmp___0);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  unsigned int tmp ;

  {
#line 329
  dev = (port->serial)->dev;
#line 330
  ret = 0;
#line 336
  ______f___3.func = "mos7840_get_uart_reg";
#line 336
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 336
  ______f___3.line = 336U;
#line 336
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 336
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 336
  ______r___3 = (unsigned int )(port->serial)->num_ports == 4U;
#line 336
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 336
  if (______r___3 != 0) {
#line 337
    Wval = (int )((__u16 )((int )((short )((int )((unsigned short )port->number) - (int )((unsigned short )(port->serial)->minor))) + 1)) << 8U;
#line 340
    ______f.func = "mos7840_get_uart_reg";
#line 340
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 340
    ______f.line = 340U;
#line 340
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 340
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 340
    ______r = debug != 0;
#line 340
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 340
    if (______r != 0) {
#line 340
      printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (int )Wval);
    } else {

    }
  } else {
#line 342
    ______f___2.func = "mos7840_get_uart_reg";
#line 342
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 342
    ______f___2.line = 342U;
#line 342
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 342
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 342
    ______r___2 = (int )port->number == (int )(port->serial)->minor;
#line 342
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 342
    if (______r___2 != 0) {
#line 343
      Wval = (int )((__u16 )((int )((short )((int )((unsigned short )port->number) - (int )((unsigned short )(port->serial)->minor))) + 1)) << 8U;
#line 345
      ______f___0.func = "mos7840_get_uart_reg";
#line 345
      ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 345
      ______f___0.line = 346U;
#line 345
      ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 345
      ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 345
      ______r___0 = debug != 0;
#line 345
      ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 345
      if (______r___0 != 0) {
#line 345
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (int )Wval);
      } else {

      }
    } else {
#line 348
      Wval = (int )((__u16 )((int )((short )((int )((unsigned short )port->number) - (int )((unsigned short )(port->serial)->minor))) + 2)) << 8U;
#line 350
      ______f___1.func = "mos7840_get_uart_reg";
#line 350
      ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 350
      ______f___1.line = 351U;
#line 350
      ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 350
      ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 350
      ______r___1 = debug != 0;
#line 350
      ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 350
      if (______r___1 != 0) {
#line 350
        printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (int )Wval);
      } else {

      }
    }
  }
#line 354
  tmp = __create_pipe(dev, 0U);
#line 354
  ret = usb_control_msg(dev, tmp | 2147483776U, 13, 192, (int )Wval, (int )reg, (void *)val,
                        1, 1250);
#line 357
  *val = (unsigned int )*val & 255U;
#line 358
  return (ret);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_dump_serial_port(struct moschip_port *mos7840_port ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 364
  ______f.func = "mos7840_dump_serial_port";
#line 364
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 364
  ______f.line = 364U;
#line 364
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 364
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 364
  ______r = debug != 0;
#line 364
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 364
  if (______r != 0) {
#line 364
    printk("<7>%s: ***************************************\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 365
  ______f___0.func = "mos7840_dump_serial_port";
#line 365
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 365
  ______f___0.line = 365U;
#line 365
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 365
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 365
  ______r___0 = debug != 0;
#line 365
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 365
  if (______r___0 != 0) {
#line 365
    printk("<7>%s: SpRegOffset is %2x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->SpRegOffset);
  } else {

  }
#line 366
  ______f___1.func = "mos7840_dump_serial_port";
#line 366
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 366
  ______f___1.line = 366U;
#line 366
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 366
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 366
  ______r___1 = debug != 0;
#line 366
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 366
  if (______r___1 != 0) {
#line 366
    printk("<7>%s: ControlRegOffset is %2x \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->ControlRegOffset);
  } else {

  }
#line 367
  ______f___2.func = "mos7840_dump_serial_port";
#line 367
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 367
  ______f___2.line = 367U;
#line 367
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 367
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 367
  ______r___2 = debug != 0;
#line 367
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 367
  if (______r___2 != 0) {
#line 367
    printk("<7>%s: DCRRegOffset is %2x \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->DcrRegOffset);
  } else {

  }
#line 368
  ______f___3.func = "mos7840_dump_serial_port";
#line 368
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 368
  ______f___3.line = 368U;
#line 368
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 368
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 368
  ______r___3 = debug != 0;
#line 368
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 368
  if (______r___3 != 0) {
#line 368
    printk("<7>%s: ***************************************\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 369
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
__inline static void mos7840_set_port_private(struct usb_serial_port *port , struct moschip_port *data ) 
{ 


  {
#line 382
  usb_set_serial_port_data(port, (void *)data);
#line 383
  return;
}
}
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
__inline static struct moschip_port *mos7840_get_port_private(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 389
  tmp = usb_get_serial_port_data(port);
#line 389
  return ((struct moschip_port *)tmp);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 396
  mos7840_port = port;
#line 397
  icount = & mos7840_port->icount;
#line 398
  ______f___3.func = "mos7840_handle_new_msr";
#line 398
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 398
  ______f___3.line = 400U;
#line 398
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 398
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 398
  ______r___3 = ((int )new_msr & 240) != 0;
#line 398
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 398
  if (______r___3 != 0) {
#line 401
    icount = & mos7840_port->icount;
#line 404
    ______f.func = "mos7840_handle_new_msr";
#line 404
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 404
    ______f.line = 404U;
#line 404
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 404
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 404
    ______r = ((int )new_msr & 16) != 0;
#line 404
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 404
    if (______r != 0) {
#line 405
      icount->cts = icount->cts + (__u32 )1;
#line 406
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 408
    ______f___0.func = "mos7840_handle_new_msr";
#line 408
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 408
    ______f___0.line = 408U;
#line 408
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 408
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 408
    ______r___0 = ((int )new_msr & 32) != 0;
#line 408
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 408
    if (______r___0 != 0) {
#line 409
      icount->dsr = icount->dsr + (__u32 )1;
#line 410
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 412
    ______f___1.func = "mos7840_handle_new_msr";
#line 412
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 412
    ______f___1.line = 412U;
#line 412
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 412
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 412
    ______r___1 = (int )((signed char )new_msr) < 0;
#line 412
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 412
    if (______r___1 != 0) {
#line 413
      icount->dcd = icount->dcd + (__u32 )1;
#line 414
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 416
    ______f___2.func = "mos7840_handle_new_msr";
#line 416
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 416
    ______f___2.line = 416U;
#line 416
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 416
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 416
    ______r___2 = ((int )new_msr & 64) != 0;
#line 416
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 416
    if (______r___2 != 0) {
#line 417
      icount->rng = icount->rng + (__u32 )1;
#line 418
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 421
  return;
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 427
  ______f.func = "mos7840_handle_new_lsr";
#line 427
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 427
  ______f.line = 427U;
#line 427
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 427
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 427
  ______r = debug != 0;
#line 427
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 427
  if (______r != 0) {
#line 427
    printk("<7>%s: %s - %02x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_handle_new_lsr", (int )new_lsr);
  } else {

  }
#line 429
  ______f___0.func = "mos7840_handle_new_lsr";
#line 429
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 429
  ______f___0.line = 429U;
#line 429
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 429
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 429
  ______r___0 = ((int )new_lsr & 16) != 0;
#line 429
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 429
  if (______r___0 != 0) {
#line 435
    new_lsr = (unsigned int )new_lsr & 18U;
  } else {

  }
#line 439
  icount = & port->icount;
#line 440
  ______f___1.func = "mos7840_handle_new_lsr";
#line 440
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 440
  ______f___1.line = 440U;
#line 440
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 440
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 440
  ______r___1 = ((int )new_lsr & 16) != 0;
#line 440
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 440
  if (______r___1 != 0) {
#line 441
    icount->brk = icount->brk + (__u32 )1;
#line 442
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 444
  ______f___2.func = "mos7840_handle_new_lsr";
#line 444
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 444
  ______f___2.line = 444U;
#line 444
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 444
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 444
  ______r___2 = ((int )new_lsr & 2) != 0;
#line 444
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 444
  if (______r___2 != 0) {
#line 445
    icount->overrun = icount->overrun + (__u32 )1;
#line 446
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 448
  ______f___3.func = "mos7840_handle_new_lsr";
#line 448
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 448
  ______f___3.line = 448U;
#line 448
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 448
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 448
  ______r___3 = ((int )new_lsr & 4) != 0;
#line 448
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 448
  if (______r___3 != 0) {
#line 449
    icount->parity = icount->parity + (__u32 )1;
#line 450
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 452
  ______f___4.func = "mos7840_handle_new_lsr";
#line 452
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 452
  ______f___4.line = 452U;
#line 452
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 452
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 452
  ______r___4 = ((int )new_lsr & 8) != 0;
#line 452
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 452
  if (______r___4 != 0) {
#line 453
    icount->frame = icount->frame + (__u32 )1;
#line 454
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 456
  return;
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  __u8 regval ;
  int result ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;

  {
#line 469
  regval = 0U;
#line 470
  result = 0;
#line 471
  status = urb->status;
#line 473
  mos7840_port = (struct moschip_port *)urb->context;
#line 475
  switch (status) {
  case 0: ;
#line 478
  goto ldv_23632;
  case -104: ;
  case -2: ;
  case -108: 
#line 483
  ______f.func = "mos7840_control_callback";
#line 483
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 483
  ______f.line = 484U;
#line 483
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 483
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 483
  ______r = debug != 0;
#line 483
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 483
  if (______r != 0) {
#line 483
    printk("<7>%s: %s - urb shutting down with status: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", status);
  } else {

  }
#line 485
  return;
  default: 
#line 487
  ______f___0.func = "mos7840_control_callback";
#line 487
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 487
  ______f___0.line = 488U;
#line 487
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 487
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 487
  ______r___0 = debug != 0;
#line 487
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 487
  if (______r___0 != 0) {
#line 487
    printk("<7>%s: %s - nonzero urb status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", status);
  } else {

  }
#line 489
  goto exit;
  }
  ldv_23632: 
#line 492
  ______f___1.func = "mos7840_control_callback";
#line 492
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 492
  ______f___1.line = 492U;
#line 492
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 492
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 492
  ______r___1 = debug != 0;
#line 492
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 492
  if (______r___1 != 0) {
#line 492
    printk("<7>%s: %s urb buffer size is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", urb->actual_length);
  } else {

  }
#line 493
  ______f___2.func = "mos7840_control_callback";
#line 493
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 493
  ______f___2.line = 494U;
#line 493
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 493
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 493
  ______r___2 = debug != 0;
#line 493
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 493
  if (______r___2 != 0) {
#line 493
    printk("<7>%s: %s mos7840_port->MsrLsr is %d port %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
  } else {

  }
#line 495
  data = (unsigned char *)urb->transfer_buffer;
#line 496
  regval = *data;
#line 497
  ______f___3.func = "mos7840_control_callback";
#line 497
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 497
  ______f___3.line = 497U;
#line 497
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 497
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 497
  ______r___3 = debug != 0;
#line 497
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 497
  if (______r___3 != 0) {
#line 497
    printk("<7>%s: %s data is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", (int )regval);
  } else {

  }
#line 498
  ______f___5.func = "mos7840_control_callback";
#line 498
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 498
  ______f___5.line = 498U;
#line 498
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 498
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 498
  ______r___5 = mos7840_port->MsrLsr == 0;
#line 498
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 498
  if (______r___5 != 0) {
#line 499
    mos7840_handle_new_msr(mos7840_port, (int )regval);
  } else {
#line 500
    ______f___4.func = "mos7840_control_callback";
#line 500
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 500
    ______f___4.line = 500U;
#line 500
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 500
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 500
    ______r___4 = mos7840_port->MsrLsr == 1;
#line 500
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 500
    if (______r___4 != 0) {
#line 501
      mos7840_handle_new_lsr(mos7840_port, (int )regval);
    } else {

    }
  }
  exit: 
#line 504
  _spin_lock(& mos7840_port->pool_lock);
#line 505
  ______f___6.func = "mos7840_control_callback";
#line 505
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 505
  ______f___6.line = 505U;
#line 505
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 505
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 505
  ______r___6 = (int )((signed char )mos7840_port->zombie) == 0;
#line 505
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 505
  if (______r___6 != 0) {
#line 506
    result = ldv_usb_submit_urb_10(mos7840_port->int_urb, 32U);
  } else {

  }
#line 507
  _spin_unlock(& mos7840_port->pool_lock);
#line 508
  ______f___7.func = "mos7840_control_callback";
#line 508
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 508
  ______f___7.line = 508U;
#line 508
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 508
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 508
  ______r___7 = result != 0;
#line 508
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 508
  if (______r___7 != 0) {
#line 509
    tmp = dev_name((struct device  const  *)(& (urb->dev)->dev));
#line 509
    tmp___0 = dev_driver_string((struct device  const  *)(& (urb->dev)->dev));
#line 509
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_control_callback",
           result);
  } else {

  }
#line 510
  return;
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 518
  dev = ((mcs->port)->serial)->dev;
#line 519
  dr = mcs->dr;
#line 520
  buffer = (unsigned char *)mcs->ctrl_buf;
#line 523
  dr->bRequestType = 192U;
#line 524
  dr->bRequest = 13U;
#line 525
  dr->wValue = Wval;
#line 526
  dr->wIndex = reg;
#line 527
  dr->wLength = 2U;
#line 529
  tmp = __create_pipe(dev, 0U);
#line 529
  usb_fill_control_urb(mcs->control_urb, dev, tmp | 2147483776U, (unsigned char *)dr,
                       (void *)buffer, 2, & mos7840_control_callback, (void *)mcs);
#line 532
  (mcs->control_urb)->transfer_buffer_length = 2U;
#line 533
  ret = ldv_usb_submit_urb_11(mcs->control_urb, 32U);
#line 534
  return (ret);
}
}
#line 543 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5U] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;

  {
#line 552
  rv = 0;
#line 553
  wreg = 0U;
#line 554
  status = urb->status;
#line 556
  ______f.func = "mos7840_interrupt_callback";
#line 556
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 556
  ______f.line = 556U;
#line 556
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 556
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 556
  ______r = debug != 0;
#line 556
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 556
  if (______r != 0) {
#line 556
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" : Entering\n");
  } else {

  }
#line 558
  switch (status) {
  case 0: ;
#line 561
  goto ldv_23697;
  case -104: ;
  case -2: ;
  case -108: 
#line 566
  ______f___0.func = "mos7840_interrupt_callback";
#line 566
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 566
  ______f___0.line = 567U;
#line 566
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 566
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 566
  ______r___0 = debug != 0;
#line 566
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 566
  if (______r___0 != 0) {
#line 566
    printk("<7>%s: %s - urb shutting down with status: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_interrupt_callback", status);
  } else {

  }
#line 568
  return;
  default: 
#line 570
  ______f___1.func = "mos7840_interrupt_callback";
#line 570
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 570
  ______f___1.line = 571U;
#line 570
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 570
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 570
  ______r___1 = debug != 0;
#line 570
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 570
  if (______r___1 != 0) {
#line 570
    printk("<7>%s: %s - nonzero urb status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_interrupt_callback", status);
  } else {

  }
#line 572
  goto exit;
  }
  ldv_23697: 
#line 575
  length = (int )urb->actual_length;
#line 576
  data = (unsigned char *)urb->transfer_buffer;
#line 578
  serial = (struct usb_serial *)urb->context;
#line 587
  ______f___3.func = "mos7840_interrupt_callback";
#line 587
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 587
  ______f___3.line = 587U;
#line 587
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 587
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 587
  ______r___3 = length != 0 && length > 5;
#line 587
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 587
  if (______r___3 != 0) {
#line 588
    ______f___2.func = "mos7840_interrupt_callback";
#line 588
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 588
    ______f___2.line = 588U;
#line 588
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 588
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 588
    ______r___2 = debug != 0;
#line 588
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 588
    if (______r___2 != 0) {
#line 588
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Wrong data !!!");
    } else {

    }
#line 589
    return;
  } else {

  }
#line 592
  sp[0] = *data;
#line 593
  sp[1] = *(data + 1UL);
#line 594
  sp[2] = *(data + 2UL);
#line 595
  sp[3] = *(data + 3UL);
#line 596
  st = *(data + 4UL);
#line 598
  i = 0;
#line 598
  goto ldv_23740;
  ldv_23739: 
#line 599
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 600
  wval = (int )((__u16 )((int )((short )((int )((unsigned short )(serial->port[i])->number) - (int )((unsigned short )serial->minor))) + 1)) << 8U;
#line 603
  ______f___10.func = "mos7840_interrupt_callback";
#line 603
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 603
  ______f___10.line = 603U;
#line 603
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 603
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 603
  ______r___10 = (int )((signed char )mos7840_port->open) != 0;
#line 603
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 603
  if (______r___10 != 0) {
#line 604
    ______f___9.func = "mos7840_interrupt_callback";
#line 604
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 604
    ______f___9.line = 604U;
#line 604
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 604
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 604
    ______r___9 = (int )sp[i] & 1;
#line 604
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 604
    if (______r___9 != 0) {
#line 605
      ______f___8.func = "mos7840_interrupt_callback";
#line 605
      ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 605
      ______f___8.line = 605U;
#line 605
      ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 605
      ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 605
      ______r___8 = debug != 0;
#line 605
      ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 605
      if (______r___8 != 0) {
#line 605
        printk("<7>%s: SP%d No Interrupt !!!\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               i);
      } else {
#line 607
        switch ((int )sp[i] & 15) {
        case 6: 
#line 609
        ______f___4.func = "mos7840_interrupt_callback";
#line 609
        ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 609
        ______f___4.line = 609U;
#line 609
        ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 609
        ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 609
        ______r___4 = debug != 0;
#line 609
        ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 609
        if (______r___4 != 0) {
#line 609
          printk("<7>%s: Serial Port %d: Receiver status error or \n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
                 i);
        } else {

        }
#line 610
        ______f___5.func = "mos7840_interrupt_callback";
#line 610
        ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 610
        ______f___5.line = 610U;
#line 610
        ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 610
        ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 610
        ______r___5 = debug != 0;
#line 610
        ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 610
        if (______r___5 != 0) {
#line 610
          printk("<7>%s: address bit detected in 9-bit mode\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
        } else {

        }
#line 611
        mos7840_port->MsrLsr = 1;
#line 612
        wreg = 5U;
#line 613
        goto ldv_23731;
        case 0: 
#line 615
        ______f___6.func = "mos7840_interrupt_callback";
#line 615
        ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 615
        ______f___6.line = 615U;
#line 615
        ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 615
        ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 615
        ______r___6 = debug != 0;
#line 615
        ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 615
        if (______r___6 != 0) {
#line 615
          printk("<7>%s: Serial Port %d: Modem status change\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
                 i);
        } else {

        }
#line 616
        mos7840_port->MsrLsr = 0;
#line 617
        wreg = 6U;
#line 618
        goto ldv_23731;
        }
        ldv_23731: 
#line 620
        _spin_lock(& mos7840_port->pool_lock);
#line 621
        ______f___7.func = "mos7840_interrupt_callback";
#line 621
        ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 621
        ______f___7.line = 621U;
#line 621
        ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 621
        ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 621
        ______r___7 = (int )((signed char )mos7840_port->zombie) == 0;
#line 621
        ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 621
        if (______r___7 != 0) {
#line 622
          rv = mos7840_get_reg(mos7840_port, (int )wval, (int )wreg, & Data);
        } else {
#line 624
          _spin_unlock(& mos7840_port->pool_lock);
#line 625
          return;
        }
#line 627
        _spin_unlock(& mos7840_port->pool_lock);
      }
    } else {

    }
  } else {

  }
#line 598
  i = i + 1;
  ldv_23740: ;
#line 598
  if ((int )serial->num_ports > i) {
#line 599
    goto ldv_23739;
  } else {

  }
#line 631
  ______f___11.func = "mos7840_interrupt_callback";
#line 631
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 631
  ______f___11.line = 631U;
#line 631
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 631
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 631
  ______r___11 = rv >= 0;
#line 631
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 631
  if (______r___11 != 0) {
#line 633
    return;
  } else {

  }
  exit: 
#line 635
  result = ldv_usb_submit_urb_12(urb, 32U);
#line 636
  ______f___12.func = "mos7840_interrupt_callback";
#line 636
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 636
  ______f___12.line = 636U;
#line 636
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 636
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 636
  ______r___12 = result != 0;
#line 636
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 636
  if (______r___12 != 0) {
#line 637
    tmp = dev_name((struct device  const  *)(& (urb->dev)->dev));
#line 637
    tmp___0 = dev_driver_string((struct device  const  *)(& (urb->dev)->dev));
#line 637
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_interrupt_callback",
           result);
  } else {

  }
#line 638
  return;
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 646
  ______f___0.func = "mos7840_port_paranoia_check";
#line 646
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 646
  ______f___0.line = 646U;
#line 646
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 646
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 646
  ______r___0 = (unsigned long )port == (unsigned long )((struct usb_serial_port *)0);
#line 646
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 646
  if (______r___0 != 0) {
#line 647
    ______f.func = "mos7840_port_paranoia_check";
#line 647
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 647
    ______f.line = 647U;
#line 647
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 647
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 647
    ______r = debug != 0;
#line 647
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 647
    if (______r != 0) {
#line 647
      printk("<7>%s: %s - port == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 648
    return (-1);
  } else {

  }
#line 650
  ______f___2.func = "mos7840_port_paranoia_check";
#line 650
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 650
  ______f___2.line = 650U;
#line 650
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 650
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 650
  ______r___2 = (unsigned long )port->serial == (unsigned long )((struct usb_serial *)0);
#line 650
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 650
  if (______r___2 != 0) {
#line 651
    ______f___1.func = "mos7840_port_paranoia_check";
#line 651
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 651
    ______f___1.line = 651U;
#line 651
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 651
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 651
    ______r___1 = debug != 0;
#line 651
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 651
    if (______r___1 != 0) {
#line 651
      printk("<7>%s: %s - port->serial == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 652
    return (-1);
  } else {

  }
#line 655
  return (0);
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 662
  ______f___0.func = "mos7840_serial_paranoia_check";
#line 662
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 662
  ______f___0.line = 662U;
#line 662
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 662
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 662
  ______r___0 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 662
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 662
  if (______r___0 != 0) {
#line 663
    ______f.func = "mos7840_serial_paranoia_check";
#line 663
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 663
    ______f.line = 663U;
#line 663
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 663
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 663
    ______r = debug != 0;
#line 663
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 663
    if (______r != 0) {
#line 663
      printk("<7>%s: %s - serial == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 664
    return (-1);
  } else {

  }
#line 666
  ______f___2.func = "mos7840_serial_paranoia_check";
#line 666
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 666
  ______f___2.line = 666U;
#line 666
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 666
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 666
  ______r___2 = (unsigned long )serial->type == (unsigned long )((struct usb_serial_driver *)0);
#line 666
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 666
  if (______r___2 != 0) {
#line 667
    ______f___1.func = "mos7840_serial_paranoia_check";
#line 667
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 667
    ______f___1.line = 667U;
#line 667
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 667
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 667
    ______r___1 = debug != 0;
#line 667
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 667
    if (______r___1 != 0) {
#line 667
      printk("<7>%s: %s - serial->type == NULL!\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 668
    return (-1);
  } else {

  }
#line 671
  return (0);
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 678
  ______f.func = "mos7840_get_usb_serial";
#line 678
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 678
  ______f.line = 680U;
#line 678
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 678
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 678
  if ((unsigned long )port == (unsigned long )((struct usb_serial_port *)0)) {
#line 678
    tmp___1 = 1;
  } else {
#line 678
    tmp = mos7840_port_paranoia_check(port, function);
#line 678
    if (tmp != 0) {
#line 678
      tmp___1 = 1;
    } else {
#line 678
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 678
      if (tmp___0 != 0) {
#line 678
        tmp___1 = 1;
      } else {
#line 678
        tmp___1 = 0;
      }
    }
  }
#line 678
  ______r = tmp___1;
#line 678
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 678
  if (______r != 0) {
#line 683
    return (0);
  } else {

  }
#line 686
  return (port->serial);
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int tmp ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;

  {
#line 703
  status = urb->status;
#line 705
  mos7840_port = (struct moschip_port *)urb->context;
#line 706
  ______f___0.func = "mos7840_bulk_in_callback";
#line 706
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 706
  ______f___0.line = 706U;
#line 706
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 706
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 706
  ______r___0 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 706
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 706
  if (______r___0 != 0) {
#line 707
    ______f.func = "mos7840_bulk_in_callback";
#line 707
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 707
    ______f.line = 707U;
#line 707
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 707
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 707
    ______r = debug != 0;
#line 707
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 707
    if (______r != 0) {
#line 707
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"NULL mos7840_port pointer \n");
    } else {

    }
#line 708
    mos7840_port->read_urb_busy = 0;
#line 709
    return;
  } else {

  }
#line 712
  ______f___2.func = "mos7840_bulk_in_callback";
#line 712
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 712
  ______f___2.line = 712U;
#line 712
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 712
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 712
  ______r___2 = status != 0;
#line 712
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 712
  if (______r___2 != 0) {
#line 713
    ______f___1.func = "mos7840_bulk_in_callback";
#line 713
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 713
    ______f___1.line = 713U;
#line 713
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 713
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 713
    ______r___1 = debug != 0;
#line 713
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 713
    if (______r___1 != 0) {
#line 713
      printk("<7>%s: nonzero read bulk status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 714
    mos7840_port->read_urb_busy = 0;
#line 715
    return;
  } else {

  }
#line 718
  port = mos7840_port->port;
#line 719
  ______f___4.func = "mos7840_bulk_in_callback";
#line 719
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 719
  ______f___4.line = 719U;
#line 719
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 719
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 719
  tmp = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 719
  ______r___4 = tmp != 0;
#line 719
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 719
  if (______r___4 != 0) {
#line 720
    ______f___3.func = "mos7840_bulk_in_callback";
#line 720
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 720
    ______f___3.line = 720U;
#line 720
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 720
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 720
    ______r___3 = debug != 0;
#line 720
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 720
    if (______r___3 != 0) {
#line 720
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 721
    mos7840_port->read_urb_busy = 0;
#line 722
    return;
  } else {

  }
#line 725
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 726
  ______f___6.func = "mos7840_bulk_in_callback";
#line 726
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 726
  ______f___6.line = 726U;
#line 726
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 726
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 726
  ______r___6 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 726
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 726
  if (______r___6 != 0) {
#line 727
    ______f___5.func = "mos7840_bulk_in_callback";
#line 727
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 727
    ______f___5.line = 727U;
#line 727
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 727
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 727
    ______r___5 = debug != 0;
#line 727
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 727
    if (______r___5 != 0) {
#line 727
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Bad serial pointer ");
    } else {

    }
#line 728
    mos7840_port->read_urb_busy = 0;
#line 729
    return;
  } else {

  }
#line 732
  ______f___7.func = "mos7840_bulk_in_callback";
#line 732
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 732
  ______f___7.line = 732U;
#line 732
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 732
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 732
  ______r___7 = debug != 0;
#line 732
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 732
  if (______r___7 != 0) {
#line 732
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering... \n");
  } else {

  }
#line 734
  data = (unsigned char *)urb->transfer_buffer;
#line 736
  ______f___8.func = "mos7840_bulk_in_callback";
#line 736
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 736
  ______f___8.line = 736U;
#line 736
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 736
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 736
  ______r___8 = debug != 0;
#line 736
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 736
  if (______r___8 != 0) {
#line 736
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering ........... \n");
  } else {

  }
#line 738
  ______f___12.func = "mos7840_bulk_in_callback";
#line 738
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 738
  ______f___12.line = 738U;
#line 738
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 738
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 738
  ______r___12 = urb->actual_length != 0U;
#line 738
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 738
  if (______r___12 != 0) {
#line 739
    tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 740
    ______f___10.func = "mos7840_bulk_in_callback";
#line 740
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 740
    ______f___10.line = 740U;
#line 740
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 740
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 740
    ______r___10 = (unsigned long )tty != (unsigned long )((struct tty_struct *)0);
#line 740
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 740
    if (______r___10 != 0) {
#line 741
      tty_buffer_request_room(tty, (size_t )urb->actual_length);
#line 742
      tty_insert_flip_string(tty, (unsigned char const   *)data, (size_t )urb->actual_length);
#line 743
      ______f___9.func = "mos7840_bulk_in_callback";
#line 743
      ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 743
      ______f___9.line = 743U;
#line 743
      ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 743
      ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 743
      ______r___9 = debug != 0;
#line 743
      ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 743
      if (______r___9 != 0) {
#line 743
        printk("<7>%s:  %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               data);
      } else {

      }
#line 744
      tty_flip_buffer_push(tty);
#line 745
      tty_kref_put(tty);
    } else {

    }
#line 747
    mos7840_port->icount.rx = mos7840_port->icount.rx + urb->actual_length;
#line 748
    __asm__  volatile   ("": : : "memory");
#line 749
    ______f___11.func = "mos7840_bulk_in_callback";
#line 749
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 749
    ______f___11.line = 750U;
#line 749
    ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 749
    ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 749
    ______r___11 = debug != 0;
#line 749
    ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 749
    if (______r___11 != 0) {
#line 749
      printk("<7>%s: mos7840_port->icount.rx is %d:\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             mos7840_port->icount.rx);
    } else {

    }
  } else {

  }
#line 753
  ______f___14.func = "mos7840_bulk_in_callback";
#line 753
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 753
  ______f___14.line = 753U;
#line 753
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 753
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 753
  ______r___14 = (unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0);
#line 753
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 753
  if (______r___14 != 0) {
#line 754
    ______f___13.func = "mos7840_bulk_in_callback";
#line 754
    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 754
    ______f___13.line = 754U;
#line 754
    ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 754
    ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 754
    ______r___13 = debug != 0;
#line 754
    ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 754
    if (______r___13 != 0) {
#line 754
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"URB KILLED !!!\n");
    } else {

    }
#line 755
    mos7840_port->read_urb_busy = 0;
#line 756
    return;
  } else {

  }
#line 760
  (mos7840_port->read_urb)->dev = serial->dev;
#line 762
  mos7840_port->read_urb_busy = 1;
#line 763
  retval = ldv_usb_submit_urb_13(mos7840_port->read_urb, 32U);
#line 765
  ______f___16.func = "mos7840_bulk_in_callback";
#line 765
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 765
  ______f___16.line = 765U;
#line 765
  ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 765
  ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 765
  ______r___16 = retval != 0;
#line 765
  ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 765
  if (______r___16 != 0) {
#line 766
    ______f___15.func = "mos7840_bulk_in_callback";
#line 766
    ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 766
    ______f___15.line = 766U;
#line 766
    ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 766
    ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 766
    ______r___15 = debug != 0;
#line 766
    ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 766
    if (______r___15 != 0) {
#line 766
      printk("<7>%s: usb_submit_urb(read bulk) failed, retval = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             retval);
    } else {

    }
#line 767
    mos7840_port->read_urb_busy = 0;
  } else {

  }
#line 769
  return;
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 781
  status = urb->status;
#line 784
  mos7840_port = (struct moschip_port *)urb->context;
#line 785
  _spin_lock(& mos7840_port->pool_lock);
#line 786
  i = 0;
#line 786
  goto ldv_23868;
  ldv_23867: 
#line 787
  ______f.func = "mos7840_bulk_out_data_callback";
#line 787
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 787
  ______f.line = 787U;
#line 787
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 787
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 787
  ______r = (unsigned long )mos7840_port->write_urb_pool[i] == (unsigned long )urb;
#line 787
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 787
  if (______r != 0) {
#line 788
    mos7840_port->busy[i] = 0;
#line 789
    goto ldv_23866;
  } else {

  }
#line 786
  i = i + 1;
  ldv_23868: ;
#line 786
  if (i <= 15) {
#line 787
    goto ldv_23867;
  } else {

  }
  ldv_23866: 
#line 792
  _spin_unlock(& mos7840_port->pool_lock);
#line 794
  ______f___1.func = "mos7840_bulk_out_data_callback";
#line 794
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 794
  ______f___1.line = 794U;
#line 794
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 794
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 794
  ______r___1 = status != 0;
#line 794
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 794
  if (______r___1 != 0) {
#line 795
    ______f___0.func = "mos7840_bulk_out_data_callback";
#line 795
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 795
    ______f___0.line = 795U;
#line 795
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 795
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 795
    ______r___0 = debug != 0;
#line 795
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 795
    if (______r___0 != 0) {
#line 795
      printk("<7>%s: nonzero write bulk status received:%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 796
    return;
  } else {

  }
#line 799
  ______f___3.func = "mos7840_bulk_out_data_callback";
#line 799
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 799
  ______f___3.line = 799U;
#line 799
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 799
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 799
  tmp = mos7840_port_paranoia_check(mos7840_port->port, "mos7840_bulk_out_data_callback");
#line 799
  ______r___3 = tmp != 0;
#line 799
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 799
  if (______r___3 != 0) {
#line 800
    ______f___2.func = "mos7840_bulk_out_data_callback";
#line 800
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 800
    ______f___2.line = 800U;
#line 800
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 800
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 800
    ______r___2 = debug != 0;
#line 800
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 800
    if (______r___2 != 0) {
#line 800
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 801
    return;
  } else {

  }
#line 804
  ______f___4.func = "mos7840_bulk_out_data_callback";
#line 804
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 804
  ______f___4.line = 804U;
#line 804
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 804
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 804
  ______r___4 = debug != 0;
#line 804
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 804
  if (______r___4 != 0) {
#line 804
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .........");
  } else {

  }
#line 806
  tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 807
  ______f___5.func = "mos7840_bulk_out_data_callback";
#line 807
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 807
  ______f___5.line = 807U;
#line 807
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 807
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 807
  ______r___5 = (unsigned long )tty != (unsigned long )((struct tty_struct *)0) && (int )((signed char )mos7840_port->open) != 0;
#line 807
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 807
  if (______r___5 != 0) {
#line 808
    tty_wakeup(tty);
  } else {

  }
#line 809
  tty_kref_put(tty);
#line 810
  return;
}
}
#line 836 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp___0 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;
  int ______r___28 ;
  struct ftrace_branch_data ______f___28 ;
  int ______r___29 ;
  struct ftrace_branch_data ______f___29 ;
  int ______r___30 ;
  struct ftrace_branch_data ______f___30 ;
  unsigned int tmp___8 ;
  int ______r___31 ;
  struct ftrace_branch_data ______f___31 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int ______r___32 ;
  struct ftrace_branch_data ______f___32 ;
  int ______r___33 ;
  struct ftrace_branch_data ______f___33 ;

  {
#line 848
  ______f___0.func = "mos7840_open";
#line 848
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 848
  ______f___0.line = 848U;
#line 848
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 848
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 848
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 848
  ______r___0 = tmp != 0;
#line 848
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 848
  if (______r___0 != 0) {
#line 849
    ______f.func = "mos7840_open";
#line 849
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 849
    ______f.line = 849U;
#line 849
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 849
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 849
    ______r = debug != 0;
#line 849
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 849
    if (______r != 0) {
#line 849
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 850
    return (-19);
  } else {

  }
#line 853
  serial = port->serial;
#line 855
  ______f___2.func = "mos7840_open";
#line 855
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 855
  ______f___2.line = 855U;
#line 855
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 855
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 855
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 855
  ______r___2 = tmp___0 != 0;
#line 855
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 855
  if (______r___2 != 0) {
#line 856
    ______f___1.func = "mos7840_open";
#line 856
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 856
    ______f___1.line = 856U;
#line 856
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 856
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 856
    ______r___1 = debug != 0;
#line 856
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 856
    if (______r___1 != 0) {
#line 856
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 857
    return (-19);
  } else {

  }
#line 860
  mos7840_port = mos7840_get_port_private(port);
#line 861
  port0 = mos7840_get_port_private(serial->port[0]);
#line 863
  ______f___3.func = "mos7840_open";
#line 863
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 863
  ______f___3.line = 863U;
#line 863
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 863
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 863
  ______r___3 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0);
#line 863
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 863
  if (______r___3 != 0) {
#line 864
    return (-19);
  } else {

  }
#line 866
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 867
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 868
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 871
  j = 0;
#line 871
  goto ldv_23924;
  ldv_23923: 
#line 872
  urb = ldv_usb_alloc_urb_14(0, 208U);
#line 873
  mos7840_port->write_urb_pool[j] = urb;
#line 875
  ______f___4.func = "mos7840_open";
#line 875
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 875
  ______f___4.line = 875U;
#line 875
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 875
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 875
  ______r___4 = (unsigned long )urb == (unsigned long )((struct urb *)0);
#line 875
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 875
  if (______r___4 != 0) {
#line 876
    tmp___1 = dev_name((struct device  const  *)(& port->dev));
#line 876
    tmp___2 = dev_driver_string((struct device  const  *)(& port->dev));
#line 876
    printk("<3>%s %s: No more urbs???\n", tmp___2, tmp___1);
#line 877
    goto ldv_23919;
  } else {

  }
#line 880
  urb->transfer_buffer = kmalloc(32UL, 208U);
#line 882
  ______f___5.func = "mos7840_open";
#line 882
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 882
  ______f___5.line = 882U;
#line 882
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 882
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 882
  ______r___5 = (unsigned long )urb->transfer_buffer == (unsigned long )((void *)0);
#line 882
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 882
  if (______r___5 != 0) {
#line 883
    usb_free_urb(urb);
#line 884
    mos7840_port->write_urb_pool[j] = 0;
#line 885
    tmp___3 = dev_name((struct device  const  *)(& port->dev));
#line 885
    tmp___4 = dev_driver_string((struct device  const  *)(& port->dev));
#line 885
    printk("<3>%s %s: %s-out of memory for urb buffers.\n", tmp___4, tmp___3, "mos7840_open");
#line 888
    goto ldv_23919;
  } else {

  }
  ldv_23919: 
#line 871
  j = j + 1;
  ldv_23924: ;
#line 871
  if (j <= 15) {
#line 872
    goto ldv_23923;
  } else {

  }
#line 906
  Data = 0U;
#line 907
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 908
  ______f___7.func = "mos7840_open";
#line 908
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 908
  ______f___7.line = 908U;
#line 908
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 908
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 908
  ______r___7 = status < 0;
#line 908
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 908
  if (______r___7 != 0) {
#line 909
    ______f___6.func = "mos7840_open";
#line 909
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 909
    ______f___6.line = 909U;
#line 909
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 909
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 909
    ______r___6 = debug != 0;
#line 909
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 909
    if (______r___6 != 0) {
#line 909
      printk("<7>%s: Reading Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 910
    return (-1);
  } else {

  }
#line 912
  Data = (__u16 )((unsigned int )Data | 128U);
#line 913
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 914
  ______f___9.func = "mos7840_open";
#line 914
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 914
  ______f___9.line = 914U;
#line 914
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 914
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 914
  ______r___9 = status < 0;
#line 914
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 914
  if (______r___9 != 0) {
#line 915
    ______f___8.func = "mos7840_open";
#line 915
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 915
    ______f___8.line = 915U;
#line 915
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 915
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 915
    ______r___8 = debug != 0;
#line 915
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 915
    if (______r___8 != 0) {
#line 915
      printk("<7>%s: writing Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 916
    return (-1);
  } else {

  }
#line 919
  Data = (unsigned int )Data & 65407U;
#line 920
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 921
  ______f___11.func = "mos7840_open";
#line 921
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 921
  ______f___11.line = 921U;
#line 921
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 921
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 921
  ______r___11 = status < 0;
#line 921
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 921
  if (______r___11 != 0) {
#line 922
    ______f___10.func = "mos7840_open";
#line 922
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 922
    ______f___10.line = 922U;
#line 922
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 922
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 922
    ______r___10 = debug != 0;
#line 922
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 922
    if (______r___10 != 0) {
#line 922
      printk("<7>%s: writing Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 923
    return (-1);
  } else {

  }
#line 927
  Data = 0U;
#line 928
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 930
  ______f___13.func = "mos7840_open";
#line 930
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 930
  ______f___13.line = 930U;
#line 930
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 930
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 930
  ______r___13 = status < 0;
#line 930
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 930
  if (______r___13 != 0) {
#line 931
    ______f___12.func = "mos7840_open";
#line 931
    ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 931
    ______f___12.line = 931U;
#line 931
    ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 931
    ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 931
    ______r___12 = debug != 0;
#line 931
    ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 931
    if (______r___12 != 0) {
#line 931
      printk("<7>%s: Reading Controlreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 932
    return (-1);
  } else {

  }
#line 934
  Data = (__u16 )((unsigned int )Data | 8U);
#line 935
  Data = (__u16 )((unsigned int )Data | 32U);
#line 936
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 938
  ______f___15.func = "mos7840_open";
#line 938
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 938
  ______f___15.line = 938U;
#line 938
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 938
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 938
  ______r___15 = status < 0;
#line 938
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 938
  if (______r___15 != 0) {
#line 939
    ______f___14.func = "mos7840_open";
#line 939
    ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 939
    ______f___14.line = 939U;
#line 939
    ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 939
    ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 939
    ______r___14 = debug != 0;
#line 939
    ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 939
    if (______r___14 != 0) {
#line 939
      printk("<7>%s: writing Controlreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 940
    return (-1);
  } else {

  }
#line 947
  Data = 0U;
#line 948
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 949
  ______f___17.func = "mos7840_open";
#line 949
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 949
  ______f___17.line = 949U;
#line 949
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 949
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 949
  ______r___17 = status < 0;
#line 949
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 949
  if (______r___17 != 0) {
#line 950
    ______f___16.func = "mos7840_open";
#line 950
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 950
    ______f___16.line = 950U;
#line 950
    ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 950
    ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 950
    ______r___16 = debug != 0;
#line 950
    ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 950
    if (______r___16 != 0) {
#line 950
      printk("<7>%s: disableing interrupts failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 951
    return (-1);
  } else {

  }
#line 954
  Data = 0U;
#line 955
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 956
  ______f___19.func = "mos7840_open";
#line 956
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 956
  ______f___19.line = 956U;
#line 956
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 956
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 956
  ______r___19 = status < 0;
#line 956
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 956
  if (______r___19 != 0) {
#line 957
    ______f___18.func = "mos7840_open";
#line 957
    ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 957
    ______f___18.line = 957U;
#line 957
    ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 957
    ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 957
    ______r___18 = debug != 0;
#line 957
    ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 957
    if (______r___18 != 0) {
#line 957
      printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 958
    return (-1);
  } else {

  }
#line 961
  Data = 207U;
#line 962
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 963
  ______f___21.func = "mos7840_open";
#line 963
  ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 963
  ______f___21.line = 963U;
#line 963
  ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 963
  ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 963
  ______r___21 = status < 0;
#line 963
  ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 963
  if (______r___21 != 0) {
#line 964
    ______f___20.func = "mos7840_open";
#line 964
    ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 964
    ______f___20.line = 964U;
#line 964
    ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 964
    ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 964
    ______r___20 = debug != 0;
#line 964
    ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 964
    if (______r___20 != 0) {
#line 964
      printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 965
    return (-1);
  } else {

  }
#line 968
  Data = 3U;
#line 969
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 970
  mos7840_port->shadowLCR = (__u8 )Data;
#line 972
  Data = 11U;
#line 973
  status = mos7840_set_uart_reg(port, 4, (int )Data);
#line 974
  mos7840_port->shadowMCR = (__u8 )Data;
#line 976
  Data = 0U;
#line 977
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 978
  mos7840_port->shadowLCR = (__u8 )Data;
#line 980
  Data = (__u16 )((unsigned int )Data | 128U);
#line 981
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 983
  Data = 12U;
#line 984
  status = mos7840_set_uart_reg(port, 0, (int )Data);
#line 986
  Data = 0U;
#line 987
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 989
  Data = 0U;
#line 990
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 992
  Data = (unsigned int )Data & 65407U;
#line 993
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 994
  mos7840_port->shadowLCR = (__u8 )Data;
#line 997
  Data = 0U;
#line 998
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1000
  Data = (__u16 )((unsigned int )Data | 12U);
#line 1001
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1003
  Data = (unsigned int )Data & 65523U;
#line 1004
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1006
  Data = 12U;
#line 1007
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1010
  Data = 0U;
#line 1011
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1013
  Data = (unsigned int )Data & 65503U;
#line 1014
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1018
  Data = 0U;
#line 1019
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1021
  Data = (__u16 )((unsigned int )Data | 16U);
#line 1022
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1028
  ______f___24.func = "mos7840_open";
#line 1028
  ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1028
  ______f___24.line = 1028U;
#line 1028
  ______f___24.ldv_815.ldv_809.correct = 0UL;
#line 1028
  ______f___24.ldv_815.ldv_809.incorrect = 0UL;
#line 1028
  ______r___24 = (int )((signed char )port0->open_ports) == 1;
#line 1028
  ______f___24.ldv_815.miss_hit[______r___24] = ______f___24.ldv_815.miss_hit[______r___24] + 1UL;
#line 1028
  if (______r___24 != 0) {
#line 1029
    ______f___23.func = "mos7840_open";
#line 1029
    ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1029
    ______f___23.line = 1029U;
#line 1029
    ______f___23.ldv_815.ldv_809.correct = 0UL;
#line 1029
    ______f___23.ldv_815.ldv_809.incorrect = 0UL;
#line 1029
    ______r___23 = (unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((unsigned char *)0);
#line 1029
    ______f___23.ldv_815.miss_hit[______r___23] = ______f___23.ldv_815.miss_hit[______r___23] + 1UL;
#line 1029
    if (______r___23 != 0) {
#line 1031
      tmp___5 = __create_pipe(serial->dev, (unsigned int )(serial->port[0])->interrupt_in_endpointAddress);
#line 1031
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, tmp___5 | 1073741952U,
                       (void *)(serial->port[0])->interrupt_in_buffer, (int )((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, (void *)serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1045
      response = ldv_usb_submit_urb_15((serial->port[0])->interrupt_in_urb, 208U);
#line 1048
      ______f___22.func = "mos7840_open";
#line 1048
      ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1048
      ______f___22.line = 1048U;
#line 1048
      ______f___22.ldv_815.ldv_809.correct = 0UL;
#line 1048
      ______f___22.ldv_815.ldv_809.incorrect = 0UL;
#line 1048
      ______r___22 = response != 0;
#line 1048
      ______f___22.ldv_815.miss_hit[______r___22] = ______f___22.ldv_815.miss_hit[______r___22] + 1UL;
#line 1048
      if (______r___22 != 0) {
#line 1049
        tmp___6 = dev_name((struct device  const  *)(& port->dev));
#line 1049
        tmp___7 = dev_driver_string((struct device  const  *)(& port->dev));
#line 1049
        printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___7, tmp___6,
               "mos7840_open", response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1061
  ______f___25.func = "mos7840_open";
#line 1061
  ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1061
  ______f___25.line = 1061U;
#line 1061
  ______f___25.ldv_815.ldv_809.correct = 0UL;
#line 1061
  ______f___25.ldv_815.ldv_809.incorrect = 0UL;
#line 1061
  ______r___25 = debug != 0;
#line 1061
  ______f___25.ldv_815.miss_hit[______r___25] = ______f___25.ldv_815.miss_hit[______r___25] + 1UL;
#line 1061
  if (______r___25 != 0) {
#line 1061
    printk("<7>%s: port number is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->number);
  } else {

  }
#line 1062
  ______f___26.func = "mos7840_open";
#line 1062
  ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1062
  ______f___26.line = 1062U;
#line 1062
  ______f___26.ldv_815.ldv_809.correct = 0UL;
#line 1062
  ______f___26.ldv_815.ldv_809.incorrect = 0UL;
#line 1062
  ______r___26 = debug != 0;
#line 1062
  ______f___26.ldv_815.miss_hit[______r___26] = ______f___26.ldv_815.miss_hit[______r___26] + 1UL;
#line 1062
  if (______r___26 != 0) {
#line 1062
    printk("<7>%s: serial number is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )(port->serial)->minor);
  } else {

  }
#line 1063
  ______f___27.func = "mos7840_open";
#line 1063
  ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1063
  ______f___27.line = 1063U;
#line 1063
  ______f___27.ldv_815.ldv_809.correct = 0UL;
#line 1063
  ______f___27.ldv_815.ldv_809.incorrect = 0UL;
#line 1063
  ______r___27 = debug != 0;
#line 1063
  ______f___27.ldv_815.miss_hit[______r___27] = ______f___27.ldv_815.miss_hit[______r___27] + 1UL;
#line 1063
  if (______r___27 != 0) {
#line 1063
    printk("<7>%s: Bulkin endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1064
  ______f___28.func = "mos7840_open";
#line 1064
  ______f___28.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1064
  ______f___28.line = 1064U;
#line 1064
  ______f___28.ldv_815.ldv_809.correct = 0UL;
#line 1064
  ______f___28.ldv_815.ldv_809.incorrect = 0UL;
#line 1064
  ______r___28 = debug != 0;
#line 1064
  ______f___28.ldv_815.miss_hit[______r___28] = ______f___28.ldv_815.miss_hit[______r___28] + 1UL;
#line 1064
  if (______r___28 != 0) {
#line 1064
    printk("<7>%s: BulkOut endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1065
  ______f___29.func = "mos7840_open";
#line 1065
  ______f___29.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1065
  ______f___29.line = 1065U;
#line 1065
  ______f___29.ldv_815.ldv_809.correct = 0UL;
#line 1065
  ______f___29.ldv_815.ldv_809.incorrect = 0UL;
#line 1065
  ______r___29 = debug != 0;
#line 1065
  ______f___29.ldv_815.miss_hit[______r___29] = ______f___29.ldv_815.miss_hit[______r___29] + 1UL;
#line 1065
  if (______r___29 != 0) {
#line 1065
    printk("<7>%s: Interrupt endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->interrupt_in_endpointAddress);
  } else {

  }
#line 1066
  ______f___30.func = "mos7840_open";
#line 1066
  ______f___30.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1066
  ______f___30.line = 1066U;
#line 1066
  ______f___30.ldv_815.ldv_809.correct = 0UL;
#line 1066
  ______f___30.ldv_815.ldv_809.incorrect = 0UL;
#line 1066
  ______r___30 = debug != 0;
#line 1066
  ______f___30.ldv_815.miss_hit[______r___30] = ______f___30.ldv_815.miss_hit[______r___30] + 1UL;
#line 1066
  if (______r___30 != 0) {
#line 1066
    printk("<7>%s: port\'s number in the device is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           mos7840_port->port_num);
  } else {

  }
#line 1067
  mos7840_port->read_urb = port->read_urb;
#line 1071
  tmp___8 = __create_pipe(serial->dev, (unsigned int )port->bulk_in_endpointAddress);
#line 1071
  usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, tmp___8 | 3221225600U, (void *)port->bulk_in_buffer,
                    (int )(mos7840_port->read_urb)->transfer_buffer_length, & mos7840_bulk_in_callback,
                    (void *)mos7840_port);
#line 1079
  ______f___31.func = "mos7840_open";
#line 1079
  ______f___31.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1079
  ______f___31.line = 1080U;
#line 1079
  ______f___31.ldv_815.ldv_809.correct = 0UL;
#line 1079
  ______f___31.ldv_815.ldv_809.incorrect = 0UL;
#line 1079
  ______r___31 = debug != 0;
#line 1079
  ______f___31.ldv_815.miss_hit[______r___31] = ______f___31.ldv_815.miss_hit[______r___31] + 1UL;
#line 1079
  if (______r___31 != 0) {
#line 1079
    printk("<7>%s: mos7840_open: bulkin endpoint is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1081
  mos7840_port->read_urb_busy = 1;
#line 1082
  response = ldv_usb_submit_urb_16(mos7840_port->read_urb, 208U);
#line 1083
  ______f___32.func = "mos7840_open";
#line 1083
  ______f___32.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1083
  ______f___32.line = 1083U;
#line 1083
  ______f___32.ldv_815.ldv_809.correct = 0UL;
#line 1083
  ______f___32.ldv_815.ldv_809.incorrect = 0UL;
#line 1083
  ______r___32 = response != 0;
#line 1083
  ______f___32.ldv_815.miss_hit[______r___32] = ______f___32.ldv_815.miss_hit[______r___32] + 1UL;
#line 1083
  if (______r___32 != 0) {
#line 1084
    tmp___9 = dev_name((struct device  const  *)(& port->dev));
#line 1084
    tmp___10 = dev_driver_string((struct device  const  *)(& port->dev));
#line 1084
    printk("<3>%s %s: %s - Error %d submitting control urb\n", tmp___10, tmp___9,
           "mos7840_open", response);
#line 1086
    mos7840_port->read_urb_busy = 0;
  } else {

  }
#line 1090
  init_waitqueue_head(& mos7840_port->wait_chase);
#line 1091
  init_waitqueue_head(& mos7840_port->delta_msr_wait);
#line 1094
  memset((void *)(& mos7840_port->icount), 0, 44UL);
#line 1098
  mos7840_port->shadowMCR = 8U;
#line 1100
  mos7840_port->open = 1;
#line 1102
  mos7840_port->icount.tx = 0U;
#line 1103
  mos7840_port->icount.rx = 0U;
#line 1105
  ______f___33.func = "mos7840_open";
#line 1105
  ______f___33.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1105
  ______f___33.line = 1106U;
#line 1105
  ______f___33.ldv_815.ldv_809.correct = 0UL;
#line 1105
  ______f___33.ldv_815.ldv_809.incorrect = 0UL;
#line 1105
  ______r___33 = debug != 0;
#line 1105
  ______f___33.ldv_815.miss_hit[______r___33] = ______f___33.ldv_815.miss_hit[______r___33] + 1UL;
#line 1105
  if (______r___33 != 0) {
#line 1105
    printk("<7>%s: \n\nusb_serial serial:%p       mos7840_port:%p\n      usb_serial_port port:%p\n\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           serial, mos7840_port, port);
  } else {

  }
#line 1108
  return (0);
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int chars ;
  struct moschip_port *mos7840_port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;

  {
#line 1124
  port = (struct usb_serial_port *)tty->driver_data;
#line 1126
  chars = 0;
#line 1130
  ______f.func = "mos7840_chars_in_buffer";
#line 1130
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1130
  ______f.line = 1130U;
#line 1130
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1130
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1130
  ______r = debug != 0;
#line 1130
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1130
  if (______r != 0) {
#line 1130
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_chars_in_buffer:entering ...........");
  } else {

  }
#line 1132
  ______f___1.func = "mos7840_chars_in_buffer";
#line 1132
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1132
  ______f___1.line = 1132U;
#line 1132
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1132
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1132
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1132
  ______r___1 = tmp != 0;
#line 1132
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1132
  if (______r___1 != 0) {
#line 1133
    ______f___0.func = "mos7840_chars_in_buffer";
#line 1133
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1133
    ______f___0.line = 1133U;
#line 1133
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1133
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1133
    ______r___0 = debug != 0;
#line 1133
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1133
    if (______r___0 != 0) {
#line 1133
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1134
    return (0);
  } else {

  }
#line 1137
  mos7840_port = mos7840_get_port_private(port);
#line 1138
  ______f___3.func = "mos7840_chars_in_buffer";
#line 1138
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1138
  ______f___3.line = 1138U;
#line 1138
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1138
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1138
  ______r___3 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1138
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1138
  if (______r___3 != 0) {
#line 1139
    ______f___2.func = "mos7840_chars_in_buffer";
#line 1139
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1139
    ______f___2.line = 1139U;
#line 1139
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1139
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1139
    ______r___2 = debug != 0;
#line 1139
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1139
    if (______r___2 != 0) {
#line 1139
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_break:leaving ...........");
    } else {

    }
#line 1140
    return (0);
  } else {

  }
#line 1143
  ldv_spin_lock();
#line 1144
  i = 0;
#line 1144
  goto ldv_24038;
  ldv_24037: 
#line 1145
  ______f___4.func = "mos7840_chars_in_buffer";
#line 1145
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1145
  ______f___4.line = 1145U;
#line 1145
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1145
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1145
  ______r___4 = (int )((signed char )mos7840_port->busy[i]) != 0;
#line 1145
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1145
  if (______r___4 != 0) {
#line 1146
    chars = chars + 32;
  } else {

  }
#line 1144
  i = i + 1;
  ldv_24038: ;
#line 1144
  if (i <= 15) {
#line 1145
    goto ldv_24037;
  } else {

  }
#line 1147
  ldv_spin_unlock();
#line 1148
  ______f___5.func = "mos7840_chars_in_buffer";
#line 1148
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1148
  ______f___5.line = 1148U;
#line 1148
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1148
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1148
  ______r___5 = debug != 0;
#line 1148
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1148
  if (______r___5 != 0) {
#line 1148
    printk("<7>%s: %s - returns %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_chars_in_buffer", chars);
  } else {

  }
#line 1149
  return (chars);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_close(struct usb_serial_port *port ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;

  {
#line 1166
  ______f.func = "mos7840_close";
#line 1166
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1166
  ______f.line = 1166U;
#line 1166
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1166
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1166
  ______r = debug != 0;
#line 1166
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1166
  if (______r != 0) {
#line 1166
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"mos7840_close:entering...");
  } else {

  }
#line 1168
  ______f___1.func = "mos7840_close";
#line 1168
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1168
  ______f___1.line = 1168U;
#line 1168
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1168
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1168
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1168
  ______r___1 = tmp != 0;
#line 1168
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1168
  if (______r___1 != 0) {
#line 1169
    ______f___0.func = "mos7840_close";
#line 1169
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1169
    ______f___0.line = 1169U;
#line 1169
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1169
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1169
    ______r___0 = debug != 0;
#line 1169
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1169
    if (______r___0 != 0) {
#line 1169
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1170
    return;
  } else {

  }
#line 1173
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1174
  ______f___3.func = "mos7840_close";
#line 1174
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1174
  ______f___3.line = 1174U;
#line 1174
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1174
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1174
  ______r___3 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 1174
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1174
  if (______r___3 != 0) {
#line 1175
    ______f___2.func = "mos7840_close";
#line 1175
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1175
    ______f___2.line = 1175U;
#line 1175
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1175
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1175
    ______r___2 = debug != 0;
#line 1175
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1175
    if (______r___2 != 0) {
#line 1175
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1176
    return;
  } else {

  }
#line 1179
  mos7840_port = mos7840_get_port_private(port);
#line 1180
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1182
  ______f___4.func = "mos7840_close";
#line 1182
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1182
  ______f___4.line = 1182U;
#line 1182
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1182
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1182
  ______r___4 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0);
#line 1182
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1182
  if (______r___4 != 0) {
#line 1183
    return;
  } else {

  }
#line 1185
  j = 0;
#line 1185
  goto ldv_24071;
  ldv_24070: 
#line 1186
  usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1185
  j = j + 1;
  ldv_24071: ;
#line 1185
  if (j <= 15) {
#line 1186
    goto ldv_24070;
  } else {

  }
#line 1189
  j = 0;
#line 1189
  goto ldv_24080;
  ldv_24079: 
#line 1190
  ______f___6.func = "mos7840_close";
#line 1190
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1190
  ______f___6.line = 1190U;
#line 1190
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1190
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1190
  ______r___6 = (unsigned long )mos7840_port->write_urb_pool[j] != (unsigned long )((struct urb *)0);
#line 1190
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1190
  if (______r___6 != 0) {
#line 1191
    ______f___5.func = "mos7840_close";
#line 1191
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1191
    ______f___5.line = 1191U;
#line 1191
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1191
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1191
    ______r___5 = (unsigned long )(mos7840_port->write_urb_pool[j])->transfer_buffer != (unsigned long )((void *)0);
#line 1191
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1191
    if (______r___5 != 0) {
#line 1192
      kfree((void const   *)(mos7840_port->write_urb_pool[j])->transfer_buffer);
    } else {

    }
#line 1195
    usb_free_urb(mos7840_port->write_urb_pool[j]);
  } else {

  }
#line 1189
  j = j + 1;
  ldv_24080: ;
#line 1189
  if (j <= 15) {
#line 1190
    goto ldv_24079;
  } else {

  }
#line 1201
  ______f___13.func = "mos7840_close";
#line 1201
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1201
  ______f___13.line = 1201U;
#line 1201
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1201
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1201
  ______r___13 = (unsigned long )serial->dev != (unsigned long )((struct usb_device *)0);
#line 1201
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1201
  if (______r___13 != 0) {
#line 1202
    ______f___8.func = "mos7840_close";
#line 1202
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1202
    ______f___8.line = 1202U;
#line 1202
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1202
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1202
    ______r___8 = (unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0);
#line 1202
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1202
    if (______r___8 != 0) {
#line 1203
      ______f___7.func = "mos7840_close";
#line 1203
      ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1203
      ______f___7.line = 1203U;
#line 1203
      ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1203
      ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1203
      ______r___7 = debug != 0;
#line 1203
      ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1203
      if (______r___7 != 0) {
#line 1203
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown bulk write\n");
      } else {

      }
#line 1204
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1206
    ______f___10.func = "mos7840_close";
#line 1206
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1206
    ______f___10.line = 1206U;
#line 1206
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1206
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1206
    ______r___10 = (unsigned long )mos7840_port->read_urb != (unsigned long )((struct urb *)0);
#line 1206
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1206
    if (______r___10 != 0) {
#line 1207
      ______f___9.func = "mos7840_close";
#line 1207
      ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1207
      ______f___9.line = 1207U;
#line 1207
      ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1207
      ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1207
      ______r___9 = debug != 0;
#line 1207
      ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1207
      if (______r___9 != 0) {
#line 1207
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown bulk read\n");
      } else {

      }
#line 1208
      usb_kill_urb(mos7840_port->read_urb);
#line 1209
      mos7840_port->read_urb_busy = 0;
    } else {

    }
#line 1211
    ______f___12.func = "mos7840_close";
#line 1211
    ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1211
    ______f___12.line = 1211U;
#line 1211
    ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1211
    ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1211
    ______r___12 = (unsigned long )(& mos7840_port->control_urb) != (unsigned long )((struct urb **)0);
#line 1211
    ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1211
    if (______r___12 != 0) {
#line 1212
      ______f___11.func = "mos7840_close";
#line 1212
      ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1212
      ______f___11.line = 1212U;
#line 1212
      ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1212
      ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1212
      ______r___11 = debug != 0;
#line 1212
      ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1212
      if (______r___11 != 0) {
#line 1212
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown control read\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 1218
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1219
  ______f___14.func = "mos7840_close";
#line 1219
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1219
  ______f___14.line = 1220U;
#line 1219
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 1219
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 1219
  ______r___14 = debug != 0;
#line 1219
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 1219
  if (______r___14 != 0) {
#line 1219
    printk("<7>%s: mos7840_num_open_ports in close%d:in port%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port0->open_ports, (int )port->number);
  } else {

  }
#line 1221
  ______f___17.func = "mos7840_close";
#line 1221
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1221
  ______f___17.line = 1221U;
#line 1221
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 1221
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 1221
  ______r___17 = (int )((signed char )port0->open_ports) == 0;
#line 1221
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 1221
  if (______r___17 != 0) {
#line 1222
    ______f___16.func = "mos7840_close";
#line 1222
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1222
    ______f___16.line = 1222U;
#line 1222
    ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 1222
    ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 1222
    ______r___16 = (unsigned long )(serial->port[0])->interrupt_in_urb != (unsigned long )((struct urb *)0);
#line 1222
    ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 1222
    if (______r___16 != 0) {
#line 1223
      ______f___15.func = "mos7840_close";
#line 1223
      ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1223
      ______f___15.line = 1223U;
#line 1223
      ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 1223
      ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 1223
      ______r___15 = debug != 0;
#line 1223
      ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 1223
      if (______r___15 != 0) {
#line 1223
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown interrupt_in_urb\n");
      } else {

      }
#line 1224
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1228
  ______f___19.func = "mos7840_close";
#line 1228
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1228
  ______f___19.line = 1228U;
#line 1228
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 1228
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 1228
  ______r___19 = (unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0);
#line 1228
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 1228
  if (______r___19 != 0) {
#line 1230
    ______f___18.func = "mos7840_close";
#line 1230
    ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1230
    ______f___18.line = 1230U;
#line 1230
    ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 1230
    ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 1230
    ______r___18 = (unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0);
#line 1230
    ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 1230
    if (______r___18 != 0) {
#line 1231
      kfree((void const   *)(mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1232
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1235
  Data = 0U;
#line 1236
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 1238
  Data = 0U;
#line 1239
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1241
  mos7840_port->open = 0;
#line 1243
  ______f___20.func = "mos7840_close";
#line 1243
  ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1243
  ______f___20.line = 1243U;
#line 1243
  ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 1243
  ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 1243
  ______r___20 = debug != 0;
#line 1243
  ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 1243
  if (______r___20 != 0) {
#line 1243
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Leaving ............");
  } else {

  }
#line 1244
  return;
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_block_until_chase_response(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 1260
  timeout = 250;
#line 1261
  wait = 10;
  ldv_24141: 
#line 1265
  count = mos7840_chars_in_buffer(tty);
#line 1268
  ______f.func = "mos7840_block_until_chase_response";
#line 1268
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1268
  ______f.line = 1268U;
#line 1268
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1268
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1268
  ______r = count <= 0;
#line 1268
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1268
  if (______r != 0) {
#line 1269
    return;
  } else {

  }
#line 1272
  interruptible_sleep_on_timeout(& mos7840_port->wait_chase, (long )timeout);
#line 1275
  wait = wait - 1;
#line 1276
  ______f___1.func = "mos7840_block_until_chase_response";
#line 1276
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1276
  ______f___1.line = 1276U;
#line 1276
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1276
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1276
  ______r___1 = wait == 0;
#line 1276
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1276
  if (______r___1 != 0) {
#line 1277
    ______f___0.func = "mos7840_block_until_chase_response";
#line 1277
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1277
    ______f___0.line = 1277U;
#line 1277
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1277
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1277
    ______r___0 = debug != 0;
#line 1277
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1277
    if (______r___0 != 0) {
#line 1277
      printk("<7>%s: %s - TIMEOUT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_block_until_chase_response");
    } else {

    }
#line 1278
    return;
  } else {
#line 1281
    wait = 10;
  }
#line 1283
  goto ldv_24141;
}
}
#line 1291 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_break(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 1293
  port = (struct usb_serial_port *)tty->driver_data;
#line 1298
  ______f.func = "mos7840_break";
#line 1298
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1298
  ______f.line = 1298U;
#line 1298
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1298
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1298
  ______r = debug != 0;
#line 1298
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1298
  if (______r != 0) {
#line 1298
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering ...........");
  } else {

  }
#line 1299
  ______f___0.func = "mos7840_break";
#line 1299
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1299
  ______f___0.line = 1299U;
#line 1299
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1299
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1299
  ______r___0 = debug != 0;
#line 1299
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1299
  if (______r___0 != 0) {
#line 1299
    printk("<7>%s: mos7840_break: Start\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 1301
  ______f___2.func = "mos7840_break";
#line 1301
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1301
  ______f___2.line = 1301U;
#line 1301
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1301
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1301
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1301
  ______r___2 = tmp != 0;
#line 1301
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1301
  if (______r___2 != 0) {
#line 1302
    ______f___1.func = "mos7840_break";
#line 1302
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1302
    ______f___1.line = 1302U;
#line 1302
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1302
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1302
    ______r___1 = debug != 0;
#line 1302
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1302
    if (______r___1 != 0) {
#line 1302
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1303
    return;
  } else {

  }
#line 1306
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1307
  ______f___4.func = "mos7840_break";
#line 1307
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1307
  ______f___4.line = 1307U;
#line 1307
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1307
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1307
  ______r___4 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 1307
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1307
  if (______r___4 != 0) {
#line 1308
    ______f___3.func = "mos7840_break";
#line 1308
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1308
    ______f___3.line = 1308U;
#line 1308
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1308
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1308
    ______r___3 = debug != 0;
#line 1308
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1308
    if (______r___3 != 0) {
#line 1308
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1309
    return;
  } else {

  }
#line 1312
  mos7840_port = mos7840_get_port_private(port);
#line 1314
  ______f___5.func = "mos7840_break";
#line 1314
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1314
  ______f___5.line = 1314U;
#line 1314
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1314
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1314
  ______r___5 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1314
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1314
  if (______r___5 != 0) {
#line 1315
    return;
  } else {

  }
#line 1317
  ______f___6.func = "mos7840_break";
#line 1317
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1317
  ______f___6.line = 1317U;
#line 1317
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1317
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1317
  ______r___6 = (unsigned long )serial->dev != (unsigned long )((struct usb_device *)0);
#line 1317
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1317
  if (______r___6 != 0) {
#line 1319
    mos7840_block_until_chase_response(tty, mos7840_port);
  } else {

  }
#line 1321
  ______f___7.func = "mos7840_break";
#line 1321
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1321
  ______f___7.line = 1321U;
#line 1321
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1321
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1321
  ______r___7 = break_state == -1;
#line 1321
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1321
  if (______r___7 != 0) {
#line 1322
    data = (unsigned int )mos7840_port->shadowLCR | 64U;
  } else {
#line 1324
    data = (unsigned int )mos7840_port->shadowLCR & 191U;
  }
#line 1327
  mos7840_port->shadowLCR = data;
#line 1328
  ______f___8.func = "mos7840_break";
#line 1328
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1328
  ______f___8.line = 1329U;
#line 1328
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1328
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1328
  ______r___8 = debug != 0;
#line 1328
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1328
  if (______r___8 != 0) {
#line 1328
    printk("<7>%s: mcs7840_break mos7840_port->shadowLCR is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 1330
  mos7840_set_uart_reg(port, 3, (int )mos7840_port->shadowLCR);
#line 1333
  return;
}
}
#line 1344 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int room ;
  struct moschip_port *mos7840_port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int tmp ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;

  {
#line 1346
  port = (struct usb_serial_port *)tty->driver_data;
#line 1348
  room = 0;
#line 1352
  ______f.func = "mos7840_write_room";
#line 1352
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1352
  ______f.line = 1352U;
#line 1352
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1352
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1352
  ______r = debug != 0;
#line 1352
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1352
  if (______r != 0) {
#line 1352
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_write_room:entering ...........");
  } else {

  }
#line 1354
  ______f___2.func = "mos7840_write_room";
#line 1354
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1354
  ______f___2.line = 1354U;
#line 1354
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1354
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1354
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1354
  ______r___2 = tmp != 0;
#line 1354
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1354
  if (______r___2 != 0) {
#line 1355
    ______f___0.func = "mos7840_write_room";
#line 1355
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1355
    ______f___0.line = 1355U;
#line 1355
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1355
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1355
    ______r___0 = debug != 0;
#line 1355
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1355
    if (______r___0 != 0) {
#line 1355
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1356
    ______f___1.func = "mos7840_write_room";
#line 1356
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1356
    ______f___1.line = 1356U;
#line 1356
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1356
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1356
    ______r___1 = debug != 0;
#line 1356
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1356
    if (______r___1 != 0) {
#line 1356
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)" mos7840_write_room:leaving ...........");
    } else {

    }
#line 1357
    return (-1);
  } else {

  }
#line 1360
  mos7840_port = mos7840_get_port_private(port);
#line 1361
  ______f___4.func = "mos7840_write_room";
#line 1361
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1361
  ______f___4.line = 1361U;
#line 1361
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1361
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1361
  ______r___4 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1361
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1361
  if (______r___4 != 0) {
#line 1362
    ______f___3.func = "mos7840_write_room";
#line 1362
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1362
    ______f___3.line = 1362U;
#line 1362
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1362
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1362
    ______r___3 = debug != 0;
#line 1362
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1362
    if (______r___3 != 0) {
#line 1362
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_break:leaving ...........");
    } else {

    }
#line 1363
    return (-1);
  } else {

  }
#line 1366
  ldv_spin_lock();
#line 1367
  i = 0;
#line 1367
  goto ldv_24212;
  ldv_24211: 
#line 1368
  ______f___5.func = "mos7840_write_room";
#line 1368
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1368
  ______f___5.line = 1368U;
#line 1368
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1368
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1368
  ______r___5 = (int )((signed char )mos7840_port->busy[i]) == 0;
#line 1368
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1368
  if (______r___5 != 0) {
#line 1369
    room = room + 32;
  } else {

  }
#line 1367
  i = i + 1;
  ldv_24212: ;
#line 1367
  if (i <= 15) {
#line 1368
    goto ldv_24211;
  } else {

  }
#line 1371
  ldv_spin_unlock();
#line 1373
  room = room != 0 ? room - 31 : 0;
#line 1374
  ______f___6.func = "mos7840_write_room";
#line 1374
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1374
  ______f___6.line = 1374U;
#line 1374
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1374
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1374
  ______r___6 = debug != 0;
#line 1374
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1374
  if (______r___6 != 0) {
#line 1374
    printk("<7>%s: %s - returns %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_write_room", room);
  } else {

  }
#line 1375
  return (room);
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int _min1 ;
  int _min2 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___3 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;

  {
#line 1392
  bytes_sent = 0;
#line 1400
  current_position = data;
#line 1402
  ______f.func = "mos7840_write";
#line 1402
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1402
  ______f.line = 1402U;
#line 1402
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1402
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1402
  ______r = debug != 0;
#line 1402
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1402
  if (______r != 0) {
#line 1402
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"entering ...........");
  } else {

  }
#line 1437
  ______f___1.func = "mos7840_write";
#line 1437
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1437
  ______f___1.line = 1437U;
#line 1437
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1437
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1437
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1437
  ______r___1 = tmp != 0;
#line 1437
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1437
  if (______r___1 != 0) {
#line 1438
    ______f___0.func = "mos7840_write";
#line 1438
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1438
    ______f___0.line = 1438U;
#line 1438
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1438
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1438
    ______r___0 = debug != 0;
#line 1438
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1438
    if (______r___0 != 0) {
#line 1438
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1439
    return (-1);
  } else {

  }
#line 1442
  serial = port->serial;
#line 1443
  ______f___3.func = "mos7840_write";
#line 1443
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1443
  ______f___3.line = 1443U;
#line 1443
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1443
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1443
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1443
  ______r___3 = tmp___0 != 0;
#line 1443
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1443
  if (______r___3 != 0) {
#line 1444
    ______f___2.func = "mos7840_write";
#line 1444
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1444
    ______f___2.line = 1444U;
#line 1444
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1444
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1444
    ______r___2 = debug != 0;
#line 1444
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1444
    if (______r___2 != 0) {
#line 1444
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1445
    return (-1);
  } else {

  }
#line 1448
  mos7840_port = mos7840_get_port_private(port);
#line 1449
  ______f___5.func = "mos7840_write";
#line 1449
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1449
  ______f___5.line = 1449U;
#line 1449
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1449
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1449
  ______r___5 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1449
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1449
  if (______r___5 != 0) {
#line 1450
    ______f___4.func = "mos7840_write";
#line 1450
    ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1450
    ______f___4.line = 1450U;
#line 1450
    ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1450
    ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1450
    ______r___4 = debug != 0;
#line 1450
    ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1450
    if (______r___4 != 0) {
#line 1450
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_port is NULL\n");
    } else {

    }
#line 1451
    return (-1);
  } else {

  }
#line 1455
  urb = 0;
#line 1457
  ldv_spin_lock();
#line 1458
  i = 0;
#line 1458
  goto ldv_24263;
  ldv_24262: 
#line 1459
  ______f___7.func = "mos7840_write";
#line 1459
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1459
  ______f___7.line = 1459U;
#line 1459
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1459
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1459
  ______r___7 = (int )((signed char )mos7840_port->busy[i]) == 0;
#line 1459
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1459
  if (______r___7 != 0) {
#line 1460
    mos7840_port->busy[i] = 1;
#line 1461
    urb = mos7840_port->write_urb_pool[i];
#line 1462
    ______f___6.func = "mos7840_write";
#line 1462
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1462
    ______f___6.line = 1462U;
#line 1462
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1462
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1462
    ______r___6 = debug != 0;
#line 1462
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1462
    if (______r___6 != 0) {
#line 1462
      printk("<7>%s: \nURB:%d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             i);
    } else {

    }
#line 1463
    goto ldv_24261;
  } else {

  }
#line 1458
  i = i + 1;
  ldv_24263: ;
#line 1458
  if (i <= 15) {
#line 1459
    goto ldv_24262;
  } else {

  }
  ldv_24261: 
#line 1466
  ldv_spin_unlock();
#line 1468
  ______f___9.func = "mos7840_write";
#line 1468
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1468
  ______f___9.line = 1468U;
#line 1468
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1468
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1468
  ______r___9 = (unsigned long )urb == (unsigned long )((struct urb *)0);
#line 1468
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1468
  if (______r___9 != 0) {
#line 1469
    ______f___8.func = "mos7840_write";
#line 1469
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1469
    ______f___8.line = 1469U;
#line 1469
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1469
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1469
    ______r___8 = debug != 0;
#line 1469
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1469
    if (______r___8 != 0) {
#line 1469
      printk("<7>%s: %s - no more free urbs\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_write");
    } else {

    }
#line 1470
    goto exit;
  } else {

  }
#line 1473
  ______f___11.func = "mos7840_write";
#line 1473
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1473
  ______f___11.line = 1473U;
#line 1473
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1473
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1473
  ______r___11 = (unsigned long )urb->transfer_buffer == (unsigned long )((void *)0);
#line 1473
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1473
  if (______r___11 != 0) {
#line 1474
    urb->transfer_buffer = kmalloc(32UL, 208U);
#line 1477
    ______f___10.func = "mos7840_write";
#line 1477
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1477
    ______f___10.line = 1477U;
#line 1477
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1477
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1477
    ______r___10 = (unsigned long )urb->transfer_buffer == (unsigned long )((void *)0);
#line 1477
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1477
    if (______r___10 != 0) {
#line 1478
      tmp___1 = dev_name((struct device  const  *)(& port->dev));
#line 1478
      tmp___2 = dev_driver_string((struct device  const  *)(& port->dev));
#line 1478
      printk("<3>%s %s: %s no more kernel memory...\n", tmp___2, tmp___1, "mos7840_write");
#line 1480
      goto exit;
    } else {

    }
  } else {

  }
#line 1483
  _min1 = count;
#line 1483
  _min2 = 32;
#line 1483
  transfer_size = _min1 < _min2 ? _min1 : _min2;
#line 1485
  __len = (size_t )transfer_size;
#line 1485
  __ret = __builtin_memcpy(urb->transfer_buffer, (void const   *)current_position,
                           __len);
#line 1488
  tmp___3 = __create_pipe(serial->dev, (unsigned int )port->bulk_out_endpointAddress);
#line 1488
  usb_fill_bulk_urb(urb, serial->dev, tmp___3 | 3221225472U, urb->transfer_buffer,
                    transfer_size, & mos7840_bulk_out_data_callback, (void *)mos7840_port);
#line 1496
  data1 = (unsigned char *)urb->transfer_buffer;
#line 1497
  ______f___12.func = "mos7840_write";
#line 1497
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1497
  ______f___12.line = 1497U;
#line 1497
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1497
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1497
  ______r___12 = debug != 0;
#line 1497
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1497
  if (______r___12 != 0) {
#line 1497
    printk("<7>%s: \nbulkout endpoint is %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1500
  status = ldv_usb_submit_urb_17(urb, 32U);
#line 1502
  ______f___13.func = "mos7840_write";
#line 1502
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1502
  ______f___13.line = 1502U;
#line 1502
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1502
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1502
  ______r___13 = status != 0;
#line 1502
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1502
  if (______r___13 != 0) {
#line 1503
    mos7840_port->busy[i] = 0;
#line 1504
    tmp___4 = dev_name((struct device  const  *)(& port->dev));
#line 1504
    tmp___5 = dev_driver_string((struct device  const  *)(& port->dev));
#line 1504
    printk("<3>%s %s: %s - usb_submit_urb(write bulk) failed with status = %d\n",
           tmp___5, tmp___4, "mos7840_write", status);
#line 1506
    bytes_sent = status;
#line 1507
    goto exit;
  } else {

  }
#line 1509
  bytes_sent = transfer_size;
#line 1510
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1511
  __asm__  volatile   ("": : : "memory");
#line 1512
  ______f___14.func = "mos7840_write";
#line 1512
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1512
  ______f___14.line = 1512U;
#line 1512
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 1512
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 1512
  ______r___14 = debug != 0;
#line 1512
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 1512
  if (______r___14 != 0) {
#line 1512
    printk("<7>%s: mos7840_port->icount.tx is %d:\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           mos7840_port->icount.tx);
  } else {

  }
  exit: ;
#line 1514
  return (bytes_sent);
}
}
#line 1524 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_throttle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  unsigned char stop_char ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;

  {
#line 1526
  port = (struct usb_serial_port *)tty->driver_data;
#line 1530
  ______f___0.func = "mos7840_throttle";
#line 1530
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1530
  ______f___0.line = 1530U;
#line 1530
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1530
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1530
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1530
  ______r___0 = tmp != 0;
#line 1530
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1530
  if (______r___0 != 0) {
#line 1531
    ______f.func = "mos7840_throttle";
#line 1531
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1531
    ______f.line = 1531U;
#line 1531
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1531
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1531
    ______r = debug != 0;
#line 1531
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1531
    if (______r != 0) {
#line 1531
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1532
    return;
  } else {

  }
#line 1535
  ______f___1.func = "mos7840_throttle";
#line 1535
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1535
  ______f___1.line = 1535U;
#line 1535
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1535
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1535
  ______r___1 = debug != 0;
#line 1535
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1535
  if (______r___1 != 0) {
#line 1535
    printk("<7>%s: - port %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->number);
  } else {

  }
#line 1537
  mos7840_port = mos7840_get_port_private(port);
#line 1539
  ______f___2.func = "mos7840_throttle";
#line 1539
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1539
  ______f___2.line = 1539U;
#line 1539
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1539
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1539
  ______r___2 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1539
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1539
  if (______r___2 != 0) {
#line 1540
    return;
  } else {

  }
#line 1542
  ______f___4.func = "mos7840_throttle";
#line 1542
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1542
  ______f___4.line = 1542U;
#line 1542
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1542
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1542
  ______r___4 = (int )((signed char )mos7840_port->open) == 0;
#line 1542
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1542
  if (______r___4 != 0) {
#line 1543
    ______f___3.func = "mos7840_throttle";
#line 1543
    ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1543
    ______f___3.line = 1543U;
#line 1543
    ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1543
    ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1543
    ______r___3 = debug != 0;
#line 1543
    ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1543
    if (______r___3 != 0) {
#line 1543
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"port not opened");
    } else {

    }
#line 1544
    return;
  } else {

  }
#line 1547
  ______f___5.func = "mos7840_throttle";
#line 1547
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1547
  ______f___5.line = 1547U;
#line 1547
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1547
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1547
  ______r___5 = debug != 0;
#line 1547
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1547
  if (______r___5 != 0) {
#line 1547
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1550
  ______f___7.func = "mos7840_throttle";
#line 1550
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1550
  ______f___7.line = 1550U;
#line 1550
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1550
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1550
  ______r___7 = ((tty->termios)->c_iflag & 4096U) != 0U;
#line 1550
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1550
  if (______r___7 != 0) {
#line 1551
    stop_char = (tty->termios)->c_cc[9];
#line 1552
    status = mos7840_write(tty, port, (unsigned char const   *)(& stop_char), 1);
#line 1553
    ______f___6.func = "mos7840_throttle";
#line 1553
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1553
    ______f___6.line = 1553U;
#line 1553
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1553
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1553
    ______r___6 = status <= 0;
#line 1553
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1553
    if (______r___6 != 0) {
#line 1554
      return;
    } else {

    }
  } else {

  }
#line 1557
  ______f___9.func = "mos7840_throttle";
#line 1557
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1557
  ______f___9.line = 1557U;
#line 1557
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1557
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1557
  ______r___9 = (int )(tty->termios)->c_cflag < 0;
#line 1557
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1557
  if (______r___9 != 0) {
#line 1558
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 253U;
#line 1559
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1561
    ______f___8.func = "mos7840_throttle";
#line 1561
    ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1561
    ______f___8.line = 1561U;
#line 1561
    ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1561
    ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1561
    ______r___8 = status < 0;
#line 1561
    ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1561
    if (______r___8 != 0) {
#line 1562
      return;
    } else {

    }
  } else {

  }
#line 1565
  return;
}
}
#line 1574 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_unthrottle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  unsigned char start_char ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 1576
  port = (struct usb_serial_port *)tty->driver_data;
#line 1578
  tmp = mos7840_get_port_private(port);
#line 1578
  mos7840_port = tmp;
#line 1580
  ______f___0.func = "mos7840_unthrottle";
#line 1580
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1580
  ______f___0.line = 1580U;
#line 1580
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1580
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1580
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1580
  ______r___0 = tmp___0 != 0;
#line 1580
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1580
  if (______r___0 != 0) {
#line 1581
    ______f.func = "mos7840_unthrottle";
#line 1581
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1581
    ______f.line = 1581U;
#line 1581
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 1581
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1581
    ______r = debug != 0;
#line 1581
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1581
    if (______r != 0) {
#line 1581
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1582
    return;
  } else {

  }
#line 1585
  ______f___1.func = "mos7840_unthrottle";
#line 1585
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1585
  ______f___1.line = 1585U;
#line 1585
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1585
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1585
  ______r___1 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1585
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1585
  if (______r___1 != 0) {
#line 1586
    return;
  } else {

  }
#line 1588
  ______f___3.func = "mos7840_unthrottle";
#line 1588
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1588
  ______f___3.line = 1588U;
#line 1588
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1588
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1588
  ______r___3 = (int )((signed char )mos7840_port->open) == 0;
#line 1588
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1588
  if (______r___3 != 0) {
#line 1589
    ______f___2.func = "mos7840_unthrottle";
#line 1589
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1589
    ______f___2.line = 1589U;
#line 1589
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1589
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1589
    ______r___2 = debug != 0;
#line 1589
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1589
    if (______r___2 != 0) {
#line 1589
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_unthrottle");
    } else {

    }
#line 1590
    return;
  } else {

  }
#line 1593
  ______f___4.func = "mos7840_unthrottle";
#line 1593
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1593
  ______f___4.line = 1593U;
#line 1593
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1593
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1593
  ______r___4 = debug != 0;
#line 1593
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1593
  if (______r___4 != 0) {
#line 1593
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1596
  ______f___6.func = "mos7840_unthrottle";
#line 1596
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1596
  ______f___6.line = 1596U;
#line 1596
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1596
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1596
  ______r___6 = ((tty->termios)->c_iflag & 4096U) != 0U;
#line 1596
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1596
  if (______r___6 != 0) {
#line 1597
    start_char = (tty->termios)->c_cc[8];
#line 1598
    status = mos7840_write(tty, port, (unsigned char const   *)(& start_char), 1);
#line 1599
    ______f___5.func = "mos7840_unthrottle";
#line 1599
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1599
    ______f___5.line = 1599U;
#line 1599
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1599
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1599
    ______r___5 = status <= 0;
#line 1599
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1599
    if (______r___5 != 0) {
#line 1600
      return;
    } else {

    }
  } else {

  }
#line 1604
  ______f___8.func = "mos7840_unthrottle";
#line 1604
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1604
  ______f___8.line = 1604U;
#line 1604
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1604
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1604
  ______r___8 = (int )(tty->termios)->c_cflag < 0;
#line 1604
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1604
  if (______r___8 != 0) {
#line 1605
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 2U);
#line 1606
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1608
    ______f___7.func = "mos7840_unthrottle";
#line 1608
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1608
    ______f___7.line = 1608U;
#line 1608
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1608
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1608
    ______r___7 = status < 0;
#line 1608
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1608
    if (______r___7 != 0) {
#line 1609
      return;
    } else {

    }
  } else {

  }
#line 1611
  return;
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;

  {
#line 1615
  port = (struct usb_serial_port *)tty->driver_data;
#line 1621
  mos7840_port = mos7840_get_port_private(port);
#line 1623
  ______f.func = "mos7840_tiocmget";
#line 1623
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1623
  ______f.line = 1623U;
#line 1623
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1623
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1623
  ______r = debug != 0;
#line 1623
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1623
  if (______r != 0) {
#line 1623
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmget", (int )port->number);
  } else {

  }
#line 1625
  ______f___0.func = "mos7840_tiocmget";
#line 1625
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1625
  ______f___0.line = 1625U;
#line 1625
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1625
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1625
  ______r___0 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1625
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1625
  if (______r___0 != 0) {
#line 1626
    return (-19);
  } else {

  }
#line 1628
  status = mos7840_get_uart_reg(port, 6, & msr);
#line 1629
  status = mos7840_get_uart_reg(port, 4, & mcr);
#line 1630
  result = (unsigned int )((((((((int )mcr & 1 ? 2 : 0) | (((int )mcr & 2) != 0 ? 4 : 0)) | (((int )mcr & 16) != 0 ? 32768 : 0)) | (((int )msr & 16) != 0 ? 32 : 0)) | (((int )msr & 128) != 0 ? 64 : 0)) | (((int )msr & 64) != 0 ? 128 : 0)) | (((int )msr & 32) != 0 ? 256 : 0));
#line 1638
  ______f___1.func = "mos7840_tiocmget";
#line 1638
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1638
  ______f___1.line = 1638U;
#line 1638
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1638
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1638
  ______r___1 = debug != 0;
#line 1638
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1638
  if (______r___1 != 0) {
#line 1638
    printk("<7>%s: %s - 0x%04X\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmget", result);
  } else {

  }
#line 1640
  return ((int )result);
}
}
#line 1643 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  int status ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;

  {
#line 1646
  port = (struct usb_serial_port *)tty->driver_data;
#line 1651
  ______f.func = "mos7840_tiocmset";
#line 1651
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1651
  ______f.line = 1651U;
#line 1651
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1651
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1651
  ______r = debug != 0;
#line 1651
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1651
  if (______r != 0) {
#line 1651
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmset", (int )port->number);
  } else {

  }
#line 1653
  mos7840_port = mos7840_get_port_private(port);
#line 1655
  ______f___0.func = "mos7840_tiocmset";
#line 1655
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1655
  ______f___0.line = 1655U;
#line 1655
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1655
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1655
  ______r___0 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1655
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1655
  if (______r___0 != 0) {
#line 1656
    return (-19);
  } else {

  }
#line 1659
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 1660
  ______f___1.func = "mos7840_tiocmset";
#line 1660
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1660
  ______f___1.line = 1660U;
#line 1660
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1660
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1660
  ______r___1 = (clear & 4U) != 0U;
#line 1660
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1660
  if (______r___1 != 0) {
#line 1661
    mcr = mcr & 4294967293U;
  } else {

  }
#line 1662
  ______f___2.func = "mos7840_tiocmset";
#line 1662
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1662
  ______f___2.line = 1662U;
#line 1662
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1662
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1662
  ______r___2 = (clear & 2U) != 0U;
#line 1662
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1662
  if (______r___2 != 0) {
#line 1663
    mcr = mcr & 4294967294U;
  } else {

  }
#line 1664
  ______f___3.func = "mos7840_tiocmset";
#line 1664
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1664
  ______f___3.line = 1664U;
#line 1664
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1664
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1664
  ______r___3 = (clear & 32768U) != 0U;
#line 1664
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1664
  if (______r___3 != 0) {
#line 1665
    mcr = mcr & 4294967279U;
  } else {

  }
#line 1667
  ______f___4.func = "mos7840_tiocmset";
#line 1667
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1667
  ______f___4.line = 1667U;
#line 1667
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1667
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1667
  ______r___4 = (set & 4U) != 0U;
#line 1667
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1667
  if (______r___4 != 0) {
#line 1668
    mcr = mcr | 2U;
  } else {

  }
#line 1669
  ______f___5.func = "mos7840_tiocmset";
#line 1669
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1669
  ______f___5.line = 1669U;
#line 1669
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1669
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1669
  ______r___5 = (set & 2U) != 0U;
#line 1669
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1669
  if (______r___5 != 0) {
#line 1670
    mcr = mcr | 1U;
  } else {

  }
#line 1671
  ______f___6.func = "mos7840_tiocmset";
#line 1671
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1671
  ______f___6.line = 1671U;
#line 1671
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1671
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1671
  ______r___6 = (set & 32768U) != 0U;
#line 1671
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1671
  if (______r___6 != 0) {
#line 1672
    mcr = mcr | 16U;
  } else {

  }
#line 1674
  mos7840_port->shadowMCR = (__u8 )mcr;
#line 1676
  status = mos7840_set_uart_reg(port, 4, (int )((__u16 )mcr));
#line 1677
  ______f___8.func = "mos7840_tiocmset";
#line 1677
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1677
  ______f___8.line = 1677U;
#line 1677
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1677
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1677
  ______r___8 = status < 0;
#line 1677
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1677
  if (______r___8 != 0) {
#line 1678
    ______f___7.func = "mos7840_tiocmset";
#line 1678
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1678
    ______f___7.line = 1678U;
#line 1678
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1678
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1678
    ______r___7 = debug != 0;
#line 1678
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1678
    if (______r___7 != 0) {
#line 1678
      printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1679
    return (status);
  } else {

  }
#line 1682
  return (0);
}
}
#line 1690 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_baud_rate_divisor(int baudRate , int *divisor , __u16 *clk_sel_val ) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;

  {
#line 1694
  ______f.func = "mos7840_calc_baud_rate_divisor";
#line 1694
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1694
  ______f.line = 1694U;
#line 1694
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1694
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1694
  ______r = debug != 0;
#line 1694
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1694
  if (______r != 0) {
#line 1694
    printk("<7>%s: %s - %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_calc_baud_rate_divisor", baudRate);
  } else {

  }
#line 1696
  ______f___0.func = "mos7840_calc_baud_rate_divisor";
#line 1696
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1696
  ______f___0.line = 1696U;
#line 1696
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1696
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1696
  ______r___0 = baudRate <= 115200;
#line 1696
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1696
  if (______r___0 != 0) {
#line 1697
    *divisor = 115200 / baudRate;
#line 1698
    *clk_sel_val = 0U;
  } else {

  }
#line 1700
  ______f___7.func = "mos7840_calc_baud_rate_divisor";
#line 1700
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1700
  ______f___7.line = 1700U;
#line 1700
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1700
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1700
  ______r___7 = baudRate > 115200 && baudRate <= 230400;
#line 1700
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1700
  if (______r___7 != 0) {
#line 1701
    *divisor = 230400 / baudRate;
#line 1702
    *clk_sel_val = 16U;
  } else {
#line 1703
    ______f___6.func = "mos7840_calc_baud_rate_divisor";
#line 1703
    ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1703
    ______f___6.line = 1703U;
#line 1703
    ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1703
    ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1703
    ______r___6 = baudRate > 230400 && baudRate <= 403200;
#line 1703
    ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1703
    if (______r___6 != 0) {
#line 1704
      *divisor = 403200 / baudRate;
#line 1705
      *clk_sel_val = 32U;
    } else {
#line 1706
      ______f___5.func = "mos7840_calc_baud_rate_divisor";
#line 1706
      ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1706
      ______f___5.line = 1706U;
#line 1706
      ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1706
      ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1706
      ______r___5 = baudRate > 403200 && baudRate <= 460800;
#line 1706
      ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1706
      if (______r___5 != 0) {
#line 1707
        *divisor = 460800 / baudRate;
#line 1708
        *clk_sel_val = 48U;
      } else {
#line 1709
        ______f___4.func = "mos7840_calc_baud_rate_divisor";
#line 1709
        ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1709
        ______f___4.line = 1709U;
#line 1709
        ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1709
        ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1709
        ______r___4 = baudRate > 460800 && baudRate <= 806400;
#line 1709
        ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1709
        if (______r___4 != 0) {
#line 1710
          *divisor = 806400 / baudRate;
#line 1711
          *clk_sel_val = 64U;
        } else {
#line 1712
          ______f___3.func = "mos7840_calc_baud_rate_divisor";
#line 1712
          ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1712
          ______f___3.line = 1712U;
#line 1712
          ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1712
          ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1712
          ______r___3 = baudRate > 806400 && baudRate <= 921600;
#line 1712
          ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1712
          if (______r___3 != 0) {
#line 1713
            *divisor = 921600 / baudRate;
#line 1714
            *clk_sel_val = 80U;
          } else {
#line 1715
            ______f___2.func = "mos7840_calc_baud_rate_divisor";
#line 1715
            ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1715
            ______f___2.line = 1715U;
#line 1715
            ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1715
            ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1715
            ______r___2 = baudRate > 921600 && baudRate <= 1572864;
#line 1715
            ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1715
            if (______r___2 != 0) {
#line 1716
              *divisor = 1572864 / baudRate;
#line 1717
              *clk_sel_val = 96U;
            } else {
#line 1718
              ______f___1.func = "mos7840_calc_baud_rate_divisor";
#line 1718
              ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1718
              ______f___1.line = 1718U;
#line 1718
              ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1718
              ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1718
              ______r___1 = baudRate > 1572864 && baudRate <= 3145728;
#line 1718
              ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1718
              if (______r___1 != 0) {
#line 1719
                *divisor = 3145728 / baudRate;
#line 1720
                *clk_sel_val = 112U;
              } else {

              }
            }
          }
        }
      }
    }
  }
#line 1722
  return (0);
}
}
#line 1762 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;

  {
#line 1765
  divisor = 0;
#line 1772
  ______f.func = "mos7840_send_cmd_write_baud_rate";
#line 1772
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1772
  ______f.line = 1772U;
#line 1772
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1772
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1772
  ______r = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1772
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1772
  if (______r != 0) {
#line 1773
    return (-1);
  } else {

  }
#line 1775
  port = mos7840_port->port;
#line 1776
  ______f___1.func = "mos7840_send_cmd_write_baud_rate";
#line 1776
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1776
  ______f___1.line = 1776U;
#line 1776
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1776
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1776
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1776
  ______r___1 = tmp != 0;
#line 1776
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1776
  if (______r___1 != 0) {
#line 1777
    ______f___0.func = "mos7840_send_cmd_write_baud_rate";
#line 1777
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1777
    ______f___0.line = 1777U;
#line 1777
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1777
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1777
    ______r___0 = debug != 0;
#line 1777
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1777
    if (______r___0 != 0) {
#line 1777
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1778
    return (-1);
  } else {

  }
#line 1781
  ______f___3.func = "mos7840_send_cmd_write_baud_rate";
#line 1781
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1781
  ______f___3.line = 1781U;
#line 1781
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1781
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1781
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1781
  ______r___3 = tmp___0 != 0;
#line 1781
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1781
  if (______r___3 != 0) {
#line 1782
    ______f___2.func = "mos7840_send_cmd_write_baud_rate";
#line 1782
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1782
    ______f___2.line = 1782U;
#line 1782
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1782
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1782
    ______r___2 = debug != 0;
#line 1782
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1782
    if (______r___2 != 0) {
#line 1782
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 1783
    return (-1);
  } else {

  }
#line 1786
  ______f___4.func = "mos7840_send_cmd_write_baud_rate";
#line 1786
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1786
  ______f___4.line = 1786U;
#line 1786
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1786
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1786
  ______r___4 = debug != 0;
#line 1786
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1786
  if (______r___4 != 0) {
#line 1786
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1788
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1790
  ______f___5.func = "mos7840_send_cmd_write_baud_rate";
#line 1790
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1790
  ______f___5.line = 1791U;
#line 1790
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1790
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1790
  ______r___5 = debug != 0;
#line 1790
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1790
  if (______r___5 != 0) {
#line 1790
    printk("<7>%s: %s - port = %d, baud = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_send_cmd_write_baud_rate", (int )(mos7840_port->port)->number,
           baudRate);
  } else {

  }
#line 1793
  ______f___6.func = "mos7840_send_cmd_write_baud_rate";
#line 1793
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1793
  ______f___6.line = 1793U;
#line 1793
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1793
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1793
  ______r___6 = baudRate > 115200;
#line 1793
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1823
  clk_sel_val = 0U;
#line 1824
  Data = 0U;
#line 1825
  status = mos7840_calc_baud_rate_divisor(baudRate, & divisor, & clk_sel_val);
#line 1827
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1829
  ______f___8.func = "mos7840_send_cmd_write_baud_rate";
#line 1829
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1829
  ______f___8.line = 1829U;
#line 1829
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1829
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1829
  ______r___8 = status < 0;
#line 1829
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1829
  if (______r___8 != 0) {
#line 1830
    ______f___7.func = "mos7840_send_cmd_write_baud_rate";
#line 1830
    ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1830
    ______f___7.line = 1830U;
#line 1830
    ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1830
    ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1830
    ______r___7 = debug != 0;
#line 1830
    ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1830
    if (______r___7 != 0) {
#line 1830
      printk("<7>%s: reading spreg failed in set_serial_baud\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1831
    return (-1);
  } else {

  }
#line 1833
  Data = (__u16 )(((int )((short )Data) & 143) | (int )((short )clk_sel_val));
#line 1834
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1836
  ______f___10.func = "mos7840_send_cmd_write_baud_rate";
#line 1836
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1836
  ______f___10.line = 1836U;
#line 1836
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1836
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1836
  ______r___10 = status < 0;
#line 1836
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1836
  if (______r___10 != 0) {
#line 1837
    ______f___9.func = "mos7840_send_cmd_write_baud_rate";
#line 1837
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1837
    ______f___9.line = 1837U;
#line 1837
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1837
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1837
    ______r___9 = debug != 0;
#line 1837
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1837
    if (______r___9 != 0) {
#line 1837
      printk("<7>%s: Writing spreg failed in set_serial_baud\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1838
    return (-1);
  } else {

  }
#line 1842
  ______f___11.func = "mos7840_send_cmd_write_baud_rate";
#line 1842
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1842
  ______f___11.line = 1842U;
#line 1842
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1842
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1842
  ______r___11 = status != 0;
#line 1842
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1842
  if (______r___11 != 0) {
#line 1843
    tmp___1 = dev_name((struct device  const  *)(& port->dev));
#line 1843
    tmp___2 = dev_driver_string((struct device  const  *)(& port->dev));
#line 1843
    printk("<3>%s %s: %s - bad baud rate\n", tmp___2, tmp___1, "mos7840_send_cmd_write_baud_rate");
#line 1844
    return (status);
  } else {

  }
#line 1847
  Data = (__u16 )((unsigned int )mos7840_port->shadowLCR | 128U);
#line 1848
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1849
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1852
  Data = (__u16 )((unsigned char )divisor);
#line 1853
  ______f___12.func = "mos7840_send_cmd_write_baud_rate";
#line 1853
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1853
  ______f___12.line = 1853U;
#line 1853
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1853
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1853
  ______r___12 = debug != 0;
#line 1853
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1853
  if (______r___12 != 0) {
#line 1853
    printk("<7>%s: set_serial_baud Value to write DLL is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )Data);
  } else {

  }
#line 1854
  mos7840_set_uart_reg(port, 0, (int )Data);
#line 1856
  Data = (__u16 )((unsigned char )((divisor & 65280) >> 8));
#line 1857
  ______f___13.func = "mos7840_send_cmd_write_baud_rate";
#line 1857
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1857
  ______f___13.line = 1857U;
#line 1857
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1857
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1857
  ______r___13 = debug != 0;
#line 1857
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1857
  if (______r___13 != 0) {
#line 1857
    printk("<7>%s: set_serial_baud Value to write DLM is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )Data);
  } else {

  }
#line 1858
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1861
  Data = (unsigned int )((__u16 )mos7840_port->shadowLCR) & 65407U;
#line 1862
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1863
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1866
  return (status);
}
}
#line 1875 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_change_port_settings(struct tty_struct *tty , struct moschip_port *mos7840_port ,
                                         struct ktermios *old_termios ) 
{ 
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  speed_t tmp___1 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;

  {
#line 1889
  ______f.func = "mos7840_change_port_settings";
#line 1889
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1889
  ______f.line = 1889U;
#line 1889
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 1889
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 1889
  ______r = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 1889
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 1889
  if (______r != 0) {
#line 1890
    return;
  } else {

  }
#line 1892
  port = mos7840_port->port;
#line 1894
  ______f___1.func = "mos7840_change_port_settings";
#line 1894
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1894
  ______f___1.line = 1894U;
#line 1894
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 1894
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 1894
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1894
  ______r___1 = tmp != 0;
#line 1894
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 1894
  if (______r___1 != 0) {
#line 1895
    ______f___0.func = "mos7840_change_port_settings";
#line 1895
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1895
    ______f___0.line = 1895U;
#line 1895
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 1895
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 1895
    ______r___0 = debug != 0;
#line 1895
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 1895
    if (______r___0 != 0) {
#line 1895
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1896
    return;
  } else {

  }
#line 1899
  ______f___3.func = "mos7840_change_port_settings";
#line 1899
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1899
  ______f___3.line = 1899U;
#line 1899
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 1899
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 1899
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1899
  ______r___3 = tmp___0 != 0;
#line 1899
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 1899
  if (______r___3 != 0) {
#line 1900
    ______f___2.func = "mos7840_change_port_settings";
#line 1900
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1900
    ______f___2.line = 1900U;
#line 1900
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 1900
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 1900
    ______r___2 = debug != 0;
#line 1900
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 1900
    if (______r___2 != 0) {
#line 1900
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 1901
    return;
  } else {

  }
#line 1904
  serial = port->serial;
#line 1906
  ______f___4.func = "mos7840_change_port_settings";
#line 1906
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1906
  ______f___4.line = 1906U;
#line 1906
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 1906
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 1906
  ______r___4 = debug != 0;
#line 1906
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 1906
  if (______r___4 != 0) {
#line 1906
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_change_port_settings", (int )(mos7840_port->port)->number);
  } else {

  }
#line 1908
  ______f___6.func = "mos7840_change_port_settings";
#line 1908
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1908
  ______f___6.line = 1908U;
#line 1908
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 1908
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 1908
  ______r___6 = (int )((signed char )mos7840_port->open) == 0;
#line 1908
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 1908
  if (______r___6 != 0) {
#line 1909
    ______f___5.func = "mos7840_change_port_settings";
#line 1909
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1909
    ______f___5.line = 1909U;
#line 1909
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 1909
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 1909
    ______r___5 = debug != 0;
#line 1909
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 1909
    if (______r___5 != 0) {
#line 1909
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
#line 1910
    return;
  } else {

  }
#line 1913
  ______f___7.func = "mos7840_change_port_settings";
#line 1913
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1913
  ______f___7.line = 1913U;
#line 1913
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 1913
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 1913
  ______r___7 = debug != 0;
#line 1913
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 1913
  if (______r___7 != 0) {
#line 1913
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1915
  lData = 3U;
#line 1916
  lStop = 0U;
#line 1917
  lParity = 0U;
#line 1919
  cflag = (tty->termios)->c_cflag;
#line 1920
  iflag = (tty->termios)->c_iflag;
#line 1923
  ______f___8.func = "mos7840_change_port_settings";
#line 1923
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1923
  ______f___8.line = 1923U;
#line 1923
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 1923
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 1923
  ______r___8 = (cflag & 48U) != 0U;
#line 1923
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 1923
  if (______r___8 != 0) {
#line 1924
    switch (cflag & 48U) {
    case 0U: 
#line 1926
    lData = 0U;
#line 1927
    goto ldv_24574;
    case 16U: 
#line 1930
    lData = 1U;
#line 1931
    goto ldv_24574;
    case 32U: 
#line 1934
    lData = 2U;
#line 1935
    goto ldv_24574;
    default: ;
    case 48U: 
#line 1938
    lData = 3U;
#line 1939
    goto ldv_24574;
    }
    ldv_24574: ;
  } else {

  }
#line 1943
  ______f___13.func = "mos7840_change_port_settings";
#line 1943
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1943
  ______f___13.line = 1943U;
#line 1943
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 1943
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 1943
  ______r___13 = (cflag & 256U) != 0U;
#line 1943
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 1943
  if (______r___13 != 0) {
#line 1944
    ______f___11.func = "mos7840_change_port_settings";
#line 1944
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1944
    ______f___11.line = 1944U;
#line 1944
    ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 1944
    ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 1944
    ______r___11 = (cflag & 512U) != 0U;
#line 1944
    ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 1944
    if (______r___11 != 0) {
#line 1945
      lParity = 8U;
#line 1946
      ______f___9.func = "mos7840_change_port_settings";
#line 1946
      ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1946
      ______f___9.line = 1946U;
#line 1946
      ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 1946
      ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 1946
      ______r___9 = debug != 0;
#line 1946
      ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 1946
      if (______r___9 != 0) {
#line 1946
        printk("<7>%s: %s - parity = odd\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               "mos7840_change_port_settings");
      } else {

      }
    } else {
#line 1948
      lParity = 24U;
#line 1949
      ______f___10.func = "mos7840_change_port_settings";
#line 1949
      ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1949
      ______f___10.line = 1949U;
#line 1949
      ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 1949
      ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 1949
      ______r___10 = debug != 0;
#line 1949
      ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 1949
      if (______r___10 != 0) {
#line 1949
        printk("<7>%s: %s - parity = even\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               "mos7840_change_port_settings");
      } else {

      }
    }
  } else {
#line 1953
    ______f___12.func = "mos7840_change_port_settings";
#line 1953
    ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1953
    ______f___12.line = 1953U;
#line 1953
    ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 1953
    ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 1953
    ______r___12 = debug != 0;
#line 1953
    ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 1953
    if (______r___12 != 0) {
#line 1953
      printk("<7>%s: %s - parity = none\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
  }
#line 1956
  ______f___14.func = "mos7840_change_port_settings";
#line 1956
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1956
  ______f___14.line = 1956U;
#line 1956
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 1956
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 1956
  ______r___14 = (cflag & 1073741824U) != 0U;
#line 1956
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 1956
  if (______r___14 != 0) {
#line 1957
    lParity = (__u8 )((unsigned int )lParity | 32U);
  } else {

  }
#line 1960
  ______f___17.func = "mos7840_change_port_settings";
#line 1960
  ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1960
  ______f___17.line = 1960U;
#line 1960
  ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 1960
  ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 1960
  ______r___17 = (cflag & 64U) != 0U;
#line 1960
  ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 1960
  if (______r___17 != 0) {
#line 1961
    lStop = 4U;
#line 1962
    ______f___15.func = "mos7840_change_port_settings";
#line 1962
    ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1962
    ______f___15.line = 1962U;
#line 1962
    ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 1962
    ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 1962
    ______r___15 = debug != 0;
#line 1962
    ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 1962
    if (______r___15 != 0) {
#line 1962
      printk("<7>%s: %s - stop bits = 2\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
  } else {
#line 1964
    lStop = 0U;
#line 1965
    ______f___16.func = "mos7840_change_port_settings";
#line 1965
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1965
    ______f___16.line = 1965U;
#line 1965
    ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 1965
    ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 1965
    ______r___16 = debug != 0;
#line 1965
    ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 1965
    if (______r___16 != 0) {
#line 1965
      printk("<7>%s: %s - stop bits = 1\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
  }
#line 1969
  mos7840_port->shadowLCR = (unsigned int )mos7840_port->shadowLCR & 192U;
#line 1971
  mos7840_port->shadowLCR = (__u8 )((int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop));
#line 1973
  ______f___18.func = "mos7840_change_port_settings";
#line 1973
  ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1973
  ______f___18.line = 1974U;
#line 1973
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 1973
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 1973
  ______r___18 = debug != 0;
#line 1973
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 1973
  if (______r___18 != 0) {
#line 1973
    printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is %x\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 1976
  Data = 0U;
#line 1977
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1979
  Data = 0U;
#line 1980
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 1982
  Data = 207U;
#line 1983
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 1986
  Data = (__u16 )mos7840_port->shadowLCR;
#line 1988
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1990
  Data = 11U;
#line 1991
  mos7840_port->shadowMCR = (__u8 )Data;
#line 1992
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 1993
  Data = 11U;
#line 1994
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 1998
  mos7840_port->shadowMCR = 8U;
#line 1999
  ______f___19.func = "mos7840_change_port_settings";
#line 1999
  ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 1999
  ______f___19.line = 1999U;
#line 1999
  ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 1999
  ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 1999
  ______r___19 = (cflag & 4111U) != 0U;
#line 1999
  ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 1999
  if (______r___19 != 0) {
#line 2000
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 3U);
  } else {

  }
#line 2002
  ______f___20.func = "mos7840_change_port_settings";
#line 2002
  ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2002
  ______f___20.line = 2002U;
#line 2002
  ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 2002
  ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 2002
  ______r___20 = (int )cflag < 0;
#line 2002
  ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 2002
  if (______r___20 != 0) {
#line 2003
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 32U);
  } else {
#line 2005
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 223U;
  }
#line 2007
  Data = (__u16 )mos7840_port->shadowMCR;
#line 2008
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2011
  tmp___1 = tty_get_baud_rate(tty);
#line 2011
  baud = (int )tmp___1;
#line 2013
  ______f___22.func = "mos7840_change_port_settings";
#line 2013
  ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2013
  ______f___22.line = 2013U;
#line 2013
  ______f___22.ldv_815.ldv_809.correct = 0UL;
#line 2013
  ______f___22.ldv_815.ldv_809.incorrect = 0UL;
#line 2013
  ______r___22 = baud == 0;
#line 2013
  ______f___22.ldv_815.miss_hit[______r___22] = ______f___22.ldv_815.miss_hit[______r___22] + 1UL;
#line 2013
  if (______r___22 != 0) {
#line 2015
    ______f___21.func = "mos7840_change_port_settings";
#line 2015
    ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2015
    ______f___21.line = 2015U;
#line 2015
    ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 2015
    ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 2015
    ______r___21 = debug != 0;
#line 2015
    ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 2015
    if (______r___21 != 0) {
#line 2015
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Picked default baud...");
    } else {

    }
#line 2016
    baud = 9600;
  } else {

  }
#line 2019
  ______f___23.func = "mos7840_change_port_settings";
#line 2019
  ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2019
  ______f___23.line = 2019U;
#line 2019
  ______f___23.ldv_815.ldv_809.correct = 0UL;
#line 2019
  ______f___23.ldv_815.ldv_809.incorrect = 0UL;
#line 2019
  ______r___23 = debug != 0;
#line 2019
  ______f___23.ldv_815.miss_hit[______r___23] = ______f___23.ldv_815.miss_hit[______r___23] + 1UL;
#line 2019
  if (______r___23 != 0) {
#line 2019
    printk("<7>%s: %s - baud rate = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_change_port_settings", baud);
  } else {

  }
#line 2020
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2023
  Data = 12U;
#line 2024
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 2026
  ______f___26.func = "mos7840_change_port_settings";
#line 2026
  ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2026
  ______f___26.line = 2026U;
#line 2026
  ______f___26.ldv_815.ldv_809.correct = 0UL;
#line 2026
  ______f___26.ldv_815.ldv_809.incorrect = 0UL;
#line 2026
  ______r___26 = ! mos7840_port->read_urb_busy;
#line 2026
  ______f___26.ldv_815.miss_hit[______r___26] = ______f___26.ldv_815.miss_hit[______r___26] + 1UL;
#line 2026
  if (______r___26 != 0) {
#line 2027
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2028
    mos7840_port->read_urb_busy = 1;
#line 2029
    status = ldv_usb_submit_urb_18(mos7840_port->read_urb, 32U);
#line 2030
    ______f___25.func = "mos7840_change_port_settings";
#line 2030
    ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2030
    ______f___25.line = 2030U;
#line 2030
    ______f___25.ldv_815.ldv_809.correct = 0UL;
#line 2030
    ______f___25.ldv_815.ldv_809.incorrect = 0UL;
#line 2030
    ______r___25 = status != 0;
#line 2030
    ______f___25.ldv_815.miss_hit[______r___25] = ______f___25.ldv_815.miss_hit[______r___25] + 1UL;
#line 2030
    if (______r___25 != 0) {
#line 2031
      ______f___24.func = "mos7840_change_port_settings";
#line 2031
      ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2031
      ______f___24.line = 2032U;
#line 2031
      ______f___24.ldv_815.ldv_809.correct = 0UL;
#line 2031
      ______f___24.ldv_815.ldv_809.incorrect = 0UL;
#line 2031
      ______r___24 = debug != 0;
#line 2031
      ______f___24.ldv_815.miss_hit[______r___24] = ______f___24.ldv_815.miss_hit[______r___24] + 1UL;
#line 2031
      if (______r___24 != 0) {
#line 2031
        printk("<7>%s: usb_submit_urb(read bulk) failed, status = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               status);
      } else {

      }
#line 2033
      mos7840_port->read_urb_busy = 0;
    } else {

    }
  } else {

  }
#line 2036
  __wake_up(& mos7840_port->delta_msr_wait, 3U, 1, 0);
#line 2037
  mos7840_port->delta_msr_cond = 1;
#line 2038
  ______f___27.func = "mos7840_change_port_settings";
#line 2038
  ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2038
  ______f___27.line = 2039U;
#line 2038
  ______f___27.ldv_815.ldv_809.correct = 0UL;
#line 2038
  ______f___27.ldv_815.ldv_809.incorrect = 0UL;
#line 2038
  ______r___27 = debug != 0;
#line 2038
  ______f___27.ldv_815.miss_hit[______r___27] = ______f___27.ldv_815.miss_hit[______r___27] + 1UL;
#line 2038
  if (______r___27 != 0) {
#line 2038
    printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is End %x\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 2041
  return;
}
}
#line 2050 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;

  {
#line 2058
  ______f.func = "mos7840_set_termios";
#line 2058
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2058
  ______f.line = 2058U;
#line 2058
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2058
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2058
  ______r = debug != 0;
#line 2058
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2058
  if (______r != 0) {
#line 2058
    printk("<7>%s: mos7840_set_termios: START\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 2059
  ______f___1.func = "mos7840_set_termios";
#line 2059
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2059
  ______f___1.line = 2059U;
#line 2059
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2059
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2059
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2059
  ______r___1 = tmp != 0;
#line 2059
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2059
  if (______r___1 != 0) {
#line 2060
    ______f___0.func = "mos7840_set_termios";
#line 2060
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2060
    ______f___0.line = 2060U;
#line 2060
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2060
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2060
    ______r___0 = debug != 0;
#line 2060
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2060
    if (______r___0 != 0) {
#line 2060
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2061
    return;
  } else {

  }
#line 2064
  serial = port->serial;
#line 2066
  ______f___3.func = "mos7840_set_termios";
#line 2066
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2066
  ______f___3.line = 2066U;
#line 2066
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2066
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2066
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2066
  ______r___3 = tmp___0 != 0;
#line 2066
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2066
  if (______r___3 != 0) {
#line 2067
    ______f___2.func = "mos7840_set_termios";
#line 2067
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2067
    ______f___2.line = 2067U;
#line 2067
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2067
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2067
    ______r___2 = debug != 0;
#line 2067
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2067
    if (______r___2 != 0) {
#line 2067
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 2068
    return;
  } else {

  }
#line 2071
  mos7840_port = mos7840_get_port_private(port);
#line 2073
  ______f___4.func = "mos7840_set_termios";
#line 2073
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2073
  ______f___4.line = 2073U;
#line 2073
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2073
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2073
  ______r___4 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 2073
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2073
  if (______r___4 != 0) {
#line 2074
    return;
  } else {

  }
#line 2076
  ______f___6.func = "mos7840_set_termios";
#line 2076
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2076
  ______f___6.line = 2076U;
#line 2076
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 2076
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 2076
  ______r___6 = (int )((signed char )mos7840_port->open) == 0;
#line 2076
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 2076
  if (______r___6 != 0) {
#line 2077
    ______f___5.func = "mos7840_set_termios";
#line 2077
    ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2077
    ______f___5.line = 2077U;
#line 2077
    ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 2077
    ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 2077
    ______r___5 = debug != 0;
#line 2077
    ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 2077
    if (______r___5 != 0) {
#line 2077
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_set_termios");
    } else {

    }
#line 2078
    return;
  } else {

  }
#line 2081
  ______f___7.func = "mos7840_set_termios";
#line 2081
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2081
  ______f___7.line = 2081U;
#line 2081
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2081
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2081
  ______r___7 = debug != 0;
#line 2081
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2081
  if (______r___7 != 0) {
#line 2081
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"setting termios - ");
  } else {

  }
#line 2083
  cflag = (tty->termios)->c_cflag;
#line 2085
  ______f___8.func = "mos7840_set_termios";
#line 2085
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2085
  ______f___8.line = 2086U;
#line 2085
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2085
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2085
  ______r___8 = debug != 0;
#line 2085
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2085
  if (______r___8 != 0) {
#line 2085
    printk("<7>%s: %s - clfag %08x iflag %08x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", (tty->termios)->c_cflag, (tty->termios)->c_iflag & 31U);
  } else {

  }
#line 2087
  ______f___9.func = "mos7840_set_termios";
#line 2087
  ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2087
  ______f___9.line = 2088U;
#line 2087
  ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 2087
  ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 2087
  ______r___9 = debug != 0;
#line 2087
  ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 2087
  if (______r___9 != 0) {
#line 2087
    printk("<7>%s: %s - old clfag %08x old iflag %08x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & 31U);
  } else {

  }
#line 2089
  ______f___10.func = "mos7840_set_termios";
#line 2089
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2089
  ______f___10.line = 2089U;
#line 2089
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 2089
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 2089
  ______r___10 = debug != 0;
#line 2089
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 2089
  if (______r___10 != 0) {
#line 2089
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", (int )port->number);
  } else {

  }
#line 2093
  mos7840_change_port_settings(tty, mos7840_port, old_termios);
#line 2095
  ______f___12.func = "mos7840_set_termios";
#line 2095
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2095
  ______f___12.line = 2095U;
#line 2095
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 2095
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 2095
  ______r___12 = (unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0);
#line 2095
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 2095
  if (______r___12 != 0) {
#line 2096
    ______f___11.func = "mos7840_set_termios";
#line 2096
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2096
    ______f___11.line = 2096U;
#line 2096
    ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 2096
    ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 2096
    ______r___11 = debug != 0;
#line 2096
    ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 2096
    if (______r___11 != 0) {
#line 2096
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"URB KILLED !!!!!\n");
    } else {

    }
#line 2097
    return;
  } else {

  }
#line 2100
  ______f___15.func = "mos7840_set_termios";
#line 2100
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2100
  ______f___15.line = 2100U;
#line 2100
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 2100
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 2100
  ______r___15 = ! mos7840_port->read_urb_busy;
#line 2100
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 2100
  if (______r___15 != 0) {
#line 2101
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2102
    mos7840_port->read_urb_busy = 1;
#line 2103
    status = ldv_usb_submit_urb_19(mos7840_port->read_urb, 32U);
#line 2104
    ______f___14.func = "mos7840_set_termios";
#line 2104
    ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2104
    ______f___14.line = 2104U;
#line 2104
    ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 2104
    ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 2104
    ______r___14 = status != 0;
#line 2104
    ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 2104
    if (______r___14 != 0) {
#line 2105
      ______f___13.func = "mos7840_set_termios";
#line 2105
      ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2105
      ______f___13.line = 2106U;
#line 2105
      ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 2105
      ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 2105
      ______r___13 = debug != 0;
#line 2105
      ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 2105
      if (______r___13 != 0) {
#line 2105
        printk("<7>%s: usb_submit_urb(read bulk) failed, status = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               status);
      } else {

      }
#line 2107
      mos7840_port->read_urb_busy = 0;
    } else {

    }
  } else {

  }
#line 2110
  return;
}
}
#line 2124 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_lsr_info(struct tty_struct *tty , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  unsigned long tmp ;

  {
#line 2128
  result = 0U;
#line 2130
  count = mos7840_chars_in_buffer(tty);
#line 2131
  ______f___0.func = "mos7840_get_lsr_info";
#line 2131
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2131
  ______f___0.line = 2131U;
#line 2131
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2131
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2131
  ______r___0 = count == 0;
#line 2131
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2131
  if (______r___0 != 0) {
#line 2132
    ______f.func = "mos7840_get_lsr_info";
#line 2132
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2132
    ______f.line = 2132U;
#line 2132
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 2132
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2132
    ______r = debug != 0;
#line 2132
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2132
    if (______r != 0) {
#line 2132
      printk("<7>%s: %s -- Empty\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_get_lsr_info");
    } else {

    }
#line 2133
    result = 1U;
  } else {

  }
#line 2136
  ______f___1.func = "mos7840_get_lsr_info";
#line 2136
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2136
  ______f___1.line = 2136U;
#line 2136
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2136
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2136
  tmp = copy_to_user((void *)value, (void const   *)(& result), 4U);
#line 2136
  ______r___1 = tmp != 0UL;
#line 2136
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2136
  if (______r___1 != 0) {
#line 2137
    return (-14);
  } else {

  }
#line 2138
  return (0);
}
}
#line 2148 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_modem_info(struct moschip_port *mos7840_port , unsigned int cmd ,
                                  unsigned int *value ) 
{ 
  unsigned int mcr ;
  unsigned int arg ;
  __u16 Data ;
  int status ;
  struct usb_serial_port *port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int tmp ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  unsigned long tmp___0 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;

  {
#line 2157
  ______f.func = "mos7840_set_modem_info";
#line 2157
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2157
  ______f.line = 2157U;
#line 2157
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2157
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2157
  ______r = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 2157
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2157
  if (______r != 0) {
#line 2158
    return (-1);
  } else {

  }
#line 2160
  port = mos7840_port->port;
#line 2161
  ______f___1.func = "mos7840_set_modem_info";
#line 2161
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2161
  ______f___1.line = 2161U;
#line 2161
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2161
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2161
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_modem_info");
#line 2161
  ______r___1 = tmp != 0;
#line 2161
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2161
  if (______r___1 != 0) {
#line 2162
    ______f___0.func = "mos7840_set_modem_info";
#line 2162
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2162
    ______f___0.line = 2162U;
#line 2162
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2162
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2162
    ______r___0 = debug != 0;
#line 2162
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2162
    if (______r___0 != 0) {
#line 2162
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2163
    return (-1);
  } else {

  }
#line 2166
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 2168
  ______f___2.func = "mos7840_set_modem_info";
#line 2168
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2168
  ______f___2.line = 2168U;
#line 2168
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2168
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2168
  tmp___0 = copy_from_user((void *)(& arg), (void const   *)value, 4U);
#line 2168
  ______r___2 = tmp___0 != 0UL;
#line 2168
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2168
  if (______r___2 != 0) {
#line 2169
    return (-14);
  } else {

  }
#line 2171
  switch (cmd) {
  case 21526U: 
#line 2173
  ______f___3.func = "mos7840_set_modem_info";
#line 2173
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2173
  ______f___3.line = 2173U;
#line 2173
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2173
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2173
  ______r___3 = (arg & 4U) != 0U;
#line 2173
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2173
  if (______r___3 != 0) {
#line 2174
    mcr = mcr | 2U;
  } else {

  }
#line 2175
  ______f___4.func = "mos7840_set_modem_info";
#line 2175
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2175
  ______f___4.line = 2175U;
#line 2175
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2175
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2175
  ______r___4 = (arg & 2U) != 0U;
#line 2175
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2175
  if (______r___4 != 0) {
#line 2176
    mcr = mcr | 2U;
  } else {

  }
#line 2177
  ______f___5.func = "mos7840_set_modem_info";
#line 2177
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2177
  ______f___5.line = 2177U;
#line 2177
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 2177
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 2177
  ______r___5 = (arg & 32768U) != 0U;
#line 2177
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 2177
  if (______r___5 != 0) {
#line 2178
    mcr = mcr | 16U;
  } else {

  }
#line 2179
  goto ldv_24746;
  case 21527U: 
#line 2182
  ______f___6.func = "mos7840_set_modem_info";
#line 2182
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2182
  ______f___6.line = 2182U;
#line 2182
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 2182
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 2182
  ______r___6 = (arg & 4U) != 0U;
#line 2182
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 2182
  if (______r___6 != 0) {
#line 2183
    mcr = mcr & 4294967293U;
  } else {

  }
#line 2184
  ______f___7.func = "mos7840_set_modem_info";
#line 2184
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2184
  ______f___7.line = 2184U;
#line 2184
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2184
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2184
  ______r___7 = (arg & 2U) != 0U;
#line 2184
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2184
  if (______r___7 != 0) {
#line 2185
    mcr = mcr & 4294967293U;
  } else {

  }
#line 2186
  ______f___8.func = "mos7840_set_modem_info";
#line 2186
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2186
  ______f___8.line = 2186U;
#line 2186
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2186
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2186
  ______r___8 = (arg & 32768U) != 0U;
#line 2186
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2186
  if (______r___8 != 0) {
#line 2187
    mcr = mcr & 4294967279U;
  } else {

  }
#line 2188
  goto ldv_24746;
  case 21528U: 
#line 2193
  mcr = mcr & 4294967276U;
#line 2194
  mcr = ((arg & 4U) != 0U ? 2U : 0U) | mcr;
#line 2195
  mcr = ((arg & 2U) != 0U ? 1U : 0U) | mcr;
#line 2196
  mcr = ((arg & 32768U) != 0U ? 16U : 0U) | mcr;
#line 2197
  goto ldv_24746;
  }
  ldv_24746: 
#line 2200
  lock_kernel();
#line 2201
  mos7840_port->shadowMCR = (__u8 )mcr;
#line 2203
  Data = (__u16 )mos7840_port->shadowMCR;
#line 2204
  status = mos7840_set_uart_reg(port, 4, (int )Data);
#line 2205
  unlock_kernel();
#line 2206
  ______f___10.func = "mos7840_set_modem_info";
#line 2206
  ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2206
  ______f___10.line = 2206U;
#line 2206
  ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 2206
  ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 2206
  ______r___10 = status < 0;
#line 2206
  ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 2206
  if (______r___10 != 0) {
#line 2207
    ______f___9.func = "mos7840_set_modem_info";
#line 2207
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2207
    ______f___9.line = 2207U;
#line 2207
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 2207
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 2207
    ______r___9 = debug != 0;
#line 2207
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 2207
    if (______r___9 != 0) {
#line 2207
      printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 2208
    return (-1);
  } else {

  }
#line 2211
  return (0);
}
}
#line 2219 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_modem_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  unsigned int result ;
  __u16 msr ;
  unsigned int mcr ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  unsigned long tmp ;

  {
#line 2222
  result = 0U;
#line 2224
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 2225
  mos7840_get_uart_reg(mos7840_port->port, 6, & msr);
#line 2227
  result = (unsigned int )(((((((int )mcr & 1 ? 2 : 0) | ((mcr & 2U) != 0U ? 4 : 0)) | (((int )msr & 16) != 0 ? 32 : 0)) | (((int )msr & 128) != 0 ? 64 : 0)) | (((int )msr & 64) != 0 ? 128 : 0)) | (((int )msr & 32) != 0 ? 256 : 0));
#line 2234
  ______f.func = "mos7840_get_modem_info";
#line 2234
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2234
  ______f.line = 2234U;
#line 2234
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2234
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2234
  ______r = debug != 0;
#line 2234
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2234
  if (______r != 0) {
#line 2234
    printk("<7>%s: %s -- %x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_get_modem_info", result);
  } else {

  }
#line 2236
  ______f___0.func = "mos7840_get_modem_info";
#line 2236
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2236
  ______f___0.line = 2236U;
#line 2236
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2236
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2236
  tmp = copy_to_user((void *)value, (void const   *)(& result), 4U);
#line 2236
  ______r___0 = tmp != 0UL;
#line 2236
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2236
  if (______r___0 != 0) {
#line 2237
    return (-14);
  } else {

  }
#line 2238
  return (0);
}
}
#line 2246 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  unsigned long tmp___0 ;

  {
#line 2251
  ______f.func = "mos7840_get_serial_info";
#line 2251
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2251
  ______f.line = 2251U;
#line 2251
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2251
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2251
  ______r = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 2251
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2251
  if (______r != 0) {
#line 2252
    return (-1);
  } else {

  }
#line 2254
  ______f___0.func = "mos7840_get_serial_info";
#line 2254
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2254
  ______f___0.line = 2254U;
#line 2254
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2254
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2254
  ______r___0 = (unsigned long )retinfo == (unsigned long )((struct serial_struct *)0);
#line 2254
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2254
  if (______r___0 != 0) {
#line 2255
    return (-14);
  } else {

  }
#line 2257
  memset((void *)(& tmp), 0, 72UL);
#line 2259
  tmp.type = 4;
#line 2260
  tmp.line = (int )((mos7840_port->port)->serial)->minor;
#line 2261
  tmp.port = (unsigned int )(mos7840_port->port)->number;
#line 2262
  tmp.irq = 0;
#line 2263
  tmp.flags = 192;
#line 2264
  tmp.xmit_fifo_size = 512;
#line 2265
  tmp.baud_base = 9600;
#line 2266
  tmp.close_delay = 1250U;
#line 2267
  tmp.closing_wait = 7500U;
#line 2269
  ______f___1.func = "mos7840_get_serial_info";
#line 2269
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2269
  ______f___1.line = 2269U;
#line 2269
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2269
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2269
  tmp___0 = copy_to_user((void *)retinfo, (void const   *)(& tmp), 72U);
#line 2269
  ______r___1 = tmp___0 != 0UL;
#line 2269
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2269
  if (______r___1 != 0) {
#line 2270
    return (-14);
  } else {

  }
#line 2271
  return (0);
}
}
#line 2279 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  struct serial_icounter_struct icount ;
  int mosret ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int tmp ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___0 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int tmp___1 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int tmp___2 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  unsigned long tmp___8 ;

  {
#line 2282
  port = (struct usb_serial_port *)tty->driver_data;
#line 2283
  argp = (void *)arg;
#line 2289
  mosret = 0;
#line 2291
  ______f___0.func = "mos7840_ioctl";
#line 2291
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2291
  ______f___0.line = 2291U;
#line 2291
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2291
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2291
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2291
  ______r___0 = tmp != 0;
#line 2291
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2291
  if (______r___0 != 0) {
#line 2292
    ______f.func = "mos7840_ioctl";
#line 2292
    ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2292
    ______f.line = 2292U;
#line 2292
    ______f.ldv_815.ldv_809.correct = 0UL;
#line 2292
    ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2292
    ______r = debug != 0;
#line 2292
    ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2292
    if (______r != 0) {
#line 2292
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2293
    return (-1);
  } else {

  }
#line 2296
  mos7840_port = mos7840_get_port_private(port);
#line 2298
  ______f___1.func = "mos7840_ioctl";
#line 2298
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2298
  ______f___1.line = 2298U;
#line 2298
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2298
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2298
  ______r___1 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 2298
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2298
  if (______r___1 != 0) {
#line 2299
    return (-1);
  } else {

  }
#line 2301
  ______f___2.func = "mos7840_ioctl";
#line 2301
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2301
  ______f___2.line = 2301U;
#line 2301
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2301
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2301
  ______r___2 = debug != 0;
#line 2301
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2301
  if (______r___2 != 0) {
#line 2301
    printk("<7>%s: %s - port %d, cmd = 0x%x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number, cmd);
  } else {

  }
#line 2303
  switch (cmd) {
  case 21593U: 
#line 2307
  ______f___3.func = "mos7840_ioctl";
#line 2307
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2307
  ______f___3.line = 2307U;
#line 2307
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2307
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2307
  ______r___3 = debug != 0;
#line 2307
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2307
  if (______r___3 != 0) {
#line 2307
    printk("<7>%s: %s (%d) TIOCSERGETLSR\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2308
  tmp___0 = mos7840_get_lsr_info(tty, (unsigned int *)argp);
#line 2308
  return (tmp___0);
#line 2309
  return (0);
  case 21526U: ;
  case 21527U: ;
  case 21528U: 
#line 2315
  ______f___4.func = "mos7840_ioctl";
#line 2315
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2315
  ______f___4.line = 2316U;
#line 2315
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2315
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2315
  ______r___4 = debug != 0;
#line 2315
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2315
  if (______r___4 != 0) {
#line 2315
    printk("<7>%s: %s (%d) TIOCMSET/TIOCMBIC/TIOCMSET\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2317
  mosret = mos7840_set_modem_info(mos7840_port, cmd, (unsigned int *)argp);
#line 2319
  return (mosret);
  case 21525U: 
#line 2322
  ______f___5.func = "mos7840_ioctl";
#line 2322
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2322
  ______f___5.line = 2322U;
#line 2322
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 2322
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 2322
  ______r___5 = debug != 0;
#line 2322
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 2322
  if (______r___5 != 0) {
#line 2322
    printk("<7>%s: %s (%d) TIOCMGET\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2323
  tmp___1 = mos7840_get_modem_info(mos7840_port, (unsigned int *)argp);
#line 2323
  return (tmp___1);
  case 21534U: 
#line 2326
  ______f___6.func = "mos7840_ioctl";
#line 2326
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2326
  ______f___6.line = 2326U;
#line 2326
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 2326
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 2326
  ______r___6 = debug != 0;
#line 2326
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 2326
  if (______r___6 != 0) {
#line 2326
    printk("<7>%s: %s (%d) TIOCGSERIAL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2327
  tmp___2 = mos7840_get_serial_info(mos7840_port, (struct serial_struct *)argp);
#line 2327
  return (tmp___2);
  case 21535U: 
#line 2330
  ______f___7.func = "mos7840_ioctl";
#line 2330
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2330
  ______f___7.line = 2330U;
#line 2330
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2330
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2330
  ______r___7 = debug != 0;
#line 2330
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2330
  if (______r___7 != 0) {
#line 2330
    printk("<7>%s: %s (%d) TIOCSSERIAL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2331
  goto ldv_24841;
  case 21596U: 
#line 2334
  ______f___8.func = "mos7840_ioctl";
#line 2334
  ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2334
  ______f___8.line = 2334U;
#line 2334
  ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2334
  ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2334
  ______r___8 = debug != 0;
#line 2334
  ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2334
  if (______r___8 != 0) {
#line 2334
    printk("<7>%s: %s (%d) TIOCMIWAIT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2335
  cprev = mos7840_port->icount;
  ldv_24870: 
#line 2338
  mos7840_port->delta_msr_cond = 0;
#line 2339
  __ret = 0;
#line 2339
  ______f___11.func = "mos7840_ioctl";
#line 2339
  ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2339
  ______f___11.line = 2341U;
#line 2339
  ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 2339
  ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 2339
  ______r___11 = mos7840_port->delta_msr_cond != 1;
#line 2339
  ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 2339
  if (______r___11 != 0) {
#line 2339
    tmp___3 = get_current();
#line 2339
    __wait.flags = 0U;
#line 2339
    __wait.private = (void *)tmp___3;
#line 2339
    __wait.func = & autoremove_wake_function;
#line 2339
    __wait.task_list.next = & __wait.task_list;
#line 2339
    __wait.task_list.prev = & __wait.task_list;
    ldv_24859: 
#line 2339
    prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2339
    ______f___9.func = "mos7840_ioctl";
#line 2339
    ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2339
    ______f___9.line = 2341U;
#line 2339
    ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 2339
    ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 2339
    ______r___9 = mos7840_port->delta_msr_cond == 1;
#line 2339
    ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 2339
    if (______r___9 != 0) {
#line 2339
      goto ldv_24854;
    } else {

    }
#line 2339
    ______f___10.func = "mos7840_ioctl";
#line 2339
    ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2339
    ______f___10.line = 2341U;
#line 2339
    ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 2339
    ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 2339
    tmp___4 = get_current();
#line 2339
    tmp___5 = signal_pending(tmp___4);
#line 2339
    ______r___10 = tmp___5 == 0;
#line 2339
    ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 2339
    if (______r___10 != 0) {
#line 2339
      schedule();
#line 2339
      goto ldv_24858;
    } else {

    }
#line 2339
    __ret = -512;
#line 2339
    goto ldv_24854;
    ldv_24858: ;
#line 2339
    goto ldv_24859;
    ldv_24854: 
#line 2339
    finish_wait(& mos7840_port->delta_msr_wait, & __wait);
  } else {

  }
#line 2344
  ______f___12.func = "mos7840_ioctl";
#line 2344
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2344
  ______f___12.line = 2344U;
#line 2344
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 2344
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 2344
  tmp___6 = get_current();
#line 2344
  tmp___7 = signal_pending(tmp___6);
#line 2344
  ______r___12 = tmp___7 != 0;
#line 2344
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 2344
  if (______r___12 != 0) {
#line 2345
    return (-512);
  } else {

  }
#line 2346
  cnow = mos7840_port->icount;
#line 2347
  __asm__  volatile   ("": : : "memory");
#line 2348
  ______f___13.func = "mos7840_ioctl";
#line 2348
  ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2348
  ______f___13.line = 2349U;
#line 2348
  ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 2348
  ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 2348
  ______r___13 = ((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts;
#line 2348
  ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 2348
  if (______r___13 != 0) {
#line 2350
    return (-5);
  } else {

  }
#line 2351
  ______f___14.func = "mos7840_ioctl";
#line 2351
  ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2351
  ______f___14.line = 2354U;
#line 2351
  ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 2351
  ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 2351
  ______r___14 = ((((arg & 128UL) != 0UL && cnow.rng != cprev.rng) || ((arg & 256UL) != 0UL && cnow.dsr != cprev.dsr)) || ((arg & 64UL) != 0UL && cnow.dcd != cprev.dcd)) || ((arg & 32UL) != 0UL && cnow.cts != cprev.cts);
#line 2351
  ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 2351
  if (______r___14 != 0) {
#line 2355
    return (0);
  } else {

  }
#line 2357
  cprev = cnow;
#line 2358
  goto ldv_24870;
  case 21597U: 
#line 2363
  cnow = mos7840_port->icount;
#line 2364
  __asm__  volatile   ("": : : "memory");
#line 2365
  icount.cts = (int )cnow.cts;
#line 2366
  icount.dsr = (int )cnow.dsr;
#line 2367
  icount.rng = (int )cnow.rng;
#line 2368
  icount.dcd = (int )cnow.dcd;
#line 2369
  icount.rx = (int )cnow.rx;
#line 2370
  icount.tx = (int )cnow.tx;
#line 2371
  icount.frame = (int )cnow.frame;
#line 2372
  icount.overrun = (int )cnow.overrun;
#line 2373
  icount.parity = (int )cnow.parity;
#line 2374
  icount.brk = (int )cnow.brk;
#line 2375
  icount.buf_overrun = (int )cnow.buf_overrun;
#line 2377
  ______f___15.func = "mos7840_ioctl";
#line 2377
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2377
  ______f___15.line = 2378U;
#line 2377
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 2377
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 2377
  ______r___15 = debug != 0;
#line 2377
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 2377
  if (______r___15 != 0) {
#line 2377
    printk("<7>%s: %s (%d) TIOCGICOUNT RX=%d, TX=%d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number, icount.rx, icount.tx);
  } else {

  }
#line 2379
  ______f___16.func = "mos7840_ioctl";
#line 2379
  ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2379
  ______f___16.line = 2379U;
#line 2379
  ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 2379
  ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 2379
  tmp___8 = copy_to_user(argp, (void const   *)(& icount), 80U);
#line 2379
  ______r___16 = tmp___8 != 0UL;
#line 2379
  ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 2379
  if (______r___16 != 0) {
#line 2380
    return (-14);
  } else {

  }
#line 2381
  return (0);
  default: ;
#line 2383
  goto ldv_24841;
  }
  ldv_24841: ;
#line 2385
  return (-515);
}
}
#line 2388 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  int mos7840_num_ports ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;

  {
#line 2390
  mos7840_num_ports = 0;
#line 2392
  ______f.func = "mos7840_calc_num_ports";
#line 2392
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2392
  ______f.line = 2393U;
#line 2392
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2392
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2392
  ______r = debug != 0;
#line 2392
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2392
  if (______r != 0) {
#line 2392
    printk("<7>%s: numberofendpoints: %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints);
  } else {

  }
#line 2394
  ______f___0.func = "mos7840_calc_num_ports";
#line 2394
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2394
  ______f___0.line = 2395U;
#line 2394
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2394
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2394
  ______r___0 = debug != 0;
#line 2394
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2394
  if (______r___0 != 0) {
#line 2394
    printk("<7>%s: numberofendpoints: %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )((serial->interface)->altsetting)->desc.bNumEndpoints);
  } else {

  }
#line 2396
  ______f___2.func = "mos7840_calc_num_ports";
#line 2396
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2396
  ______f___2.line = 2396U;
#line 2396
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2396
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2396
  ______r___2 = (unsigned int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 5U;
#line 2396
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2396
  if (______r___2 != 0) {
#line 2397
    serial->num_ports = 2U;
#line 2397
    mos7840_num_ports = 2;
  } else {
#line 2398
    ______f___1.func = "mos7840_calc_num_ports";
#line 2398
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2398
    ______f___1.line = 2398U;
#line 2398
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2398
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2398
    ______r___1 = (unsigned int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 9U;
#line 2398
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2398
    if (______r___1 != 0) {
#line 2399
      serial->num_bulk_in = 4;
#line 2400
      serial->num_bulk_out = 4;
#line 2401
      serial->num_ports = 4U;
#line 2401
      mos7840_num_ports = 4;
    } else {

    }
  }
#line 2404
  return (mos7840_num_ports);
}
}
#line 2411 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_startup(struct usb_serial *serial ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_device *dev ;
  int i ;
  int status ;
  __u16 Data ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  struct lock_class_key __key ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;
  int ______r___5 ;
  struct ftrace_branch_data ______f___5 ;
  int ______r___6 ;
  struct ftrace_branch_data ______f___6 ;
  int ______r___7 ;
  struct ftrace_branch_data ______f___7 ;
  int ______r___8 ;
  struct ftrace_branch_data ______f___8 ;
  int ______r___9 ;
  struct ftrace_branch_data ______f___9 ;
  int ______r___10 ;
  struct ftrace_branch_data ______f___10 ;
  int ______r___11 ;
  struct ftrace_branch_data ______f___11 ;
  int ______r___12 ;
  struct ftrace_branch_data ______f___12 ;
  int ______r___13 ;
  struct ftrace_branch_data ______f___13 ;
  int ______r___14 ;
  struct ftrace_branch_data ______f___14 ;
  int ______r___15 ;
  struct ftrace_branch_data ______f___15 ;
  int ______r___16 ;
  struct ftrace_branch_data ______f___16 ;
  int ______r___17 ;
  struct ftrace_branch_data ______f___17 ;
  int ______r___18 ;
  struct ftrace_branch_data ______f___18 ;
  int ______r___19 ;
  struct ftrace_branch_data ______f___19 ;
  int ______r___20 ;
  struct ftrace_branch_data ______f___20 ;
  int ______r___21 ;
  struct ftrace_branch_data ______f___21 ;
  int ______r___22 ;
  struct ftrace_branch_data ______f___22 ;
  int ______r___23 ;
  struct ftrace_branch_data ______f___23 ;
  int ______r___24 ;
  struct ftrace_branch_data ______f___24 ;
  int ______r___25 ;
  struct ftrace_branch_data ______f___25 ;
  int ______r___26 ;
  struct ftrace_branch_data ______f___26 ;
  int ______r___27 ;
  struct ftrace_branch_data ______f___27 ;
  int ______r___28 ;
  struct ftrace_branch_data ______f___28 ;
  int ______r___29 ;
  struct ftrace_branch_data ______f___29 ;
  int ______r___30 ;
  struct ftrace_branch_data ______f___30 ;
  int ______r___31 ;
  struct ftrace_branch_data ______f___31 ;
  int ______r___32 ;
  struct ftrace_branch_data ______f___32 ;
  int ______r___33 ;
  struct ftrace_branch_data ______f___33 ;
  int ______r___34 ;
  struct ftrace_branch_data ______f___34 ;
  int ______r___35 ;
  struct ftrace_branch_data ______f___35 ;
  int ______r___36 ;
  struct ftrace_branch_data ______f___36 ;
  int ______r___37 ;
  struct ftrace_branch_data ______f___37 ;
  int ______r___38 ;
  struct ftrace_branch_data ______f___38 ;
  int ______r___39 ;
  struct ftrace_branch_data ______f___39 ;
  int ______r___40 ;
  struct ftrace_branch_data ______f___40 ;
  int ______r___41 ;
  struct ftrace_branch_data ______f___41 ;
  int ______r___42 ;
  struct ftrace_branch_data ______f___42 ;
  int ______r___43 ;
  struct ftrace_branch_data ______f___43 ;
  int ______r___44 ;
  struct ftrace_branch_data ______f___44 ;
  int ______r___45 ;
  struct ftrace_branch_data ______f___45 ;
  void *tmp___2 ;
  void *tmp___3 ;
  int ______r___46 ;
  struct ftrace_branch_data ______f___46 ;
  int ______r___47 ;
  struct ftrace_branch_data ______f___47 ;
  int ______r___48 ;
  struct ftrace_branch_data ______f___48 ;
  int ______r___49 ;
  struct ftrace_branch_data ______f___49 ;
  unsigned int tmp___4 ;

  {
#line 2418
  ______f.func = "mos7840_startup";
#line 2418
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2418
  ______f.line = 2418U;
#line 2418
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2418
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2418
  ______r = debug != 0;
#line 2418
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2418
  if (______r != 0) {
#line 2418
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_startup :entering..........");
  } else {

  }
#line 2420
  ______f___1.func = "mos7840_startup";
#line 2420
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2420
  ______f___1.line = 2420U;
#line 2420
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2420
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2420
  ______r___1 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 2420
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2420
  if (______r___1 != 0) {
#line 2421
    ______f___0.func = "mos7840_startup";
#line 2421
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2421
    ______f___0.line = 2421U;
#line 2421
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2421
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2421
    ______r___0 = debug != 0;
#line 2421
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2421
    if (______r___0 != 0) {
#line 2421
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Handler");
    } else {

    }
#line 2422
    return (-1);
  } else {

  }
#line 2425
  dev = serial->dev;
#line 2427
  ______f___2.func = "mos7840_startup";
#line 2427
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2427
  ______f___2.line = 2427U;
#line 2427
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2427
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2427
  ______r___2 = debug != 0;
#line 2427
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2427
  if (______r___2 != 0) {
#line 2427
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering...");
  } else {

  }
#line 2433
  i = 0;
#line 2433
  goto ldv_25053;
  ldv_25052: 
#line 2434
  tmp = kzalloc(512UL, 208U);
#line 2434
  mos7840_port = (struct moschip_port *)tmp;
#line 2435
  ______f___3.func = "mos7840_startup";
#line 2435
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2435
  ______f___3.line = 2435U;
#line 2435
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2435
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2435
  ______r___3 = (unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0);
#line 2435
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2435
  if (______r___3 != 0) {
#line 2436
    tmp___0 = dev_name((struct device  const  *)(& dev->dev));
#line 2436
    tmp___1 = dev_driver_string((struct device  const  *)(& dev->dev));
#line 2436
    printk("<3>%s %s: %s - Out of memory\n", tmp___1, tmp___0, "mos7840_startup");
#line 2437
    status = -12;
#line 2438
    i = i - 1;
#line 2439
    goto error;
  } else {

  }
#line 2446
  mos7840_port->port = serial->port[i];
#line 2447
  mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2448
  __spin_lock_init(& mos7840_port->pool_lock, "&mos7840_port->pool_lock", & __key);
#line 2453
  mos7840_port->port_num = i + 1;
#line 2454
  ______f___4.func = "mos7840_startup";
#line 2454
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2454
  ______f___4.line = 2454U;
#line 2454
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2454
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2454
  ______r___4 = debug != 0;
#line 2454
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2454
  if (______r___4 != 0) {
#line 2454
    printk("<7>%s: serial->port[i]->number = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )(serial->port[i])->number);
  } else {

  }
#line 2455
  ______f___5.func = "mos7840_startup";
#line 2455
  ______f___5.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2455
  ______f___5.line = 2455U;
#line 2455
  ______f___5.ldv_815.ldv_809.correct = 0UL;
#line 2455
  ______f___5.ldv_815.ldv_809.incorrect = 0UL;
#line 2455
  ______r___5 = debug != 0;
#line 2455
  ______f___5.ldv_815.miss_hit[______r___5] = ______f___5.ldv_815.miss_hit[______r___5] + 1UL;
#line 2455
  if (______r___5 != 0) {
#line 2455
    printk("<7>%s: serial->port[i]->serial->minor = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )((serial->port[i])->serial)->minor);
  } else {

  }
#line 2456
  ______f___6.func = "mos7840_startup";
#line 2456
  ______f___6.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2456
  ______f___6.line = 2456U;
#line 2456
  ______f___6.ldv_815.ldv_809.correct = 0UL;
#line 2456
  ______f___6.ldv_815.ldv_809.incorrect = 0UL;
#line 2456
  ______r___6 = debug != 0;
#line 2456
  ______f___6.ldv_815.miss_hit[______r___6] = ______f___6.ldv_815.miss_hit[______r___6] + 1UL;
#line 2456
  if (______r___6 != 0) {
#line 2456
    printk("<7>%s: mos7840_port->port_num = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           mos7840_port->port_num);
  } else {

  }
#line 2457
  ______f___7.func = "mos7840_startup";
#line 2457
  ______f___7.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2457
  ______f___7.line = 2457U;
#line 2457
  ______f___7.ldv_815.ldv_809.correct = 0UL;
#line 2457
  ______f___7.ldv_815.ldv_809.incorrect = 0UL;
#line 2457
  ______r___7 = debug != 0;
#line 2457
  ______f___7.ldv_815.miss_hit[______r___7] = ______f___7.ldv_815.miss_hit[______r___7] + 1UL;
#line 2457
  if (______r___7 != 0) {
#line 2457
    printk("<7>%s: serial->minor = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (int )serial->minor);
  } else {

  }
#line 2459
  ______f___12.func = "mos7840_startup";
#line 2459
  ______f___12.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2459
  ______f___12.line = 2459U;
#line 2459
  ______f___12.ldv_815.ldv_809.correct = 0UL;
#line 2459
  ______f___12.ldv_815.ldv_809.incorrect = 0UL;
#line 2459
  ______r___12 = mos7840_port->port_num == 1;
#line 2459
  ______f___12.ldv_815.miss_hit[______r___12] = ______f___12.ldv_815.miss_hit[______r___12] + 1UL;
#line 2459
  if (______r___12 != 0) {
#line 2460
    mos7840_port->SpRegOffset = 0U;
#line 2461
    mos7840_port->ControlRegOffset = 1U;
#line 2462
    mos7840_port->DcrRegOffset = 4U;
  } else {
#line 2463
    ______f___11.func = "mos7840_startup";
#line 2463
    ______f___11.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2463
    ______f___11.line = 2464U;
#line 2463
    ______f___11.ldv_815.ldv_809.correct = 0UL;
#line 2463
    ______f___11.ldv_815.ldv_809.incorrect = 0UL;
#line 2463
    ______r___11 = mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 4U;
#line 2463
    ______f___11.ldv_815.miss_hit[______r___11] = ______f___11.ldv_815.miss_hit[______r___11] + 1UL;
#line 2463
    if (______r___11 != 0) {
#line 2465
      mos7840_port->SpRegOffset = 8U;
#line 2466
      mos7840_port->ControlRegOffset = 9U;
#line 2467
      mos7840_port->DcrRegOffset = 22U;
    } else {
#line 2468
      ______f___10.func = "mos7840_startup";
#line 2468
      ______f___10.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2468
      ______f___10.line = 2469U;
#line 2468
      ______f___10.ldv_815.ldv_809.correct = 0UL;
#line 2468
      ______f___10.ldv_815.ldv_809.incorrect = 0UL;
#line 2468
      ______r___10 = mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 2U;
#line 2468
      ______f___10.ldv_815.miss_hit[______r___10] = ______f___10.ldv_815.miss_hit[______r___10] + 1UL;
#line 2468
      if (______r___10 != 0) {
#line 2470
        mos7840_port->SpRegOffset = 10U;
#line 2471
        mos7840_port->ControlRegOffset = 11U;
#line 2472
        mos7840_port->DcrRegOffset = 25U;
      } else {
#line 2473
        ______f___9.func = "mos7840_startup";
#line 2473
        ______f___9.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2473
        ______f___9.line = 2474U;
#line 2473
        ______f___9.ldv_815.ldv_809.correct = 0UL;
#line 2473
        ______f___9.ldv_815.ldv_809.incorrect = 0UL;
#line 2473
        ______r___9 = mos7840_port->port_num == 3 && (unsigned int )serial->num_ports == 4U;
#line 2473
        ______f___9.ldv_815.miss_hit[______r___9] = ______f___9.ldv_815.miss_hit[______r___9] + 1UL;
#line 2473
        if (______r___9 != 0) {
#line 2475
          mos7840_port->SpRegOffset = 10U;
#line 2476
          mos7840_port->ControlRegOffset = 11U;
#line 2477
          mos7840_port->DcrRegOffset = 25U;
        } else {
#line 2478
          ______f___8.func = "mos7840_startup";
#line 2478
          ______f___8.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2478
          ______f___8.line = 2479U;
#line 2478
          ______f___8.ldv_815.ldv_809.correct = 0UL;
#line 2478
          ______f___8.ldv_815.ldv_809.incorrect = 0UL;
#line 2478
          ______r___8 = mos7840_port->port_num == 4 && (unsigned int )serial->num_ports == 4U;
#line 2478
          ______f___8.ldv_815.miss_hit[______r___8] = ______f___8.ldv_815.miss_hit[______r___8] + 1UL;
#line 2478
          if (______r___8 != 0) {
#line 2480
            mos7840_port->SpRegOffset = 12U;
#line 2481
            mos7840_port->ControlRegOffset = 13U;
#line 2482
            mos7840_port->DcrRegOffset = 28U;
          } else {

          }
        }
      }
    }
  }
#line 2484
  mos7840_dump_serial_port(mos7840_port);
#line 2485
  mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2488
  status = mos7840_get_reg_sync(serial->port[i], (int )mos7840_port->ControlRegOffset,
                                & Data);
#line 2490
  ______f___15.func = "mos7840_startup";
#line 2490
  ______f___15.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2490
  ______f___15.line = 2490U;
#line 2490
  ______f___15.ldv_815.ldv_809.correct = 0UL;
#line 2490
  ______f___15.ldv_815.ldv_809.incorrect = 0UL;
#line 2490
  ______r___15 = status < 0;
#line 2490
  ______f___15.ldv_815.miss_hit[______r___15] = ______f___15.ldv_815.miss_hit[______r___15] + 1UL;
#line 2490
  if (______r___15 != 0) {
#line 2491
    ______f___13.func = "mos7840_startup";
#line 2491
    ______f___13.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2491
    ______f___13.line = 2491U;
#line 2491
    ______f___13.ldv_815.ldv_809.correct = 0UL;
#line 2491
    ______f___13.ldv_815.ldv_809.incorrect = 0UL;
#line 2491
    ______r___13 = debug != 0;
#line 2491
    ______f___13.ldv_815.miss_hit[______r___13] = ______f___13.ldv_815.miss_hit[______r___13] + 1UL;
#line 2491
    if (______r___13 != 0) {
#line 2491
      printk("<7>%s: Reading ControlReg failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2492
    goto ldv_24955;
  } else {
#line 2494
    ______f___14.func = "mos7840_startup";
#line 2494
    ______f___14.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2494
    ______f___14.line = 2495U;
#line 2494
    ______f___14.ldv_815.ldv_809.correct = 0UL;
#line 2494
    ______f___14.ldv_815.ldv_809.incorrect = 0UL;
#line 2494
    ______r___14 = debug != 0;
#line 2494
    ______f___14.ldv_815.miss_hit[______r___14] = ______f___14.ldv_815.miss_hit[______r___14] + 1UL;
#line 2494
    if (______r___14 != 0) {
#line 2494
      printk("<7>%s: ControlReg Reading success val is %x, status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (int )Data, status);
    } else {

    }
  }
#line 2496
  Data = (__u16 )((unsigned int )Data | 8U);
#line 2497
  Data = (__u16 )((unsigned int )Data | 4U);
#line 2501
  status = mos7840_set_reg_sync(serial->port[i], (int )mos7840_port->ControlRegOffset,
                                (int )Data);
#line 2503
  ______f___18.func = "mos7840_startup";
#line 2503
  ______f___18.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2503
  ______f___18.line = 2503U;
#line 2503
  ______f___18.ldv_815.ldv_809.correct = 0UL;
#line 2503
  ______f___18.ldv_815.ldv_809.incorrect = 0UL;
#line 2503
  ______r___18 = status < 0;
#line 2503
  ______f___18.ldv_815.miss_hit[______r___18] = ______f___18.ldv_815.miss_hit[______r___18] + 1UL;
#line 2503
  if (______r___18 != 0) {
#line 2504
    ______f___16.func = "mos7840_startup";
#line 2504
    ______f___16.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2504
    ______f___16.line = 2504U;
#line 2504
    ______f___16.ldv_815.ldv_809.correct = 0UL;
#line 2504
    ______f___16.ldv_815.ldv_809.incorrect = 0UL;
#line 2504
    ______r___16 = debug != 0;
#line 2504
    ______f___16.ldv_815.miss_hit[______r___16] = ______f___16.ldv_815.miss_hit[______r___16] + 1UL;
#line 2504
    if (______r___16 != 0) {
#line 2504
      printk("<7>%s: Writing ControlReg failed(rx_disable) status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2505
    goto ldv_24955;
  } else {
#line 2507
    ______f___17.func = "mos7840_startup";
#line 2507
    ______f___17.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2507
    ______f___17.line = 2508U;
#line 2507
    ______f___17.ldv_815.ldv_809.correct = 0UL;
#line 2507
    ______f___17.ldv_815.ldv_809.incorrect = 0UL;
#line 2507
    ______r___17 = debug != 0;
#line 2507
    ______f___17.ldv_815.miss_hit[______r___17] = ______f___17.ldv_815.miss_hit[______r___17] + 1UL;
#line 2507
    if (______r___17 != 0) {
#line 2507
      printk("<7>%s: ControlReg Writing success(rx_disable) status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2512
  Data = 1U;
#line 2513
  status = mos7840_set_reg_sync(serial->port[i], (int )mos7840_port->DcrRegOffset,
                                (int )Data);
#line 2515
  ______f___21.func = "mos7840_startup";
#line 2515
  ______f___21.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2515
  ______f___21.line = 2515U;
#line 2515
  ______f___21.ldv_815.ldv_809.correct = 0UL;
#line 2515
  ______f___21.ldv_815.ldv_809.incorrect = 0UL;
#line 2515
  ______r___21 = status < 0;
#line 2515
  ______f___21.ldv_815.miss_hit[______r___21] = ______f___21.ldv_815.miss_hit[______r___21] + 1UL;
#line 2515
  if (______r___21 != 0) {
#line 2516
    ______f___19.func = "mos7840_startup";
#line 2516
    ______f___19.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2516
    ______f___19.line = 2516U;
#line 2516
    ______f___19.ldv_815.ldv_809.correct = 0UL;
#line 2516
    ______f___19.ldv_815.ldv_809.incorrect = 0UL;
#line 2516
    ______r___19 = debug != 0;
#line 2516
    ______f___19.ldv_815.miss_hit[______r___19] = ______f___19.ldv_815.miss_hit[______r___19] + 1UL;
#line 2516
    if (______r___19 != 0) {
#line 2516
      printk("<7>%s: Writing DCR0 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2517
    goto ldv_24955;
  } else {
#line 2519
    ______f___20.func = "mos7840_startup";
#line 2519
    ______f___20.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2519
    ______f___20.line = 2519U;
#line 2519
    ______f___20.ldv_815.ldv_809.correct = 0UL;
#line 2519
    ______f___20.ldv_815.ldv_809.incorrect = 0UL;
#line 2519
    ______r___20 = debug != 0;
#line 2519
    ______f___20.ldv_815.miss_hit[______r___20] = ______f___20.ldv_815.miss_hit[______r___20] + 1UL;
#line 2519
    if (______r___20 != 0) {
#line 2519
      printk("<7>%s: DCR0 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2521
  Data = 5U;
#line 2522
  status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 1U),
                                (int )Data);
#line 2524
  ______f___24.func = "mos7840_startup";
#line 2524
  ______f___24.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2524
  ______f___24.line = 2524U;
#line 2524
  ______f___24.ldv_815.ldv_809.correct = 0UL;
#line 2524
  ______f___24.ldv_815.ldv_809.incorrect = 0UL;
#line 2524
  ______r___24 = status < 0;
#line 2524
  ______f___24.ldv_815.miss_hit[______r___24] = ______f___24.ldv_815.miss_hit[______r___24] + 1UL;
#line 2524
  if (______r___24 != 0) {
#line 2525
    ______f___22.func = "mos7840_startup";
#line 2525
    ______f___22.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2525
    ______f___22.line = 2525U;
#line 2525
    ______f___22.ldv_815.ldv_809.correct = 0UL;
#line 2525
    ______f___22.ldv_815.ldv_809.incorrect = 0UL;
#line 2525
    ______r___22 = debug != 0;
#line 2525
    ______f___22.ldv_815.miss_hit[______r___22] = ______f___22.ldv_815.miss_hit[______r___22] + 1UL;
#line 2525
    if (______r___22 != 0) {
#line 2525
      printk("<7>%s: Writing DCR1 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2526
    goto ldv_24955;
  } else {
#line 2528
    ______f___23.func = "mos7840_startup";
#line 2528
    ______f___23.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2528
    ______f___23.line = 2528U;
#line 2528
    ______f___23.ldv_815.ldv_809.correct = 0UL;
#line 2528
    ______f___23.ldv_815.ldv_809.incorrect = 0UL;
#line 2528
    ______r___23 = debug != 0;
#line 2528
    ______f___23.ldv_815.miss_hit[______r___23] = ______f___23.ldv_815.miss_hit[______r___23] + 1UL;
#line 2528
    if (______r___23 != 0) {
#line 2528
      printk("<7>%s: DCR1 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2530
  Data = 36U;
#line 2531
  status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 2U),
                                (int )Data);
#line 2533
  ______f___27.func = "mos7840_startup";
#line 2533
  ______f___27.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2533
  ______f___27.line = 2533U;
#line 2533
  ______f___27.ldv_815.ldv_809.correct = 0UL;
#line 2533
  ______f___27.ldv_815.ldv_809.incorrect = 0UL;
#line 2533
  ______r___27 = status < 0;
#line 2533
  ______f___27.ldv_815.miss_hit[______r___27] = ______f___27.ldv_815.miss_hit[______r___27] + 1UL;
#line 2533
  if (______r___27 != 0) {
#line 2534
    ______f___25.func = "mos7840_startup";
#line 2534
    ______f___25.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2534
    ______f___25.line = 2534U;
#line 2534
    ______f___25.ldv_815.ldv_809.correct = 0UL;
#line 2534
    ______f___25.ldv_815.ldv_809.incorrect = 0UL;
#line 2534
    ______r___25 = debug != 0;
#line 2534
    ______f___25.ldv_815.miss_hit[______r___25] = ______f___25.ldv_815.miss_hit[______r___25] + 1UL;
#line 2534
    if (______r___25 != 0) {
#line 2534
      printk("<7>%s: Writing DCR2 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2535
    goto ldv_24955;
  } else {
#line 2537
    ______f___26.func = "mos7840_startup";
#line 2537
    ______f___26.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2537
    ______f___26.line = 2537U;
#line 2537
    ______f___26.ldv_815.ldv_809.correct = 0UL;
#line 2537
    ______f___26.ldv_815.ldv_809.incorrect = 0UL;
#line 2537
    ______r___26 = debug != 0;
#line 2537
    ______f___26.ldv_815.miss_hit[______r___26] = ______f___26.ldv_815.miss_hit[______r___26] + 1UL;
#line 2537
    if (______r___26 != 0) {
#line 2537
      printk("<7>%s: DCR2 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2540
  Data = 0U;
#line 2541
  status = mos7840_set_reg_sync(serial->port[i], 3, (int )Data);
#line 2543
  ______f___30.func = "mos7840_startup";
#line 2543
  ______f___30.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2543
  ______f___30.line = 2543U;
#line 2543
  ______f___30.ldv_815.ldv_809.correct = 0UL;
#line 2543
  ______f___30.ldv_815.ldv_809.incorrect = 0UL;
#line 2543
  ______r___30 = status < 0;
#line 2543
  ______f___30.ldv_815.miss_hit[______r___30] = ______f___30.ldv_815.miss_hit[______r___30] + 1UL;
#line 2543
  if (______r___30 != 0) {
#line 2544
    ______f___28.func = "mos7840_startup";
#line 2544
    ______f___28.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2544
    ______f___28.line = 2544U;
#line 2544
    ______f___28.ldv_815.ldv_809.correct = 0UL;
#line 2544
    ______f___28.ldv_815.ldv_809.incorrect = 0UL;
#line 2544
    ______r___28 = debug != 0;
#line 2544
    ______f___28.ldv_815.miss_hit[______r___28] = ______f___28.ldv_815.miss_hit[______r___28] + 1UL;
#line 2544
    if (______r___28 != 0) {
#line 2544
      printk("<7>%s: Writing CLK_START_VALUE_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2545
    goto ldv_24955;
  } else {
#line 2547
    ______f___29.func = "mos7840_startup";
#line 2547
    ______f___29.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2547
    ______f___29.line = 2547U;
#line 2547
    ______f___29.ldv_815.ldv_809.correct = 0UL;
#line 2547
    ______f___29.ldv_815.ldv_809.incorrect = 0UL;
#line 2547
    ______r___29 = debug != 0;
#line 2547
    ______f___29.ldv_815.miss_hit[______r___29] = ______f___29.ldv_815.miss_hit[______r___29] + 1UL;
#line 2547
    if (______r___29 != 0) {
#line 2547
      printk("<7>%s: CLK_START_VALUE_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2549
  Data = 32U;
#line 2550
  status = mos7840_set_reg_sync(serial->port[i], 2, (int )Data);
#line 2552
  ______f___33.func = "mos7840_startup";
#line 2552
  ______f___33.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2552
  ______f___33.line = 2552U;
#line 2552
  ______f___33.ldv_815.ldv_809.correct = 0UL;
#line 2552
  ______f___33.ldv_815.ldv_809.incorrect = 0UL;
#line 2552
  ______r___33 = status < 0;
#line 2552
  ______f___33.ldv_815.miss_hit[______r___33] = ______f___33.ldv_815.miss_hit[______r___33] + 1UL;
#line 2552
  if (______r___33 != 0) {
#line 2553
    ______f___31.func = "mos7840_startup";
#line 2553
    ______f___31.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2553
    ______f___31.line = 2554U;
#line 2553
    ______f___31.ldv_815.ldv_809.correct = 0UL;
#line 2553
    ______f___31.ldv_815.ldv_809.incorrect = 0UL;
#line 2553
    ______r___31 = debug != 0;
#line 2553
    ______f___31.ldv_815.miss_hit[______r___31] = ______f___31.ldv_815.miss_hit[______r___31] + 1UL;
#line 2553
    if (______r___31 != 0) {
#line 2553
      printk("<7>%s: Writing CLK_MULTI_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2555
    goto error;
  } else {
#line 2557
    ______f___32.func = "mos7840_startup";
#line 2557
    ______f___32.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2557
    ______f___32.line = 2558U;
#line 2557
    ______f___32.ldv_815.ldv_809.correct = 0UL;
#line 2557
    ______f___32.ldv_815.ldv_809.incorrect = 0UL;
#line 2557
    ______r___32 = debug != 0;
#line 2557
    ______f___32.ldv_815.miss_hit[______r___32] = ______f___32.ldv_815.miss_hit[______r___32] + 1UL;
#line 2557
    if (______r___32 != 0) {
#line 2557
      printk("<7>%s: CLK_MULTI_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2561
  Data = 0U;
#line 2562
  status = mos7840_set_uart_reg(serial->port[i], 7, (int )Data);
#line 2564
  ______f___36.func = "mos7840_startup";
#line 2564
  ______f___36.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2564
  ______f___36.line = 2564U;
#line 2564
  ______f___36.ldv_815.ldv_809.correct = 0UL;
#line 2564
  ______f___36.ldv_815.ldv_809.incorrect = 0UL;
#line 2564
  ______r___36 = status < 0;
#line 2564
  ______f___36.ldv_815.miss_hit[______r___36] = ______f___36.ldv_815.miss_hit[______r___36] + 1UL;
#line 2564
  if (______r___36 != 0) {
#line 2565
    ______f___34.func = "mos7840_startup";
#line 2565
    ______f___34.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2565
    ______f___34.line = 2566U;
#line 2565
    ______f___34.ldv_815.ldv_809.correct = 0UL;
#line 2565
    ______f___34.ldv_815.ldv_809.incorrect = 0UL;
#line 2565
    ______r___34 = debug != 0;
#line 2565
    ______f___34.ldv_815.miss_hit[______r___34] = ______f___34.ldv_815.miss_hit[______r___34] + 1UL;
#line 2565
    if (______r___34 != 0) {
#line 2565
      printk("<7>%s: Writing SCRATCH_PAD_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2567
    goto ldv_24955;
  } else {
#line 2569
    ______f___35.func = "mos7840_startup";
#line 2569
    ______f___35.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2569
    ______f___35.line = 2570U;
#line 2569
    ______f___35.ldv_815.ldv_809.correct = 0UL;
#line 2569
    ______f___35.ldv_815.ldv_809.incorrect = 0UL;
#line 2569
    ______r___35 = debug != 0;
#line 2569
    ______f___35.ldv_815.miss_hit[______r___35] = ______f___35.ldv_815.miss_hit[______r___35] + 1UL;
#line 2569
    if (______r___35 != 0) {
#line 2569
      printk("<7>%s: SCRATCH_PAD_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2573
  ______f___45.func = "mos7840_startup";
#line 2573
  ______f___45.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2573
  ______f___45.line = 2574U;
#line 2573
  ______f___45.ldv_815.ldv_809.correct = 0UL;
#line 2573
  ______f___45.ldv_815.ldv_809.incorrect = 0UL;
#line 2573
  ______r___45 = mos7840_port->port_num != 1 && (unsigned int )serial->num_ports == 2U;
#line 2573
  ______f___45.ldv_815.miss_hit[______r___45] = ______f___45.ldv_815.miss_hit[______r___45] + 1UL;
#line 2573
  if (______r___45 != 0) {
#line 2576
    Data = 255U;
#line 2577
    status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U),
                                  (int )Data);
#line 2580
    ______f___37.func = "mos7840_startup";
#line 2580
    ______f___37.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2580
    ______f___37.line = 2582U;
#line 2580
    ______f___37.ldv_815.ldv_809.correct = 0UL;
#line 2580
    ______f___37.ldv_815.ldv_809.incorrect = 0UL;
#line 2580
    ______r___37 = debug != 0;
#line 2580
    ______f___37.ldv_815.miss_hit[______r___37] = ______f___37.ldv_815.miss_hit[______r___37] + 1UL;
#line 2580
    if (______r___37 != 0) {
#line 2580
      printk("<7>%s: ZLIP offset%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U));
    } else {

    }
#line 2583
    ______f___40.func = "mos7840_startup";
#line 2583
    ______f___40.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2583
    ______f___40.line = 2583U;
#line 2583
    ______f___40.ldv_815.ldv_809.correct = 0UL;
#line 2583
    ______f___40.ldv_815.ldv_809.incorrect = 0UL;
#line 2583
    ______r___40 = status < 0;
#line 2583
    ______f___40.ldv_815.miss_hit[______r___40] = ______f___40.ldv_815.miss_hit[______r___40] + 1UL;
#line 2583
    if (______r___40 != 0) {
#line 2584
      ______f___38.func = "mos7840_startup";
#line 2584
      ______f___38.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2584
      ______f___38.line = 2585U;
#line 2584
      ______f___38.ldv_815.ldv_809.correct = 0UL;
#line 2584
      ______f___38.ldv_815.ldv_809.incorrect = 0UL;
#line 2584
      ______r___38 = debug != 0;
#line 2584
      ______f___38.ldv_815.miss_hit[______r___38] = ______f___38.ldv_815.miss_hit[______r___38] + 1UL;
#line 2584
      if (______r___38 != 0) {
#line 2584
        printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               i + 2, status);
      } else {

      }
#line 2586
      goto ldv_24955;
    } else {
#line 2588
      ______f___39.func = "mos7840_startup";
#line 2588
      ______f___39.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2588
      ______f___39.line = 2589U;
#line 2588
      ______f___39.ldv_815.ldv_809.correct = 0UL;
#line 2588
      ______f___39.ldv_815.ldv_809.incorrect = 0UL;
#line 2588
      ______r___39 = debug != 0;
#line 2588
      ______f___39.ldv_815.miss_hit[______r___39] = ______f___39.ldv_815.miss_hit[______r___39] + 1UL;
#line 2588
      if (______r___39 != 0) {
#line 2588
        printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               i + 2, status);
      } else {

      }
    }
  } else {
#line 2591
    Data = 255U;
#line 2592
    status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned short )((int )((short )mos7840_port->port_num) + 57)),
                                  (int )Data);
#line 2595
    ______f___41.func = "mos7840_startup";
#line 2595
    ______f___41.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2595
    ______f___41.line = 2597U;
#line 2595
    ______f___41.ldv_815.ldv_809.correct = 0UL;
#line 2595
    ______f___41.ldv_815.ldv_809.incorrect = 0UL;
#line 2595
    ______r___41 = debug != 0;
#line 2595
    ______f___41.ldv_815.miss_hit[______r___41] = ______f___41.ldv_815.miss_hit[______r___41] + 1UL;
#line 2595
    if (______r___41 != 0) {
#line 2595
      printk("<7>%s: ZLIP offset%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (int )((unsigned short )((int )((short )mos7840_port->port_num) + 57)));
    } else {

    }
#line 2598
    ______f___44.func = "mos7840_startup";
#line 2598
    ______f___44.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2598
    ______f___44.line = 2598U;
#line 2598
    ______f___44.ldv_815.ldv_809.correct = 0UL;
#line 2598
    ______f___44.ldv_815.ldv_809.incorrect = 0UL;
#line 2598
    ______r___44 = status < 0;
#line 2598
    ______f___44.ldv_815.miss_hit[______r___44] = ______f___44.ldv_815.miss_hit[______r___44] + 1UL;
#line 2598
    if (______r___44 != 0) {
#line 2599
      ______f___42.func = "mos7840_startup";
#line 2599
      ______f___42.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2599
      ______f___42.line = 2600U;
#line 2599
      ______f___42.ldv_815.ldv_809.correct = 0UL;
#line 2599
      ______f___42.ldv_815.ldv_809.incorrect = 0UL;
#line 2599
      ______r___42 = debug != 0;
#line 2599
      ______f___42.ldv_815.miss_hit[______r___42] = ______f___42.ldv_815.miss_hit[______r___42] + 1UL;
#line 2599
      if (______r___42 != 0) {
#line 2599
        printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               i + 1, status);
      } else {

      }
#line 2601
      goto ldv_24955;
    } else {
#line 2603
      ______f___43.func = "mos7840_startup";
#line 2603
      ______f___43.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2603
      ______f___43.line = 2604U;
#line 2603
      ______f___43.ldv_815.ldv_809.correct = 0UL;
#line 2603
      ______f___43.ldv_815.ldv_809.incorrect = 0UL;
#line 2603
      ______r___43 = debug != 0;
#line 2603
      ______f___43.ldv_815.miss_hit[______r___43] = ______f___43.ldv_815.miss_hit[______r___43] + 1UL;
#line 2603
      if (______r___43 != 0) {
#line 2603
        printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
               i + 1, status);
      } else {

      }
    }
  }
#line 2607
  mos7840_port->control_urb = ldv_usb_alloc_urb_20(0, 208U);
#line 2608
  tmp___2 = kmalloc(16UL, 208U);
#line 2608
  mos7840_port->ctrl_buf = (char *)tmp___2;
#line 2609
  tmp___3 = kmalloc(8UL, 208U);
#line 2609
  mos7840_port->dr = (struct usb_ctrlrequest *)tmp___3;
#line 2611
  ______f___46.func = "mos7840_startup";
#line 2611
  ______f___46.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2611
  ______f___46.line = 2612U;
#line 2611
  ______f___46.ldv_815.ldv_809.correct = 0UL;
#line 2611
  ______f___46.ldv_815.ldv_809.incorrect = 0UL;
#line 2611
  ______r___46 = ((unsigned long )mos7840_port->control_urb == (unsigned long )((struct urb *)0) || (unsigned long )mos7840_port->ctrl_buf == (unsigned long )((char *)0)) || (unsigned long )mos7840_port->dr == (unsigned long )((struct usb_ctrlrequest *)0);
#line 2611
  ______f___46.ldv_815.miss_hit[______r___46] = ______f___46.ldv_815.miss_hit[______r___46] + 1UL;
#line 2611
  if (______r___46 != 0) {
#line 2613
    status = -12;
#line 2614
    goto error;
  } else {

  }
#line 2433
  i = i + 1;
  ldv_25053: ;
#line 2433
  if ((int )serial->num_ports > i) {
#line 2434
    goto ldv_25052;
  } else {

  }
  ldv_24955: 
#line 2619
  Data = 15U;
#line 2620
  status = mos7840_set_reg_sync(serial->port[0], 62, (int )Data);
#line 2621
  ______f___49.func = "mos7840_startup";
#line 2621
  ______f___49.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2621
  ______f___49.line = 2621U;
#line 2621
  ______f___49.ldv_815.ldv_809.correct = 0UL;
#line 2621
  ______f___49.ldv_815.ldv_809.incorrect = 0UL;
#line 2621
  ______r___49 = status < 0;
#line 2621
  ______f___49.ldv_815.miss_hit[______r___49] = ______f___49.ldv_815.miss_hit[______r___49] + 1UL;
#line 2621
  if (______r___49 != 0) {
#line 2622
    ______f___47.func = "mos7840_startup";
#line 2622
    ______f___47.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2622
    ______f___47.line = 2622U;
#line 2622
    ______f___47.ldv_815.ldv_809.correct = 0UL;
#line 2622
    ______f___47.ldv_815.ldv_809.incorrect = 0UL;
#line 2622
    ______r___47 = debug != 0;
#line 2622
    ______f___47.ldv_815.miss_hit[______r___47] = ______f___47.ldv_815.miss_hit[______r___47] + 1UL;
#line 2622
    if (______r___47 != 0) {
#line 2622
      printk("<7>%s: Writing ZLP_REG5 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2623
    goto error;
  } else {
#line 2625
    ______f___48.func = "mos7840_startup";
#line 2625
    ______f___48.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2625
    ______f___48.line = 2625U;
#line 2625
    ______f___48.ldv_815.ldv_809.correct = 0UL;
#line 2625
    ______f___48.ldv_815.ldv_809.incorrect = 0UL;
#line 2625
    ______r___48 = debug != 0;
#line 2625
    ______f___48.ldv_815.miss_hit[______r___48] = ______f___48.ldv_815.miss_hit[______r___48] + 1UL;
#line 2625
    if (______r___48 != 0) {
#line 2625
      printk("<7>%s: ZLP_REG5 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
  }
#line 2628
  tmp___4 = __create_pipe(serial->dev, 0U);
#line 2628
  usb_control_msg(serial->dev, tmp___4 | 2147483648U, 3, 0, 1, 0, 0, 0, 1250);
#line 2630
  return (0);
  error: ;
#line 2632
  goto ldv_25064;
  ldv_25063: 
#line 2633
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2635
  kfree((void const   *)mos7840_port->dr);
#line 2636
  kfree((void const   *)mos7840_port->ctrl_buf);
#line 2637
  usb_free_urb(mos7840_port->control_urb);
#line 2638
  kfree((void const   *)mos7840_port);
#line 2639
  serial->port[i] = 0;
#line 2632
  i = i - 1;
  ldv_25064: ;
#line 2632
  if (i >= 0) {
#line 2633
    goto ldv_25063;
  } else {

  }

#line 2641
  return (status);
}
}
#line 2649 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  struct moschip_port *mos7840_port ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int ______r___4 ;
  struct ftrace_branch_data ______f___4 ;

  {
#line 2654
  ______f.func = "mos7840_shutdown";
#line 2654
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2654
  ______f.line = 2654U;
#line 2654
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2654
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2654
  ______r = debug != 0;
#line 2654
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2654
  if (______r != 0) {
#line 2654
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" shutdown :entering..........");
  } else {

  }
#line 2656
  ______f___1.func = "mos7840_shutdown";
#line 2656
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2656
  ______f___1.line = 2656U;
#line 2656
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2656
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2656
  ______r___1 = (unsigned long )serial == (unsigned long )((struct usb_serial *)0);
#line 2656
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2656
  if (______r___1 != 0) {
#line 2657
    ______f___0.func = "mos7840_shutdown";
#line 2657
    ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2657
    ______f___0.line = 2657U;
#line 2657
    ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2657
    ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2657
    ______r___0 = debug != 0;
#line 2657
    ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2657
    if (______r___0 != 0) {
#line 2657
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Handler \n");
    } else {

    }
#line 2658
    return;
  } else {

  }
#line 2666
  i = 0;
#line 2666
  goto ldv_25089;
  ldv_25088: 
#line 2667
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2668
  ______f___2.func = "mos7840_shutdown";
#line 2668
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2668
  ______f___2.line = 2668U;
#line 2668
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2668
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2668
  ______r___2 = debug != 0;
#line 2668
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2668
  if (______r___2 != 0) {
#line 2668
    printk("<7>%s: mos7840_port %d = %p\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           i, mos7840_port);
  } else {

  }
#line 2669
  ______f___3.func = "mos7840_shutdown";
#line 2669
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2669
  ______f___3.line = 2669U;
#line 2669
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2669
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2669
  ______r___3 = (unsigned long )mos7840_port != (unsigned long )((struct moschip_port *)0);
#line 2669
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2669
  if (______r___3 != 0) {
#line 2670
    ldv_spin_lock();
#line 2671
    mos7840_port->zombie = 1;
#line 2672
    ldv_spin_unlock();
#line 2673
    usb_kill_urb(mos7840_port->control_urb);
#line 2674
    kfree((void const   *)mos7840_port->ctrl_buf);
#line 2675
    kfree((void const   *)mos7840_port->dr);
#line 2676
    kfree((void const   *)mos7840_port);
  } else {

  }
#line 2678
  mos7840_set_port_private(serial->port[i], 0);
#line 2666
  i = i + 1;
  ldv_25089: ;
#line 2666
  if ((int )serial->num_ports > i) {
#line 2667
    goto ldv_25088;
  } else {

  }
#line 2681
  ______f___4.func = "mos7840_shutdown";
#line 2681
  ______f___4.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2681
  ______f___4.line = 2681U;
#line 2681
  ______f___4.ldv_815.ldv_809.correct = 0UL;
#line 2681
  ______f___4.ldv_815.ldv_809.incorrect = 0UL;
#line 2681
  ______r___4 = debug != 0;
#line 2681
  ______f___4.ldv_815.miss_hit[______r___4] = ______f___4.ldv_815.miss_hit[______r___4] + 1UL;
#line 2681
  if (______r___4 != 0) {
#line 2681
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Thank u :: ");
  } else {

  }
#line 2682
  return;
}
}
#line 2685 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_driver io_driver  = 
#line 2685
     {"mos7840", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& moschip_id_table_combined),
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                      0, 0}, 0}, 1U, (unsigned char)0,
    (unsigned char)0};
#line 2693 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_serial_driver moschip7840_4port_device  = 
#line 2693
     {"Moschip 7840/7820 USB Serial Driver", (struct usb_device_id  const  *)(& moschip_port_id_table),
    4, {0, 0}, {"mos7840", 0, & __this_module, 0, 0, 0, 0, 0, 0, 0, 0, 0}, & io_driver,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0, 0UL}}, {0, 0}}, 0, & mos7840_startup, & mos7840_calc_num_ports,
    & mos7840_shutdown, 0, 0, 0, 0, & mos7840_open, & mos7840_close, & mos7840_write,
    & mos7840_write_room, & mos7840_ioctl, & mos7840_set_termios, & mos7840_break,
    & mos7840_chars_in_buffer, & mos7840_throttle, & mos7840_unthrottle, & mos7840_tiocmget,
    & mos7840_tiocmset, 0, 0, & mos7840_interrupt_callback, 0, & mos7840_bulk_in_callback,
    0};
#line 2728 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static int moschip7840_init(void) 
{ 
  int retval ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;

  {
#line 2732
  ______f.func = "moschip7840_init";
#line 2732
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2732
  ______f.line = 2732U;
#line 2732
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2732
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2732
  ______r = debug != 0;
#line 2732
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2732
  if (______r != 0) {
#line 2732
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_init :entering..........");
  } else {

  }
#line 2735
  retval = usb_serial_register(& moschip7840_4port_device);
#line 2737
  ______f___0.func = "moschip7840_init";
#line 2737
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2737
  ______f___0.line = 2737U;
#line 2737
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2737
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2737
  ______r___0 = retval != 0;
#line 2737
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2737
  if (______r___0 != 0) {
#line 2738
    goto failed_port_device_register;
  } else {

  }
#line 2740
  ______f___1.func = "moschip7840_init";
#line 2740
  ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2740
  ______f___1.line = 2740U;
#line 2740
  ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 2740
  ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 2740
  ______r___1 = debug != 0;
#line 2740
  ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 2740
  if (______r___1 != 0) {
#line 2740
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entring...");
  } else {

  }
#line 2741
  printk("<6>mos7840: 1.3.2:Moschip 7840/7820 USB Serial Driver\n");
#line 2745
  retval = usb_register(& io_driver);
#line 2746
  ______f___3.func = "moschip7840_init";
#line 2746
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2746
  ______f___3.line = 2746U;
#line 2746
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 2746
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 2746
  ______r___3 = retval == 0;
#line 2746
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 2746
  if (______r___3 != 0) {
#line 2747
    ______f___2.func = "moschip7840_init";
#line 2747
    ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2747
    ______f___2.line = 2747U;
#line 2747
    ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 2747
    ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 2747
    ______r___2 = debug != 0;
#line 2747
    ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 2747
    if (______r___2 != 0) {
#line 2747
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Leaving...");
    } else {

    }
#line 2748
    return (0);
  } else {

  }
#line 2750
  usb_serial_deregister(& moschip7840_4port_device);
  failed_port_device_register: ;
#line 2752
  return (retval);
}
}
#line 2759 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
static void moschip7840_exit(void) 
{ 
  int ______r ;
  struct ftrace_branch_data ______f ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;

  {
#line 2762
  ______f.func = "moschip7840_exit";
#line 2762
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2762
  ______f.line = 2762U;
#line 2762
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 2762
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 2762
  ______r = debug != 0;
#line 2762
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 2762
  if (______r != 0) {
#line 2762
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_exit :entering..........");
  } else {

  }
#line 2764
  usb_deregister(& io_driver);
#line 2766
  usb_serial_deregister(& moschip7840_4port_device);
#line 2768
  ______f___0.func = "moschip7840_exit";
#line 2768
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 2768
  ______f___0.line = 2768U;
#line 2768
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 2768
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 2768
  ______r___0 = debug != 0;
#line 2768
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 2768
  if (______r___0 != 0) {
#line 2768
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entring...");
  } else {

  }
#line 2769
  return;
}
}
#line 2797
extern void ldv_check_final_state(void) ;
#line 2800
extern void ldv_check_return_value(int  ) ;
#line 2806
extern void ldv_initialize(void) ;
#line 2809
extern void ldv_handler_precall(void) ;
#line 2812
extern int nondet_int(void) ;
#line 2815 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 2818 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
void main(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_mos7840_open_18_p2 ;
  int res_mos7840_open_18 ;
  unsigned char const   *var_mos7840_write_24_p2 ;
  int var_mos7840_write_24_p3 ;
  struct usb_serial *var_group3 ;
  struct file *var_group4 ;
  unsigned int var_mos7840_ioctl_37_p2 ;
  unsigned long var_mos7840_ioctl_37_p3 ;
  struct ktermios *var_mos7840_set_termios_32_p2 ;
  int var_mos7840_break_22_p1 ;
  unsigned int var_mos7840_tiocmset_28_p2 ;
  unsigned int var_mos7840_tiocmset_28_p3 ;
  struct urb *var_group5 ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int ______r ;
  struct ftrace_branch_data ______f ;
  int tmp ;
  int tmp___0 ;
  int ______r___0 ;
  struct ftrace_branch_data ______f___0 ;
  int ______r___1 ;
  struct ftrace_branch_data ______f___1 ;
  int ______r___2 ;
  struct ftrace_branch_data ______f___2 ;
  int ______r___3 ;
  struct ftrace_branch_data ______f___3 ;
  int tmp___1 ;

  {
#line 4721
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 4610
  LDV_IN_INTERRUPT = 1;
#line 4619
  ldv_initialize();
#line 4718
  ldv_handler_precall();
#line 4719
  ______f.func = "main";
#line 4719
  ______f.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 4719
  ______f.line = 4719U;
#line 4719
  ______f.ldv_815.ldv_809.correct = 0UL;
#line 4719
  ______f.ldv_815.ldv_809.incorrect = 0UL;
#line 4719
  tmp = moschip7840_init();
#line 4719
  ______r = tmp != 0;
#line 4719
  ______f.ldv_815.miss_hit[______r] = ______f.ldv_815.miss_hit[______r] + 1UL;
#line 4719
  if (______r != 0) {
#line 4720
    goto ldv_final;
  } else {

  }
#line 4725
  goto ldv_25218;
  ldv_25217: 
#line 4729
  tmp___0 = nondet_int();
#line 4729
  switch (tmp___0) {
  case 0: 
#line 4734
  ______f___0.func = "main";
#line 4734
  ______f___0.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 4734
  ______f___0.line = 4734U;
#line 4734
  ______f___0.ldv_815.ldv_809.correct = 0UL;
#line 4734
  ______f___0.ldv_815.ldv_809.incorrect = 0UL;
#line 4734
  ______r___0 = ldv_s_moschip7840_4port_device_usb_serial_driver == 0;
#line 4734
  ______f___0.ldv_815.miss_hit[______r___0] = ______f___0.ldv_815.miss_hit[______r___0] + 1UL;
#line 4734
  if (______r___0 != 0) {
#line 4839
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 4845
  goto ldv_25188;
  case 1: 
#line 4849
  ______f___2.func = "main";
#line 4849
  ______f___2.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 4849
  ______f___2.line = 4849U;
#line 4849
  ______f___2.ldv_815.ldv_809.correct = 0UL;
#line 4849
  ______f___2.ldv_815.ldv_809.incorrect = 0UL;
#line 4849
  ______r___2 = ldv_s_moschip7840_4port_device_usb_serial_driver == 1;
#line 4849
  ______f___2.ldv_815.miss_hit[______r___2] = ______f___2.ldv_815.miss_hit[______r___2] + 1UL;
#line 4849
  if (______r___2 != 0) {
#line 4937
    ldv_handler_precall();
#line 4938
    res_mos7840_open_18 = mos7840_open(var_group1, var_group2, var_mos7840_open_18_p2);
#line 4939
    ldv_check_return_value(res_mos7840_open_18);
#line 4940
    ______f___1.func = "main";
#line 4940
    ______f___1.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 4940
    ______f___1.line = 4940U;
#line 4940
    ______f___1.ldv_815.ldv_809.correct = 0UL;
#line 4940
    ______f___1.ldv_815.ldv_809.incorrect = 0UL;
#line 4940
    ______r___1 = res_mos7840_open_18 != 0;
#line 4940
    ______f___1.ldv_815.miss_hit[______r___1] = ______f___1.ldv_815.miss_hit[______r___1] + 1UL;
#line 4940
    if (______r___1 != 0) {
#line 4941
      goto ldv_module_exit;
    } else {

    }
#line 4954
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 4960
  goto ldv_25188;
  case 2: 
#line 4964
  ______f___3.func = "main";
#line 4964
  ______f___3.file = "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared";
#line 4964
  ______f___3.line = 4964U;
#line 4964
  ______f___3.ldv_815.ldv_809.correct = 0UL;
#line 4964
  ______f___3.ldv_815.ldv_809.incorrect = 0UL;
#line 4964
  ______r___3 = ldv_s_moschip7840_4port_device_usb_serial_driver == 2;
#line 4964
  ______f___3.ldv_815.miss_hit[______r___3] = ______f___3.ldv_815.miss_hit[______r___3] + 1UL;
#line 4964
  if (______r___3 != 0) {
#line 5052
    ldv_handler_precall();
#line 5053
    mos7840_close(var_group2);
#line 5066
    ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
  } else {

  }
#line 5072
  goto ldv_25188;
  case 3: 
#line 5164
  ldv_handler_precall();
#line 5165
  mos7840_write(var_group1, var_group2, var_mos7840_write_24_p2, var_mos7840_write_24_p3);
#line 5182
  goto ldv_25188;
  case 4: 
#line 5274
  ldv_handler_precall();
#line 5275
  mos7840_write_room(var_group1);
#line 5294
  goto ldv_25188;
  case 5: 
#line 5386
  ldv_handler_precall();
#line 5387
  mos7840_chars_in_buffer(var_group1);
#line 5406
  goto ldv_25188;
  case 6: 
#line 5500
  ldv_handler_precall();
#line 5501
  mos7840_throttle(var_group1);
#line 5518
  goto ldv_25188;
  case 7: 
#line 5612
  ldv_handler_precall();
#line 5613
  mos7840_unthrottle(var_group1);
#line 5630
  goto ldv_25188;
  case 8: 
#line 5730
  ldv_handler_precall();
#line 5731
  mos7840_calc_num_ports(var_group3);
#line 5742
  goto ldv_25188;
  case 9: 
#line 5842
  ldv_handler_precall();
#line 5843
  mos7840_ioctl(var_group1, var_group4, var_mos7840_ioctl_37_p2, var_mos7840_ioctl_37_p3);
#line 5854
  goto ldv_25188;
  case 10: 
#line 5954
  ldv_handler_precall();
#line 5955
  mos7840_set_termios(var_group1, var_group2, var_mos7840_set_termios_32_p2);
#line 5966
  goto ldv_25188;
  case 11: 
#line 6058
  ldv_handler_precall();
#line 6059
  mos7840_break(var_group1, var_mos7840_break_22_p1);
#line 6078
  goto ldv_25188;
  case 12: 
#line 6172
  ldv_handler_precall();
#line 6173
  mos7840_tiocmget(var_group1, var_group4);
#line 6190
  goto ldv_25188;
  case 13: 
#line 6284
  ldv_handler_precall();
#line 6285
  mos7840_tiocmset(var_group1, var_group4, var_mos7840_tiocmset_28_p2, var_mos7840_tiocmset_28_p3);
#line 6302
  goto ldv_25188;
  case 14: 
#line 6402
  ldv_handler_precall();
#line 6403
  mos7840_startup(var_group3);
#line 6414
  goto ldv_25188;
  case 15: 
#line 6514
  ldv_handler_precall();
#line 6515
  mos7840_shutdown(var_group3);
#line 6526
  goto ldv_25188;
  case 16: 
#line 6616
  ldv_handler_precall();
#line 6617
  mos7840_bulk_in_callback(var_group5);
#line 6638
  goto ldv_25188;
  case 17: 
#line 6728
  ldv_handler_precall();
#line 6729
  mos7840_interrupt_callback(var_group5);
#line 6750
  goto ldv_25188;
  default: ;
#line 6751
  goto ldv_25188;
  }
  ldv_25188: ;
  ldv_25218: 
#line 4725
  tmp___1 = nondet_int();
#line 4725
  if (tmp___1 != 0 || ldv_s_moschip7840_4port_device_usb_serial_driver != 0) {
#line 4727
    goto ldv_25217;
  } else {

  }

  ldv_module_exit: 
#line 6856
  ldv_handler_precall();
#line 6857
  moschip7840_exit();
  ldv_final: 
#line 6860
  ldv_check_final_state();
#line 6863
  return;
}
}
#line 6878 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
unsigned long ldv___get_free_pages_2(gfp_t ldv_func_arg1 , unsigned int ldv_func_arg2 ) 
{ 
  unsigned long tmp ;

  {
#line 6884
  ldv_check_alloc_flags(ldv_func_arg1);
#line 6886
  tmp = __get_free_pages(ldv_func_arg1, ldv_func_arg2);
#line 6886
  return (tmp);
}
}
#line 6889 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 6895
  ldv_check_alloc_flags(flags);
#line 6897
  ldv_kmalloc_3(size, flags);
#line 6898
  return ((void *)0);
}
}
#line 6933 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
void *ldv_kmem_cache_alloc_7(struct kmem_cache *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 


  {
#line 6939
  ldv_check_alloc_flags(ldv_func_arg2);
#line 6941
  kmem_cache_alloc(ldv_func_arg1, ldv_func_arg2);
#line 6942
  return ((void *)0);
}
}
#line 6944 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 


  {
#line 6950
  ldv_check_alloc_flags(flags);
#line 6951
  return ((void *)0);
}
}
#line 6963 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_10(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 6969
  ldv_check_alloc_flags(ldv_func_arg2);
#line 6971
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 6971
  return (tmp);
}
}
#line 6974 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_11(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 6980
  ldv_check_alloc_flags(ldv_func_arg2);
#line 6982
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 6982
  return (tmp);
}
}
#line 6985 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_12(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 6991
  ldv_check_alloc_flags(ldv_func_arg2);
#line 6993
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 6993
  return (tmp);
}
}
#line 6996 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_13(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7002
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7004
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7004
  return (tmp);
}
}
#line 7007 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
struct urb *ldv_usb_alloc_urb_14(int ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct urb *tmp ;

  {
#line 7013
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7015
  tmp = usb_alloc_urb(ldv_func_arg1, ldv_func_arg2);
#line 7015
  return (tmp);
}
}
#line 7018 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_15(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7024
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7026
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7026
  return (tmp);
}
}
#line 7029 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_16(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7035
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7037
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7037
  return (tmp);
}
}
#line 7040 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_17(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7046
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7048
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7048
  return (tmp);
}
}
#line 7051 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_18(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7057
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7059
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7059
  return (tmp);
}
}
#line 7062 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
int ldv_usb_submit_urb_19(struct urb *ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  int tmp ;

  {
#line 7068
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7070
  tmp = usb_submit_urb(ldv_func_arg1, ldv_func_arg2);
#line 7070
  return (tmp);
}
}
#line 7073 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/43_1a/drivers/usb/serial/mos7840.c.prepared"
struct urb *ldv_usb_alloc_urb_20(int ldv_func_arg1 , gfp_t ldv_func_arg2 ) 
{ 
  struct urb *tmp ;

  {
#line 7079
  ldv_check_alloc_flags(ldv_func_arg2);
#line 7081
  tmp = usb_alloc_urb(ldv_func_arg1, ldv_func_arg2);
#line 7081
  return (tmp);
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 21 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin  =    LDV_SPIN_UNLOCKED;
#line 25 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_flags(gfp_t flags ) 
{ 


  {
#line 28
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 28
    ldv_error();
  }
#line 29
  return;
}
}
#line 31
extern struct page *ldv_some_page(void) ;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
struct page *ldv_check_alloc_flags_and_return_some_page(gfp_t flags ) 
{ 
  struct page *tmp ;

  {
#line 37
  if (ldv_spin == LDV_SPIN_UNLOCKED || flags == 32U) {

  } else {
#line 37
    ldv_error();
  }
#line 39
  tmp = ldv_some_page();
#line 39
  return (tmp);
}
}
#line 43 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_check_alloc_nonatomic(void) 
{ 


  {
#line 46
  if (ldv_spin == LDV_SPIN_UNLOCKED) {

  } else {
#line 46
    ldv_error();
  }
#line 47
  return;
}
}
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_lock(void) 
{ 


  {
#line 53
  ldv_spin = LDV_SPIN_LOCKED;
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
void ldv_spin_unlock(void) 
{ 


  {
#line 60
  ldv_spin = LDV_SPIN_UNLOCKED;
#line 61
  return;
}
}
#line 71
int ldv_spin_trylock(void) ;
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
static struct ftrace_branch_data  __attribute__((__aligned__(4))) ______f___680  __attribute__((__section__("_ftrace_branch")))  =    {"ldv_spin_trylock",
    "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c",
    71, {{0UL, 0UL}}};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--43_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/43_1a/common-model/ldv_common_model.c"
int ldv_spin_trylock(void) 
{ 
  int is_lock ;
  int ______r ;

  {
#line 69
  is_lock = ldv_undef_int();
#line 71
  ______r = ! (! is_lock);
#line 71
  ______f___680.ldv_815.miss_hit[______r] = ______f___680.ldv_815.miss_hit[______r] + 1UL;
#line 71
  if (______r) {
#line 74
    return (0);
  } else {
#line 79
    ldv_spin = LDV_SPIN_LOCKED;
#line 81
    return (1);
  }
}
}
