/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 13 "include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 23 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 58 "include/asm/alternative.h"
struct module;
#line 27 "include/linux/ratelimit.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 101 "include/linux/kernel.h"
struct completion;
#line 102
struct pt_regs;
#line 190
struct pid;
#line 469
struct timespec;
#line 470
struct compat_timespec;
#line 471 "include/linux/kernel.h"
struct __anonstruct_ldv_1514_4 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 471 "include/linux/kernel.h"
struct __anonstruct_futex_5 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 471 "include/linux/kernel.h"
struct __anonstruct_nanosleep_6 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 471 "include/linux/kernel.h"
union __anonunion_ldv_1528_3 {
   struct __anonstruct_ldv_1514_4 ldv_1514 ;
   struct __anonstruct_futex_5 futex ;
   struct __anonstruct_nanosleep_6 nanosleep ;
};
#line 471 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_1528_3 ldv_1528 ;
};
#line 80 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 81 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 84
struct page;
#line 56 "include/asm/page.h"
struct __anonstruct_pgd_t_8 {
   pgdval_t pgd ;
};
#line 56 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_8 pgd_t;
#line 57 "include/asm/page.h"
struct __anonstruct_pgprot_t_9 {
   pgprotval_t pgprot ;
};
#line 57 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_9 pgprot_t;
#line 154 "include/asm/page.h"
struct __anonstruct_ldv_1641_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 154 "include/asm/page.h"
struct __anonstruct_ldv_1656_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 154 "include/asm/page.h"
union __anonunion_ldv_1657_12 {
   struct __anonstruct_ldv_1641_13 ldv_1641 ;
   struct __anonstruct_ldv_1656_14 ldv_1656 ;
};
#line 154 "include/asm/page.h"
struct desc_struct {
   union __anonunion_ldv_1657_12 ldv_1657 ;
};
#line 141 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_15 {
   unsigned long bits[1U] ;
};
#line 141 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_15 cpumask_t;
#line 522
struct thread_struct;
#line 524
struct mm_struct;
#line 324 "include/asm/paravirt.h"
struct raw_spinlock;
#line 21 "include/asm-generic/page.h"
struct task_struct;
#line 22
struct exec_domain;
#line 50 "include/asm/ds.h"
typedef void (*ds_ovfl_callback_t)(struct task_struct * );
#line 203 "include/asm/ds.h"
struct ds_context {
   unsigned char *ds ;
   struct task_struct *owner[2U] ;
   ds_ovfl_callback_t callback[2U] ;
   void *buffer[2U] ;
   unsigned int pages[2U] ;
   unsigned long count ;
   struct ds_context **this ;
   struct task_struct *task ;
};
#line 212 "include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 203 "include/asm/vm86.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 282 "include/asm/sigcontext.h"
struct x8664_pda {
   struct task_struct *pcurrent ;
   unsigned long data_offset ;
   unsigned long kernelstack ;
   unsigned long oldrsp ;
   int irqcount ;
   unsigned int cpunumber ;
   char *irqstackptr ;
   short nodenumber ;
   short in_bootmem ;
   unsigned int __softirq_pending ;
   unsigned int __nmi_count ;
   short mmu_state ;
   short isidle ;
   struct mm_struct *active_mm ;
   unsigned int apic_timer_irqs ;
   unsigned int irq0_irqs ;
   unsigned int irq_resched_count ;
   unsigned int irq_call_count ;
   unsigned int irq_tlb_count ;
   unsigned int irq_thermal_count ;
   unsigned int irq_threshold_count ;
   unsigned int irq_spurious_count ;
};
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 282 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "include/asm/processor.h"
struct __anonstruct_ldv_4446_20 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "include/asm/processor.h"
struct __anonstruct_ldv_4452_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "include/asm/processor.h"
union __anonunion_ldv_4453_19 {
   struct __anonstruct_ldv_4446_20 ldv_4446 ;
   struct __anonstruct_ldv_4452_21 ldv_4452 ;
};
#line 300 "include/asm/processor.h"
union __anonunion_ldv_4462_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4453_19 ldv_4453 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4462_22 ldv_4462 ;
};
#line 334 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 355 "include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 361 "include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
};
#line 366 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 382
struct kmem_cache;
#line 386 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 591 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_23 {
   unsigned long seg ;
};
#line 591 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_23 mm_segment_t;
#line 935 "include/asm/processor.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   unsigned long flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 9 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_24 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_24 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 48 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 31 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 156 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 192 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_25 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_25 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_26 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_26 rwlock_t;
#line 21 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_27 {
   int counter ;
};
#line 21 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_27 atomic_t;
#line 198 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_28 {
   long counter ;
};
#line 198 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_28 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_30 {
   unsigned long bits[1U] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_30 nodemask_t;
#line 550 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 150
struct rw_semaphore;
#line 152 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 660 "include/linux/mmzone.h"
struct file;
#line 32 "include/linux/pm.h"
struct device;
#line 33 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 41 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 42 "include/linux/pm.h"
struct pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
};
#line 155 "include/linux/pm.h"
struct pm_ext_ops {
   struct pm_ops base ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
};
#line 212
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 222 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 16 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_77 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_77 mm_context_t;
#line 992 "include/linux/mmzone.h"
struct vm_area_struct;
#line 104 "include/linux/math64.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 300 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 181 "include/linux/timer.h"
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 189
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 240
struct kobject;
#line 241 "include/linux/workqueue.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 74 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 123 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48
struct sysfs_dirent;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
};
#line 103 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 109 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 116 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 133 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 229 "include/linux/kobject.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   unsigned long min_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 86 "include/linux/percpu.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 368 "include/linux/rculist.h"
struct nameidata;
#line 369
struct path;
#line 370
struct vfsmount;
#line 371 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_83 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_83 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 367 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 112 "include/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 191
struct prio_tree_node;
#line 191 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 79 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 97 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 519 "include/linux/capability.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 36 "include/linux/fiemap.h"
struct export_operations;
#line 38
struct iovec;
#line 39
struct kiocb;
#line 40
struct pipe_inode_info;
#line 41
struct poll_table_struct;
#line 42
struct kstatfs;
#line 322 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 372 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 111 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 144 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 176 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 177 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 180 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 201
struct quota_format_type;
#line 202 "include/linux/quota.h"
union __anonunion_u_85 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 202 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_85 u ;
};
#line 247 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 270 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 286 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 302 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 317 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 324 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 354
struct address_space;
#line 355
struct writeback_control;
#line 468 "include/linux/fs.h"
union __anonunion_arg_87 {
   char *buf ;
   void *data ;
};
#line 468 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_86 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_87 arg ;
   int error ;
};
#line 468 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_86 read_descriptor_t;
#line 471 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 526
struct backing_dev_info;
#line 527 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 548
struct hd_struct;
#line 548
struct gendisk;
#line 548 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 612
struct inode_operations;
#line 612
struct file_operations;
#line 612
struct file_lock;
#line 612
struct cdev;
#line 612 "include/linux/fs.h"
union __anonunion_ldv_10205_88 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 612
struct dnotify_struct;
#line 612 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_10205_88 ldv_10205 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 778 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 786 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 809 "include/linux/fs.h"
union __anonunion_f_u_89 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 809 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_89 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 932
struct files_struct;
#line 932 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 933 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 938 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_91 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_90 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_91 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_90 fl_u ;
};
#line 1031 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1064
struct file_system_type;
#line 1064
struct super_operations;
#line 1064
struct xattr_handler;
#line 1064
struct mtd_info;
#line 1064 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1185 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1242 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1283 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1311
struct seq_file;
#line 1325 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1508 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1875
struct bio;
#line 6 "include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "include/asm/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 23 "include/asm/termios.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "include/asm/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "include/linux/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36 "include/linux/cdev.h"
struct tty_operations {
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*read_proc)(char * , char ** , off_t  , int  , int * , void * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
};
#line 237 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 237 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   int refcount ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 281 "include/linux/tty_driver.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 144 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 149 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 68 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 77
struct signal_struct;
#line 78 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 196 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[4U] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[64U] ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 33 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 192 "include/linux/moduleparam.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void * , void * , char const   * , va_list * );
#line 33 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 39 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  * , void *  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
};
#line 12 "include/asm/local.h"
struct __anonstruct_local_t_97 {
   atomic_long_t a ;
};
#line 12 "include/asm/local.h"
typedef struct __anonstruct_local_t_97 local_t;
#line 155 "include/asm/local.h"
struct mod_arch_specific {

};
#line 158 "include/asm/local.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230
struct module_param_attrs;
#line 230
struct module_sect_attrs;
#line 230
struct module_notes_attrs;
#line 230 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref ref[8U] ;
};
#line 456
struct device_driver;
#line 577 "include/linux/module.h"
struct async_icount {
   __u32 cts ;
   __u32 dsr ;
   __u32 rng ;
   __u32 dcd ;
   __u32 tx ;
   __u32 rx ;
   __u32 frame ;
   __u32 parity ;
   __u32 overrun ;
   __u32 brk ;
   __u32 buf_overrun ;
};
#line 26 "include/linux/serial.h"
struct serial_struct {
   int type ;
   int line ;
   unsigned int port ;
   int irq ;
   int flags ;
   int xmit_fifo_size ;
   int custom_divisor ;
   int baud_base ;
   unsigned short close_delay ;
   char io_type ;
   char reserved_char[1U] ;
   int hub6 ;
   unsigned short closing_wait ;
   unsigned short closing_wait2 ;
   unsigned char *iomem_base ;
   unsigned short iomem_reg_shift ;
   unsigned int port_high ;
   unsigned long iomap_base ;
};
#line 163 "include/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9U] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 38 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 389 "include/linux/mod_devicetable.h"
struct usb_ctrlrequest {
   __u8 bRequestType ;
   __u8 bRequest ;
   __le16 wValue ;
   __le16 wIndex ;
   __le16 wLength ;
};
#line 206 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
};
#line 228 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
};
#line 294 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
};
#line 314 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
};
#line 395 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
};
#line 562
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 570
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 47 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 27 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_14055_100 {
   u16 inuse ;
   u16 objects ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14056_99 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14055_100 ldv_14055 ;
};
#line 28 "include/linux/mm_types.h"
struct __anonstruct_ldv_14061_102 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14065_101 {
   struct __anonstruct_ldv_14061_102 ldv_14061 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 28 "include/linux/mm_types.h"
union __anonunion_ldv_14069_103 {
   unsigned long index ;
   void *freelist ;
};
#line 28 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_14056_99 ldv_14056 ;
   union __anonunion_ldv_14065_101 ldv_14065 ;
   union __anonunion_ldv_14069_103 ldv_14069 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 100 "include/linux/mm_types.h"
struct __anonstruct_vm_set_105 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 100 "include/linux/mm_types.h"
union __anonunion_shared_104 {
   struct __anonstruct_vm_set_105 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 100
struct anon_vma;
#line 100
struct vm_operations_struct;
#line 100
struct mempolicy;
#line 100 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_104 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 163 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 169 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 175
struct kioctx;
#line 175
struct mmu_notifier_mm;
#line 175 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[42U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_106 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_106 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 171 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 183 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_108 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_109 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_110 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_111 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_112 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_113 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_107 {
   int _pad[28U] ;
   struct __anonstruct__kill_108 _kill ;
   struct __anonstruct__timer_109 _timer ;
   struct __anonstruct__rt_110 _rt ;
   struct __anonstruct__sigchld_111 _sigchld ;
   struct __anonstruct__sigfault_112 _sigfault ;
   struct __anonstruct__sigpoll_113 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_107 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 293
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 374 "include/linux/signal.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_116 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_116 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 74
struct hrtimer_clock_base;
#line 75
struct hrtimer_cpu_base;
#line 81
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 86
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_PERCPU = 3,
    HRTIMER_CB_IRQSAFE_UNLOCKED = 4
} ;
#line 94 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 148 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 176 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 402 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 31 "include/linux/latencytop.h"
struct futex_pi_state;
#line 32
struct robust_list_head;
#line 138 "include/linux/sched.h"
struct cfs_rq;
#line 139
struct task_group;
#line 334
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_117 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_117 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 393 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 419 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 427 "include/linux/sched.h"
union __anonunion_ldv_15273_118 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 427 "include/linux/sched.h"
union __anonunion_ldv_15278_119 {
   pid_t session ;
   pid_t __session ;
};
#line 427
struct taskstats;
#line 427
struct tty_audit_buf;
#line 427 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_15273_118 ldv_15273 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_15278_119 ldv_15278 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 577 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 619
struct reclaim_state;
#line 620 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 643 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 684
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 691 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 751
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 765 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
};
#line 835
struct io_context;
#line 836 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 887
struct audit_context;
#line 889
struct rq;
#line 890 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   int (*select_task_rq)(struct task_struct * , int  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , cpumask_t const   * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 941 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 946 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1012
struct rt_rq;
#line 1012 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1028
struct linux_binfmt;
#line 1028
struct css_set;
#line 1028
struct compat_robust_list_head;
#line 1028 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   struct user_struct *user ;
   unsigned int securebits ;
   unsigned char jit_keyring ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
};
#line 171 "include/linux/ioport.h"
struct klist_node;
#line 172 "include/linux/ioport.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 38 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 69
struct dma_mapping_ops;
#line 69 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_mapping_ops *dma_ops ;
   void *iommu ;
};
#line 14 "include/asm/device.h"
struct driver_private;
#line 15
struct class;
#line 16
struct class_private;
#line 17
struct bus_type;
#line 18
struct bus_type_private;
#line 19 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   struct pm_ext_ops *pm ;
   struct bus_type_private *p ;
};
#line 118 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group **groups ;
   struct pm_ops *pm ;
   struct driver_private *p ;
};
#line 147 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 176
struct class_attribute;
#line 176 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
   struct class_private *p ;
};
#line 201
struct device_type;
#line 232 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 264 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct pm_ops *pm ;
};
#line 293 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 354 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 363
struct dma_coherent_mem;
#line 363 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   char const   *init_name ;
   struct device_type *type ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 535
struct usb_device;
#line 536
struct usb_driver;
#line 537
struct wusb_dev;
#line 538
struct ep_device;
#line 539 "include/linux/device.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 71 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 85
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 92 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned char is_active : 1 ;
   unsigned char sysfs_files_created : 1 ;
   unsigned char needs_remote_wakeup : 1 ;
   unsigned char needs_altsetting0 : 1 ;
   unsigned char needs_binding : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 190 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0U] ;
};
#line 217 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[16U] ;
   struct usb_interface *interface[32U] ;
   struct usb_interface_cache *intf_cache[32U] ;
   unsigned char *extra ;
   int extralen ;
};
#line 283 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[2U] ;
};
#line 295
struct mon_bus;
#line 295 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char const   *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned char is_b_host : 1 ;
   unsigned char b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 334
struct usb_tt;
#line 335 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16U] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2U] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16U] ;
   struct usb_host_endpoint *ep_out[16U] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned char can_submit : 1 ;
   unsigned char discon_suspended : 1 ;
   unsigned char persist_enabled : 1 ;
   unsigned char have_langid : 1 ;
   unsigned char authorized : 1 ;
   unsigned char authenticated : 1 ;
   unsigned char wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31U] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned char auto_pm : 1 ;
   unsigned char do_remote_wakeup : 1 ;
   unsigned char reset_resume : 1 ;
   unsigned char autosuspend_disabled : 1 ;
   unsigned char autoresume_disabled : 1 ;
   unsigned char skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 800 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 930 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 942 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface * , struct usb_device_id  const  * ) ;
   void (*disconnect)(struct usb_interface * ) ;
   int (*ioctl)(struct usb_interface * , unsigned int  , void * ) ;
   int (*suspend)(struct usb_interface * , pm_message_t  ) ;
   int (*resume)(struct usb_interface * ) ;
   int (*reset_resume)(struct usb_interface * ) ;
   int (*pre_reset)(struct usb_interface * ) ;
   int (*post_reset)(struct usb_interface * ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned char no_dynamic_id : 1 ;
   unsigned char supports_autosuspend : 1 ;
   unsigned char soft_unbind : 1 ;
};
#line 1098 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1131
struct urb;
#line 1132 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1148 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0U] ;
};
#line 1706
struct usb_serial;
#line 1706 "include/linux/usb.h"
struct usb_serial_port {
   struct usb_serial *serial ;
   struct tty_port port ;
   spinlock_t lock ;
   struct mutex mutex ;
   unsigned char number ;
   unsigned char *interrupt_in_buffer ;
   struct urb *interrupt_in_urb ;
   __u8 interrupt_in_endpointAddress ;
   unsigned char *interrupt_out_buffer ;
   int interrupt_out_size ;
   struct urb *interrupt_out_urb ;
   __u8 interrupt_out_endpointAddress ;
   unsigned char *bulk_in_buffer ;
   int bulk_in_size ;
   struct urb *read_urb ;
   __u8 bulk_in_endpointAddress ;
   unsigned char *bulk_out_buffer ;
   int bulk_out_size ;
   struct urb *write_urb ;
   int write_urb_busy ;
   __u8 bulk_out_endpointAddress ;
   wait_queue_head_t write_wait ;
   struct work_struct work ;
   char throttled ;
   char throttle_req ;
   char console ;
   struct device dev ;
};
#line 111 "include/linux/usb/serial.h"
struct usb_serial_driver;
#line 111 "include/linux/usb/serial.h"
struct usb_serial {
   struct usb_device *dev ;
   struct usb_serial_driver *type ;
   struct usb_interface *interface ;
   unsigned char disconnected ;
   unsigned char minor ;
   unsigned char num_ports ;
   unsigned char num_port_pointers ;
   char num_interrupt_in ;
   char num_interrupt_out ;
   char num_bulk_in ;
   char num_bulk_out ;
   struct usb_serial_port *port[8U] ;
   struct kref kref ;
   struct mutex disc_mutex ;
   void *private ;
};
#line 158 "include/linux/usb/serial.h"
struct usb_serial_driver {
   char const   *description ;
   struct usb_device_id  const  *id_table ;
   char num_ports ;
   struct list_head driver_list ;
   struct device_driver driver ;
   struct usb_driver *usb_driver ;
   struct usb_dynids dynids ;
   int (*probe)(struct usb_serial * , struct usb_device_id  const  * ) ;
   int (*attach)(struct usb_serial * ) ;
   int (*calc_num_ports)(struct usb_serial * ) ;
   void (*shutdown)(struct usb_serial * ) ;
   int (*port_probe)(struct usb_serial_port * ) ;
   int (*port_remove)(struct usb_serial_port * ) ;
   int (*suspend)(struct usb_serial * , pm_message_t  ) ;
   int (*resume)(struct usb_serial * ) ;
   int (*open)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   void (*close)(struct tty_struct * , struct usb_serial_port * , struct file * ) ;
   int (*write)(struct tty_struct * , struct usb_serial_port * , unsigned char const   * ,
                int  ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct usb_serial_port * , struct ktermios * ) ;
   void (*break_ctl)(struct tty_struct * , int  ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   int (*tiocmget)(struct tty_struct * , struct file * ) ;
   int (*tiocmset)(struct tty_struct * , struct file * , unsigned int  , unsigned int  ) ;
   void (*read_int_callback)(struct urb * ) ;
   void (*write_int_callback)(struct urb * ) ;
   void (*read_bulk_callback)(struct urb * ) ;
   void (*write_bulk_callback)(struct urb * ) ;
};
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
struct moschip_port {
   int port_num ;
   struct urb *write_urb ;
   struct urb *read_urb ;
   struct urb *int_urb ;
   __u8 shadowLCR ;
   __u8 shadowMCR ;
   char open ;
   char open_ports ;
   char zombie ;
   wait_queue_head_t wait_chase ;
   wait_queue_head_t delta_msr_wait ;
   int delta_msr_cond ;
   struct async_icount icount ;
   struct usb_serial_port *port ;
   __u8 SpRegOffset ;
   __u8 ControlRegOffset ;
   __u8 DcrRegOffset ;
   struct urb *control_urb ;
   struct usb_ctrlrequest *dr ;
   char *ctrl_buf ;
   int MsrLsr ;
   spinlock_t pool_lock ;
   struct urb *write_urb_pool[16U] ;
   char busy[16U] ;
};
#line 6887 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
typedef int ldv_func_ret_type___1;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 301 "include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 305
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 310
  return (oldbit);
}
}
#line 196 "include/linux/kernel.h"
extern int printk(char const   *  , ...) ;
#line 47 "include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 51 "include/asm/pda.h"
extern void __bad_pda_field(void) ;
#line 57
extern struct x8664_pda _proxy_pda ;
#line 23 "include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 25
  switch (8UL) {
  case 2UL: 
#line 25
  __asm__  ("movw %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4049;
  case 4UL: 
#line 25
  __asm__  ("movl %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4049;
  case 8UL: 
#line 25
  __asm__  ("movq %%gs:%c1,%0": "=r" (ret__): "i" (0UL), "m" (_proxy_pda.pcurrent));
#line 25
  goto ldv_4049;
  default: 
#line 25
  __bad_pda_field();
  }
  ldv_4049: ;
#line 25
  return (ret__);
}
}
#line 76 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 78
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 78
  return (tmp);
}
}
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 16
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) ;
#line 20
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) ;
#line 24
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) ;
#line 28
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) ;
#line 32
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
#line 36
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) ;
#line 40
void ldv___ldv_spin_lock_19(spinlock_t *ldv_func_arg1 ) ;
#line 44
void ldv___ldv_spin_lock_21(spinlock_t *ldv_func_arg1 ) ;
#line 48
void ldv___ldv_spin_lock_24(spinlock_t *ldv_func_arg1 ) ;
#line 52
void ldv___ldv_spin_lock_26(spinlock_t *ldv_func_arg1 ) ;
#line 56
void ldv___ldv_spin_lock_28(spinlock_t *ldv_func_arg1 ) ;
#line 60
void ldv___ldv_spin_lock_30(spinlock_t *ldv_func_arg1 ) ;
#line 64
void ldv___ldv_spin_lock_32(spinlock_t *ldv_func_arg1 ) ;
#line 66
extern void __ldv_spin_unlock(spinlock_t * ) ;
#line 69
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) ;
#line 73
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) ;
#line 77
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) ;
#line 81
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) ;
#line 85
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) ;
#line 89
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) ;
#line 93
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) ;
#line 97
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) ;
#line 101
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) ;
#line 105
void ldv___ldv_spin_unlock_20(spinlock_t *ldv_func_arg1 ) ;
#line 109
void ldv___ldv_spin_unlock_22(spinlock_t *ldv_func_arg1 ) ;
#line 113
void ldv___ldv_spin_unlock_23(spinlock_t *ldv_func_arg1 ) ;
#line 117
void ldv___ldv_spin_unlock_25(spinlock_t *ldv_func_arg1 ) ;
#line 121
void ldv___ldv_spin_unlock_27(spinlock_t *ldv_func_arg1 ) ;
#line 125
void ldv___ldv_spin_unlock_29(spinlock_t *ldv_func_arg1 ) ;
#line 129
void ldv___ldv_spin_unlock_31(spinlock_t *ldv_func_arg1 ) ;
#line 133
void ldv___ldv_spin_unlock_33(spinlock_t *ldv_func_arg1 ) ;
#line 135
extern int __ldv_spin_trylock(spinlock_t * ) ;
#line 138
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) ;
#line 144
void ldv_spin_lock_alloc_lock_of_task_struct(void) ;
#line 145
void ldv_spin_unlock_alloc_lock_of_task_struct(void) ;
#line 152
void ldv_spin_lock_d_lock_of_dentry(void) ;
#line 153
void ldv_spin_unlock_d_lock_of_dentry(void) ;
#line 160
void ldv_spin_lock_dcache_lock(void) ;
#line 161
void ldv_spin_unlock_dcache_lock(void) ;
#line 168
void ldv_spin_lock_i_lock_of_inode(void) ;
#line 169
void ldv_spin_unlock_i_lock_of_inode(void) ;
#line 176
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) ;
#line 177
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) ;
#line 178
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) ;
#line 184
void ldv_spin_lock_pool_lock_of_moschip_port(void) ;
#line 185
void ldv_spin_unlock_pool_lock_of_moschip_port(void) ;
#line 192
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 193
void ldv_spin_unlock_siglock_of_sighand_struct(void) ;
#line 80 "include/linux/wait.h"
extern void init_waitqueue_head(wait_queue_head_t * ) ;
#line 144
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 434
extern long interruptible_sleep_on_timeout(wait_queue_head_t * , long  ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 443
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 101 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 205 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 212 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 227
  tmp___2 = __kmalloc(size, flags);
#line 227
  return (tmp___2);
}
}
#line 275 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 277
  tmp = kmalloc(size, flags | 32768U);
#line 277
  return (tmp);
}
}
#line 22 "include/asm/uaccess_64.h"
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 24
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 332 "include/linux/tty.h"
extern void tty_kref_put(struct tty_struct * ) ;
#line 370
extern void tty_flip_buffer_push(struct tty_struct * ) ;
#line 374
extern speed_t tty_get_baud_rate(struct tty_struct * ) ;
#line 389
extern void tty_wakeup(struct tty_struct * ) ;
#line 409
extern struct tty_struct *tty_port_tty_get(struct tty_port * ) ;
#line 4 "include/linux/tty_flip.h"
extern int tty_buffer_request_room(struct tty_struct * , size_t  ) ;
#line 5
extern int tty_insert_flip_string(struct tty_struct * , unsigned char const   * ,
                                  size_t  ) ;
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 333 "include/linux/sched.h"
extern void schedule(void) ;
#line 2000 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2002
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2002
  return (tmp);
}
}
#line 2020 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2022
  tmp = test_tsk_thread_flag(p, 2);
#line 2022
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2022
  return ((int )tmp___0);
}
}
#line 422 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 


  {
#line 425
  return ((char const   *)(& dev->bus_id));
}
}
#line 450 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev ) 
{ 


  {
#line 452
  return (dev->driver_data);
}
}
#line 455 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 457
  dev->driver_data = data;
#line 458
  return;
}
}
#line 534
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 1080 "include/linux/usb.h"
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1082 "include/linux/usb.h"
__inline static int usb_register(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1084
  tmp = usb_register_driver(driver, & __this_module, "mos7840");
#line 1084
  return (tmp);
}
}
#line 1086
extern void usb_deregister(struct usb_driver * ) ;
#line 1367 "include/linux/usb.h"
__inline static void usb_fill_control_urb(struct urb *urb , struct usb_device *dev ,
                                          unsigned int pipe , unsigned char *setup_packet ,
                                          void *transfer_buffer , int buffer_length ,
                                          void (*complete_fn)(struct urb * ) , void *context ) 
{ 


  {
#line 1376
  urb->dev = dev;
#line 1377
  urb->pipe = pipe;
#line 1378
  urb->setup_packet = setup_packet;
#line 1379
  urb->transfer_buffer = transfer_buffer;
#line 1380
  urb->transfer_buffer_length = buffer_length;
#line 1381
  urb->complete = complete_fn;
#line 1382
  urb->context = context;
#line 1383
  return;
}
}
#line 1398 "include/linux/usb.h"
__inline static void usb_fill_bulk_urb(struct urb *urb , struct usb_device *dev ,
                                       unsigned int pipe , void *transfer_buffer ,
                                       int buffer_length , void (*complete_fn)(struct urb * ) ,
                                       void *context ) 
{ 


  {
#line 1406
  urb->dev = dev;
#line 1407
  urb->pipe = pipe;
#line 1408
  urb->transfer_buffer = transfer_buffer;
#line 1409
  urb->transfer_buffer_length = buffer_length;
#line 1410
  urb->complete = complete_fn;
#line 1411
  urb->context = context;
#line 1412
  return;
}
}
#line 1432 "include/linux/usb.h"
__inline static void usb_fill_int_urb(struct urb *urb , struct usb_device *dev , unsigned int pipe ,
                                      void *transfer_buffer , int buffer_length ,
                                      void (*complete_fn)(struct urb * ) , void *context ,
                                      int interval ) 
{ 


  {
#line 1441
  urb->dev = dev;
#line 1442
  urb->pipe = pipe;
#line 1443
  urb->transfer_buffer = transfer_buffer;
#line 1444
  urb->transfer_buffer_length = buffer_length;
#line 1445
  urb->complete = complete_fn;
#line 1446
  urb->context = context;
#line 1447
  if ((unsigned int )dev->speed == 3U) {
#line 1448
    urb->interval = 1 << (interval + -1);
  } else {
#line 1450
    urb->interval = interval;
  }
#line 1451
  urb->start_frame = -1;
#line 1452
  return;
}
}
#line 1455
extern struct urb *usb_alloc_urb(int  , gfp_t  ) ;
#line 1456
extern void usb_free_urb(struct urb * ) ;
#line 1459
extern int usb_submit_urb(struct urb * , gfp_t  ) ;
#line 1461
extern void usb_kill_urb(struct urb * ) ;
#line 1518
extern int usb_control_msg(struct usb_device * , unsigned int  , __u8  , __u8  , __u16  ,
                           __u16  , void * , __u16  , int  ) ;
#line 1536
extern int usb_clear_halt(struct usb_device * , int  ) ;
#line 1651 "include/linux/usb.h"
__inline static unsigned int __create_pipe(struct usb_device *dev , unsigned int endpoint ) 
{ 


  {
#line 1654
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 101 "include/linux/usb/serial.h"
__inline static void *usb_get_serial_port_data(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 103
  tmp = dev_get_drvdata(& port->dev);
#line 103
  return (tmp);
}
}
#line 106 "include/linux/usb/serial.h"
__inline static void usb_set_serial_port_data(struct usb_serial_port *port , void *data ) 
{ 


  {
#line 109
  dev_set_drvdata(& port->dev, data);
#line 110
  return;
}
}
#line 249
extern int usb_serial_register(struct usb_serial_driver * ) ;
#line 250
extern void usb_serial_deregister(struct usb_serial_driver * ) ;
#line 253
extern int usb_serial_probe(struct usb_interface * , struct usb_device_id  const  * ) ;
#line 255
extern void usb_serial_disconnect(struct usb_interface * ) ;
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_device_id moschip_port_id_table[5U]  = {      {3U, 38672U, 30784U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 38672U, 30752U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 2134U, 44100U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      2134U, 44098U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_device_id moschip_id_table_combined[5U]  = {      {3U, 38672U, 30784U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 38672U, 30752U, (unsigned short)0, (unsigned short)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0,
      0UL}, 
        {3U, 2134U, 44100U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}, 
        {3U,
      2134U, 44098U, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
struct usb_device_id  const  __mod_usb_device_table  ;
#line 288 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int debug  ;
#line 296 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 299
  dev = (port->serial)->dev;
#line 300
  val = (unsigned int )val & 255U;
#line 301
  if (debug != 0) {
#line 301
    printk("<7>%s: mos7840_set_reg_sync offset is %x, value %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )reg, (int )val);
  } else {

  }
#line 303
  tmp = __create_pipe(dev, 0U);
#line 303
  tmp___0 = usb_control_msg(dev, tmp | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 1250);
#line 303
  return (tmp___0);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg_sync(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  unsigned int tmp ;

  {
#line 317
  dev = (port->serial)->dev;
#line 318
  ret = 0;
#line 320
  tmp = __create_pipe(dev, 0U);
#line 320
  ret = usb_control_msg(dev, tmp | 2147483776U, 13, 192, 0, (int )reg, (void *)val,
                        1, 1250);
#line 323
  if (debug != 0) {
#line 323
    printk("<7>%s: mos7840_get_reg_sync offset is %x, return val %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )reg, (int )*val);
  } else {

  }
#line 324
  *val = (unsigned int )*val & 255U;
#line 325
  return (ret);
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 val ) 
{ 
  struct usb_device *dev ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 338
  dev = (port->serial)->dev;
#line 339
  val = (unsigned int )val & 255U;
#line 342
  if ((unsigned int )(port->serial)->num_ports == 4U) {
#line 343
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
#line 345
    if (debug != 0) {
#line 345
      printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )val);
    } else {

    }
  } else
#line 347
  if ((int )port->number == (int )(port->serial)->minor) {
#line 348
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 1) << 8)) | (int )((short )val));
#line 350
    if (debug != 0) {
#line 350
      printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )val);
    } else {

    }
  } else {
#line 353
    val = (__u16 )((int )((short )((((int )port->number - (int )(port->serial)->minor) + 2) << 8)) | (int )((short )val));
#line 356
    if (debug != 0) {
#line 356
      printk("<7>%s: mos7840_set_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )val);
    } else {

    }
  }
#line 360
  tmp = __create_pipe(dev, 0U);
#line 360
  tmp___0 = usb_control_msg(dev, tmp | 2147483648U, 14, 64, (int )val, (int )reg,
                            0, 0, 1250);
#line 360
  return (tmp___0);
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_uart_reg(struct usb_serial_port *port , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  int ret ;
  __u16 Wval ;
  unsigned int tmp ;

  {
#line 374
  dev = (port->serial)->dev;
#line 375
  ret = 0;
#line 381
  if ((unsigned int )(port->serial)->num_ports == 4U) {
#line 382
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1U) << 8U;
#line 385
    if (debug != 0) {
#line 385
      printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )Wval);
    } else {

    }
  } else
#line 387
  if ((int )port->number == (int )(port->serial)->minor) {
#line 388
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 1U) << 8U;
#line 390
    if (debug != 0) {
#line 390
      printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )Wval);
    } else {

    }
  } else {
#line 393
    Wval = ((unsigned int )((int )((__u16 )port->number) - (int )((__u16 )(port->serial)->minor)) + 2U) << 8U;
#line 395
    if (debug != 0) {
#line 395
      printk("<7>%s: mos7840_get_uart_reg application number is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )Wval);
    } else {

    }
  }
#line 399
  tmp = __create_pipe(dev, 0U);
#line 399
  ret = usb_control_msg(dev, tmp | 2147483776U, 13, 192, (int )Wval, (int )reg, (void *)val,
                        1, 1250);
#line 402
  *val = (unsigned int )*val & 255U;
#line 403
  return (ret);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_dump_serial_port(struct moschip_port *mos7840_port ) 
{ 


  {
#line 409
  if (debug != 0) {
#line 409
    printk("<7>%s: ***************************************\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 410
  if (debug != 0) {
#line 410
    printk("<7>%s: SpRegOffset is %2x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->SpRegOffset);
  } else {

  }
#line 411
  if (debug != 0) {
#line 411
    printk("<7>%s: ControlRegOffset is %2x \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->ControlRegOffset);
  } else {

  }
#line 412
  if (debug != 0) {
#line 412
    printk("<7>%s: DCRRegOffset is %2x \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->DcrRegOffset);
  } else {

  }
#line 413
  if (debug != 0) {
#line 413
    printk("<7>%s: ***************************************\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 414
  return;
}
}
#line 424 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static void mos7840_set_port_private(struct usb_serial_port *port , struct moschip_port *data ) 
{ 


  {
#line 427
  usb_set_serial_port_data(port, (void *)data);
#line 428
  return;
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
__inline static struct moschip_port *mos7840_get_port_private(struct usb_serial_port *port ) 
{ 
  void *tmp ;

  {
#line 434
  tmp = usb_get_serial_port_data(port);
#line 434
  return ((struct moschip_port *)tmp);
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_msr(struct moschip_port *port , __u8 new_msr ) 
{ 
  struct moschip_port *mos7840_port ;
  struct async_icount *icount ;

  {
#line 441
  mos7840_port = port;
#line 442
  icount = & mos7840_port->icount;
#line 443
  if (((int )new_msr & 240) != 0) {
#line 446
    icount = & mos7840_port->icount;
#line 449
    if (((int )new_msr & 16) != 0) {
#line 450
      icount->cts = icount->cts + (__u32 )1;
#line 451
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 453
    if (((int )new_msr & 32) != 0) {
#line 454
      icount->dsr = icount->dsr + (__u32 )1;
#line 455
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 457
    if ((int )((signed char )new_msr) < 0) {
#line 458
      icount->dcd = icount->dcd + (__u32 )1;
#line 459
      __asm__  volatile   ("": : : "memory");
    } else {

    }
#line 461
    if (((int )new_msr & 64) != 0) {
#line 462
      icount->rng = icount->rng + (__u32 )1;
#line 463
      __asm__  volatile   ("": : : "memory");
    } else {

    }
  } else {

  }
#line 466
  return;
}
}
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_handle_new_lsr(struct moschip_port *port , __u8 new_lsr ) 
{ 
  struct async_icount *icount ;

  {
#line 472
  if (debug != 0) {
#line 472
    printk("<7>%s: %s - %02x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_handle_new_lsr", (int )new_lsr);
  } else {

  }
#line 474
  if (((int )new_lsr & 16) != 0) {
#line 480
    new_lsr = (unsigned int )new_lsr & 18U;
  } else {

  }
#line 484
  icount = & port->icount;
#line 485
  if (((int )new_lsr & 16) != 0) {
#line 486
    icount->brk = icount->brk + (__u32 )1;
#line 487
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 489
  if (((int )new_lsr & 2) != 0) {
#line 490
    icount->overrun = icount->overrun + (__u32 )1;
#line 491
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 493
  if (((int )new_lsr & 4) != 0) {
#line 494
    icount->parity = icount->parity + (__u32 )1;
#line 495
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 497
  if (((int )new_lsr & 8) != 0) {
#line 498
    icount->frame = icount->frame + (__u32 )1;
#line 499
    __asm__  volatile   ("": : : "memory");
  } else {

  }
#line 501
  return;
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_control_callback(struct urb *urb ) 
{ 
  unsigned char *data ;
  struct moschip_port *mos7840_port ;
  __u8 regval ;
  int result ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 514
  regval = 0U;
#line 515
  result = 0;
#line 516
  status = urb->status;
#line 518
  mos7840_port = (struct moschip_port *)urb->context;
#line 520
  switch (status) {
  case 0: ;
#line 523
  goto ldv_18409;
  case -104: ;
  case -2: ;
  case -108: ;
#line 528
  if (debug != 0) {
#line 528
    printk("<7>%s: %s - urb shutting down with status: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", status);
  } else {

  }
#line 530
  return;
  default: ;
#line 532
  if (debug != 0) {
#line 532
    printk("<7>%s: %s - nonzero urb status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", status);
  } else {

  }
#line 534
  goto exit;
  }
  ldv_18409: ;
#line 537
  if (debug != 0) {
#line 537
    printk("<7>%s: %s urb buffer size is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", urb->actual_length);
  } else {

  }
#line 538
  if (debug != 0) {
#line 538
    printk("<7>%s: %s mos7840_port->MsrLsr is %d port %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", mos7840_port->MsrLsr, mos7840_port->port_num);
  } else {

  }
#line 540
  data = (unsigned char *)urb->transfer_buffer;
#line 541
  regval = *data;
#line 542
  if (debug != 0) {
#line 542
    printk("<7>%s: %s data is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_control_callback", (int )regval);
  } else {

  }
#line 543
  if (mos7840_port->MsrLsr == 0) {
#line 544
    mos7840_handle_new_msr(mos7840_port, (int )regval);
  } else
#line 545
  if (mos7840_port->MsrLsr == 1) {
#line 546
    mos7840_handle_new_lsr(mos7840_port, (int )regval);
  } else {

  }
  exit: 
#line 549
  ldv___ldv_spin_lock_19(& mos7840_port->pool_lock);
#line 550
  if ((int )((signed char )mos7840_port->zombie) == 0) {
#line 551
    result = usb_submit_urb(mos7840_port->int_urb, 32U);
  } else {

  }
#line 552
  ldv___ldv_spin_unlock_20(& mos7840_port->pool_lock);
#line 553
  if (result != 0) {
#line 554
    tmp = dev_name((struct device  const  *)(& (urb->dev)->dev));
#line 554
    tmp___0 = dev_driver_string((struct device  const  *)(& (urb->dev)->dev));
#line 554
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_control_callback",
           result);
  } else {

  }
#line 555
  return;
}
}
#line 560 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_reg(struct moschip_port *mcs , __u16 Wval , __u16 reg , __u16 *val ) 
{ 
  struct usb_device *dev ;
  struct usb_ctrlrequest *dr ;
  unsigned char *buffer ;
  int ret ;
  unsigned int tmp ;

  {
#line 563
  dev = ((mcs->port)->serial)->dev;
#line 564
  dr = mcs->dr;
#line 565
  buffer = (unsigned char *)mcs->ctrl_buf;
#line 568
  dr->bRequestType = 192U;
#line 569
  dr->bRequest = 13U;
#line 570
  dr->wValue = Wval;
#line 571
  dr->wIndex = reg;
#line 572
  dr->wLength = 2U;
#line 574
  tmp = __create_pipe(dev, 0U);
#line 574
  usb_fill_control_urb(mcs->control_urb, dev, tmp | 2147483776U, (unsigned char *)dr,
                       (void *)buffer, 2, & mos7840_control_callback, (void *)mcs);
#line 577
  (mcs->control_urb)->transfer_buffer_length = 2;
#line 578
  ret = usb_submit_urb(mcs->control_urb, 32U);
#line 579
  return (ret);
}
}
#line 588 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_interrupt_callback(struct urb *urb ) 
{ 
  int result ;
  int length ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  __u16 Data ;
  unsigned char *data ;
  __u8 sp[5U] ;
  __u8 st ;
  int i ;
  int rv ;
  __u16 wval ;
  __u16 wreg ;
  int status ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 597
  rv = 0;
#line 598
  wreg = 0U;
#line 599
  status = urb->status;
#line 601
  if (debug != 0) {
#line 601
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" : Entering\n");
  } else {

  }
#line 603
  switch (status) {
  case 0: ;
#line 606
  goto ldv_18443;
  case -104: ;
  case -2: ;
  case -108: ;
#line 611
  if (debug != 0) {
#line 611
    printk("<7>%s: %s - urb shutting down with status: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_interrupt_callback", status);
  } else {

  }
#line 613
  return;
  default: ;
#line 615
  if (debug != 0) {
#line 615
    printk("<7>%s: %s - nonzero urb status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_interrupt_callback", status);
  } else {

  }
#line 617
  goto exit;
  }
  ldv_18443: 
#line 620
  length = urb->actual_length;
#line 621
  data = (unsigned char *)urb->transfer_buffer;
#line 623
  serial = (struct usb_serial *)urb->context;
#line 632
  if (length != 0 && length > 5) {
#line 633
    if (debug != 0) {
#line 633
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Wrong data !!!");
    } else {

    }
#line 634
    return;
  } else {

  }
#line 637
  sp[0] = *data;
#line 638
  sp[1] = *(data + 1UL);
#line 639
  sp[2] = *(data + 2UL);
#line 640
  sp[3] = *(data + 3UL);
#line 641
  st = *(data + 4UL);
#line 643
  i = 0;
#line 643
  goto ldv_18454;
  ldv_18453: 
#line 644
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 645
  wval = ((unsigned int )((int )((__u16 )(serial->port[i])->number) - (int )((__u16 )serial->minor)) + 1U) << 8U;
#line 648
  if ((int )((signed char )mos7840_port->open) != 0) {
#line 649
    if ((int )sp[i] & 1) {
#line 650
      if (debug != 0) {
#line 650
        printk("<7>%s: SP%d No Interrupt !!!\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               i);
      } else {
#line 652
        switch ((int )sp[i] & 15) {
        case 6: ;
#line 654
        if (debug != 0) {
#line 654
          printk("<7>%s: Serial Port %d: Receiver status error or \n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
                 i);
        } else {

        }
#line 655
        if (debug != 0) {
#line 655
          printk("<7>%s: address bit detected in 9-bit mode\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
        } else {

        }
#line 656
        mos7840_port->MsrLsr = 1;
#line 657
        wreg = 5U;
#line 658
        goto ldv_18451;
        case 0: ;
#line 660
        if (debug != 0) {
#line 660
          printk("<7>%s: Serial Port %d: Modem status change\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
                 i);
        } else {

        }
#line 661
        mos7840_port->MsrLsr = 0;
#line 662
        wreg = 6U;
#line 663
        goto ldv_18451;
        }
        ldv_18451: 
#line 665
        ldv___ldv_spin_lock_21(& mos7840_port->pool_lock);
#line 666
        if ((int )((signed char )mos7840_port->zombie) == 0) {
#line 667
          rv = mos7840_get_reg(mos7840_port, (int )wval, (int )wreg, & Data);
        } else {
#line 669
          ldv___ldv_spin_unlock_22(& mos7840_port->pool_lock);
#line 670
          return;
        }
#line 672
        ldv___ldv_spin_unlock_23(& mos7840_port->pool_lock);
      }
    } else {

    }
  } else {

  }
#line 643
  i = i + 1;
  ldv_18454: ;
#line 643
  if ((int )serial->num_ports > i) {
#line 644
    goto ldv_18453;
  } else {

  }

#line 676
  if (rv >= 0) {
#line 678
    return;
  } else {

  }
  exit: 
#line 680
  result = usb_submit_urb(urb, 32U);
#line 681
  if (result != 0) {
#line 682
    tmp = dev_name((struct device  const  *)(& (urb->dev)->dev));
#line 682
    tmp___0 = dev_driver_string((struct device  const  *)(& (urb->dev)->dev));
#line 682
    printk("<3>%s %s: %s - Error %d submitting interrupt urb\n", tmp___0, tmp, "mos7840_interrupt_callback",
           result);
  } else {

  }
#line 683
  return;
}
}
#line 688 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_port_paranoia_check(struct usb_serial_port *port , char const   *function ) 
{ 


  {
#line 691
  if ((unsigned long )port == (unsigned long )((struct usb_serial_port *)0)) {
#line 692
    if (debug != 0) {
#line 692
      printk("<7>%s: %s - port == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 693
    return (-1);
  } else {

  }
#line 695
  if ((unsigned long )port->serial == (unsigned long )((struct usb_serial *)0)) {
#line 696
    if (debug != 0) {
#line 696
      printk("<7>%s: %s - port->serial == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 697
    return (-1);
  } else {

  }
#line 700
  return (0);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_serial_paranoia_check(struct usb_serial *serial , char const   *function ) 
{ 


  {
#line 707
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 708
    if (debug != 0) {
#line 708
      printk("<7>%s: %s - serial == NULL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 709
    return (-1);
  } else {

  }
#line 711
  if ((unsigned long )serial->type == (unsigned long )((struct usb_serial_driver *)0)) {
#line 712
    if (debug != 0) {
#line 712
      printk("<7>%s: %s - serial->type == NULL!\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             function);
    } else {

    }
#line 713
    return (-1);
  } else {

  }
#line 716
  return (0);
}
}
#line 719 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_serial *mos7840_get_usb_serial(struct usb_serial_port *port , char const   *function ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 723
  if ((unsigned long )port == (unsigned long )((struct usb_serial_port *)0)) {
#line 728
    return (0);
  } else {
#line 723
    tmp = mos7840_port_paranoia_check(port, function);
#line 723
    if (tmp != 0) {
#line 728
      return (0);
    } else {
#line 723
      tmp___0 = mos7840_serial_paranoia_check(port->serial, function);
#line 723
      if (tmp___0 != 0) {
#line 728
        return (0);
      } else {

      }
    }
  }
#line 731
  return (port->serial);
}
}
#line 740 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_in_callback(struct urb *urb ) 
{ 
  int retval ;
  unsigned char *data ;
  struct usb_serial *serial ;
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int tmp ;

  {
#line 748
  status = urb->status;
#line 750
  if (status != 0) {
#line 751
    if (debug != 0) {
#line 751
      printk("<7>%s: nonzero read bulk status received: %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 752
    return;
  } else {

  }
#line 755
  mos7840_port = (struct moschip_port *)urb->context;
#line 756
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 757
    if (debug != 0) {
#line 757
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"NULL mos7840_port pointer \n");
    } else {

    }
#line 758
    return;
  } else {

  }
#line 761
  port = mos7840_port->port;
#line 762
  tmp = mos7840_port_paranoia_check(port, "mos7840_bulk_in_callback");
#line 762
  if (tmp != 0) {
#line 763
    if (debug != 0) {
#line 763
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 764
    return;
  } else {

  }
#line 767
  serial = mos7840_get_usb_serial(port, "mos7840_bulk_in_callback");
#line 768
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 769
    if (debug != 0) {
#line 769
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Bad serial pointer ");
    } else {

    }
#line 770
    return;
  } else {

  }
#line 773
  if (debug != 0) {
#line 773
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering... \n");
  } else {

  }
#line 775
  data = (unsigned char *)urb->transfer_buffer;
#line 777
  if (debug != 0) {
#line 777
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering ........... \n");
  } else {

  }
#line 779
  if (urb->actual_length != 0) {
#line 780
    tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 781
    if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 782
      tty_buffer_request_room(tty, (size_t )urb->actual_length);
#line 783
      tty_insert_flip_string(tty, (unsigned char const   *)data, (size_t )urb->actual_length);
#line 784
      if (debug != 0) {
#line 784
        printk("<7>%s:  %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               data);
      } else {

      }
#line 785
      tty_flip_buffer_push(tty);
#line 786
      tty_kref_put(tty);
    } else {

    }
#line 788
    mos7840_port->icount.rx = mos7840_port->icount.rx + (__u32 )urb->actual_length;
#line 789
    __asm__  volatile   ("": : : "memory");
#line 790
    if (debug != 0) {
#line 790
      printk("<7>%s: mos7840_port->icount.rx is %d:\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             mos7840_port->icount.rx);
    } else {

    }
  } else {

  }
#line 794
  if ((unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0)) {
#line 795
    if (debug != 0) {
#line 795
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"URB KILLED !!!\n");
    } else {

    }
#line 796
    return;
  } else {

  }
#line 800
  (mos7840_port->read_urb)->dev = serial->dev;
#line 802
  retval = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 804
  if (retval != 0) {
#line 805
    if (debug != 0) {
#line 805
      printk("<7>%s:  usb_submit_urb(read bulk) failed, retval = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             retval);
    } else {

    }
  } else {

  }
#line 807
  return;
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_bulk_out_data_callback(struct urb *urb ) 
{ 
  struct moschip_port *mos7840_port ;
  struct tty_struct *tty ;
  int status ;
  int i ;
  int tmp ;

  {
#line 820
  status = urb->status;
#line 823
  mos7840_port = (struct moschip_port *)urb->context;
#line 824
  ldv___ldv_spin_lock_24(& mos7840_port->pool_lock);
#line 825
  i = 0;
#line 825
  goto ldv_18488;
  ldv_18487: ;
#line 826
  if ((unsigned long )mos7840_port->write_urb_pool[i] == (unsigned long )urb) {
#line 827
    mos7840_port->busy[i] = 0;
#line 828
    goto ldv_18486;
  } else {

  }
#line 825
  i = i + 1;
  ldv_18488: ;
#line 825
  if (i <= 15) {
#line 826
    goto ldv_18487;
  } else {

  }
  ldv_18486: 
#line 831
  ldv___ldv_spin_unlock_25(& mos7840_port->pool_lock);
#line 833
  if (status != 0) {
#line 834
    if (debug != 0) {
#line 834
      printk("<7>%s: nonzero write bulk status received:%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 835
    return;
  } else {

  }
#line 838
  tmp = mos7840_port_paranoia_check(mos7840_port->port, "mos7840_bulk_out_data_callback");
#line 838
  if (tmp != 0) {
#line 839
    if (debug != 0) {
#line 839
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 840
    return;
  } else {

  }
#line 843
  if (debug != 0) {
#line 843
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .........");
  } else {

  }
#line 845
  tty = tty_port_tty_get(& (mos7840_port->port)->port);
#line 846
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0) && (int )((signed char )mos7840_port->open) != 0) {
#line 847
    tty_wakeup(tty);
  } else {

  }
#line 848
  tty_kref_put(tty);
#line 849
  return;
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_open(struct tty_struct *tty , struct usb_serial_port *port , struct file *filp ) 
{ 
  int response ;
  int j ;
  struct usb_serial *serial ;
  struct urb *urb ;
  __u16 Data ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 887
  tmp = mos7840_port_paranoia_check(port, "mos7840_open");
#line 887
  if (tmp != 0) {
#line 888
    if (debug != 0) {
#line 888
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 889
    return (-19);
  } else {

  }
#line 892
  serial = port->serial;
#line 894
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_open");
#line 894
  if (tmp___0 != 0) {
#line 895
    if (debug != 0) {
#line 895
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 896
    return (-19);
  } else {

  }
#line 899
  mos7840_port = mos7840_get_port_private(port);
#line 900
  port0 = mos7840_get_port_private(serial->port[0]);
#line 902
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0)) {
#line 903
    return (-19);
  } else {

  }
#line 905
  usb_clear_halt(serial->dev, (int )(port->write_urb)->pipe);
#line 906
  usb_clear_halt(serial->dev, (int )(port->read_urb)->pipe);
#line 907
  port0->open_ports = (char )((int )port0->open_ports + 1);
#line 910
  j = 0;
#line 910
  goto ldv_18506;
  ldv_18505: 
#line 911
  urb = usb_alloc_urb(0, 208U);
#line 912
  mos7840_port->write_urb_pool[j] = urb;
#line 914
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
#line 915
    printk("<3>mos7840: No more urbs???\n");
#line 916
    goto ldv_18504;
  } else {

  }
#line 919
  urb->transfer_buffer = kmalloc(32UL, 208U);
#line 921
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 922
    usb_free_urb(urb);
#line 923
    mos7840_port->write_urb_pool[j] = 0;
#line 924
    printk("<3>mos7840: %s-out of memory for urb buffers.\n", "mos7840_open");
#line 925
    goto ldv_18504;
  } else {

  }
  ldv_18504: 
#line 910
  j = j + 1;
  ldv_18506: ;
#line 910
  if (j <= 15) {
#line 911
    goto ldv_18505;
  } else {

  }
#line 943
  Data = 0U;
#line 944
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 945
  if (status < 0) {
#line 946
    if (debug != 0) {
#line 946
      printk("<7>%s: Reading Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 947
    return (-1);
  } else {

  }
#line 949
  Data = (__u16 )((unsigned int )Data | 128U);
#line 950
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 951
  if (status < 0) {
#line 952
    if (debug != 0) {
#line 952
      printk("<7>%s: writing Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 953
    return (-1);
  } else {

  }
#line 956
  Data = (unsigned int )Data & 65407U;
#line 957
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 958
  if (status < 0) {
#line 959
    if (debug != 0) {
#line 959
      printk("<7>%s: writing Spreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 960
    return (-1);
  } else {

  }
#line 964
  Data = 0U;
#line 965
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 967
  if (status < 0) {
#line 968
    if (debug != 0) {
#line 968
      printk("<7>%s: Reading Controlreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 969
    return (-1);
  } else {

  }
#line 971
  Data = (__u16 )((unsigned int )Data | 8U);
#line 972
  Data = (__u16 )((unsigned int )Data | 32U);
#line 973
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 975
  if (status < 0) {
#line 976
    if (debug != 0) {
#line 976
      printk("<7>%s: writing Controlreg failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 977
    return (-1);
  } else {

  }
#line 984
  Data = 0U;
#line 985
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 986
  if (status < 0) {
#line 987
    if (debug != 0) {
#line 987
      printk("<7>%s: disableing interrupts failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 988
    return (-1);
  } else {

  }
#line 991
  Data = 0U;
#line 992
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 993
  if (status < 0) {
#line 994
    if (debug != 0) {
#line 994
      printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 995
    return (-1);
  } else {

  }
#line 998
  Data = 207U;
#line 999
  status = mos7840_set_uart_reg(port, 2, (int )Data);
#line 1000
  if (status < 0) {
#line 1001
    if (debug != 0) {
#line 1001
      printk("<7>%s: Writing FIFO_CONTROL_REGISTER  failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1002
    return (-1);
  } else {

  }
#line 1005
  Data = 3U;
#line 1006
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1007
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1009
  Data = 11U;
#line 1010
  status = mos7840_set_uart_reg(port, 4, (int )Data);
#line 1011
  mos7840_port->shadowMCR = (__u8 )Data;
#line 1013
  Data = 0U;
#line 1014
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 1015
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1017
  Data = (__u16 )((unsigned int )Data | 128U);
#line 1018
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1020
  Data = 12U;
#line 1021
  status = mos7840_set_uart_reg(port, 0, (int )Data);
#line 1023
  Data = 0U;
#line 1024
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1026
  Data = 0U;
#line 1027
  status = mos7840_get_uart_reg(port, 3, & Data);
#line 1029
  Data = (unsigned int )Data & 65407U;
#line 1030
  status = mos7840_set_uart_reg(port, 3, (int )Data);
#line 1031
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1034
  Data = 0U;
#line 1035
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1037
  Data = (__u16 )((unsigned int )Data | 12U);
#line 1038
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1040
  Data = (unsigned int )Data & 65523U;
#line 1041
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1043
  Data = 12U;
#line 1044
  status = mos7840_set_uart_reg(port, 1, (int )Data);
#line 1047
  Data = 0U;
#line 1048
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1050
  Data = (unsigned int )Data & 65503U;
#line 1051
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1055
  Data = 0U;
#line 1056
  status = mos7840_get_reg_sync(port, (int )mos7840_port->ControlRegOffset, & Data);
#line 1058
  Data = (__u16 )((unsigned int )Data | 16U);
#line 1059
  status = mos7840_set_reg_sync(port, (int )mos7840_port->ControlRegOffset, (int )Data);
#line 1065
  if ((unsigned long )tty != (unsigned long )((struct tty_struct *)0)) {
#line 1066
    tty->low_latency = 1U;
  } else {

  }
#line 1071
  if ((int )((signed char )port0->open_ports) == 1) {
#line 1072
    if ((unsigned long )(serial->port[0])->interrupt_in_buffer == (unsigned long )((unsigned char *)0)) {
#line 1074
      tmp___1 = __create_pipe(serial->dev, (unsigned int )(serial->port[0])->interrupt_in_endpointAddress);
#line 1074
      usb_fill_int_urb((serial->port[0])->interrupt_in_urb, serial->dev, tmp___1 | 1073741952U,
                       (void *)(serial->port[0])->interrupt_in_buffer, ((serial->port[0])->interrupt_in_urb)->transfer_buffer_length,
                       & mos7840_interrupt_callback, (void *)serial, ((serial->port[0])->interrupt_in_urb)->interval);
#line 1088
      response = usb_submit_urb((serial->port[0])->interrupt_in_urb, 208U);
#line 1091
      if (response != 0) {
#line 1092
        printk("<3>mos7840: %s - Error %d submitting interrupt urb\n", "mos7840_open",
               response);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1104
  if (debug != 0) {
#line 1104
    printk("<7>%s: port number is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->number);
  } else {

  }
#line 1105
  if (debug != 0) {
#line 1105
    printk("<7>%s: serial number is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )(port->serial)->minor);
  } else {

  }
#line 1106
  if (debug != 0) {
#line 1106
    printk("<7>%s: Bulkin endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1107
  if (debug != 0) {
#line 1107
    printk("<7>%s: BulkOut endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1108
  if (debug != 0) {
#line 1108
    printk("<7>%s: Interrupt endpoint is %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->interrupt_in_endpointAddress);
  } else {

  }
#line 1109
  if (debug != 0) {
#line 1109
    printk("<7>%s: port\'s number in the device is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           mos7840_port->port_num);
  } else {

  }
#line 1110
  mos7840_port->read_urb = port->read_urb;
#line 1114
  tmp___2 = __create_pipe(serial->dev, (unsigned int )port->bulk_in_endpointAddress);
#line 1114
  usb_fill_bulk_urb(mos7840_port->read_urb, serial->dev, tmp___2 | 3221225600U, (void *)port->bulk_in_buffer,
                    (mos7840_port->read_urb)->transfer_buffer_length, & mos7840_bulk_in_callback,
                    (void *)mos7840_port);
#line 1122
  if (debug != 0) {
#line 1122
    printk("<7>%s: mos7840_open: bulkin endpoint is %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_in_endpointAddress);
  } else {

  }
#line 1124
  response = usb_submit_urb(mos7840_port->read_urb, 208U);
#line 1125
  if (response != 0) {
#line 1126
    printk("<3>mos7840: %s - Error %d submitting control urb\n", "mos7840_open", response);
  } else {

  }
#line 1131
  init_waitqueue_head(& mos7840_port->wait_chase);
#line 1132
  init_waitqueue_head(& mos7840_port->delta_msr_wait);
#line 1135
  memset((void *)(& mos7840_port->icount), 0, 44UL);
#line 1139
  mos7840_port->shadowMCR = 8U;
#line 1141
  mos7840_port->open = 1;
#line 1143
  mos7840_port->icount.tx = 0U;
#line 1144
  mos7840_port->icount.rx = 0U;
#line 1146
  if (debug != 0) {
#line 1146
    printk("<7>%s: \n\nusb_serial serial:%p       mos7840_port:%p\n      usb_serial_port port:%p\n\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           serial, mos7840_port, port);
  } else {

  }
#line 1149
  return (0);
}
}
#line 1163 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_chars_in_buffer(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int chars ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1165
  port = (struct usb_serial_port *)tty->driver_data;
#line 1167
  chars = 0;
#line 1171
  if (debug != 0) {
#line 1171
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_chars_in_buffer:entering ...........");
  } else {

  }
#line 1173
  tmp = mos7840_port_paranoia_check(port, "mos7840_chars_in_buffer");
#line 1173
  if (tmp != 0) {
#line 1174
    if (debug != 0) {
#line 1174
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1175
    return (0);
  } else {

  }
#line 1178
  mos7840_port = mos7840_get_port_private(port);
#line 1179
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1180
    if (debug != 0) {
#line 1180
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_break:leaving ...........");
    } else {

    }
#line 1181
    return (0);
  } else {

  }
#line 1184
  ldv___ldv_spin_lock_26(& mos7840_port->pool_lock);
#line 1185
  i = 0;
#line 1185
  goto ldv_18518;
  ldv_18517: ;
#line 1186
  if ((int )((signed char )mos7840_port->busy[i]) != 0) {
#line 1187
    chars = chars + 32;
  } else {

  }
#line 1185
  i = i + 1;
  ldv_18518: ;
#line 1185
  if (i <= 15) {
#line 1186
    goto ldv_18517;
  } else {

  }
#line 1188
  ldv___ldv_spin_unlock_27(& mos7840_port->pool_lock);
#line 1189
  if (debug != 0) {
#line 1189
    printk("<7>%s: %s - returns %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_chars_in_buffer", chars);
  } else {

  }
#line 1190
  return (chars);
}
}
#line 1204 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_block_until_tx_empty(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1207
  timeout = 25;
#line 1208
  wait = 30;
  ldv_18528: 
#line 1213
  count = mos7840_chars_in_buffer(tty);
#line 1216
  if (count <= 0) {
#line 1217
    return;
  } else {

  }
#line 1220
  interruptible_sleep_on_timeout(& mos7840_port->wait_chase, (long )timeout);
#line 1224
  wait = wait - 1;
#line 1225
  if (wait == 0) {
#line 1226
    if (debug != 0) {
#line 1226
      printk("<7>%s: %s - TIMEOUT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_block_until_tx_empty");
    } else {

    }
#line 1227
    return;
  } else {
#line 1230
    wait = 30;
  }
#line 1232
  goto ldv_18528;
}
}
#line 1240 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_close(struct tty_struct *tty , struct usb_serial_port *port ,
                          struct file *filp ) 
{ 
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *port0 ;
  int j ;
  __u16 Data ;
  int tmp ;

  {
#line 1249
  if (debug != 0) {
#line 1249
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"mos7840_close:entering...");
  } else {

  }
#line 1251
  tmp = mos7840_port_paranoia_check(port, "mos7840_close");
#line 1251
  if (tmp != 0) {
#line 1252
    if (debug != 0) {
#line 1252
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1253
    return;
  } else {

  }
#line 1256
  serial = mos7840_get_usb_serial(port, "mos7840_close");
#line 1257
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 1258
    if (debug != 0) {
#line 1258
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1259
    return;
  } else {

  }
#line 1262
  mos7840_port = mos7840_get_port_private(port);
#line 1263
  port0 = mos7840_get_port_private(serial->port[0]);
#line 1265
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0) || (unsigned long )port0 == (unsigned long )((struct moschip_port *)0)) {
#line 1266
    return;
  } else {

  }
#line 1268
  j = 0;
#line 1268
  goto ldv_18541;
  ldv_18540: 
#line 1269
  usb_kill_urb(mos7840_port->write_urb_pool[j]);
#line 1268
  j = j + 1;
  ldv_18541: ;
#line 1268
  if (j <= 15) {
#line 1269
    goto ldv_18540;
  } else {

  }
#line 1272
  j = 0;
#line 1272
  goto ldv_18544;
  ldv_18543: ;
#line 1273
  if ((unsigned long )mos7840_port->write_urb_pool[j] != (unsigned long )((struct urb *)0)) {
#line 1274
    if ((unsigned long )(mos7840_port->write_urb_pool[j])->transfer_buffer != (unsigned long )((void *)0)) {
#line 1275
      kfree((void const   *)(mos7840_port->write_urb_pool[j])->transfer_buffer);
    } else {

    }
#line 1278
    usb_free_urb(mos7840_port->write_urb_pool[j]);
  } else {

  }
#line 1272
  j = j + 1;
  ldv_18544: ;
#line 1272
  if (j <= 15) {
#line 1273
    goto ldv_18543;
  } else {

  }

#line 1282
  if ((unsigned long )serial->dev != (unsigned long )((struct usb_device *)0)) {
#line 1284
    mos7840_block_until_tx_empty(tty, mos7840_port);
  } else {

  }
#line 1288
  if ((unsigned long )serial->dev != (unsigned long )((struct usb_device *)0)) {
#line 1289
    if ((unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0)) {
#line 1290
      if (debug != 0) {
#line 1290
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown bulk write\n");
      } else {

      }
#line 1291
      usb_kill_urb(mos7840_port->write_urb);
    } else {

    }
#line 1293
    if ((unsigned long )mos7840_port->read_urb != (unsigned long )((struct urb *)0)) {
#line 1294
      if (debug != 0) {
#line 1294
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown bulk read\n");
      } else {

      }
#line 1295
      usb_kill_urb(mos7840_port->read_urb);
    } else {

    }
#line 1297
    if ((unsigned long )(& mos7840_port->control_urb) != (unsigned long )((struct urb **)0)) {
#line 1298
      if (debug != 0) {
#line 1298
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown control read\n");
      } else {

      }
    } else {

    }
  } else {

  }
#line 1304
  port0->open_ports = (char )((int )port0->open_ports - 1);
#line 1305
  if (debug != 0) {
#line 1305
    printk("<7>%s: mos7840_num_open_ports in close%d:in port%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port0->open_ports, (int )port->number);
  } else {

  }
#line 1307
  if ((int )((signed char )port0->open_ports) == 0) {
#line 1308
    if ((unsigned long )(serial->port[0])->interrupt_in_urb != (unsigned long )((struct urb *)0)) {
#line 1309
      if (debug != 0) {
#line 1309
        printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               (char *)"Shutdown interrupt_in_urb\n");
      } else {

      }
#line 1310
      usb_kill_urb((serial->port[0])->interrupt_in_urb);
    } else {

    }
  } else {

  }
#line 1314
  if ((unsigned long )mos7840_port->write_urb != (unsigned long )((struct urb *)0)) {
#line 1316
    if ((unsigned long )(mos7840_port->write_urb)->transfer_buffer != (unsigned long )((void *)0)) {
#line 1317
      kfree((void const   *)(mos7840_port->write_urb)->transfer_buffer);
    } else {

    }
#line 1318
    usb_free_urb(mos7840_port->write_urb);
  } else {

  }
#line 1321
  Data = 0U;
#line 1322
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 1324
  Data = 0U;
#line 1325
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1327
  mos7840_port->open = 0;
#line 1329
  if (debug != 0) {
#line 1329
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Leaving ............");
  } else {

  }
#line 1330
  return;
}
}
#line 1343 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_block_until_chase_response(struct tty_struct *tty , struct moschip_port *mos7840_port ) 
{ 
  int timeout ;
  int wait ;
  int count ;

  {
#line 1346
  timeout = 250;
#line 1347
  wait = 10;
  ldv_18554: 
#line 1351
  count = mos7840_chars_in_buffer(tty);
#line 1354
  if (count <= 0) {
#line 1355
    return;
  } else {

  }
#line 1358
  interruptible_sleep_on_timeout(& mos7840_port->wait_chase, (long )timeout);
#line 1361
  wait = wait - 1;
#line 1362
  if (wait == 0) {
#line 1363
    if (debug != 0) {
#line 1363
      printk("<7>%s: %s - TIMEOUT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_block_until_chase_response");
    } else {

    }
#line 1364
    return;
  } else {
#line 1367
    wait = 10;
  }
#line 1369
  goto ldv_18554;
}
}
#line 1377 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_break(struct tty_struct *tty , int break_state ) 
{ 
  struct usb_serial_port *port ;
  unsigned char data ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1379
  port = (struct usb_serial_port *)tty->driver_data;
#line 1384
  if (debug != 0) {
#line 1384
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering ...........");
  } else {

  }
#line 1385
  if (debug != 0) {
#line 1385
    printk("<7>%s: mos7840_break: Start\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 1387
  tmp = mos7840_port_paranoia_check(port, "mos7840_break");
#line 1387
  if (tmp != 0) {
#line 1388
    if (debug != 0) {
#line 1388
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1389
    return;
  } else {

  }
#line 1392
  serial = mos7840_get_usb_serial(port, "mos7840_break");
#line 1393
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 1394
    if (debug != 0) {
#line 1394
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1395
    return;
  } else {

  }
#line 1398
  mos7840_port = mos7840_get_port_private(port);
#line 1400
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1401
    return;
  } else {

  }
#line 1403
  if ((unsigned long )serial->dev != (unsigned long )((struct usb_device *)0)) {
#line 1405
    mos7840_block_until_chase_response(tty, mos7840_port);
  } else {

  }
#line 1407
  if (break_state == -1) {
#line 1408
    data = (unsigned int )mos7840_port->shadowLCR | 64U;
  } else {
#line 1410
    data = (unsigned int )mos7840_port->shadowLCR & 191U;
  }
#line 1412
  mos7840_port->shadowLCR = data;
#line 1413
  if (debug != 0) {
#line 1413
    printk("<7>%s: mcs7840_break mos7840_port->shadowLCR is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 1415
  mos7840_set_uart_reg(port, 3, (int )mos7840_port->shadowLCR);
#line 1418
  return;
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write_room(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int i ;
  int room ;
  struct moschip_port *mos7840_port ;
  int tmp ;

  {
#line 1431
  port = (struct usb_serial_port *)tty->driver_data;
#line 1433
  room = 0;
#line 1437
  if (debug != 0) {
#line 1437
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_write_room:entering ...........");
  } else {

  }
#line 1439
  tmp = mos7840_port_paranoia_check(port, "mos7840_write_room");
#line 1439
  if (tmp != 0) {
#line 1440
    if (debug != 0) {
#line 1440
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1441
    if (debug != 0) {
#line 1441
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)" mos7840_write_room:leaving ...........");
    } else {

    }
#line 1442
    return (-1);
  } else {

  }
#line 1445
  mos7840_port = mos7840_get_port_private(port);
#line 1446
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1447
    if (debug != 0) {
#line 1447
      printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_break:leaving ...........");
    } else {

    }
#line 1448
    return (-1);
  } else {

  }
#line 1451
  ldv___ldv_spin_lock_28(& mos7840_port->pool_lock);
#line 1452
  i = 0;
#line 1452
  goto ldv_18574;
  ldv_18573: ;
#line 1453
  if ((int )((signed char )mos7840_port->busy[i]) == 0) {
#line 1454
    room = room + 32;
  } else {

  }
#line 1452
  i = i + 1;
  ldv_18574: ;
#line 1452
  if (i <= 15) {
#line 1453
    goto ldv_18573;
  } else {

  }
#line 1456
  ldv___ldv_spin_unlock_29(& mos7840_port->pool_lock);
#line 1458
  room = room != 0 ? room + -31 : 0;
#line 1459
  if (debug != 0) {
#line 1459
    printk("<7>%s: %s - returns %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_write_room", room);
  } else {

  }
#line 1460
  return (room);
}
}
#line 1472 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_write(struct tty_struct *tty , struct usb_serial_port *port , unsigned char const   *data ,
                         int count ) 
{ 
  int status ;
  int i ;
  int bytes_sent ;
  int transfer_size ;
  struct moschip_port *mos7840_port ;
  struct usb_serial *serial ;
  struct urb *urb ;
  unsigned char const   *current_position ;
  unsigned char *data1 ;
  int tmp ;
  int tmp___0 ;
  int _min1 ;
  int _min2 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___1 ;

  {
#line 1477
  bytes_sent = 0;
#line 1485
  current_position = data;
#line 1487
  if (debug != 0) {
#line 1487
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"entering ...........");
  } else {

  }
#line 1522
  tmp = mos7840_port_paranoia_check(port, "mos7840_write");
#line 1522
  if (tmp != 0) {
#line 1523
    if (debug != 0) {
#line 1523
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Port Paranoia failed \n");
    } else {

    }
#line 1524
    return (-1);
  } else {

  }
#line 1527
  serial = port->serial;
#line 1528
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_write");
#line 1528
  if (tmp___0 != 0) {
#line 1529
    if (debug != 0) {
#line 1529
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Serial Paranoia failed \n");
    } else {

    }
#line 1530
    return (-1);
  } else {

  }
#line 1533
  mos7840_port = mos7840_get_port_private(port);
#line 1534
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1535
    if (debug != 0) {
#line 1535
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"mos7840_port is NULL\n");
    } else {

    }
#line 1536
    return (-1);
  } else {

  }
#line 1540
  urb = 0;
#line 1542
  ldv___ldv_spin_lock_30(& mos7840_port->pool_lock);
#line 1543
  i = 0;
#line 1543
  goto ldv_18595;
  ldv_18594: ;
#line 1544
  if ((int )((signed char )mos7840_port->busy[i]) == 0) {
#line 1545
    mos7840_port->busy[i] = 1;
#line 1546
    urb = mos7840_port->write_urb_pool[i];
#line 1547
    if (debug != 0) {
#line 1547
      printk("<7>%s: \nURB:%d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             i);
    } else {

    }
#line 1548
    goto ldv_18593;
  } else {

  }
#line 1543
  i = i + 1;
  ldv_18595: ;
#line 1543
  if (i <= 15) {
#line 1544
    goto ldv_18594;
  } else {

  }
  ldv_18593: 
#line 1551
  ldv___ldv_spin_unlock_31(& mos7840_port->pool_lock);
#line 1553
  if ((unsigned long )urb == (unsigned long )((struct urb *)0)) {
#line 1554
    if (debug != 0) {
#line 1554
      printk("<7>%s: %s - no more free urbs\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_write");
    } else {

    }
#line 1555
    goto exit;
  } else {

  }
#line 1558
  if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1559
    urb->transfer_buffer = kmalloc(32UL, 208U);
#line 1562
    if ((unsigned long )urb->transfer_buffer == (unsigned long )((void *)0)) {
#line 1563
      printk("<3>mos7840: %s no more kernel memory...\n", "mos7840_write");
#line 1564
      goto exit;
    } else {

    }
  } else {

  }
#line 1567
  _min1 = count;
#line 1567
  _min2 = 32;
#line 1567
  transfer_size = _min1 < _min2 ? _min1 : _min2;
#line 1569
  __len = (size_t )transfer_size;
#line 1569
  __ret = __builtin_memcpy(urb->transfer_buffer, (void const   *)current_position,
                           __len);
#line 1572
  tmp___1 = __create_pipe(serial->dev, (unsigned int )port->bulk_out_endpointAddress);
#line 1572
  usb_fill_bulk_urb(urb, serial->dev, tmp___1 | 3221225472U, urb->transfer_buffer,
                    transfer_size, & mos7840_bulk_out_data_callback, (void *)mos7840_port);
#line 1580
  data1 = (unsigned char *)urb->transfer_buffer;
#line 1581
  if (debug != 0) {
#line 1581
    printk("<7>%s: \nbulkout endpoint is %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->bulk_out_endpointAddress);
  } else {

  }
#line 1584
  status = usb_submit_urb(urb, 32U);
#line 1586
  if (status != 0) {
#line 1587
    mos7840_port->busy[i] = 0;
#line 1588
    printk("<3>mos7840: %s - usb_submit_urb(write bulk) failed with status = %d\n",
           "mos7840_write", status);
#line 1590
    bytes_sent = status;
#line 1591
    goto exit;
  } else {

  }
#line 1593
  bytes_sent = transfer_size;
#line 1594
  mos7840_port->icount.tx = mos7840_port->icount.tx + (__u32 )transfer_size;
#line 1595
  __asm__  volatile   ("": : : "memory");
#line 1596
  if (debug != 0) {
#line 1596
    printk("<7>%s: mos7840_port->icount.tx is %d:\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           mos7840_port->icount.tx);
  } else {

  }
  exit: ;
#line 1598
  return (bytes_sent);
}
}
#line 1608 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_throttle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  int status ;
  int tmp ;
  unsigned char stop_char ;

  {
#line 1610
  port = (struct usb_serial_port *)tty->driver_data;
#line 1614
  tmp = mos7840_port_paranoia_check(port, "mos7840_throttle");
#line 1614
  if (tmp != 0) {
#line 1615
    if (debug != 0) {
#line 1615
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1616
    return;
  } else {

  }
#line 1619
  if (debug != 0) {
#line 1619
    printk("<7>%s: - port %d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )port->number);
  } else {

  }
#line 1621
  mos7840_port = mos7840_get_port_private(port);
#line 1623
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1624
    return;
  } else {

  }
#line 1626
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1627
    if (debug != 0) {
#line 1627
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"port not opened");
    } else {

    }
#line 1628
    return;
  } else {

  }
#line 1631
  if (debug != 0) {
#line 1631
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1634
  if (((tty->termios)->c_iflag & 4096U) != 0U) {
#line 1635
    stop_char = (tty->termios)->c_cc[9];
#line 1636
    status = mos7840_write(tty, port, (unsigned char const   *)(& stop_char), 1);
#line 1637
    if (status <= 0) {
#line 1638
      return;
    } else {

    }
  } else {

  }
#line 1641
  if ((int )(tty->termios)->c_cflag < 0) {
#line 1642
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 253U;
#line 1643
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1645
    if (status < 0) {
#line 1646
      return;
    } else {

    }
  } else {

  }
#line 1649
  return;
}
}
#line 1658 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_unthrottle(struct tty_struct *tty ) 
{ 
  struct usb_serial_port *port ;
  int status ;
  struct moschip_port *mos7840_port ;
  struct moschip_port *tmp ;
  int tmp___0 ;
  unsigned char start_char ;

  {
#line 1660
  port = (struct usb_serial_port *)tty->driver_data;
#line 1662
  tmp = mos7840_get_port_private(port);
#line 1662
  mos7840_port = tmp;
#line 1664
  tmp___0 = mos7840_port_paranoia_check(port, "mos7840_unthrottle");
#line 1664
  if (tmp___0 != 0) {
#line 1665
    if (debug != 0) {
#line 1665
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1666
    return;
  } else {

  }
#line 1669
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1670
    return;
  } else {

  }
#line 1672
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1673
    if (debug != 0) {
#line 1673
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_unthrottle");
    } else {

    }
#line 1674
    return;
  } else {

  }
#line 1677
  if (debug != 0) {
#line 1677
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1680
  if (((tty->termios)->c_iflag & 4096U) != 0U) {
#line 1681
    start_char = (tty->termios)->c_cc[8];
#line 1682
    status = mos7840_write(tty, port, (unsigned char const   *)(& start_char), 1);
#line 1683
    if (status <= 0) {
#line 1684
      return;
    } else {

    }
  } else {

  }
#line 1688
  if ((int )(tty->termios)->c_cflag < 0) {
#line 1689
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 2U);
#line 1690
    status = mos7840_set_uart_reg(port, 4, (int )mos7840_port->shadowMCR);
#line 1692
    if (status < 0) {
#line 1693
      return;
    } else {

    }
  } else {

  }
#line 1695
  return;
}
}
#line 1697 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmget(struct tty_struct *tty , struct file *file ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int result ;
  __u16 msr ;
  __u16 mcr ;
  int status ;

  {
#line 1699
  port = (struct usb_serial_port *)tty->driver_data;
#line 1705
  mos7840_port = mos7840_get_port_private(port);
#line 1707
  if (debug != 0) {
#line 1707
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmget", (int )port->number);
  } else {

  }
#line 1709
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1710
    return (-19);
  } else {

  }
#line 1712
  status = mos7840_get_uart_reg(port, 6, & msr);
#line 1713
  status = mos7840_get_uart_reg(port, 4, & mcr);
#line 1714
  result = (unsigned int )((((((((int )mcr & 1 ? 2 : 0) | (((int )mcr & 2) != 0 ? 4 : 0)) | (((int )mcr & 16) != 0 ? 32768 : 0)) | (((int )msr & 16) != 0 ? 32 : 0)) | (((int )msr & 128) != 0 ? 64 : 0)) | (((int )msr & 64) != 0 ? 128 : 0)) | (((int )msr & 32) != 0 ? 256 : 0));
#line 1722
  if (debug != 0) {
#line 1722
    printk("<7>%s: %s - 0x%04X\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmget", result);
  } else {

  }
#line 1724
  return ((int )result);
}
}
#line 1727 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_tiocmset(struct tty_struct *tty , struct file *file , unsigned int set ,
                            unsigned int clear ) 
{ 
  struct usb_serial_port *port ;
  struct moschip_port *mos7840_port ;
  unsigned int mcr ;
  int status ;

  {
#line 1730
  port = (struct usb_serial_port *)tty->driver_data;
#line 1735
  if (debug != 0) {
#line 1735
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_tiocmset", (int )port->number);
  } else {

  }
#line 1737
  mos7840_port = mos7840_get_port_private(port);
#line 1739
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1740
    return (-19);
  } else {

  }
#line 1743
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 1744
  if ((clear & 4U) != 0U) {
#line 1745
    mcr = mcr & 4294967293U;
  } else {

  }
#line 1746
  if ((clear & 2U) != 0U) {
#line 1747
    mcr = mcr & 4294967294U;
  } else {

  }
#line 1748
  if ((clear & 32768U) != 0U) {
#line 1749
    mcr = mcr & 4294967279U;
  } else {

  }
#line 1751
  if ((set & 4U) != 0U) {
#line 1752
    mcr = mcr | 2U;
  } else {

  }
#line 1753
  if ((set & 2U) != 0U) {
#line 1754
    mcr = mcr | 1U;
  } else {

  }
#line 1755
  if ((set & 32768U) != 0U) {
#line 1756
    mcr = mcr | 16U;
  } else {

  }
#line 1758
  mos7840_port->shadowMCR = (__u8 )mcr;
#line 1760
  status = mos7840_set_uart_reg(port, 4, (int )((__u16 )mcr));
#line 1761
  if (status < 0) {
#line 1762
    if (debug != 0) {
#line 1762
      printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1763
    return (status);
  } else {

  }
#line 1766
  return (0);
}
}
#line 1774 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_baud_rate_divisor(int baudRate , int *divisor , __u16 *clk_sel_val ) 
{ 


  {
#line 1778
  if (debug != 0) {
#line 1778
    printk("<7>%s: %s - %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_calc_baud_rate_divisor", baudRate);
  } else {

  }
#line 1780
  if (baudRate <= 115200) {
#line 1781
    *divisor = 115200 / baudRate;
#line 1782
    *clk_sel_val = 0U;
  } else {

  }
#line 1784
  if (baudRate > 115200 && baudRate <= 230400) {
#line 1785
    *divisor = 230400 / baudRate;
#line 1786
    *clk_sel_val = 16U;
  } else
#line 1787
  if (baudRate > 230400 && baudRate <= 403200) {
#line 1788
    *divisor = 403200 / baudRate;
#line 1789
    *clk_sel_val = 32U;
  } else
#line 1790
  if (baudRate > 403200 && baudRate <= 460800) {
#line 1791
    *divisor = 460800 / baudRate;
#line 1792
    *clk_sel_val = 48U;
  } else
#line 1793
  if (baudRate > 460800 && baudRate <= 806400) {
#line 1794
    *divisor = 806400 / baudRate;
#line 1795
    *clk_sel_val = 64U;
  } else
#line 1796
  if (baudRate > 806400 && baudRate <= 921600) {
#line 1797
    *divisor = 921600 / baudRate;
#line 1798
    *clk_sel_val = 80U;
  } else
#line 1799
  if (baudRate > 921600 && baudRate <= 1572864) {
#line 1800
    *divisor = 1572864 / baudRate;
#line 1801
    *clk_sel_val = 96U;
  } else
#line 1802
  if (baudRate > 1572864 && baudRate <= 3145728) {
#line 1803
    *divisor = 3145728 / baudRate;
#line 1804
    *clk_sel_val = 112U;
  } else {

  }
#line 1806
  return (0);
}
}
#line 1846 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_send_cmd_write_baud_rate(struct moschip_port *mos7840_port , int baudRate ) 
{ 
  int divisor ;
  int status ;
  __u16 Data ;
  unsigned char number ;
  __u16 clk_sel_val ;
  struct usb_serial_port *port ;
  int tmp ;
  int tmp___0 ;

  {
#line 1849
  divisor = 0;
#line 1856
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1857
    return (-1);
  } else {

  }
#line 1859
  port = mos7840_port->port;
#line 1860
  tmp = mos7840_port_paranoia_check(port, "mos7840_send_cmd_write_baud_rate");
#line 1860
  if (tmp != 0) {
#line 1861
    if (debug != 0) {
#line 1861
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1862
    return (-1);
  } else {

  }
#line 1865
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_send_cmd_write_baud_rate");
#line 1865
  if (tmp___0 != 0) {
#line 1866
    if (debug != 0) {
#line 1866
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 1867
    return (-1);
  } else {

  }
#line 1870
  if (debug != 0) {
#line 1870
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 1872
  number = (int )(mos7840_port->port)->number - (int )((mos7840_port->port)->serial)->minor;
#line 1874
  if (debug != 0) {
#line 1874
    printk("<7>%s: %s - port = %d, baud = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_send_cmd_write_baud_rate", (int )(mos7840_port->port)->number,
           baudRate);
  } else {

  }
#line 1907
  clk_sel_val = 0U;
#line 1908
  Data = 0U;
#line 1909
  status = mos7840_calc_baud_rate_divisor(baudRate, & divisor, & clk_sel_val);
#line 1911
  status = mos7840_get_reg_sync(port, (int )mos7840_port->SpRegOffset, & Data);
#line 1913
  if (status < 0) {
#line 1914
    if (debug != 0) {
#line 1914
      printk("<7>%s: reading spreg failed in set_serial_baud\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1915
    return (-1);
  } else {

  }
#line 1917
  Data = (__u16 )(((int )((short )Data) & 143) | (int )((short )clk_sel_val));
#line 1918
  status = mos7840_set_reg_sync(port, (int )mos7840_port->SpRegOffset, (int )Data);
#line 1920
  if (status < 0) {
#line 1921
    if (debug != 0) {
#line 1921
      printk("<7>%s: Writing spreg failed in set_serial_baud\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 1922
    return (-1);
  } else {

  }
#line 1926
  if (status != 0) {
#line 1927
    printk("<3>mos7840: %s - bad baud rate\n", "mos7840_send_cmd_write_baud_rate");
#line 1928
    if (debug != 0) {
#line 1928
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"bad baud rate");
    } else {

    }
#line 1929
    return (status);
  } else {

  }
#line 1932
  Data = (__u16 )((unsigned int )mos7840_port->shadowLCR | 128U);
#line 1933
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1934
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1937
  Data = (__u16 )((unsigned char )divisor);
#line 1938
  if (debug != 0) {
#line 1938
    printk("<7>%s: set_serial_baud Value to write DLL is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )Data);
  } else {

  }
#line 1939
  mos7840_set_uart_reg(port, 0, (int )Data);
#line 1941
  Data = (__u16 )((unsigned char )((divisor & 65280) >> 8));
#line 1942
  if (debug != 0) {
#line 1942
    printk("<7>%s: set_serial_baud Value to write DLM is %x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )Data);
  } else {

  }
#line 1943
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 1946
  Data = (unsigned int )((__u16 )mos7840_port->shadowLCR) & 65407U;
#line 1947
  mos7840_port->shadowLCR = (__u8 )Data;
#line 1948
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 1951
  return (status);
}
}
#line 1960 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_change_port_settings(struct tty_struct *tty , struct moschip_port *mos7840_port ,
                                         struct ktermios *old_termios ) 
{ 
  int baud ;
  unsigned int cflag ;
  unsigned int iflag ;
  __u8 lData ;
  __u8 lParity ;
  __u8 lStop ;
  int status ;
  __u16 Data ;
  struct usb_serial_port *port ;
  struct usb_serial *serial ;
  int tmp ;
  int tmp___0 ;
  speed_t tmp___1 ;

  {
#line 1974
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 1975
    return;
  } else {

  }
#line 1977
  port = mos7840_port->port;
#line 1979
  tmp = mos7840_port_paranoia_check(port, "mos7840_change_port_settings");
#line 1979
  if (tmp != 0) {
#line 1980
    if (debug != 0) {
#line 1980
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 1981
    return;
  } else {

  }
#line 1984
  tmp___0 = mos7840_serial_paranoia_check(port->serial, "mos7840_change_port_settings");
#line 1984
  if (tmp___0 != 0) {
#line 1985
    if (debug != 0) {
#line 1985
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 1986
    return;
  } else {

  }
#line 1989
  serial = port->serial;
#line 1991
  if (debug != 0) {
#line 1991
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_change_port_settings", (int )(mos7840_port->port)->number);
  } else {

  }
#line 1993
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 1994
    if (debug != 0) {
#line 1994
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
#line 1995
    return;
  } else {

  }
#line 1998
  if (debug != 0) {
#line 1998
    printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering .......... \n");
  } else {

  }
#line 2000
  lData = 3U;
#line 2001
  lStop = 0U;
#line 2002
  lParity = 0U;
#line 2004
  cflag = (tty->termios)->c_cflag;
#line 2005
  iflag = (tty->termios)->c_iflag;
#line 2008
  if ((cflag & 48U) != 0U) {
#line 2009
    switch (cflag & 48U) {
    case 0U: 
#line 2011
    lData = 0U;
#line 2012
    goto ldv_18675;
    case 16U: 
#line 2015
    lData = 1U;
#line 2016
    goto ldv_18675;
    case 32U: 
#line 2019
    lData = 2U;
#line 2020
    goto ldv_18675;
    default: ;
    case 48U: 
#line 2023
    lData = 3U;
#line 2024
    goto ldv_18675;
    }
    ldv_18675: ;
  } else {

  }
#line 2028
  if ((cflag & 256U) != 0U) {
#line 2029
    if ((cflag & 512U) != 0U) {
#line 2030
      lParity = 8U;
#line 2031
      if (debug != 0) {
#line 2031
        printk("<7>%s: %s - parity = odd\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               "mos7840_change_port_settings");
      } else {

      }
    } else {
#line 2033
      lParity = 24U;
#line 2034
      if (debug != 0) {
#line 2034
        printk("<7>%s: %s - parity = even\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               "mos7840_change_port_settings");
      } else {

      }
    }
  } else
#line 2038
  if (debug != 0) {
#line 2038
    printk("<7>%s: %s - parity = none\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_change_port_settings");
  } else {

  }
#line 2041
  if ((cflag & 1073741824U) != 0U) {
#line 2042
    lParity = (__u8 )((unsigned int )lParity | 32U);
  } else {

  }
#line 2045
  if ((cflag & 64U) != 0U) {
#line 2046
    lStop = 4U;
#line 2047
    if (debug != 0) {
#line 2047
      printk("<7>%s: %s - stop bits = 2\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
  } else {
#line 2049
    lStop = 0U;
#line 2050
    if (debug != 0) {
#line 2050
      printk("<7>%s: %s - stop bits = 1\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_change_port_settings");
    } else {

    }
  }
#line 2054
  mos7840_port->shadowLCR = (unsigned int )mos7840_port->shadowLCR & 192U;
#line 2056
  mos7840_port->shadowLCR = (__u8 )((int )mos7840_port->shadowLCR | (((int )lData | (int )lParity) | (int )lStop));
#line 2058
  if (debug != 0) {
#line 2058
    printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is %x\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 2061
  Data = 0U;
#line 2062
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 2064
  Data = 0U;
#line 2065
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 2067
  Data = 207U;
#line 2068
  mos7840_set_uart_reg(port, 2, (int )Data);
#line 2071
  Data = (__u16 )mos7840_port->shadowLCR;
#line 2073
  mos7840_set_uart_reg(port, 3, (int )Data);
#line 2075
  Data = 11U;
#line 2076
  mos7840_port->shadowMCR = (__u8 )Data;
#line 2077
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2078
  Data = 11U;
#line 2079
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2083
  mos7840_port->shadowMCR = 8U;
#line 2084
  if ((cflag & 4111U) != 0U) {
#line 2085
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 3U);
  } else {

  }
#line 2087
  if ((int )cflag < 0) {
#line 2088
    mos7840_port->shadowMCR = (__u8 )((unsigned int )mos7840_port->shadowMCR | 32U);
  } else {
#line 2090
    mos7840_port->shadowMCR = (unsigned int )mos7840_port->shadowMCR & 223U;
  }
#line 2092
  Data = (__u16 )mos7840_port->shadowMCR;
#line 2093
  mos7840_set_uart_reg(port, 4, (int )Data);
#line 2096
  tmp___1 = tty_get_baud_rate(tty);
#line 2096
  baud = (int )tmp___1;
#line 2098
  if (baud == 0) {
#line 2100
    if (debug != 0) {
#line 2100
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Picked default baud...");
    } else {

    }
#line 2101
    baud = 9600;
  } else {

  }
#line 2104
  if (debug != 0) {
#line 2104
    printk("<7>%s: %s - baud rate = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_change_port_settings", baud);
  } else {

  }
#line 2105
  status = mos7840_send_cmd_write_baud_rate(mos7840_port, baud);
#line 2108
  Data = 12U;
#line 2109
  mos7840_set_uart_reg(port, 1, (int )Data);
#line 2111
  if ((mos7840_port->read_urb)->status != -115) {
#line 2112
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2114
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2116
    if (status != 0) {
#line 2117
      if (debug != 0) {
#line 2117
        printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               status);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2121
  __wake_up(& mos7840_port->delta_msr_wait, 3U, 1, 0);
#line 2122
  mos7840_port->delta_msr_cond = 1;
#line 2123
  if (debug != 0) {
#line 2123
    printk("<7>%s: mos7840_change_port_settings mos7840_port->shadowLCR is End %x\n\n",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )mos7840_port->shadowLCR);
  } else {

  }
#line 2126
  return;
}
}
#line 2135 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_set_termios(struct tty_struct *tty , struct usb_serial_port *port ,
                                struct ktermios *old_termios ) 
{ 
  int status ;
  unsigned int cflag ;
  struct usb_serial *serial ;
  struct moschip_port *mos7840_port ;
  int tmp ;
  int tmp___0 ;

  {
#line 2143
  if (debug != 0) {
#line 2143
    printk("<7>%s: mos7840_set_termios: START\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
  } else {

  }
#line 2144
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_termios");
#line 2144
  if (tmp != 0) {
#line 2145
    if (debug != 0) {
#line 2145
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2146
    return;
  } else {

  }
#line 2149
  serial = port->serial;
#line 2151
  tmp___0 = mos7840_serial_paranoia_check(serial, "mos7840_set_termios");
#line 2151
  if (tmp___0 != 0) {
#line 2152
    if (debug != 0) {
#line 2152
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Serial \n");
    } else {

    }
#line 2153
    return;
  } else {

  }
#line 2156
  mos7840_port = mos7840_get_port_private(port);
#line 2158
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2159
    return;
  } else {

  }
#line 2161
  if ((int )((signed char )mos7840_port->open) == 0) {
#line 2162
    if (debug != 0) {
#line 2162
      printk("<7>%s: %s - port not opened\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_set_termios");
    } else {

    }
#line 2163
    return;
  } else {

  }
#line 2166
  if (debug != 0) {
#line 2166
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"setting termios - ");
  } else {

  }
#line 2168
  cflag = (tty->termios)->c_cflag;
#line 2170
  if (debug != 0) {
#line 2170
    printk("<7>%s: %s - clfag %08x iflag %08x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", (tty->termios)->c_cflag, (tty->termios)->c_iflag & 31U);
  } else {

  }
#line 2172
  if (debug != 0) {
#line 2172
    printk("<7>%s: %s - old clfag %08x old iflag %08x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", old_termios->c_cflag, old_termios->c_iflag & 31U);
  } else {

  }
#line 2174
  if (debug != 0) {
#line 2174
    printk("<7>%s: %s - port %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_set_termios", (int )port->number);
  } else {

  }
#line 2178
  mos7840_change_port_settings(tty, mos7840_port, old_termios);
#line 2180
  if ((unsigned long )mos7840_port->read_urb == (unsigned long )((struct urb *)0)) {
#line 2181
    if (debug != 0) {
#line 2181
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"URB KILLED !!!!!\n");
    } else {

    }
#line 2182
    return;
  } else {

  }
#line 2185
  if ((mos7840_port->read_urb)->status != -115) {
#line 2186
    (mos7840_port->read_urb)->dev = serial->dev;
#line 2187
    status = usb_submit_urb(mos7840_port->read_urb, 32U);
#line 2188
    if (status != 0) {
#line 2189
      if (debug != 0) {
#line 2189
        printk("<7>%s:  usb_submit_urb(read bulk) failed, status = %d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               status);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2193
  return;
}
}
#line 2207 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_lsr_info(struct tty_struct *tty , unsigned int *value ) 
{ 
  int count ;
  unsigned int result ;
  unsigned long tmp ;

  {
#line 2211
  result = 0U;
#line 2213
  count = mos7840_chars_in_buffer(tty);
#line 2214
  if (count == 0) {
#line 2215
    if (debug != 0) {
#line 2215
      printk("<7>%s: %s -- Empty\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             "mos7840_get_lsr_info");
    } else {

    }
#line 2216
    result = 1U;
  } else {

  }
#line 2219
  tmp = copy_to_user((void *)value, (void const   *)(& result), 4U);
#line 2219
  if (tmp != 0UL) {
#line 2220
    return (-14);
  } else {

  }
#line 2221
  return (0);
}
}
#line 2231 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_set_modem_info(struct moschip_port *mos7840_port , unsigned int cmd ,
                                  unsigned int *value ) 
{ 
  unsigned int mcr ;
  unsigned int arg ;
  __u16 Data ;
  int status ;
  struct usb_serial_port *port ;
  int tmp ;
  unsigned long tmp___0 ;

  {
#line 2240
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2241
    return (-1);
  } else {

  }
#line 2243
  port = mos7840_port->port;
#line 2244
  tmp = mos7840_port_paranoia_check(port, "mos7840_set_modem_info");
#line 2244
  if (tmp != 0) {
#line 2245
    if (debug != 0) {
#line 2245
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2246
    return (-1);
  } else {

  }
#line 2249
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 2251
  tmp___0 = copy_from_user((void *)(& arg), (void const   *)value, 4U);
#line 2251
  if (tmp___0 != 0UL) {
#line 2252
    return (-14);
  } else {

  }
#line 2254
  switch (cmd) {
  case 21526U: ;
#line 2256
  if ((arg & 4U) != 0U) {
#line 2257
    mcr = mcr | 2U;
  } else {

  }
#line 2258
  if ((arg & 2U) != 0U) {
#line 2259
    mcr = mcr | 2U;
  } else {

  }
#line 2260
  if ((arg & 32768U) != 0U) {
#line 2261
    mcr = mcr | 16U;
  } else {

  }
#line 2262
  goto ldv_18709;
  case 21527U: ;
#line 2265
  if ((arg & 4U) != 0U) {
#line 2266
    mcr = mcr & 4294967293U;
  } else {

  }
#line 2267
  if ((arg & 2U) != 0U) {
#line 2268
    mcr = mcr & 4294967293U;
  } else {

  }
#line 2269
  if ((arg & 32768U) != 0U) {
#line 2270
    mcr = mcr & 4294967279U;
  } else {

  }
#line 2271
  goto ldv_18709;
  case 21528U: 
#line 2276
  mcr = mcr & 4294967276U;
#line 2277
  mcr = ((arg & 4U) != 0U ? 2U : 0U) | mcr;
#line 2278
  mcr = ((arg & 2U) != 0U ? 1U : 0U) | mcr;
#line 2279
  mcr = ((arg & 32768U) != 0U ? 16U : 0U) | mcr;
#line 2280
  goto ldv_18709;
  }
  ldv_18709: 
#line 2283
  mos7840_port->shadowMCR = (__u8 )mcr;
#line 2285
  Data = (__u16 )mos7840_port->shadowMCR;
#line 2286
  status = mos7840_set_uart_reg(port, 4, (int )Data);
#line 2287
  if (status < 0) {
#line 2288
    if (debug != 0) {
#line 2288
      printk("<7>%s: setting MODEM_CONTROL_REGISTER Failed\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared");
    } else {

    }
#line 2289
    return (-1);
  } else {

  }
#line 2292
  return (0);
}
}
#line 2300 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_modem_info(struct moschip_port *mos7840_port , unsigned int *value ) 
{ 
  unsigned int result ;
  __u16 msr ;
  unsigned int mcr ;
  unsigned long tmp ;

  {
#line 2303
  result = 0U;
#line 2305
  mcr = (unsigned int )mos7840_port->shadowMCR;
#line 2306
  mos7840_get_uart_reg(mos7840_port->port, 6, & msr);
#line 2308
  result = (unsigned int )(((((((int )mcr & 1 ? 2 : 0) | ((mcr & 2U) != 0U ? 4 : 0)) | (((int )msr & 16) != 0 ? 32 : 0)) | (((int )msr & 128) != 0 ? 64 : 0)) | (((int )msr & 64) != 0 ? 128 : 0)) | (((int )msr & 32) != 0 ? 256 : 0));
#line 2315
  if (debug != 0) {
#line 2315
    printk("<7>%s: %s -- %x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_get_modem_info", result);
  } else {

  }
#line 2317
  tmp = copy_to_user((void *)value, (void const   *)(& result), 4U);
#line 2317
  if (tmp != 0UL) {
#line 2318
    return (-14);
  } else {

  }
#line 2319
  return (0);
}
}
#line 2327 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_get_serial_info(struct moschip_port *mos7840_port , struct serial_struct *retinfo ) 
{ 
  struct serial_struct tmp ;
  unsigned long tmp___0 ;

  {
#line 2332
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2333
    return (-1);
  } else {

  }
#line 2335
  if ((unsigned long )retinfo == (unsigned long )((struct serial_struct *)0)) {
#line 2336
    return (-14);
  } else {

  }
#line 2338
  memset((void *)(& tmp), 0, 72UL);
#line 2340
  tmp.type = 4;
#line 2341
  tmp.line = (int )((mos7840_port->port)->serial)->minor;
#line 2342
  tmp.port = (unsigned int )(mos7840_port->port)->number;
#line 2343
  tmp.irq = 0;
#line 2344
  tmp.flags = 192;
#line 2345
  tmp.xmit_fifo_size = 512;
#line 2346
  tmp.baud_base = 9600;
#line 2347
  tmp.close_delay = 1250U;
#line 2348
  tmp.closing_wait = 7500U;
#line 2350
  tmp___0 = copy_to_user((void *)retinfo, (void const   *)(& tmp), 72U);
#line 2350
  if (tmp___0 != 0UL) {
#line 2351
    return (-14);
  } else {

  }
#line 2352
  return (0);
}
}
#line 2360 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_ioctl(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                         unsigned long arg ) 
{ 
  struct usb_serial_port *port ;
  void *argp ;
  struct moschip_port *mos7840_port ;
  struct async_icount cnow ;
  struct async_icount cprev ;
  struct serial_icounter_struct icount ;
  int mosret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  unsigned long tmp___8 ;

  {
#line 2363
  port = (struct usb_serial_port *)tty->driver_data;
#line 2364
  argp = (void *)arg;
#line 2370
  mosret = 0;
#line 2372
  tmp = mos7840_port_paranoia_check(port, "mos7840_ioctl");
#line 2372
  if (tmp != 0) {
#line 2373
    if (debug != 0) {
#line 2373
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid port \n");
    } else {

    }
#line 2374
    return (-1);
  } else {

  }
#line 2377
  mos7840_port = mos7840_get_port_private(port);
#line 2379
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2380
    return (-1);
  } else {

  }
#line 2382
  if (debug != 0) {
#line 2382
    printk("<7>%s: %s - port %d, cmd = 0x%x\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number, cmd);
  } else {

  }
#line 2384
  switch (cmd) {
  case 21593U: ;
#line 2388
  if (debug != 0) {
#line 2388
    printk("<7>%s: %s (%d) TIOCSERGETLSR\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2389
  tmp___0 = mos7840_get_lsr_info(tty, (unsigned int *)argp);
#line 2389
  return (tmp___0);
#line 2390
  return (0);
  case 21526U: ;
  case 21527U: ;
  case 21528U: ;
#line 2396
  if (debug != 0) {
#line 2396
    printk("<7>%s: %s (%d) TIOCMSET/TIOCMBIC/TIOCMSET\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2398
  mosret = mos7840_set_modem_info(mos7840_port, cmd, (unsigned int *)argp);
#line 2400
  return (mosret);
  case 21525U: ;
#line 2403
  if (debug != 0) {
#line 2403
    printk("<7>%s: %s (%d) TIOCMGET\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2404
  tmp___1 = mos7840_get_modem_info(mos7840_port, (unsigned int *)argp);
#line 2404
  return (tmp___1);
  case 21534U: ;
#line 2407
  if (debug != 0) {
#line 2407
    printk("<7>%s: %s (%d) TIOCGSERIAL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2408
  tmp___2 = mos7840_get_serial_info(mos7840_port, (struct serial_struct *)argp);
#line 2408
  return (tmp___2);
  case 21535U: ;
#line 2411
  if (debug != 0) {
#line 2411
    printk("<7>%s: %s (%d) TIOCSSERIAL\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2412
  goto ldv_18746;
  case 21596U: ;
#line 2415
  if (debug != 0) {
#line 2415
    printk("<7>%s: %s (%d) TIOCMIWAIT\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number);
  } else {

  }
#line 2416
  cprev = mos7840_port->icount;
  ldv_18754: 
#line 2419
  mos7840_port->delta_msr_cond = 0;
#line 2420
  __ret = 0;
#line 2420
  if (mos7840_port->delta_msr_cond != 1) {
#line 2420
    tmp___3 = get_current();
#line 2420
    __wait.flags = 0U;
#line 2420
    __wait.private = (void *)tmp___3;
#line 2420
    __wait.func = & autoremove_wake_function;
#line 2420
    __wait.task_list.next = & __wait.task_list;
#line 2420
    __wait.task_list.prev = & __wait.task_list;
    ldv_18752: 
#line 2420
    prepare_to_wait(& mos7840_port->delta_msr_wait, & __wait, 1);
#line 2420
    if (mos7840_port->delta_msr_cond == 1) {
#line 2420
      goto ldv_18750;
    } else {

    }
#line 2420
    tmp___4 = get_current();
#line 2420
    tmp___5 = signal_pending(tmp___4);
#line 2420
    if (tmp___5 == 0) {
#line 2420
      schedule();
#line 2420
      goto ldv_18751;
    } else {

    }
#line 2420
    __ret = -512;
#line 2420
    goto ldv_18750;
    ldv_18751: ;
#line 2420
    goto ldv_18752;
    ldv_18750: 
#line 2420
    finish_wait(& mos7840_port->delta_msr_wait, & __wait);
  } else {

  }
#line 2425
  tmp___6 = get_current();
#line 2425
  tmp___7 = signal_pending(tmp___6);
#line 2425
  if (tmp___7 != 0) {
#line 2426
    return (-512);
  } else {

  }
#line 2427
  cnow = mos7840_port->icount;
#line 2428
  __asm__  volatile   ("": : : "memory");
#line 2429
  if (((cnow.rng == cprev.rng && cnow.dsr == cprev.dsr) && cnow.dcd == cprev.dcd) && cnow.cts == cprev.cts) {
#line 2431
    return (-5);
  } else {

  }
#line 2432
  if (((((arg & 128UL) != 0UL && cnow.rng != cprev.rng) || ((arg & 256UL) != 0UL && cnow.dsr != cprev.dsr)) || ((arg & 64UL) != 0UL && cnow.dcd != cprev.dcd)) || ((arg & 32UL) != 0UL && cnow.cts != cprev.cts)) {
#line 2436
    return (0);
  } else {

  }
#line 2438
  cprev = cnow;
#line 2439
  goto ldv_18754;
  case 21597U: 
#line 2444
  cnow = mos7840_port->icount;
#line 2445
  __asm__  volatile   ("": : : "memory");
#line 2446
  icount.cts = (int )cnow.cts;
#line 2447
  icount.dsr = (int )cnow.dsr;
#line 2448
  icount.rng = (int )cnow.rng;
#line 2449
  icount.dcd = (int )cnow.dcd;
#line 2450
  icount.rx = (int )cnow.rx;
#line 2451
  icount.tx = (int )cnow.tx;
#line 2452
  icount.frame = (int )cnow.frame;
#line 2453
  icount.overrun = (int )cnow.overrun;
#line 2454
  icount.parity = (int )cnow.parity;
#line 2455
  icount.brk = (int )cnow.brk;
#line 2456
  icount.buf_overrun = (int )cnow.buf_overrun;
#line 2458
  if (debug != 0) {
#line 2458
    printk("<7>%s: %s (%d) TIOCGICOUNT RX=%d, TX=%d\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           "mos7840_ioctl", (int )port->number, icount.rx, icount.tx);
  } else {

  }
#line 2460
  tmp___8 = copy_to_user(argp, (void const   *)(& icount), 80U);
#line 2460
  if (tmp___8 != 0UL) {
#line 2461
    return (-14);
  } else {

  }
#line 2462
  return (0);
  default: ;
#line 2464
  goto ldv_18746;
  }
  ldv_18746: ;
#line 2466
  return (-515);
}
}
#line 2469 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_calc_num_ports(struct usb_serial *serial ) 
{ 
  int mos7840_num_ports ;

  {
#line 2471
  mos7840_num_ports = 0;
#line 2473
  if (debug != 0) {
#line 2473
    printk("<7>%s: numberofendpoints: %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints);
  } else {

  }
#line 2475
  if (debug != 0) {
#line 2475
    printk("<7>%s: numberofendpoints: %d \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )((serial->interface)->altsetting)->desc.bNumEndpoints);
  } else {

  }
#line 2477
  if ((unsigned int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 5U) {
#line 2478
    serial->num_ports = 2U;
#line 2478
    mos7840_num_ports = 2;
  } else
#line 2479
  if ((unsigned int )((serial->interface)->cur_altsetting)->desc.bNumEndpoints == 9U) {
#line 2480
    serial->num_bulk_in = 4;
#line 2481
    serial->num_bulk_out = 4;
#line 2482
    serial->num_ports = 4U;
#line 2482
    mos7840_num_ports = 4;
  } else {

  }
#line 2485
  return (mos7840_num_ports);
}
}
#line 2492 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int mos7840_startup(struct usb_serial *serial ) 
{ 
  struct moschip_port *mos7840_port ;
  struct usb_device *dev ;
  int i ;
  int status ;
  __u16 Data ;
  void *tmp ;
  struct lock_class_key __key ;
  void *tmp___0 ;
  void *tmp___1 ;
  unsigned int tmp___2 ;

  {
#line 2499
  if (debug != 0) {
#line 2499
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_startup :entering..........");
  } else {

  }
#line 2501
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 2502
    if (debug != 0) {
#line 2502
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Handler");
    } else {

    }
#line 2503
    return (-1);
  } else {

  }
#line 2506
  dev = serial->dev;
#line 2508
  if (debug != 0) {
#line 2508
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entering...");
  } else {

  }
#line 2514
  i = 0;
#line 2514
  goto ldv_18774;
  ldv_18773: 
#line 2515
  tmp = kzalloc(480UL, 208U);
#line 2515
  mos7840_port = (struct moschip_port *)tmp;
#line 2516
  if ((unsigned long )mos7840_port == (unsigned long )((struct moschip_port *)0)) {
#line 2517
    printk("<3>mos7840: %s - Out of memory\n", "mos7840_startup");
#line 2518
    status = -12;
#line 2519
    i = i - 1;
#line 2520
    goto error;
  } else {

  }
#line 2527
  mos7840_port->port = serial->port[i];
#line 2528
  mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2529
  __spin_lock_init(& mos7840_port->pool_lock, "&mos7840_port->pool_lock", & __key);
#line 2531
  mos7840_port->port_num = ((int )(serial->port[i])->number - (int )((serial->port[i])->serial)->minor) + 1;
#line 2535
  if (mos7840_port->port_num == 1) {
#line 2536
    mos7840_port->SpRegOffset = 0U;
#line 2537
    mos7840_port->ControlRegOffset = 1U;
#line 2538
    mos7840_port->DcrRegOffset = 4U;
  } else
#line 2539
  if (mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 4U) {
#line 2541
    mos7840_port->SpRegOffset = 8U;
#line 2542
    mos7840_port->ControlRegOffset = 9U;
#line 2543
    mos7840_port->DcrRegOffset = 22U;
  } else
#line 2544
  if (mos7840_port->port_num == 2 && (unsigned int )serial->num_ports == 2U) {
#line 2546
    mos7840_port->SpRegOffset = 10U;
#line 2547
    mos7840_port->ControlRegOffset = 11U;
#line 2548
    mos7840_port->DcrRegOffset = 25U;
  } else
#line 2549
  if (mos7840_port->port_num == 3 && (unsigned int )serial->num_ports == 4U) {
#line 2551
    mos7840_port->SpRegOffset = 10U;
#line 2552
    mos7840_port->ControlRegOffset = 11U;
#line 2553
    mos7840_port->DcrRegOffset = 25U;
  } else
#line 2554
  if (mos7840_port->port_num == 4 && (unsigned int )serial->num_ports == 4U) {
#line 2556
    mos7840_port->SpRegOffset = 12U;
#line 2557
    mos7840_port->ControlRegOffset = 13U;
#line 2558
    mos7840_port->DcrRegOffset = 28U;
  } else {

  }
#line 2560
  mos7840_dump_serial_port(mos7840_port);
#line 2561
  mos7840_set_port_private(serial->port[i], mos7840_port);
#line 2564
  status = mos7840_get_reg_sync(serial->port[i], (int )mos7840_port->ControlRegOffset,
                                & Data);
#line 2566
  if (status < 0) {
#line 2567
    if (debug != 0) {
#line 2567
      printk("<7>%s: Reading ControlReg failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2568
    goto ldv_18772;
  } else
#line 2570
  if (debug != 0) {
#line 2570
    printk("<7>%s: ControlReg Reading success val is %x, status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (int )Data, status);
  } else {

  }
#line 2572
  Data = (__u16 )((unsigned int )Data | 8U);
#line 2573
  Data = (__u16 )((unsigned int )Data | 4U);
#line 2577
  status = mos7840_set_reg_sync(serial->port[i], (int )mos7840_port->ControlRegOffset,
                                (int )Data);
#line 2579
  if (status < 0) {
#line 2580
    if (debug != 0) {
#line 2580
      printk("<7>%s: Writing ControlReg failed(rx_disable) status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2581
    goto ldv_18772;
  } else
#line 2583
  if (debug != 0) {
#line 2583
    printk("<7>%s: ControlReg Writing success(rx_disable) status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2588
  Data = 1U;
#line 2589
  status = mos7840_set_reg_sync(serial->port[i], (int )mos7840_port->DcrRegOffset,
                                (int )Data);
#line 2591
  if (status < 0) {
#line 2592
    if (debug != 0) {
#line 2592
      printk("<7>%s: Writing DCR0 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2593
    goto ldv_18772;
  } else
#line 2595
  if (debug != 0) {
#line 2595
    printk("<7>%s: DCR0 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2597
  Data = 5U;
#line 2598
  status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 1U),
                                (int )Data);
#line 2600
  if (status < 0) {
#line 2601
    if (debug != 0) {
#line 2601
      printk("<7>%s: Writing DCR1 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2602
    goto ldv_18772;
  } else
#line 2604
  if (debug != 0) {
#line 2604
    printk("<7>%s: DCR1 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2606
  Data = 36U;
#line 2607
  status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->DcrRegOffset) + 2U),
                                (int )Data);
#line 2609
  if (status < 0) {
#line 2610
    if (debug != 0) {
#line 2610
      printk("<7>%s: Writing DCR2 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2611
    goto ldv_18772;
  } else
#line 2613
  if (debug != 0) {
#line 2613
    printk("<7>%s: DCR2 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2616
  Data = 0U;
#line 2617
  status = mos7840_set_reg_sync(serial->port[i], 3, (int )Data);
#line 2619
  if (status < 0) {
#line 2620
    if (debug != 0) {
#line 2620
      printk("<7>%s: Writing CLK_START_VALUE_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2621
    goto ldv_18772;
  } else
#line 2623
  if (debug != 0) {
#line 2623
    printk("<7>%s: CLK_START_VALUE_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2625
  Data = 32U;
#line 2626
  status = mos7840_set_reg_sync(serial->port[i], 2, (int )Data);
#line 2628
  if (status < 0) {
#line 2629
    if (debug != 0) {
#line 2629
      printk("<7>%s: Writing CLK_MULTI_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2631
    goto error;
  } else
#line 2633
  if (debug != 0) {
#line 2633
    printk("<7>%s: CLK_MULTI_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2637
  Data = 0U;
#line 2638
  status = mos7840_set_uart_reg(serial->port[i], 7, (int )Data);
#line 2640
  if (status < 0) {
#line 2641
    if (debug != 0) {
#line 2641
      printk("<7>%s: Writing SCRATCH_PAD_REGISTER failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2643
    goto ldv_18772;
  } else
#line 2645
  if (debug != 0) {
#line 2645
    printk("<7>%s: SCRATCH_PAD_REGISTER Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2649
  if (mos7840_port->port_num != 1 && (unsigned int )serial->num_ports == 2U) {
#line 2652
    Data = 255U;
#line 2653
    status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U),
                                  (int )Data);
#line 2656
    if (debug != 0) {
#line 2656
      printk("<7>%s: ZLIP offset%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 58U));
    } else {

    }
#line 2659
    if (status < 0) {
#line 2660
      if (debug != 0) {
#line 2660
        printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               i + 2, status);
      } else {

      }
#line 2662
      goto ldv_18772;
    } else
#line 2664
    if (debug != 0) {
#line 2664
      printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             i + 2, status);
    } else {

    }
  } else {
#line 2667
    Data = 255U;
#line 2668
    status = mos7840_set_reg_sync(serial->port[i], (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 57U),
                                  (int )Data);
#line 2671
    if (debug != 0) {
#line 2671
      printk("<7>%s: ZLIP offset%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (int )((unsigned int )((unsigned short )mos7840_port->port_num) + 57U));
    } else {

    }
#line 2674
    if (status < 0) {
#line 2675
      if (debug != 0) {
#line 2675
        printk("<7>%s: Writing ZLP_REG%d failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
               i + 1, status);
      } else {

      }
#line 2677
      goto ldv_18772;
    } else
#line 2679
    if (debug != 0) {
#line 2679
      printk("<7>%s: ZLP_REG%d Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             i + 1, status);
    } else {

    }
  }
#line 2683
  mos7840_port->control_urb = usb_alloc_urb(0, 208U);
#line 2684
  tmp___0 = kmalloc(16UL, 208U);
#line 2684
  mos7840_port->ctrl_buf = (char *)tmp___0;
#line 2685
  tmp___1 = kmalloc(8UL, 208U);
#line 2685
  mos7840_port->dr = (struct usb_ctrlrequest *)tmp___1;
#line 2687
  if (((unsigned long )mos7840_port->control_urb == (unsigned long )((struct urb *)0) || (unsigned long )mos7840_port->ctrl_buf == (unsigned long )((char *)0)) || (unsigned long )mos7840_port->dr == (unsigned long )((struct usb_ctrlrequest *)0)) {
#line 2689
    status = -12;
#line 2690
    goto error;
  } else {

  }
#line 2514
  i = i + 1;
  ldv_18774: ;
#line 2514
  if ((int )serial->num_ports > i) {
#line 2515
    goto ldv_18773;
  } else {

  }
  ldv_18772: 
#line 2695
  Data = 15U;
#line 2696
  status = mos7840_set_reg_sync(serial->port[0], 62, (int )Data);
#line 2697
  if (status < 0) {
#line 2698
    if (debug != 0) {
#line 2698
      printk("<7>%s: Writing ZLP_REG5 failed status-0x%x\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             status);
    } else {

    }
#line 2699
    goto error;
  } else
#line 2701
  if (debug != 0) {
#line 2701
    printk("<7>%s: ZLP_REG5 Writing success status%d\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           status);
  } else {

  }
#line 2704
  tmp___2 = __create_pipe(serial->dev, 0U);
#line 2704
  usb_control_msg(serial->dev, tmp___2 | 2147483648U, 3, 0, 1, 0, 0, 0, 1250);
#line 2706
  return (0);
  error: ;
#line 2708
  goto ldv_18776;
  ldv_18775: 
#line 2709
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2711
  kfree((void const   *)mos7840_port->dr);
#line 2712
  kfree((void const   *)mos7840_port->ctrl_buf);
#line 2713
  usb_free_urb(mos7840_port->control_urb);
#line 2714
  kfree((void const   *)mos7840_port);
#line 2715
  serial->port[i] = 0;
#line 2708
  i = i - 1;
  ldv_18776: ;
#line 2708
  if (i >= 0) {
#line 2709
    goto ldv_18775;
  } else {

  }

#line 2717
  return (status);
}
}
#line 2725 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void mos7840_shutdown(struct usb_serial *serial ) 
{ 
  int i ;
  struct moschip_port *mos7840_port ;

  {
#line 2730
  if (debug != 0) {
#line 2730
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" shutdown :entering..........");
  } else {

  }
#line 2732
  if ((unsigned long )serial == (unsigned long )((struct usb_serial *)0)) {
#line 2733
    if (debug != 0) {
#line 2733
      printk("<7>%s: %s\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Invalid Handler \n");
    } else {

    }
#line 2734
    return;
  } else {

  }
#line 2742
  i = 0;
#line 2742
  goto ldv_18785;
  ldv_18784: 
#line 2743
  mos7840_port = mos7840_get_port_private(serial->port[i]);
#line 2744
  ldv___ldv_spin_lock_32(& mos7840_port->pool_lock);
#line 2745
  mos7840_port->zombie = 1;
#line 2746
  ldv___ldv_spin_unlock_33(& mos7840_port->pool_lock);
#line 2747
  usb_kill_urb(mos7840_port->control_urb);
#line 2748
  kfree((void const   *)mos7840_port->ctrl_buf);
#line 2749
  kfree((void const   *)mos7840_port->dr);
#line 2750
  kfree((void const   *)mos7840_port);
#line 2751
  mos7840_set_port_private(serial->port[i], 0);
#line 2742
  i = i + 1;
  ldv_18785: ;
#line 2742
  if ((int )serial->num_ports > i) {
#line 2743
    goto ldv_18784;
  } else {

  }

#line 2754
  if (debug != 0) {
#line 2754
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Thank u :: ");
  } else {

  }
#line 2755
  return;
}
}
#line 2758 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_driver io_driver  = 
#line 2758
     {"mos7840", & usb_serial_probe, & usb_serial_disconnect, 0, 0, 0, 0, 0, 0, (struct usb_device_id  const  *)(& moschip_id_table_combined),
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                 0}, 0}, 1U, (unsigned char)0, (unsigned char)0};
#line 2766 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static struct usb_serial_driver moschip7840_4port_device  = 
#line 2766
     {"Moschip 7840/7820 USB Serial Driver", (struct usb_device_id  const  *)(& moschip_port_id_table),
    4, {0, 0}, {"mos7840", 0, & __this_module, 0, 0, 0, 0, 0, 0, 0, 0, 0}, & io_driver,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, 0, & mos7840_startup, & mos7840_calc_num_ports,
    & mos7840_shutdown, 0, 0, 0, 0, & mos7840_open, & mos7840_close, & mos7840_write,
    & mos7840_write_room, & mos7840_ioctl, & mos7840_set_termios, & mos7840_break,
    & mos7840_chars_in_buffer, & mos7840_throttle, & mos7840_unthrottle, & mos7840_tiocmget,
    & mos7840_tiocmset, & mos7840_interrupt_callback, 0, & mos7840_bulk_in_callback,
    0};
#line 2801 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static int moschip7840_init(void) 
{ 
  int retval ;

  {
#line 2805
  if (debug != 0) {
#line 2805
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_init :entering..........");
  } else {

  }
#line 2808
  retval = usb_serial_register(& moschip7840_4port_device);
#line 2810
  if (retval != 0) {
#line 2811
    goto failed_port_device_register;
  } else {

  }
#line 2813
  if (debug != 0) {
#line 2813
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entring...");
  } else {

  }
#line 2814
  printk("<6>mos7840: Moschip 7840/7820 USB Serial Driver 1.3.1\n");
#line 2817
  retval = usb_register(& io_driver);
#line 2818
  if (retval == 0) {
#line 2819
    if (debug != 0) {
#line 2819
      printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
             (char *)"Leaving...");
    } else {

    }
#line 2820
    return (0);
  } else {

  }
#line 2822
  usb_serial_deregister(& moschip7840_4port_device);
  failed_port_device_register: ;
#line 2824
  return (retval);
}
}
#line 2831 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
static void moschip7840_exit(void) 
{ 


  {
#line 2834
  if (debug != 0) {
#line 2834
    printk("<7>%s: %s \n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)" mos7840_exit :entering..........");
  } else {

  }
#line 2836
  usb_deregister(& io_driver);
#line 2838
  usb_serial_deregister(& moschip7840_4port_device);
#line 2840
  if (debug != 0) {
#line 2840
    printk("<7>%s: %s\n\n", (char *)"/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared",
           (char *)"Entring...");
  } else {

  }
#line 2841
  return;
}
}
#line 2869
void ldv_check_final_state(void) ;
#line 2872
extern void ldv_check_return_value(int  ) ;
#line 2878
void ldv_initialize(void) ;
#line 2881
extern void ldv_handler_precall(void) ;
#line 2884
extern int nondet_int(void) ;
#line 2887 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 2890 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct tty_struct *var_group1 ;
  struct usb_serial_port *var_group2 ;
  struct file *var_mos7840_open_18_p2 ;
  int res_mos7840_open_18 ;
  struct file *var_mos7840_close_21_p2 ;
  unsigned char const   *var_mos7840_write_25_p2 ;
  int var_mos7840_write_25_p3 ;
  struct usb_serial *var_group3 ;
  struct file *var_group4 ;
  unsigned int var_mos7840_ioctl_38_p2 ;
  unsigned long var_mos7840_ioctl_38_p3 ;
  struct ktermios *var_mos7840_set_termios_33_p2 ;
  int var_mos7840_break_23_p1 ;
  unsigned int var_mos7840_tiocmset_29_p2 ;
  unsigned int var_mos7840_tiocmset_29_p3 ;
  struct urb *var_group5 ;
  int ldv_s_moschip7840_4port_device_usb_serial_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4757
  ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
#line 4648
  LDV_IN_INTERRUPT = 1;
#line 4657
  ldv_initialize();
#line 4754
  ldv_handler_precall();
#line 4755
  tmp = moschip7840_init();
#line 4755
  if (tmp != 0) {
#line 4756
    goto ldv_final;
  } else {

  }
#line 4761
  goto ldv_18873;
  ldv_18872: 
#line 4765
  tmp___0 = nondet_int();
#line 4765
  switch (tmp___0) {
  case 0: ;
#line 4770
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 0) {
#line 4873
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 4879
  goto ldv_18852;
  case 1: ;
#line 4883
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 1) {
#line 4969
    ldv_handler_precall();
#line 4970
    res_mos7840_open_18 = mos7840_open(var_group1, var_group2, var_mos7840_open_18_p2);
#line 4971
    ldv_check_return_value(res_mos7840_open_18);
#line 4972
    if (res_mos7840_open_18 != 0) {
#line 4973
      goto ldv_module_exit;
    } else {

    }
#line 4986
    ldv_s_moschip7840_4port_device_usb_serial_driver = ldv_s_moschip7840_4port_device_usb_serial_driver + 1;
  } else {

  }
#line 4992
  goto ldv_18852;
  case 2: ;
#line 4996
  if (ldv_s_moschip7840_4port_device_usb_serial_driver == 2) {
#line 5082
    ldv_handler_precall();
#line 5083
    mos7840_close(var_group1, var_group2, var_mos7840_close_21_p2);
#line 5096
    ldv_s_moschip7840_4port_device_usb_serial_driver = 0;
  } else {

  }
#line 5102
  goto ldv_18852;
  case 3: 
#line 5192
  ldv_handler_precall();
#line 5193
  mos7840_write(var_group1, var_group2, var_mos7840_write_25_p2, var_mos7840_write_25_p3);
#line 5210
  goto ldv_18852;
  case 4: 
#line 5300
  ldv_handler_precall();
#line 5301
  mos7840_write_room(var_group1);
#line 5320
  goto ldv_18852;
  case 5: 
#line 5410
  ldv_handler_precall();
#line 5411
  mos7840_chars_in_buffer(var_group1);
#line 5430
  goto ldv_18852;
  case 6: 
#line 5522
  ldv_handler_precall();
#line 5523
  mos7840_throttle(var_group1);
#line 5540
  goto ldv_18852;
  case 7: 
#line 5632
  ldv_handler_precall();
#line 5633
  mos7840_unthrottle(var_group1);
#line 5650
  goto ldv_18852;
  case 8: 
#line 5748
  ldv_handler_precall();
#line 5749
  mos7840_calc_num_ports(var_group3);
#line 5760
  goto ldv_18852;
  case 9: 
#line 5858
  ldv_handler_precall();
#line 5859
  mos7840_ioctl(var_group1, var_group4, var_mos7840_ioctl_38_p2, var_mos7840_ioctl_38_p3);
#line 5870
  goto ldv_18852;
  case 10: 
#line 5968
  ldv_handler_precall();
#line 5969
  mos7840_set_termios(var_group1, var_group2, var_mos7840_set_termios_33_p2);
#line 5980
  goto ldv_18852;
  case 11: 
#line 6070
  ldv_handler_precall();
#line 6071
  mos7840_break(var_group1, var_mos7840_break_23_p1);
#line 6090
  goto ldv_18852;
  case 12: 
#line 6182
  ldv_handler_precall();
#line 6183
  mos7840_tiocmget(var_group1, var_group4);
#line 6200
  goto ldv_18852;
  case 13: 
#line 6292
  ldv_handler_precall();
#line 6293
  mos7840_tiocmset(var_group1, var_group4, var_mos7840_tiocmset_29_p2, var_mos7840_tiocmset_29_p3);
#line 6310
  goto ldv_18852;
  case 14: 
#line 6408
  ldv_handler_precall();
#line 6409
  mos7840_startup(var_group3);
#line 6420
  goto ldv_18852;
  case 15: 
#line 6518
  ldv_handler_precall();
#line 6519
  mos7840_shutdown(var_group3);
#line 6530
  goto ldv_18852;
  case 16: 
#line 6618
  ldv_handler_precall();
#line 6619
  mos7840_bulk_in_callback(var_group5);
#line 6640
  goto ldv_18852;
  case 17: 
#line 6728
  ldv_handler_precall();
#line 6729
  mos7840_interrupt_callback(var_group5);
#line 6750
  goto ldv_18852;
  default: ;
#line 6751
  goto ldv_18852;
  }
  ldv_18852: ;
  ldv_18873: 
#line 4761
  tmp___1 = nondet_int();
#line 4761
  if (tmp___1 != 0 || ldv_s_moschip7840_4port_device_usb_serial_driver != 0) {
#line 4763
    goto ldv_18872;
  } else {

  }

  ldv_module_exit: 
#line 6854
  ldv_handler_precall();
#line 6855
  moschip7840_exit();
  ldv_final: 
#line 6858
  ldv_check_final_state();
#line 6861
  return;
}
}
#line 6865 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_1(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6870
  ldv_spin_lock_lock_of_NOT_ARG_SIGN();
#line 6872
  __ldv_spin_lock(ldv_func_arg1);
#line 6873
  return;
}
}
#line 6875 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_2(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6880
  ldv_spin_unlock_lock_of_NOT_ARG_SIGN();
#line 6882
  __ldv_spin_unlock(ldv_func_arg1);
#line 6883
  return;
}
}
#line 6885 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
int ldv___ldv_spin_trylock_3(spinlock_t *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___1 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 6890
  tmp = __ldv_spin_trylock(ldv_func_arg1);
#line 6890
  ldv_func_res = tmp;
#line 6892
  tmp___0 = ldv_spin_trylock_lock_of_NOT_ARG_SIGN();
#line 6892
  return (tmp___0);
#line 6894
  return (ldv_func_res);
}
}
#line 6897 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6902
  ldv_spin_lock_dcache_lock();
#line 6904
  __ldv_spin_lock(ldv_func_arg1);
#line 6905
  return;
}
}
#line 6907 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_5(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6912
  ldv_spin_lock_d_lock_of_dentry();
#line 6914
  __ldv_spin_lock(ldv_func_arg1);
#line 6915
  return;
}
}
#line 6917 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_6(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6922
  ldv_spin_unlock_d_lock_of_dentry();
#line 6924
  __ldv_spin_unlock(ldv_func_arg1);
#line 6925
  return;
}
}
#line 6927 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_7(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6932
  ldv_spin_unlock_dcache_lock();
#line 6934
  __ldv_spin_unlock(ldv_func_arg1);
#line 6935
  return;
}
}
#line 6937 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_8(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6942
  ldv_spin_lock_d_lock_of_dentry();
#line 6944
  __ldv_spin_lock(ldv_func_arg1);
#line 6945
  return;
}
}
#line 6947 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_9(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6952
  ldv_spin_unlock_d_lock_of_dentry();
#line 6954
  __ldv_spin_unlock(ldv_func_arg1);
#line 6955
  return;
}
}
#line 6957 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_10(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6962
  ldv_spin_lock_i_lock_of_inode();
#line 6964
  __ldv_spin_lock(ldv_func_arg1);
#line 6965
  return;
}
}
#line 6967 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_11(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6972
  ldv_spin_unlock_i_lock_of_inode();
#line 6974
  __ldv_spin_unlock(ldv_func_arg1);
#line 6975
  return;
}
}
#line 6977 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_12(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6982
  ldv_spin_lock_d_lock_of_dentry();
#line 6984
  __ldv_spin_lock(ldv_func_arg1);
#line 6985
  return;
}
}
#line 6987 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_13(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 6992
  ldv_spin_unlock_d_lock_of_dentry();
#line 6994
  __ldv_spin_unlock(ldv_func_arg1);
#line 6995
  return;
}
}
#line 6997 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7002
  ldv_spin_lock_siglock_of_sighand_struct();
#line 7004
  __ldv_spin_lock(ldv_func_arg1);
#line 7005
  return;
}
}
#line 7007 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_15(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7012
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 7014
  __ldv_spin_unlock(ldv_func_arg1);
#line 7015
  return;
}
}
#line 7017 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_16(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7022
  ldv_spin_lock_alloc_lock_of_task_struct();
#line 7024
  __ldv_spin_lock(ldv_func_arg1);
#line 7025
  return;
}
}
#line 7027 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_17(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7032
  ldv_spin_unlock_alloc_lock_of_task_struct();
#line 7034
  __ldv_spin_unlock(ldv_func_arg1);
#line 7035
  return;
}
}
#line 7037 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_18(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7042
  ldv_spin_unlock_siglock_of_sighand_struct();
#line 7044
  __ldv_spin_unlock(ldv_func_arg1);
#line 7045
  return;
}
}
#line 7047 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_19(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7052
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7054
  __ldv_spin_lock(ldv_func_arg1);
#line 7055
  return;
}
}
#line 7057 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_20(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7062
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7064
  __ldv_spin_unlock(ldv_func_arg1);
#line 7065
  return;
}
}
#line 7067 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_21(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7072
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7074
  __ldv_spin_lock(ldv_func_arg1);
#line 7075
  return;
}
}
#line 7077 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_22(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7082
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7084
  __ldv_spin_unlock(ldv_func_arg1);
#line 7085
  return;
}
}
#line 7087 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_23(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7092
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7094
  __ldv_spin_unlock(ldv_func_arg1);
#line 7095
  return;
}
}
#line 7097 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_24(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7102
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7104
  __ldv_spin_lock(ldv_func_arg1);
#line 7105
  return;
}
}
#line 7107 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_25(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7112
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7114
  __ldv_spin_unlock(ldv_func_arg1);
#line 7115
  return;
}
}
#line 7117 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_26(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7122
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7124
  __ldv_spin_lock(ldv_func_arg1);
#line 7125
  return;
}
}
#line 7127 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_27(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7132
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7134
  __ldv_spin_unlock(ldv_func_arg1);
#line 7135
  return;
}
}
#line 7137 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_28(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7142
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7144
  __ldv_spin_lock(ldv_func_arg1);
#line 7145
  return;
}
}
#line 7147 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_29(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7152
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7154
  __ldv_spin_unlock(ldv_func_arg1);
#line 7155
  return;
}
}
#line 7157 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_30(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7162
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7164
  __ldv_spin_lock(ldv_func_arg1);
#line 7165
  return;
}
}
#line 7167 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_31(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7172
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7174
  __ldv_spin_unlock(ldv_func_arg1);
#line 7175
  return;
}
}
#line 7177 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_lock_32(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7182
  ldv_spin_lock_pool_lock_of_moschip_port();
#line 7184
  __ldv_spin_lock(ldv_func_arg1);
#line 7185
  return;
}
}
#line 7187 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/39_7a/drivers/usb/serial/mos7840.c.prepared"
void ldv___ldv_spin_unlock_33(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 7192
  ldv_spin_unlock_pool_lock_of_moschip_port();
#line 7194
  __ldv_spin_unlock(ldv_func_arg1);
#line 7195
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 139
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_d_lock_of_dentry = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 148
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_d_lock_of_dentry = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_d_lock_of_dentry = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 183
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_d_lock_of_dentry = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_dcache_lock  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_dcache_lock(void) 
{ 


  {
#line 264
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_dcache_lock = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_dcache_lock(void) 
{ 


  {
#line 273
  if (ldv_spin_dcache_lock == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_dcache_lock = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_dcache_lock = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_dcache_lock(void) 
{ 


  {
#line 308
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_dcache_lock(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_dcache_lock == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_dcache_lock(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_dcache_lock();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_dcache_lock(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_dcache_lock(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_dcache_lock = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 389
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_i_lock_of_inode = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 398
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_i_lock_of_inode = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_i_lock_of_inode = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 433
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_i_lock_of_inode = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 514
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 523
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 558
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_pool_lock_of_moschip_port  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_pool_lock_of_moschip_port(void) 
{ 


  {
#line 639
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_pool_lock_of_moschip_port = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_pool_lock_of_moschip_port(void) 
{ 


  {
#line 648
  if (ldv_spin_pool_lock_of_moschip_port == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_pool_lock_of_moschip_port = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_pool_lock_of_moschip_port = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_pool_lock_of_moschip_port(void) 
{ 


  {
#line 683
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_pool_lock_of_moschip_port == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_pool_lock_of_moschip_port(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_pool_lock_of_moschip_port();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_pool_lock_of_moschip_port(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_pool_lock_of_moschip_port(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_pool_lock_of_moschip_port = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 764
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 764
    ldv_error();
  }
#line 766
  ldv_spin_siglock_of_sighand_struct = 2;
#line 767
  return;
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 773
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 773
    ldv_error();
  }
#line 775
  ldv_spin_siglock_of_sighand_struct = 1;
#line 776
  return;
}
}
#line 779 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 784
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 787
  is_spin_held_by_another_thread = ldv_undef_int();
#line 790
  if (is_spin_held_by_another_thread) {
#line 793
    return (0);
  } else {
#line 798
    ldv_spin_siglock_of_sighand_struct = 2;
#line 800
    return (1);
  }
}
}
#line 805 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 808
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 808
    ldv_error();
  }
#line 809
  return;
}
}
#line 812 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 817
  is_spin_held_by_another_thread = ldv_undef_int();
#line 820
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 823
    return (0);
  } else {
#line 828
    return (1);
  }
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 836
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 836
  if (tmp) {
#line 836
    tmp___0 = 0;
  } else {
#line 836
    tmp___0 = 1;
  }
#line 836
  return (tmp___0);
}
}
#line 840 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 845
  is_spin_contended = ldv_undef_int();
#line 848
  if (is_spin_contended) {
#line 851
    return (0);
  } else {
#line 856
    return (1);
  }
}
}
#line 861 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 866
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 866
    ldv_error();
  }
#line 869
  atomic_value_after_dec = ldv_undef_int();
#line 872
  if (atomic_value_after_dec == 0) {
#line 875
    ldv_spin_siglock_of_sighand_struct = 2;
#line 877
    return (1);
  } else {

  }
#line 881
  return (0);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 888
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 890
  ldv_spin_d_lock_of_dentry = 1;
#line 892
  ldv_spin_dcache_lock = 1;
#line 894
  ldv_spin_i_lock_of_inode = 1;
#line 896
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 898
  ldv_spin_pool_lock_of_moschip_port = 1;
#line 900
  ldv_spin_siglock_of_sighand_struct = 1;
#line 901
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/usb/serial/mos7840.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 907
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 907
    ldv_error();
  }
#line 909
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 909
    ldv_error();
  }
#line 911
  if (ldv_spin_dcache_lock == 1) {

  } else {
#line 911
    ldv_error();
  }
#line 913
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 913
    ldv_error();
  }
#line 915
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  if (ldv_spin_pool_lock_of_moschip_port == 1) {

  } else {
#line 917
    ldv_error();
  }
#line 919
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 919
    ldv_error();
  }
#line 920
  return;
}
}
