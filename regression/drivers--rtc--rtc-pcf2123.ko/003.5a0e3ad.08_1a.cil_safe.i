/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 10 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   char primary_hash ;
   char secondary_hash ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
};
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 119 "include/linux/kernel.h"
struct completion;
#line 220
struct pid;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 424
struct kmem_cache;
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 629 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 341 "include/linux/list.h"
struct hlist_node;
#line 341 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 557 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5158_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5181_25 {
   struct __anonstruct_ldv_5158_26 ldv_5158 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5181_25 ldv_5181 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 46 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 131 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 543 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5734_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5735_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5734_32 ldv_5734 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5735_31 ldv_5735 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 268 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 632 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 154 "include/linux/mutex.h"
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 172 "include/linux/ioport.h"
struct device;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 253 "include/linux/timer.h"
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 299 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 37 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 46 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 47 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 266
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 276
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 283
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 290 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct completion completion ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 442
struct kobject;
#line 443 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 37 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 101 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 119
struct sysfs_dirent;
#line 176 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10604_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10604_110 ldv_10604 ;
};
#line 54 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 60 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 242 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 455 "include/linux/rcupdate.h"
struct tracepoint;
#line 456 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 117 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 44 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 55 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
};
#line 243 "include/linux/percpu.h"
struct mod_arch_specific {

};
#line 92 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 182
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 188 "include/linux/module.h"
struct module_ref {
   int count ;
};
#line 370
struct module_sect_attrs;
#line 370
struct module_notes_attrs;
#line 370
struct ftrace_event_call;
#line 370 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 536
struct device_driver;
#line 8 "include/linux/bcd.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 153 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 183
struct class_attribute;
#line 183 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 210
struct device_type;
#line 249 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 300 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 327 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 388 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 397
struct dma_coherent_mem;
#line 397 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 627 "include/linux/device.h"
struct rtc_time {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
};
#line 31 "include/linux/rtc.h"
struct rtc_wkalrm {
   unsigned char enabled ;
   unsigned char pending ;
   struct rtc_time time ;
};
#line 40 "include/asm-generic/sections.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 110 "include/linux/rtc.h"
struct path;
#line 111
struct inode;
#line 112
struct dentry;
#line 113 "include/linux/rtc.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 89 "include/linux/kdev_t.h"
struct file_operations;
#line 90 "include/linux/kdev_t.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 35 "include/linux/cdev.h"
struct backing_dev_info;
#line 36 "include/linux/cdev.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 408 "include/linux/rculist.h"
struct nameidata;
#line 409
struct vfsmount;
#line 410 "include/linux/rculist.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_112 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_112 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 193
struct prio_tree_node;
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 568 "include/linux/capability.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 40
struct iovec;
#line 41
struct kiocb;
#line 42
struct pipe_inode_info;
#line 43
struct poll_table_struct;
#line 44
struct kstatfs;
#line 45
struct cred;
#line 418 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 477 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 184 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 185 "include/linux/quota.h"
typedef long long qsize_t;
#line 188 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 210
struct quota_format_type;
#line 211 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 281 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 292 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 306 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 321 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 367 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 398
struct address_space;
#line 399
struct writeback_control;
#line 567 "include/linux/fs.h"
union __anonunion_arg_115 {
   char *buf ;
   void *data ;
};
#line 567 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_114 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_115 arg ;
   int error ;
};
#line 567 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_114 read_descriptor_t;
#line 570 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 619 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 641
struct hd_struct;
#line 641
struct gendisk;
#line 641 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 709
struct posix_acl;
#line 710
struct inode_operations;
#line 710
struct file_lock;
#line 710 "include/linux/fs.h"
union __anonunion_ldv_15363_116 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 710 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_15363_116 ldv_15363 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 878 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 886 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 909 "include/linux/fs.h"
union __anonunion_f_u_117 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 909 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_117 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1032
struct files_struct;
#line 1032 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1033 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1038 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_119 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_118 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_119 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_118 fl_u ;
};
#line 1137 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1316
struct file_system_type;
#line 1316
struct super_operations;
#line 1316
struct xattr_handler;
#line 1316
struct mtd_info;
#line 1316 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1434 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1473 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1513 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1556 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1734 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 118 "include/linux/rtc.h"
struct rtc_class_ops {
   int (*open)(struct device * ) ;
   void (*release)(struct device * ) ;
   int (*ioctl)(struct device * , unsigned int  , unsigned long  ) ;
   int (*read_time)(struct device * , struct rtc_time * ) ;
   int (*set_time)(struct device * , struct rtc_time * ) ;
   int (*read_alarm)(struct device * , struct rtc_wkalrm * ) ;
   int (*set_alarm)(struct device * , struct rtc_wkalrm * ) ;
   int (*proc)(struct device * , struct seq_file * ) ;
   int (*set_mmss)(struct device * , unsigned long  ) ;
   int (*irq_set_state)(struct device * , int  ) ;
   int (*irq_set_freq)(struct device * , int  ) ;
   int (*read_callback)(struct device * , int  ) ;
   int (*alarm_irq_enable)(struct device * , unsigned int  ) ;
   int (*update_irq_enable)(struct device * , unsigned int  ) ;
};
#line 152
struct rtc_task;
#line 153 "include/linux/rtc.h"
struct rtc_device {
   struct device dev ;
   struct module *owner ;
   int id ;
   char name[20U] ;
   struct rtc_class_ops  const  *ops ;
   struct mutex ops_lock ;
   struct cdev char_dev ;
   unsigned long flags ;
   unsigned long irq_data ;
   spinlock_t irq_lock ;
   wait_queue_head_t irq_queue ;
   struct fasync_struct *async_queue ;
   struct rtc_task *irq_task ;
   spinlock_t irq_task_lock ;
   int irq_freq ;
   int max_user_freq ;
   struct work_struct uie_task ;
   struct timer_list uie_timer ;
   unsigned int oldsecs ;
   unsigned char uie_irq_active : 1 ;
   unsigned char stop_uie_polling : 1 ;
   unsigned char uie_task_active : 1 ;
   unsigned char uie_timer_active : 1 ;
};
#line 225 "include/linux/rtc.h"
struct rtc_task {
   void (*func)(void * ) ;
   void *private_data ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 400 "include/linux/mod_devicetable.h"
struct spi_device_id {
   char name[32U] ;
   kernel_ulong_t driver_data ;
};
#line 31 "include/linux/spi/spi.h"
struct spi_master;
#line 31 "include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 mode ;
   u8 bits_per_word ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
};
#line 143
struct spi_message;
#line 144 "include/linux/spi/spi.h"
struct spi_driver {
   struct spi_device_id  const  *id_table ;
   int (*probe)(struct spi_device * ) ;
   int (*remove)(struct spi_device * ) ;
   void (*shutdown)(struct spi_device * ) ;
   int (*suspend)(struct spi_device * , pm_message_t  ) ;
   int (*resume)(struct spi_device * ) ;
   struct device_driver driver ;
};
#line 202 "include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u16 flags ;
   int (*setup)(struct spi_device * ) ;
   int (*transfer)(struct spi_device * , struct spi_message * ) ;
   void (*cleanup)(struct spi_device * ) ;
};
#line 331 "include/linux/spi/spi.h"
struct spi_transfer {
   void const   *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   unsigned char cs_change : 1 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};
#line 437 "include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned char is_dma_mapped : 1 ;
   void (*complete)(void * ) ;
   void *context ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
struct pcf2123_sysfs_reg {
   struct device_attribute attr ;
   char name[2U] ;
};
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
struct pcf2123_plat_data {
   struct rtc_device *rtc ;
   struct pcf2123_sysfs_reg regs[16U] ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 8 "include/linux/dynamic_debug.h"
extern long long dynamic_debug_enabled ;
#line 9
extern long long dynamic_debug_enabled2 ;
#line 187 "include/linux/kernel.h"
extern int strict_strtoul(char const   * , unsigned int  , unsigned long * ) ;
#line 191
extern int sprintf(char * , char const   *  , ...) ;
#line 251
extern int printk(char const   *  , ...) ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4329: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4329;
  } else {

  }

#line 19
  return (order);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 10 "include/linux/debug_locks.h"
extern int debug_locks ;
#line 542 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 316 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 69 "include/linux/rcupdate.h"
extern int rcu_scheduler_active ;
#line 104 "include/linux/rcupdate.h"
__inline static int debug_lockdep_rcu_enabled(void) 
{ 
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
#line 106
  tmp = __builtin_expect(rcu_scheduler_active != 0, 1L);
#line 106
  if (tmp != 0L) {
#line 106
    tmp___0 = __builtin_expect(debug_locks != 0, 1L);
#line 106
    if (tmp___0 != 0L) {
#line 106
      tmp___1 = 1;
    } else {
#line 106
      tmp___1 = 0;
    }
  } else {
#line 106
    tmp___1 = 0;
  }
#line 106
  return (tmp___1);
}
}
#line 155 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 157
  return (1);
}
}
#line 323 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 327
  return;
}
}
#line 143 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 87 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 87 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  int tmp ;
  int tmp___0 ;
  void **_________p1 ;
  long tmp___1 ;

  {
#line 81
  tmp___1 = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 81
  if (tmp___1 != 0L) {
#line 81
    rcu_read_lock_sched_notrace();
#line 81
    tmp = debug_lockdep_rcu_enabled();
#line 81
    if (tmp != 0) {
#line 81
      tmp___0 = rcu_read_lock_sched_held();
#line 81
      if (tmp___0 == 0) {
#line 81
        lockdep_rcu_dereference("include/trace/events/kmem.h", 87);
      } else {

      }
    } else {

    }
#line 81
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 81
    it_func = _________p1;
#line 81
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10944: 
#line 81
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 81
      it_func = it_func + 1;
#line 81
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 82
        goto ldv_10944;
      } else {

      }

    } else {

    }
#line 81
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 83
  return;
}
}
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 146 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[22U] ;
#line 152 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 154
  if (size == 0UL) {
#line 155
    return (0);
  } else {

  }
#line 157
  if (size <= 8UL) {
#line 158
    return (3);
  } else {

  }
#line 160
  if (size > 64UL && size <= 96UL) {
#line 161
    return (1);
  } else {

  }
#line 162
  if (size > 128UL && size <= 192UL) {
#line 163
    return (2);
  } else {

  }
#line 164
  if (size <= 8UL) {
#line 164
    return (3);
  } else {

  }
#line 165
  if (size <= 16UL) {
#line 165
    return (4);
  } else {

  }
#line 166
  if (size <= 32UL) {
#line 166
    return (5);
  } else {

  }
#line 167
  if (size <= 64UL) {
#line 167
    return (6);
  } else {

  }
#line 168
  if (size <= 128UL) {
#line 168
    return (7);
  } else {

  }
#line 169
  if (size <= 256UL) {
#line 169
    return (8);
  } else {

  }
#line 170
  if (size <= 512UL) {
#line 170
    return (9);
  } else {

  }
#line 171
  if (size <= 1024UL) {
#line 171
    return (10);
  } else {

  }
#line 172
  if (size <= 2048UL) {
#line 172
    return (11);
  } else {

  }
#line 173
  if (size <= 4096UL) {
#line 173
    return (12);
  } else {

  }
#line 178
  if (size <= 8192UL) {
#line 178
    return (13);
  } else {

  }
#line 179
  if (size <= 16384UL) {
#line 179
    return (14);
  } else {

  }
#line 180
  if (size <= 32768UL) {
#line 180
    return (15);
  } else {

  }
#line 181
  if (size <= 65536UL) {
#line 181
    return (16);
  } else {

  }
#line 182
  if (size <= 131072UL) {
#line 182
    return (17);
  } else {

  }
#line 183
  if (size <= 262144UL) {
#line 183
    return (18);
  } else {

  }
#line 184
  if (size <= 524288UL) {
#line 184
    return (19);
  } else {

  }
#line 185
  if (size <= 1048576UL) {
#line 185
    return (20);
  } else {

  }
#line 186
  if (size <= 2097152UL) {
#line 186
    return (21);
  } else {

  }
#line 187
  return (-1);
}
}
#line 204 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 206
  tmp = kmalloc_index(size);
#line 206
  index = tmp;
#line 208
  if (index == 0) {
#line 209
    return (0);
  } else {

  }
#line 211
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 215
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 218
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 227 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 229
  tmp = get_order(size);
#line 229
  order = (unsigned int )tmp;
#line 230
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 230
  ret = (void *)tmp___0;
#line 232
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 233
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 235
  return (ret);
}
}
#line 238 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 242
  if (0) {
#line 243
    if (size > 8192UL) {
#line 244
      tmp = kmalloc_large(size, flags);
#line 244
      return (tmp);
    } else {

    }
#line 246
    if ((flags & 1U) == 0U) {
#line 247
      tmp___0 = kmalloc_slab(size);
#line 247
      s = tmp___0;
#line 249
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 250
        return (16);
      } else {

      }
#line 252
      ret = kmem_cache_alloc_notrace(s, flags);
#line 254
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 256
      return (ret);
    } else {

    }
  } else {

  }
#line 259
  tmp___1 = __kmalloc(size, flags);
#line 259
  return (tmp___1);
}
}
#line 318 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 320
  tmp = kmalloc(size, flags | 32768U);
#line 320
  return (tmp);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 6 "include/linux/bcd.h"
extern unsigned int bcd2bin(unsigned char  ) ;
#line 7
extern unsigned char bin2bcd(unsigned int  ) ;
#line 145 "include/linux/device.h"
extern void driver_unregister(struct device_driver * ) ;
#line 340
extern int device_create_file(struct device * , struct device_attribute  const  * ) ;
#line 342
extern void device_remove_file(struct device * , struct device_attribute  const  * ) ;
#line 452 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 454
  tmp = kobject_name(& dev->kobj);
#line 454
  return (tmp);
}
}
#line 626
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 107 "include/linux/rtc.h"
extern int rtc_valid_tm(struct rtc_time * ) ;
#line 195
extern struct rtc_device *rtc_device_register(char const   * , struct device * , struct rtc_class_ops  const  * ,
                                              struct module * ) ;
#line 199
extern void rtc_device_unregister(struct rtc_device * ) ;
#line 30 "include/linux/spi/spi.h"
extern struct bus_type spi_bus_type ;
#line 104 "include/linux/spi/spi.h"
__inline static struct spi_device *to_spi_device(struct device *dev ) 
{ 
  struct device  const  *__mptr ;
  struct spi_device *tmp ;

  {
#line 106
  if ((unsigned long )dev != (unsigned long )((struct device *)0)) {
#line 106
    __mptr = (struct device  const  *)dev;
#line 106
    tmp = (struct spi_device *)__mptr;
  } else {
#line 106
    tmp = 0;
  }
#line 106
  return (tmp);
}
}
#line 190
extern int spi_register_driver(struct spi_driver * ) ;
#line 197 "include/linux/spi/spi.h"
__inline static void spi_unregister_driver(struct spi_driver *sdrv ) 
{ 


  {
#line 199
  if ((unsigned long )sdrv != (unsigned long )((struct spi_driver *)0)) {
#line 200
    driver_unregister(& sdrv->driver);
  } else {

  }
#line 201
  return;
}
}
#line 498 "include/linux/spi/spi.h"
__inline static void spi_message_init(struct spi_message *m ) 
{ 


  {
#line 500
  memset((void *)m, 0, 80UL);
#line 501
  INIT_LIST_HEAD(& m->transfers);
#line 502
  return;
}
}
#line 505 "include/linux/spi/spi.h"
__inline static void spi_message_add_tail(struct spi_transfer *t , struct spi_message *m ) 
{ 


  {
#line 507
  list_add_tail(& t->transfer_list, & m->transfers);
#line 508
  return;
}
}
#line 553
extern int spi_sync(struct spi_device * , struct spi_message * ) ;
#line 566 "include/linux/spi/spi.h"
__inline static int spi_write(struct spi_device *spi , u8 const   *buf , size_t len ) 
{ 
  struct spi_transfer t ;
  struct spi_message m ;
  int tmp ;

  {
#line 568
  t.tx_buf = (void const   *)buf;
#line 568
  t.rx_buf = 0;
#line 568
  t.len = (unsigned int )len;
#line 568
  t.tx_dma = 0ULL;
#line 568
  t.rx_dma = 0ULL;
#line 568
  t.cs_change = (unsigned char)0;
#line 568
  t.bits_per_word = (unsigned char)0;
#line 568
  t.delay_usecs = (unsigned short)0;
#line 568
  t.speed_hz = 0U;
#line 568
  t.transfer_list.next = 0;
#line 568
  t.transfer_list.prev = 0;
#line 574
  spi_message_init(& m);
#line 575
  spi_message_add_tail(& t, & m);
#line 576
  tmp = spi_sync(spi, & m);
#line 576
  return (tmp);
}
}
#line 604
extern int spi_write_then_read(struct spi_device * , u8 const   * , unsigned int  ,
                               u8 * , unsigned int  ) ;
#line 70 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static struct spi_driver pcf2123_driver ;
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
__inline static void pcf2123_delay_trec(void) 
{ 


  {
#line 89
  __const_udelay(150UL);
#line 90
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static ssize_t pcf2123_show(struct device *dev , struct device_attribute *attr , char *buffer ) 
{ 
  struct spi_device *spi ;
  struct spi_device *tmp ;
  struct pcf2123_sysfs_reg *r ;
  u8 txbuf[1U] ;
  u8 rxbuf[1U] ;
  unsigned long reg ;
  int ret ;
  struct device_attribute  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 95
  tmp = to_spi_device(dev);
#line 95
  spi = tmp;
#line 101
  __mptr = (struct device_attribute  const  *)attr;
#line 101
  r = (struct pcf2123_sysfs_reg *)__mptr;
#line 103
  tmp___0 = strict_strtoul((char const   *)(& r->name), 16U, & reg);
#line 103
  if (tmp___0 != 0) {
#line 104
    return (-22L);
  } else {

  }
#line 106
  txbuf[0] = (unsigned int )((u8 )reg) | 144U;
#line 107
  ret = spi_write_then_read(spi, (u8 const   *)(& txbuf), 1U, (u8 *)(& rxbuf), 1U);
#line 108
  if (ret < 0) {
#line 109
    return (-5L);
  } else {

  }
#line 110
  pcf2123_delay_trec();
#line 111
  tmp___1 = sprintf(buffer, "0x%x\n", (int )rxbuf[0]);
#line 111
  return ((ssize_t )tmp___1);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static ssize_t pcf2123_store(struct device *dev , struct device_attribute *attr ,
                             char const   *buffer , size_t count ) 
{ 
  struct spi_device *spi ;
  struct spi_device *tmp ;
  struct pcf2123_sysfs_reg *r ;
  u8 txbuf[2U] ;
  unsigned long reg ;
  unsigned long val ;
  int ret ;
  struct device_attribute  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 116
  tmp = to_spi_device(dev);
#line 116
  spi = tmp;
#line 124
  __mptr = (struct device_attribute  const  *)attr;
#line 124
  r = (struct pcf2123_sysfs_reg *)__mptr;
#line 126
  tmp___0 = strict_strtoul((char const   *)(& r->name), 16U, & reg);
#line 126
  if (tmp___0 != 0) {
#line 128
    return (-22L);
  } else {
#line 126
    tmp___1 = strict_strtoul(buffer, 10U, & val);
#line 126
    if (tmp___1 != 0) {
#line 128
      return (-22L);
    } else {

    }
  }
#line 130
  txbuf[0] = (unsigned int )((u8 )reg) | 16U;
#line 131
  txbuf[1] = (u8 )val;
#line 132
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 133
  if (ret < 0) {
#line 134
    return (-5L);
  } else {

  }
#line 135
  pcf2123_delay_trec();
#line 136
  return ((ssize_t )count);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static int pcf2123_rtc_read_time(struct device *dev , struct rtc_time *tm ) 
{ 
  struct spi_device *spi ;
  struct spi_device *tmp ;
  u8 txbuf[1U] ;
  u8 rxbuf[7U] ;
  int ret ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  struct _ddebug descriptor ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int __ret ;
  long tmp___8 ;
  long tmp___9 ;
  long tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;

  {
#line 141
  tmp = to_spi_device(dev);
#line 141
  spi = tmp;
#line 145
  txbuf[0] = 146U;
#line 146
  ret = spi_write_then_read(spi, (u8 const   *)(& txbuf), 1U, (u8 *)(& rxbuf), 7U);
#line 148
  if (ret < 0) {
#line 149
    return (ret);
  } else {

  }
#line 150
  pcf2123_delay_trec();
#line 152
  tmp___0 = bcd2bin((int )rxbuf[0] & 127);
#line 152
  tm->tm_sec = (int )tmp___0;
#line 153
  tmp___1 = bcd2bin((int )rxbuf[1] & 127);
#line 153
  tm->tm_min = (int )tmp___1;
#line 154
  tmp___2 = bcd2bin((int )rxbuf[2] & 63);
#line 154
  tm->tm_hour = (int )tmp___2;
#line 155
  tmp___3 = bcd2bin((int )rxbuf[3] & 63);
#line 155
  tm->tm_mday = (int )tmp___3;
#line 156
  tm->tm_wday = (int )rxbuf[4] & 7;
#line 157
  tmp___4 = bcd2bin((int )rxbuf[5] & 31);
#line 157
  tm->tm_mon = (int )(tmp___4 - 1U);
#line 158
  tmp___5 = bcd2bin((int )rxbuf[6]);
#line 158
  tm->tm_year = (int )tmp___5;
#line 159
  if (tm->tm_year <= 69) {
#line 160
    tm->tm_year = tm->tm_year + 100;
  } else {

  }
#line 162
  descriptor.modname = "rtc_pcf2123";
#line 162
  descriptor.function = "pcf2123_rtc_read_time";
#line 162
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 162
  descriptor.format = "%s: tm is secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n";
#line 162
  descriptor.primary_hash = 51;
#line 162
  descriptor.secondary_hash = 45;
#line 162
  descriptor.lineno = 166U;
#line 162
  descriptor.flags = 0U;
#line 162
  __ret = 0;
#line 162
  tmp___9 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                             0L);
#line 162
  if (tmp___9 != 0L) {
#line 162
    tmp___10 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                                0L);
#line 162
    if (tmp___10 != 0L) {
#line 162
      tmp___8 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 162
      if (tmp___8 != 0L) {
#line 162
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 162
  if (__ret != 0) {
#line 162
    tmp___6 = dev_name((struct device  const  *)dev);
#line 162
    tmp___7 = dev_driver_string((struct device  const  *)dev);
#line 162
    printk("<7>%s %s: %s: tm is secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
           tmp___7, tmp___6, "pcf2123_rtc_read_time", tm->tm_sec, tm->tm_min, tm->tm_hour,
           tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
  } else {

  }
#line 171
  tmp___13 = rtc_valid_tm(tm);
#line 171
  if (tmp___13 < 0) {
#line 172
    tmp___11 = dev_name((struct device  const  *)dev);
#line 172
    tmp___12 = dev_driver_string((struct device  const  *)dev);
#line 172
    printk("<3>%s %s: retrieved date/time is not valid.\n", tmp___12, tmp___11);
  } else {

  }
#line 174
  return (0);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static int pcf2123_rtc_set_time(struct device *dev , struct rtc_time *tm ) 
{ 
  struct spi_device *spi ;
  struct spi_device *tmp ;
  u8 txbuf[8U] ;
  int ret ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;

  {
#line 179
  tmp = to_spi_device(dev);
#line 179
  spi = tmp;
#line 183
  descriptor.modname = "rtc_pcf2123";
#line 183
  descriptor.function = "pcf2123_rtc_set_time";
#line 183
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 183
  descriptor.format = "%s: tm is secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n";
#line 183
  descriptor.primary_hash = 51;
#line 183
  descriptor.secondary_hash = 45;
#line 183
  descriptor.lineno = 187U;
#line 183
  descriptor.flags = 0U;
#line 183
  __ret = 0;
#line 183
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                             0L);
#line 183
  if (tmp___3 != 0L) {
#line 183
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                               0L);
#line 183
    if (tmp___4 != 0L) {
#line 183
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 183
      if (tmp___2 != 0L) {
#line 183
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 183
  if (__ret != 0) {
#line 183
    tmp___0 = dev_name((struct device  const  *)dev);
#line 183
    tmp___1 = dev_driver_string((struct device  const  *)dev);
#line 183
    printk("<7>%s %s: %s: tm is secs=%d, mins=%d, hours=%d, mday=%d, mon=%d, year=%d, wday=%d\n",
           tmp___1, tmp___0, "pcf2123_rtc_set_time", tm->tm_sec, tm->tm_min, tm->tm_hour,
           tm->tm_mday, tm->tm_mon, tm->tm_year, tm->tm_wday);
  } else {

  }
#line 190
  txbuf[0] = 16U;
#line 191
  txbuf[1] = 32U;
#line 192
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 193
  if (ret < 0) {
#line 194
    return (ret);
  } else {

  }
#line 195
  pcf2123_delay_trec();
#line 198
  txbuf[0] = 18U;
#line 199
  txbuf[1] = bin2bcd((unsigned int )tm->tm_sec & 127U);
#line 200
  txbuf[2] = bin2bcd((unsigned int )tm->tm_min & 127U);
#line 201
  txbuf[3] = bin2bcd((unsigned int )tm->tm_hour & 63U);
#line 202
  txbuf[4] = bin2bcd((unsigned int )tm->tm_mday & 63U);
#line 203
  txbuf[5] = (unsigned int )((u8 )tm->tm_wday) & 7U;
#line 204
  txbuf[6] = bin2bcd((unsigned int )(tm->tm_mon + 1) & 31U);
#line 205
  txbuf[7] = bin2bcd((unsigned int )(tm->tm_year <= 99 ? tm->tm_year : tm->tm_year + -100));
#line 207
  ret = spi_write(spi, (u8 const   *)(& txbuf), 8UL);
#line 208
  if (ret < 0) {
#line 209
    return (ret);
  } else {

  }
#line 210
  pcf2123_delay_trec();
#line 213
  txbuf[0] = 16U;
#line 214
  txbuf[1] = 0U;
#line 215
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 216
  if (ret < 0) {
#line 217
    return (ret);
  } else {

  }
#line 218
  pcf2123_delay_trec();
#line 220
  return (0);
}
}
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static struct rtc_class_ops  const  pcf2123_rtc_ops  = 
#line 223
     {0, 0, 0, & pcf2123_rtc_read_time, & pcf2123_rtc_set_time, 0, 0, 0, 0, 0, 0, 0,
    0, 0};
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static int pcf2123_probe(struct spi_device *spi ) 
{ 
  struct rtc_device *rtc ;
  struct pcf2123_plat_data *pdata ;
  u8 txbuf[2U] ;
  u8 rxbuf[2U] ;
  int ret ;
  int i ;
  void *tmp ;
  struct _ddebug descriptor ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int __ret ;
  long tmp___2 ;
  long tmp___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int __ret___0 ;
  long tmp___7 ;
  long tmp___8 ;
  long tmp___9 ;
  struct _ddebug descriptor___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int __ret___1 ;
  long tmp___12 ;
  long tmp___13 ;
  long tmp___14 ;
  struct _ddebug descriptor___2 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int __ret___2 ;
  long tmp___17 ;
  long tmp___18 ;
  long tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  long tmp___28 ;
  long tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 235
  tmp = kzalloc(1032UL, 208U);
#line 235
  pdata = (struct pcf2123_plat_data *)tmp;
#line 236
  if ((unsigned long )pdata == (unsigned long )((struct pcf2123_plat_data *)0)) {
#line 237
    return (-12);
  } else {

  }
#line 238
  spi->dev.platform_data = (void *)pdata;
#line 241
  txbuf[0] = 16U;
#line 242
  txbuf[1] = 88U;
#line 243
  descriptor.modname = "rtc_pcf2123";
#line 243
  descriptor.function = "pcf2123_probe";
#line 243
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 243
  descriptor.format = "resetting RTC (0x%02X 0x%02X)\n";
#line 243
  descriptor.primary_hash = 51;
#line 243
  descriptor.secondary_hash = 45;
#line 243
  descriptor.lineno = 244U;
#line 243
  descriptor.flags = 0U;
#line 243
  __ret = 0;
#line 243
  tmp___3 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                             0L);
#line 243
  if (tmp___3 != 0L) {
#line 243
    tmp___4 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                               0L);
#line 243
    if (tmp___4 != 0L) {
#line 243
      tmp___2 = __builtin_expect((unsigned int )descriptor.flags != 0U, 0L);
#line 243
      if (tmp___2 != 0L) {
#line 243
        __ret = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 243
  if (__ret != 0) {
#line 243
    tmp___0 = dev_name((struct device  const  *)(& spi->dev));
#line 243
    tmp___1 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 243
    printk("<7>%s %s: resetting RTC (0x%02X 0x%02X)\n", tmp___1, tmp___0, (int )txbuf[0],
           (int )txbuf[1]);
  } else {

  }
#line 245
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 246
  if (ret < 0) {
#line 247
    goto kfree_exit;
  } else {

  }
#line 248
  pcf2123_delay_trec();
#line 251
  txbuf[0] = 16U;
#line 252
  txbuf[1] = 32U;
#line 253
  descriptor___0.modname = "rtc_pcf2123";
#line 253
  descriptor___0.function = "pcf2123_probe";
#line 253
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 253
  descriptor___0.format = "stopping RTC (0x%02X 0x%02X)\n";
#line 253
  descriptor___0.primary_hash = 51;
#line 253
  descriptor___0.secondary_hash = 45;
#line 253
  descriptor___0.lineno = 254U;
#line 253
  descriptor___0.flags = 0U;
#line 253
  __ret___0 = 0;
#line 253
  tmp___8 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                             0L);
#line 253
  if (tmp___8 != 0L) {
#line 253
    tmp___9 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                               0L);
#line 253
    if (tmp___9 != 0L) {
#line 253
      tmp___7 = __builtin_expect((unsigned int )descriptor___0.flags != 0U, 0L);
#line 253
      if (tmp___7 != 0L) {
#line 253
        __ret___0 = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 253
  if (__ret___0 != 0) {
#line 253
    tmp___5 = dev_name((struct device  const  *)(& spi->dev));
#line 253
    tmp___6 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 253
    printk("<7>%s %s: stopping RTC (0x%02X 0x%02X)\n", tmp___6, tmp___5, (int )txbuf[0],
           (int )txbuf[1]);
  } else {

  }
#line 255
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 256
  if (ret < 0) {
#line 257
    goto kfree_exit;
  } else {

  }
#line 258
  pcf2123_delay_trec();
#line 261
  txbuf[0] = 144U;
#line 262
  descriptor___1.modname = "rtc_pcf2123";
#line 262
  descriptor___1.function = "pcf2123_probe";
#line 262
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 262
  descriptor___1.format = "checking for presence of RTC (0x%02X)\n";
#line 262
  descriptor___1.primary_hash = 51;
#line 262
  descriptor___1.secondary_hash = 45;
#line 262
  descriptor___1.lineno = 263U;
#line 262
  descriptor___1.flags = 0U;
#line 262
  __ret___1 = 0;
#line 262
  tmp___13 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                              0L);
#line 262
  if (tmp___13 != 0L) {
#line 262
    tmp___14 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                                0L);
#line 262
    if (tmp___14 != 0L) {
#line 262
      tmp___12 = __builtin_expect((unsigned int )descriptor___1.flags != 0U, 0L);
#line 262
      if (tmp___12 != 0L) {
#line 262
        __ret___1 = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 262
  if (__ret___1 != 0) {
#line 262
    tmp___10 = dev_name((struct device  const  *)(& spi->dev));
#line 262
    tmp___11 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 262
    printk("<7>%s %s: checking for presence of RTC (0x%02X)\n", tmp___11, tmp___10,
           (int )txbuf[0]);
  } else {

  }
#line 264
  ret = spi_write_then_read(spi, (u8 const   *)(& txbuf), 1U, (u8 *)(& rxbuf), 2U);
#line 266
  descriptor___2.modname = "rtc_pcf2123";
#line 266
  descriptor___2.function = "pcf2123_probe";
#line 266
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared";
#line 266
  descriptor___2.format = "received data from RTC (0x%02X 0x%02X)\n";
#line 266
  descriptor___2.primary_hash = 51;
#line 266
  descriptor___2.secondary_hash = 45;
#line 266
  descriptor___2.lineno = 267U;
#line 266
  descriptor___2.flags = 0U;
#line 266
  __ret___2 = 0;
#line 266
  tmp___18 = __builtin_expect((dynamic_debug_enabled & 2251799813685248LL) != 0LL,
                              0L);
#line 266
  if (tmp___18 != 0L) {
#line 266
    tmp___19 = __builtin_expect((dynamic_debug_enabled2 & 35184372088832LL) != 0LL,
                                0L);
#line 266
    if (tmp___19 != 0L) {
#line 266
      tmp___17 = __builtin_expect((unsigned int )descriptor___2.flags != 0U, 0L);
#line 266
      if (tmp___17 != 0L) {
#line 266
        __ret___2 = 1;
      } else {

      }
    } else {

    }
  } else {

  }
#line 266
  if (__ret___2 != 0) {
#line 266
    tmp___15 = dev_name((struct device  const  *)(& spi->dev));
#line 266
    tmp___16 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 266
    printk("<7>%s %s: received data from RTC (0x%02X 0x%02X)\n", tmp___16, tmp___15,
           (int )rxbuf[0], (int )rxbuf[1]);
  } else {

  }
#line 268
  if (ret < 0) {
#line 269
    goto kfree_exit;
  } else {

  }
#line 270
  pcf2123_delay_trec();
#line 272
  if (((int )rxbuf[0] & 32) == 0) {
#line 273
    tmp___20 = dev_name((struct device  const  *)(& spi->dev));
#line 273
    tmp___21 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 273
    printk("<3>%s %s: chip not found\n", tmp___21, tmp___20);
#line 274
    goto kfree_exit;
  } else {

  }
#line 277
  tmp___22 = dev_name((struct device  const  *)(& spi->dev));
#line 277
  tmp___23 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 277
  printk("<6>%s %s: chip found, driver version 0.6\n", tmp___23, tmp___22);
#line 278
  tmp___24 = dev_name((struct device  const  *)(& spi->dev));
#line 278
  tmp___25 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 278
  printk("<6>%s %s: spiclk %u KHz.\n", tmp___25, tmp___24, (spi->max_speed_hz + 500U) / 1000U);
#line 282
  txbuf[0] = 16U;
#line 283
  txbuf[1] = 0U;
#line 284
  ret = spi_write(spi, (u8 const   *)(& txbuf), 2UL);
#line 285
  if (ret < 0) {
#line 286
    goto kfree_exit;
  } else {

  }
#line 287
  pcf2123_delay_trec();
#line 290
  rtc = rtc_device_register(pcf2123_driver.driver.name, & spi->dev, & pcf2123_rtc_ops,
                            & __this_module);
#line 293
  tmp___29 = IS_ERR((void const   *)rtc);
#line 293
  if (tmp___29 != 0L) {
#line 294
    tmp___26 = dev_name((struct device  const  *)(& spi->dev));
#line 294
    tmp___27 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 294
    printk("<3>%s %s: failed to register.\n", tmp___27, tmp___26);
#line 295
    tmp___28 = PTR_ERR((void const   *)rtc);
#line 295
    ret = (int )tmp___28;
#line 296
    goto kfree_exit;
  } else {

  }
#line 299
  pdata->rtc = rtc;
#line 301
  i = 0;
#line 301
  goto ldv_18799;
  ldv_18798: 
#line 302
  sprintf((char *)(& pdata->regs[i].name), "%1x", i);
#line 303
  pdata->regs[i].attr.attr.mode = 420U;
#line 304
  pdata->regs[i].attr.attr.name = (char const   *)(& pdata->regs[i].name);
#line 305
  pdata->regs[i].attr.show = & pcf2123_show;
#line 306
  pdata->regs[i].attr.store = & pcf2123_store;
#line 307
  ret = device_create_file(& spi->dev, (struct device_attribute  const  *)(& pdata->regs[i].attr));
#line 308
  if (ret != 0) {
#line 309
    tmp___30 = dev_name((struct device  const  *)(& spi->dev));
#line 309
    tmp___31 = dev_driver_string((struct device  const  *)(& spi->dev));
#line 309
    printk("<3>%s %s: Unable to create sysfs %s\n", tmp___31, tmp___30, (char *)(& pdata->regs[i].name));
#line 311
    goto sysfs_exit;
  } else {

  }
#line 301
  i = i + 1;
  ldv_18799: ;
#line 301
  if (i <= 15) {
#line 302
    goto ldv_18798;
  } else {

  }

#line 315
  return (0);
  sysfs_exit: 
#line 318
  i = i - 1;
#line 318
  goto ldv_18802;
  ldv_18801: 
#line 319
  device_remove_file(& spi->dev, (struct device_attribute  const  *)(& pdata->regs[i].attr));
#line 318
  i = i - 1;
  ldv_18802: ;
#line 318
  if (i >= 0) {
#line 319
    goto ldv_18801;
  } else {

  }

  kfree_exit: 
#line 322
  kfree((void const   *)pdata);
#line 323
  spi->dev.platform_data = 0;
#line 324
  return (ret);
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static int pcf2123_remove(struct spi_device *spi ) 
{ 
  struct pcf2123_plat_data *pdata ;
  int i ;
  struct rtc_device *rtc ;

  {
#line 329
  pdata = (struct pcf2123_plat_data *)spi->dev.platform_data;
#line 332
  if ((unsigned long )pdata != (unsigned long )((struct pcf2123_plat_data *)0)) {
#line 333
    rtc = pdata->rtc;
#line 335
    if ((unsigned long )rtc != (unsigned long )((struct rtc_device *)0)) {
#line 336
      rtc_device_unregister(rtc);
    } else {

    }
#line 337
    i = 0;
#line 337
    goto ldv_18811;
    ldv_18810: ;
#line 338
    if ((int )((signed char )pdata->regs[i].name[0]) != 0) {
#line 339
      device_remove_file(& spi->dev, (struct device_attribute  const  *)(& pdata->regs[i].attr));
    } else {

    }
#line 337
    i = i + 1;
    ldv_18811: ;
#line 337
    if (i <= 15) {
#line 338
      goto ldv_18810;
    } else {

    }
#line 341
    kfree((void const   *)pdata);
  } else {

  }
#line 344
  return (0);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static struct spi_driver pcf2123_driver  =    {0, & pcf2123_probe, & pcf2123_remove, 0, 0, 0, {"rtc-pcf2123", & spi_bus_type,
                                                    & __this_module, 0, (_Bool)0,
                                                    0, 0, 0, 0, 0, 0, 0, 0}};
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static int pcf2123_init(void) 
{ 
  int tmp ;

  {
#line 359
  tmp = spi_register_driver(& pcf2123_driver);
#line 359
  return (tmp);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
static void pcf2123_exit(void) 
{ 


  {
#line 364
  spi_unregister_driver(& pcf2123_driver);
#line 365
  return;
}
}
#line 391
void ldv_check_final_state(void) ;
#line 394
extern void ldv_check_return_value(int  ) ;
#line 397
extern void ldv_check_return_value_probe(int  ) ;
#line 400
extern void ldv_initialize(void) ;
#line 403
extern void ldv_handler_precall(void) ;
#line 406
extern int nondet_int(void) ;
#line 409 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 412 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/08_1a/drivers/rtc/rtc-pcf2123.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct device *var_group1 ;
  struct rtc_time *var_group2 ;
  struct spi_device *var_group3 ;
  int res_pcf2123_probe_5 ;
  int ldv_s_pcf2123_driver_spi_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 534
  ldv_s_pcf2123_driver_spi_driver = 0;
#line 500
  LDV_IN_INTERRUPT = 1;
#line 509
  ldv_initialize();
#line 529
  ldv_handler_precall();
#line 530
  tmp = pcf2123_init();
#line 530
  if (tmp != 0) {
#line 531
    goto ldv_final;
  } else {

  }
#line 537
  goto ldv_18864;
  ldv_18863: 
#line 541
  tmp___0 = nondet_int();
#line 541
  switch (tmp___0) {
  case 0: 
#line 565
  ldv_handler_precall();
#line 566
  pcf2123_rtc_read_time(var_group1, var_group2);
#line 573
  goto ldv_18857;
  case 1: 
#line 596
  ldv_handler_precall();
#line 597
  pcf2123_rtc_set_time(var_group1, var_group2);
#line 604
  goto ldv_18857;
  case 2: ;
#line 608
  if (ldv_s_pcf2123_driver_spi_driver == 0) {
#line 627
    res_pcf2123_probe_5 = pcf2123_probe(var_group3);
#line 628
    ldv_check_return_value(res_pcf2123_probe_5);
#line 629
    ldv_check_return_value_probe(res_pcf2123_probe_5);
#line 630
    if (res_pcf2123_probe_5 != 0) {
#line 631
      goto ldv_module_exit;
    } else {

    }
#line 632
    ldv_s_pcf2123_driver_spi_driver = ldv_s_pcf2123_driver_spi_driver + 1;
  } else {

  }
#line 638
  goto ldv_18857;
  case 3: ;
#line 642
  if (ldv_s_pcf2123_driver_spi_driver == 1) {
#line 661
    ldv_handler_precall();
#line 662
    pcf2123_remove(var_group3);
#line 663
    ldv_s_pcf2123_driver_spi_driver = 0;
  } else {

  }
#line 669
  goto ldv_18857;
  default: ;
#line 670
  goto ldv_18857;
  }
  ldv_18857: ;
  ldv_18864: 
#line 537
  tmp___1 = nondet_int();
#line 537
  if (tmp___1 != 0 || ldv_s_pcf2123_driver_spi_driver != 0) {
#line 539
    goto ldv_18863;
  } else {

  }

  ldv_module_exit: 
#line 696
  ldv_handler_precall();
#line 697
  pcf2123_exit();
  ldv_final: 
#line 700
  ldv_check_final_state();
#line 703
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/rtc/rtc-pcf2123.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
