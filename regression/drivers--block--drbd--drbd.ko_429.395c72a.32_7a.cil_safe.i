/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "include/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "include/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "include/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "include/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "include/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "include/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "include/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "include/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "include/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 28 "include/linux/types.h"
typedef __u32 nlink_t;
#line 29 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 115 "include/linux/types.h"
typedef __u8 uint8_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 120 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 143 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 155 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 179 "include/linux/types.h"
typedef __u16 __be16;
#line 181 "include/linux/types.h"
typedef __u32 __be32;
#line 186 "include/linux/types.h"
typedef __u32 __wsum;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 203 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 221 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 221 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 226 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 226 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 227 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 232
struct hlist_node;
#line 232 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 236 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 247 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 60
struct completion;
#line 61
struct pt_regs;
#line 359 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2017_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2017_8 ldv_2017 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2024_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2024_10 ldv_2024 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2141_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2156_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2157_11 {
   struct __anonstruct_ldv_2141_12 ldv_2141 ;
   struct __anonstruct_ldv_2156_13 ldv_2156 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2157_11 ldv_2157 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2760_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2760_18 ldv_2760 ;
};
#line 96 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 193 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5115_23 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5121_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5122_22 {
   struct __anonstruct_ldv_5115_23 ldv_5115 ;
   struct __anonstruct_ldv_5121_24 ldv_5121 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5131_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5122_22 ldv_5122 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5131_25 ldv_5131 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 446
struct kmem_cache;
#line 447
struct perf_event;
#line 448 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 589 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5953_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5954_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5953_29 ldv_5953 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5954_28 ldv_5954 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 85
struct compat_timespec;
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 86
struct pollfd;
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6215_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 86 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6215_31 ldv_6215 ;
};
#line 52 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 394 "include/linux/spinlock.h"
struct vm_area_struct;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 321 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 105 "include/linux/debugobjects.h"
struct tvec_base;
#line 106 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 27 "include/linux/wait.h"
struct __wait_queue;
#line 27 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 30 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 48 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 53 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 665 "include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 556 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 713 "include/linux/mmzone.h"
struct rw_semaphore;
#line 714 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 847 "include/linux/mmzone.h"
struct ctl_table;
#line 345 "include/linux/irq.h"
struct proc_dir_entry;
#line 346
struct timer_rand_state;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_129 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_129 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_130 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_130 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_131 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_131 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_132 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_132 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_133 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_133 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_134 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_134 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_135 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_135 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "include/linux/if.h"
union __anonunion_ifs_ifsu_136 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_136 ifs_ifsu ;
};
#line 168 "include/linux/if.h"
union __anonunion_ifr_ifrn_137 {
   char ifrn_name[16U] ;
};
#line 168 "include/linux/if.h"
union __anonunion_ifr_ifru_138 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_137 ifr_ifrn ;
   union __anonunion_ifr_ifru_138 ifr_ifru ;
};
#line 232 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 133 "include/linux/if_ether.h"
struct prio_tree_node;
#line 133 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 181
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_trap_nr ;
   unsigned long saved_scratch_register ;
};
#line 58 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_BP_HIT = 1,
    UTASK_SSTEP = 2,
    UTASK_SSTEP_ACK = 3,
    UTASK_SSTEP_TRAPPED = 4
} ;
#line 66
struct uprobe;
#line 66 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 80 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 99 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
   atomic_t count ;
};
#line 121
struct address_space;
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13493_141 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13503_145 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13505_144 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_13503_145 ldv_13503 ;
   int units ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13507_143 {
   union __anonunion_ldv_13505_144 ldv_13505 ;
   atomic_t _count ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13508_142 {
   unsigned long counters ;
   struct __anonstruct_ldv_13507_143 ldv_13507 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13509_140 {
   union __anonunion_ldv_13493_141 ldv_13493 ;
   union __anonunion_ldv_13508_142 ldv_13508 ;
};
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13516_147 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 122
struct slab;
#line 122 "include/linux/uprobes.h"
struct __anonstruct_ldv_13522_148 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13523_146 {
   struct list_head lru ;
   struct __anonstruct_ldv_13516_147 ldv_13516 ;
   struct list_head list ;
   struct __anonstruct_ldv_13522_148 ldv_13522 ;
};
#line 122 "include/linux/uprobes.h"
union __anonunion_ldv_13528_149 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 122 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_13509_140 ldv_13509 ;
   union __anonunion_ldv_13523_146 ldv_13523 ;
   union __anonunion_ldv_13528_149 ldv_13528 ;
   unsigned long debug_flags ;
};
#line 219 "include/linux/mm_types.h"
struct __anonstruct_vm_set_151 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 219 "include/linux/mm_types.h"
union __anonunion_shared_150 {
   struct __anonstruct_vm_set_151 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 219
struct anon_vma;
#line 219
struct vm_operations_struct;
#line 219
struct mempolicy;
#line 219 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_150 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 282 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 288 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 301 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 314
struct linux_binfmt;
#line 314
struct mmu_notifier_mm;
#line 314 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_14247 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_14247 socket_state;
#line 178 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 179
struct pipe_inode_info;
#line 180
struct net;
#line 197
struct fasync_struct;
#line 197 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 128 "include/linux/net.h"
struct sock;
#line 128
struct proto_ops;
#line 128 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 154
struct kiocb;
#line 155 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 188 "include/linux/slab.h"
struct kobject;
#line 189
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 195 "include/linux/slab.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 564 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 574
struct dma_coherent_mem;
#line 574 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 699 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 42
struct file_ra_state;
#line 43
struct user_struct;
#line 44
struct writeback_control;
#line 178 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 195 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 1660 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1023 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 470 "include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 69 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 76 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 315 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct_ldv_19689_155 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_19690_154 {
   __wsum csum ;
   struct __anonstruct_ldv_19689_155 ldv_19689 ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_19728_156 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19690_154 ldv_19690 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char pfmemalloc : 1 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19728_156 ldv_19728 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 528
struct dst_entry;
#line 563
struct rtable;
#line 40 "include/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 212 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 316 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 400 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 72 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 107
struct bio_set;
#line 108
struct bio;
#line 109
struct bio_integrity_payload;
#line 110
struct block_device;
#line 111
struct io_context;
#line 112
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 20 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   struct bio_set *bi_pool ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_21997_161 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_21999_160 {
   struct __anonstruct_ldv_21997_161 ldv_21997 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_21999_160 ldv_21999 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_162 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_162 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 417 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44
struct export_operations;
#line 45
struct hd_geometry;
#line 46
struct kstatfs;
#line 47
struct swap_info_struct;
#line 451 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 275 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 303 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 314 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 328 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 344 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 390 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 601 "include/linux/fs.h"
union __anonunion_arg_164 {
   char *buf ;
   void *data ;
};
#line 601 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_163 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_164 arg ;
   int error ;
};
#line 601 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_163 read_descriptor_t;
#line 604 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 663
struct backing_dev_info;
#line 664 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 685
struct request_queue;
#line 686
struct hd_struct;
#line 686
struct gendisk;
#line 686 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 758
struct posix_acl;
#line 759
struct inode_operations;
#line 759 "include/linux/fs.h"
union __anonunion_ldv_23120_165 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 759 "include/linux/fs.h"
union __anonunion_ldv_23140_166 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 759
struct file_lock;
#line 759
struct cdev;
#line 759 "include/linux/fs.h"
union __anonunion_ldv_23156_167 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 759 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_23120_165 ldv_23120 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_23140_166 ldv_23140 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23156_167 ldv_23156 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 987 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 995 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 1018 "include/linux/fs.h"
union __anonunion_f_u_168 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 1018 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_168 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1157
struct files_struct;
#line 1157 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1158 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1163 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 1180
struct nlm_lockowner;
#line 1181 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_170 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_169 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_170 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_169 fl_u ;
};
#line 1267 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1473 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1489
struct file_system_type;
#line 1489
struct super_operations;
#line 1489
struct xattr_handler;
#line 1489
struct mtd_info;
#line 1489 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1731 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1769
struct block_device_operations;
#line 1770 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1805 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1852 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 2011 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_171 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_171 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_173 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_174 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_175 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_176 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_177 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_178 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigsys_179 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_172 {
   int _pad[28U] ;
   struct __anonstruct__kill_173 _kill ;
   struct __anonstruct__timer_174 _timer ;
   struct __anonstruct__rt_175 _rt ;
   struct __anonstruct__sigchld_176 _sigchld ;
   struct __anonstruct__sigfault_177 _sigfault ;
   struct __anonstruct__sigpoll_178 _sigpoll ;
   struct __anonstruct__sigsys_179 _sigsys ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_172 _sifields ;
};
#line 109 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 946 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 966 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 1005 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 1031 "include/linux/sysctl.h"
struct __anonstruct_ldv_26446_183 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 1031 "include/linux/sysctl.h"
union __anonunion_ldv_26448_182 {
   struct __anonstruct_ldv_26446_183 ldv_26446 ;
   struct callback_head rcu ;
};
#line 1031
struct ctl_table_set;
#line 1031 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_26448_182 ldv_26448 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 1052 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 1058 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 1063 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26527_184 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26536_185 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_186 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_187 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_26527_184 ldv_26527 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26536_185 ldv_26536 ;
   time_t last_used_at ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_186 type_data ;
   union __anonunion_payload_187 payload ;
};
#line 321
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 151 "include/linux/sched.h"
struct cfs_rq;
#line 152
struct task_group;
#line 387
struct kioctx;
#line 388 "include/linux/sched.h"
union __anonunion_ki_obj_188 {
   void *user ;
   struct task_struct *tsk ;
};
#line 388
struct eventfd_ctx;
#line 388 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_188 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 408 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 457 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 465 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 472 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 489 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 525
struct autogroup;
#line 526
struct tty_struct;
#line 526
struct taskstats;
#line 526
struct tty_audit_buf;
#line 526 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 707 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 751
struct reclaim_state;
#line 752 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 767 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1070
struct rq;
#line 1071 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1137 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1142 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1177 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1203
struct rt_rq;
#line 1203 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1226
struct mem_cgroup;
#line 1226 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1586
struct css_set;
#line 1586
struct compat_robust_list_head;
#line 1586 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 225 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 229 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 589 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 66 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 106 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 121 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 129 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 138 "include/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 167 "include/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 184 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 282 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 304 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 332 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 383 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 405 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 426 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 459 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 475 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 495 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 506 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 512 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 537 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 695 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 703 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 779 "include/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 843
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 878 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 1061
struct prot_inuse;
#line 1062 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[88U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 73
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct fib_table;
#line 76
struct inet_peer_base;
#line 76
struct xt_table;
#line 76 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   unsigned int sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 79 "include/net/netns/ipv4.h"
struct neighbour;
#line 79 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 71 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 335 "include/linux/in.h"
union __anonunion_in6_u_197 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 335 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_197 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 412 "include/linux/netfilter.h"
struct ebt_table;
#line 413 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 77 "include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
};
#line 106 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 30 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 291 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154
struct cgroupfs_root;
#line 155
struct cgroup_subsys;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 59 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 150 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct callback_head callback_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct callback_head callback_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 388 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype  const  *cfts ;
};
#line 437
struct cgroup_taskset;
#line 447 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 622 "include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 74 "include/net/netprio_cgroup.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 157 "include/linux/neighbour.h"
struct netpoll_info;
#line 158
struct phy_device;
#line 159
struct wireless_dev;
#line 160
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 116 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 135 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 221
struct neigh_parms;
#line 241 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 246 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 275 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 369
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 417 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 418 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 526
struct Qdisc;
#line 526 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 590 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 602 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 614 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 666 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 676 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 689 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 700 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 711 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 727 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct net_device * , unsigned char * , u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1041
struct iw_handler_def;
#line 1041
struct iw_public_data;
#line 1041
struct vlan_info;
#line 1041
struct in_device;
#line 1041
struct dn_dev;
#line 1041
struct inet6_dev;
#line 1041
struct cpu_rmap;
#line 1041
struct pcpu_lstats;
#line 1041
struct pcpu_tstats;
#line 1041
struct pcpu_dstats;
#line 1041 "include/linux/netdevice.h"
union __anonunion_ldv_33408_204 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1041
struct garp_port;
#line 1041
struct rtnl_link_ops;
#line 1041 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_33408_204 ldv_33408 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 402 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 145 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct callback_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 691 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 402 "include/net/neighbour.h"
union __anonunion_ldv_37556_209 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 402
struct dn_route;
#line 402 "include/net/neighbour.h"
union __anonunion_ldv_37581_210 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 402 "include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_37556_209 ldv_37556 ;
   struct dst_entry *path ;
   void *__pad0 ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37581_210 ldv_37581 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_211 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_211 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_37795_212 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37803_213 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_37810_214 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37795_212 ldv_37795 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37803_213 ldv_37803 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37810_214 ldv_37810 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_215 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_215 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 833
struct request_sock_ops;
#line 834
struct timewait_sock_ops;
#line 835
struct inet_hashinfo;
#line 836
struct raw_hashinfo;
#line 837
struct udp_table;
#line 837 "include/net/sock.h"
union __anonunion_h_216 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 837 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_216 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 963 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_39162_217 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_39162_217 ldv_39162 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_218 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_218 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_219 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_219 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 371 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 97 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};
#line 151 "include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 158
struct disk_events;
#line 159
struct blk_integrity;
#line 159 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 71 "include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 39 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 65 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_42581_226 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_42585_227 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 77 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_42581_226 ldv_42581 ;
   union __anonunion_ldv_42585_227 ldv_42585 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 275 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 374 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 84
struct request;
#line 86
struct bsg_job;
#line 87
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};
#line 67
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_43023_228 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_elv_230 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_flush_231 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_43034_229 {
   struct __anonstruct_elv_230 elv ;
   struct __anonstruct_flush_231 flush ;
};
#line 79 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_43023_228 ldv_43023 ;
   union __anonunion_ldv_43034_229 ldv_43034 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 217 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 219 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 220 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 221 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 229 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 231 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 232 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 233 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 234 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 235
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 242 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 248 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 257 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 285
struct throtl_data;
#line 285 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 906 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1241 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1273 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1274 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1275 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1276 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1277 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1336 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 700 "include/net/ipv6.h"
union __anonunion_ldv_45618_237 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 700 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_45618_237 ldv_45618 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45633_238 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_45638_240 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45641_239 {
   struct __anonstruct_ldv_45638_240 ldv_45638 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_ldv_45633_238 ldv_45633 ;
   union __anonunion_ldv_45641_239 ldv_45641 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u16 rt_is_input ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 315 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1655 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 725 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_48227_243 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_48227_243 ldv_48227 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 900 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 910 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
   int disk_timeout ;
};
#line 39 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 81 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 152 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 944 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 949 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 957
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 963 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 969 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct list_head barrier_acked_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   unsigned long last_reattach_jif ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   unsigned int peer_max_bio_size ;
   unsigned int local_max_bio_size ;
};
#line 1181
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 1849
enum drbd_force_detach_flags {
    DRBD_IO_ERROR = 0,
    DRBD_META_IO_ERROR = 1,
    DRBD_FORCE_DETACH = 2
} ;
#line 2502 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 1773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___2;
#line 1845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___9;
#line 45 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 215 "include/linux/kobject.h"
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13682_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13682_134 ldv_13682 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct module_param_attrs;
#line 34 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 43 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 69
struct exception_table_entry;
#line 198
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 204 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 219
struct module_sect_attrs;
#line 219
struct module_notes_attrs;
#line 219
struct ftrace_event_call;
#line 219 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 640 "include/linux/module.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   unsigned long start_time ;
};
#line 753 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    abort_disk_io = 22,
    completed_ok = 23,
    resend = 24,
    fail_frozen_disk_io = 25,
    restart_frozen_disk_io = 26,
    nothing = 27
} ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 746
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1189
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1557
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_244 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_244 updates[62U] ;
   u32 xor_sum ;
};
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 191 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 3885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 178 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u32 __le32;
#line 182 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 640 "include/linux/module.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 923 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 22 "include/linux/drbd_nl.h"
struct detach {
   unsigned char detach_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 77 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 111 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 139 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 148 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_disk_timeout = 89,
    T_detach_force = 41048,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 114 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 279
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 283
  return (oldbit);
}
}
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 320
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (4*32+23)\n .byte 662b-661b\n .byte 6641f-6631f\n.previous\n.section .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n6641:\n\t.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 77 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 79
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 79
  return (tmp);
}
}
#line 82 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 84
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 84
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 158 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2854;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2854;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2854;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2854;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2854: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 71 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5467;
  case 2UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5467;
  case 4UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5467;
  case 8UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5467;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5467: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
#line 175
int ldv_mutex_trylock_11(struct mutex *ldv_func_arg1 ) ;
#line 177
extern void mutex_unlock(struct mutex * ) ;
#line 180
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_10(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) ;
#line 31
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 32
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 35
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 39
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 43
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 55
void ldv_mutex_lock_lock(struct mutex *lock ) ;
#line 59
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
#line 63
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 64
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 67
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 71
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 75
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 204 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6238;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6238;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6238;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6238;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6238: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5954.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5954.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5954.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5954.rlock, flags);
#line 341
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 91 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 79 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 155
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 330 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 333 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 335
  tmp = alloc_pages_current(gfp_mask, order);
#line 335
  return (tmp);
}
}
#line 366
extern void __free_pages(struct page * , unsigned int  ) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 64 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 67
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 67
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 67
  if (tmp != 0L) {
#line 67
    warn_slowpath_null("include/linux/kref.h", 67);
  } else {

  }
#line 67
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 69
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 69
  if (tmp___0 != 0) {
#line 70
    (*release)(kref);
#line 71
    return (1);
  } else {

  }
#line 73
  return (0);
}
}
#line 93 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 95
  tmp = kref_sub(kref, 1U, release);
#line 95
  return (tmp);
}
}
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 373 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 375
  tmp = kmalloc(size, flags | 32768U);
#line 375
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 903 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 907
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 909
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 913
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 739 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 741
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2542 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 364 "include/linux/sched.h"
extern void schedule(void) ;
#line 2627
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  pagefault_disable();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 75
  pagefault_enable();
#line 76
  return;
}
}
#line 34 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 218 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 221
extern void bio_endio(struct bio * , int  ) ;
#line 230
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 987 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1212
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1307
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1308
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1451
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1452
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1453
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1454
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1455
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1457
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1461
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1465
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1467
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1468
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1469
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1470
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1471
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1472
int drbd_bm_write_all(struct drbd_conf *mdev ) ;
#line 1473
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1474
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1476
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1477
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1478
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1481
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1483
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1484
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1485
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1486
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1489
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1492
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1495
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1496
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1530
mempool_t *drbd_md_io_page_pool ;
#line 1536
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1538
rwlock_t global_state_lock ;
#line 1555
char *ppsize(char *buf , unsigned long long size ) ;
#line 1580
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) ;
#line 1821 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1826
  _raw_read_lock(& global_state_lock);
#line 1827
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1828
  _raw_read_unlock(& global_state_lock);
#line 1830
  return (rv);
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1861
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1863
  if ((unsigned int )forcedetach == 0U) {
#line 1864
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1864
    if (tmp != 0) {
#line 1865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1866
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1867
      __ns.i = mdev->state.i;
#line 1867
      __ns.ldv_39162.disk = 4U;
#line 1867
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1868
    goto ldv_49261;
  } else {

  }
  case 2: ;
  case 1: 
#line 1873
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1874
  if ((unsigned int )forcedetach == 2U) {
#line 1875
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1876
  if ((int )mdev->state.ldv_39162.disk > 2) {
#line 1877
    __ns___0.i = mdev->state.i;
#line 1877
    __ns___0.ldv_39162.disk = 2U;
#line 1877
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1881
  goto ldv_49261;
  }
  ldv_49261: ;
#line 1884
  return;
}
}
#line 1894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1897
  if (error != 0) {
#line 1899
    tmp = spinlock_check(& mdev->req_lock);
#line 1899
    flags = _raw_spin_lock_irqsave(tmp);
#line 1900
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1901
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1903
  return;
}
}
#line 1929 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1931
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1934
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1937
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2194
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2194
  i = tmp;
#line 2200
  if (i < 0) {
#line 2200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2200);
  } else {

  }
#line 2201
  if (i == 0) {
#line 2202
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2204
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2205
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2207
      drbd_go_diskless(mdev);
    } else {

    }
#line 2208
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2210
  return;
}
}
#line 2213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2218
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2219
    return (0);
  } else {

  }
#line 2221
  atomic_inc(& mdev->local_cnt);
#line 2222
  io_allowed = (unsigned int )mdev->state.ldv_39162.disk >= (unsigned int )mins;
#line 2223
  if (io_allowed == 0) {
#line 2224
    put_ldev(mdev);
  } else {

  }
#line 2225
  return (io_allowed);
}
}
#line 2489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2493
  tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2493
  if (tmp != 0) {
#line 2494
    return;
  } else {

  }
#line 2496
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2497
  if (r != 0) {
#line 2498
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 2499
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2501
  return;
}
}
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 181
  b = mdev->bitmap;
#line 182
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 182
  if (tmp == 0) {
#line 183
    return;
  } else {

  }
#line 184
  tmp___9 = get_current();
#line 184
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 184
    tmp___7 = get_current();
#line 184
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 184
      tmp___5 = get_current();
#line 184
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 184
        tmp___3 = get_current();
#line 184
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 184
        tmp___4 = (char *)"worker";
      }
#line 184
      tmp___6 = tmp___4;
    } else {
#line 184
      tmp___6 = (char *)"asender";
    }
#line 184
    tmp___8 = tmp___6;
  } else {
#line 184
    tmp___8 = (char *)"receiver";
  }
#line 184
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 190
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 196
  b = mdev->bitmap;
#line 199
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 201
    return;
  } else {

  }
#line 204
  tmp = ldv_mutex_trylock_11(& b->bm_change);
#line 204
  trylock_failed = tmp == 0;
#line 206
  if (trylock_failed != 0) {
#line 207
    tmp___9 = get_current();
#line 207
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 207
      tmp___7 = get_current();
#line 207
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 207
        tmp___5 = get_current();
#line 207
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 207
          tmp___3 = get_current();
#line 207
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 207
          tmp___4 = (char *)"worker";
        }
#line 207
        tmp___6 = tmp___4;
      } else {
#line 207
        tmp___6 = (char *)"asender";
      }
#line 207
      tmp___8 = tmp___6;
    } else {
#line 207
      tmp___8 = (char *)"receiver";
    }
#line 207
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 215
    ldv_mutex_lock_12(& b->bm_change);
  } else {

  }
#line 217
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 219
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 221
  b->bm_why = why;
#line 222
  b->bm_task = get_current();
#line 223
  return;
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 227
  b = mdev->bitmap;
#line 228
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 230
    return;
  } else {

  }
#line 233
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 234
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 236
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 237
  b->bm_why = 0;
#line 238
  b->bm_task = 0;
#line 239
  ldv_mutex_unlock_13(& b->bm_change);
#line 240
  return;
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 270
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 270
  if (tmp != 0L) {
#line 270
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (270), "i" (12UL));
    ldv_49532: ;
#line 270
    goto ldv_49532;
  } else {

  }
#line 271
  page->ldv_13528.private = idx;
#line 272
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 276
  return (page->ldv_13528.private & 16777215UL);
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 284
  b = mdev->bitmap;
#line 285
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13528.private);
#line 286
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 286
  if (tmp == 0) {
#line 286
    goto ldv_49542;
  } else {

  }
#line 286
  tmp___0 = get_current();
#line 286
  __wait.flags = 0U;
#line 286
  __wait.private = (void *)tmp___0;
#line 286
  __wait.func = & autoremove_wake_function;
#line 286
  __wait.task_list.next = & __wait.task_list;
#line 286
  __wait.task_list.prev = & __wait.task_list;
  ldv_49545: 
#line 286
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 286
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 286
  if (tmp___1 == 0) {
#line 286
    goto ldv_49544;
  } else {

  }
#line 286
  schedule();
#line 286
  goto ldv_49545;
  ldv_49544: 
#line 286
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_49542: ;
#line 289
  return;
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 291
  b = mdev->bitmap;
#line 292
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_13528.private);
#line 293
  clear_bit(31, (unsigned long volatile   *)addr);
#line 294
  __asm__  volatile   ("": : : "memory");
#line 295
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 296
  return;
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 303
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 304
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 305
  return;
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 309
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 314
  addr = (unsigned long const volatile   *)(& page->ldv_13528.private);
#line 315
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 320
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 321
  return;
}
}
#line 323 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 325
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 326
  return;
}
}
#line 328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 330
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_13528.private));
#line 331
  return;
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 335
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_13528.private));
#line 335
  return (tmp);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 342
  page_nr = (unsigned int )(long_nr >> 9);
#line 343
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 343
  if (tmp != 0L) {
#line 343
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (343), "i" (12UL));
    ldv_49579: ;
#line 343
    goto ldv_49579;
  } else {

  }
#line 344
  return (page_nr);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 350
  page_nr = (unsigned int )(bitnr >> 15);
#line 351
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 351
  if (tmp != 0L) {
#line 351
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (351), "i" (12UL));
    ldv_49585: ;
#line 351
    goto ldv_49585;
  } else {

  }
#line 352
  return (page_nr);
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 357
  page = *(b->bm_pages + (unsigned long )idx);
#line 358
  tmp = kmap_atomic(page);
#line 358
  return ((unsigned long *)tmp);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 363
  tmp = __bm_map_pidx(b, idx);
#line 363
  return (tmp);
}
}
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 368
  __kunmap_atomic((void *)p_addr);
#line 369
  return;
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 373
  return;
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 399
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 400
    return;
  } else {

  }
#line 402
  i = 0UL;
#line 402
  goto ldv_49608;
  ldv_49607: ;
#line 403
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 404
    printk("\tdrbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 407
    goto ldv_49606;
  } else {

  }
#line 409
  __free_pages(*(pages + i), 0U);
#line 410
  *(pages + i) = 0;
  ldv_49606: 
#line 402
  i = i + 1UL;
  ldv_49608: ;
#line 402
  if (i < number) {
#line 403
    goto ldv_49607;
  } else {

  }

#line 407
  return;
}
}
#line 414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 416
  if (v != 0) {
#line 417
    vfree((void const   *)ptr);
  } else {
#line 419
    kfree((void const   *)ptr);
  }
#line 420
  return;
}
}
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 427
  old_pages = b->bm_pages;
#line 429
  vmalloced = 0U;
#line 430
  have = b->bm_number_of_pages;
#line 432
  tmp = __builtin_expect(have == 0UL, 0L);
#line 432
  if (tmp != 0L) {
#line 432
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 432
    if (tmp___0 != 0L) {
#line 432
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (432), "i" (12UL));
      ldv_49625: ;
#line 432
      goto ldv_49625;
    } else {

    }
  } else {

  }
#line 433
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 433
  if (tmp___1 != 0L) {
#line 433
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 433
    if (tmp___2 != 0L) {
#line 433
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (433), "i" (12UL));
      ldv_49626: ;
#line 433
      goto ldv_49626;
    } else {

    }
  } else {

  }
#line 435
  if (have == want) {
#line 436
    return (old_pages);
  } else {

  }
#line 443
  bytes = (unsigned int )want * 8U;
#line 444
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 444
  new_pages = (struct page **)tmp___3;
#line 445
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 446
    tmp___4 = vzalloc((unsigned long )bytes);
#line 446
    new_pages = (struct page **)tmp___4;
#line 447
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 448
      return (0);
    } else {

    }
#line 449
    vmalloced = 1U;
  } else {

  }
#line 452
  if (want >= have) {
#line 453
    i = 0U;
#line 453
    goto ldv_49628;
    ldv_49627: 
#line 454
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 453
    i = i + 1U;
    ldv_49628: ;
#line 453
    if ((unsigned long )i < have) {
#line 454
      goto ldv_49627;
    } else {

    }

#line 455
    goto ldv_49631;
    ldv_49630: 
#line 456
    page = alloc_pages(131282U, 0U);
#line 457
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 458
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 459
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 460
      return (0);
    } else {

    }
#line 464
    bm_store_page_idx(page, (unsigned long )i);
#line 465
    *(new_pages + (unsigned long )i) = page;
#line 455
    i = i + 1U;
    ldv_49631: ;
#line 455
    if ((unsigned long )i < want) {
#line 456
      goto ldv_49630;
    } else {

    }

  } else {
#line 468
    i = 0U;
#line 468
    goto ldv_49634;
    ldv_49633: 
#line 469
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 468
    i = i + 1U;
    ldv_49634: ;
#line 468
    if ((unsigned long )i < want) {
#line 469
      goto ldv_49633;
    } else {

    }

  }
#line 475
  if (vmalloced != 0U) {
#line 476
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 478
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 480
  return (new_pages);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 489
  b = mdev->bitmap;
#line 490
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 490
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 490
  if (tmp != 0L) {
#line 490
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       490);
  } else {

  }
#line 490
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 491
  tmp___0 = kzalloc(400UL, 208U);
#line 491
  b = (struct drbd_bitmap *)tmp___0;
#line 492
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 493
    return (-12);
  } else {

  }
#line 494
  spinlock_check(& b->bm_lock);
#line 494
  __raw_spin_lock_init(& b->bm_lock.ldv_5954.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 495
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 496
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 498
  mdev->bitmap = b;
#line 500
  return (0);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 505
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 505
  if (_b != 0) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            505);
  } else {

  }
#line 505
  if (_b != 0) {
#line 505
    return (0UL);
  } else {

  }
#line 506
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 513
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 513
  if (_b != 0) {
#line 513
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            513);
  } else {

  }
#line 513
  if (_b != 0) {
#line 513
    return;
  } else {

  }
#line 514
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 515
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 516
  kfree((void const   *)mdev->bitmap);
#line 517
  mdev->bitmap = 0;
#line 518
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 533
  cleared = 0;
#line 536
  tmp = (int )b->bm_bits & 32767;
#line 538
  mask = (1UL << (tmp & 63)) - 1UL;
#line 541
  mask = mask;
#line 543
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 544
  bm = p_addr + (unsigned long )(tmp / 64);
#line 545
  if (mask != 0UL) {
#line 550
    tmp___0 = hweight_long(*bm & ~ mask);
#line 550
    cleared = (int )tmp___0;
#line 551
    *bm = *bm & mask;
#line 552
    bm = bm + 1;
  } else {

  }
#line 561
  bm_unmap(p_addr);
#line 562
  return (cleared);
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 572
  tmp = (int )b->bm_bits & 32767;
#line 574
  mask = (1UL << (tmp & 63)) - 1UL;
#line 577
  mask = mask;
#line 579
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 580
  bm = p_addr + (unsigned long )(tmp / 64);
#line 581
  if (mask != 0UL) {
#line 586
    *bm = *bm | ~ mask;
#line 587
    bm = bm + 1;
  } else {

  }
#line 595
  bm_unmap(p_addr);
#line 596
  return;
}
}
#line 600 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 603
  bits = 0UL;
#line 604
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 608
  idx = 0;
#line 608
  goto ldv_49686;
  ldv_49685: 
#line 609
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 610
  i = 0;
#line 610
  goto ldv_49682;
  ldv_49681: 
#line 611
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 611
  bits = tmp + bits;
#line 610
  i = i + 1;
  ldv_49682: ;
#line 610
  if ((unsigned int )i <= 511U) {
#line 611
    goto ldv_49681;
  } else {

  }
#line 612
  __bm_unmap(p_addr);
#line 613
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                613, 0);
#line 613
  _cond_resched();
#line 608
  idx = idx + 1;
  ldv_49686: ;
#line 608
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 609
    goto ldv_49685;
  } else {

  }
#line 616
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 617
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 618
  i = 0;
#line 618
  goto ldv_49689;
  ldv_49688: 
#line 619
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 619
  bits = tmp___0 + bits;
#line 618
  i = i + 1;
  ldv_49689: ;
#line 618
  if (i < last_word) {
#line 619
    goto ldv_49688;
  } else {

  }
#line 620
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 621
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 621
  bits = tmp___1 + bits;
#line 625
  __bm_unmap(p_addr);
#line 626
  return (bits);
}
}
#line 630 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 636
  end = offset + len;
#line 638
  if (b->bm_words < end) {
#line 639
    printk("\tdrbd: bm_memset end > bm_words\n");
#line 640
    return;
  } else {

  }
#line 643
  goto ldv_49706;
  ldv_49705: 
#line 644
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 644
  __min2 = end;
#line 644
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 645
  idx = bm_word_to_page_idx(b, offset);
#line 646
  p_addr = bm_map_pidx(b, idx);
#line 647
  bm = p_addr + (offset & 511UL);
#line 648
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 649
    printk("\tdrbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 652
    memset((void *)bm, c, do_now * 8UL);
  }
#line 653
  bm_unmap(p_addr);
#line 654
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 655
  offset = offset + do_now;
  ldv_49706: ;
#line 643
  if (offset < end) {
#line 644
    goto ldv_49705;
  } else {

  }

#line 648
  return;
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 669
  b = mdev->bitmap;
#line 672
  opages = 0;
#line 673
  err = 0;
#line 676
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 676
  if (_b != 0) {
#line 676
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            676);
  } else {

  }
#line 676
  if (_b != 0) {
#line 676
    return (-12);
  } else {

  }
#line 678
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 680
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 683
  if (b->bm_dev_capacity == capacity) {
#line 684
    goto out;
  } else {

  }
#line 686
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 688
  if (capacity == 0UL) {
#line 689
    spin_lock_irq(& b->bm_lock);
#line 690
    opages = b->bm_pages;
#line 691
    onpages = b->bm_number_of_pages;
#line 692
    owords = b->bm_words;
#line 693
    b->bm_pages = 0;
#line 694
    tmp___2 = 0UL;
#line 694
    b->bm_dev_capacity = tmp___2;
#line 694
    tmp___1 = tmp___2;
#line 694
    b->bm_words = tmp___1;
#line 694
    tmp___0 = tmp___1;
#line 694
    b->bm_bits = tmp___0;
#line 694
    tmp = tmp___0;
#line 694
    b->bm_set = tmp;
#line 694
    b->bm_number_of_pages = tmp;
#line 699
    spin_unlock_irq(& b->bm_lock);
#line 700
    bm_free_pages(opages, onpages);
#line 701
    bm_vk_free((void *)opages, opages_vmalloced);
#line 702
    goto out;
  } else {

  }
#line 704
  bits = (capacity + 7UL) >> 3;
#line 711
  words = (bits + 63UL) >> 6;
#line 713
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 713
  if (tmp___3 != 0) {
#line 714
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 715
    put_ldev(mdev);
#line 716
    if ((unsigned long long )bits > bits_on_disk) {
#line 717
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 718
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 719
      err = -28;
#line 720
      goto out;
    } else {

    }
  } else {

  }
#line 724
  want = (words * 8UL + 4095UL) >> 12;
#line 725
  have = b->bm_number_of_pages;
#line 726
  if (want == have) {
#line 727
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 727
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              727);
    } else {

    }
#line 728
    npages = b->bm_pages;
  } else {
#line 730
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 730
    if (tmp___4 != 0) {
#line 731
      npages = 0;
    } else {
#line 733
      npages = bm_realloc_pages(b, want);
    }
  }
#line 736
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 737
    err = -12;
#line 738
    goto out;
  } else {

  }
#line 741
  spin_lock_irq(& b->bm_lock);
#line 742
  opages = b->bm_pages;
#line 743
  owords = b->bm_words;
#line 744
  obits = b->bm_bits;
#line 746
  growing = bits > obits;
#line 747
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 748
    bm_set_surplus(b);
  } else {

  }
#line 750
  b->bm_pages = npages;
#line 751
  b->bm_number_of_pages = want;
#line 752
  b->bm_bits = bits;
#line 753
  b->bm_words = words;
#line 754
  b->bm_dev_capacity = capacity;
#line 756
  if (growing != 0) {
#line 757
    if (set_new_bits != 0) {
#line 758
      bm_memset(b, owords, 255, words - owords);
#line 759
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 761
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 765
  if (want < have) {
#line 767
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 770
  bm_clear_surplus(b);
#line 772
  spin_unlock_irq(& b->bm_lock);
#line 773
  if ((unsigned long )opages != (unsigned long )npages) {
#line 774
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 775
  if (growing == 0) {
#line 776
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 777
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 780
  drbd_bm_unlock(mdev);
#line 781
  return (err);
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 794
  b = mdev->bitmap;
#line 798
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 798
  if (_b != 0) {
#line 798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            798);
  } else {

  }
#line 798
  if (_b != 0) {
#line 798
    return (0UL);
  } else {

  }
#line 799
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 799
  if (_b___0 != 0) {
#line 799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            799);
  } else {

  }
#line 799
  if (_b___0 != 0) {
#line 799
    return (0UL);
  } else {

  }
#line 801
  tmp = spinlock_check(& b->bm_lock);
#line 801
  flags = _raw_spin_lock_irqsave(tmp);
#line 802
  s = b->bm_set;
#line 803
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 805
  return (s);
}
}
#line 808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 812
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 812
  if (tmp == 0) {
#line 813
    return (0UL);
  } else {

  }
#line 814
  s = _drbd_bm_total_weight(mdev);
#line 815
  put_ldev(mdev);
#line 816
  return (s);
}
}
#line 819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 821
  b = mdev->bitmap;
#line 822
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 822
  if (_b != 0) {
#line 822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            822);
  } else {

  }
#line 822
  if (_b != 0) {
#line 822
    return (0UL);
  } else {

  }
#line 823
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 823
  if (_b___0 != 0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            823);
  } else {

  }
#line 823
  if (_b___0 != 0) {
#line 823
    return (0UL);
  } else {

  }
#line 825
  return (b->bm_words);
}
}
#line 828 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 830
  b = mdev->bitmap;
#line 831
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 831
  if (_b != 0) {
#line 831
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            831);
  } else {

  }
#line 831
  if (_b != 0) {
#line 831
    return (0UL);
  } else {

  }
#line 833
  return (b->bm_bits);
}
}
#line 841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 844
  b = mdev->bitmap;
#line 850
  end = offset + number;
#line 852
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 852
  if (_b != 0) {
#line 852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            852);
  } else {

  }
#line 852
  if (_b != 0) {
#line 852
    return;
  } else {

  }
#line 853
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 853
  if (_b___0 != 0) {
#line 853
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            853);
  } else {

  }
#line 853
  if (_b___0 != 0) {
#line 853
    return;
  } else {

  }
#line 854
  if (number == 0UL) {
#line 855
    return;
  } else {

  }
#line 856
  __ret_warn_on = b->bm_words <= offset;
#line 856
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 856
  if (tmp != 0L) {
#line 856
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       856);
  } else {

  }
#line 856
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 857
  __ret_warn_on___0 = b->bm_words < end;
#line 857
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 857
  if (tmp___0 != 0L) {
#line 857
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       857);
  } else {

  }
#line 857
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 859
  spin_lock_irq(& b->bm_lock);
#line 860
  goto ldv_49795;
  ldv_49794: 
#line 861
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 861
  __min2 = end;
#line 861
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 862
  idx = bm_word_to_page_idx(b, offset);
#line 863
  p_addr = bm_map_pidx(b, idx);
#line 864
  bm = p_addr + (offset & 511UL);
#line 865
  offset = offset + do_now;
#line 866
  goto ldv_49792;
  ldv_49791: 
#line 867
  bits = hweight_long(*bm);
#line 868
  tmp___1 = buffer;
#line 868
  buffer = buffer + 1;
#line 868
  word = *bm | *tmp___1;
#line 869
  tmp___2 = bm;
#line 869
  bm = bm + 1;
#line 869
  *tmp___2 = word;
#line 870
  tmp___3 = hweight_long(word);
#line 870
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_49792: 
#line 866
  tmp___4 = do_now;
#line 866
  do_now = do_now - (size_t )1;
#line 866
  if (tmp___4 != 0UL) {
#line 867
    goto ldv_49791;
  } else {

  }
#line 872
  bm_unmap(p_addr);
#line 873
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_49795: ;
#line 860
  if (offset < end) {
#line 861
    goto ldv_49794;
  } else {

  }

#line 880
  if (b->bm_words == end) {
#line 881
    tmp___5 = bm_clear_surplus(b);
#line 881
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 882
  spin_unlock_irq(& b->bm_lock);
#line 883
  return;
}
}
#line 888 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 891
  b = mdev->bitmap;
#line 895
  end = offset + number;
#line 897
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 897
  if (_b != 0) {
#line 897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            897);
  } else {

  }
#line 897
  if (_b != 0) {
#line 897
    return;
  } else {

  }
#line 898
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 898
  if (_b___0 != 0) {
#line 898
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            898);
  } else {

  }
#line 898
  if (_b___0 != 0) {
#line 898
    return;
  } else {

  }
#line 900
  spin_lock_irq(& b->bm_lock);
#line 901
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 904
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 909
    goto ldv_49820;
    ldv_49819: 
#line 910
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 910
    __min2 = end;
#line 910
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 911
    tmp = bm_word_to_page_idx(b, offset);
#line 911
    p_addr = bm_map_pidx(b, tmp);
#line 912
    bm = p_addr + (offset & 511UL);
#line 913
    offset = offset + do_now;
#line 914
    goto ldv_49817;
    ldv_49816: 
#line 915
    tmp___0 = buffer;
#line 915
    buffer = buffer + 1;
#line 915
    tmp___1 = bm;
#line 915
    bm = bm + 1;
#line 915
    *tmp___0 = *tmp___1;
    ldv_49817: 
#line 914
    tmp___2 = do_now;
#line 914
    do_now = do_now - (size_t )1;
#line 914
    if (tmp___2 != 0UL) {
#line 915
      goto ldv_49816;
    } else {

    }
#line 916
    bm_unmap(p_addr);
    ldv_49820: ;
#line 909
    if (offset < end) {
#line 910
      goto ldv_49819;
    } else {

    }

  }
#line 919
  spin_unlock_irq(& b->bm_lock);
#line 920
  return;
}
}
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 925
  b = mdev->bitmap;
#line 926
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 926
  if (_b != 0) {
#line 926
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            926);
  } else {

  }
#line 926
  if (_b != 0) {
#line 926
    return;
  } else {

  }
#line 927
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 927
  if (_b___0 != 0) {
#line 927
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            927);
  } else {

  }
#line 927
  if (_b___0 != 0) {
#line 927
    return;
  } else {

  }
#line 929
  spin_lock_irq(& b->bm_lock);
#line 930
  bm_memset(b, 0UL, 255, b->bm_words);
#line 931
  bm_clear_surplus(b);
#line 932
  b->bm_set = b->bm_bits;
#line 933
  spin_unlock_irq(& b->bm_lock);
#line 934
  return;
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 939
  b = mdev->bitmap;
#line 940
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 940
  if (_b != 0) {
#line 940
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            940);
  } else {

  }
#line 940
  if (_b != 0) {
#line 940
    return;
  } else {

  }
#line 941
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 941
  if (_b___0 != 0) {
#line 941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            941);
  } else {

  }
#line 941
  if (_b___0 != 0) {
#line 941
    return;
  } else {

  }
#line 943
  spin_lock_irq(& b->bm_lock);
#line 944
  bm_memset(b, 0UL, 0, b->bm_words);
#line 945
  b->bm_set = 0UL;
#line 946
  spin_unlock_irq(& b->bm_lock);
#line 947
  return;
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 962
  __mptr = (struct kref  const  *)kref;
#line 962
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 964
  put_ldev(ctx->mdev);
#line 965
  kfree((void const   *)ctx);
#line 966
  return;
}
}
#line 969 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 971
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 972
  mdev = ctx->mdev;
#line 973
  b = mdev->bitmap;
#line 974
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 974
  idx = (unsigned int )tmp;
#line 975
  uptodate = (int )bio->bi_flags & 1;
#line 982
  if (error == 0 && uptodate == 0) {
#line 983
    error = -5;
  } else {

  }
#line 985
  if ((ctx->flags & 1U) == 0U) {
#line 985
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 985
    if (tmp___0 == 0) {
#line 987
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 989
  if (error != 0) {
#line 992
    ctx->error = error;
#line 993
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 996
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 996
    if (tmp___1 != 0) {
#line 997
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 1000
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 1001
    descriptor.modname = "drbd";
#line 1001
    descriptor.function = "bm_async_io_complete";
#line 1001
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1001
    descriptor.format = "bitmap page idx %u completed\n";
#line 1001
    descriptor.lineno = 1001U;
#line 1001
    descriptor.flags = 0U;
#line 1001
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1001
    if (tmp___2 != 0L) {
#line 1001
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 1004
  bm_page_unlock_io(mdev, (int )idx);
#line 1006
  if ((int )ctx->flags & 1) {
#line 1007
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 1009
  bio_put(bio);
#line 1011
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 1011
  if (tmp___3 != 0) {
#line 1012
    ctx->done = 1U;
#line 1013
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1014
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 1016
  return;
}
}
#line 1018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 1020
  tmp = bio_alloc_drbd(16U);
#line 1020
  bio = tmp;
#line 1021
  mdev = ctx->mdev;
#line 1022
  b = mdev->bitmap;
#line 1026
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1028
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1033
  __min1 = 4096U;
#line 1033
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1033
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1033
  len = __min1 < __min2 ? __min1 : __min2;
#line 1037
  bm_page_lock_io(mdev, page_nr);
#line 1040
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1042
  if ((int )ctx->flags & 1) {
#line 1044
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 1044
    page = (struct page *)tmp___1;
#line 1045
    dest = kmap_atomic(page);
#line 1046
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1047
    __len = 4096UL;
#line 1047
    if (__len > 63UL) {
#line 1047
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1047
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1048
    __kunmap_atomic(src);
#line 1049
    __kunmap_atomic(dest);
#line 1050
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1052
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1054
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1055
  bio->bi_sector = on_disk_sector;
#line 1058
  bio_add_page(bio, page, len, 0U);
#line 1059
  bio->bi_private = (void *)ctx;
#line 1060
  bio->bi_end_io = & bm_async_io_complete;
#line 1062
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1062
  if (tmp___2 != 0) {
#line 1063
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1064
    bio_endio(bio, -5);
  } else {
#line 1066
    submit_bio(rw, bio);
#line 1069
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1071
  return;
}
}
#line 1076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char *tmp___8 ;

  {
#line 1079
  b = mdev->bitmap;
#line 1080
  count = 0;
#line 1083
  err = 0;
#line 1094
  tmp = kmalloc(32UL, 16U);
#line 1094
  ctx = (struct bm_aio_ctx *)tmp;
#line 1095
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1096
    return (-12);
  } else {

  }
#line 1098
  __constr_expr_0.mdev = mdev;
#line 1098
  __constr_expr_0.in_flight.counter = 1;
#line 1098
  __constr_expr_0.done = 0U;
#line 1098
  __constr_expr_0.flags = flags;
#line 1098
  __constr_expr_0.error = 0;
#line 1098
  __constr_expr_0.kref.refcount.counter = 2;
#line 1098
  *ctx = __constr_expr_0;
#line 1107
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1107
  if (tmp___0 == 0) {
#line 1108
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1109
    kfree((void const   *)ctx);
#line 1110
    return (-19);
  } else {

  }
#line 1113
  if (ctx->flags == 0U) {
#line 1114
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1114
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1114
    if (tmp___1 != 0L) {
#line 1114
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1114);
    } else {

    }
#line 1114
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1116
  num_pages = (int )b->bm_number_of_pages;
#line 1118
  now = jiffies;
#line 1121
  i = 0;
#line 1121
  goto ldv_49907;
  ldv_49906: ;
#line 1123
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1124
    goto ldv_49900;
  } else {

  }
#line 1125
  if (rw & 1) {
#line 1126
    if ((flags & 2U) == 0U) {
#line 1126
      tmp___3 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1126
      if (tmp___3 != 0) {
#line 1128
        descriptor.modname = "drbd";
#line 1128
        descriptor.function = "bm_rw";
#line 1128
        descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1128
        descriptor.format = "skipped bm write for idx %u\n";
#line 1128
        descriptor.lineno = 1128U;
#line 1128
        descriptor.flags = 0U;
#line 1128
        tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1128
        if (tmp___2 != 0L) {
#line 1128
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm write for idx %u\n", i);
        } else {

        }
#line 1129
        goto ldv_49903;
      } else {

      }
    } else {

    }
#line 1133
    if (lazy_writeout_upper_idx != 0U) {
#line 1133
      tmp___5 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1133
      if (tmp___5 == 0) {
#line 1135
        descriptor___0.modname = "drbd";
#line 1135
        descriptor___0.function = "bm_rw";
#line 1135
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1135
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1135
        descriptor___0.lineno = 1135U;
#line 1135
        descriptor___0.flags = 0U;
#line 1135
        tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1135
        if (tmp___4 != 0L) {
#line 1135
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1136
        goto ldv_49903;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1139
  atomic_inc(& ctx->in_flight);
#line 1140
  bm_page_io_async(ctx, i, rw);
#line 1141
  count = count + 1;
#line 1142
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1142, 0);
#line 1142
  _cond_resched();
  ldv_49903: 
#line 1121
  i = i + 1;
  ldv_49907: ;
#line 1121
  if (i < num_pages) {
#line 1122
    goto ldv_49906;
  } else {

  }
  ldv_49900: 
#line 1153
  tmp___6 = atomic_dec_and_test(& ctx->in_flight);
#line 1153
  if (tmp___6 == 0) {
#line 1154
    wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1156
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1158
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1162
  if (ctx->error != 0) {
#line 1163
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1164
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "bm_rw");
#line 1165
    err = -5;
  } else {

  }
#line 1168
  tmp___7 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1168
  if (tmp___7 != 0) {
#line 1169
    err = -5;
  } else {

  }
#line 1171
  now = jiffies;
#line 1172
  if (rw == 1) {
#line 1173
    drbd_md_flush(mdev);
  } else {
#line 1175
    b->bm_set = bm_count_bits(b);
#line 1176
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1179
  now = b->bm_set;
#line 1181
  tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1181
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___8, now);
#line 1184
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1185
  return (err);
}
}
#line 1192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1194
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1194
  return (tmp);
}
}
#line 1203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1205
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1205
  return (tmp);
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1216
  tmp = bm_rw(mdev, 1, 2U, 0U);
#line 1216
  return (tmp);
}
}
#line 1224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1226
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1226
  return (tmp);
}
}
#line 1240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1242
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1242
  return (tmp);
}
}
#line 1258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1263
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1263
  if (tmp___0 != 0) {
#line 1264
    descriptor.modname = "drbd";
#line 1264
    descriptor.function = "drbd_bm_write_page";
#line 1264
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1264
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1264
    descriptor.lineno = 1264U;
#line 1264
    descriptor.flags = 0U;
#line 1264
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1264
    if (tmp != 0L) {
#line 1264
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1265
    return (0);
  } else {

  }
#line 1268
  tmp___1 = kmalloc(32UL, 16U);
#line 1268
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1269
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1270
    return (-12);
  } else {

  }
#line 1272
  __constr_expr_0.mdev = mdev;
#line 1272
  __constr_expr_0.in_flight.counter = 1;
#line 1272
  __constr_expr_0.done = 0U;
#line 1272
  __constr_expr_0.flags = 1U;
#line 1272
  __constr_expr_0.error = 0;
#line 1272
  __constr_expr_0.kref.refcount.counter = 2;
#line 1272
  *ctx = __constr_expr_0;
#line 1281
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1281
  if (tmp___2 == 0) {
#line 1282
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1283
    kfree((void const   *)ctx);
#line 1284
    return (-19);
  } else {

  }
#line 1287
  bm_page_io_async(ctx, (int )idx, 529);
#line 1288
  wait_until_done_or_disk_failure(mdev, mdev->ldev, & ctx->done);
#line 1290
  if (ctx->error != 0) {
#line 1291
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "drbd_bm_write_page");
  } else {

  }
#line 1295
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1296
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1296
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1297
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1298
  return (err);
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1312
  b = mdev->bitmap;
#line 1318
  if (b->bm_bits < bm_fo) {
#line 1319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1320
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1322
    goto ldv_49945;
    ldv_49944: 
#line 1324
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1325
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1325
    p_addr = __bm_map_pidx(b, tmp);
#line 1327
    if ((int )find_zero_bit != 0) {
#line 1328
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1328
      i = (unsigned int )tmp___0;
    } else {
#line 1331
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1331
      i = (unsigned int )tmp___1;
    }
#line 1334
    __bm_unmap(p_addr);
#line 1335
    if (i <= 32767U) {
#line 1336
      bm_fo = (unsigned long )i + bit_offset;
#line 1337
      if (b->bm_bits <= bm_fo) {
#line 1338
        goto ldv_49942;
      } else {

      }
#line 1339
      goto found;
    } else {

    }
#line 1341
    bm_fo = bit_offset + 32768UL;
    ldv_49945: ;
#line 1322
    if (b->bm_bits > bm_fo) {
#line 1323
      goto ldv_49944;
    } else {

    }
    ldv_49942: 
#line 1343
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1346
  return (bm_fo);
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1352
  b = mdev->bitmap;
#line 1353
  i = 0xffffffffffffffffUL;
#line 1355
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1355
  if (_b != 0) {
#line 1355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1355);
  } else {

  }
#line 1355
  if (_b != 0) {
#line 1355
    return (i);
  } else {

  }
#line 1356
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1356
  if (_b___0 != 0) {
#line 1356
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1356);
  } else {

  }
#line 1356
  if (_b___0 != 0) {
#line 1356
    return (i);
  } else {

  }
#line 1358
  spin_lock_irq(& b->bm_lock);
#line 1359
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1360
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1362
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1364
  spin_unlock_irq(& b->bm_lock);
#line 1365
  return (i);
}
}
#line 1368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1370
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1370
  return (tmp);
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1386
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1386
  return (tmp);
}
}
#line 1389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1392
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1392
  return (tmp);
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1404
  b = mdev->bitmap;
#line 1405
  p_addr = 0;
#line 1407
  last_page_nr = 4294967295U;
#line 1408
  c = 0;
#line 1409
  changed_total = 0;
#line 1411
  if (b->bm_bits <= e) {
#line 1412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1414
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1416
  bitnr = s;
#line 1416
  goto ldv_49984;
  ldv_49983: 
#line 1417
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1417
  page_nr = tmp;
#line 1418
  if (page_nr != last_page_nr) {
#line 1419
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1420
      __bm_unmap(p_addr);
    } else {

    }
#line 1421
    if (c < 0) {
#line 1422
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1423
    if (c > 0) {
#line 1424
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1425
    changed_total = changed_total + c;
#line 1426
    c = 0;
#line 1427
    p_addr = __bm_map_pidx(b, page_nr);
#line 1428
    last_page_nr = page_nr;
  } else {

  }
#line 1430
  if (val != 0) {
#line 1431
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1431
    c = (tmp___0 == 0) + c;
  } else {
#line 1433
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1433
    c = c - (tmp___1 != 0);
  }
#line 1416
  bitnr = bitnr + 1UL;
  ldv_49984: ;
#line 1416
  if (bitnr <= e) {
#line 1417
    goto ldv_49983;
  } else {

  }

#line 1435
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1436
    __bm_unmap(p_addr);
  } else {

  }
#line 1437
  if (c < 0) {
#line 1438
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1439
  if (c > 0) {
#line 1440
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1441
  changed_total = changed_total + c;
#line 1442
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1443
  return (changed_total);
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1454
  b = mdev->bitmap;
#line 1455
  c = 0;
#line 1457
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1457
  if (_b != 0) {
#line 1457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1457);
  } else {

  }
#line 1457
  if (_b != 0) {
#line 1457
    return (1);
  } else {

  }
#line 1458
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1458
  if (_b___0 != 0) {
#line 1458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1458);
  } else {

  }
#line 1458
  if (_b___0 != 0) {
#line 1458
    return (0);
  } else {

  }
#line 1460
  tmp = spinlock_check(& b->bm_lock);
#line 1460
  flags = _raw_spin_lock_irqsave(tmp);
#line 1461
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1462
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1464
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1466
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1467
  return (c);
}
}
#line 1471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1473
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1473
  return (tmp);
}
}
#line 1477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1479
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1479
  return (- tmp);
}
}
#line 1484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1489
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1489
  paddr = (unsigned long *)tmp;
#line 1490
  i = first_word;
#line 1490
  goto ldv_50023;
  ldv_50022: 
#line 1491
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1491
  bits = (int )tmp___0;
#line 1492
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1493
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1490
  i = i + 1;
  ldv_50023: ;
#line 1490
  if (i < last_word) {
#line 1491
    goto ldv_50022;
  } else {

  }
#line 1495
  __kunmap_atomic((void *)paddr);
#line 1496
  return;
}
}
#line 1503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1513
  b = mdev->bitmap;
#line 1514
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1515
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1522
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1524
    spin_lock_irq(& b->bm_lock);
#line 1525
    __bm_change_bits_to(mdev, s, e, 1);
#line 1526
    spin_unlock_irq(& b->bm_lock);
#line 1527
    return;
  } else {

  }
#line 1532
  spin_lock_irq(& b->bm_lock);
#line 1535
  if (sl != 0UL) {
#line 1536
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1538
  first_page = (int )(sl >> 15);
#line 1539
  last_page = (int )(el >> 15);
#line 1543
  first_word = (int )(sl >> 6) & 511;
#line 1544
  last_word = 512;
#line 1547
  page_nr = first_page;
#line 1547
  goto ldv_50040;
  ldv_50039: 
#line 1548
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1549
  spin_unlock_irq(& b->bm_lock);
#line 1550
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1550, 0);
#line 1550
  _cond_resched();
#line 1551
  first_word = 0;
#line 1552
  spin_lock_irq(& b->bm_lock);
#line 1547
  page_nr = page_nr + 1;
  ldv_50040: ;
#line 1547
  if (page_nr < last_page) {
#line 1548
    goto ldv_50039;
  } else {

  }
#line 1555
  last_word = (int )(el >> 6) & 511;
#line 1563
  if (last_word != 0) {
#line 1564
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1571
  if (el <= (unsigned long )e) {
#line 1572
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1573
  spin_unlock_irq(& b->bm_lock);
#line 1574
  return;
}
}
#line 1583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1586
  b = mdev->bitmap;
#line 1590
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1590
  if (_b != 0) {
#line 1590
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1590);
  } else {

  }
#line 1590
  if (_b != 0) {
#line 1590
    return (0);
  } else {

  }
#line 1591
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1591
  if (_b___0 != 0) {
#line 1591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1591);
  } else {

  }
#line 1591
  if (_b___0 != 0) {
#line 1591
    return (0);
  } else {

  }
#line 1593
  tmp = spinlock_check(& b->bm_lock);
#line 1593
  flags = _raw_spin_lock_irqsave(tmp);
#line 1594
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1595
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1596
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1597
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1597
    p_addr = bm_map_pidx(b, tmp___0);
#line 1598
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1598
    i = tmp___1 != 0;
#line 1599
    bm_unmap(p_addr);
  } else
#line 1600
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1601
    i = -1;
  } else {
#line 1603
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1604
    i = 0;
  }
#line 1607
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1608
  return (i);
}
}
#line 1612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1615
  b = mdev->bitmap;
#line 1616
  p_addr = 0;
#line 1618
  page_nr = 4294967295U;
#line 1619
  c = 0;
#line 1625
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1625
  if (_b != 0) {
#line 1625
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1625);
  } else {

  }
#line 1625
  if (_b != 0) {
#line 1625
    return (1);
  } else {

  }
#line 1626
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1626
  if (_b___0 != 0) {
#line 1626
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1626);
  } else {

  }
#line 1626
  if (_b___0 != 0) {
#line 1626
    return (1);
  } else {

  }
#line 1628
  tmp = spinlock_check(& b->bm_lock);
#line 1628
  flags = _raw_spin_lock_irqsave(tmp);
#line 1629
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1630
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1631
  bitnr = s;
#line 1631
  goto ldv_50081;
  ldv_50080: 
#line 1632
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1632
  idx = tmp___0;
#line 1633
  if (page_nr != idx) {
#line 1634
    page_nr = idx;
#line 1635
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1636
      bm_unmap(p_addr);
    } else {

    }
#line 1637
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1639
  _b___1 = b->bm_bits <= bitnr;
#line 1639
  if (_b___1 != 0) {
#line 1639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1639);
  } else {

  }
#line 1639
  if (_b___1 != 0) {
#line 1640
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1642
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1642
    c = (tmp___1 != 0) + c;
  }
#line 1631
  bitnr = bitnr + 1UL;
  ldv_50081: ;
#line 1631
  if (bitnr <= (unsigned long )e) {
#line 1632
    goto ldv_50080;
  } else {

  }

#line 1645
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1646
    bm_unmap(p_addr);
  } else {

  }
#line 1647
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1648
  return (c);
}
}
#line 1666 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1668
  b = mdev->bitmap;
#line 1673
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1673
  if (_b != 0) {
#line 1673
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1673);
  } else {

  }
#line 1673
  if (_b != 0) {
#line 1673
    return (0);
  } else {

  }
#line 1674
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1674
  if (_b___0 != 0) {
#line 1674
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1674);
  } else {

  }
#line 1674
  if (_b___0 != 0) {
#line 1674
    return (0);
  } else {

  }
#line 1676
  tmp = spinlock_check(& b->bm_lock);
#line 1676
  flags = _raw_spin_lock_irqsave(tmp);
#line 1677
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1678
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1680
  s = (int )(enr << 6);
#line 1681
  _min1 = (enr + 1UL) << 6;
#line 1681
  _min2 = b->bm_words;
#line 1681
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1682
  count = 0;
#line 1683
  if ((size_t )s < b->bm_words) {
#line 1684
    n = e - s;
#line 1685
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1685
    p_addr = bm_map_pidx(b, tmp___0);
#line 1686
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1687
    goto ldv_50107;
    ldv_50106: 
#line 1688
    tmp___1 = bm;
#line 1688
    bm = bm + 1;
#line 1688
    tmp___2 = hweight_long(*tmp___1);
#line 1688
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_50107: 
#line 1687
    tmp___3 = n;
#line 1687
    n = n - 1;
#line 1687
    if (tmp___3 != 0) {
#line 1688
      goto ldv_50106;
    } else {

    }
#line 1689
    bm_unmap(p_addr);
  } else {
#line 1691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1693
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1694
  return (count);
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1701
  b = mdev->bitmap;
#line 1706
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1706
  if (_b != 0) {
#line 1706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1706);
  } else {

  }
#line 1706
  if (_b != 0) {
#line 1706
    return (0UL);
  } else {

  }
#line 1707
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1707
  if (_b___0 != 0) {
#line 1707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1707);
  } else {

  }
#line 1707
  if (_b___0 != 0) {
#line 1707
    return (0UL);
  } else {

  }
#line 1709
  spin_lock_irq(& b->bm_lock);
#line 1710
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1711
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1712
  weight = b->bm_set;
#line 1714
  s = al_enr * 16UL;
#line 1715
  __min1 = s + 16UL;
#line 1715
  __min2 = b->bm_words;
#line 1715
  e = __min1 < __min2 ? __min1 : __min2;
#line 1717
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1718);
  } else {

  }
#line 1719
  count = 0;
#line 1720
  if (b->bm_words > s) {
#line 1721
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1721
    i = do_now;
#line 1722
    tmp = bm_word_to_page_idx(b, s);
#line 1722
    p_addr = bm_map_pidx(b, tmp);
#line 1723
    bm = p_addr + (s & 511UL);
#line 1724
    goto ldv_50131;
    ldv_50130: 
#line 1725
    tmp___0 = hweight_long(*bm);
#line 1725
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1726
    *bm = 0xffffffffffffffffUL;
#line 1727
    bm = bm + 1;
    ldv_50131: 
#line 1724
    tmp___1 = i;
#line 1724
    i = i - 1;
#line 1724
    if (tmp___1 != 0) {
#line 1725
      goto ldv_50130;
    } else {

    }
#line 1729
    bm_unmap(p_addr);
#line 1730
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1731
    if (b->bm_words == e) {
#line 1732
      tmp___2 = bm_clear_surplus(b);
#line 1732
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1734
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1736
  weight = b->bm_set - weight;
#line 1737
  spin_unlock_irq(& b->bm_lock);
#line 1738
  return (weight);
}
}
#line 1741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1746
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1748
  mutex_lock(ldv_func_arg1);
#line 1749
  return;
}
}
#line 1751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1756
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1758
  mutex_unlock(ldv_func_arg1);
#line 1759
  return;
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1766
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1768
  mutex_lock(ldv_func_arg1);
#line 1769
  return;
}
}
#line 1771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1776
  tmp = mutex_trylock(ldv_func_arg1);
#line 1776
  ldv_func_res = tmp;
#line 1778
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1778
  return (tmp___0);
#line 1780
  return (ldv_func_res);
}
}
#line 1783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1788
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1790
  mutex_unlock(ldv_func_arg1);
#line 1791
  return;
}
}
#line 1793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1798
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1800
  mutex_lock(ldv_func_arg1);
#line 1801
  return;
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1808
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1810
  mutex_unlock(ldv_func_arg1);
#line 1811
  return;
}
}
#line 1813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1818
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1820
  mutex_lock(ldv_func_arg1);
#line 1821
  return;
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1828
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1830
  mutex_unlock(ldv_func_arg1);
#line 1831
  return;
}
}
#line 1833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1838
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1840
  mutex_unlock(ldv_func_arg1);
#line 1841
  return;
}
}
#line 1843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_11(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___9 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1848
  tmp = mutex_trylock(ldv_func_arg1);
#line 1848
  ldv_func_res = tmp;
#line 1850
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1850
  return (tmp___0);
#line 1852
  return (ldv_func_res);
}
}
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1860
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1862
  mutex_lock(ldv_func_arg1);
#line 1863
  return;
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1870
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1872
  mutex_unlock(ldv_func_arg1);
#line 1873
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_30(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_27(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_29(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 457 "include/linux/module.h"
extern bool try_module_get(struct module * ) ;
#line 459
extern void module_put(struct module * ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 80 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 81
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 88
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 121
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 122
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 292 "include/linux/backing-dev.h"
__inline static int bdi_rw_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 294
  tmp = bdi_congested(bdi, 12);
#line 294
  return (tmp);
}
}
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1147
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1149
  return (mdev);
}
}
#line 1543
int proc_details ;
#line 1690 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1691
struct file_operations  const  drbd_proc_fops ;
#line 2232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2243
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2244
    *bits_left = mdev->ov_left;
  } else {
#line 2246
    tmp = drbd_bm_total_weight(mdev);
#line 2246
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2249
  if (*bits_left > mdev->rs_total) {
#line 2255
    __asm__  volatile   ("": : : "memory");
#line 2256
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39162.conn);
#line 2256
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2259
    *per_mil_done = 0U;
  } else {
#line 2270
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2271
    left = *bits_left >> (int )shift;
#line 2272
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2273
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2274
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2276
  return;
}
}
#line 2362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2364
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 101
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 105
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 116
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 116
  if (tmp___0 != 0L) {
#line 118
    seq_printf(seq, "%ld,", v / 1000000L);
#line 119
    v = v % 1000000L;
#line 120
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 121
    tmp = __builtin_expect(v > 999L, 1L);
#line 121
    if (tmp != 0L) {
#line 122
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 124
      seq_printf(seq, "%ld", v);
    }
  }
#line 125
  return;
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 138
  stalled = 0;
#line 140
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 142
  x = (int )(res / 50U);
#line 143
  y = 20 - x;
#line 144
  seq_printf(seq, "\t[");
#line 145
  i = 1;
#line 145
  goto ldv_50346;
  ldv_50345: 
#line 146
  seq_printf(seq, "=");
#line 145
  i = i + 1;
  ldv_50346: ;
#line 145
  if (i < x) {
#line 146
    goto ldv_50345;
  } else {

  }
#line 147
  seq_printf(seq, ">");
#line 148
  i = 0;
#line 148
  goto ldv_50349;
  ldv_50348: 
#line 149
  seq_printf(seq, ".");
#line 148
  i = i + 1;
  ldv_50349: ;
#line 148
  if (i < y) {
#line 149
    goto ldv_50348;
  } else {

  }
#line 150
  seq_printf(seq, "] ");
#line 152
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 153
    seq_printf(seq, "verified:");
  } else {
#line 155
    seq_printf(seq, "sync\'ed:");
  }
#line 156
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 159
  if (mdev->rs_total > 1048576UL) {
#line 160
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 164
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 181
  i = (mdev->rs_last_mark + 2) % 8;
#line 182
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 183
  if (dt > 6000UL) {
#line 184
    stalled = 1;
  } else {

  }
#line 186
  if (dt == 0UL) {
#line 187
    dt = dt + 1UL;
  } else {

  }
#line 188
  db = mdev->rs_mark_left[i] - rs_left;
#line 189
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 191
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 194
  dbdt = db / dt << 2;
#line 195
  seq_printf(seq, " speed: ");
#line 196
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 197
  seq_printf(seq, " (");
#line 199
  if (proc_details > 0) {
#line 201
    i = (mdev->rs_last_mark + 7) % 8;
#line 202
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 203
    if (dt == 0UL) {
#line 204
      dt = dt + 1UL;
    } else {

    }
#line 205
    db = mdev->rs_mark_left[i] - rs_left;
#line 206
    dbdt = db / dt << 2;
#line 207
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 208
    seq_printf(seq, " -- ");
  } else {

  }
#line 214
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 215
  if (dt == 0UL) {
#line 216
    dt = 1UL;
  } else {

  }
#line 217
  db = mdev->rs_total - rs_left;
#line 218
  dbdt = db / dt << 2;
#line 219
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 220
  seq_printf(seq, ")");
#line 222
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 224
    seq_printf(seq, " want: ");
#line 225
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 227
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 229
  if (proc_details > 0) {
#line 232
    tmp = drbd_bm_bits(mdev);
#line 232
    bm_bits = tmp;
#line 234
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 236
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 238
      bit_pos = mdev->bm_resync_fo;
    }
#line 241
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 247
  return;
}
}
#line 249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 251
  __mptr = (struct lc_element  const  *)e;
#line 251
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 253
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 256
  return;
}
}
#line 259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 261
  hole = 0;
#line 265
  write_ordering_chars[0] = 110;
#line 265
  write_ordering_chars[1] = 100;
#line 265
  write_ordering_chars[2] = 102;
#line 271
  tmp = drbd_buildtag();
#line 271
  seq_printf(seq, "version: 8.3.13 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 294
  i = 0;
#line 294
  goto ldv_50371;
  ldv_50370: 
#line 295
  mdev = minor_to_mdev((unsigned int )i);
#line 296
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 297
    hole = 1;
#line 298
    goto ldv_50369;
  } else {

  }
#line 300
  if (hole != 0) {
#line 301
    hole = 0;
#line 302
    seq_printf(seq, "\n");
  } else {

  }
#line 305
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39162.conn);
#line 307
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 310
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 313
    bdi_rw_congested(& (mdev->rq_queue)->backing_dev_info);
#line 315
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 315
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 315
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 315
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 315
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 315
    tmp___5 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 315
    tmp___6 = is_susp(mdev->state);
#line 315
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.pdsk);
#line 315
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.disk);
#line 315
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_39162.peer);
#line 315
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_39162.role);
#line 315
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 346
    tmp___11 = drbd_bm_total_weight(mdev);
#line 346
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 350
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 354
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 356
  if (proc_details > 0) {
#line 356
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 356
    if (tmp___12 != 0) {
#line 357
      lc_seq_printf_stats(seq, mdev->resync);
#line 358
      lc_seq_printf_stats(seq, mdev->act_log);
#line 359
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 362
  if (proc_details > 1) {
#line 363
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 364
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_50369: 
#line 294
  i = i + 1;
  ldv_50371: ;
#line 294
  if ((unsigned int )i < minor_count) {
#line 295
    goto ldv_50370;
  } else {

  }

#line 370
  return (0);
}
}
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 375
  tmp___1 = try_module_get(& __this_module);
#line 375
  if ((int )tmp___1) {
#line 376
    tmp = PDE((struct inode  const  *)inode);
#line 376
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 376
    return (tmp___0);
  } else {

  }
#line 377
  return (-19);
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 382
  module_put(& __this_module);
#line 383
  tmp = single_release(inode, file);
#line 383
  return (tmp);
}
}
#line 404
void ldv_check_final_state(void) ;
#line 407
extern void ldv_check_return_value(int  ) ;
#line 413
void ldv_initialize(void) ;
#line 416
extern void ldv_handler_precall(void) ;
#line 419
extern int nondet_int(void) ;
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 459
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 449
  LDV_IN_INTERRUPT = 1;
#line 458
  ldv_initialize();
#line 462
  goto ldv_50407;
  ldv_50406: 
#line 466
  tmp = nondet_int();
#line 466
  switch (tmp) {
  case 0: ;
#line 471
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 476
    ldv_handler_precall();
#line 477
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 478
    ldv_check_return_value(res_drbd_proc_open_4);
#line 479
    if (res_drbd_proc_open_4 != 0) {
#line 480
      goto ldv_module_exit;
    } else {

    }
#line 481
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 487
  goto ldv_50403;
  case 1: ;
#line 491
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 496
    ldv_handler_precall();
#line 497
    drbd_proc_release(var_group1, var_group2);
#line 498
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 504
  goto ldv_50403;
  default: ;
#line 505
  goto ldv_50403;
  }
  ldv_50403: ;
  ldv_50407: 
#line 462
  tmp___0 = nondet_int();
#line 462
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 464
    goto ldv_50406;
  } else {

  }

  ldv_module_exit: ;
#line 514
  ldv_check_final_state();
#line 517
  return;
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_27(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 526
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 528
  mutex_lock(ldv_func_arg1);
#line 529
  return;
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_28(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 536
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 538
  mutex_unlock(ldv_func_arg1);
#line 539
  return;
}
}
#line 541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_29(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 546
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 548
  mutex_lock(ldv_func_arg1);
#line 549
  return;
}
}
#line 551 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_30(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 556
  tmp = mutex_trylock(ldv_func_arg1);
#line 556
  ldv_func_res = tmp;
#line 558
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 558
  return (tmp___0);
#line 560
  return (ldv_func_res);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_31(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 568
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 570
  mutex_unlock(ldv_func_arg1);
#line 571
  return;
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_32(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 578
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 580
  mutex_lock(ldv_func_arg1);
#line 581
  return;
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_33(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 588
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 590
  mutex_unlock(ldv_func_arg1);
#line 591
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_34(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 598
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 600
  mutex_lock(ldv_func_arg1);
#line 601
  return;
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 608
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 610
  mutex_unlock(ldv_func_arg1);
#line 611
  return;
}
}
#line 613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 618
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 620
  mutex_unlock(ldv_func_arg1);
#line 621
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 331 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5502;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5502;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5502;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5502;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5502: ;
#line 216
  return (__ret);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_50(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_51(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_52(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_54(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_61(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5954.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5954.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 343 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 343
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 343
  return (tmp);
}
}
#line 356 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 358
  tmp = PageTail((struct page  const  *)page);
#line 358
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 358
  if (tmp___0 != 0L) {
#line 359
    return (page->ldv_13528.first_page);
  } else {

  }
#line 360
  return (page);
}
}
#line 378 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 380
  tmp = compound_head(page);
#line 380
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_13509.ldv_13508.ldv_13507._count));
#line 380
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19902: ;
#line 65
    goto ldv_19902;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19903: ;
#line 67
    goto ldv_19903;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19904: ;
#line 68
    goto ldv_19904;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 206
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_2017.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 908 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 927
  return ((loff_t )inode->i_size);
}
}
#line 361 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2192
extern void flush_signals(struct task_struct * ) ;
#line 2226
extern void force_sig(int  , struct task_struct * ) ;
#line 1468 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 226 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 695 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1035 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1037
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1152 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1154
  return (mdev->minor);
}
}
#line 1165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1167
  ldv_mutex_lock_54(& mdev->data.mutex);
#line 1170
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1170
  if (tmp != 0L) {
#line 1171
    ldv_mutex_unlock_55(& mdev->data.mutex);
#line 1172
    return (0);
  } else {

  }
#line 1174
  return (1);
}
}
#line 1177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1179
  ldv_mutex_unlock_56(& mdev->data.mutex);
#line 1180
  return;
}
}
#line 1206
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1218
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1220
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1237
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1241
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1246
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1254
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1260
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1262
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1263
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1265
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1266
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1268
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1272
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1278
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1279
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1281
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1283
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1284
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1287
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1522
wait_queue_head_t drbd_pp_wait ;
#line 1538 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1566
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1569
int drbd_worker(struct drbd_thread *thi ) ;
#line 1570
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1571
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1572
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1573
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1574
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1577
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1582
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1583
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1587
  if (mdev->ov_last_oos_size != 0UL) {
#line 1588
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1592
  mdev->ov_last_oos_size = 0UL;
#line 1593
  return;
}
}
#line 1596
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1597
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1600
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1601
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1602
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1603
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1604
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1605
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1606
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1607
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1609
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1610
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1611
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1612
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1613
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1615
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1616
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1617
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1619
void resync_timer_fn(unsigned long data ) ;
#line 1620
void start_resync_timer_fn(unsigned long data ) ;
#line 1623
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1624
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1627
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1632
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1647 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1651
  if (level == 1) {
#line 1652
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1654
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1656
  return (err);
}
}
#line 1659 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1661
  val = 1;
#line 1662
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1664
  return;
}
}
#line 1666 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1668
  val = 0;
#line 1669
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1671
  return;
}
}
#line 1696
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1697
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1698
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1700
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1702
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1703
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1706
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1707
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1711
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1788 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1790
  return ((struct page *)page->ldv_13528.private);
}
}
#line 1798 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1800
  page = e->pages;
#line 1801
  goto ldv_50055;
  ldv_50054: 
#line 1802
  tmp = page_count(page);
#line 1802
  if (tmp > 1) {
#line 1803
    return (1);
  } else {

  }
#line 1801
  page = page_chain_next(page);
  ldv_50055: ;
#line 1801
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1801
    tmp___0 = page_chain_next(page);
#line 1801
    __builtin_prefetch((void const   *)tmp___0);
#line 1801
    if (1 != 0) {
#line 1802
      goto ldv_50054;
    } else {
#line 1804
      goto ldv_50056;
    }
  } else {

  }
  ldv_50056: ;
#line 1805
  return (0);
}
}
#line 1808 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1810
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1810
  if (tmp == 0) {
#line 1810
    goto ldv_50060;
  } else {

  }
#line 1810
  tmp___0 = get_current();
#line 1810
  __wait.flags = 0U;
#line 1810
  __wait.private = (void *)tmp___0;
#line 1810
  __wait.func = & autoremove_wake_function;
#line 1810
  __wait.task_list.next = & __wait.task_list;
#line 1810
  __wait.task_list.prev = & __wait.task_list;
  ldv_50063: 
#line 1810
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1810
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1810
  if (tmp___1 == 0) {
#line 1810
    goto ldv_50062;
  } else {

  }
#line 1810
  schedule();
#line 1810
  goto ldv_50063;
  ldv_50062: 
#line 1810
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50060: ;
#line 1813
  return;
}
}
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1816
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1817
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1818
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1861
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1863
  if ((unsigned int )forcedetach == 0U) {
#line 1864
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1864
    if (tmp != 0) {
#line 1865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1866
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1867
      __ns.i = mdev->state.i;
#line 1867
      __ns.ldv_39162.disk = 4U;
#line 1867
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1868
    goto ldv_50092;
  } else {

  }
  case 2: ;
  case 1: 
#line 1873
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1874
  if ((unsigned int )forcedetach == 2U) {
#line 1875
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1876
  if ((int )mdev->state.ldv_39162.disk > 2) {
#line 1877
    __ns___0.i = mdev->state.i;
#line 1877
    __ns___0.ldv_39162.disk = 2U;
#line 1877
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1881
  goto ldv_50092;
  }
  ldv_50092: ;
#line 1884
  return;
}
}
#line 1942 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1945
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1945
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1945
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1945
    tmp___0 = 0UL;
  }
#line 1945
  return (tmp___0);
}
}
#line 2024 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2027
  tmp = spinlock_check(& q->q_lock);
#line 2027
  flags = _raw_spin_lock_irqsave(tmp);
#line 2028
  list_add_tail(& w->list, & q->q);
#line 2029
  up(& q->s);
#line 2031
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2032
  return;
}
}
#line 2034 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2036
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 2036
  if (tmp != 0) {
#line 2037
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2038
  return;
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2042
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2043
  wake_asender(mdev);
#line 2044
  return;
}
}
#line 2046 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2050
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2050
  return (tmp);
}
}
#line 2065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2067
  _drbd_thread_stop(thi, 0, 1);
#line 2068
  return;
}
}
#line 2125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2127
  atomic_inc(& mdev->rs_pending_cnt);
#line 2128
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 273 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 276
  bio = bio_clone(bio_src, 16U);
#line 278
  req->private_bio = bio;
#line 280
  bio->bi_private = (void *)req;
#line 281
  bio->bi_end_io = & drbd_endio_pri;
#line 282
  bio->bi_next = 0;
#line 283
  return;
}
}
#line 326
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 328
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 337
  mdev = req->mdev;
#line 342
  rv = __req_mod(req, what, & m);
#line 343
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 344
    complete_master_bio(mdev, & m);
  } else {

  }
#line 346
  return (rv);
}
}
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 357
  mdev = req->mdev;
#line 361
  tmp = spinlock_check(& mdev->req_lock);
#line 361
  flags = _raw_spin_lock_irqsave(tmp);
#line 362
  rv = __req_mod(req, what, & m);
#line 363
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 365
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 366
    complete_master_bio(mdev, & m);
  } else {

  }
#line 368
  return (rv);
}
}
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 105
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 138
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 139
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 139
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffff068UL;
#line 141
  md_io->error = error;
#line 154
  drbd_md_put_buffer(mdev);
#line 155
  md_io->done = 1U;
#line 156
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 157
  bio_put(bio);
#line 158
  put_ldev(mdev);
#line 159
  return;
}
}
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 166
  flags = 0UL;
#line 167
  mdev = e->mdev;
#line 169
  if (e->ldv_48227.block_id == 0ULL) {
#line 169
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            169);
  } else {

  }
#line 171
  tmp = spinlock_check(& mdev->req_lock);
#line 171
  flags = _raw_spin_lock_irqsave(tmp);
#line 172
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 173
  list_del(& e->w.list);
#line 174
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 174
  if (tmp___0 != 0) {
#line 175
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 176
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 176
  if (tmp___1 != 0) {
#line 177
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_read_sec_final");
  } else {

  }
#line 178
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 180
  drbd_queue_work(& mdev->data.work, & e->w);
#line 181
  put_ldev(mdev);
#line 182
  return;
}
}
#line 186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 188
  flags = 0UL;
#line 189
  mdev = e->mdev;
#line 195
  if (e->ldv_48227.block_id == 0ULL) {
#line 195
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            195);
  } else {

  }
#line 201
  e_sector = e->sector;
#line 202
  do_al_complete_io = (int )e->flags & 1;
#line 203
  is_syncer_req = e->ldv_48227.block_id == 0xffffffffffffffffULL;
#line 205
  tmp = spinlock_check(& mdev->req_lock);
#line 205
  flags = _raw_spin_lock_irqsave(tmp);
#line 206
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 207
  list_del(& e->w.list);
#line 208
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 215
  if (is_syncer_req != 0) {
#line 215
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 215
    do_wake = tmp___0;
  } else {
#line 215
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 215
    do_wake = tmp___1;
  }
#line 219
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 219
  if (tmp___2 != 0) {
#line 220
    __drbd_chk_io_error____0(mdev, DRBD_IO_ERROR, "drbd_endio_write_sec_final");
  } else {

  }
#line 221
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 223
  if (is_syncer_req != 0) {
#line 224
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 226
  if (do_wake != 0) {
#line 227
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 229
  if (do_al_complete_io != 0) {
#line 230
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 232
  wake_asender(mdev);
#line 233
  put_ldev(mdev);
#line 234
  return;
}
}
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 241
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 242
  mdev = e->mdev;
#line 243
  uptodate = (int )bio->bi_flags & 1;
#line 244
  is_write = (int )bio->bi_rw & 1;
#line 246
  if (error != 0) {
#line 246
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 246
    if (tmp != 0) {
#line 247
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 250
  if (error == 0 && uptodate == 0) {
#line 251
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 251
    if (tmp___0 != 0) {
#line 252
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 258
    error = -5;
  } else {

  }
#line 261
  if (error != 0) {
#line 262
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 264
  bio_put(bio);
#line 265
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 265
  if (tmp___1 != 0) {
#line 266
    if (is_write != 0) {
#line 267
      drbd_endio_write_sec_final(e);
    } else {
#line 269
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 270
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 278
  req = (struct drbd_request *)bio->bi_private;
#line 279
  mdev = req->mdev;
#line 282
  uptodate = (int )bio->bi_flags & 1;
#line 284
  if (error == 0 && uptodate == 0) {
#line 285
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 290
    error = -5;
  } else {

  }
#line 294
  tmp = __builtin_expect(error != 0, 0L);
#line 294
  if (tmp != 0L) {
#line 295
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 4097UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 301
    what = completed_ok;
  }
#line 303
  bio_put(req->private_bio);
#line 304
  tmp___0 = ERR_PTR((long )error);
#line 304
  req->private_bio = (struct bio *)tmp___0;
#line 307
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 307
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 308
  __req_mod(req, what, & m);
#line 309
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 310
  put_ldev(mdev);
#line 312
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 313
    complete_master_bio(mdev, & m);
  } else {

  }
#line 314
  return;
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 318
  __mptr = (struct drbd_work  const  *)w;
#line 318
  req = (struct drbd_request *)__mptr;
#line 324
  spin_lock_irq(& mdev->req_lock);
#line 325
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 326
    _req_mod(req, read_retry_remote_canceled);
#line 327
    spin_unlock_irq(& mdev->req_lock);
#line 328
    return (1);
  } else {

  }
#line 330
  spin_unlock_irq(& mdev->req_lock);
#line 332
  tmp = w_send_read_req(mdev, w, 0);
#line 332
  return (tmp);
}
}
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 339
  page = e->pages;
#line 343
  desc.tfm = tfm;
#line 344
  desc.flags = 0U;
#line 346
  sg_init_table(& sg, 1U);
#line 347
  crypto_hash_init(& desc);
#line 349
  goto ldv_50575;
  ldv_50574: 
#line 351
  sg_set_page(& sg, page, 4096U, 0U);
#line 352
  crypto_hash_update(& desc, & sg, sg.length);
#line 353
  page = tmp;
  ldv_50575: 
#line 349
  tmp = page_chain_next(page);
#line 349
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 350
    goto ldv_50574;
  } else {

  }
#line 356
  len = e->size & 4095U;
#line 357
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 358
  crypto_hash_update(& desc, & sg, sg.length);
#line 359
  crypto_hash_final(& desc, (u8 *)digest);
#line 360
  return;
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 369
  desc.tfm = tfm;
#line 370
  desc.flags = 0U;
#line 372
  sg_init_table(& sg, 1U);
#line 373
  crypto_hash_init(& desc);
#line 375
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 375
  i = (int )bio->bi_idx;
#line 375
  goto ldv_50588;
  ldv_50587: 
#line 376
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 377
  crypto_hash_update(& desc, & sg, sg.length);
#line 375
  bvec = bvec + 1;
#line 375
  i = i + 1;
  ldv_50588: ;
#line 375
  if ((int )bio->bi_vcnt > i) {
#line 376
    goto ldv_50587;
  } else {

  }
#line 379
  crypto_hash_final(& desc, (u8 *)digest);
#line 380
  return;
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 385
  __mptr = (struct drbd_work  const  *)w;
#line 385
  e = (struct drbd_epoch_entry *)__mptr;
#line 388
  ok = 1;
#line 390
  if (e->ldv_48227.block_id != 2205466966ULL) {
#line 390
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            390);
  } else {

  }
#line 392
  tmp = __builtin_expect(cancel != 0, 0L);
#line 392
  if (tmp != 0L) {
#line 393
    goto out;
  } else {

  }
#line 395
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 395
  if (tmp___0 != 0L) {
#line 396
    goto out;
  } else {

  }
#line 398
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 398
  digest_size = (int )tmp___1;
#line 399
  digest = kmalloc((size_t )digest_size, 16U);
#line 400
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 401
    sector = e->sector;
#line 402
    size = e->size;
#line 403
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 409
    drbd_free_some_ee(mdev, e, 0);
#line 410
    e = 0;
#line 411
    inc_rs_pending(mdev);
#line 412
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 415
    kfree((void const   *)digest);
  } else {
#line 417
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 418
    ok = 0;
  }
  out: ;
#line 422
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 423
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 425
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 425
  if (tmp___2 != 0L) {
#line 426
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 427
  return (ok);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 436
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 436
  if (tmp == 0) {
#line 437
    return (-5);
  } else {

  }
#line 439
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 439
  if (tmp___0 != 0) {
#line 440
    goto defer;
  } else {

  }
#line 444
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 445
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 446
    goto defer;
  } else {

  }
#line 448
  e->w.cb = & w_e_send_csum;
#line 449
  spin_lock_irq(& mdev->req_lock);
#line 450
  list_add(& e->w.list, & mdev->read_ee);
#line 451
  spin_unlock_irq(& mdev->req_lock);
#line 453
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 454
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 454
  if (tmp___1 == 0) {
#line 455
    return (0);
  } else {

  }
#line 461
  spin_lock_irq(& mdev->req_lock);
#line 462
  list_del(& e->w.list);
#line 463
  spin_unlock_irq(& mdev->req_lock);
#line 465
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 467
  put_ldev(mdev);
#line 468
  return (-11);
}
}
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 473
  switch ((int )mdev->state.ldv_39162.conn) {
  case 18: 
#line 475
  w_make_ov_request(mdev, w, cancel);
#line 476
  goto ldv_50617;
  case 17: 
#line 478
  w_make_resync_request(mdev, w, cancel);
#line 479
  goto ldv_50617;
  }
  ldv_50617: ;
#line 482
  return (1);
}
}
#line 485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 487
  mdev = (struct drbd_conf *)data;
#line 489
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 489
  if (tmp != 0) {
#line 490
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 491
  return;
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 497
  i = 0;
#line 497
  goto ldv_50629;
  ldv_50628: 
#line 498
  *(fb->values + (unsigned long )i) = value;
#line 497
  i = i + 1;
  ldv_50629: ;
#line 497
  if ((unsigned int )i < fb->size) {
#line 498
    goto ldv_50628;
  } else {

  }

#line 502
  return;
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 505
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 506
  tmp = fb->head_index;
#line 506
  fb->head_index = fb->head_index + 1U;
#line 506
  *(fb->values + (unsigned long )tmp) = value;
#line 508
  if (fb->head_index >= fb->size) {
#line 509
    fb->head_index = 0U;
  } else {

  }
#line 511
  return (ov);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 518
  i = 0;
#line 518
  goto ldv_50642;
  ldv_50641: 
#line 519
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 518
  i = i + 1;
  ldv_50642: ;
#line 518
  if ((unsigned int )i < fb->size) {
#line 519
    goto ldv_50641;
  } else {

  }

#line 523
  return;
}
}
#line 522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 533
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 533
  sect_in = (unsigned int )tmp;
#line 534
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 536
  spin_lock(& mdev->peer_seq_lock);
#line 538
  steps = (int )mdev->rs_plan_s.size;
#line 540
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 541
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 543
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 547
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 550
  cps = correction / steps;
#line 551
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 552
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 555
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 556
  spin_unlock(& mdev->peer_seq_lock);
#line 557
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 559
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 560
  if (req_sect < 0) {
#line 561
    req_sect = 0;
  } else {

  }
#line 563
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 564
  if (req_sect > max_sect) {
#line 565
    req_sect = max_sect;
  } else {

  }
#line 573
  return (req_sect);
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 579
  if (mdev->rs_plan_s.size != 0U) {
#line 580
    tmp = drbd_rs_controller(mdev);
#line 580
    number = tmp >> 3;
#line 581
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 583
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 584
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 589
  return (number);
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 597
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 597
  capacity = tmp;
#line 601
  i = 0;
#line 603
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 603
  if (tmp___0 != 0L) {
#line 604
    return (1);
  } else {

  }
#line 606
  if (mdev->rs_total == 0UL) {
#line 608
    drbd_resync_finished(mdev);
#line 609
    return (1);
  } else {

  }
#line 612
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 612
  if (tmp___1 == 0) {
#line 617
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 618
    return (1);
  } else {

  }
#line 621
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 621
  max_bio_size = (int )(tmp___2 << 9);
#line 622
  number = drbd_rs_number_requests(mdev);
#line 623
  if (number == 0) {
#line 624
    goto requeue;
  } else {

  }
#line 626
  i = 0;
#line 626
  goto ldv_50690;
  ldv_50689: 
#line 628
  ldv_mutex_lock_57(& mdev->data.mutex);
#line 629
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 630
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 631
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 633
    queued = 1;
#line 634
    sndbuf = 0;
  }
#line 636
  ldv_mutex_unlock_58(& mdev->data.mutex);
#line 637
  if (sndbuf / 2 < queued) {
#line 638
    goto requeue;
  } else {

  }
  next_sector: 
#line 641
  size = 4096;
#line 642
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 644
  if (bit == 0xffffffffffffffffUL) {
#line 645
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 646
    put_ldev(mdev);
#line 647
    return (1);
  } else {

  }
#line 650
  sector = bit << 3;
#line 652
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 652
  if (tmp___3 != 0) {
#line 654
    mdev->bm_resync_fo = bit;
#line 655
    goto requeue;
  } else {
#line 652
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 652
    if (tmp___4 != 0) {
#line 654
      mdev->bm_resync_fo = bit;
#line 655
      goto requeue;
    } else {

    }
  }
#line 657
  mdev->bm_resync_fo = bit + 1UL;
#line 659
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 659
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 659
  if (tmp___6 != 0L) {
#line 660
    drbd_rs_complete_io(mdev, sector);
#line 661
    goto next_sector;
  } else {

  }
#line 671
  align = 1;
#line 672
  rollback_i = i;
  ldv_50678: ;
#line 674
  if (size + 4096 > max_bio_size) {
#line 675
    goto ldv_50677;
  } else {

  }
#line 678
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 679
    goto ldv_50677;
  } else {

  }
#line 682
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 683
    goto ldv_50677;
  } else {

  }
#line 689
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 689
  if (tmp___7 != 1) {
#line 690
    goto ldv_50677;
  } else {

  }
#line 691
  bit = bit + 1UL;
#line 692
  size = size + 4096;
#line 693
  if (4096 << align <= size) {
#line 694
    align = align + 1;
  } else {

  }
#line 695
  i = i + 1;
#line 696
  goto ldv_50678;
  ldv_50677: ;
#line 699
  if (size > 4096) {
#line 700
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 704
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 705
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 706
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 707
    tmp___8 = read_for_csum(mdev, sector, size);
#line 707
    switch (tmp___8) {
    case -5: 
#line 709
    put_ldev(mdev);
#line 710
    return (0);
    case -11: 
#line 712
    drbd_rs_complete_io(mdev, sector);
#line 713
    mdev->bm_resync_fo = sector >> 3;
#line 714
    i = rollback_i;
#line 715
    goto requeue;
    case 0: ;
#line 718
    goto ldv_50682;
    default: 
#line 720
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (720), "i" (12UL));
    ldv_50684: ;
#line 720
    goto ldv_50684;
    }
    ldv_50682: ;
  } else {
#line 723
    inc_rs_pending(mdev);
#line 724
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 724
    if (tmp___11 == 0) {
#line 726
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 727
      atomic_dec(& mdev->rs_pending_cnt);
#line 727
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 727
      if (tmp___10 < 0) {
#line 727
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 727
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 727, tmp___9);
      } else {

      }
#line 728
      put_ldev(mdev);
#line 729
      return (0);
    } else {

    }
  }
#line 626
  i = i + 1;
  ldv_50690: ;
#line 626
  if (i < number) {
#line 627
    goto ldv_50689;
  } else {

  }
#line 734
  tmp___12 = drbd_bm_bits(mdev);
#line 734
  if (mdev->bm_resync_fo >= tmp___12) {
#line 741
    put_ldev(mdev);
#line 742
    return (1);
  } else {

  }
  requeue: 
#line 746
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 747
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 748
  put_ldev(mdev);
#line 749
  return (1);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 756
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 756
  capacity = tmp;
#line 758
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 758
  if (tmp___0 != 0L) {
#line 759
    return (1);
  } else {

  }
#line 761
  number = drbd_rs_number_requests(mdev);
#line 763
  sector = mdev->ov_position;
#line 764
  i = 0;
#line 764
  goto ldv_50708;
  ldv_50707: ;
#line 765
  if (sector >= capacity) {
#line 766
    return (1);
  } else {

  }
#line 769
  size = 4096;
#line 771
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 771
  if (tmp___1 != 0) {
#line 773
    mdev->ov_position = sector;
#line 774
    goto requeue;
  } else {
#line 771
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 771
    if (tmp___2 != 0) {
#line 773
      mdev->ov_position = sector;
#line 774
      goto requeue;
    } else {

    }
  }
#line 777
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 778
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 780
  inc_rs_pending(mdev);
#line 781
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 781
  if (tmp___5 == 0) {
#line 782
    atomic_dec(& mdev->rs_pending_cnt);
#line 782
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 782
    if (tmp___4 < 0) {
#line 782
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 782
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 782, tmp___3);
    } else {

    }
#line 783
    return (0);
  } else {

  }
#line 785
  sector = sector + 8UL;
#line 764
  i = i + 1;
  ldv_50708: ;
#line 764
  if (i < number) {
#line 765
    goto ldv_50707;
  } else {

  }
#line 787
  mdev->ov_position = sector;
  requeue: 
#line 790
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 791
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 792
  return (1);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 798
  mdev = (struct drbd_conf *)data;
#line 800
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 801
  return;
}
}
#line 803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 805
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 805
  if (tmp != 0) {
#line 806
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 807
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 808
    add_timer(& mdev->start_resync_timer);
#line 809
    return (1);
  } else {
#line 805
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 805
    if (tmp___0 != 0) {
#line 806
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 807
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 808
      add_timer(& mdev->start_resync_timer);
#line 809
      return (1);
    } else {

    }
  }
#line 812
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 813
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 814
  return (1);
}
}
#line 817 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 819
  kfree((void const   *)w);
#line 820
  ov_oos_print(mdev);
#line 821
  drbd_resync_finished(mdev);
#line 823
  return (1);
}
}
#line 826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 828
  kfree((void const   *)w);
#line 830
  drbd_resync_finished(mdev);
#line 832
  return (1);
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 837
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 838
  request_ping(mdev);
#line 839
  tmp = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 839
  if (tmp != 0 || (int )mdev->state.ldv_39162.conn <= 9) {
#line 839
    goto ldv_50732;
  } else {

  }
#line 839
  tmp___0 = get_current();
#line 839
  __wait.flags = 0U;
#line 839
  __wait.private = (void *)tmp___0;
#line 839
  __wait.func = & autoremove_wake_function;
#line 839
  __wait.task_list.next = & __wait.task_list;
#line 839
  __wait.task_list.prev = & __wait.task_list;
  ldv_50735: 
#line 839
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 839
  tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 839
  if (tmp___1 != 0 || (int )mdev->state.ldv_39162.conn <= 9) {
#line 839
    goto ldv_50734;
  } else {

  }
#line 839
  schedule();
#line 839
  goto ldv_50735;
  ldv_50734: 
#line 839
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50732: ;
#line 842
  return;
}
}
#line 843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 849
  khelper_cmd = 0;
#line 850
  verify_done = 0;
#line 855
  tmp___0 = drbd_rs_del_all(mdev);
#line 855
  if (tmp___0 != 0) {
#line 861
    schedule_timeout_interruptible(25L);
#line 862
    tmp = kmalloc(24UL, 32U);
#line 862
    w = (struct drbd_work *)tmp;
#line 863
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 864
      w->cb = & w_resync_finished;
#line 865
      drbd_queue_work(& mdev->data.work, w);
#line 866
      return (1);
    } else {

    }
#line 868
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 871
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 872
  if (dt == 0UL) {
#line 873
    dt = 1UL;
  } else {

  }
#line 874
  db = mdev->rs_total;
#line 875
  dbdt = db / dt << 2;
#line 876
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 878
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 878
  if (tmp___1 == 0) {
#line 879
    goto out;
  } else {

  }
#line 881
  ping_peer(mdev);
#line 883
  spin_lock_irq(& mdev->req_lock);
#line 884
  os = mdev->state;
#line 886
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 890
  if ((int )os.ldv_39162.conn <= 10) {
#line 891
    goto out_unlock;
  } else {

  }
#line 893
  ns = os;
#line 894
  ns.ldv_39162.conn = 10U;
#line 896
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 900
  n_oos = drbd_bm_total_weight(mdev);
#line 902
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 903
    if (n_oos != 0UL) {
#line 904
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 906
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 909
      if (mdev->rs_failed != n_oos) {
#line 909
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                909);
      } else {

      }
#line 911
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 912
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 914
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 915
        s = mdev->rs_same_csum;
#line 916
        t = mdev->rs_total;
#line 917
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 920
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 929
  if (mdev->rs_failed != 0UL) {
#line 930
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 932
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 933
      ns.ldv_39162.disk = 4U;
#line 934
      ns.ldv_39162.pdsk = 8U;
    } else {
#line 936
      ns.ldv_39162.disk = 8U;
#line 937
      ns.ldv_39162.pdsk = 4U;
    }
  } else {
#line 940
    ns.ldv_39162.disk = 8U;
#line 941
    ns.ldv_39162.pdsk = 8U;
#line 943
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 944
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 946
        i = 1;
#line 946
        goto ldv_50755;
        ldv_50754: 
#line 947
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 946
        i = i + 1;
        ldv_50755: ;
#line 946
        if (i <= 3) {
#line 947
          goto ldv_50754;
        } else {

        }
#line 948
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 949
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 951
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 955
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 958
      drbd_uuid_set_bm(mdev, 0ULL);
#line 959
      drbd_print_uuids(mdev, "updated UUIDs");
#line 960
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 964
        i___0 = 0;
#line 964
        goto ldv_50759;
        ldv_50758: 
#line 965
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 964
        i___0 = i___0 + 1;
        ldv_50759: ;
#line 964
        if (i___0 <= 3) {
#line 965
          goto ldv_50758;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 970
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 972
  spin_unlock_irq(& mdev->req_lock);
#line 973
  put_ldev(mdev);
  out: 
#line 975
  mdev->rs_total = 0UL;
#line 976
  mdev->rs_failed = 0UL;
#line 977
  mdev->rs_paused = 0UL;
#line 978
  if (verify_done != 0) {
#line 979
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 981
  drbd_md_sync(mdev);
#line 983
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 984
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 986
  return (1);
}
}
#line 990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 992
  tmp = drbd_ee_has_active_page(e);
#line 992
  if (tmp != 0) {
#line 994
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 995
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 996
    atomic_sub(i, & mdev->pp_in_use);
#line 997
    spin_lock_irq(& mdev->req_lock);
#line 998
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 999
    spin_unlock_irq(& mdev->req_lock);
#line 1000
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 1002
    drbd_free_some_ee(mdev, e, 0);
  }
#line 1003
  return;
}
}
#line 1011 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1013
  __mptr = (struct drbd_work  const  *)w;
#line 1013
  e = (struct drbd_epoch_entry *)__mptr;
#line 1016
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1016
  if (tmp___1 != 0L) {
#line 1017
    drbd_free_some_ee(mdev, e, 0);
#line 1018
    atomic_dec(& mdev->unacked_cnt);
#line 1018
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
    if (tmp___0 < 0) {
#line 1018
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1018, tmp);
    } else {

    }
#line 1019
    return (1);
  } else {

  }
#line 1022
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1022
  if (tmp___3 != 0L) {
#line 1023
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1025
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1025
    if (tmp___2 != 0) {
#line 1026
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1029
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1032
  atomic_dec(& mdev->unacked_cnt);
#line 1032
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1032
  if (tmp___5 < 0) {
#line 1032
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1032, tmp___4);
  } else {

  }
#line 1034
  move_to_net_ee_or_free(mdev, e);
#line 1036
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1036
  if (tmp___6 != 0L) {
#line 1037
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1038
  return (ok);
}
}
#line 1047 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1049
  __mptr = (struct drbd_work  const  *)w;
#line 1049
  e = (struct drbd_epoch_entry *)__mptr;
#line 1052
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1052
  if (tmp___1 != 0L) {
#line 1053
    drbd_free_some_ee(mdev, e, 0);
#line 1054
    atomic_dec(& mdev->unacked_cnt);
#line 1054
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1054
    if (tmp___0 < 0) {
#line 1054
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1054
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1054, tmp);
    } else {

    }
#line 1055
    return (1);
  } else {

  }
#line 1058
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1058
  if (tmp___2 != 0) {
#line 1059
    drbd_rs_complete_io(mdev, e->sector);
#line 1060
    put_ldev(mdev);
  } else {

  }
#line 1063
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1064
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1065
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1065
    if (tmp___6 != 0L) {
#line 1066
      tmp___4 = __builtin_expect((int )mdev->state.ldv_39162.pdsk > 3, 1L);
#line 1066
      if (tmp___4 != 0L) {
#line 1067
        inc_rs_pending(mdev);
#line 1068
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1070
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1070
        if (tmp___3 != 0) {
#line 1071
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1073
        ok = 1;
      }
    } else {
#line 1076
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1076
      if (tmp___5 != 0) {
#line 1077
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1080
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1083
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1086
  atomic_dec(& mdev->unacked_cnt);
#line 1086
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
  if (tmp___8 < 0) {
#line 1086
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1086, tmp___7);
  } else {

  }
#line 1088
  move_to_net_ee_or_free(mdev, e);
#line 1090
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1090
  if (tmp___9 != 0L) {
#line 1091
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1092
  return (ok);
}
}
#line 1095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1097
  __mptr = (struct drbd_work  const  *)w;
#line 1097
  e = (struct drbd_epoch_entry *)__mptr;
#line 1100
  digest = 0;
#line 1101
  eq = 0;
#line 1103
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1103
  if (tmp___1 != 0L) {
#line 1104
    drbd_free_some_ee(mdev, e, 0);
#line 1105
    atomic_dec(& mdev->unacked_cnt);
#line 1105
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1105
    if (tmp___0 < 0) {
#line 1105
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1105
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1105, tmp);
    } else {

    }
#line 1106
    return (1);
  } else {

  }
#line 1109
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1109
  if (tmp___2 != 0) {
#line 1110
    drbd_rs_complete_io(mdev, e->sector);
#line 1111
    put_ldev(mdev);
  } else {

  }
#line 1114
  di = e->ldv_48227.digest;
#line 1116
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1116
  if (tmp___6 != 0L) {
#line 1120
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1121
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1121
      digest_size = (int )tmp___3;
#line 1122
      if (di->digest_size != digest_size) {
#line 1122
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1122);
      } else {

      }
#line 1123
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1125
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1126
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1127
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1127
      eq = tmp___4 == 0;
#line 1128
      kfree((void const   *)digest);
    } else {

    }
#line 1131
    if (eq != 0) {
#line 1132
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1132U);
#line 1134
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1135
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1137
      inc_rs_pending(mdev);
#line 1138
      e->ldv_48227.block_id = 0xffffffffffffffffULL;
#line 1139
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1140
      kfree((void const   *)di);
#line 1141
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1144
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1145
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1145
    if (tmp___5 != 0) {
#line 1146
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1149
  atomic_dec(& mdev->unacked_cnt);
#line 1149
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1149
  if (tmp___8 < 0) {
#line 1149
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1149, tmp___7);
  } else {

  }
#line 1150
  move_to_net_ee_or_free(mdev, e);
#line 1152
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1152
  if (tmp___9 != 0L) {
#line 1153
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1154
  return (ok);
}
}
#line 1158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1160
  __mptr = (struct drbd_work  const  *)w;
#line 1160
  e = (struct drbd_epoch_entry *)__mptr;
#line 1161
  sector = e->sector;
#line 1162
  size = e->size;
#line 1165
  ok = 1;
#line 1167
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1167
  if (tmp != 0L) {
#line 1168
    goto out;
  } else {

  }
#line 1170
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1170
  digest_size = (int )tmp___0;
#line 1171
  digest = kmalloc((size_t )digest_size, 16U);
#line 1172
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1173
    ok = 0;
#line 1174
    goto out;
  } else {

  }
#line 1177
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1177
  if (tmp___1 != 0L) {
#line 1178
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1180
    memset(digest, 0, (size_t )digest_size);
  }
#line 1187
  drbd_free_some_ee(mdev, e, 0);
#line 1188
  e = 0;
#line 1189
  inc_rs_pending(mdev);
#line 1190
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1193
  if (ok == 0) {
#line 1194
    atomic_dec(& mdev->rs_pending_cnt);
#line 1194
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1194
    if (tmp___3 < 0) {
#line 1194
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1194
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1194, tmp___2);
    } else {

    }
  } else {

  }
#line 1195
  kfree((void const   *)digest);
  out: ;
#line 1198
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1199
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1200
  atomic_dec(& mdev->unacked_cnt);
#line 1200
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
  if (tmp___5 < 0) {
#line 1200
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1200
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1200, tmp___4);
  } else {

  }
#line 1201
  return (ok);
}
}
#line 1204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1206
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1207
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1209
    mdev->ov_last_oos_start = sector;
#line 1210
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1212
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1212U);
#line 1213
  return;
}
}
#line 1215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1217
  __mptr = (struct drbd_work  const  *)w;
#line 1217
  e = (struct drbd_epoch_entry *)__mptr;
#line 1220
  sector = e->sector;
#line 1221
  size = e->size;
#line 1223
  eq = 0;
#line 1225
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1225
  if (tmp___1 != 0L) {
#line 1226
    drbd_free_some_ee(mdev, e, 0);
#line 1227
    atomic_dec(& mdev->unacked_cnt);
#line 1227
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1227
    if (tmp___0 < 0) {
#line 1227
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1227
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1227, tmp);
    } else {

    }
#line 1228
    return (1);
  } else {

  }
#line 1233
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1233
  if (tmp___2 != 0) {
#line 1234
    drbd_rs_complete_io(mdev, e->sector);
#line 1235
    put_ldev(mdev);
  } else {

  }
#line 1238
  di = e->ldv_48227.digest;
#line 1240
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1240
  if (tmp___5 != 0L) {
#line 1241
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1241
    digest_size = (int )tmp___3;
#line 1242
    digest = kmalloc((size_t )digest_size, 16U);
#line 1243
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1244
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1246
      if (di->digest_size != digest_size) {
#line 1246
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1246);
      } else {

      }
#line 1247
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1247
      eq = tmp___4 == 0;
#line 1248
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1257
  drbd_free_some_ee(mdev, e, 0);
#line 1258
  if (eq == 0) {
#line 1259
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1261
    ov_oos_print(mdev);
  }
#line 1263
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1266
  atomic_dec(& mdev->unacked_cnt);
#line 1266
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1266
  if (tmp___7 < 0) {
#line 1266
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1266, tmp___6);
  } else {

  }
#line 1268
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1271
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1272
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1274
  if (mdev->ov_left == 0UL) {
#line 1275
    ov_oos_print(mdev);
#line 1276
    drbd_resync_finished(mdev);
  } else {

  }
#line 1279
  return (ok);
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1284
  __mptr = (struct drbd_work  const  *)w;
#line 1284
  b = (struct drbd_wq_barrier *)__mptr;
#line 1285
  complete(& b->done);
#line 1286
  return (1);
}
}
#line 1289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1291
  __mptr = (struct drbd_work  const  *)w;
#line 1291
  b = (struct drbd_tl_epoch *)__mptr;
#line 1292
  p = & mdev->data.sbuf.barrier;
#line 1293
  ok = 1;
#line 1300
  spin_lock_irq(& mdev->req_lock);
#line 1301
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_39162.conn <= 9) {
#line 1302
    cancel = 1;
  } else {

  }
#line 1303
  spin_unlock_irq(& mdev->req_lock);
#line 1304
  if (cancel != 0) {
#line 1305
    return (1);
  } else {

  }
#line 1307
  tmp = drbd_get_data_sock(mdev);
#line 1307
  if (tmp == 0) {
#line 1308
    return (0);
  } else {

  }
#line 1309
  p->barrier = b->br_number;
#line 1313
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1315
  drbd_put_data_sock(mdev);
#line 1317
  return (ok);
}
}
#line 1320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1322
  if (cancel != 0) {
#line 1323
    return (1);
  } else {

  }
#line 1324
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1324
  return (tmp);
}
}
#line 1327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1329
  __mptr = (struct drbd_work  const  *)w;
#line 1329
  req = (struct drbd_request *)__mptr;
#line 1332
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1332
  if (tmp != 0L) {
#line 1333
    req_mod(req, send_canceled);
#line 1334
    return (1);
  } else {

  }
#line 1337
  ok = drbd_send_oos(mdev, req);
#line 1338
  req_mod(req, oos_handed_to_network);
#line 1340
  return (ok);
}
}
#line 1349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1351
  __mptr = (struct drbd_work  const  *)w;
#line 1351
  req = (struct drbd_request *)__mptr;
#line 1354
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1354
  if (tmp != 0L) {
#line 1355
    req_mod(req, send_canceled);
#line 1356
    return (1);
  } else {

  }
#line 1359
  ok = drbd_send_dblock(mdev, req);
#line 1360
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1362
  return (ok);
}
}
#line 1371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1373
  __mptr = (struct drbd_work  const  *)w;
#line 1373
  req = (struct drbd_request *)__mptr;
#line 1376
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1376
  if (tmp != 0L) {
#line 1377
    req_mod(req, send_canceled);
#line 1378
    return (1);
  } else {

  }
#line 1381
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1384
  if (ok == 0) {
#line 1387
    if ((int )mdev->state.ldv_39162.conn > 9) {
#line 1388
      val.i = 0U;
#line 1388
      val.ldv_39162.conn = 5U;
#line 1388
      mask.i = 0U;
#line 1388
      mask.ldv_39162.conn = 31U;
#line 1388
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1390
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1392
  return (ok);
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1397
  __mptr = (struct drbd_work  const  *)w;
#line 1397
  req = (struct drbd_request *)__mptr;
#line 1399
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 4096UL) != 0UL) {
#line 1400
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1406
  drbd_req_make_private_bio(req, req->master_bio);
#line 1407
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1408
  generic_make_request(req->private_bio);
#line 1410
  return (1);
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1415
  odev = mdev;
  ldv_50935: ;
#line 1418
  if (odev->sync_conf.after == -1) {
#line 1419
    return (1);
  } else {

  }
#line 1420
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1421
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1421
  if (_b != 0) {
#line 1421
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1421);
  } else {

  }
#line 1421
  if (_b != 0) {
#line 1421
    return (1);
  } else {

  }
#line 1422
  if (((((int )odev->state.ldv_39162.conn > 15 && (int )odev->state.ldv_39162.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1426
    return (0);
  } else {

  }
#line 1427
  goto ldv_50935;
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1439
  rv = 0;
#line 1441
  i = 0;
#line 1441
  goto ldv_50946;
  ldv_50945: 
#line 1442
  odev = minor_to_mdev((unsigned int )i);
#line 1443
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1444
    goto ldv_50942;
  } else {

  }
#line 1445
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1446
    goto ldv_50942;
  } else {

  }
#line 1447
  tmp___0 = _drbd_may_sync_now(odev);
#line 1447
  if (tmp___0 == 0) {
#line 1448
    __ns.i = odev->state.i;
#line 1448
    __ns.ldv_39162.aftr_isp = 1U;
#line 1448
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1448
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_50942: 
#line 1441
  i = i + 1;
  ldv_50946: ;
#line 1441
  if ((unsigned int )i < minor_count) {
#line 1442
    goto ldv_50945;
  } else {

  }

#line 1452
  return (rv);
}
}
#line 1461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1464
  rv = 0;
#line 1466
  i = 0;
#line 1466
  goto ldv_50958;
  ldv_50957: 
#line 1467
  odev = minor_to_mdev((unsigned int )i);
#line 1468
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1469
    goto ldv_50954;
  } else {

  }
#line 1470
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1471
    goto ldv_50954;
  } else {

  }
#line 1472
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1473
    tmp___0 = _drbd_may_sync_now(odev);
#line 1473
    if (tmp___0 != 0) {
#line 1474
      __ns.i = odev->state.i;
#line 1474
      __ns.ldv_39162.aftr_isp = 0U;
#line 1474
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1474
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_50954: 
#line 1466
  i = i + 1;
  ldv_50958: ;
#line 1466
  if ((unsigned int )i < minor_count) {
#line 1467
    goto ldv_50957;
  } else {

  }

#line 1479
  return (rv);
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1484
  _raw_write_lock_irq(& global_state_lock);
#line 1485
  _drbd_resume_next(mdev);
#line 1486
  _raw_write_unlock_irq(& global_state_lock);
#line 1487
  return;
}
}
#line 1489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1491
  _raw_write_lock_irq(& global_state_lock);
#line 1492
  _drbd_pause_after(mdev);
#line 1493
  _raw_write_unlock_irq(& global_state_lock);
#line 1494
  return;
}
}
#line 1496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1500
  if (o_minor == -1) {
#line 1501
    return (101);
  } else {

  }
#line 1502
  if (o_minor < -1) {
#line 1503
    return (132);
  } else {
#line 1502
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1502
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1503
      return (132);
    } else {

    }
  }
#line 1506
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_50971: ;
#line 1508
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1509
    return (133);
  } else {

  }
#line 1512
  if (odev->sync_conf.after == -1) {
#line 1513
    return (101);
  } else {

  }
#line 1516
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1517
  goto ldv_50971;
}
}
#line 1520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1525
  _raw_write_lock_irq(& global_state_lock);
#line 1526
  retcode = sync_after_error(mdev, na);
#line 1527
  if (retcode == 101) {
#line 1528
    mdev->sync_conf.after = na;
    ldv_50978: 
#line 1530
    changes = _drbd_pause_after(mdev);
#line 1531
    tmp = _drbd_resume_next(mdev);
#line 1531
    changes = tmp | changes;
#line 1532
    if (changes != 0) {
#line 1533
      goto ldv_50978;
    } else {

    }

  } else {

  }
#line 1534
  _raw_write_unlock_irq(& global_state_lock);
#line 1535
  return (retcode);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1540
  atomic_set(& mdev->rs_sect_in, 0);
#line 1541
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1542
  mdev->rs_in_flight = 0;
#line 1543
  mdev->rs_planed = 0;
#line 1544
  spin_lock(& mdev->peer_seq_lock);
#line 1545
  fifo_set(& mdev->rs_plan_s, 0);
#line 1546
  spin_unlock(& mdev->peer_seq_lock);
#line 1547
  return;
}
}
#line 1557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1562
  if ((int )mdev->state.ldv_39162.conn > 15 && (int )mdev->state.ldv_39162.conn <= 21) {
#line 1563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1564
    return;
  } else {

  }
#line 1567
  if ((unsigned int )side == 17U) {
#line 1571
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1572
    r = (r >> 8) & 255;
#line 1573
    if (r > 0) {
#line 1574
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1576
      val.i = 0U;
#line 1576
      val.ldv_39162.conn = 1U;
#line 1576
      mask.i = 0U;
#line 1576
      mask.ldv_39162.conn = 31U;
#line 1576
      drbd_force_state(mdev, mask, val);
#line 1577
      return;
    } else {

    }
  } else {
#line 1580
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1581
    r = (r >> 8) & 255;
#line 1582
    if (r > 0) {
#line 1583
      if (r == 3) {
#line 1584
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1587
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1589
        val___0.i = 0U;
#line 1589
        val___0.ldv_39162.conn = 1U;
#line 1589
        mask___0.i = 0U;
#line 1589
        mask___0.ldv_39162.conn = 31U;
#line 1589
        drbd_force_state(mdev, mask___0, val___0);
#line 1590
        return;
      }
    } else {

    }
  }
#line 1595
  drbd_state_lock(mdev);
#line 1596
  _raw_write_lock_irq(& global_state_lock);
#line 1597
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1597
  if (tmp == 0) {
#line 1598
    _raw_write_unlock_irq(& global_state_lock);
#line 1599
    drbd_state_unlock(mdev);
#line 1600
    return;
  } else {

  }
#line 1603
  ns.i = mdev->state.i;
#line 1605
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1605
  ns.ldv_39162.aftr_isp = tmp___0 == 0;
#line 1607
  ns.ldv_39162.conn = (unsigned char )side;
#line 1609
  if ((unsigned int )side == 17U) {
#line 1610
    ns.ldv_39162.disk = 4U;
  } else {
#line 1612
    ns.ldv_39162.pdsk = 4U;
  }
#line 1614
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1614
  r = (int )tmp___1;
#line 1615
  ns = mdev->state;
#line 1617
  if ((int )ns.ldv_39162.conn <= 9) {
#line 1618
    r = 0;
  } else {

  }
#line 1620
  if (r == 1) {
#line 1621
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1621
    tw = tmp___2;
#line 1622
    now = jiffies;
#line 1625
    mdev->rs_failed = 0UL;
#line 1626
    mdev->rs_paused = 0UL;
#line 1627
    mdev->rs_same_csum = 0UL;
#line 1628
    mdev->rs_last_events = 0;
#line 1629
    mdev->rs_last_sect_ev = 0;
#line 1630
    mdev->rs_total = tw;
#line 1631
    mdev->rs_start = now;
#line 1632
    i = 0;
#line 1632
    goto ldv_51001;
    ldv_51000: 
#line 1633
    mdev->rs_mark_left[i] = tw;
#line 1634
    mdev->rs_mark_time[i] = now;
#line 1632
    i = i + 1;
    ldv_51001: ;
#line 1632
    if (i <= 7) {
#line 1633
      goto ldv_51000;
    } else {

    }
#line 1636
    _drbd_pause_after(mdev);
  } else {

  }
#line 1638
  _raw_write_unlock_irq(& global_state_lock);
#line 1640
  if (r == 1) {
#line 1641
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_39162.conn);
#line 1641
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1645
    if ((unsigned int )side == 17U) {
#line 1646
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1655
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1656
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1658
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1669
      if ((unsigned int )side == 16U) {
#line 1670
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1673
      drbd_resync_finished(mdev);
    } else {

    }
#line 1676
    drbd_rs_controller_reset(mdev);
#line 1681
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1682
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1684
    drbd_md_sync(mdev);
  } else {

  }
#line 1686
  put_ldev(mdev);
#line 1687
  drbd_state_unlock(mdev);
#line 1688
  return;
}
}
#line 1690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1692
  mdev = thi->mdev;
#line 1693
  w = 0;
#line 1694
  work_list.next = & work_list;
#line 1694
  work_list.prev = & work_list;
#line 1695
  intr = 0;
#line 1697
  tmp = mdev_to_minor(mdev);
#line 1697
  tmp___0 = get_current();
#line 1697
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1699
  goto ldv_51014;
  ldv_51024: 
#line 1700
  drbd_thread_current_set_cpu(mdev);
#line 1702
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1702
  if (tmp___1 != 0) {
#line 1703
    ldv_mutex_lock_59(& mdev->data.mutex);
#line 1704
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1705
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1706
    ldv_mutex_unlock_60(& mdev->data.mutex);
#line 1708
    intr = down_interruptible(& mdev->data.work.s);
#line 1710
    ldv_mutex_lock_61(& mdev->data.mutex);
#line 1711
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1712
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1713
    ldv_mutex_unlock_62(& mdev->data.mutex);
  } else {

  }
#line 1716
  if (intr != 0) {
#line 1717
    if (intr != -4) {
#line 1717
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1717);
    } else {

    }
#line 1718
    tmp___2 = get_current();
#line 1718
    flush_signals(tmp___2);
#line 1719
    tmp___3 = get_t_state(thi);
#line 1719
    _b = (unsigned int )tmp___3 == 1U;
#line 1719
    if (_b != 0) {
#line 1719
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1719);
    } else {

    }
#line 1719
    if (_b != 0) {
#line 1720
      goto ldv_51014;
    } else {

    }
#line 1721
    goto ldv_51015;
  } else {

  }
#line 1724
  tmp___4 = get_t_state(thi);
#line 1724
  if ((unsigned int )tmp___4 != 1U) {
#line 1725
    goto ldv_51015;
  } else {

  }
#line 1730
  w = 0;
#line 1731
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1732
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1732
  _b___0 = tmp___5 != 0;
#line 1732
  if (_b___0 != 0) {
#line 1732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1732);
  } else {

  }
#line 1732
  if (_b___0 != 0) {
#line 1744
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1745
    goto ldv_51014;
  } else {

  }
#line 1747
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1747
  w = (struct drbd_work *)__mptr;
#line 1748
  list_del_init(& w->list);
#line 1749
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1751
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_39162.conn <= 9);
#line 1751
  if (tmp___6 == 0) {
#line 1753
    if ((int )mdev->state.ldv_39162.conn > 9) {
#line 1755
      val.i = 0U;
#line 1755
      val.ldv_39162.conn = 5U;
#line 1755
      mask.i = 0U;
#line 1755
      mask.ldv_39162.conn = 31U;
#line 1755
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_51014: 
#line 1699
  tmp___7 = get_t_state(thi);
#line 1699
  if ((unsigned int )tmp___7 == 1U) {
#line 1700
    goto ldv_51024;
  } else {

  }
  ldv_51015: 
#line 1758
  tmp___8 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1758
  if (tmp___8 == 0) {
#line 1758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1758);
  } else {

  }
#line 1759
  tmp___9 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 1759
  if (tmp___9 == 0) {
#line 1759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1759);
  } else {

  }
#line 1761
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1762
  i = 0;
#line 1763
  goto ldv_51031;
  ldv_51030: 
#line 1764
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1765
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1767
  goto ldv_51028;
  ldv_51027: 
#line 1768
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1768
  w = (struct drbd_work *)__mptr___0;
#line 1769
  list_del_init(& w->list);
#line 1770
  (*(w->cb))(mdev, w, 1);
#line 1771
  i = i + 1;
  ldv_51028: 
#line 1767
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1767
  if (tmp___10 == 0) {
#line 1768
    goto ldv_51027;
  } else {

  }
#line 1774
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_51031: 
#line 1763
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1763
  if (tmp___11 == 0) {
#line 1764
    goto ldv_51030;
  } else {

  }
#line 1776
  sema_init(& mdev->data.work.s, 0);
#line 1782
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1784
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1784
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1784);
  } else {

  }
#line 1787
  drbd_thread_stop(& mdev->receiver);
#line 1788
  drbd_mdev_cleanup(mdev);
#line 1790
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1792
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1793
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1794
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1796
  return (0);
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1804
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1806
  mutex_lock(ldv_func_arg1);
#line 1807
  return;
}
}
#line 1809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1814
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1816
  mutex_unlock(ldv_func_arg1);
#line 1817
  return;
}
}
#line 1819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_49(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1824
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1826
  mutex_lock(ldv_func_arg1);
#line 1827
  return;
}
}
#line 1829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_50(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1834
  tmp = mutex_trylock(ldv_func_arg1);
#line 1834
  ldv_func_res = tmp;
#line 1836
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1836
  return (tmp___0);
#line 1838
  return (ldv_func_res);
}
}
#line 1841 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_51(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1846
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1848
  mutex_unlock(ldv_func_arg1);
#line 1849
  return;
}
}
#line 1851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_52(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1856
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1858
  mutex_lock(ldv_func_arg1);
#line 1859
  return;
}
}
#line 1861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_53(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1866
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1868
  mutex_unlock(ldv_func_arg1);
#line 1869
  return;
}
}
#line 1871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_54(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1876
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1878
  mutex_lock(ldv_func_arg1);
#line 1879
  return;
}
}
#line 1881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_55(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1886
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1888
  mutex_unlock(ldv_func_arg1);
#line 1889
  return;
}
}
#line 1891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_56(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1896
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1898
  mutex_unlock(ldv_func_arg1);
#line 1899
  return;
}
}
#line 1901 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_57(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1906
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1908
  mutex_lock(ldv_func_arg1);
#line 1909
  return;
}
}
#line 1911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_58(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1916
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1918
  mutex_unlock(ldv_func_arg1);
#line 1919
  return;
}
}
#line 1921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_59(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1926
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1928
  mutex_lock(ldv_func_arg1);
#line 1929
  return;
}
}
#line 1931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_60(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1936
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1938
  mutex_unlock(ldv_func_arg1);
#line 1939
  return;
}
}
#line 1941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_61(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1946
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1948
  mutex_lock(ldv_func_arg1);
#line 1949
  return;
}
}
#line 1951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_62(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1956
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1958
  mutex_unlock(ldv_func_arg1);
#line 1959
  return;
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 177 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 642 "include/linux/list.h"
__inline static void hlist_add_fake(struct hlist_node *n ) 
{ 


  {
#line 644
  n->pprev = & n->next;
#line 645
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_89(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_79(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_86(struct mutex *ldv_func_arg1 ) ;
#line 68
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6269;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6269;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6269;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6269;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6269: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 280 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 352 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 367
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 453 "include/linux/module.h"
extern void __module_get(struct module * ) ;
#line 56 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 67
extern u32 random32(void) ;
#line 240 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 242
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 244
extern void sock_release(struct socket * ) ;
#line 247
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 452 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19880: ;
#line 65
    goto ldv_19880;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19881: ;
#line 67
    goto ldv_19881;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19882: ;
#line 68
    goto ldv_19882;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page___0(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 303 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 360
extern long schedule_timeout(long  ) ;
#line 363
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2564 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2566
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2566
  return (tmp);
}
}
#line 2590 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2592
  tmp = test_tsk_thread_flag(p, 2);
#line 2592
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2592
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 520 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 522
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 439 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 441
  disk->part0.nr_sects = size;
#line 442
  return;
}
}
#line 56 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
#line 59
  return (tmp);
}
}
#line 62 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , unsigned int  ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1202
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1208
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1217
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1227
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1229
void tl_clear(struct drbd_conf *mdev ) ;
#line 1231
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1234
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1235
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1238
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1240
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1249
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1251
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1252
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1256
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1258
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1274
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1276
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1285
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1302
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1305
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1306
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1504
mempool_t *drbd_ee_mempool ;
#line 1519
struct page *drbd_pp_pool ;
#line 1520
spinlock_t drbd_pp_lock ;
#line 1521
int drbd_pp_vacant ;
#line 1556
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1558
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1559
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1560
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1561
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1565
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1626
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1636
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1638
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1642
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1643
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1673 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1675
  val = 1;
#line 1676
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1678
  return;
}
}
#line 1680 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1682
  val = 2;
#line 1683
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1685
  return;
}
}
#line 1687
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1699
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1701
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1725
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1798 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1800
  page = e->pages;
#line 1801
  goto ldv_50480;
  ldv_50479: 
#line 1802
  tmp = page_count(page);
#line 1802
  if (tmp > 1) {
#line 1803
    return (1);
  } else {

  }
#line 1801
  page = page_chain_next(page);
  ldv_50480: ;
#line 1801
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1801
    tmp___0 = page_chain_next(page);
#line 1801
    __builtin_prefetch((void const   *)tmp___0);
#line 1801
    if (1 != 0) {
#line 1802
      goto ldv_50479;
    } else {
#line 1804
      goto ldv_50481;
    }
  } else {

  }
  ldv_50481: ;
#line 1805
  return (0);
}
}
#line 1843 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1847
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1847
  return ((int )tmp);
}
}
#line 1913 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1915
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1918
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1921
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1956 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1959
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1963
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1963
  if (tmp___1 != 0UL) {
#line 1963
    __min1 = 2251799813685248UL;
#line 1963
    tmp___0 = drbd_md_first_sector(bdev);
#line 1963
    __min2 = tmp___0;
#line 1963
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1963
    s = 0UL;
  }
#line 1966
  goto ldv_50558;
  case -2: 
#line 1968
  __min1___0 = 2251799813685248UL;
#line 1968
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  __min2___0 = tmp___2;
#line 1968
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1971
  __min1___1 = s;
#line 1971
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1971
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1974
  goto ldv_50558;
  default: 
#line 1976
  __min1___2 = 8587575296UL;
#line 1976
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1976
  __min2___2 = tmp___3;
#line 1976
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50558: ;
#line 1979
  return (s);
}
}
#line 2013 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2016
  tmp = spinlock_check(& q->q_lock);
#line 2016
  flags = _raw_spin_lock_irqsave(tmp);
#line 2017
  list_add(& w->list, & q->q);
#line 2018
  up(& q->s);
#line 2020
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2021
  return;
}
}
#line 2053 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2056
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2056
  return (tmp);
}
}
#line 2059 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2062
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2062
  return (tmp);
}
}
#line 2144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2146
  atomic_inc(& mdev->unacked_cnt);
#line 2147
  return;
}
}
#line 2160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2162
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2162
  if (tmp != 0) {
#line 2163
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2164
  return;
}
}
#line 2172 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2176
  atomic_inc(& mdev->net_cnt);
#line 2177
  have_net_conf = (int )mdev->state.ldv_39162.conn > 1;
#line 2178
  if (have_net_conf == 0) {
#line 2179
    put_net_conf(mdev);
  } else {

  }
#line 2180
  return (have_net_conf);
}
}
#line 2438 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2440
  changed = mdev->ed_uuid != val;
#line 2441
  mdev->ed_uuid = val;
#line 2442
  return (changed);
}
}
#line 2445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2452
  return ((int )a - (int )b);
}
}
#line 2461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2464
  spin_lock(& mdev->peer_seq_lock);
#line 2465
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2465
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2466
  mdev->peer_seq = m;
#line 2467
  spin_unlock(& mdev->peer_seq_lock);
#line 2468
  if (m == new_seq) {
#line 2469
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2470
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("\vdrbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_50834: ;
#line 234
    goto ldv_50834;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_50839: ;
#line 243
    goto ldv_50839;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 260
  tmp = ar_hash_slot(mdev, sector);
#line 260
  slot = tmp;
#line 264
  n = slot->first;
#line 264
  goto ldv_50856;
  ldv_50855: ;
#line 265
  if ((unsigned long )req == (unsigned long )id) {
#line 266
    if (req->sector != sector) {
#line 266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              266);
    } else {

    }
#line 267
    return (req);
  } else {

  }
#line 264
  n = n->next;
  ldv_50856: ;
#line 264
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 264
    __mptr = (struct hlist_node  const  *)n;
#line 264
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 264
    if (1 != 0) {
#line 265
      goto ldv_50855;
    } else {
#line 267
      goto ldv_50857;
    }
  } else {

  }
  ldv_50857: ;
#line 270
  return (0);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 313
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_50924: ;
#line 162
  goto ldv_50924;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 122
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 124
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 125
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 144
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 144
  if (tmp___0 != 0L) {
#line 144
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (144), "i" (12UL));
    ldv_51004: ;
#line 144
    goto ldv_51004;
  } else {

  }
#line 145
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 145
  if (tmp___1 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_51005: ;
#line 145
    goto ldv_51005;
  } else {

  }
#line 147
  page = *head;
#line 149
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 150
    return (0);
  } else {

  }
#line 152
  goto ldv_51008;
  ldv_51007: 
#line 153
  tmp = page_chain_next(page);
#line 154
  n = n - 1;
#line 154
  if (n == 0) {
#line 155
    goto ldv_51006;
  } else {

  }
#line 156
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 159
  page = tmp;
  ldv_51008: ;
#line 152
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 153
    goto ldv_51007;
  } else {

  }
  ldv_51006: 
#line 163
  page->ldv_13528.private = 0UL;
#line 165
  page = *head;
#line 166
  *head = tmp;
#line 167
  return (page);
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 176
  i = 1;
#line 177
  goto ldv_51016;
  ldv_51015: 
#line 178
  i = i + 1;
#line 178
  page = tmp;
  ldv_51016: 
#line 177
  tmp = page_chain_next(page);
#line 177
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 178
    goto ldv_51015;
  } else {

  }

#line 179
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 180
    *len = i;
  } else {

  }
#line 181
  return (page);
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 187
  i = 0;
#line 188
  goto ldv_51025;
  ldv_51024: 
#line 189
  put_page(page);
#line 190
  i = i + 1;
#line 188
  page = tmp;
  ldv_51025: ;
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 188
    tmp = page_chain_next(page);
#line 188
    if (1 != 0) {
#line 189
      goto ldv_51024;
    } else {
#line 191
      goto ldv_51026;
    }
  } else {

  }
  ldv_51026: ;
#line 192
  return (i);
}
}
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 200
  tmp = page_chain_tail(chain_first, 0);
#line 201
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 201
  if (tmp___0 != 0L) {
#line 201
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (201), "i" (12UL));
    ldv_51033: ;
#line 201
    goto ldv_51033;
  } else {

  }
#line 205
  chain_last->ldv_13528.private = (unsigned long )*head;
#line 206
  *head = chain_first;
#line 207
  return;
}
}
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 211
  page = 0;
#line 212
  tmp = 0;
#line 213
  i = 0;
#line 217
  if (drbd_pp_vacant >= number) {
#line 218
    spin_lock(& drbd_pp_lock);
#line 219
    page = page_chain_del(& drbd_pp_pool, number);
#line 220
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 221
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 222
    spin_unlock(& drbd_pp_lock);
#line 223
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 224
      return (page);
    } else {

    }
  } else {

  }
#line 230
  i = 0;
#line 230
  goto ldv_51043;
  ldv_51042: 
#line 231
  tmp = alloc_pages(514U, 0U);
#line 232
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 233
    goto ldv_51041;
  } else {

  }
#line 234
  tmp->ldv_13528.private = (unsigned long )page;
#line 235
  page = tmp;
#line 230
  i = i + 1;
  ldv_51043: ;
#line 230
  if (i < number) {
#line 231
    goto ldv_51042;
  } else {

  }
  ldv_51041: ;
#line 238
  if (i == number) {
#line 239
    return (page);
  } else {

  }
#line 244
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 245
    tmp = page_chain_tail(page, 0);
#line 246
    spin_lock(& drbd_pp_lock);
#line 247
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 248
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 249
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 251
  return (0);
}
}
#line 254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 264
  le = mdev->net_ee.next;
#line 264
  tle = le->next;
#line 264
  goto ldv_51055;
  ldv_51054: 
#line 265
  __mptr = (struct list_head  const  *)le;
#line 265
  e = (struct drbd_epoch_entry *)__mptr;
#line 266
  tmp = drbd_ee_has_active_page___0(e);
#line 266
  if (tmp != 0) {
#line 267
    goto ldv_51053;
  } else {

  }
#line 268
  list_move(le, to_be_freed);
#line 264
  le = tle;
#line 264
  tle = le->next;
  ldv_51055: ;
#line 264
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 265
    goto ldv_51054;
  } else {

  }
  ldv_51053: ;
#line 269
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 274
  reclaimed.next = & reclaimed;
#line 274
  reclaimed.prev = & reclaimed;
#line 277
  spin_lock_irq(& mdev->req_lock);
#line 278
  reclaim_net_ee(mdev, & reclaimed);
#line 279
  spin_unlock_irq(& mdev->req_lock);
#line 281
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 281
  e = (struct drbd_epoch_entry *)__mptr;
#line 281
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 281
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 281
  goto ldv_51069;
  ldv_51068: 
#line 282
  drbd_free_some_ee(mdev, e, 1);
#line 281
  e = t;
#line 281
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 281
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51069: ;
#line 281
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 282
    goto ldv_51068;
  } else {

  }

#line 286
  return;
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 299
  page = 0;
#line 300
  tmp = get_current();
#line 300
  wait.flags = 0U;
#line 300
  wait.private = (void *)tmp;
#line 300
  wait.func = & autoremove_wake_function;
#line 300
  wait.task_list.next = & wait.task_list;
#line 300
  wait.task_list.prev = & wait.task_list;
#line 304
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 304
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 305
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 307
  goto ldv_51080;
  ldv_51079: 
#line 308
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 310
  drbd_kick_lo_and_reclaim_net(mdev);
#line 312
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 312
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 313
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 314
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 315
      goto ldv_51078;
    } else {

    }
  } else {

  }
#line 318
  if (! retry) {
#line 319
    goto ldv_51078;
  } else {

  }
#line 321
  tmp___2 = get_current();
#line 321
  tmp___3 = signal_pending(tmp___2);
#line 321
  if (tmp___3 != 0) {
#line 322
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 323
    goto ldv_51078;
  } else {

  }
#line 326
  schedule();
  ldv_51080: ;
#line 307
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 308
    goto ldv_51079;
  } else {

  }
  ldv_51078: 
#line 328
  finish_wait(& drbd_pp_wait, & wait);
#line 330
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 331
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 332
  return (page);
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 341
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 344
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 345
    return;
  } else {

  }
#line 347
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 348
    i = page_chain_free(page);
  } else {
#line 351
    tmp = page_chain_tail(page, & i);
#line 352
    spin_lock(& drbd_pp_lock);
#line 353
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 354
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 355
    spin_unlock(& drbd_pp_lock);
  }
#line 357
  i = atomic_sub_return(i, a);
#line 358
  if (i < 0) {
#line 359
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 361
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 362
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 386
  page = 0;
#line 387
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 389
  tmp = drbd_insert_fault(mdev, 8U);
#line 389
  if (tmp != 0) {
#line 390
    return (0);
  } else {

  }
#line 392
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 392
  e = (struct drbd_epoch_entry *)tmp___0;
#line 393
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 394
    if ((gfp_mask & 512U) == 0U) {
#line 395
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 396
    return (0);
  } else {

  }
#line 399
  if (data_size != 0U) {
#line 400
    page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 401
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 402
      goto fail;
    } else {

    }
  } else {

  }
#line 405
  INIT_HLIST_NODE(& e->collision);
#line 406
  e->epoch = 0;
#line 407
  e->mdev = mdev;
#line 408
  e->pages = page;
#line 409
  atomic_set(& e->pending_bios, 0);
#line 410
  e->size = data_size;
#line 411
  e->flags = 0UL;
#line 412
  e->sector = sector;
#line 413
  e->ldv_48227.block_id = id;
#line 415
  return (e);
  fail: 
#line 418
  mempool_free((void *)e, drbd_ee_mempool);
#line 419
  return (0);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 424
  if ((e->flags & 16UL) != 0UL) {
#line 425
    kfree((void const   *)e->ldv_48227.digest);
  } else {

  }
#line 426
  drbd_pp_free(mdev, e->pages, is_net);
#line 427
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 427
  if (tmp != 0) {
#line 427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            427);
  } else {

  }
#line 428
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 428
  if (tmp___0 == 0) {
#line 428
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            428);
  } else {

  }
#line 429
  mempool_free((void *)e, drbd_ee_mempool);
#line 430
  return;
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 434
  work_list.next = & work_list;
#line 434
  work_list.prev = & work_list;
#line 436
  count = 0;
#line 437
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 439
  spin_lock_irq(& mdev->req_lock);
#line 440
  list_splice_init(list, & work_list);
#line 441
  spin_unlock_irq(& mdev->req_lock);
#line 443
  __mptr = (struct list_head  const  *)work_list.next;
#line 443
  e = (struct drbd_epoch_entry *)__mptr;
#line 443
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 443
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 443
  goto ldv_51121;
  ldv_51120: 
#line 444
  drbd_free_some_ee(mdev, e, is_net);
#line 445
  count = count + 1;
#line 443
  e = t;
#line 443
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 443
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51121: ;
#line 443
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 444
    goto ldv_51120;
  } else {

  }

#line 447
  return (count);
}
}
#line 460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 462
  work_list.next = & work_list;
#line 462
  work_list.prev = & work_list;
#line 463
  reclaimed.next = & reclaimed;
#line 463
  reclaimed.prev = & reclaimed;
#line 465
  ok = (int )mdev->state.ldv_39162.conn > 8;
#line 467
  spin_lock_irq(& mdev->req_lock);
#line 468
  reclaim_net_ee(mdev, & reclaimed);
#line 469
  list_splice_init(& mdev->done_ee, & work_list);
#line 470
  spin_unlock_irq(& mdev->req_lock);
#line 472
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 472
  e = (struct drbd_epoch_entry *)__mptr;
#line 472
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 472
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 472
  goto ldv_51138;
  ldv_51137: 
#line 473
  drbd_free_some_ee(mdev, e, 1);
#line 472
  e = t;
#line 472
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 472
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_51138: ;
#line 472
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 473
    goto ldv_51137;
  } else {

  }
#line 479
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 479
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 479
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 479
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 479
  goto ldv_51147;
  ldv_51146: 
#line 481
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 481
  ok = tmp != 0 && ok != 0;
#line 482
  drbd_free_some_ee(mdev, e, 0);
#line 479
  e = t;
#line 479
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 479
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_51147: ;
#line 479
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 480
    goto ldv_51146;
  } else {

  }
#line 484
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 486
  return (ok);
}
}
#line 489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 491
  tmp = get_current();
#line 491
  wait.flags = 0U;
#line 491
  wait.private = (void *)tmp;
#line 491
  wait.func = & autoremove_wake_function;
#line 491
  wait.task_list.next = & wait.task_list;
#line 491
  wait.task_list.prev = & wait.task_list;
#line 495
  goto ldv_51155;
  ldv_51154: 
#line 496
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 497
  spin_unlock_irq(& mdev->req_lock);
#line 498
  io_schedule();
#line 499
  finish_wait(& mdev->ee_wait, & wait);
#line 500
  spin_lock_irq(& mdev->req_lock);
  ldv_51155: 
#line 495
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 495
  if (tmp___0 == 0) {
#line 496
    goto ldv_51154;
  } else {

  }

#line 500
  return;
}
}
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 506
  spin_lock_irq(& mdev->req_lock);
#line 507
  _drbd_wait_ee_list_empty(mdev, head);
#line 508
  spin_unlock_irq(& mdev->req_lock);
#line 509
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 516
  sk = sock->sk;
#line 517
  err = 0;
#line 519
  *what = "listen";
#line 520
  err = (*((sock->ops)->listen))(sock, 5);
#line 521
  if (err < 0) {
#line 522
    goto out;
  } else {

  }
#line 524
  *what = "sock_create_lite";
#line 525
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 527
  if (err < 0) {
#line 528
    goto out;
  } else {

  }
#line 530
  *what = "accept";
#line 531
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 532
  if (err < 0) {
#line 533
    sock_release(*newsock);
#line 534
    *newsock = 0;
#line 535
    goto out;
  } else {

  }
#line 537
  (*newsock)->ops = sock->ops;
#line 538
  __module_get(((*newsock)->ops)->owner);
  out: ;
#line 541
  return (err);
}
}
#line 544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 548
  iov.iov_base = buf;
#line 548
  iov.iov_len = size;
#line 552
  msg.msg_name = 0;
#line 552
  msg.msg_namelen = 0;
#line 552
  msg.msg_iov = (struct iovec *)(& iov);
#line 552
  msg.msg_iovlen = 1UL;
#line 552
  msg.msg_control = 0;
#line 552
  msg.msg_controllen = 0UL;
#line 552
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 559
  tmp = current_thread_info___0();
#line 559
  oldfs = tmp->addr_limit;
#line 560
  tmp___0 = current_thread_info___0();
#line 560
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 560
  tmp___0->addr_limit = __constr_expr_0;
#line 561
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 562
  tmp___1 = current_thread_info___0();
#line 562
  tmp___1->addr_limit = oldfs;
#line 564
  return (rv);
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 570
  iov.iov_base = buf;
#line 570
  iov.iov_len = size;
#line 574
  msg.msg_name = 0;
#line 574
  msg.msg_namelen = 0;
#line 574
  msg.msg_iov = (struct iovec *)(& iov);
#line 574
  msg.msg_iovlen = 1UL;
#line 574
  msg.msg_control = 0;
#line 574
  msg.msg_controllen = 0UL;
#line 574
  msg.msg_flags = 16640U;
#line 581
  tmp = current_thread_info___0();
#line 581
  oldfs = tmp->addr_limit;
#line 582
  tmp___0 = current_thread_info___0();
#line 582
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 582
  tmp___0->addr_limit = __constr_expr_0;
  ldv_51193: 
#line 585
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 586
  if ((size_t )rv == size) {
#line 587
    goto ldv_51192;
  } else {

  }
#line 594
  if (rv < 0) {
#line 595
    if (rv == -104) {
#line 596
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 597
    if (rv != -512) {
#line 598
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 599
    goto ldv_51192;
  } else
#line 600
  if (rv == 0) {
#line 601
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 602
    goto ldv_51192;
  } else {
#line 608
    goto ldv_51192;
  }
#line 610
  goto ldv_51193;
  ldv_51192: 
#line 612
  tmp___1 = current_thread_info___0();
#line 612
  tmp___1->addr_limit = oldfs;
#line 614
  if ((size_t )rv != size) {
#line 615
    val.i = 0U;
#line 615
    val.ldv_39162.conn = 4U;
#line 615
    mask.i = 0U;
#line 615
    mask.ldv_39162.conn = 31U;
#line 615
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 617
  return (rv);
}
}
#line 625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 629
  if (snd != 0U) {
#line 630
    (sock->sk)->sk_sndbuf = (int )snd;
#line 631
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 633
  if (rcv != 0U) {
#line 634
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 635
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 637
  return;
}
}
#line 639 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 645
  disconnect_on_error = 1;
#line 647
  tmp = get_net_conf(mdev);
#line 647
  if (tmp == 0) {
#line 648
    return (0);
  } else {

  }
#line 650
  what = "sock_create_kern";
#line 651
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 653
  if (err < 0) {
#line 654
    sock = 0;
#line 655
    goto out;
  } else {

  }
#line 658
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 658
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 658
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 660
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 670
  __min1 = (mdev->net_conf)->my_addr_len;
#line 670
  __min2 = 28;
#line 670
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 670
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 672
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 673
    src_in6.sin6_port = 0U;
  } else {
#line 675
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 677
  what = "bind before connect";
#line 678
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 681
  if (err < 0) {
#line 682
    goto out;
  } else {

  }
#line 686
  disconnect_on_error = 0;
#line 687
  what = "connect";
#line 688
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 693
  if (err < 0) {
#line 694
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 695
      sock_release(sock);
#line 696
      sock = 0;
    } else {

    }
#line 698
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 705
    disconnect_on_error = 0;
#line 706
    goto ldv_51230;
    default: 
#line 708
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_51230: ;
#line 710
    if (disconnect_on_error != 0) {
#line 711
      val.i = 0U;
#line 711
      val.ldv_39162.conn = 1U;
#line 711
      mask.i = 0U;
#line 711
      mask.ldv_39162.conn = 31U;
#line 711
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 713
  put_net_conf(mdev);
#line 714
  return (sock);
}
}
#line 717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 720
  s_estab = 0;
#line 723
  tmp = get_net_conf(mdev);
#line 723
  if (tmp == 0) {
#line 724
    return (0);
  } else {

  }
#line 726
  what = "sock_create_kern";
#line 727
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 729
  if (err != 0) {
#line 730
    s_listen = 0;
#line 731
    goto out;
  } else {

  }
#line 734
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 735
  tmp___0 = random32();
#line 735
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 737
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 738
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 739
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 740
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 743
  what = "bind before listen";
#line 744
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 747
  if (err < 0) {
#line 748
    goto out;
  } else {

  }
#line 750
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 753
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 754
    sock_release(s_listen);
  } else {

  }
#line 755
  if (err < 0) {
#line 756
    if ((err != -11 && err != -4) && err != -512) {
#line 757
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 758
      val.i = 0U;
#line 758
      val.ldv_39162.conn = 1U;
#line 758
      mask.i = 0U;
#line 758
      mask.ldv_39162.conn = 31U;
#line 758
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 761
  put_net_conf(mdev);
#line 763
  return (s_estab);
}
}
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 769
  h = & mdev->data.sbuf.header.h80;
#line 771
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 771
  return (tmp);
}
}
#line 774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 776
  h = & mdev->data.rbuf.header.h80;
#line 779
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 781
  if (rr == 8 && h->magic == 1728214147U) {
#line 782
    tmp = __fswab16((int )h->command);
#line 782
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 784
  return (65535);
}
}
#line 792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 797
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 798
    return (0);
  } else {

  }
#line 800
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 802
  if (rr > 0 || rr == -11) {
#line 803
    return (1);
  } else {
#line 805
    sock_release(*sock);
#line 806
    *sock = 0;
#line 807
    return (0);
  }
}
}
#line 819 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state __ns ;

  {
#line 825
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            825);
  } else {

  }
#line 827
  val.i = 0U;
#line 827
  val.ldv_39162.conn = 8U;
#line 827
  mask.i = 0U;
#line 827
  mask.ldv_39162.conn = 31U;
#line 827
  tmp = drbd_request_state(mdev, mask, val);
#line 827
  if (tmp <= 0) {
#line 828
    return (-2);
  } else {

  }
#line 830
  clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 832
  sock = 0;
#line 833
  msock = 0;
  ldv_51290: 
#line 836
  try = 0;
  ldv_51282: 
#line 838
  s = drbd_try_connect(mdev);
#line 839
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 840
    goto ldv_51281;
  } else {
#line 839
    try = try + 1;
#line 839
    if (try > 2) {
#line 840
      goto ldv_51281;
    } else {

    }
  }
#line 842
  schedule_timeout_interruptible(25L);
#line 843
  goto ldv_51282;
  ldv_51281: ;
#line 845
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 846
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 847
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 848
      sock = s;
#line 849
      s = 0;
    } else
#line 850
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 851
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 852
      msock = s;
#line 853
      s = 0;
    } else {
#line 855
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 856
      goto out_release_sockets;
    }
  } else {

  }
#line 860
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 861
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 862
    ok = drbd_socket_okay(mdev, & sock);
#line 863
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 863
    ok = tmp___0 != 0 && ok != 0;
#line 864
    if (ok != 0) {
#line 865
      goto ldv_51284;
    } else {

    }
  } else {

  }
  retry: 
#line 869
  s = drbd_wait_for_connect(mdev);
#line 870
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 871
    tmp___1 = drbd_recv_fp(mdev, s);
#line 871
    try = (int )tmp___1;
#line 872
    drbd_socket_okay(mdev, & sock);
#line 873
    drbd_socket_okay(mdev, & msock);
#line 874
    switch (try) {
    case 65522: ;
#line 876
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 877
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 878
      sock_release(sock);
    } else {

    }
#line 880
    sock = s;
#line 881
    goto ldv_51287;
    case 65521: ;
#line 883
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 884
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 885
      sock_release(msock);
    } else {

    }
#line 887
    msock = s;
#line 888
    set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 889
    goto ldv_51287;
    default: 
#line 891
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 892
    sock_release(s);
#line 893
    tmp___2 = random32();
#line 893
    if ((int )tmp___2 & 1) {
#line 894
      goto retry;
    } else {

    }
    }
    ldv_51287: ;
  } else {

  }
#line 898
  if ((int )mdev->state.ldv_39162.conn <= 1) {
#line 899
    goto out_release_sockets;
  } else {

  }
#line 900
  tmp___5 = get_current();
#line 900
  tmp___6 = signal_pending(tmp___5);
#line 900
  if (tmp___6 != 0) {
#line 901
    tmp___3 = get_current();
#line 901
    flush_signals(tmp___3);
#line 902
    __asm__  volatile   ("": : : "memory");
#line 903
    tmp___4 = get_t_state(& mdev->receiver);
#line 903
    if ((unsigned int )tmp___4 == 2U) {
#line 904
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 907
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 908
    ok = drbd_socket_okay(mdev, & sock);
#line 909
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 909
    ok = tmp___7 != 0 && ok != 0;
#line 910
    if (ok != 0) {
#line 911
      goto ldv_51284;
    } else {

    }
  } else {

  }
#line 913
  goto ldv_51290;
  ldv_51284: 
#line 915
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 916
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 918
  (sock->sk)->sk_allocation = 16U;
#line 919
  (msock->sk)->sk_allocation = 16U;
#line 921
  (sock->sk)->sk_priority = 4U;
#line 922
  (msock->sk)->sk_priority = 6U;
#line 929
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 929
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 929
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 932
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 933
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 937
  drbd_tcp_nodelay(sock);
#line 938
  drbd_tcp_nodelay(msock);
#line 940
  mdev->data.socket = sock;
#line 941
  mdev->meta.socket = msock;
#line 942
  mdev->last_received = jiffies;
#line 944
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 944
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            944);
  } else {

  }
#line 946
  h = drbd_do_handshake(mdev);
#line 947
  if (h <= 0) {
#line 948
    return (h);
  } else {

  }
#line 950
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 952
    tmp___9 = drbd_do_auth(mdev);
#line 952
    switch (tmp___9) {
    case -1: 
#line 954
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 955
    return (-1);
    case 0: 
#line 957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 958
    return (0);
    }
  } else {

  }
#line 962
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 963
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 965
  atomic_set(& mdev->packet_seq, 0);
#line 966
  mdev->peer_seq = 0U;
#line 968
  tmp___10 = drbd_send_protocol(mdev);
#line 968
  if (tmp___10 == -1) {
#line 969
    return (-1);
  } else {

  }
#line 970
  set_bit(29U, (unsigned long volatile   *)(& mdev->flags));
#line 971
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 972
  drbd_send_sizes(mdev, 0, 0);
#line 973
  drbd_send_uuids(mdev);
#line 974
  drbd_send_current_state(mdev);
#line 975
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 976
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 978
  spin_lock_irq(& mdev->req_lock);
#line 979
  __ns.i = mdev->state.i;
#line 979
  __ns.ldv_39162.conn = 9U;
#line 979
  rv = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 980
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 144U) {
#line 981
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 982
  spin_unlock_irq(& mdev->req_lock);
#line 984
  if ((int )rv <= 0) {
#line 985
    return (0);
  } else {

  }
#line 987
  drbd_thread_start(& mdev->asender);
#line 988
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 990
  return (1);
  out_release_sockets: ;
#line 993
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 994
    sock_release(sock);
  } else {

  }
#line 995
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 996
    sock_release(msock);
  } else {

  }
#line 997
  return (-1);
}
}
#line 1000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 1002
  h = & mdev->data.rbuf.header;
#line 1005
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 1006
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 1006
  if (tmp___1 != 0L) {
#line 1007
    tmp = get_current();
#line 1007
    tmp___0 = signal_pending(tmp);
#line 1007
    if (tmp___0 == 0) {
#line 1008
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 1009
    return (0);
  } else {

  }
#line 1012
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 1012
  if (tmp___9 != 0L) {
#line 1013
    tmp___2 = __fswab16((int )h->h80.command);
#line 1013
    *cmd = (enum drbd_packets )tmp___2;
#line 1014
    tmp___3 = __fswab16((int )h->h80.length);
#line 1014
    *packet_size = (unsigned int )tmp___3;
  } else
#line 1015
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1016
    tmp___4 = __fswab16((int )h->h95.command);
#line 1016
    *cmd = (enum drbd_packets )tmp___4;
#line 1017
    tmp___5 = __fswab32(h->h95.length);
#line 1017
    *packet_size = tmp___5;
  } else {
#line 1019
    tmp___6 = __fswab16((int )h->h80.length);
#line 1019
    tmp___7 = __fswab16((int )h->h80.command);
#line 1019
    tmp___8 = __fswab32(h->h80.magic);
#line 1019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1023
    return (0);
  }
#line 1025
  mdev->last_received = jiffies;
#line 1027
  return (1);
}
}
#line 1030 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1034
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1034
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1034
    if (tmp != 0) {
#line 1035
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 1037
      if (rv != 0) {
#line 1038
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                  rv);
#line 1042
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1044
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1046
  return;
}
}
#line 1054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1060
  rv = FE_STILL_LIVE;
#line 1062
  spin_lock(& mdev->epoch_lock);
  ldv_51325: 
#line 1064
  next_epoch = 0;
#line 1066
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1068
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1070
  atomic_dec(& epoch->active);
#line 1071
  goto ldv_51315;
  case 1U: 
#line 1073
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1074
  goto ldv_51315;
  case 2U: ;
#line 1077
  goto ldv_51315;
  }
  ldv_51315: ;
#line 1080
  if (epoch_size != 0) {
#line 1080
    tmp___2 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1080
    if (tmp___2 == 0) {
#line 1080
      tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1080
      if (tmp___3 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1083
        if (((unsigned int )ev & 32U) == 0U) {
#line 1084
          spin_unlock(& mdev->epoch_lock);
#line 1085
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1086
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1088
        tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1088
        if (tmp___1 != 0) {
#line 1089
          atomic_dec(& mdev->unacked_cnt);
#line 1089
          tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1089
          if (tmp___0 < 0) {
#line 1089
            tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1089
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                    "drbd_may_finish_epoch", 1089, tmp);
          } else {

          }
        } else {

        }
#line 1091
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1092
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1092
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1093
          list_del(& epoch->list);
#line 1094
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1095
          mdev->epochs = mdev->epochs - 1U;
#line 1096
          kfree((void const   *)epoch);
#line 1098
          if ((unsigned int )rv == 0U) {
#line 1099
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1101
          epoch->flags = 0UL;
#line 1102
          atomic_set(& epoch->epoch_size, 0);
#line 1104
          if ((unsigned int )rv == 0U) {
#line 1105
            rv = FE_RECYCLED;
          } else {

          }
#line 1106
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1110
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1111
    goto ldv_51324;
  } else {

  }
#line 1113
  epoch = next_epoch;
#line 1114
  goto ldv_51325;
  ldv_51324: 
#line 1116
  spin_unlock(& mdev->epoch_lock);
#line 1118
  return (rv);
}
}
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1129
  write_ordering_str[0] = (char *)"none";
#line 1129
  write_ordering_str[1] = (char *)"drain";
#line 1129
  write_ordering_str[2] = (char *)"flush";
#line 1135
  pwo = mdev->write_ordering;
#line 1136
  _min1 = pwo;
#line 1136
  _min2 = wo;
#line 1136
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1137
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1138
    wo = WO_drain_io;
  } else {

  }
#line 1139
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1140
    wo = WO_none;
  } else {

  }
#line 1141
  mdev->write_ordering = wo;
#line 1142
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1143
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1144
  return;
}
}
#line 1163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1166
  bios = 0;
#line 1168
  page = e->pages;
#line 1169
  sector = e->sector;
#line 1170
  ds = e->size;
#line 1171
  n_bios = 0U;
#line 1172
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1173
  err = -12;
  next_bio: 
#line 1184
  bio = bio_alloc(16U, nr_pages);
#line 1185
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1186
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1187
    goto fail;
  } else {

  }
#line 1190
  bio->bi_sector = sector;
#line 1191
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1192
  bio->bi_rw = (unsigned long )rw;
#line 1193
  bio->bi_private = (void *)e;
#line 1194
  bio->bi_end_io = & drbd_endio_sec;
#line 1196
  bio->bi_next = bios;
#line 1197
  bios = bio;
#line 1198
  n_bios = n_bios + 1U;
#line 1200
  goto ldv_51357;
  ldv_51356: 
#line 1201
  __min1 = ds;
#line 1201
  __min2 = 4096U;
#line 1201
  len = __min1 < __min2 ? __min1 : __min2;
#line 1202
  tmp = bio_add_page(bio, page, len, 0U);
#line 1202
  if (tmp == 0) {
#line 1206
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1207
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1211
      err = -28;
#line 1212
      goto fail;
    } else {

    }
#line 1214
    goto next_bio;
  } else {

  }
#line 1216
  ds = ds - len;
#line 1217
  sector = (sector_t )(len >> 9) + sector;
#line 1218
  nr_pages = nr_pages - 1U;
#line 1200
  page = page_chain_next(page);
  ldv_51357: ;
#line 1200
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1200
    tmp___0 = page_chain_next(page);
#line 1200
    __builtin_prefetch((void const   *)tmp___0);
#line 1200
    if (1 != 0) {
#line 1201
      goto ldv_51356;
    } else {
#line 1203
      goto ldv_51358;
    }
  } else {

  }
  ldv_51358: ;
#line 1220
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1220
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1220);
  } else {

  }
#line 1221
  if (ds != 0U) {
#line 1221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1221);
  } else {

  }
#line 1223
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_51359: 
#line 1225
  bio = bios;
#line 1226
  bios = bios->bi_next;
#line 1227
  bio->bi_next = 0;
#line 1229
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1230
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1231
    goto ldv_51359;
  } else {

  }

#line 1231
  return (0);
  fail: ;
#line 1234
  goto ldv_51362;
  ldv_51361: 
#line 1235
  bio = bios;
#line 1236
  bios = bios->bi_next;
#line 1237
  bio_put(bio);
  ldv_51362: ;
#line 1234
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1235
    goto ldv_51361;
  } else {

  }

#line 1239
  return (err);
}
}
#line 1242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1245
  p = & mdev->data.rbuf.barrier;
#line 1248
  inc_unacked(mdev);
#line 1250
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1251
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1251
  rv = (int )tmp;
#line 1258
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1260
  if (rv == 2) {
#line 1261
    return (1);
  } else {

  }
#line 1265
  tmp___0 = kmalloc(40UL, 16U);
#line 1265
  epoch = (struct drbd_epoch *)tmp___0;
#line 1266
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1267
    goto ldv_51373;
  } else {
#line 1269
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1274
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1275
  drbd_flush(mdev);
#line 1277
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1277
  if (tmp___2 != 0) {
#line 1278
    tmp___1 = kmalloc(40UL, 16U);
#line 1278
    epoch = (struct drbd_epoch *)tmp___1;
#line 1279
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1280
      goto ldv_51373;
    } else {

    }
  } else {

  }
#line 1283
  epoch = mdev->current_epoch;
#line 1284
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1284
  if (tmp___3 == 0) {
#line 1284
    goto ldv_51376;
  } else {

  }
#line 1284
  tmp___4 = get_current();
#line 1284
  __wait.flags = 0U;
#line 1284
  __wait.private = (void *)tmp___4;
#line 1284
  __wait.func = & autoremove_wake_function;
#line 1284
  __wait.task_list.next = & __wait.task_list;
#line 1284
  __wait.task_list.prev = & __wait.task_list;
  ldv_51379: 
#line 1284
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1284
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1284
  if (tmp___5 == 0) {
#line 1284
    goto ldv_51378;
  } else {

  }
#line 1284
  schedule();
#line 1284
  goto ldv_51379;
  ldv_51378: 
#line 1284
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_51376: 
#line 1286
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1286
  if (tmp___6 != 0) {
#line 1286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1286);
  } else {

  }
#line 1287
  if (epoch->flags != 0UL) {
#line 1287
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1287);
  } else {

  }
#line 1289
  return (1);
  default: 
#line 1291
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1292
  return (0);
  }
  ldv_51373: 
#line 1295
  epoch->flags = 0UL;
#line 1296
  atomic_set(& epoch->epoch_size, 0);
#line 1297
  atomic_set(& epoch->active, 0);
#line 1299
  spin_lock(& mdev->epoch_lock);
#line 1300
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1300
  if (tmp___7 != 0) {
#line 1301
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1302
    mdev->current_epoch = epoch;
#line 1303
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1306
    kfree((void const   *)epoch);
  }
#line 1308
  spin_unlock(& mdev->epoch_lock);
#line 1310
  return (1);
}
}
#line 1316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1318
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1318
  capacity = tmp;
#line 1322
  dig_in = mdev->int_dig_in;
#line 1323
  dig_vv = mdev->int_dig_vv;
#line 1326
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1326
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1326
    dgs = (int )tmp___0;
  } else {
#line 1326
    dgs = 0;
  }
#line 1329
  if (dgs != 0) {
#line 1330
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1331
    if (rr != dgs) {
#line 1332
      tmp___1 = get_current();
#line 1332
      tmp___2 = signal_pending(tmp___1);
#line 1332
      if (tmp___2 == 0) {
#line 1333
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1336
      return (0);
    } else {

    }
  } else {

  }
#line 1340
  data_size = data_size - dgs;
#line 1342
  _b = (data_size & 511) != 0;
#line 1342
  if (_b != 0) {
#line 1342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1342);
  } else {

  }
#line 1342
  if (_b != 0) {
#line 1342
    return (0);
  } else {

  }
#line 1343
  _b___0 = (unsigned int )data_size > 131072U;
#line 1343
  if (_b___0 != 0) {
#line 1343
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1343);
  } else {

  }
#line 1343
  if (_b___0 != 0) {
#line 1343
    return (0);
  } else {

  }
#line 1347
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1352
    return (0);
  } else {

  }
#line 1358
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1359
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1360
    return (0);
  } else {

  }
#line 1362
  if (data_size == 0) {
#line 1363
    return (e);
  } else {

  }
#line 1365
  ds = data_size;
#line 1366
  page = e->pages;
#line 1367
  goto ldv_51407;
  ldv_51406: 
#line 1368
  __min1 = ds;
#line 1368
  __min2 = 4096;
#line 1368
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1369
  tmp___3 = kmap(page);
#line 1369
  data = (unsigned long *)tmp___3;
#line 1370
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1371
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1371
  if (tmp___4 != 0) {
#line 1372
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1373
    *data = ~ *data;
  } else {

  }
#line 1375
  kunmap(page);
#line 1376
  if ((unsigned int )rr != len) {
#line 1377
    drbd_free_some_ee(mdev, e, 0);
#line 1378
    tmp___5 = get_current();
#line 1378
    tmp___6 = signal_pending(tmp___5);
#line 1378
    if (tmp___6 == 0) {
#line 1379
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1381
    return (0);
  } else {

  }
#line 1383
  ds = ds - rr;
#line 1367
  page = page_chain_next(page);
  ldv_51407: ;
#line 1367
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1367
    tmp___7 = page_chain_next(page);
#line 1367
    __builtin_prefetch((void const   *)tmp___7);
#line 1367
    if (1 != 0) {
#line 1368
      goto ldv_51406;
    } else {
#line 1370
      goto ldv_51408;
    }
  } else {

  }
  ldv_51408: ;
#line 1386
  if (dgs != 0) {
#line 1387
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1388
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1388
    if (tmp___8 != 0) {
#line 1389
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1391
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1393
      drbd_free_some_ee(mdev, e, 0);
#line 1394
      return (0);
    } else {

    }
  } else {

  }
#line 1397
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1398
  return (e);
}
}
#line 1404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1407
  rv = 1;
#line 1410
  if (data_size == 0) {
#line 1411
    return (1);
  } else {

  }
#line 1413
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1415
  data = kmap(page);
#line 1416
  goto ldv_51428;
  ldv_51427: 
#line 1417
  __min1 = data_size;
#line 1417
  __min2 = 4096;
#line 1417
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1418
  __min1___1 = data_size;
#line 1418
  __min2___1 = 4096;
#line 1418
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1419
    rv = 0;
#line 1420
    tmp = get_current();
#line 1420
    tmp___0 = signal_pending(tmp);
#line 1420
    if (tmp___0 == 0) {
#line 1423
      __min1___0 = data_size;
#line 1423
      __min2___0 = 4096;
#line 1423
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1424
    goto ldv_51426;
  } else {

  }
#line 1426
  data_size = data_size - rr;
  ldv_51428: ;
#line 1416
  if (data_size != 0) {
#line 1417
    goto ldv_51427;
  } else {

  }
  ldv_51426: 
#line 1428
  kunmap(page);
#line 1429
  drbd_pp_free(mdev, page, 0);
#line 1430
  return (rv);
}
}
#line 1433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1439
  dig_in = mdev->int_dig_in;
#line 1440
  dig_vv = mdev->int_dig_vv;
#line 1442
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1442
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1442
    dgs = (int )tmp;
  } else {
#line 1442
    dgs = 0;
  }
#line 1445
  if (dgs != 0) {
#line 1446
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1447
    if (rr != dgs) {
#line 1448
      tmp___0 = get_current();
#line 1448
      tmp___1 = signal_pending(tmp___0);
#line 1448
      if (tmp___1 == 0) {
#line 1449
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1452
      return (0);
    } else {

    }
  } else {

  }
#line 1456
  data_size = data_size - dgs;
#line 1460
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1462
  bio = req->master_bio;
#line 1463
  if (bio->bi_sector != sector) {
#line 1463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1463);
  } else {

  }
#line 1465
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1465
  i = (int )bio->bi_idx;
#line 1465
  goto ldv_51447;
  ldv_51446: 
#line 1466
  __min1 = data_size;
#line 1466
  __min2 = (int )bvec->bv_len;
#line 1466
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1467
  tmp___2 = kmap(bvec->bv_page);
#line 1467
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1470
  kunmap(bvec->bv_page);
#line 1471
  if (rr != expect) {
#line 1472
    tmp___3 = get_current();
#line 1472
    tmp___4 = signal_pending(tmp___3);
#line 1472
    if (tmp___4 == 0) {
#line 1473
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1476
    return (0);
  } else {

  }
#line 1478
  data_size = data_size - rr;
#line 1465
  bvec = bvec + 1;
#line 1465
  i = i + 1;
  ldv_51447: ;
#line 1465
  if ((int )bio->bi_vcnt > i) {
#line 1466
    goto ldv_51446;
  } else {

  }

#line 1481
  if (dgs != 0) {
#line 1482
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1483
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1483
    if (tmp___5 != 0) {
#line 1484
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1485
      return (0);
    } else {

    }
  } else {

  }
#line 1489
  if (data_size != 0) {
#line 1489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1489);
  } else {

  }
#line 1490
  return (1);
}
}
#line 1495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1497
  e = (struct drbd_epoch_entry *)w;
#line 1498
  sector = e->sector;
#line 1501
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1501
  if (tmp == 0) {
#line 1501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1501);
  } else {

  }
#line 1503
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1503
  if (tmp___0 != 0L) {
#line 1504
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1504U);
#line 1505
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1508
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1510
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1512
  atomic_dec(& mdev->unacked_cnt);
#line 1512
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1512
  if (tmp___2 < 0) {
#line 1512
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1512
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1512, tmp___1);
  } else {

  }
#line 1514
  return (ok);
}
}
#line 1517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1521
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1522
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1523
    goto fail;
  } else {

  }
#line 1525
  atomic_dec(& mdev->rs_pending_cnt);
#line 1525
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1525
  if (tmp___0 < 0) {
#line 1525
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1525
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1525, tmp);
  } else {

  }
#line 1527
  inc_unacked(mdev);
#line 1531
  e->w.cb = & e_end_resync_block;
#line 1533
  spin_lock_irq(& mdev->req_lock);
#line 1534
  list_add(& e->w.list, & mdev->sync_ee);
#line 1535
  spin_unlock_irq(& mdev->req_lock);
#line 1537
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1538
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1538
  if (tmp___1 == 0) {
#line 1539
    return (1);
  } else {

  }
#line 1542
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1543
  spin_lock_irq(& mdev->req_lock);
#line 1544
  list_del(& e->w.list);
#line 1545
  spin_unlock_irq(& mdev->req_lock);
#line 1547
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1549
  put_ldev(mdev);
#line 1550
  return (0);
}
}
#line 1553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1558
  p = & mdev->data.rbuf.data;
#line 1560
  tmp = __fswab64(p->sector);
#line 1560
  sector = (sector_t )tmp;
#line 1562
  spin_lock_irq(& mdev->req_lock);
#line 1563
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1564
  spin_unlock_irq(& mdev->req_lock);
#line 1565
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1565
  if (tmp___0 != 0L) {
#line 1566
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1567
    return (0);
  } else {

  }
#line 1573
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1575
  if (ok != 0) {
#line 1576
    req_mod(req, data_received);
  } else {

  }
#line 1581
  return (ok);
}
}
#line 1584 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1588
  p = & mdev->data.rbuf.data;
#line 1590
  tmp = __fswab64(p->sector);
#line 1590
  sector = (sector_t )tmp;
#line 1591
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1591);
  } else {

  }
#line 1593
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1593
  if (tmp___1 != 0) {
#line 1597
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1599
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1599
    if (tmp___0 != 0) {
#line 1600
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1602
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1604
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1607
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1609
  return (ok);
}
}
#line 1615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1617
  e = (struct drbd_epoch_entry *)w;
#line 1618
  sector = e->sector;
#line 1619
  ok = 1;
#line 1621
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1622
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1622
    if (tmp___0 != 0L) {
#line 1623
      pcmd = ((int )mdev->state.ldv_39162.conn > 15 && (int )mdev->state.ldv_39162.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1627
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1627
      ok = tmp & ok;
#line 1628
      if (pcmd == 23) {
#line 1629
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1629U);
      } else {

      }
    } else {
#line 1631
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1635
    atomic_dec(& mdev->unacked_cnt);
#line 1635
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1635
    if (tmp___2 < 0) {
#line 1635
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1635
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1635, tmp___1);
    } else {

    }
  } else {

  }
#line 1639
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1640
    spin_lock_irq(& mdev->req_lock);
#line 1641
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1641
    if (tmp___3 != 0) {
#line 1641
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1641);
    } else {

    }
#line 1642
    hlist_del_init(& e->collision);
#line 1643
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1645
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1645
    if (tmp___4 == 0) {
#line 1645
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1645);
    } else {

    }
  }
#line 1648
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1650
  return (ok);
}
}
#line 1653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1655
  e = (struct drbd_epoch_entry *)w;
#line 1656
  ok = 1;
#line 1658
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1658);
  } else {

  }
#line 1659
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1661
  spin_lock_irq(& mdev->req_lock);
#line 1662
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1662
  if (tmp != 0) {
#line 1662
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1662);
  } else {

  }
#line 1663
  hlist_del_init(& e->collision);
#line 1664
  spin_unlock_irq(& mdev->req_lock);
#line 1666
  atomic_dec(& mdev->unacked_cnt);
#line 1666
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1666
  if (tmp___1 < 0) {
#line 1666
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1666, tmp___0);
  } else {

  }
#line 1668
  return (ok);
}
}
#line 1671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_epoch_entry *data_e ) 
{ 
  struct drbd_epoch_entry *rs_e ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1675
  rv = 0;
#line 1677
  spin_lock_irq(& mdev->req_lock);
#line 1678
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1678
  rs_e = (struct drbd_epoch_entry *)__mptr;
#line 1678
  goto ldv_51526;
  ldv_51525: 
#line 1679
  tmp = overlaps(data_e->sector, (int )data_e->size, rs_e->sector, (int )rs_e->size);
#line 1679
  if (tmp != 0) {
#line 1680
    rv = 1;
#line 1681
    goto ldv_51524;
  } else {

  }
#line 1678
  __mptr___0 = (struct list_head  const  *)rs_e->w.list.next;
#line 1678
  rs_e = (struct drbd_epoch_entry *)__mptr___0;
  ldv_51526: ;
#line 1678
  if ((unsigned long )(& rs_e->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1679
    goto ldv_51525;
  } else {

  }
  ldv_51524: 
#line 1684
  spin_unlock_irq(& mdev->req_lock);
#line 1686
  return (rv);
}
}
#line 1710 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1712
  tmp = get_current();
#line 1712
  wait.flags = 0U;
#line 1712
  wait.private = (void *)tmp;
#line 1712
  wait.func = & autoremove_wake_function;
#line 1712
  wait.task_list.next = & wait.task_list;
#line 1712
  wait.task_list.prev = & wait.task_list;
#line 1715
  ret = 0;
#line 1716
  spin_lock(& mdev->peer_seq_lock);
  ldv_51536: 
#line 1718
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1719
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1719
  if (tmp___0 <= 0) {
#line 1720
    goto ldv_51535;
  } else {

  }
#line 1721
  tmp___1 = get_current();
#line 1721
  tmp___2 = signal_pending(tmp___1);
#line 1721
  if (tmp___2 != 0) {
#line 1722
    ret = -512;
#line 1723
    goto ldv_51535;
  } else {

  }
#line 1725
  p_seq = mdev->peer_seq;
#line 1726
  spin_unlock(& mdev->peer_seq_lock);
#line 1727
  timeout = schedule_timeout(7500L);
#line 1728
  spin_lock(& mdev->peer_seq_lock);
#line 1729
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1730
    ret = -110;
#line 1731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1732
    goto ldv_51535;
  } else {

  }
#line 1734
  goto ldv_51536;
  ldv_51535: 
#line 1735
  finish_wait(& mdev->seq_wait, & wait);
#line 1736
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1737
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1738
  spin_unlock(& mdev->peer_seq_lock);
#line 1739
  return (ret);
}
}
#line 1745 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1747
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 1024 : 0)) | ((dpf & 32U) != 0U ? 2048 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  bool tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  bool tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 1758
  p = & mdev->data.rbuf.data;
#line 1759
  rw = 1;
#line 1762
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1762
  if (tmp___1 == 0) {
#line 1763
    spin_lock(& mdev->peer_seq_lock);
#line 1764
    tmp = __fswab32(p->seq_num);
#line 1764
    if (mdev->peer_seq + 1U == tmp) {
#line 1765
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1766
    spin_unlock(& mdev->peer_seq_lock);
#line 1768
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1769
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1770
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1770
    return (tmp___0);
  } else {

  }
#line 1778
  tmp___2 = __fswab64(p->sector);
#line 1778
  sector = (sector_t )tmp___2;
#line 1779
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1780
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1781
    put_ldev(mdev);
#line 1782
    return (0);
  } else {

  }
#line 1785
  e->w.cb = & e_end_block;
#line 1787
  tmp___3 = __fswab32(p->dp_flags);
#line 1787
  dp_flags = tmp___3;
#line 1788
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1788
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1789
  if ((unsigned long )e->pages == (unsigned long )((struct page *)0)) {
#line 1790
    if (e->size != 0U) {
#line 1790
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1790);
    } else {

    }
#line 1791
    if ((dp_flags & 32U) == 0U) {
#line 1791
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( dp_flags & DP_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1791);
    } else {

    }
  } else {

  }
#line 1794
  if ((dp_flags & 4U) != 0U) {
#line 1795
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1797
  spin_lock(& mdev->epoch_lock);
#line 1798
  e->epoch = mdev->current_epoch;
#line 1799
  atomic_inc(& (e->epoch)->epoch_size);
#line 1800
  atomic_inc(& (e->epoch)->active);
#line 1801
  spin_unlock(& mdev->epoch_lock);
#line 1804
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1805
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1809
    size = (int const   )e->size;
#line 1810
    tmp___5 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 1810
    discard = tmp___5;
#line 1811
    tmp___6 = get_current();
#line 1811
    wait.flags = 0U;
#line 1811
    wait.private = (void *)tmp___6;
#line 1811
    wait.func = & autoremove_wake_function;
#line 1811
    wait.task_list.next = & wait.task_list;
#line 1811
    wait.task_list.prev = & wait.task_list;
#line 1817
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1817
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1817);
    } else {

    }
#line 1818
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1818
    if (tmp___7 != 0L) {
#line 1818
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1818), "i" (12UL));
      ldv_51558: ;
#line 1818
      goto ldv_51558;
    } else {

    }
#line 1819
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1819
    if (tmp___8 != 0L) {
#line 1819
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1819), "i" (12UL));
      ldv_51559: ;
#line 1819
      goto ldv_51559;
    } else {

    }
#line 1855
    tmp___9 = __fswab32(p->seq_num);
#line 1855
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1855
    if (tmp___10 != 0) {
#line 1856
      goto out_interrupted;
    } else {

    }
#line 1858
    spin_lock_irq(& mdev->req_lock);
#line 1860
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1860
    hlist_add_head(& e->collision, tmp___11);
#line 1863
    slot = tl_hash_slot(mdev, sector);
#line 1864
    first = 1;
    ldv_51570: 
#line 1866
    have_unacked = 0;
#line 1867
    have_conflict = 0;
#line 1868
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1870
    n = slot->first;
#line 1870
    goto ldv_51567;
    ldv_51566: 
#line 1871
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1871
    if (tmp___14 != 0) {
#line 1874
      if (first != 0) {
#line 1875
        tmp___12 = get_current();
#line 1875
        tmp___13 = get_current();
#line 1875
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1880
      if ((i->rq_state & 16UL) != 0UL) {
#line 1881
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1882
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1870
    n = n->next;
    ldv_51567: ;
#line 1870
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1870
      __mptr = (struct hlist_node  const  *)n;
#line 1870
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1870
      if (1 != 0) {
#line 1871
        goto ldv_51566;
      } else {
#line 1873
        goto ldv_51568;
      }
    } else {

    }
    ldv_51568: ;
#line 1886
    if (have_conflict == 0) {
#line 1887
      goto ldv_51569;
    } else {

    }
#line 1890
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1891
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1893
      inc_unacked(mdev);
#line 1894
      e->w.cb = & e_send_discard_ack;
#line 1895
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1897
      spin_unlock_irq(& mdev->req_lock);
#line 1902
      put_ldev(mdev);
#line 1903
      wake_asender(mdev);
#line 1904
      finish_wait(& mdev->misc_wait, & wait);
#line 1905
      return (1);
    } else {

    }
#line 1908
    tmp___15 = get_current();
#line 1908
    tmp___16 = signal_pending(tmp___15);
#line 1908
    if (tmp___16 != 0) {
#line 1909
      hlist_del_init(& e->collision);
#line 1911
      spin_unlock_irq(& mdev->req_lock);
#line 1913
      finish_wait(& mdev->misc_wait, & wait);
#line 1914
      goto out_interrupted;
    } else {

    }
#line 1917
    spin_unlock_irq(& mdev->req_lock);
#line 1918
    if (first != 0) {
#line 1919
      first = 0;
#line 1920
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1922
    if (discard != 0) {
#line 1925
      if (have_unacked != 0) {
#line 1925
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1925);
      } else {

      }
    } else {

    }
#line 1927
    schedule();
#line 1928
    spin_lock_irq(& mdev->req_lock);
#line 1929
    goto ldv_51570;
    ldv_51569: 
#line 1930
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1933
  list_add(& e->w.list, & mdev->active_ee);
#line 1934
  spin_unlock_irq(& mdev->req_lock);
#line 1936
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) {
#line 1937
    tmp___17 = overlapping_resync_write(mdev, e);
#line 1937
    if (tmp___17) {
#line 1937
      tmp___18 = 0;
    } else {
#line 1937
      tmp___18 = 1;
    }
#line 1937
    if (tmp___18) {
#line 1937
      goto ldv_51571;
    } else {

    }
#line 1937
    tmp___19 = get_current();
#line 1937
    __wait.flags = 0U;
#line 1937
    __wait.private = (void *)tmp___19;
#line 1937
    __wait.func = & autoremove_wake_function;
#line 1937
    __wait.task_list.next = & __wait.task_list;
#line 1937
    __wait.task_list.prev = & __wait.task_list;
    ldv_51574: 
#line 1937
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1937
    tmp___20 = overlapping_resync_write(mdev, e);
#line 1937
    if (tmp___20) {
#line 1937
      tmp___21 = 0;
    } else {
#line 1937
      tmp___21 = 1;
    }
#line 1937
    if (tmp___21) {
#line 1937
      goto ldv_51573;
    } else {

    }
#line 1937
    schedule();
#line 1937
    goto ldv_51574;
    ldv_51573: 
#line 1937
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_51571: ;
  } else {

  }
#line 1939
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1941
  inc_unacked(mdev);
#line 1944
  goto ldv_51576;
  case 2: 
#line 1948
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1949
  goto ldv_51576;
  case 1: ;
#line 1952
  goto ldv_51576;
  }
  ldv_51576: ;
#line 1955
  if ((int )mdev->state.ldv_39162.pdsk <= 3) {
#line 1957
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1957U);
#line 1958
    e->flags = e->flags | 1UL;
#line 1959
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1960
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1963
  tmp___22 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1963
  if (tmp___22 == 0) {
#line 1964
    return (1);
  } else {

  }
#line 1967
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1968
  spin_lock_irq(& mdev->req_lock);
#line 1969
  list_del(& e->w.list);
#line 1970
  hlist_del_init(& e->collision);
#line 1971
  spin_unlock_irq(& mdev->req_lock);
#line 1972
  if ((int )e->flags & 1) {
#line 1973
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1976
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1977
  put_ldev(mdev);
#line 1978
  drbd_free_some_ee(mdev, e, 0);
#line 1979
  return (0);
}
}
#line 1993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1995
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1999
  throttle = 0;
#line 2002
  if (mdev->sync_conf.c_min_rate == 0) {
#line 2003
    return (0);
  } else {

  }
#line 2005
  spin_lock_irq(& mdev->al_lock);
#line 2006
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 2007
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 2008
    __mptr = (struct lc_element  const  *)tmp;
#line 2008
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 2009
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 2009
    if (tmp___0 != 0) {
#line 2010
      spin_unlock_irq(& mdev->al_lock);
#line 2011
      return (0);
    } else {

    }
  } else {

  }
#line 2015
  spin_unlock_irq(& mdev->al_lock);
#line 2017
  res = 0UL;
#line 2017
  _cpu = 4294967295U;
#line 2017
  goto ldv_51600;
  ldv_51599: 
#line 2017
  __vpp_verify = 0;
#line 2017
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2017
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_51600: 
#line 2017
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2017
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2018
    goto ldv_51599;
  } else {

  }
#line 2018
  res___0 = 0UL;
#line 2018
  _cpu___0 = 4294967295U;
#line 2018
  goto ldv_51610;
  ldv_51609: 
#line 2018
  __vpp_verify___0 = 0;
#line 2018
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2018
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_51610: 
#line 2018
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2018
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2019
    goto ldv_51609;
  } else {

  }
#line 2018
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2018
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 2021
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2025
    mdev->rs_last_events = curr_events;
#line 2029
    i = (mdev->rs_last_mark + 7) % 8;
#line 2031
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2032
      rs_left = mdev->ov_left;
    } else {
#line 2034
      tmp___2 = drbd_bm_total_weight(mdev);
#line 2034
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 2036
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2037
    if (dt == 0UL) {
#line 2038
      dt = dt + 1UL;
    } else {

    }
#line 2039
    db = mdev->rs_mark_left[i] - rs_left;
#line 2040
    dbdt = db / dt << 2;
#line 2042
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2043
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2045
  return (throttle);
}
}
#line 2049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 2052
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2052
  capacity = tmp;
#line 2054
  di = 0;
#line 2057
  p = & mdev->data.rbuf.block_req;
#line 2059
  tmp___0 = __fswab64(p->sector);
#line 2059
  sector = (sector_t )tmp___0;
#line 2060
  tmp___1 = __fswab32(p->blksize);
#line 2060
  size = (int )tmp___1;
#line 2062
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2063
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2063, (unsigned long long )sector, size);
#line 2065
    return (0);
  } else {

  }
#line 2067
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2068, (unsigned long long )sector, size);
#line 2070
    return (0);
  } else {

  }
#line 2073
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2073
  if (tmp___7 == 0) {
#line 2074
    verb = 1;
#line 2075
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2077
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2078
    goto ldv_51629;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2082
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2083
    goto ldv_51629;
    case 31U: 
#line 2085
    verb = 0;
#line 2086
    atomic_dec(& mdev->rs_pending_cnt);
#line 2086
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2086
    if (tmp___3 < 0) {
#line 2086
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2086, tmp___2);
    } else {

    }
#line 2087
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2088
    goto ldv_51629;
    default: 
#line 2090
    tmp___4 = cmdname(cmd);
#line 2090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_51629: ;
#line 2093
    if (verb != 0) {
#line 2093
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2093
      if (tmp___5 != 0) {
#line 2094
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2098
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2098
    return (tmp___6);
  } else {

  }
#line 2104
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2105
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2106
    put_ldev(mdev);
#line 2107
    return (0);
  } else {

  }
#line 2110
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2112
  e->w.cb = & w_e_end_data_req;
#line 2113
  fault_type = 5U;
#line 2115
  goto submit;
  case 9U: 
#line 2118
  e->w.cb = & w_e_end_rsdata_req;
#line 2119
  fault_type = 3U;
#line 2121
  mdev->bm_resync_fo = sector >> 3;
#line 2122
  goto ldv_51642;
  case 31U: ;
  case 33U: 
#line 2126
  fault_type = 3U;
#line 2127
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2127
  di = (struct digest_info *)tmp___8;
#line 2128
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2129
    goto out_free_e;
  } else {

  }
#line 2131
  di->digest_size = (int )digest_size;
#line 2132
  di->digest = (void *)di + 16U;
#line 2134
  e->ldv_48227.digest = di;
#line 2135
  e->flags = e->flags | 16UL;
#line 2137
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2137
  if ((unsigned int )tmp___9 != digest_size) {
#line 2138
    goto out_free_e;
  } else {

  }
#line 2140
  if ((unsigned int )cmd == 33U) {
#line 2141
    if (mdev->agreed_pro_version <= 88) {
#line 2141
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2141);
    } else {

    }
#line 2142
    e->w.cb = & w_e_end_csum_rs_req;
#line 2144
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2145
  if ((unsigned int )cmd == 31U) {
#line 2147
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2148
    e->w.cb = & w_e_end_ov_reply;
#line 2149
    atomic_dec(& mdev->rs_pending_cnt);
#line 2149
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2149
    if (tmp___11 < 0) {
#line 2149
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2149
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2149, tmp___10);
    } else {

    }
#line 2152
    goto submit_for_resync;
  } else {

  }
#line 2154
  goto ldv_51642;
  case 30U: ;
#line 2157
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2159
    now = jiffies;
#line 2161
    mdev->ov_start_sector = sector;
#line 2162
    mdev->ov_position = sector;
#line 2163
    tmp___12 = drbd_bm_bits(mdev);
#line 2163
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2164
    mdev->rs_total = mdev->ov_left;
#line 2165
    i = 0;
#line 2165
    goto ldv_51654;
    ldv_51653: 
#line 2166
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2167
    mdev->rs_mark_time[i] = now;
#line 2165
    i = i + 1;
    ldv_51654: ;
#line 2165
    if (i <= 7) {
#line 2166
      goto ldv_51653;
    } else {

    }
#line 2169
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2172
  e->w.cb = & w_e_end_ov_req;
#line 2173
  fault_type = 3U;
#line 2174
  goto ldv_51642;
  default: 
#line 2177
  tmp___13 = cmdname(cmd);
#line 2177
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2179
  fault_type = 10U;
#line 2180
  goto out_free_e;
  }
  ldv_51642: ;
#line 2205
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2205
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2205
    if (tmp___14 != 0) {
#line 2206
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2207
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2207
  if (tmp___15 != 0) {
#line 2208
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2211
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2214
  inc_unacked(mdev);
#line 2215
  spin_lock_irq(& mdev->req_lock);
#line 2216
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2217
  spin_unlock_irq(& mdev->req_lock);
#line 2219
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2219
  if (tmp___16 == 0) {
#line 2220
    return (1);
  } else {

  }
#line 2223
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2224
  spin_lock_irq(& mdev->req_lock);
#line 2225
  list_del(& e->w.list);
#line 2226
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2230
  put_ldev(mdev);
#line 2231
  drbd_free_some_ee(mdev, e, 0);
#line 2232
  return (0);
}
}
#line 2235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2237
  rv = -100;
#line 2240
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2241
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2243
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2244
  ch_self = mdev->comm_bm_set;
#line 2246
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2250
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2251
  goto ldv_51668;
  case 0: ;
#line 2253
  goto ldv_51668;
  case 1: ;
#line 2255
  if (self == 0 && peer == 1) {
#line 2256
    rv = -1;
#line 2257
    goto ldv_51668;
  } else {

  }
#line 2259
  if (self == 1 && peer == 0) {
#line 2260
    rv = 1;
#line 2261
    goto ldv_51668;
  } else {

  }
  case 2: ;
#line 2265
  if (self == 0 && peer == 1) {
#line 2266
    rv = 1;
#line 2267
    goto ldv_51668;
  } else {

  }
#line 2269
  if (self == 1 && peer == 0) {
#line 2270
    rv = -1;
#line 2271
    goto ldv_51668;
  } else {

  }
#line 2274
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2277
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2278
    tmp = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2278
    rv = tmp != 0 ? -1 : 1;
#line 2280
    goto ldv_51668;
  } else {
#line 2282
    if (ch_peer == 0UL) {
#line 2282
      rv = 1;
#line 2282
      goto ldv_51668;
    } else {

    }
#line 2283
    if (ch_self == 0UL) {
#line 2283
      rv = -1;
#line 2283
      goto ldv_51668;
    } else {

    }
  }
#line 2285
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2286
    goto ldv_51668;
  } else {

  }
  case 4: ;
#line 2288
  if (ch_self < ch_peer) {
#line 2289
    rv = -1;
  } else
#line 2290
  if (ch_self > ch_peer) {
#line 2291
    rv = 1;
  } else {
#line 2294
    tmp___0 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2294
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2296
  goto ldv_51668;
  case 5: 
#line 2298
  rv = -1;
#line 2299
  goto ldv_51668;
  case 6: 
#line 2301
  rv = 1;
  }
  ldv_51668: ;
#line 2304
  return (rv);
}
}
#line 2307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2309
  rv = -100;
#line 2311
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2317
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2318
  goto ldv_51686;
  case 0: ;
#line 2320
  goto ldv_51686;
  case 7: 
#line 2322
  hg = drbd_asb_recover_0p(mdev);
#line 2323
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2324
    rv = hg;
  } else {

  }
#line 2325
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2326
    rv = hg;
  } else {

  }
#line 2327
  goto ldv_51686;
  case 10: 
#line 2329
  rv = drbd_asb_recover_0p(mdev);
#line 2330
  goto ldv_51686;
  case 8: ;
#line 2332
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2334
  hg = drbd_asb_recover_0p(mdev);
#line 2335
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2338
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2342
    val.i = 0U;
#line 2342
    val.ldv_39162.role = 2U;
#line 2342
    mask.i = 0U;
#line 2342
    mask.ldv_39162.role = 3U;
#line 2342
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2343
    if ((int )rv2 != 1) {
#line 2344
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2346
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2347
      rv = hg;
    }
  } else {
#line 2350
    rv = hg;
  }
  }
  ldv_51686: ;
#line 2353
  return (rv);
}
}
#line 2356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2358
  rv = -100;
#line 2360
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2368
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2369
  goto ldv_51709;
  case 10: 
#line 2371
  rv = drbd_asb_recover_0p(mdev);
#line 2372
  goto ldv_51709;
  case 0: ;
#line 2374
  goto ldv_51709;
  case 9: 
#line 2376
  hg = drbd_asb_recover_0p(mdev);
#line 2377
  if (hg == -1) {
#line 2383
    val.i = 0U;
#line 2383
    val.ldv_39162.role = 2U;
#line 2383
    mask.i = 0U;
#line 2383
    mask.ldv_39162.role = 3U;
#line 2383
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2384
    if ((int )rv2 != 1) {
#line 2385
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2387
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2388
      rv = hg;
    }
  } else {
#line 2391
    rv = hg;
  }
  }
  ldv_51709: ;
#line 2394
  return (rv);
}
}
#line 2397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2400
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2401
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2402
    return;
  } else {

  }
#line 2404
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2405
  return;
}
}
#line 2426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2431
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2432
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2434
  *rule_nr = 10;
#line 2435
  if (self == 4ULL && peer == 4ULL) {
#line 2436
    return (0);
  } else {

  }
#line 2438
  *rule_nr = 20;
#line 2439
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2441
    return (-2);
  } else {

  }
#line 2443
  *rule_nr = 30;
#line 2444
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2446
    return (2);
  } else {

  }
#line 2448
  if (self == peer) {
#line 2451
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2453
      if (mdev->agreed_pro_version <= 90) {
#line 2454
        return (-1091);
      } else {

      }
#line 2456
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2458
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2459
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2461
        if ((int )mdev->state.ldv_39162.disk > 2) {
#line 2461
          tmp = drbd_bm_total_weight(mdev);
#line 2461
          tmp___0 = (u64 )tmp;
        } else {
#line 2461
          tmp___0 = 0ULL;
        }
#line 2461
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2463
        *rule_nr = 34;
      } else {
#line 2465
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2466
        *rule_nr = 36;
      }
#line 2469
      return (1);
    } else {

    }
#line 2472
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2474
      if (mdev->agreed_pro_version <= 90) {
#line 2475
        return (-1091);
      } else {

      }
#line 2477
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2479
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2481
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2482
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2483
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2485
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2486
        *rule_nr = 35;
      } else {
#line 2488
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2489
        *rule_nr = 37;
      }
#line 2492
      return (-1);
    } else {

    }
#line 2496
    tmp___1 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2496
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2500
    *rule_nr = 40;
#line 2502
    switch (rct) {
    case 0: ;
#line 2503
    return (0);
    case 1: ;
#line 2504
    return (1);
    case 2: ;
#line 2505
    return (-1);
    case 3: 
#line 2507
    dc = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 2508
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2512
  *rule_nr = 50;
#line 2513
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2514
  if (self == peer) {
#line 2515
    return (-1);
  } else {

  }
#line 2517
  *rule_nr = 51;
#line 2518
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2519
  if (self == peer) {
#line 2520
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2527
      if (mdev->agreed_pro_version <= 90) {
#line 2528
        return (-1091);
      } else {

      }
#line 2530
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2531
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2533
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2534
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2536
      return (-1);
    } else {

    }
  } else {

  }
#line 2540
  *rule_nr = 60;
#line 2541
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2542
  i = 2;
#line 2542
  goto ldv_51740;
  ldv_51739: 
#line 2543
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2544
  if (self == peer) {
#line 2545
    return (-2);
  } else {

  }
#line 2542
  i = i + 1;
  ldv_51740: ;
#line 2542
  if (i <= 3) {
#line 2543
    goto ldv_51739;
  } else {

  }
#line 2548
  *rule_nr = 70;
#line 2549
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2550
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2551
  if (self == peer) {
#line 2552
    return (1);
  } else {

  }
#line 2554
  *rule_nr = 71;
#line 2555
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2556
  if (self == peer) {
#line 2557
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2564
      if (mdev->agreed_pro_version <= 90) {
#line 2565
        return (-1091);
      } else {

      }
#line 2567
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2568
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2570
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2571
      if ((int )mdev->state.ldv_39162.disk > 2) {
#line 2571
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2571
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2571
        tmp___3 = 0ULL;
      }
#line 2571
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2574
      return (1);
    } else {

    }
  } else {

  }
#line 2579
  *rule_nr = 80;
#line 2580
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2581
  i = 2;
#line 2581
  goto ldv_51743;
  ldv_51742: 
#line 2582
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2583
  if (self == peer) {
#line 2584
    return (2);
  } else {

  }
#line 2581
  i = i + 1;
  ldv_51743: ;
#line 2581
  if (i <= 3) {
#line 2582
    goto ldv_51742;
  } else {

  }
#line 2587
  *rule_nr = 90;
#line 2588
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2589
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2590
  if (self == peer && self != 0ULL) {
#line 2591
    return (100);
  } else {

  }
#line 2593
  *rule_nr = 100;
#line 2594
  i = 2;
#line 2594
  goto ldv_51749;
  ldv_51748: 
#line 2595
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2596
  j = 2;
#line 2596
  goto ldv_51746;
  ldv_51745: 
#line 2597
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2598
  if (self == peer) {
#line 2599
    return (-100);
  } else {

  }
#line 2596
  j = j + 1;
  ldv_51746: ;
#line 2596
  if (j <= 3) {
#line 2597
    goto ldv_51745;
  } else {

  }
#line 2594
  i = i + 1;
  ldv_51749: ;
#line 2594
  if (i <= 3) {
#line 2595
    goto ldv_51748;
  } else {

  }

#line 2603
  return (-1000);
}
}
#line 2609 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2613
  rv = C_MASK;
#line 2616
  mydisk = (enum drbd_disk_state )mdev->state.ldv_39162.disk;
#line 2617
  if ((unsigned int )mydisk == 3U) {
#line 2618
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_39162.disk;
  } else {

  }
#line 2620
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2621
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2622
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2625
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2627
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2629
  if (hg == -1000) {
#line 2630
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2631
    return (C_MASK);
  } else {

  }
#line 2633
  if (hg < -1000) {
#line 2634
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2635
    return (C_MASK);
  } else {

  }
#line 2638
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2640
    if (hg == -100) {
#line 2640
      tmp = 1;
    } else {
#line 2640
      __x___0 = hg;
#line 2640
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2640
      if (ret == 2L) {
#line 2640
        tmp = 1;
      } else {
#line 2640
        tmp = 0;
      }
    }
#line 2640
    f = tmp;
#line 2641
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2642
    if (f != 0) {
#line 2643
      hg = hg * 2;
    } else {

    }
#line 2644
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2648
  __x___2 = hg;
#line 2648
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2648
  if (ret___0 == 100L) {
#line 2649
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2651
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2652
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2654
    forced = hg == -100;
#line 2656
    switch (pcount) {
    case 0: 
#line 2658
    hg = drbd_asb_recover_0p(mdev);
#line 2659
    goto ldv_51772;
    case 1: 
#line 2661
    hg = drbd_asb_recover_1p(mdev);
#line 2662
    goto ldv_51772;
    case 2: 
#line 2664
    hg = drbd_asb_recover_2p(mdev);
#line 2665
    goto ldv_51772;
    }
    ldv_51772: 
#line 2667
    __x___4 = hg;
#line 2667
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2667
    if (ret___1 <= 99L) {
#line 2668
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2671
      if (forced != 0) {
#line 2672
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2674
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2679
  if (hg == -100) {
#line 2680
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2681
      hg = -1;
    } else {

    }
#line 2682
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2683
      hg = 1;
    } else {

    }
#line 2685
    __x___6 = hg;
#line 2685
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2685
    if (ret___2 <= 99L) {
#line 2686
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2691
  if (hg == -100) {
#line 2696
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2697
    drbd_khelper(mdev, (char *)"split-brain");
#line 2698
    return (C_MASK);
  } else {

  }
#line 2701
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2702
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2703
    return (C_MASK);
  } else {

  }
#line 2706
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_39162.disk > 6) {
#line 2708
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2710
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2714
    return (C_MASK);
    case 10: 
#line 2716
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2721
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2721
    goto _L;
  } else {
#line 2721
    tmp___1 = constant_test_bit(24U, (unsigned long const volatile   *)(& mdev->flags));
#line 2721
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2722
      if (hg == 0) {
#line 2723
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2725
        __x___8 = hg;
#line 2725
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2725
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2725
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2728
      return (C_MASK);
    } else {

    }
  }
#line 2731
  __x___10 = hg;
#line 2731
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2731
  if (ret___4 > 1L) {
#line 2732
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2733
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 2733
    if (tmp___2 != 0) {
#line 2735
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2738
  if (hg > 0) {
#line 2739
    rv = C_WF_BITMAP_S;
  } else
#line 2740
  if (hg < 0) {
#line 2741
    rv = C_WF_BITMAP_T;
  } else {
#line 2743
    rv = C_CONNECTED;
#line 2744
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2744
    if (tmp___4 != 0UL) {
#line 2745
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2745
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2750
  return (rv);
}
}
#line 2754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2757
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2759
    return (0);
  } else {

  }
#line 2762
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2764
    return (1);
  } else {

  }
#line 2767
  if ((unsigned int )peer == (unsigned int )self) {
#line 2768
    return (0);
  } else {

  }
#line 2771
  return (1);
}
}
#line 2774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2776
  p = & mdev->data.rbuf.protocol;
#line 2779
  p_integrity_alg[0] = '\000';
#line 2779
  tmp = 1U;
#line 2779
  while (1) {
#line 2779
    if (tmp >= 64U) {
#line 2779
      break;
    } else {

    }
#line 2779
    p_integrity_alg[tmp] = (char)0;
#line 2779
    tmp = tmp + 1U;
  }
#line 2781
  tmp___0 = __fswab32(p->protocol);
#line 2781
  p_proto = (int )tmp___0;
#line 2782
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2782
  p_after_sb_0p = (int )tmp___1;
#line 2783
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2783
  p_after_sb_1p = (int )tmp___2;
#line 2784
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2784
  p_after_sb_2p = (int )tmp___3;
#line 2785
  tmp___4 = __fswab32(p->two_primaries);
#line 2785
  p_two_primaries = (int )tmp___4;
#line 2786
  tmp___5 = __fswab32(p->conn_flags);
#line 2786
  cf = (int )tmp___5;
#line 2787
  p_want_lose = cf & 1;
#line 2789
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2791
  if ((cf & 2) != 0) {
#line 2792
    set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2794
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2795
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2796
    goto disconnect;
  } else {

  }
#line 2799
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2799
  if (tmp___6 != 0) {
#line 2800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2801
    goto disconnect;
  } else {

  }
#line 2804
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2804
  if (tmp___7 != 0) {
#line 2805
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2806
    goto disconnect;
  } else {

  }
#line 2809
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2809
  if (tmp___8 != 0) {
#line 2810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2811
    goto disconnect;
  } else {

  }
#line 2814
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2815
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2816
    goto disconnect;
  } else {

  }
#line 2819
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2820
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2821
    goto disconnect;
  } else {

  }
#line 2824
  if (mdev->agreed_pro_version > 86) {
#line 2825
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2827
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2827
    if ((unsigned int )tmp___9 != data_size) {
#line 2828
      return (0);
    } else {

    }
#line 2830
    p_integrity_alg[63] = 0;
#line 2831
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2831
    if (tmp___10 != 0) {
#line 2832
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2833
      goto disconnect;
    } else {

    }
#line 2835
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2839
  return (1);
  disconnect: 
#line 2842
  val.i = 0U;
#line 2842
  val.ldv_39162.conn = 1U;
#line 2842
  mask.i = 0U;
#line 2842
  mask.ldv_39162.conn = 31U;
#line 2842
  drbd_force_state(mdev, mask, val);
#line 2843
  return (0);
}
}
#line 2851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2856
  if ((int )((signed char )*alg) == 0) {
#line 2857
    return (0);
  } else {

  }
#line 2859
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2860
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2860
  if (tmp___0 != 0L) {
#line 2861
    tmp = PTR_ERR((void const   *)tfm);
#line 2861
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2863
    return (tfm);
  } else {

  }
#line 2865
  tmp___2 = crypto_hash_tfm(tfm);
#line 2865
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2865
  if (tmp___3 == 0) {
#line 2866
    crypto_free_hash(tfm);
#line 2867
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2868
    tmp___1 = ERR_PTR(-22L);
#line 2868
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2870
  return (tfm);
}
}
#line 2873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2875
  ok = 1;
#line 2876
  p = & mdev->data.rbuf.rs_param_95;
#line 2878
  verify_tfm = 0;
#line 2879
  csums_tfm = 0;
#line 2880
  apv = mdev->agreed_pro_version;
#line 2881
  rs_plan_s = 0;
#line 2882
  fifo_size = 0;
#line 2884
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2890
  if (packet_size > exp_max_sz) {
#line 2891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2893
    return (0);
  } else {

  }
#line 2896
  if (apv <= 88) {
#line 2897
    header_size = 4U;
#line 2898
    data_size = packet_size - header_size;
  } else
#line 2899
  if (apv <= 94) {
#line 2900
    header_size = 132U;
#line 2901
    data_size = packet_size - header_size;
#line 2902
    if (data_size != 0U) {
#line 2902
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2902);
    } else {

    }
  } else {
#line 2904
    header_size = 148U;
#line 2905
    data_size = packet_size - header_size;
#line 2906
    if (data_size != 0U) {
#line 2906
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2906);
    } else {

    }
  }
#line 2910
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2912
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2912
  if ((unsigned int )tmp != header_size) {
#line 2913
    return (0);
  } else {

  }
#line 2915
  tmp___0 = __fswab32(p->rate);
#line 2915
  mdev->sync_conf.rate = (int )tmp___0;
#line 2917
  if (apv > 87) {
#line 2918
    if (apv == 88) {
#line 2919
      if (data_size > 64U || data_size == 0U) {
#line 2920
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 2923
        return (0);
      } else {

      }
#line 2926
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2926
      if ((unsigned int )tmp___1 != data_size) {
#line 2927
        return (0);
      } else {

      }
#line 2931
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2931
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2931);
      } else {

      }
#line 2932
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2937
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2937
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2937);
      } else {

      }
#line 2938
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2938
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2938);
      } else {

      }
#line 2939
      p->verify_alg[63] = 0;
#line 2940
      p->csums_alg[63] = 0;
    }
#line 2943
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2943
    if (tmp___3 != 0) {
#line 2944
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2945
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2947
        goto disconnect;
      } else {

      }
#line 2949
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2951
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2951
      if (tmp___2 != 0L) {
#line 2952
        verify_tfm = 0;
#line 2953
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2957
    if (apv > 88) {
#line 2957
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2957
      if (tmp___5 != 0) {
#line 2958
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2959
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2961
          goto disconnect;
        } else {

        }
#line 2963
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2965
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2965
        if (tmp___4 != 0L) {
#line 2966
          csums_tfm = 0;
#line 2967
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2971
    if (apv > 94) {
#line 2972
      tmp___6 = __fswab32(p->rate);
#line 2972
      mdev->sync_conf.rate = (int )tmp___6;
#line 2973
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2973
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2974
      tmp___8 = __fswab32(p->c_delay_target);
#line 2974
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2975
      tmp___9 = __fswab32(p->c_fill_target);
#line 2975
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2976
      tmp___10 = __fswab32(p->c_max_rate);
#line 2976
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2978
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2979
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2980
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2980
        rs_plan_s = (int *)tmp___11;
#line 2981
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2982
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2983
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2988
    spin_lock(& mdev->peer_seq_lock);
#line 2990
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2991
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2992
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2992
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2993
      crypto_free_hash(mdev->verify_tfm);
#line 2994
      mdev->verify_tfm = verify_tfm;
#line 2995
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2997
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2998
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2999
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2999
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 3000
      crypto_free_hash(mdev->csums_tfm);
#line 3001
      mdev->csums_tfm = csums_tfm;
#line 3002
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 3004
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 3005
      kfree((void const   *)mdev->rs_plan_s.values);
#line 3006
      mdev->rs_plan_s.values = rs_plan_s;
#line 3007
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 3008
      mdev->rs_planed = 0;
    } else {

    }
#line 3010
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 3013
  return (ok);
  disconnect: 
#line 3017
  crypto_free_hash(csums_tfm);
#line 3019
  crypto_free_hash(verify_tfm);
#line 3020
  val.i = 0U;
#line 3020
  val.ldv_39162.conn = 1U;
#line 3020
  mask.i = 0U;
#line 3020
  mask.ldv_39162.conn = 31U;
#line 3020
  drbd_force_state(mdev, mask, val);
#line 3021
  return (0);
}
}
#line 3025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3029
  if (a == 0UL || b == 0UL) {
#line 3030
    return;
  } else {

  }
#line 3031
  d = a > b ? a - b : b - a;
#line 3032
  if (a >> 3 < d || b >> 3 < d) {
#line 3033
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3035
  return;
}
}
#line 3037 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 3039
  p = & mdev->data.rbuf.sizes;
#line 3040
  dd = 0;
#line 3042
  ldsc = 0;
#line 3045
  tmp = __fswab64(p->d_size);
#line 3045
  p_size = (sector_t )tmp;
#line 3046
  tmp___0 = __fswab64(p->u_size);
#line 3046
  p_usize = (sector_t )tmp___0;
#line 3048
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 3049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3050
    val.i = 0U;
#line 3050
    val.ldv_39162.conn = 1U;
#line 3050
    mask.i = 0U;
#line 3050
    mask.ldv_39162.conn = 31U;
#line 3050
    drbd_force_state(mdev, mask, val);
#line 3051
    return (0);
  } else {

  }
#line 3056
  mdev->p_size = p_size;
#line 3058
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3058
  if (tmp___6 != 0) {
#line 3059
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3059
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3061
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3066
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3067
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3067
      __y = p_usize;
#line 3067
      if (__x != 0UL) {
#line 3067
        if (__y != 0UL) {
#line 3067
          _min1 = __x;
#line 3067
          _min2 = __y;
#line 3067
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3067
          tmp___2 = __x;
        }
#line 3067
        tmp___3 = tmp___2;
      } else {
#line 3067
        tmp___3 = __y;
      }
#line 3067
      p_usize = tmp___3;
    } else {

    }
#line 3070
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3072
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3073
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3074
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3080
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3080
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3080
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_39162.disk > 4) && (int )mdev->state.ldv_39162.conn <= 9) {
#line 3084
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3085
      val___0.i = 0U;
#line 3085
      val___0.ldv_39162.conn = 1U;
#line 3085
      mask___0.i = 0U;
#line 3085
      mask___0.ldv_39162.conn = 31U;
#line 3085
      drbd_force_state(mdev, mask___0, val___0);
#line 3086
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3087
      put_ldev(mdev);
#line 3088
      return (0);
    } else {

    }
#line 3090
    put_ldev(mdev);
  } else {

  }
#line 3093
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3093
  ddsf = (enum dds_flags )tmp___7;
#line 3094
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3094
  if (tmp___8 != 0) {
#line 3095
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3096
    put_ldev(mdev);
#line 3097
    if ((int )dd == -1) {
#line 3098
      return (0);
    } else {

    }
#line 3099
    drbd_md_sync(mdev);
  } else {
#line 3102
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3105
  tmp___9 = __fswab32(p->max_bio_size);
#line 3105
  mdev->peer_max_bio_size = tmp___9;
#line 3106
  drbd_reconsider_max_bio_size(mdev);
#line 3108
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3108
  if (tmp___11 != 0) {
#line 3109
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3109
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3110
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3111
      ldsc = 1;
    } else {

    }
#line 3114
    put_ldev(mdev);
  } else {

  }
#line 3117
  if ((int )mdev->state.ldv_39162.conn > 9) {
#line 3118
    tmp___12 = __fswab64(p->c_size);
#line 3118
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3118
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3122
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3124
    tmp___14 = test_and_clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 3124
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3126
      if ((int )mdev->state.ldv_39162.pdsk > 3 && (int )mdev->state.ldv_39162.disk > 3) {
#line 3128
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3129
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3131
          resync_after_online_grow(mdev);
        }
      } else {
#line 3133
        set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3137
  return (1);
}
}
#line 3140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3142
  p = & mdev->data.rbuf.uuids;
#line 3144
  updated_uuids = 0;
#line 3146
  tmp = kmalloc(48UL, 16U);
#line 3146
  p_uuid = (u64 *)tmp;
#line 3148
  i = 0;
#line 3148
  goto ldv_51887;
  ldv_51886: 
#line 3149
  tmp___0 = __fswab64(p->uuid[i]);
#line 3149
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3148
  i = i + 1;
  ldv_51887: ;
#line 3148
  if (i <= 5) {
#line 3149
    goto ldv_51886;
  } else {

  }
#line 3151
  kfree((void const   *)mdev->p_uuid);
#line 3152
  mdev->p_uuid = p_uuid;
#line 3154
  if ((((int )mdev->state.ldv_39162.conn <= 9 && (int )mdev->state.ldv_39162.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3158
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3160
    val.i = 0U;
#line 3160
    val.ldv_39162.conn = 1U;
#line 3160
    mask.i = 0U;
#line 3160
    mask.ldv_39162.conn = 31U;
#line 3160
    drbd_force_state(mdev, mask, val);
#line 3161
    return (0);
  } else {

  }
#line 3164
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3164
  if (tmp___1 != 0) {
#line 3165
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3170
    if (skip_initial_sync != 0) {
#line 3171
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3172
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3175
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3176
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3177
      __ns.i = mdev->state.i;
#line 3177
      __ns.ldv_39162.disk = 8U;
#line 3177
      __ns.ldv_39162.pdsk = 8U;
#line 3177
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3179
      drbd_md_sync(mdev);
#line 3180
      updated_uuids = 1;
    } else {

    }
#line 3182
    put_ldev(mdev);
  } else
#line 3183
  if ((int )mdev->state.ldv_39162.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3187
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3194
  tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3194
  if (tmp___2 == 0) {
#line 3194
    goto ldv_51896;
  } else {

  }
#line 3194
  tmp___3 = get_current();
#line 3194
  __wait.flags = 0U;
#line 3194
  __wait.private = (void *)tmp___3;
#line 3194
  __wait.func = & autoremove_wake_function;
#line 3194
  __wait.task_list.next = & __wait.task_list;
#line 3194
  __wait.task_list.prev = & __wait.task_list;
  ldv_51899: 
#line 3194
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3194
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3194
  if (tmp___4 == 0) {
#line 3194
    goto ldv_51898;
  } else {

  }
#line 3194
  schedule();
#line 3194
  goto ldv_51899;
  ldv_51898: 
#line 3194
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51896: ;
#line 3195
  if ((int )mdev->state.ldv_39162.conn > 9 && (int )mdev->state.ldv_39162.disk <= 3) {
#line 3196
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3196
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3198
  if (updated_uuids != 0) {
#line 3199
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3201
  return (1);
}
}
#line 3208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3212
  c_tab[0] = 0;
#line 3212
  c_tab[1] = C_TEAR_DOWN;
#line 3212
  c_tab[2] = 0;
#line 3212
  c_tab[3] = 0;
#line 3212
  c_tab[4] = 0;
#line 3212
  c_tab[5] = 0;
#line 3212
  c_tab[6] = 0;
#line 3212
  c_tab[7] = 0;
#line 3212
  c_tab[8] = 0;
#line 3212
  c_tab[9] = 0;
#line 3212
  c_tab[10] = C_CONNECTED;
#line 3212
  c_tab[11] = C_STARTING_SYNC_T;
#line 3212
  c_tab[12] = C_STARTING_SYNC_S;
#line 3212
  c_tab[13] = 0;
#line 3212
  c_tab[14] = 0;
#line 3212
  c_tab[15] = 0;
#line 3212
  c_tab[16] = 0;
#line 3212
  c_tab[17] = 0;
#line 3212
  c_tab[18] = C_VERIFY_T;
#line 3212
  c_tab[19] = 0;
#line 3212
  c_tab[20] = 0;
#line 3212
  c_tab[21] = 0;
#line 3212
  c_tab[22] = 0;
#line 3212
  c_tab[23] = 0;
#line 3212
  c_tab[24] = 0;
#line 3212
  c_tab[25] = 0;
#line 3212
  c_tab[26] = 0;
#line 3212
  c_tab[27] = 0;
#line 3212
  c_tab[28] = 0;
#line 3212
  c_tab[29] = 0;
#line 3212
  c_tab[30] = 0;
#line 3212
  c_tab[31] = C_MASK;
#line 3222
  ms.i = ps.i;
#line 3224
  ms.ldv_39162.conn = (unsigned char )c_tab[(int )ps.ldv_39162.conn];
#line 3225
  ms.ldv_39162.peer = ps.ldv_39162.role;
#line 3226
  ms.ldv_39162.role = ps.ldv_39162.peer;
#line 3227
  ms.ldv_39162.pdsk = ps.ldv_39162.disk;
#line 3228
  ms.ldv_39162.disk = ps.ldv_39162.pdsk;
#line 3229
  ms.ldv_39162.peer_isp = (unsigned char )((int )ps.ldv_39162.aftr_isp | (int )ps.ldv_39162.user_isp);
#line 3231
  return (ms);
}
}
#line 3234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3236
  p = & mdev->data.rbuf.req_state;
#line 3240
  tmp = __fswab32(p->mask);
#line 3240
  mask.i = tmp;
#line 3241
  tmp___0 = __fswab32(p->val);
#line 3241
  val.i = tmp___0;
#line 3243
  tmp___1 = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
#line 3243
  if (tmp___1 != 0) {
#line 3243
    tmp___2 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3243
    if (tmp___2 != 0) {
#line 3245
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3246
      return (1);
    } else {

    }
  } else {

  }
#line 3249
  mask = convert_state(mask);
#line 3250
  val = convert_state(val);
#line 3252
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3254
  drbd_send_sr_reply(mdev, rv);
#line 3255
  drbd_md_sync(mdev);
#line 3257
  return (1);
}
}
#line 3260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3262
  p = & mdev->data.rbuf.state;
#line 3268
  tmp = __fswab32(p->state);
#line 3268
  peer_state.i = tmp;
#line 3270
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_39162.disk;
#line 3271
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3272
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3273
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3273
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3276
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3278
  ns = mdev->state;
#line 3278
  os = ns;
#line 3279
  spin_unlock_irq(& mdev->req_lock);
#line 3284
  if ((int )os.ldv_39162.conn <= 7) {
#line 3285
    return (0);
  } else {

  }
#line 3293
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_39162.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3302
    if ((int )peer_state.ldv_39162.conn > 10 && (int )peer_state.ldv_39162.conn <= 15) {
#line 3304
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3309
    if ((int )os.ldv_39162.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3311
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3311
      if (tmp___1 <= mdev->rs_failed) {
#line 3312
        drbd_resync_finished(mdev);
      } else {

      }
#line 3313
      return (1);
    } else {

    }
  } else {

  }
#line 3322
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_39162.conn > 16) {
#line 3324
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3326
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3327
    ns.ldv_39162.conn = 10U;
  } else {

  }
#line 3329
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3330
    ns.ldv_39162.conn = 23U;
  } else {

  }
#line 3332
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_39162.disk > 2) {
#line 3332
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3332
    if (tmp___5 != 0) {
#line 3337
      cr = (int )os.ldv_39162.conn <= 9;
#line 3340
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3345
      tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 3345
      cr = tmp___2 | cr;
#line 3348
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_39162.conn > 10 && (int )peer_state.ldv_39162.conn <= 14)) | cr;
#line 3352
      if (cr != 0) {
#line 3353
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_39162.role,
                                      real_peer_disk);
#line 3353
        ns.ldv_39162.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3355
      put_ldev(mdev);
#line 3356
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3357
        ns.ldv_39162.conn = 10U;
#line 3358
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3359
          val.i = 0U;
#line 3359
          val.ldv_39162.disk = 2U;
#line 3359
          mask.i = 0U;
#line 3359
          mask.ldv_39162.disk = 15U;
#line 3359
          drbd_force_state(mdev, mask, val);
        } else
#line 3360
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3361
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3362
          peer_state.ldv_39162.disk = 0U;
#line 3363
          real_peer_disk = D_DISKLESS;
        } else {
#line 3365
          tmp___4 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3365
          if (tmp___4 != 0) {
#line 3366
            return (0);
          } else {

          }
#line 3367
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3367
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3367);
          } else {

          }
#line 3368
          val___0.i = 0U;
#line 3368
          val___0.ldv_39162.conn = 1U;
#line 3368
          mask___0.i = 0U;
#line 3368
          mask___0.ldv_39162.conn = 31U;
#line 3368
          drbd_force_state(mdev, mask___0, val___0);
#line 3369
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3374
  spin_lock_irq(& mdev->req_lock);
#line 3375
  if (mdev->state.i != os.i) {
#line 3376
    goto retry;
  } else {

  }
#line 3377
  clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 3378
  ns.ldv_39162.peer = peer_state.ldv_39162.role;
#line 3379
  ns.ldv_39162.pdsk = (unsigned char )real_peer_disk;
#line 3380
  ns.ldv_39162.peer_isp = (unsigned char )((int )peer_state.ldv_39162.aftr_isp | (int )peer_state.ldv_39162.user_isp);
#line 3381
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3382
    ns.ldv_39162.disk = mdev->new_state_tmp.ldv_39162.disk;
  } else {

  }
#line 3383
  cs_flags = (enum chg_state_flags )(((int )os.ldv_39162.conn > 9 || (int )ns.ldv_39162.conn <= 9) + 2);
#line 3384
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3384
    tmp___6 = is_susp(ns);
#line 3384
    if (tmp___6 != 0) {
#line 3384
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3384
        if ((int )os.ldv_39162.conn <= 9) {
#line 3384
          tmp___7 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 3384
          if (tmp___7 != 0) {
#line 3388
            spin_unlock_irq(& mdev->req_lock);
#line 3389
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3390
            tl_clear(mdev);
#line 3391
            drbd_uuid_new_current(mdev);
#line 3392
            clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 3393
            val___1.i = 0U;
#line 3393
            val___1.ldv_39162.conn = 6U;
#line 3393
            val___1.ldv_39162.susp = 0U;
#line 3393
            mask___1.i = 0U;
#line 3393
            mask___1.ldv_39162.conn = 31U;
#line 3393
            mask___1.ldv_39162.susp = 1U;
#line 3393
            drbd_force_state(mdev, mask___1, val___1);
#line 3394
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3396
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3396
  rv = (int )tmp___8;
#line 3397
  ns = mdev->state;
#line 3398
  spin_unlock_irq(& mdev->req_lock);
#line 3400
  if (rv <= 0) {
#line 3401
    val___2.i = 0U;
#line 3401
    val___2.ldv_39162.conn = 1U;
#line 3401
    mask___2.i = 0U;
#line 3401
    mask___2.ldv_39162.conn = 31U;
#line 3401
    drbd_force_state(mdev, mask___2, val___2);
#line 3402
    return (0);
  } else {

  }
#line 3405
  if ((int )os.ldv_39162.conn > 9) {
#line 3406
    if (((int )ns.ldv_39162.conn > 10 && (int )peer_state.ldv_39162.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3411
      drbd_send_uuids(mdev);
#line 3412
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3416
  (mdev->net_conf)->want_lose = 0U;
#line 3418
  drbd_md_sync(mdev);
#line 3420
  return (1);
}
}
#line 3423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3425
  p = & mdev->data.rbuf.rs_uuid;
#line 3427
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_39162.conn <= 9) || (int )mdev->state.ldv_39162.disk <= 2) {
#line 3427
    goto ldv_51950;
  } else {

  }
#line 3427
  tmp = get_current();
#line 3427
  __wait.flags = 0U;
#line 3427
  __wait.private = (void *)tmp;
#line 3427
  __wait.func = & autoremove_wake_function;
#line 3427
  __wait.task_list.next = & __wait.task_list;
#line 3427
  __wait.task_list.prev = & __wait.task_list;
  ldv_51953: 
#line 3427
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3427
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_39162.conn <= 9) || (int )mdev->state.ldv_39162.disk <= 2) {
#line 3427
    goto ldv_51952;
  } else {

  }
#line 3427
  schedule();
#line 3427
  goto ldv_51953;
  ldv_51952: 
#line 3427
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51950: 
#line 3437
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3437
  if (tmp___1 != 0) {
#line 3438
    tmp___0 = __fswab64(p->uuid);
#line 3438
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3439
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3441
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3442
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3444
    put_ldev(mdev);
  } else {
#line 3446
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3448
  return (1);
}
}
#line 3458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3461
  __min1 = 511UL;
#line 3461
  __min2 = c->bm_words - c->word_offset;
#line 3461
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3462
  want = num_words * 8U;
#line 3465
  if (want != data_size) {
#line 3466
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3467
    return (-5);
  } else {

  }
#line 3469
  if (want == 0U) {
#line 3470
    return (0);
  } else {

  }
#line 3471
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3472
  if ((unsigned int )err != want) {
#line 3473
    if (err >= 0) {
#line 3474
      err = -5;
    } else {

    }
#line 3475
    return (err);
  } else {

  }
#line 3478
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3480
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3481
  c->bit_offset = c->word_offset * 64UL;
#line 3482
  if (c->bit_offset > c->bm_bits) {
#line 3483
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3485
  return (1);
}
}
#line 3495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3503
  s = c->bit_offset;
#line 3505
  tmp___0 = __fswab16((int )p->head.length);
#line 3505
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3506
  tmp___1 = DCBP_get_start(p);
#line 3506
  toggle = tmp___1;
#line 3510
  tmp___2 = DCBP_get_pad_bits(p);
#line 3510
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3512
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3513
  if (bits < 0) {
#line 3514
    return (-5);
  } else {

  }
#line 3516
  have = bits;
#line 3516
  goto ldv_51983;
  ldv_51982: 
#line 3517
  bits = vli_decode_bits(& rl, look_ahead);
#line 3518
  if (bits <= 0) {
#line 3519
    return (-5);
  } else {

  }
#line 3521
  if (toggle != 0) {
#line 3522
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3523
    if (c->bm_bits <= e) {
#line 3524
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3525
      return (-5);
    } else {

    }
#line 3527
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3530
  if (have < bits) {
#line 3531
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3535
    return (-5);
  } else {

  }
#line 3537
  look_ahead = look_ahead >> bits;
#line 3538
  have = have - bits;
#line 3540
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3541
  if (bits < 0) {
#line 3542
    return (-5);
  } else {

  }
#line 3543
  look_ahead = (tmp << have) | look_ahead;
#line 3544
  have = have + bits;
#line 3516
  s = (unsigned long )((unsigned long long )s + rl);
#line 3516
  toggle = toggle == 0;
  ldv_51983: ;
#line 3516
  if (have > 0) {
#line 3517
    goto ldv_51982;
  } else {

  }
#line 3547
  c->bit_offset = s;
#line 3548
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3550
  return (c->bm_bits != s);
}
}
#line 3560 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3564
  tmp___0 = DCBP_get_code(p);
#line 3564
  if ((unsigned int )tmp___0 == 2U) {
#line 3565
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3565
    return (tmp);
  } else {

  }
#line 3571
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3572
  val.i = 0U;
#line 3572
  val.ldv_39162.conn = 6U;
#line 3572
  mask.i = 0U;
#line 3572
  mask.ldv_39162.conn = 31U;
#line 3572
  drbd_force_state(mdev, mask, val);
#line 3573
  return (-5);
}
}
#line 3576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3580
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3583
  total = c->bytes[0] + c->bytes[1];
#line 3587
  if (total == 0U) {
#line 3588
    return;
  } else {

  }
#line 3591
  if (total >= plain) {
#line 3592
    return;
  } else {

  }
#line 3595
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3598
  if (r > 1000U) {
#line 3599
    r = 1000U;
  } else {

  }
#line 3601
  r = 1000U - r;
#line 3602
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3603
  return;
}
}
#line 3618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3623
  ok = 0;
#line 3624
  h = & mdev->data.rbuf.header.h80;
#line 3626
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 3632
  tmp = __get_free_pages(16U, 0U);
#line 3632
  buffer = (void *)tmp;
#line 3633
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3635
    goto out;
  } else {

  }
#line 3638
  tmp___0 = drbd_bm_bits(mdev);
#line 3638
  tmp___1 = drbd_bm_words(mdev);
#line 3638
  __constr_expr_0.bm_bits = tmp___0;
#line 3638
  __constr_expr_0.bm_words = tmp___1;
#line 3638
  __constr_expr_0.bit_offset = 0UL;
#line 3638
  __constr_expr_0.word_offset = 0UL;
#line 3638
  __constr_expr_0.packets[0] = 0U;
#line 3638
  __constr_expr_0.packets[1] = 0U;
#line 3638
  __constr_expr_0.bytes[0] = 0U;
#line 3638
  __constr_expr_0.bytes[1] = 0U;
#line 3638
  c = __constr_expr_0;
  ldv_52020: ;
#line 3644
  if ((unsigned int )cmd == 4U) {
#line 3645
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3646
  if ((unsigned int )cmd == 36U) {
#line 3651
    if (data_size > 4088U) {
#line 3652
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3653
      goto out;
    } else {

    }
#line 3656
    p = (struct p_compressed_bm *)buffer;
#line 3657
    __len = 8UL;
#line 3657
    if (__len > 63UL) {
#line 3657
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3657
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3658
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3658
    if ((unsigned int )tmp___2 != data_size) {
#line 3659
      goto out;
    } else {

    }
#line 3660
    if (data_size <= 1U) {
#line 3661
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3662
      goto out;
    } else {

    }
#line 3664
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3666
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3667
    goto out;
  }
#line 3670
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3671
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3673
  if (err <= 0) {
#line 3674
    if (err < 0) {
#line 3675
      goto out;
    } else {

    }
#line 3676
    goto ldv_52019;
  } else {

  }
#line 3678
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3678
  if (tmp___3 == 0) {
#line 3679
    goto out;
  } else {

  }
#line 3680
  goto ldv_52020;
  ldv_52019: 
#line 3682
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3684
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3687
    tmp___4 = drbd_send_bitmap(mdev);
#line 3687
    ok = tmp___4 == 0;
#line 3688
    if (ok == 0) {
#line 3689
      goto out;
    } else {

    }
#line 3691
    val.i = 0U;
#line 3691
    val.ldv_39162.conn = 15U;
#line 3691
    mask.i = 0U;
#line 3691
    mask.ldv_39162.conn = 31U;
#line 3691
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3692
    if ((int )rv != 1) {
#line 3692
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3692);
    } else {

    }
  } else
#line 3693
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3696
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39162.conn);
#line 3696
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3700
  ok = 1;
  out: 
#line 3702
  drbd_bm_unlock(mdev);
#line 3703
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3704
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3705
  free_pages((unsigned long )buffer, 0U);
#line 3706
  return (ok);
}
}
#line 3709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3715
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3718
  size = (int )data_size;
#line 3719
  goto ldv_52043;
  ldv_52042: 
#line 3720
  __min1 = size;
#line 3720
  __min2 = 128;
#line 3720
  want = __min1 < __min2 ? __min1 : __min2;
#line 3721
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3722
  _b = r <= 0;
#line 3722
  if (_b != 0) {
#line 3722
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3722);
  } else {

  }
#line 3722
  if (_b != 0) {
#line 3722
    goto ldv_52041;
  } else {

  }
#line 3723
  size = size - r;
  ldv_52043: ;
#line 3719
  if (size > 0) {
#line 3720
    goto ldv_52042;
  } else {

  }
  ldv_52041: ;
#line 3725
  return (size == 0);
}
}
#line 3728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3732
  drbd_tcp_quickack(mdev->data.socket);
#line 3734
  return (1);
}
}
#line 3737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3739
  p = & mdev->data.rbuf.block_desc;
#line 3741
  switch ((int )mdev->state.ldv_39162.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3745
  goto ldv_52058;
  default: 
#line 3747
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39162.conn);
#line 3747
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_52058: 
#line 3751
  tmp___0 = __fswab32(p->blksize);
#line 3751
  tmp___1 = __fswab64(p->sector);
#line 3751
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3751U);
#line 3753
  return (1);
}
}
#line 3764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3764
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3801
  header = & mdev->data.rbuf.header;
#line 3807
  goto ldv_52079;
  ldv_52078: 
#line 3808
  drbd_thread_current_set_cpu(mdev);
#line 3809
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3809
  if (tmp == 0) {
#line 3810
    goto err_out;
  } else {

  }
#line 3812
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3812
  if (tmp___0 != 0L) {
#line 3813
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3814
    goto err_out;
  } else {
#line 3812
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3812
    if (tmp___1 != 0L) {
#line 3813
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3814
      goto err_out;
    } else {

    }
  }
#line 3817
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3818
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3819
    tmp___2 = cmdname(cmd);
#line 3819
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3820
    goto err_out;
  } else {

  }
#line 3823
  if (shs != 0UL) {
#line 3824
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3825
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3825
    if (tmp___5 != 0L) {
#line 3826
      tmp___3 = get_current();
#line 3826
      tmp___4 = signal_pending(tmp___3);
#line 3826
      if (tmp___4 == 0) {
#line 3827
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3828
      goto err_out;
    } else {

    }
  } else {

  }
#line 3832
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3834
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3834
  if (tmp___7 != 0L) {
#line 3835
    tmp___6 = cmdname(cmd);
#line 3835
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3837
    goto err_out;
  } else {

  }
  ldv_52079: 
#line 3807
  tmp___8 = get_t_state(& mdev->receiver);
#line 3807
  if ((unsigned int )tmp___8 == 1U) {
#line 3808
    goto ldv_52078;
  } else {

  }

#line 3841
  if (0) {
    err_out: 
#line 3843
    val.i = 0U;
#line 3843
    val.ldv_39162.conn = 6U;
#line 3843
    mask.i = 0U;
#line 3843
    mask.ldv_39162.conn = 31U;
#line 3843
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3847
  drbd_md_sync(mdev);
#line 3848
  return;
}
}
#line 3850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3854
  barr.w.cb = & w_prev_work_done;
#line 3855
  init_completion(& barr.done);
#line 3856
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3857
  wait_for_completion(& barr.done);
#line 3858
  return;
}
}
#line 3860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;
  struct drbd_request *req ;
  struct hlist_node *pos ;
  struct hlist_node *n ;
  struct hlist_node  const  *__mptr ;

  {
#line 3864
  spin_lock_irq(& mdev->req_lock);
#line 3866
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3867
    spin_unlock_irq(& mdev->req_lock);
#line 3868
    return;
  } else {

  }
#line 3871
  h = mdev->ee_hash;
#line 3871
  goto ldv_52094;
  ldv_52093: ;
#line 3872
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3873
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3871
  h = h + 1;
  ldv_52094: ;
#line 3871
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3872
    goto ldv_52093;
  } else {

  }
#line 3875
  kfree((void const   *)mdev->ee_hash);
#line 3876
  mdev->ee_hash = 0;
#line 3877
  mdev->ee_hash_s = 0U;
#line 3882
  h = mdev->tl_hash;
#line 3882
  goto ldv_52107;
  ldv_52106: 
#line 3885
  pos = h->first;
#line 3885
  goto ldv_52104;
  ldv_52103: 
#line 3886
  hlist_del_init(& req->collision);
#line 3887
  hlist_add_fake(& req->collision);
#line 3885
  pos = n;
  ldv_52104: ;
#line 3885
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3885
    n = pos->next;
#line 3885
    if (1 != 0) {
#line 3885
      __mptr = (struct hlist_node  const  *)pos;
#line 3885
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3885
      if (1 != 0) {
#line 3886
        goto ldv_52103;
      } else {
#line 3888
        goto ldv_52105;
      }
    } else {
#line 3888
      goto ldv_52105;
    }
  } else {

  }
  ldv_52105: 
#line 3882
  h = h + 1;
  ldv_52107: ;
#line 3882
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3883
    goto ldv_52106;
  } else {

  }
#line 3891
  kfree((void const   *)mdev->tl_hash);
#line 3892
  mdev->tl_hash = 0;
#line 3893
  mdev->tl_hash_s = 0U;
#line 3894
  spin_unlock_irq(& mdev->req_lock);
#line 3895
  return;
}
}
#line 3897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3901
  rv = 0;
#line 3904
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3905
    return;
  } else {

  }
#line 3912
  val.i = 0U;
#line 3912
  val.ldv_39162.conn = 5U;
#line 3912
  mask.i = 0U;
#line 3912
  mask.ldv_39162.conn = 31U;
#line 3912
  drbd_force_state(mdev, mask, val);
#line 3915
  drbd_thread_stop(& mdev->asender);
#line 3916
  drbd_free_sock(mdev);
#line 3919
  spin_lock_irq(& mdev->req_lock);
#line 3920
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3921
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3922
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3923
  spin_unlock_irq(& mdev->req_lock);
#line 3935
  drbd_rs_cancel_all(mdev);
#line 3936
  mdev->rs_total = 0UL;
#line 3937
  mdev->rs_failed = 0UL;
#line 3938
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3939
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3942
  del_timer_sync(& mdev->resync_timer);
#line 3943
  resync_timer_fn((unsigned long )mdev);
#line 3948
  drbd_flush_workqueue(mdev);
#line 3952
  drbd_process_done_ee(mdev);
#line 3954
  kfree((void const   *)mdev->p_uuid);
#line 3955
  mdev->p_uuid = 0;
#line 3957
  tmp = is_susp(mdev->state);
#line 3957
  if (tmp == 0) {
#line 3958
    tl_clear(mdev);
  } else {

  }
#line 3960
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3962
  drbd_md_sync(mdev);
#line 3964
  fp = FP_DONT_CARE;
#line 3965
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3965
  if (tmp___0 != 0) {
#line 3966
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3967
    put_ldev(mdev);
  } else {

  }
#line 3970
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_39162.pdsk > 5) {
#line 3971
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3973
  spin_lock_irq(& mdev->req_lock);
#line 3974
  os = mdev->state;
#line 3975
  if ((int )os.ldv_39162.conn > 1) {
#line 3977
    ns = os;
#line 3978
    ns.ldv_39162.conn = 2U;
#line 3979
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3979
    rv = (int )tmp___1;
  } else {

  }
#line 3981
  spin_unlock_irq(& mdev->req_lock);
#line 3983
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3984
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3984
    if (tmp___2 == 0) {
#line 3984
      goto ldv_52121;
    } else {

    }
#line 3984
    tmp___3 = get_current();
#line 3984
    __wait.flags = 0U;
#line 3984
    __wait.private = (void *)tmp___3;
#line 3984
    __wait.func = & autoremove_wake_function;
#line 3984
    __wait.task_list.next = & __wait.task_list;
#line 3984
    __wait.task_list.prev = & __wait.task_list;
    ldv_52124: 
#line 3984
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3984
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3984
    if (tmp___4 == 0) {
#line 3984
      goto ldv_52123;
    } else {

    }
#line 3984
    schedule();
#line 3984
    goto ldv_52124;
    ldv_52123: 
#line 3984
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_52121: 
#line 3986
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3987
    mdev->cram_hmac_tfm = 0;
#line 3989
    kfree((void const   *)mdev->net_conf);
#line 3990
    mdev->net_conf = 0;
#line 3991
    val___0.i = 0U;
#line 3991
    val___0.ldv_39162.conn = 0U;
#line 3991
    mask___0.i = 0U;
#line 3991
    mask___0.ldv_39162.conn = 31U;
#line 3991
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3996
  tmp___5 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3996
  if (tmp___5 == 0) {
#line 3996
    goto ldv_52129;
  } else {

  }
#line 3996
  tmp___6 = get_current();
#line 3996
  __wait___0.flags = 0U;
#line 3996
  __wait___0.private = (void *)tmp___6;
#line 3996
  __wait___0.func = & autoremove_wake_function;
#line 3996
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3996
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_52132: 
#line 3996
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3996
  tmp___7 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 3996
  if (tmp___7 == 0) {
#line 3996
    goto ldv_52131;
  } else {

  }
#line 3996
  schedule();
#line 3996
  goto ldv_52132;
  ldv_52131: 
#line 3996
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_52129: 
#line 4005
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 4005
  i = (unsigned int )tmp___8;
#line 4006
  if (i != 0U) {
#line 4007
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 4008
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 4008
  i = (unsigned int )tmp___9;
#line 4009
  if (i != 0U) {
#line 4010
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 4011
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 4011
  i = (unsigned int )tmp___10;
#line 4012
  if (i != 0U) {
#line 4013
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 4015
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 4015
  if (tmp___11 == 0) {
#line 4015
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4015);
  } else {

  }
#line 4016
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 4016
  if (tmp___12 == 0) {
#line 4016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4016);
  } else {

  }
#line 4017
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 4017
  if (tmp___13 == 0) {
#line 4017
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4017);
  } else {

  }
#line 4018
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4018
  if (tmp___14 == 0) {
#line 4018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4018);
  } else {

  }
#line 4021
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 4022
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 4022
  if (tmp___15 == 0) {
#line 4022
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4022);
  } else {

  }
#line 4023
  return;
}
}
#line 4034 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 4037
  p = & mdev->data.sbuf.handshake;
#line 4040
  tmp = ldv_mutex_lock_interruptible_89(& mdev->data.mutex);
#line 4040
  if (tmp != 0) {
#line 4041
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4042
    return (0);
  } else {

  }
#line 4045
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4046
    ldv_mutex_unlock_90(& mdev->data.mutex);
#line 4047
    return (0);
  } else {

  }
#line 4050
  memset((void *)p, 0, 80UL);
#line 4051
  p->protocol_min = 1442840576U;
#line 4052
  p->protocol_max = 1610612736U;
#line 4053
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4055
  ldv_mutex_unlock_91(& mdev->data.mutex);
#line 4056
  return (ok);
}
}
#line 4066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4069
  p = & mdev->data.rbuf.handshake;
#line 4070
  expect = 72;
#line 4075
  rv = drbd_send_handshake(mdev);
#line 4076
  if (rv == 0) {
#line 4077
    return (0);
  } else {

  }
#line 4079
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4080
  if (rv == 0) {
#line 4081
    return (0);
  } else {

  }
#line 4083
  if ((unsigned int )cmd != 65534U) {
#line 4084
    tmp = cmdname(cmd);
#line 4084
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4086
    return (-1);
  } else {

  }
#line 4089
  if ((unsigned int )expect != length) {
#line 4090
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4092
    return (-1);
  } else {

  }
#line 4095
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4097
  if (rv != expect) {
#line 4098
    tmp___0 = get_current();
#line 4098
    tmp___1 = signal_pending(tmp___0);
#line 4098
    if (tmp___1 == 0) {
#line 4099
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4100
    return (0);
  } else {

  }
#line 4103
  tmp___2 = __fswab32(p->protocol_min);
#line 4103
  p->protocol_min = tmp___2;
#line 4104
  tmp___3 = __fswab32(p->protocol_max);
#line 4104
  p->protocol_max = tmp___3;
#line 4105
  if (p->protocol_max == 0U) {
#line 4106
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4108
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 4110
    goto incompat;
  } else {

  }
#line 4112
  __min1 = 96;
#line 4112
  __min2 = (int )p->protocol_max;
#line 4112
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4114
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4117
  return (1);
  incompat: 
#line 4120
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 4124
  return (-1);
}
}
#line 4143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4147
  response = 0;
#line 4148
  right_response = 0;
#line 4149
  peers_ch = 0;
#line 4150
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4150
  key_len = (unsigned int )tmp;
#line 4157
  desc.tfm = mdev->cram_hmac_tfm;
#line 4158
  desc.flags = 0U;
#line 4160
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4162
  if (rv != 0) {
#line 4163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4164
    rv = -1;
#line 4165
    goto fail;
  } else {

  }
#line 4168
  get_random_bytes((void *)(& my_challenge), 64);
#line 4170
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4171
  if (rv == 0) {
#line 4172
    goto fail;
  } else {

  }
#line 4174
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4175
  if (rv == 0) {
#line 4176
    goto fail;
  } else {

  }
#line 4178
  if ((unsigned int )cmd != 16U) {
#line 4179
    tmp___0 = cmdname(cmd);
#line 4179
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4181
    rv = 0;
#line 4182
    goto fail;
  } else {

  }
#line 4185
  if (length > 128U) {
#line 4186
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4187
    rv = -1;
#line 4188
    goto fail;
  } else {

  }
#line 4191
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4191
  peers_ch = (char *)tmp___1;
#line 4192
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4193
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4194
    rv = -1;
#line 4195
    goto fail;
  } else {

  }
#line 4198
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4200
  if ((unsigned int )rv != length) {
#line 4201
    tmp___2 = get_current();
#line 4201
    tmp___3 = signal_pending(tmp___2);
#line 4201
    if (tmp___3 == 0) {
#line 4202
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4203
    rv = 0;
#line 4204
    goto fail;
  } else {

  }
#line 4207
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4208
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4208
  response = (char *)tmp___4;
#line 4209
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4211
    rv = -1;
#line 4212
    goto fail;
  } else {

  }
#line 4215
  sg_init_table(& sg, 1U);
#line 4216
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4218
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4219
  if (rv != 0) {
#line 4220
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4221
    rv = -1;
#line 4222
    goto fail;
  } else {

  }
#line 4225
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4226
  if (rv == 0) {
#line 4227
    goto fail;
  } else {

  }
#line 4229
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4230
  if (rv == 0) {
#line 4231
    goto fail;
  } else {

  }
#line 4233
  if ((unsigned int )cmd != 17U) {
#line 4234
    tmp___5 = cmdname(cmd);
#line 4234
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4236
    rv = 0;
#line 4237
    goto fail;
  } else {

  }
#line 4240
  if (length != resp_size) {
#line 4241
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4242
    rv = 0;
#line 4243
    goto fail;
  } else {

  }
#line 4246
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4248
  if ((unsigned int )rv != resp_size) {
#line 4249
    tmp___6 = get_current();
#line 4249
    tmp___7 = signal_pending(tmp___6);
#line 4249
    if (tmp___7 == 0) {
#line 4250
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4251
    rv = 0;
#line 4252
    goto fail;
  } else {

  }
#line 4255
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4255
  right_response = (char *)tmp___8;
#line 4256
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4257
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4258
    rv = -1;
#line 4259
    goto fail;
  } else {

  }
#line 4262
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4264
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4265
  if (rv != 0) {
#line 4266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4267
    rv = -1;
#line 4268
    goto fail;
  } else {

  }
#line 4271
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4271
  rv = tmp___9 == 0;
#line 4273
  if (rv != 0) {
#line 4274
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4277
    rv = -1;
  }
  fail: 
#line 4280
  kfree((void const   *)peers_ch);
#line 4281
  kfree((void const   *)response);
#line 4282
  kfree((void const   *)right_response);
#line 4284
  return (rv);
}
}
#line 4288 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4290
  mdev = thi->mdev;
#line 4291
  tmp = mdev_to_minor(mdev);
#line 4291
  minor = tmp;
#line 4294
  tmp___0 = get_current();
#line 4294
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4296
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_52175: 
#line 4299
  h = drbd_connect(mdev);
#line 4300
  if (h == 0) {
#line 4301
    drbd_disconnect(mdev);
#line 4302
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4304
  if (h == -1) {
#line 4305
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4306
    val.i = 0U;
#line 4306
    val.ldv_39162.conn = 1U;
#line 4306
    mask.i = 0U;
#line 4306
    mask.ldv_39162.conn = 31U;
#line 4306
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4308
  if (h == 0) {
#line 4309
    goto ldv_52175;
  } else {

  }

#line 4310
  if (h > 0) {
#line 4311
    tmp___1 = get_net_conf(mdev);
#line 4311
    if (tmp___1 != 0) {
#line 4312
      drbdd(mdev);
#line 4313
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4317
  drbd_disconnect(mdev);
#line 4319
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4320
  return (0);
}
}
#line 4325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4327
  p = (struct p_req_state_reply *)h;
#line 4329
  tmp = __fswab32(p->retcode);
#line 4329
  retcode = (int )tmp;
#line 4331
  if (retcode > 0) {
#line 4332
    set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4334
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
#line 4335
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4335
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4338
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4340
  return (1);
}
}
#line 4343 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4345
  tmp = drbd_send_ping_ack(mdev);
#line 4345
  return (tmp);
}
}
#line 4349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4352
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4353
  tmp = test_and_set_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 4353
  if (tmp == 0) {
#line 4354
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4356
  return (1);
}
}
#line 4359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4361
  p = (struct p_block_ack *)h;
#line 4362
  tmp = __fswab64(p->sector);
#line 4362
  sector = (sector_t )tmp;
#line 4363
  tmp___0 = __fswab32(p->blksize);
#line 4363
  blksize = (int )tmp___0;
#line 4365
  if (mdev->agreed_pro_version <= 88) {
#line 4365
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4365);
  } else {

  }
#line 4367
  tmp___1 = __fswab32(p->seq_num);
#line 4367
  update_peer_seq(mdev, tmp___1);
#line 4369
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4369
  if (tmp___2 != 0) {
#line 4370
    drbd_rs_complete_io(mdev, sector);
#line 4371
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4371U);
#line 4373
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4374
    put_ldev(mdev);
  } else {

  }
#line 4376
  atomic_dec(& mdev->rs_pending_cnt);
#line 4376
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4376
  if (tmp___4 < 0) {
#line 4376
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4376
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4376, tmp___3);
  } else {

  }
#line 4377
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4379
  return (1);
}
}
#line 4384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4387
  tmp = tl_hash_slot(mdev, sector);
#line 4387
  slot = tmp;
#line 4391
  n = slot->first;
#line 4391
  goto ldv_52215;
  ldv_52214: ;
#line 4392
  if ((unsigned long )req == (unsigned long )id) {
#line 4393
    if (req->sector != sector) {
#line 4394
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4398
      goto ldv_52213;
    } else {

    }
#line 4400
    return (req);
  } else {

  }
#line 4391
  n = n->next;
  ldv_52215: ;
#line 4391
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4391
    __mptr = (struct hlist_node  const  *)n;
#line 4391
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4391
    if (1 != 0) {
#line 4392
      goto ldv_52214;
    } else {
#line 4394
      goto ldv_52213;
    }
  } else {

  }
  ldv_52213: ;
#line 4403
  return (0);
}
}
#line 4409 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4416
  spin_lock_irq(& mdev->req_lock);
#line 4417
  req = (*validator)(mdev, id, sector);
#line 4418
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4418
  if (tmp != 0L) {
#line 4419
    spin_unlock_irq(& mdev->req_lock);
#line 4421
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4423
    return (0);
  } else {

  }
#line 4425
  __req_mod(req, what, & m);
#line 4426
  spin_unlock_irq(& mdev->req_lock);
#line 4428
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4429
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4430
  return (1);
}
}
#line 4433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4435
  p = (struct p_block_ack *)h;
#line 4436
  tmp = __fswab64(p->sector);
#line 4436
  sector = (sector_t )tmp;
#line 4437
  tmp___0 = __fswab32(p->blksize);
#line 4437
  blksize = (int )tmp___0;
#line 4440
  tmp___1 = __fswab32(p->seq_num);
#line 4440
  update_peer_seq(mdev, tmp___1);
#line 4442
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4443
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4443U);
#line 4444
    atomic_dec(& mdev->rs_pending_cnt);
#line 4444
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4444
    if (tmp___3 < 0) {
#line 4444
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4444
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4444, tmp___2);
    } else {

    }
#line 4445
    return (1);
  } else {

  }
#line 4447
  tmp___4 = __fswab16((int )h->command);
#line 4447
  switch ((int )tmp___4) {
  case 23: ;
#line 4449
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4449
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4449);
  } else {

  }
#line 4450
  what = write_acked_by_peer_and_sis;
#line 4451
  goto ldv_52243;
  case 22: ;
#line 4453
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4453
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4453);
  } else {

  }
#line 4454
  what = write_acked_by_peer;
#line 4455
  goto ldv_52243;
  case 21: ;
#line 4457
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4457
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4457);
  } else {

  }
#line 4458
  what = recv_acked_by_peer;
#line 4459
  goto ldv_52243;
  case 24: ;
#line 4461
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4461
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4461);
  } else {

  }
#line 4462
  what = conflict_discarded_by_peer;
#line 4463
  goto ldv_52243;
  default: 
#line 4465
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4465);
#line 4466
  return (0);
  }
  ldv_52243: 
#line 4469
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4469
  return (tmp___5);
}
}
#line 4473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4475
  p = (struct p_block_ack *)h;
#line 4476
  tmp = __fswab64(p->sector);
#line 4476
  sector = (sector_t )tmp;
#line 4477
  tmp___0 = __fswab32(p->blksize);
#line 4477
  size = (int )tmp___0;
#line 4481
  tmp___1 = __fswab32(p->seq_num);
#line 4481
  update_peer_seq(mdev, tmp___1);
#line 4483
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4484
    atomic_dec(& mdev->rs_pending_cnt);
#line 4484
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4484
    if (tmp___3 < 0) {
#line 4484
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4484
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4484, tmp___2);
    } else {

    }
#line 4485
    drbd_rs_failed_io(mdev, sector, size);
#line 4486
    return (1);
  } else {

  }
#line 4489
  spin_lock_irq(& mdev->req_lock);
#line 4490
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4491
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4492
    spin_unlock_irq(& mdev->req_lock);
#line 4493
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4501
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4501U);
#line 4502
      return (1);
    } else {
#line 4504
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4506
      return (0);
    }
  } else {

  }
#line 4509
  __req_mod(req, neg_acked, & m);
#line 4510
  spin_unlock_irq(& mdev->req_lock);
#line 4512
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4513
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4514
  return (1);
}
}
#line 4517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4519
  p = (struct p_block_ack *)h;
#line 4520
  tmp = __fswab64(p->sector);
#line 4520
  sector = (sector_t )tmp;
#line 4522
  tmp___0 = __fswab32(p->seq_num);
#line 4522
  update_peer_seq(mdev, tmp___0);
#line 4523
  tmp___1 = __fswab32(p->blksize);
#line 4523
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4526
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4526
  return (tmp___2);
}
}
#line 4530 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4534
  p = (struct p_block_ack *)h;
#line 4536
  tmp = __fswab64(p->sector);
#line 4536
  sector = (sector_t )tmp;
#line 4537
  tmp___0 = __fswab32(p->blksize);
#line 4537
  size = (int )tmp___0;
#line 4539
  tmp___1 = __fswab32(p->seq_num);
#line 4539
  update_peer_seq(mdev, tmp___1);
#line 4541
  atomic_dec(& mdev->rs_pending_cnt);
#line 4541
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4541
  if (tmp___3 < 0) {
#line 4541
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4541, tmp___2);
  } else {

  }
#line 4543
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4543
  if (tmp___5 != 0) {
#line 4544
    drbd_rs_complete_io(mdev, sector);
#line 4545
    tmp___4 = __fswab16((int )h->command);
#line 4545
    switch ((int )tmp___4) {
    case 27: 
#line 4547
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4549
    goto ldv_52281;
    default: 
#line 4551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4551);
#line 4552
    put_ldev(mdev);
#line 4553
    return (0);
    }
    ldv_52281: 
#line 4555
    put_ldev(mdev);
  } else {

  }
#line 4558
  return (1);
}
}
#line 4561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4563
  p = (struct p_barrier_ack *)h;
#line 4565
  tmp = __fswab32(p->set_size);
#line 4565
  tl_release(mdev, p->barrier, tmp);
#line 4567
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4567
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4567
    if (tmp___0 == 0) {
#line 4567
      tmp___1 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 4567
      if (tmp___1 == 0) {
#line 4570
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4571
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4574
  return (1);
}
}
#line 4577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4579
  p = (struct p_block_ack *)h;
#line 4584
  tmp = __fswab64(p->sector);
#line 4584
  sector = (sector_t )tmp;
#line 4585
  tmp___0 = __fswab32(p->blksize);
#line 4585
  size = (int )tmp___0;
#line 4587
  tmp___1 = __fswab32(p->seq_num);
#line 4587
  update_peer_seq(mdev, tmp___1);
#line 4589
  tmp___2 = __fswab64(p->block_id);
#line 4589
  if (tmp___2 == 4712ULL) {
#line 4590
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4592
    ov_oos_print(mdev);
  }
#line 4594
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4594
  if (tmp___3 == 0) {
#line 4595
    return (1);
  } else {

  }
#line 4597
  drbd_rs_complete_io(mdev, sector);
#line 4598
  atomic_dec(& mdev->rs_pending_cnt);
#line 4598
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4598
  if (tmp___5 < 0) {
#line 4598
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4598
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4598, tmp___4);
  } else {

  }
#line 4600
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4603
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4604
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4606
  if (mdev->ov_left == 0UL) {
#line 4607
    tmp___6 = kmalloc(24UL, 16U);
#line 4607
    w = (struct drbd_work *)tmp___6;
#line 4608
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4609
      w->cb = & w_ov_finished;
#line 4610
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4612
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4613
      ov_oos_print(mdev);
#line 4614
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4617
  put_ldev(mdev);
#line 4618
  return (1);
}
}
#line 4621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4623
  return (1);
}
}
#line 4631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4633
  asender_tbl[0].pkt_size = 0UL;
#line 4633
  asender_tbl[0].process = 0;
#line 4633
  asender_tbl[1].pkt_size = 0UL;
#line 4633
  asender_tbl[1].process = 0;
#line 4633
  asender_tbl[2].pkt_size = 0UL;
#line 4633
  asender_tbl[2].process = 0;
#line 4633
  asender_tbl[3].pkt_size = 0UL;
#line 4633
  asender_tbl[3].process = 0;
#line 4633
  asender_tbl[4].pkt_size = 0UL;
#line 4633
  asender_tbl[4].process = 0;
#line 4633
  asender_tbl[5].pkt_size = 0UL;
#line 4633
  asender_tbl[5].process = 0;
#line 4633
  asender_tbl[6].pkt_size = 0UL;
#line 4633
  asender_tbl[6].process = 0;
#line 4633
  asender_tbl[7].pkt_size = 0UL;
#line 4633
  asender_tbl[7].process = 0;
#line 4633
  asender_tbl[8].pkt_size = 0UL;
#line 4633
  asender_tbl[8].process = 0;
#line 4633
  asender_tbl[9].pkt_size = 0UL;
#line 4633
  asender_tbl[9].process = 0;
#line 4633
  asender_tbl[10].pkt_size = 0UL;
#line 4633
  asender_tbl[10].process = 0;
#line 4633
  asender_tbl[11].pkt_size = 0UL;
#line 4633
  asender_tbl[11].process = 0;
#line 4633
  asender_tbl[12].pkt_size = 0UL;
#line 4633
  asender_tbl[12].process = 0;
#line 4633
  asender_tbl[13].pkt_size = 0UL;
#line 4633
  asender_tbl[13].process = 0;
#line 4633
  asender_tbl[14].pkt_size = 0UL;
#line 4633
  asender_tbl[14].process = 0;
#line 4633
  asender_tbl[15].pkt_size = 0UL;
#line 4633
  asender_tbl[15].process = 0;
#line 4633
  asender_tbl[16].pkt_size = 0UL;
#line 4633
  asender_tbl[16].process = 0;
#line 4633
  asender_tbl[17].pkt_size = 0UL;
#line 4633
  asender_tbl[17].process = 0;
#line 4633
  asender_tbl[18].pkt_size = 0UL;
#line 4633
  asender_tbl[18].process = 0;
#line 4633
  asender_tbl[19].pkt_size = 8UL;
#line 4633
  asender_tbl[19].process = & got_Ping;
#line 4633
  asender_tbl[20].pkt_size = 8UL;
#line 4633
  asender_tbl[20].process = & got_PingAck;
#line 4633
  asender_tbl[21].pkt_size = 32UL;
#line 4633
  asender_tbl[21].process = & got_BlockAck;
#line 4633
  asender_tbl[22].pkt_size = 32UL;
#line 4633
  asender_tbl[22].process = & got_BlockAck;
#line 4633
  asender_tbl[23].pkt_size = 32UL;
#line 4633
  asender_tbl[23].process = & got_BlockAck;
#line 4633
  asender_tbl[24].pkt_size = 32UL;
#line 4633
  asender_tbl[24].process = & got_BlockAck;
#line 4633
  asender_tbl[25].pkt_size = 32UL;
#line 4633
  asender_tbl[25].process = & got_NegAck;
#line 4633
  asender_tbl[26].pkt_size = 32UL;
#line 4633
  asender_tbl[26].process = & got_NegDReply;
#line 4633
  asender_tbl[27].pkt_size = 32UL;
#line 4633
  asender_tbl[27].process = & got_NegRSDReply;
#line 4633
  asender_tbl[28].pkt_size = 16UL;
#line 4633
  asender_tbl[28].process = & got_BarrierAck;
#line 4633
  asender_tbl[29].pkt_size = 12UL;
#line 4633
  asender_tbl[29].process = & got_RqSReply;
#line 4633
  asender_tbl[30].pkt_size = 0UL;
#line 4633
  asender_tbl[30].process = 0;
#line 4633
  asender_tbl[31].pkt_size = 0UL;
#line 4633
  asender_tbl[31].process = 0;
#line 4633
  asender_tbl[32].pkt_size = 32UL;
#line 4633
  asender_tbl[32].process = & got_OVResult;
#line 4633
  asender_tbl[33].pkt_size = 0UL;
#line 4633
  asender_tbl[33].process = 0;
#line 4633
  asender_tbl[34].pkt_size = 32UL;
#line 4633
  asender_tbl[34].process = & got_IsInSync;
#line 4633
  asender_tbl[35].pkt_size = 0UL;
#line 4633
  asender_tbl[35].process = 0;
#line 4633
  asender_tbl[36].pkt_size = 0UL;
#line 4633
  asender_tbl[36].process = 0;
#line 4633
  asender_tbl[37].pkt_size = 0UL;
#line 4633
  asender_tbl[37].process = 0;
#line 4633
  asender_tbl[38].pkt_size = 0UL;
#line 4633
  asender_tbl[38].process = 0;
#line 4633
  asender_tbl[39].pkt_size = 16UL;
#line 4633
  asender_tbl[39].process = & got_skip;
#line 4633
  asender_tbl[40].pkt_size = 0UL;
#line 4633
  asender_tbl[40].process = 0;
#line 4633
  asender_tbl[41].pkt_size = 32UL;
#line 4633
  asender_tbl[41].process = & got_NegRSDReply;
#line 4633
  asender_tbl[42].pkt_size = 0UL;
#line 4633
  asender_tbl[42].process = 0;
#line 4654
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4655
    return (0);
  } else {

  }
#line 4656
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4661
  mdev = thi->mdev;
#line 4662
  h = & mdev->meta.rbuf.header.h80;
#line 4663
  cmd = 0;
#line 4666
  buf = (void *)h;
#line 4667
  received = 0;
#line 4668
  expect = 8;
#line 4670
  ping_timeout_active = 0;
#line 4672
  tmp = mdev_to_minor(mdev);
#line 4672
  tmp___0 = get_current();
#line 4672
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4674
  tmp___1 = get_current();
#line 4674
  tmp___1->policy = 2U;
#line 4675
  tmp___2 = get_current();
#line 4675
  tmp___2->rt_priority = 2U;
#line 4677
  goto ldv_52332;
  ldv_52342: 
#line 4678
  drbd_thread_current_set_cpu(mdev);
#line 4679
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4679
  if (tmp___4 != 0) {
#line 4680
    tmp___3 = drbd_send_ping(mdev);
#line 4680
    _b = tmp___3 == 0;
#line 4680
    if (_b != 0) {
#line 4680
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4680);
    } else {

    }
#line 4680
    if (_b != 0) {
#line 4680
      goto reconnect;
    } else {

    }
#line 4681
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4683
    ping_timeout_active = 1;
  } else {

  }
#line 4688
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4688
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4688
    if (tmp___5 > 3) {
#line 4690
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_52331: 
#line 4692
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4693
  tmp___6 = get_current();
#line 4693
  flush_signals(tmp___6);
#line 4694
  tmp___7 = drbd_process_done_ee(mdev);
#line 4694
  if (tmp___7 == 0) {
#line 4695
    goto reconnect;
  } else {

  }
#line 4697
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4698
  spin_lock_irq(& mdev->req_lock);
#line 4699
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4700
  spin_unlock_irq(& mdev->req_lock);
#line 4704
  if (empty != 0) {
#line 4705
    goto ldv_52330;
  } else {

  }
#line 4706
  goto ldv_52331;
  ldv_52330: ;
#line 4708
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4709
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4712
  tmp___8 = get_current();
#line 4712
  tmp___9 = signal_pending(tmp___8);
#line 4712
  if (tmp___9 != 0) {
#line 4713
    goto ldv_52332;
  } else {

  }
#line 4715
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4717
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4719
  tmp___10 = get_current();
#line 4719
  flush_signals(tmp___10);
#line 4731
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4731
  if (tmp___11 != 0L) {
#line 4732
    received = received + rv;
#line 4733
    buf = buf + (unsigned long )rv;
  } else
#line 4734
  if (rv == 0) {
#line 4735
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4736
    goto reconnect;
  } else
#line 4737
  if (rv == -11) {
#line 4740
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4742
      goto ldv_52332;
    } else {

    }
#line 4743
    if (ping_timeout_active != 0) {
#line 4744
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4745
      goto reconnect;
    } else {

    }
#line 4747
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4748
    goto ldv_52332;
  } else
#line 4749
  if (rv == -4) {
#line 4750
    goto ldv_52332;
  } else {
#line 4752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4753
    goto reconnect;
  }
#line 4756
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4757
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4757
    if (tmp___15 != 0L) {
#line 4758
      tmp___12 = __fswab16((int )h->length);
#line 4758
      tmp___13 = __fswab16((int )h->command);
#line 4758
      tmp___14 = __fswab32(h->magic);
#line 4758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4762
      goto reconnect;
    } else {

    }
#line 4764
    tmp___16 = __fswab16((int )h->command);
#line 4764
    cmd = get_asender_cmd((int )tmp___16);
#line 4765
    tmp___17 = __fswab16((int )h->length);
#line 4765
    len = (int )tmp___17;
#line 4766
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4766
    if (tmp___21 != 0L) {
#line 4767
      tmp___18 = __fswab16((int )h->length);
#line 4767
      tmp___19 = __fswab16((int )h->command);
#line 4767
      tmp___20 = __fswab32(h->magic);
#line 4767
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4771
      goto disconnect;
    } else {

    }
#line 4773
    expect = (int )cmd->pkt_size;
#line 4774
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4774
    if (_b___0 != 0) {
#line 4774
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4774);
    } else {

    }
#line 4774
    if (_b___0 != 0) {
#line 4775
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4777
  if (received == expect) {
#line 4778
    mdev->last_received = jiffies;
#line 4779
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4779
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4779);
    } else {

    }
#line 4780
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4780
    if (tmp___22 == 0) {
#line 4781
      goto reconnect;
    } else {

    }
#line 4785
    tmp___23 = get_asender_cmd(20);
#line 4785
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4786
      ping_timeout_active = 0;
    } else {

    }
#line 4788
    buf = (void *)h;
#line 4789
    received = 0;
#line 4790
    expect = 8;
#line 4791
    cmd = 0;
  } else {

  }
  ldv_52332: 
#line 4677
  tmp___24 = get_t_state(thi);
#line 4677
  if ((unsigned int )tmp___24 == 1U) {
#line 4678
    goto ldv_52342;
  } else {

  }

#line 4795
  if (0) {
    reconnect: 
#line 4797
    val.i = 0U;
#line 4797
    val.ldv_39162.conn = 5U;
#line 4797
    mask.i = 0U;
#line 4797
    mask.ldv_39162.conn = 31U;
#line 4797
    drbd_force_state(mdev, mask, val);
#line 4798
    drbd_md_sync(mdev);
  } else {

  }
#line 4800
  if (0) {
    disconnect: 
#line 4802
    val___0.i = 0U;
#line 4802
    val___0.ldv_39162.conn = 1U;
#line 4802
    mask___0.i = 0U;
#line 4802
    mask___0.ldv_39162.conn = 31U;
#line 4802
    drbd_force_state(mdev, mask___0, val___0);
#line 4803
    drbd_md_sync(mdev);
  } else {

  }
#line 4805
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4807
  if ((int )mdev->state.ldv_39162.conn > 9) {
#line 4807
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4807);
  } else {

  }
#line 4808
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4810
  return (0);
}
}
#line 4850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4862
  LDV_IN_INTERRUPT = 1;
#line 4871
  ldv_initialize();
#line 4873
  goto ldv_52371;
  ldv_52370: 
#line 4876
  tmp = nondet_int();
#line 4876
  switch (tmp) {
  default: ;
#line 4878
  goto ldv_52369;
  }
  ldv_52369: ;
  ldv_52371: 
#line 4873
  tmp___0 = nondet_int();
#line 4873
  if (tmp___0 != 0) {
#line 4874
    goto ldv_52370;
  } else {

  }


#line 4887
  ldv_check_final_state();
#line 4890
  return;
}
}
#line 4894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_79(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4899
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 4901
  mutex_lock(ldv_func_arg1);
#line 4902
  return;
}
}
#line 4904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4909
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 4911
  mutex_unlock(ldv_func_arg1);
#line 4912
  return;
}
}
#line 4914 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4919
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4921
  mutex_lock(ldv_func_arg1);
#line 4922
  return;
}
}
#line 4924 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_82(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4929
  tmp = mutex_trylock(ldv_func_arg1);
#line 4929
  ldv_func_res = tmp;
#line 4931
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4931
  return (tmp___0);
#line 4933
  return (ldv_func_res);
}
}
#line 4936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_83(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4941
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4943
  mutex_unlock(ldv_func_arg1);
#line 4944
  return;
}
}
#line 4946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_84(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4951
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4953
  mutex_lock(ldv_func_arg1);
#line 4954
  return;
}
}
#line 4956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_85(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4961
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 4963
  mutex_unlock(ldv_func_arg1);
#line 4964
  return;
}
}
#line 4966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_86(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4971
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4973
  mutex_lock(ldv_func_arg1);
#line 4974
  return;
}
}
#line 4976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_87(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4981
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4983
  mutex_unlock(ldv_func_arg1);
#line 4984
  return;
}
}
#line 4986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4991
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 4993
  mutex_unlock(ldv_func_arg1);
#line 4994
  return;
}
}
#line 4996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_89(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___9 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 5001
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 5001
  ldv_func_res = tmp;
#line 5003
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 5003
  return (tmp___0);
#line 5005
  return (ldv_func_res);
}
}
#line 5008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5013
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5015
  mutex_unlock(ldv_func_arg1);
#line 5016
  return;
}
}
#line 5018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_91(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5023
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5025
  mutex_unlock(ldv_func_arg1);
#line 5026
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_108(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_114(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_107(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_112(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6257;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6257;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6257;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6257;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6257: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 163 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 165
  tmp = current_thread_info___1();
#line 165
  tmp->preempt_count = tmp->preempt_count + 1;
#line 165
  __asm__  volatile   ("": : : "memory");
#line 166
  return;
}
}
#line 168 "include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 170
  __asm__  volatile   ("": : : "memory");
#line 170
  tmp = current_thread_info___1();
#line 170
  tmp->preempt_count = tmp->preempt_count + -1;
#line 170
  __asm__  volatile   ("": : : "memory");
#line 171
  return;
}
}
#line 260
extern int rcu_is_cpu_idle(void) ;
#line 274 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 276
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 278
  return;
}
}
#line 279 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 281
  lock_release(map, 1, (unsigned long )((void *)0));
#line 283
  return;
}
}
#line 284
extern struct lockdep_map rcu_lock_map ;
#line 287
extern int debug_lockdep_rcu_enabled(void) ;
#line 719 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 721
  __rcu_read_lock();
#line 723
  rcu_lock_acquire(& rcu_lock_map);
#line 724
  tmp = debug_lockdep_rcu_enabled();
#line 724
  if (tmp != 0 && ! __warned) {
#line 724
    tmp___0 = rcu_is_cpu_idle();
#line 724
    if (tmp___0 != 0) {
#line 724
      __warned = 1;
#line 724
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 725, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 727
  return;
}
}
#line 743 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 745
  tmp = debug_lockdep_rcu_enabled();
#line 745
  if (tmp != 0 && ! __warned) {
#line 745
    tmp___0 = rcu_is_cpu_idle();
#line 745
    if (tmp___0 != 0) {
#line 745
      __warned = 1;
#line 745
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 746, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 747
  rcu_lock_release(& rcu_lock_map);
#line 749
  __rcu_read_unlock();
#line 750
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 201 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 203
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 203
  if (tmp != 0L) {
#line 204
    if (part->partno != 0) {
#line 205
      __mptr = (struct device  const  *)part->__dev.parent;
#line 205
      return ((struct gendisk *)__mptr + 0xffffffffffffff90UL);
    } else {
#line 207
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 207
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff90UL);
    }
  } else {

  }
#line 209
  return (0);
}
}
#line 373 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 375
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 376
  if (part->partno != 0) {
#line 377
    tmp = part_to_disk(part);
#line 377
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 378
  return;
}
}
#line 380 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 382
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 383
  if (part->partno != 0) {
#line 384
    tmp = part_to_disk(part);
#line 384
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 385
  return;
}
}
#line 406
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 209 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 210
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1230
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1503
mempool_t *drbd_request_mempool ;
#line 1546
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1548
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1861
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1863
  if ((unsigned int )forcedetach == 0U) {
#line 1864
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1864
    if (tmp != 0) {
#line 1865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1866
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1867
      __ns.i = mdev->state.i;
#line 1867
      __ns.ldv_39162.disk = 4U;
#line 1867
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1868
    goto ldv_50042;
  } else {

  }
  case 2: ;
  case 1: 
#line 1873
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1874
  if ((unsigned int )forcedetach == 2U) {
#line 1875
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1876
  if ((int )mdev->state.ldv_39162.disk > 2) {
#line 1877
    __ns___0.i = mdev->state.i;
#line 1877
    __ns___0.ldv_39162.disk = 2U;
#line 1877
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1881
  goto ldv_50042;
  }
  ldv_50042: ;
#line 1884
  return;
}
}
#line 2102 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2104
  atomic_inc(& mdev->ap_pending_cnt);
#line 2105
  return;
}
}
#line 2282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2284
  mxb = 1000000;
#line 2285
  tmp = get_net_conf(mdev);
#line 2285
  if (tmp != 0) {
#line 2286
    mxb = (mdev->net_conf)->max_buffers;
#line 2287
    put_net_conf(mdev);
  } else {

  }
#line 2289
  return (mxb);
}
}
#line 2292 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2294
  s = mdev->state;
#line 2299
  switch ((unsigned int )s.ldv_39162.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2324
  goto ldv_50214;
  case 13U: ;
#line 2328
  if (mdev->agreed_pro_version <= 95) {
#line 2329
    return (0);
  } else {

  }
#line 2330
  goto ldv_50214;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2337
  return (0);
  }
  ldv_50214: ;
#line 2340
  switch ((unsigned int )s.ldv_39162.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2348
  goto ldv_50225;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2356
  return (0);
  }
  ldv_50225: ;
#line 2359
  return (1);
}
}
#line 2367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2369
  tmp = drbd_get_max_buffers(mdev);
#line 2369
  mxb = tmp;
#line 2371
  tmp___0 = is_susp(mdev->state);
#line 2371
  if (tmp___0 != 0) {
#line 2372
    return (0);
  } else {

  }
#line 2373
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2373
  if (tmp___1 != 0) {
#line 2374
    return (0);
  } else {

  }
#line 2381
  tmp___2 = drbd_state_is_stable(mdev);
#line 2381
  if (tmp___2 == 0) {
#line 2382
    return (0);
  } else {

  }
#line 2386
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2386
  if (tmp___3 > mxb) {
#line 2387
    return (0);
  } else {

  }
#line 2388
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2388
  if (tmp___4 != 0) {
#line 2389
    return (0);
  } else {

  }
#line 2390
  return (1);
}
}
#line 2393 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2395
  rv = 0;
#line 2397
  spin_lock_irq(& mdev->req_lock);
#line 2398
  rv = may_inc_ap_bio(mdev);
#line 2399
  if ((int )rv) {
#line 2400
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2401
  spin_unlock_irq(& mdev->req_lock);
#line 2403
  return (rv);
}
}
#line 2406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2416
  tmp = inc_ap_bio_cond(mdev, count);
#line 2416
  if ((int )tmp) {
#line 2416
    goto ldv_50246;
  } else {

  }
#line 2416
  tmp___0 = get_current();
#line 2416
  __wait.flags = 0U;
#line 2416
  __wait.private = (void *)tmp___0;
#line 2416
  __wait.func = & autoremove_wake_function;
#line 2416
  __wait.task_list.next = & __wait.task_list;
#line 2416
  __wait.task_list.prev = & __wait.task_list;
  ldv_50249: 
#line 2416
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2416
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2416
  if ((int )tmp___1) {
#line 2416
    goto ldv_50248;
  } else {

  }
#line 2416
  schedule();
#line 2416
  goto ldv_50249;
  ldv_50248: 
#line 2416
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50246: ;
#line 2419
  return;
}
}
#line 2419 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2421
  tmp = drbd_get_max_buffers(mdev);
#line 2421
  mxb = tmp;
#line 2422
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2422
  ap_bio = tmp___0;
#line 2424
  if (ap_bio < 0) {
#line 2424
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2424);
  } else {

  }
#line 2426
  if (ap_bio == 0) {
#line 2426
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2426
    if (tmp___2 != 0) {
#line 2427
      tmp___1 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 2427
      if (tmp___1 == 0) {
#line 2428
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2434
  if (ap_bio < mxb) {
#line 2435
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2436
  return;
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_50359: ;
#line 234
    goto ldv_50359;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_50364: ;
#line 243
    goto ldv_50364;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 288
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 288
  req = (struct drbd_request *)tmp;
#line 290
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 290
  if (tmp___0 != 0L) {
#line 291
    drbd_req_make_private_bio(req, bio_src);
#line 293
    req->rq_state = (int )bio_src->bi_rw & 1 ? 2048UL : 0UL;
#line 294
    req->mdev = mdev;
#line 295
    req->master_bio = bio_src;
#line 296
    req->epoch = 0U;
#line 297
    req->sector = bio_src->bi_sector;
#line 298
    req->size = bio_src->bi_size;
#line 299
    INIT_HLIST_NODE(& req->collision);
#line 300
    INIT_LIST_HEAD(& req->tl_requests);
#line 301
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 303
  return (req);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 308
  mempool_free((void *)req, drbd_request_mempool);
#line 309
  return;
}
}
#line 324
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 330
void request_timer_fn(unsigned long data ) ;
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 373
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_39162.pdsk > 3 && (int )s.ldv_39162.conn > 13) && (int )s.ldv_39162.conn <= 21)));
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 383
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 100
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 102
  rcu_read_lock();
#line 102
  tmp = current_thread_info___1();
#line 102
  tmp->preempt_count = tmp->preempt_count + 1;
#line 102
  __asm__  volatile   ("": : : "memory");
#line 102
  __vpp_verify = 0;
#line 102
  switch (4UL) {
  case 1UL: ;
#line 102
  switch (4UL) {
  case 1UL: 
#line 102
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50456;
  case 2UL: 
#line 102
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50456;
  case 4UL: 
#line 102
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50456;
  case 8UL: 
#line 102
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 102
  goto ldv_50456;
  default: 
#line 102
  __bad_percpu_size();
  }
  ldv_50456: 
#line 102
  pscr_ret__ = pfo_ret__;
#line 102
  goto ldv_50462;
  case 2UL: ;
#line 102
  switch (4UL) {
  case 1UL: 
#line 102
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 102
  goto ldv_50466;
  case 2UL: 
#line 102
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 102
  goto ldv_50466;
  case 4UL: 
#line 102
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 102
  goto ldv_50466;
  case 8UL: 
#line 102
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 102
  goto ldv_50466;
  default: 
#line 102
  __bad_percpu_size();
  }
  ldv_50466: 
#line 102
  pscr_ret__ = pfo_ret_____0;
#line 102
  goto ldv_50462;
  case 4UL: ;
#line 102
  switch (4UL) {
  case 1UL: 
#line 102
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 102
  goto ldv_50475;
  case 2UL: 
#line 102
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 102
  goto ldv_50475;
  case 4UL: 
#line 102
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 102
  goto ldv_50475;
  case 8UL: 
#line 102
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 102
  goto ldv_50475;
  default: 
#line 102
  __bad_percpu_size();
  }
  ldv_50475: 
#line 102
  pscr_ret__ = pfo_ret_____1;
#line 102
  goto ldv_50462;
  case 8UL: ;
#line 102
  switch (4UL) {
  case 1UL: 
#line 102
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 102
  goto ldv_50484;
  case 2UL: 
#line 102
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 102
  goto ldv_50484;
  case 4UL: 
#line 102
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 102
  goto ldv_50484;
  case 8UL: 
#line 102
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 102
  goto ldv_50484;
  default: 
#line 102
  __bad_percpu_size();
  }
  ldv_50484: 
#line 102
  pscr_ret__ = pfo_ret_____2;
#line 102
  goto ldv_50462;
  default: 
#line 102
  __bad_size_call_parameter();
#line 102
  goto ldv_50462;
  }
  ldv_50462: 
#line 102
  cpu = pscr_ret__;
#line 103
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 104
  __vpp_verify___0 = 0;
#line 104
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 104
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 104
  if ((mdev->vdisk)->part0.partno != 0) {
#line 104
    __vpp_verify___1 = 0;
#line 104
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 104
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 104
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 105
  __vpp_verify___2 = 0;
#line 105
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 105
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 105
  if ((mdev->vdisk)->part0.partno != 0) {
#line 105
    __vpp_verify___3 = 0;
#line 105
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 105
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 105
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 106
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 107
  __asm__  volatile   ("": : : "memory");
#line 107
  tmp___2 = current_thread_info___1();
#line 107
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 107
  __asm__  volatile   ("": : : "memory");
#line 107
  rcu_read_unlock();
#line 108
  return;
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 113
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 114
  duration = (unsigned long )jiffies - req->start_time;
#line 116
  rcu_read_lock();
#line 116
  tmp = current_thread_info___1();
#line 116
  tmp->preempt_count = tmp->preempt_count + 1;
#line 116
  __asm__  volatile   ("": : : "memory");
#line 116
  __vpp_verify = 0;
#line 116
  switch (4UL) {
  case 1UL: ;
#line 116
  switch (4UL) {
  case 1UL: 
#line 116
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 116
  goto ldv_50522;
  case 2UL: 
#line 116
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 116
  goto ldv_50522;
  case 4UL: 
#line 116
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 116
  goto ldv_50522;
  case 8UL: 
#line 116
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 116
  goto ldv_50522;
  default: 
#line 116
  __bad_percpu_size();
  }
  ldv_50522: 
#line 116
  pscr_ret__ = pfo_ret__;
#line 116
  goto ldv_50528;
  case 2UL: ;
#line 116
  switch (4UL) {
  case 1UL: 
#line 116
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 116
  goto ldv_50532;
  case 2UL: 
#line 116
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 116
  goto ldv_50532;
  case 4UL: 
#line 116
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 116
  goto ldv_50532;
  case 8UL: 
#line 116
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 116
  goto ldv_50532;
  default: 
#line 116
  __bad_percpu_size();
  }
  ldv_50532: 
#line 116
  pscr_ret__ = pfo_ret_____0;
#line 116
  goto ldv_50528;
  case 4UL: ;
#line 116
  switch (4UL) {
  case 1UL: 
#line 116
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 116
  goto ldv_50541;
  case 2UL: 
#line 116
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 116
  goto ldv_50541;
  case 4UL: 
#line 116
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 116
  goto ldv_50541;
  case 8UL: 
#line 116
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 116
  goto ldv_50541;
  default: 
#line 116
  __bad_percpu_size();
  }
  ldv_50541: 
#line 116
  pscr_ret__ = pfo_ret_____1;
#line 116
  goto ldv_50528;
  case 8UL: ;
#line 116
  switch (4UL) {
  case 1UL: 
#line 116
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 116
  goto ldv_50550;
  case 2UL: 
#line 116
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 116
  goto ldv_50550;
  case 4UL: 
#line 116
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 116
  goto ldv_50550;
  case 8UL: 
#line 116
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 116
  goto ldv_50550;
  default: 
#line 116
  __bad_percpu_size();
  }
  ldv_50550: 
#line 116
  pscr_ret__ = pfo_ret_____2;
#line 116
  goto ldv_50528;
  default: 
#line 116
  __bad_size_call_parameter();
#line 116
  goto ldv_50528;
  }
  ldv_50528: 
#line 116
  cpu = pscr_ret__;
#line 117
  __vpp_verify___0 = 0;
#line 117
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 117
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 117
  if ((mdev->vdisk)->part0.partno != 0) {
#line 117
    __vpp_verify___1 = 0;
#line 117
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 117
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 117
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 118
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 119
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 120
  __asm__  volatile   ("": : : "memory");
#line 120
  tmp___1 = current_thread_info___1();
#line 120
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 120
  __asm__  volatile   ("": : : "memory");
#line 120
  rcu_read_unlock();
#line 121
  return;
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 125
  s = req->rq_state;
#line 133
  list_del(& req->tl_requests);
#line 138
  if ((int )rw == 1) {
#line 143
    if ((s & 256UL) == 0UL || (s & 4UL) == 0UL) {
#line 144
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             144U);
    } else {

    }
#line 146
    if (((s & 256UL) != 0UL && (s & 4UL) != 0UL) && (s & 512UL) != 0UL) {
#line 147
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         147U);
    } else {

    }
#line 159
    if ((s & 15UL) != 0UL) {
#line 160
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 160
      if (tmp___0 != 0) {
#line 161
        if ((s & 4096UL) != 0UL) {
#line 162
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 163
        put_ldev(mdev);
      } else {
#line 164
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 164
        if (tmp != 0) {
#line 165
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 172
  drbd_req_free(req);
#line 173
  return;
}
}
#line 175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 184
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 184
  if (tmp != 0) {
#line 185
    return;
  } else {

  }
#line 187
  b = mdev->newest_tle;
#line 188
  b->w.cb = & w_send_barrier;
#line 193
  inc_ap_pending(mdev);
#line 194
  drbd_queue_work(& mdev->data.work, & b->w);
#line 195
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 196
  return;
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 201
  s = req->rq_state;
#line 213
  if (((int )mdev->state.ldv_39162.conn > 9 && (s & 64UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 216
    queue_barrier(mdev);
  } else {

  }
#line 221
  if ((s & 128UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 222
    sector = req->sector;
#line 223
    size = (int const   )req->size;
#line 229
    slot = tl_hash_slot___0(mdev, sector);
#line 230
    n = slot->first;
#line 230
    goto ldv_50594;
    ldv_50593: 
#line 231
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 231
    if (tmp != 0) {
#line 232
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 230
    n = n->next;
    ldv_50594: ;
#line 230
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 230
      __mptr = (struct hlist_node  const  *)n;
#line 230
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 230
      if (1 != 0) {
#line 231
        goto ldv_50593;
      } else {
#line 233
        goto ldv_50595;
      }
    } else {

    }
    ldv_50595: 
#line 253
    slot = ee_hash_slot___0(mdev, req->sector);
#line 254
    n = slot->first;
#line 254
    goto ldv_50601;
    ldv_50600: 
#line 255
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 255
    if (tmp___0 != 0) {
#line 256
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 257
      goto ldv_50599;
    } else {

    }
#line 254
    n = n->next;
    ldv_50601: ;
#line 254
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 254
      __mptr___0 = (struct hlist_node  const  *)n;
#line 254
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 254
      if (1 != 0) {
#line 255
        goto ldv_50600;
      } else {
#line 257
        goto ldv_50599;
      }
    } else {

    }
    ldv_50599: ;
  } else {

  }
#line 260
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 267
  bio_endio(m->bio, m->error);
#line 268
  dec_ap_bio(mdev);
#line 269
  return;
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 279
  s = req->rq_state;
#line 280
  mdev = req->mdev;
#line 281
  rw = (req->rq_state & 2048UL) != 0UL;
#line 292
  if ((s & 32UL) != 0UL) {
#line 293
    return;
  } else {

  }
#line 294
  if ((s & 16UL) != 0UL) {
#line 295
    return;
  } else {

  }
#line 296
  if ((int )s & 1 && (s & 8UL) == 0UL) {
#line 297
    return;
  } else {

  }
#line 299
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 321
    ok = (s & 4UL) != 0UL || (s & 256UL) != 0UL;
#line 322
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 322
    error = (int )tmp;
#line 326
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 326
    if (tmp___0 == 0) {
#line 327
      hlist_del(& req->collision);
    } else
#line 329
    if ((s & 880UL) != 0UL) {
#line 329
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              329);
    } else {

    }
#line 332
    if (rw == 1) {
#line 333
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 336
    _drbd_end_io_acct(mdev, req);
#line 338
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 339
    m->bio = req->master_bio;
#line 340
    req->master_bio = 0;
  } else {

  }
#line 343
  if ((int )s & 1) {
#line 344
    return;
  } else {

  }
#line 346
  if ((s & 1008UL) == 0UL || (s & 128UL) != 0UL) {
#line 351
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 352
  return;
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 359
  mdev = req->mdev;
#line 361
  tmp = is_susp(mdev->state);
#line 361
  if (tmp == 0) {
#line 362
    _req_may_be_done(req, m);
  } else {

  }
#line 363
  return;
}
}
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 390
  mdev = req->mdev;
#line 391
  sector = req->sector;
#line 392
  size = (int const   )req->size;
#line 398
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 398
  if (tmp == 0) {
#line 398
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            398);
  } else {

  }
#line 400
  tmp___0 = get_net_conf(mdev);
#line 400
  if (tmp___0 == 0) {
#line 401
    return (0);
  } else {

  }
#line 404
  _b = mdev->tl_hash_s == 0U;
#line 404
  if (_b != 0) {
#line 404
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            404);
  } else {

  }
#line 404
  if (_b != 0) {
#line 405
    goto out_no_conflict;
  } else {

  }
#line 406
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 406
  if (tmp___1 != 0L) {
#line 406
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (406), "i" (12UL));
    ldv_50634: ;
#line 406
    goto ldv_50634;
  } else {

  }
#line 409
  slot = tl_hash_slot___0(mdev, sector);
#line 410
  n = slot->first;
#line 410
  goto ldv_50640;
  ldv_50639: 
#line 411
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 411
  if (tmp___4 != 0) {
#line 412
    tmp___2 = get_current();
#line 412
    tmp___3 = get_current();
#line 412
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 418
    goto out_conflict;
  } else {

  }
#line 410
  n = n->next;
  ldv_50640: ;
#line 410
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 410
    __mptr = (struct hlist_node  const  *)n;
#line 410
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 410
    if (1 != 0) {
#line 411
      goto ldv_50639;
    } else {
#line 413
      goto ldv_50641;
    }
  } else {

  }
  ldv_50641: ;
#line 422
  if (mdev->ee_hash_s != 0U) {
#line 424
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 424
    if (tmp___5 != 0L) {
#line 424
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (424), "i" (12UL));
      ldv_50642: ;
#line 424
      goto ldv_50642;
    } else {

    }
#line 427
    slot = ee_hash_slot___0(mdev, sector);
#line 428
    n = slot->first;
#line 428
    goto ldv_50647;
    ldv_50646: 
#line 429
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 429
    if (tmp___8 != 0) {
#line 430
      tmp___6 = get_current();
#line 430
      tmp___7 = get_current();
#line 430
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 436
      goto out_conflict;
    } else {

    }
#line 428
    n = n->next;
    ldv_50647: ;
#line 428
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 428
      __mptr___0 = (struct hlist_node  const  *)n;
#line 428
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 428
      if (1 != 0) {
#line 429
        goto ldv_50646;
      } else {
#line 431
        goto ldv_50648;
      }
    } else {

    }
    ldv_50648: ;
  } else {

  }
  out_no_conflict: 
#line 445
  put_net_conf(mdev);
#line 446
  return (0);
  out_conflict: 
#line 449
  put_net_conf(mdev);
#line 450
  return (1);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 468
  mdev = req->mdev;
#line 469
  rv = 0;
#line 470
  m->bio = 0;
#line 472
  switch ((unsigned int )what) {
  default: 
#line 474
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          474);
#line 475
  goto ldv_50657;
  case 1U: ;
#line 486
  if ((req->rq_state & 1008UL) != 0UL) {
#line 486
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            486);
  } else {

  }
#line 487
  req->rq_state = req->rq_state | 16UL;
#line 488
  inc_ap_pending(mdev);
#line 489
  goto ldv_50657;
  case 2U: ;
#line 493
  if ((req->rq_state & 15UL) != 0UL) {
#line 493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            493);
  } else {

  }
#line 494
  req->rq_state = req->rq_state | 1UL;
#line 495
  goto ldv_50657;
  case 23U: ;
#line 498
  if ((req->rq_state & 2048UL) != 0UL) {
#line 499
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 501
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 503
  req->rq_state = req->rq_state | 6UL;
#line 504
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 506
  _req_may_be_done_not_susp(req, m);
#line 507
  goto ldv_50657;
  case 22U: 
#line 510
  req->rq_state = req->rq_state | 8UL;
#line 511
  if ((req->rq_state & 2048UL) != 0UL) {
#line 512
    _req_may_be_done_not_susp(req, m);
  } else {
#line 514
    goto goto_queue_for_net_read;
  }
#line 515
  goto ldv_50657;
  case 21U: 
#line 518
  req->rq_state = req->rq_state | 2UL;
#line 519
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 521
  __drbd_chk_io_error____1(mdev, DRBD_IO_ERROR, "__req_mod");
#line 522
  _req_may_be_done_not_susp(req, m);
#line 523
  goto ldv_50657;
  case 20U: 
#line 527
  req->rq_state = req->rq_state | 2UL;
#line 528
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 529
  _req_may_be_done_not_susp(req, m);
#line 530
  goto ldv_50657;
  case 19U: 
#line 533
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         533U);
#line 535
  req->rq_state = req->rq_state | 2UL;
#line 536
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 538
  if ((req->rq_state & 8UL) != 0UL) {
#line 539
    _req_may_be_done(req, m);
#line 540
    goto ldv_50657;
  } else {

  }
#line 543
  __drbd_chk_io_error____1(mdev, DRBD_IO_ERROR, "__req_mod");
  goto_queue_for_net_read: ;
#line 547
  if ((req->rq_state & 1008UL) != 0UL) {
#line 547
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            547);
  } else {

  }
#line 551
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 552
    _req_may_be_done_not_susp(req, m);
#line 553
    goto ldv_50657;
  } else {

  }
#line 557
  req->rq_state = req->rq_state | 16UL;
#line 558
  inc_ap_pending(mdev);
  case 4U: 
#line 571
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 571
  hlist_add_head(& req->collision, tmp);
#line 573
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 575
  if ((req->rq_state & 16UL) == 0UL) {
#line 575
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            575);
  } else {

  }
#line 576
  req->rq_state = req->rq_state | 32UL;
#line 577
  req->w.cb = (req->rq_state & 15UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 580
  drbd_queue_work(& mdev->data.work, & req->w);
#line 581
  goto ldv_50657;
  case 3U: 
#line 587
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 587
  hlist_add_head(& req->collision, tmp___0);
#line 607
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 611
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 611
  if (tmp___1 != 0) {
#line 611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            611);
  } else {

  }
#line 613
  req->epoch = (mdev->newest_tle)->br_number;
#line 616
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 619
  if ((req->rq_state & 16UL) == 0UL) {
#line 619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            619);
  } else {

  }
#line 620
  req->rq_state = req->rq_state | 32UL;
#line 621
  req->w.cb = & w_send_dblock;
#line 622
  drbd_queue_work(& mdev->data.work, & req->w);
#line 625
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 626
    queue_barrier(mdev);
  } else {

  }
#line 628
  goto ldv_50657;
  case 5U: 
#line 631
  req->rq_state = req->rq_state | 32UL;
#line 632
  req->w.cb = & w_send_oos;
#line 633
  drbd_queue_work(& mdev->data.work, & req->w);
#line 634
  goto ldv_50657;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 641
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 644
  _req_may_be_done_not_susp(req, m);
#line 645
  goto ldv_50657;
  case 8U: ;
#line 649
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 650
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 652
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 656
    if ((req->rq_state & 16UL) != 0UL) {
#line 657
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 657
      if (tmp___2 != 0) {
#line 657
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 657
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 657
      if (tmp___4 < 0) {
#line 657
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 657
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 657, tmp___3);
      } else {

      }
#line 658
      req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 659
      req->rq_state = req->rq_state | 256UL;
    } else {

    }
  } else {

  }
#line 665
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 666
  req->rq_state = req->rq_state | 64UL;
#line 667
  _req_may_be_done_not_susp(req, m);
#line 668
  goto ldv_50657;
  case 9U: 
#line 673
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 674
  req->rq_state = req->rq_state | 128UL;
#line 675
  _req_may_be_done_not_susp(req, m);
#line 676
  goto ldv_50657;
  case 10U: ;
#line 681
  if ((req->rq_state & 16UL) != 0UL) {
#line 682
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 682
    if (tmp___5 != 0) {
#line 682
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 682
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 682
    if (tmp___7 < 0) {
#line 682
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 682
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 682, tmp___6);
    } else {

    }
  } else {

  }
#line 683
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 684
  req->rq_state = req->rq_state | 128UL;
#line 685
  if ((req->rq_state & 64UL) != 0UL && (req->rq_state & 2048UL) != 0UL) {
#line 686
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 690
  if ((req->rq_state & 32UL) == 0UL) {
#line 691
    _req_may_be_done(req, m);
  } else {

  }
#line 692
  goto ldv_50657;
  case 15U: ;
#line 698
  if ((unsigned int )what == 15U) {
#line 699
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 702
  req->rq_state = req->rq_state | 128UL;
  case 14U: ;
  case 13U: ;
#line 706
  if ((unsigned int )what == 14U) {
#line 707
    req->rq_state = req->rq_state | 512UL;
  } else {

  }
  case 12U: 
#line 717
  req->rq_state = req->rq_state | 256UL;
#line 718
  if ((req->rq_state & 16UL) == 0UL) {
#line 718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            718);
  } else {

  }
#line 719
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 719
  if (tmp___8 != 0) {
#line 719
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 719
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 719
  if (tmp___10 < 0) {
#line 719
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 719
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 719, tmp___9);
  } else {

  }
#line 720
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 721
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 722
  _req_may_be_done_not_susp(req, m);
#line 723
  goto ldv_50657;
  case 16U: ;
#line 727
  if ((req->rq_state & 16UL) != 0UL) {
#line 728
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 728
    if (tmp___11 != 0) {
#line 728
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 728
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 728
    if (tmp___13 < 0) {
#line 728
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 728
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 728, tmp___12);
    } else {

    }
#line 729
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 731
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 733
  req->rq_state = req->rq_state | 128UL;
#line 734
  _req_may_be_done_not_susp(req, m);
#line 736
  goto ldv_50657;
  case 25U: ;
#line 739
  if ((req->rq_state & 2UL) == 0UL) {
#line 740
    goto ldv_50657;
  } else {

  }
#line 742
  _req_may_be_done(req, m);
#line 743
  goto ldv_50657;
  case 26U: ;
#line 746
  if ((req->rq_state & 2UL) == 0UL) {
#line 747
    goto ldv_50657;
  } else {

  }
#line 749
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 751
  rv = 2;
#line 752
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 753
    rv = 1;
  } else {

  }
#line 755
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 756
  req->w.cb = & w_restart_disk_io;
#line 757
  drbd_queue_work(& mdev->data.work, & req->w);
#line 758
  goto ldv_50657;
  case 24U: ;
#line 762
  if ((req->rq_state & 2048UL) == 0UL && (unsigned long )req->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                struct drbd_work * ,
                                                                                                int  ))0)) {
#line 763
    _req_may_be_done(req, m);
#line 764
    goto ldv_50657;
  } else {

  }
#line 771
  if ((req->rq_state & 256UL) == 0UL) {
#line 772
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 773
      drbd_queue_work(& mdev->data.work, & req->w);
#line 774
      rv = (req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 776
    goto ldv_50657;
  } else {

  }
  case 17U: ;
#line 781
  if ((req->rq_state & 2048UL) == 0UL) {
#line 782
    goto ldv_50657;
  } else {

  }
#line 784
  if ((req->rq_state & 16UL) != 0UL) {
#line 788
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 789
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 791
  if ((req->rq_state & 1008UL) != 0UL) {
#line 792
    req->rq_state = req->rq_state | 128UL;
#line 793
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 794
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 796
  _req_may_be_done(req, m);
#line 797
  goto ldv_50657;
  case 18U: ;
#line 800
  if ((req->rq_state & 16UL) == 0UL) {
#line 800
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            800);
  } else {

  }
#line 801
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 801
  if (tmp___14 != 0) {
#line 801
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 801
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 801
  if (tmp___16 < 0) {
#line 801
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 801
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 801, tmp___15);
  } else {

  }
#line 802
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 803
  req->rq_state = req->rq_state | 384UL;
#line 804
  _req_may_be_done_not_susp(req, m);
#line 805
  goto ldv_50657;
  }
  ldv_50657: ;
#line 808
  return (rv);
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 823
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 824
    return (1);
  } else {

  }
#line 825
  if ((int )mdev->state.ldv_39162.disk > 4) {
#line 826
    return (0);
  } else {

  }
#line 827
  if ((int )mdev->state.ldv_39162.disk <= 3) {
#line 828
    return (0);
  } else {

  }
#line 830
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 831
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 833
  if (sector >= nr_sectors) {
#line 833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            833);
  } else {

  }
#line 834
  if (esector >= nr_sectors) {
#line 834
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            834);
  } else {

  }
#line 836
  sbnr = sector >> 3;
#line 837
  ebnr = esector >> 3;
#line 839
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 839
  return (tmp == 0);
}
}
#line 842 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  int congested ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 844
  congested = 0;
#line 851
  tmp = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 851
  if (tmp == 0) {
#line 852
    return;
  } else {

  }
#line 854
  if ((mdev->net_conf)->cong_fill != 0) {
#line 854
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 854
    if (tmp___0 >= (mdev->net_conf)->cong_fill) {
#line 856
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 857
      congested = 1;
    } else {

    }
  } else {

  }
#line 860
  if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 861
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 862
    congested = 1;
  } else {

  }
#line 865
  if (congested != 0) {
#line 866
    queue_barrier(mdev);
#line 868
    if ((mdev->net_conf)->on_congestion == 1) {
#line 869
      __ns.i = mdev->state.i;
#line 869
      __ns.ldv_39162.conn = 22U;
#line 869
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 871
      __ns___0.i = mdev->state.i;
#line 871
      __ns___0.ldv_39162.conn = 1U;
#line 871
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 873
  put_ldev(mdev);
#line 874
  return;
}
}
#line 876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  union drbd_state s ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  bool tmp___11 ;
  bool tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  long tmp___18 ;
  int tmp___19 ;
  long tmp___20 ;
  bool tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;

  {
#line 878
  rw = (int const   )bio->bi_rw & (int const   )4097;
#line 879
  size = (int const   )bio->bi_size;
#line 880
  sector = bio->bi_sector;
#line 881
  b = 0;
#line 883
  send_oos = 0;
#line 884
  err = -5;
#line 885
  ret = 0;
#line 889
  req = drbd_req_new(mdev, bio);
#line 890
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 891
    dec_ap_bio(mdev);
#line 894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 895
    bio_endio(bio, -12);
#line 896
    return (0);
  } else {

  }
#line 898
  req->start_time = start_time;
#line 900
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 901
  if (local == 0) {
#line 902
    bio_put(req->private_bio);
#line 903
    req->private_bio = 0;
  } else {

  }
#line 905
  if (rw == 1) {
#line 909
    tmp = __builtin_expect(size == 0, 0L);
#line 909
    if (tmp != 0L) {
#line 911
      if ((bio->bi_rw & 2048UL) == 0UL) {
#line 911
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_rw & REQ_FLUSH ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                911);
      } else {

      }
#line 912
      remote = 0;
    } else {
#line 914
      remote = 1;
    }
  } else {
#line 917
    if (local != 0) {
#line 918
      tmp___0 = drbd_may_do_local_read(mdev, sector, size);
#line 918
      if (tmp___0 == 0) {
#line 924
        local = 0;
#line 925
        bio_put(req->private_bio);
#line 926
        req->private_bio = 0;
#line 927
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 930
    remote = local == 0 && (int )mdev->state.ldv_39162.pdsk > 7;
  }
#line 941
  if ((rw == 4096 && (int )mdev->state.ldv_39162.disk > 3) && local == 0) {
#line 942
    err = -11;
#line 943
    goto fail_and_free_req;
  } else {

  }
#line 953
  if ((rw == 1 && local != 0) && size != 0) {
#line 953
    tmp___1 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 953
    if (tmp___1 == 0) {
#line 955
      req->rq_state = req->rq_state | 4096UL;
#line 956
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 959
  s = mdev->state;
#line 960
  if (remote != 0) {
#line 960
    tmp___2 = drbd_should_do_remote(s);
#line 960
    if ((int )tmp___2) {
#line 960
      tmp___3 = 1;
    } else {
#line 960
      tmp___3 = 0;
    }
  } else {
#line 960
    tmp___3 = 0;
  }
#line 960
  remote = tmp___3;
#line 961
  if (rw == 1) {
#line 961
    tmp___4 = drbd_should_send_oos(s);
#line 961
    if ((int )tmp___4) {
#line 961
      tmp___5 = 1;
    } else {
#line 961
      tmp___5 = 0;
    }
  } else {
#line 961
    tmp___5 = 0;
  }
#line 961
  send_oos = tmp___5;
#line 962
  if (remote != 0 && send_oos != 0) {
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            962);
  } else {

  }
#line 964
  if (local == 0 && remote == 0) {
#line 964
    tmp___7 = is_susp(mdev->state);
#line 964
    if (tmp___7 == 0) {
#line 965
      tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 965
      if (tmp___6 != 0) {
#line 966
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 967
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 976
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 976
    tmp___9 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 976
    if (tmp___9 != 0) {
      allocate_barrier: 
#line 980
      tmp___8 = kmalloc(56UL, 16U);
#line 980
      b = (struct drbd_tl_epoch *)tmp___8;
#line 981
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 982
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 983
        err = -12;
#line 984
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 989
  spin_lock_irq(& mdev->req_lock);
#line 991
  tmp___10 = is_susp(mdev->state);
#line 991
  if (tmp___10 != 0) {
#line 996
    ret = 1;
#line 997
    spin_unlock_irq(& mdev->req_lock);
#line 998
    goto fail_free_complete;
  } else {

  }
#line 1001
  if (remote != 0 || send_oos != 0) {
#line 1002
    tmp___11 = drbd_should_do_remote(mdev->state);
#line 1002
    remote = (int )tmp___11;
#line 1003
    if (rw == 1) {
#line 1003
      tmp___12 = drbd_should_send_oos(mdev->state);
#line 1003
      if ((int )tmp___12) {
#line 1003
        tmp___13 = 1;
      } else {
#line 1003
        tmp___13 = 0;
      }
    } else {
#line 1003
      tmp___13 = 0;
    }
#line 1003
    send_oos = tmp___13;
#line 1004
    if (remote != 0 && send_oos != 0) {
#line 1004
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1004);
    } else {

    }
#line 1006
    if (remote == 0 && send_oos == 0) {
#line 1007
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 1008
    if (local == 0 && remote == 0) {
#line 1009
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 1010
      spin_unlock_irq(& mdev->req_lock);
#line 1011
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 1015
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1016
    mdev->unused_spare_tle = b;
#line 1017
    b = 0;
  } else {

  }
#line 1019
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1019
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 1019
    if (tmp___14 != 0) {
#line 1024
      spin_unlock_irq(& mdev->req_lock);
#line 1025
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 1030
  _drbd_start_io_acct(mdev, req, bio);
#line 1042
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1042
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 1042
    if (tmp___16 != 0) {
#line 1044
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 1045
      mdev->unused_spare_tle = 0;
    } else {
#line 1042
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1047
  if (remote != 0 && rw == 1) {
#line 1047
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 1047
    if (tmp___15 != 0) {
#line 1047
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1048);
    } else {

    }
  } else {

  }
#line 1066
  if (remote != 0) {
#line 1067
    _req_mod(req, to_be_send);
  } else {

  }
#line 1068
  if (local != 0) {
#line 1069
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1074
  if (rw == 1) {
#line 1074
    tmp___17 = _req_conflicts(req);
#line 1074
    if (tmp___17 != 0) {
#line 1075
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1079
  tmp___18 = __builtin_expect(size != 0, 1L);
#line 1079
  if (tmp___18 != 0L) {
#line 1080
    list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
  } else {

  }
#line 1084
  if (remote != 0) {
#line 1089
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1093
  if (send_oos != 0) {
#line 1093
    tmp___19 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1093U);
#line 1093
    if (tmp___19 != 0) {
#line 1094
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1096
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1098
    maybe_pull_ahead(mdev);
  } else {

  }
#line 1103
  tmp___20 = __builtin_expect((bio->bi_rw & 2048UL) != 0UL, 0L);
#line 1103
  if (tmp___20 != 0L && (mdev->newest_tle)->n_writes != 0) {
#line 1103
    tmp___21 = drbd_should_do_remote(mdev->state);
#line 1103
    if ((int )tmp___21) {
#line 1106
      queue_barrier(mdev);
    } else {

    }
  } else {

  }
#line 1108
  spin_unlock_irq(& mdev->req_lock);
#line 1109
  kfree((void const   *)b);
#line 1111
  if (local != 0) {
#line 1112
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1119
    tmp___23 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1119
    if (tmp___23 != 0) {
#line 1120
      tmp___22 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1120
      if (tmp___22 != 0) {
#line 1123
        bio_endio(req->private_bio, -5);
      } else {
#line 1125
        generic_make_request(req->private_bio);
      }
#line 1126
      put_ldev(mdev);
    } else {
#line 1128
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1131
  return (0);
  fail_conflicting: 
#line 1140
  _drbd_end_io_acct(mdev, req);
#line 1141
  spin_unlock_irq(& mdev->req_lock);
#line 1142
  if (remote != 0) {
#line 1143
    tmp___24 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1143
    if (tmp___24 != 0) {
#line 1143
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1143
    tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1143
    if (tmp___26 < 0) {
#line 1143
      tmp___25 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1143
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1143, tmp___25);
    } else {

    }
  } else {

  }
#line 1146
  err = 0;
  fail_free_complete: ;
#line 1149
  if ((req->rq_state & 4096UL) != 0UL) {
#line 1150
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1152
  if (local != 0) {
#line 1153
    bio_put(req->private_bio);
#line 1154
    req->private_bio = 0;
#line 1155
    put_ldev(mdev);
  } else {

  }
#line 1157
  if (ret == 0) {
#line 1158
    bio_endio(bio, err);
  } else {

  }
#line 1160
  drbd_req_free(req);
#line 1161
  dec_ap_bio(mdev);
#line 1162
  kfree((void const   *)b);
#line 1164
  return (ret);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1174
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1176
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1176
    if (tmp___1 != 0) {
#line 1177
      tmp = get_current();
#line 1177
      tmp___0 = get_current();
#line 1177
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1183
    return (1);
  } else {

  }
#line 1186
  return (0);
}
}
#line 1189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1192
  mdev = (struct drbd_conf *)q->queuedata;
#line 1195
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1195
  if (tmp != 0) {
#line 1196
    bio_endio(bio, -1);
#line 1197
    return;
  } else {

  }
#line 1200
  start_time = jiffies;
#line 1205
  if ((bio->bi_size & 511U) != 0U) {
#line 1205
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1205);
  } else {

  }
#line 1209
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1210
  e_enr = bio->bi_size != 0U ? (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8) : s_enr;
#line 1212
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1212
  if (tmp___1 != 0L) {
    ldv_50755: 
#line 1214
    inc_ap_bio(mdev, 1);
#line 1215
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1215
    if (tmp___0 != 0) {
#line 1216
      goto ldv_50755;
    } else {

    }

#line 1216
    return;
  } else {

  }
#line 1221
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1223
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1227
    bio_endio(bio, -22);
  } else {
#line 1239
    sect = bio->bi_sector;
#line 1240
    sps = 256;
#line 1241
    mask = sps + -1;
#line 1242
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1243
    bp = bio_split(bio, (int )first_sectors);
#line 1250
    inc_ap_bio(mdev, 3);
#line 1252
    if (s_enr + 1U != e_enr) {
#line 1252
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1252);
    } else {

    }
#line 1254
    goto ldv_50763;
    ldv_50762: 
#line 1255
    inc_ap_bio(mdev, 1);
    ldv_50763: 
#line 1254
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1254
    if (tmp___2 != 0) {
#line 1255
      goto ldv_50762;
    } else {

    }

#line 1257
    goto ldv_50766;
    ldv_50765: 
#line 1258
    inc_ap_bio(mdev, 1);
    ldv_50766: 
#line 1257
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1257
    if (tmp___3 != 0) {
#line 1258
      goto ldv_50765;
    } else {

    }
#line 1260
    dec_ap_bio(mdev);
#line 1262
    bio_pair_release(bp);
  }
#line 1264
  return;
}
}
#line 1279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1281
  mdev = (struct drbd_conf *)q->queuedata;
#line 1282
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1284
  bio_size = bvm->bi_size;
#line 1287
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1289
  if (limit < 0) {
#line 1290
    limit = 0;
  } else {

  }
#line 1291
  if (bio_size == 0U) {
#line 1292
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1293
      limit = (int )bvec->bv_len;
    } else
#line 1294
    if (limit != 0) {
#line 1294
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1294
      if (tmp != 0) {
#line 1295
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1297
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1298
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1299
          _min1 = limit;
#line 1299
          _min2 = backing_limit;
#line 1299
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1301
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1303
  return (limit);
}
}
#line 1306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  int tmp ;
  int tmp___0 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1308
  mdev = (struct drbd_conf *)data;
#line 1311
  ent = 0UL;
#line 1311
  dt = 0UL;
#line 1314
  tmp = get_net_conf(mdev);
#line 1314
  if (tmp != 0) {
#line 1315
    if ((int )mdev->state.ldv_39162.conn > 8) {
#line 1316
      ent = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
    } else {

    }
#line 1318
    put_net_conf(mdev);
  } else {

  }
#line 1320
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1320
  if (tmp___0 != 0) {
#line 1321
    dt = (unsigned long )(((mdev->ldev)->dc.disk_timeout * 250) / 10);
#line 1322
    put_ldev(mdev);
  } else {

  }
#line 1324
  __x = dt;
#line 1324
  __y = ent;
#line 1324
  if (__x != 0UL) {
#line 1324
    if (__y != 0UL) {
#line 1324
      _min1 = __x;
#line 1324
      _min2 = __y;
#line 1324
      tmp___1 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1324
      tmp___1 = __x;
    }
#line 1324
    tmp___2 = tmp___1;
  } else {
#line 1324
    tmp___2 = __y;
  }
#line 1324
  et = tmp___2;
#line 1326
  if (et == 0UL) {
#line 1327
    return;
  } else {

  }
#line 1329
  now = jiffies;
#line 1331
  spin_lock_irq(& mdev->req_lock);
#line 1332
  le = & (mdev->oldest_tle)->requests;
#line 1333
  tmp___3 = list_empty((struct list_head  const  *)le);
#line 1333
  if (tmp___3 != 0) {
#line 1334
    spin_unlock_irq(& mdev->req_lock);
#line 1335
    mod_timer(& mdev->request_timer, now + et);
#line 1336
    return;
  } else {

  }
#line 1339
  le = le->prev;
#line 1340
  __mptr = (struct list_head  const  *)le;
#line 1340
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1360
  if (((ent != 0UL && (req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1361
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1362
    __ns.i = mdev->state.i;
#line 1362
    __ns.ldv_39162.conn = 3U;
#line 1362
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1366
  if (((dt != 0UL && (int )req->rq_state & 1) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1367
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1368
    __drbd_chk_io_error____1(mdev, DRBD_FORCE_DETACH, "request_timer_fn");
  } else {

  }
#line 1370
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1371
  spin_unlock_irq(& mdev->req_lock);
#line 1372
  mod_timer(& mdev->request_timer, nt);
#line 1373
  return;
}
}
#line 1375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1380
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1382
  mutex_lock(ldv_func_arg1);
#line 1383
  return;
}
}
#line 1385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_106(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1390
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1392
  mutex_unlock(ldv_func_arg1);
#line 1393
  return;
}
}
#line 1395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1400
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1402
  mutex_lock(ldv_func_arg1);
#line 1403
  return;
}
}
#line 1405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_108(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1410
  tmp = mutex_trylock(ldv_func_arg1);
#line 1410
  ldv_func_res = tmp;
#line 1412
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1412
  return (tmp___0);
#line 1414
  return (ldv_func_res);
}
}
#line 1417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1422
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1424
  mutex_unlock(ldv_func_arg1);
#line 1425
  return;
}
}
#line 1427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1432
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1434
  mutex_lock(ldv_func_arg1);
#line 1435
  return;
}
}
#line 1437 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1442
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1444
  mutex_unlock(ldv_func_arg1);
#line 1445
  return;
}
}
#line 1447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_112(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1452
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1454
  mutex_lock(ldv_func_arg1);
#line 1455
  return;
}
}
#line 1457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1462
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1464
  mutex_unlock(ldv_func_arg1);
#line 1465
  return;
}
}
#line 1467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_114(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1472
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1474
  mutex_unlock(ldv_func_arg1);
#line 1475
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5487;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5487;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5487;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5487;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5487: ;
#line 211
  return (__ret);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_128(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_129(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) ;
#line 765 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 767
  return ((bdev->bd_disk)->queue);
}
}
#line 1050 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1052
  retval = 512;
#line 1054
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1055
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1057
  return ((unsigned short )retval);
}
}
#line 1060 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1062
  tmp = bdev_get_queue(bdev);
#line 1062
  tmp___0 = queue_logical_block_size(tmp);
#line 1062
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1578
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1705
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1715
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1716
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1724
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1861
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1863
  if ((unsigned int )forcedetach == 0U) {
#line 1864
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1864
    if (tmp != 0) {
#line 1865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1866
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1867
      __ns.i = mdev->state.i;
#line 1867
      __ns.ldv_39162.disk = 4U;
#line 1867
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1868
    goto ldv_49249;
  } else {

  }
  case 2: ;
  case 1: 
#line 1873
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1874
  if ((unsigned int )forcedetach == 2U) {
#line 1875
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1876
  if ((int )mdev->state.ldv_39162.disk > 2) {
#line 1877
    __ns___0.i = mdev->state.i;
#line 1877
    __ns___0.ldv_39162.disk = 2U;
#line 1877
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1881
  goto ldv_49249;
  }
  ldv_49249: ;
#line 1884
  return;
}
}
#line 1894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1897
  if (error != 0) {
#line 1899
    tmp = spinlock_check(& mdev->req_lock);
#line 1899
    flags = _raw_spin_lock_irqsave(tmp);
#line 1900
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1901
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1903
  return;
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 135
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 135
  if (r == 0 || (int )mdev->state.ldv_39162.disk <= 2) {
#line 135
    goto ldv_49549;
  } else {

  }
#line 135
  tmp = get_current();
#line 135
  __wait.flags = 0U;
#line 135
  __wait.private = (void *)tmp;
#line 135
  __wait.func = & autoremove_wake_function;
#line 135
  __wait.task_list.next = & __wait.task_list;
#line 135
  __wait.task_list.prev = & __wait.task_list;
  ldv_49552: 
#line 135
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 135
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 135
  if (r == 0 || (int )mdev->state.ldv_39162.disk <= 2) {
#line 135
    goto ldv_49551;
  } else {

  }
#line 135
  schedule();
#line 135
  goto ldv_49552;
  ldv_49551: 
#line 135
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49549: ;
#line 139
  if (r == 0) {
#line 139
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 139
    tmp___1 = tmp___0;
  } else {
#line 139
    tmp___1 = 0;
  }
#line 139
  return (tmp___1);
}
}
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 144
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 144
  if (tmp != 0) {
#line 145
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static bool md_io_allowed(struct drbd_conf *mdev ) 
{ 
  enum drbd_disk_state ds ;

  {
#line 150
  ds = (enum drbd_disk_state )mdev->state.ldv_39162.disk;
#line 151
  return ((bool )((unsigned int )ds > 2U || (unsigned int )ds == 1U));
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_disk_failure(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                     unsigned int *done ) 
{ 
  long dt ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;

  {
#line 157
  dt = (long )((bdev->dc.disk_timeout * 250) / 10);
#line 158
  if (dt == 0L) {
#line 159
    dt = 9223372036854775807L;
  } else {

  }
#line 161
  __ret = dt;
#line 161
  if (*done == 0U) {
#line 161
    tmp___2 = md_io_allowed(mdev);
#line 161
    if ((int )tmp___2) {
#line 161
      tmp = get_current();
#line 161
      __wait.flags = 0U;
#line 161
      __wait.private = (void *)tmp;
#line 161
      __wait.func = & autoremove_wake_function;
#line 161
      __wait.task_list.next = & __wait.task_list;
#line 161
      __wait.task_list.prev = & __wait.task_list;
      ldv_49569: 
#line 161
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 161
      if (*done != 0U) {
#line 161
        goto ldv_49568;
      } else {
#line 161
        tmp___0 = md_io_allowed(mdev);
#line 161
        if (tmp___0) {
#line 161
          tmp___1 = 0;
        } else {
#line 161
          tmp___1 = 1;
        }
#line 161
        if (tmp___1) {
#line 161
          goto ldv_49568;
        } else {

        }
      }
#line 161
      __ret = schedule_timeout(__ret);
#line 161
      if (__ret == 0L) {
#line 161
        goto ldv_49568;
      } else {

      }
#line 161
      goto ldv_49569;
      ldv_49568: 
#line 161
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 161
  dt = __ret;
#line 162
  if (dt == 0L) {
#line 163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
  } else {

  }
#line 164
  return;
}
}
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 174
  mdev->md_io.done = 0U;
#line 175
  mdev->md_io.error = -19;
#line 177
  if (rw & 1) {
#line 177
    tmp = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 177
    if (tmp == 0) {
#line 178
      rw = rw | 3072;
    } else {

    }
  } else {

  }
#line 179
  rw = rw | 16;
#line 181
  bio = bio_alloc_drbd(16U);
#line 182
  bio->bi_bdev = bdev->md_bdev;
#line 183
  bio->bi_sector = sector;
#line 184
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 184
  ok = tmp___0 == size;
#line 185
  if (ok == 0) {
#line 186
    goto out;
  } else {

  }
#line 187
  bio->bi_private = (void *)(& mdev->md_io);
#line 188
  bio->bi_end_io = & drbd_md_io_complete;
#line 189
  bio->bi_rw = (unsigned long )rw;
#line 191
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 191
  if (tmp___1 == 0) {
#line 192
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 193
    ok = 0;
#line 194
    goto out;
  } else {

  }
#line 197
  atomic_inc(& bio->bi_cnt);
#line 198
  atomic_inc(& mdev->md_io_in_use);
#line 199
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 199
  if (tmp___2 != 0) {
#line 200
    bio_endio(bio, -5);
  } else {
#line 202
    submit_bio(rw, bio);
  }
#line 203
  wait_until_done_or_disk_failure(mdev, bdev, & mdev->md_io.done);
#line 204
  ok = (int )bio->bi_flags & 1 && mdev->md_io.error == 0;
  out: 
#line 207
  bio_put(bio);
#line 208
  return (ok);
}
}
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 215
  offset = 0;
#line 216
  iop = mdev->md_io_page;
#line 218
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 218
  if (tmp != 1) {
#line 218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            218);
  } else {

  }
#line 220
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 220
  if (tmp___0 != 0L) {
#line 220
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (220), "i" (12UL));
    ldv_49593: ;
#line 220
    goto ldv_49593;
  } else {

  }
#line 222
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 222
  logical_block_size = (int )tmp___1;
#line 223
  if (logical_block_size == 0) {
#line 224
    logical_block_size = 512;
  } else {

  }
#line 227
  if (logical_block_size != 512) {
#line 228
    mask = logical_block_size / 512 + -1;
#line 229
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 229
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              229);
    } else {

    }
#line 230
    if ((mask + 1) * 512 != logical_block_size) {
#line 230
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              230);
    } else {

    }
#line 231
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 232
    sector = (sector_t )(~ mask) & sector;
#line 233
    iop = mdev->md_io_tmpp;
#line 235
    if (rw & 1) {
#line 238
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 238
      p = tmp___2;
#line 239
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 239
      hp = tmp___3;
#line 241
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 244
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 244
      if (tmp___4 != 0L) {
#line 245
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 248
        return (0);
      } else {

      }
#line 251
      __len = 512UL;
#line 251
      if (__len > 63UL) {
#line 251
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 251
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 255
  tmp___7 = drbd_md_first_sector(bdev);
#line 255
  if (tmp___7 > sector) {
#line 257
    tmp___5 = get_current();
#line 257
    tmp___6 = get_current();
#line 257
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 255
    tmp___8 = drbd_md_last_sector(bdev);
#line 255
    if (tmp___8 < sector) {
#line 257
      tmp___5 = get_current();
#line 257
      tmp___6 = get_current();
#line 257
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 261
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 262
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 262
  if (tmp___9 != 0L) {
#line 263
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 265
    return (0);
  } else {

  }
#line 268
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 269
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 269
    p___0 = tmp___10;
#line 270
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 270
    hp___0 = tmp___11;
#line 272
    __len___0 = 512UL;
#line 272
    if (__len___0 > 63UL) {
#line 272
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 272
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 275
  return (ok);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 282
  al_flags = 0UL;
#line 285
  spin_lock_irq(& mdev->al_lock);
#line 286
  tmp = lc_find(mdev->resync, enr / 4U);
#line 287
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 287
  if (tmp___2 != 0L) {
#line 288
    __mptr = (struct lc_element  const  *)tmp;
#line 288
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 289
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 289
    if (tmp___1 != 0) {
#line 290
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 290
      wake = tmp___0 == 0;
#line 291
      spin_unlock_irq(& mdev->al_lock);
#line 292
      if (wake != 0) {
#line 293
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 294
      return (0);
    } else {

    }
  } else {

  }
#line 297
  al_ext = lc_get(mdev->act_log, enr);
#line 298
  al_flags = (mdev->act_log)->flags;
#line 299
  spin_unlock_irq(& mdev->al_lock);
#line 310
  return (al_ext);
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 315
  enr = (unsigned int )(sector >> 13);
#line 319
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 319
  if (tmp <= 0) {
#line 319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            319);
  } else {

  }
#line 321
  al_ext = _al_get(mdev, enr);
#line 321
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 321
    goto ldv_49623;
  } else {

  }
#line 321
  tmp___0 = get_current();
#line 321
  __wait.flags = 0U;
#line 321
  __wait.private = (void *)tmp___0;
#line 321
  __wait.func = & autoremove_wake_function;
#line 321
  __wait.task_list.next = & __wait.task_list;
#line 321
  __wait.task_list.prev = & __wait.task_list;
  ldv_49626: 
#line 321
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 321
  al_ext = _al_get(mdev, enr);
#line 321
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 321
    goto ldv_49625;
  } else {

  }
#line 321
  schedule();
#line 321
  goto ldv_49626;
  ldv_49625: 
#line 321
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49623: ;
#line 323
  if (al_ext->lc_number != enr) {
#line 330
    init_completion(& al_work.event);
#line 331
    al_work.al_ext = al_ext;
#line 332
    al_work.enr = enr;
#line 333
    al_work.old_enr = al_ext->lc_number;
#line 334
    al_work.w.cb = & w_al_write_transaction;
#line 335
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 336
    wait_for_completion(& al_work.event);
#line 338
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 340
    spin_lock_irq(& mdev->al_lock);
#line 341
    lc_changed(mdev->act_log, al_ext);
#line 342
    spin_unlock_irq(& mdev->al_lock);
#line 343
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 345
  return;
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 349
  enr = (unsigned int )(sector >> 13);
#line 353
  tmp = spinlock_check(& mdev->al_lock);
#line 353
  flags = _raw_spin_lock_irqsave(tmp);
#line 355
  extent = lc_find(mdev->act_log, enr);
#line 357
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 358
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 359
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 360
    return;
  } else {

  }
#line 363
  tmp___0 = lc_put(mdev->act_log, extent);
#line 363
  if (tmp___0 == 0U) {
#line 364
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 366
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 367
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 380
  return (al_enr >> 5);
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 389
  return (rs_enr >> 3);
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 399
  __mptr = (struct drbd_work  const  *)w;
#line 399
  aw = (struct update_al_work *)__mptr;
#line 400
  updated = aw->al_ext;
#line 401
  new_enr = aw->enr;
#line 402
  evicted = aw->old_enr;
#line 407
  xor_sum = 0U;
#line 409
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 409
  if (tmp___0 == 0) {
#line 410
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.disk);
#line 410
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 413
    complete(& ((struct update_al_work *)w)->event);
#line 414
    return (1);
  } else {

  }
#line 422
  if ((int )mdev->state.ldv_39162.conn <= 9 && evicted != 4294967295U) {
#line 423
    tmp___1 = al_extent_to_bm_page(evicted);
#line 423
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 426
  if ((int )mdev->state.ldv_39162.disk <= 3) {
#line 427
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.disk);
#line 427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 430
    complete(& ((struct update_al_work *)w)->event);
#line 431
    put_ldev(mdev);
#line 432
    return (1);
  } else {

  }
#line 435
  tmp___3 = drbd_md_get_buffer(mdev);
#line 435
  buffer = (struct al_transaction *)tmp___3;
#line 436
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 437
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 438
    complete(& ((struct update_al_work *)w)->event);
#line 439
    put_ldev(mdev);
#line 440
    return (1);
  } else {

  }
#line 443
  buffer->magic = 1728214147U;
#line 444
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 444
  buffer->tr_number = tmp___4;
#line 446
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 446
  n = (int )tmp___5;
#line 448
  tmp___6 = __fswab32((__u32 )n);
#line 448
  buffer->updates[0].pos = tmp___6;
#line 449
  tmp___7 = __fswab32(new_enr);
#line 449
  buffer->updates[0].extent = tmp___7;
#line 451
  xor_sum = xor_sum ^ new_enr;
#line 453
  __min1 = 61;
#line 453
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 453
  mx = __min1 < __min2 ? __min1 : __min2;
#line 455
  i = 0;
#line 455
  goto ldv_49666;
  ldv_49665: 
#line 456
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 457
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 457
  extent_nr = tmp___8->lc_number;
#line 458
  tmp___9 = __fswab32(idx);
#line 458
  buffer->updates[i + 1].pos = tmp___9;
#line 459
  tmp___10 = __fswab32(extent_nr);
#line 459
  buffer->updates[i + 1].extent = tmp___10;
#line 460
  xor_sum = xor_sum ^ extent_nr;
#line 455
  i = i + 1;
  ldv_49666: ;
#line 455
  if (i < mx) {
#line 456
    goto ldv_49665;
  } else {

  }

#line 462
  goto ldv_49669;
  ldv_49668: 
#line 463
  buffer->updates[i + 1].pos = 4294967295U;
#line 464
  buffer->updates[i + 1].extent = 4294967295U;
#line 465
  xor_sum = ~ xor_sum;
#line 462
  i = i + 1;
  ldv_49669: ;
#line 462
  if (i <= 60) {
#line 463
    goto ldv_49668;
  } else {

  }
#line 467
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 468
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 469
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 471
  tmp___11 = __fswab32(xor_sum);
#line 471
  buffer->xor_sum = tmp___11;
#line 473
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 476
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 476
  if (tmp___12 == 0) {
#line 477
    drbd_chk_io_error____0(mdev, 1, DRBD_META_IO_ERROR, "w_al_write_transaction");
  } else {

  }
#line 479
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 479
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 481
    mdev->al_tr_pos = 0;
  } else {

  }
#line 483
  if (mdev->al_tr_pos > 63) {
#line 483
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            483);
  } else {

  }
#line 484
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 486
  drbd_md_put_buffer(mdev);
#line 488
  complete(& ((struct update_al_work *)w)->event);
#line 489
  put_ldev(mdev);
#line 491
  return (1);
}
}
#line 503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 510
  xor_sum = 0U;
#line 512
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 516
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 516
  if (tmp == 0) {
#line 517
    return (-1);
  } else {

  }
#line 519
  tmp___0 = __fswab32(b->magic);
#line 519
  rv = tmp___0 == 2205418087U;
#line 521
  i = 0;
#line 521
  goto ldv_49683;
  ldv_49682: 
#line 522
  tmp___1 = __fswab32(b->updates[i].extent);
#line 522
  xor_sum = tmp___1 ^ xor_sum;
#line 521
  i = i + 1;
  ldv_49683: ;
#line 521
  if (i <= 61) {
#line 522
    goto ldv_49682;
  } else {

  }
#line 523
  tmp___2 = __fswab32(b->xor_sum);
#line 523
  rv = (tmp___2 == xor_sum) & rv;
#line 525
  return (rv);
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 541
  active_extents = 0;
#line 542
  transactions = 0;
#line 543
  found_valid = 0;
#line 544
  from = 0;
#line 545
  to = 0;
#line 546
  from_tnr = 0U;
#line 547
  to_tnr = 0U;
#line 550
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 555
  tmp = drbd_md_get_buffer(mdev);
#line 555
  buffer = (struct al_transaction *)tmp;
#line 556
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 557
    return (0);
  } else {

  }
#line 560
  i = 0;
#line 560
  goto ldv_49703;
  ldv_49702: 
#line 561
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 562
  if (rv == 0) {
#line 563
    goto ldv_49701;
  } else {

  }
#line 564
  if (rv == -1) {
#line 565
    drbd_md_put_buffer(mdev);
#line 566
    return (0);
  } else {

  }
#line 568
  tmp___0 = __fswab32(buffer->tr_number);
#line 568
  cnr = tmp___0;
#line 570
  found_valid = found_valid + 1;
#line 570
  if (found_valid == 1) {
#line 571
    from = i;
#line 572
    to = i;
#line 573
    from_tnr = cnr;
#line 574
    to_tnr = cnr;
#line 575
    goto ldv_49701;
  } else {

  }
#line 577
  if ((int )cnr - (int )from_tnr < 0) {
#line 578
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 578
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              578);
    } else {

    }
#line 579
    from = i;
#line 580
    from_tnr = cnr;
  } else {

  }
#line 582
  if ((int )cnr - (int )to_tnr > 0) {
#line 583
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 583
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              583);
    } else {

    }
#line 584
    to = i;
#line 585
    to_tnr = cnr;
  } else {

  }
  ldv_49701: 
#line 560
  i = i + 1;
  ldv_49703: ;
#line 560
  if (i <= mx) {
#line 561
    goto ldv_49702;
  } else {

  }

#line 589
  if (found_valid == 0) {
#line 590
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 591
    drbd_md_put_buffer(mdev);
#line 592
    return (1);
  } else {

  }
#line 597
  i = from;
  ldv_49718: 
#line 603
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 604
  _b = rv == 0;
#line 604
  if (_b != 0) {
#line 604
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            604);
  } else {

  }
#line 604
  if (_b != 0) {
#line 604
    goto cancel;
  } else {

  }
#line 605
  if (rv == -1) {
#line 606
    drbd_md_put_buffer(mdev);
#line 607
    return (0);
  } else {

  }
#line 610
  tmp___1 = __fswab32(buffer->tr_number);
#line 610
  trn = tmp___1;
#line 612
  spin_lock_irq(& mdev->al_lock);
#line 618
  j = 61;
#line 618
  goto ldv_49715;
  ldv_49714: 
#line 619
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 619
  pos = (int )tmp___2;
#line 620
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 620
  extent_nr = tmp___3;
#line 622
  if (extent_nr == 4294967295U) {
#line 623
    goto ldv_49713;
  } else {

  }
#line 625
  lc_set(mdev->act_log, extent_nr, pos);
#line 626
  active_extents = active_extents + 1;
  ldv_49713: 
#line 618
  j = j - 1;
  ldv_49715: ;
#line 618
  if (j >= 0) {
#line 619
    goto ldv_49714;
  } else {

  }
#line 628
  spin_unlock_irq(& mdev->al_lock);
#line 630
  transactions = transactions + 1;
  cancel: ;
#line 633
  if (i == to) {
#line 634
    goto ldv_49717;
  } else {

  }
#line 635
  i = i + 1;
#line 636
  if (i > mx) {
#line 637
    i = 0;
  } else {

  }
#line 638
  goto ldv_49718;
  ldv_49717: 
#line 640
  mdev->al_tr_number = to_tnr + 1U;
#line 641
  mdev->al_tr_pos = to;
#line 642
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 642
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 644
    mdev->al_tr_pos = 0;
  } else {

  }
#line 647
  drbd_md_put_buffer(mdev);
#line 649
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 652
  return (1);
}
}
#line 659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 662
  add = 0UL;
#line 666
  tmp___0 = lc_try_lock(mdev->act_log);
#line 666
  if (tmp___0 != 0) {
#line 666
    goto ldv_49727;
  } else {

  }
#line 666
  tmp___1 = get_current();
#line 666
  __wait.flags = 0U;
#line 666
  __wait.private = (void *)tmp___1;
#line 666
  __wait.func = & autoremove_wake_function;
#line 666
  __wait.task_list.next = & __wait.task_list;
#line 666
  __wait.task_list.prev = & __wait.task_list;
  ldv_49730: 
#line 666
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 666
  tmp___2 = lc_try_lock(mdev->act_log);
#line 666
  if (tmp___2 != 0) {
#line 666
    goto ldv_49729;
  } else {

  }
#line 666
  schedule();
#line 666
  goto ldv_49730;
  ldv_49729: 
#line 666
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49727: 
#line 668
  i = 0;
#line 668
  goto ldv_49735;
  ldv_49734: 
#line 669
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 669
  enr = tmp___3->lc_number;
#line 670
  if (enr == 4294967295U) {
#line 671
    goto ldv_49731;
  } else {

  }
#line 672
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 672
  tmp = (int )tmp___4;
#line 673
  descriptor.modname = "drbd";
#line 673
  descriptor.function = "drbd_al_apply_to_bm";
#line 673
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 673
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 673
  descriptor.lineno = 673U;
#line 673
  descriptor.flags = 0U;
#line 673
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 673
  if (tmp___5 != 0L) {
#line 673
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 674
  add = (unsigned long )tmp + add;
  ldv_49731: 
#line 668
  i = i + 1;
  ldv_49735: ;
#line 668
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 669
    goto ldv_49734;
  } else {

  }
#line 677
  lc_unlock(mdev->act_log);
#line 678
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 680
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 680
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 681
  return;
}
}
#line 684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 688
  spin_lock_irq(& mdev->al_lock);
#line 689
  rv = al_ext->refcnt == 0U;
#line 690
  tmp = __builtin_expect(rv != 0, 1L);
#line 690
  if (tmp != 0L) {
#line 691
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 692
  spin_unlock_irq(& mdev->al_lock);
#line 694
  return (rv);
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 711
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 711
  if (tmp == 0) {
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            711);
  } else {

  }
#line 713
  i = 0;
#line 713
  goto ldv_49753;
  ldv_49752: 
#line 714
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 715
  if (al_ext->lc_number == 4294967295U) {
#line 716
    goto ldv_49747;
  } else {

  }
#line 717
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 717
  if (tmp___0 != 0) {
#line 717
    goto ldv_49748;
  } else {

  }
#line 717
  tmp___1 = get_current();
#line 717
  __wait.flags = 0U;
#line 717
  __wait.private = (void *)tmp___1;
#line 717
  __wait.func = & autoremove_wake_function;
#line 717
  __wait.task_list.next = & __wait.task_list;
#line 717
  __wait.task_list.prev = & __wait.task_list;
  ldv_49751: 
#line 717
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 717
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 717
  if (tmp___2 != 0) {
#line 717
    goto ldv_49750;
  } else {

  }
#line 717
  schedule();
#line 717
  goto ldv_49751;
  ldv_49750: 
#line 717
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49748: ;
  ldv_49747: 
#line 713
  i = i + 1;
  ldv_49753: ;
#line 713
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 714
    goto ldv_49752;
  } else {

  }
#line 720
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 721
  return;
}
}
#line 723 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 725
  __mptr = (struct drbd_work  const  *)w;
#line 725
  udw = (struct update_odbm_work *)__mptr;
#line 727
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 727
  if (tmp___0 == 0) {
#line 728
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 728
    if (tmp != 0) {
#line 729
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 730
    kfree((void const   *)udw);
#line 731
    return (1);
  } else {

  }
#line 734
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 734
  drbd_bm_write_page(mdev, tmp___1);
#line 735
  put_ldev(mdev);
#line 737
  kfree((void const   *)udw);
#line 739
  tmp___2 = drbd_bm_total_weight(mdev);
#line 739
  if (tmp___2 <= mdev->rs_failed) {
#line 740
    switch ((int )mdev->state.ldv_39162.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 743
    drbd_resync_finished(mdev);
    default: ;
#line 746
    goto ldv_49769;
    }
    ldv_49769: ;
  } else {

  }
#line 749
  drbd_bcast_sync_progress(mdev);
#line 751
  return (1);
}
}
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 769
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 769
  if (tmp == 0) {
#line 769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            769);
  } else {

  }
#line 773
  enr = (unsigned int )(sector >> 15);
#line 775
  e = lc_get(mdev->resync, enr);
#line 776
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 777
    __mptr = (struct lc_element  const  *)e;
#line 777
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 778
    if (ext->lce.lc_number == enr) {
#line 779
      if (success != 0) {
#line 780
        ext->rs_left = ext->rs_left - count;
      } else {
#line 782
        ext->rs_failed = ext->rs_failed + count;
      }
#line 783
      if (ext->rs_left < ext->rs_failed) {
#line 784
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39162.conn);
#line 784
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 797
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 806
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 806
      rs_left = tmp___1;
#line 807
      if (ext->flags != 0UL) {
#line 808
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 812
        ext->flags = 0UL;
      } else {

      }
#line 814
      if (ext->rs_failed != 0) {
#line 815
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 819
      ext->rs_left = rs_left;
#line 820
      ext->rs_failed = success == 0 ? count : 0;
#line 821
      lc_changed(mdev->resync, & ext->lce);
    }
#line 823
    lc_put(mdev->resync, & ext->lce);
#line 826
    if (ext->rs_left == ext->rs_failed) {
#line 827
      ext->rs_failed = 0;
#line 829
      tmp___2 = kmalloc(32UL, 32U);
#line 829
      udw = (struct update_odbm_work *)tmp___2;
#line 830
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 831
        udw->enr = ext->lce.lc_number;
#line 832
        udw->w.cb = & w_update_odbm;
#line 833
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 835
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 839
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 843
  return;
}
}
#line 846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 848
  now = jiffies;
#line 849
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 850
  next = (mdev->rs_last_mark + 1) % 8;
#line 851
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 852
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 855
      mdev->rs_mark_time[next] = now;
#line 856
      mdev->rs_mark_left[next] = still_to_go;
#line 857
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 859
  return;
}
}
#line 869 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 874
  count = 0UL;
#line 876
  wake_up = 0;
#line 879
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 880
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 882
    return;
  } else {

  }
#line 884
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 885
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 887
  _b = sector >= nr_sectors;
#line 887
  if (_b != 0) {
#line 887
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            887);
  } else {

  }
#line 887
  if (_b != 0) {
#line 887
    return;
  } else {

  }
#line 888
  _b___0 = esector >= nr_sectors;
#line 888
  if (_b___0 != 0) {
#line 888
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            888);
  } else {

  }
#line 888
  if (_b___0 != 0) {
#line 888
    esector = nr_sectors - 1UL;
  } else {

  }
#line 890
  lbnr = (nr_sectors - 1UL) >> 3;
#line 895
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 895
  if (tmp != 0L) {
#line 896
    return;
  } else {

  }
#line 897
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 897
  if (tmp___0 != 0L) {
#line 898
    ebnr = lbnr;
  } else {
#line 900
    ebnr = (esector - 7UL) >> 3;
  }
#line 901
  sbnr = (sector + 7UL) >> 3;
#line 903
  if (sbnr > ebnr) {
#line 904
    return;
  } else {

  }
#line 910
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 910
  count = (unsigned long )tmp___1;
#line 911
  if (count != 0UL) {
#line 911
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 911
    if (tmp___4 != 0) {
#line 912
      tmp___2 = drbd_bm_total_weight(mdev);
#line 912
      drbd_advance_rs_marks(mdev, tmp___2);
#line 913
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 913
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 914
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 915
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 919
      wake_up = 1;
#line 920
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 922
  if (wake_up != 0) {
#line 923
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 924
  return;
}
}
#line 934 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 939
  count = 0U;
#line 943
  if (size == 0) {
#line 944
    return (0);
  } else {

  }
#line 946
  if ((size < 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 949
    return (0);
  } else {

  }
#line 952
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 952
  if (tmp == 0) {
#line 953
    return (0);
  } else {

  }
#line 955
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 956
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 958
  _b = sector >= nr_sectors;
#line 958
  if (_b != 0) {
#line 958
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            958);
  } else {

  }
#line 958
  if (_b != 0) {
#line 959
    goto out;
  } else {

  }
#line 960
  _b___0 = esector >= nr_sectors;
#line 960
  if (_b___0 != 0) {
#line 960
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            960);
  } else {

  }
#line 960
  if (_b___0 != 0) {
#line 961
    esector = nr_sectors - 1UL;
  } else {

  }
#line 963
  lbnr = (nr_sectors - 1UL) >> 3;
#line 967
  sbnr = sector >> 3;
#line 968
  ebnr = esector >> 3;
#line 972
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 972
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 973
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 973
  count = (unsigned int )tmp___1;
#line 975
  enr = (unsigned int )(sector >> 15);
#line 976
  e = lc_find(mdev->resync, enr);
#line 977
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 978
    __mptr = (struct lc_element  const  *)e;
#line 978
    __mptr___0 = (struct lc_element  const  *)e;
#line 978
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 979
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 982
  put_ldev(mdev);
#line 984
  return ((int )count);
}
}
#line 988 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 992
  wakeup = 0;
#line 995
  spin_lock_irq(& mdev->al_lock);
#line 996
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 997
    spin_unlock_irq(& mdev->al_lock);
#line 998
    return (0);
  } else {

  }
#line 1000
  e = lc_get(mdev->resync, enr);
#line 1001
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1001
    __mptr = (struct lc_element  const  *)e;
#line 1001
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1001
    bm_ext = 0;
  }
#line 1002
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1003
    if (bm_ext->lce.lc_number != enr) {
#line 1004
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1005
      bm_ext->rs_failed = 0;
#line 1006
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1007
      wakeup = 1;
    } else {

    }
#line 1009
    if (bm_ext->lce.refcnt == 1U) {
#line 1010
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1011
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1013
  rs_flags = (mdev->resync)->flags;
#line 1014
  spin_unlock_irq(& mdev->al_lock);
#line 1015
  if (wakeup != 0) {
#line 1016
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1018
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1019
    if ((rs_flags & 4UL) != 0UL) {
#line 1020
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1022
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1022
    if (tmp != 0L) {
#line 1022
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1022), "i" (12UL));
      ldv_49856: ;
#line 1022
      goto ldv_49856;
    } else {

    }
  } else {

  }
#line 1025
  return (bm_ext);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1031
  rv = 0;
#line 1033
  spin_lock_irq(& mdev->al_lock);
#line 1034
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1034
  if (tmp != 0L) {
#line 1035
    rv = 1;
  } else {
#line 1037
    al_ext = lc_find(mdev->act_log, enr);
#line 1038
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1039
      if (al_ext->refcnt != 0U) {
#line 1040
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1043
  spin_unlock_irq(& mdev->al_lock);
#line 1050
  return (rv);
}
}
#line 1060 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1062
  enr = (unsigned int )(sector >> 15);
#line 1065
  sa = 200;
  retry: 
#line 1069
  __ret = 0;
#line 1069
  bm_ext = _bme_get(mdev, enr);
#line 1069
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1069
    tmp = get_current();
#line 1069
    __wait.flags = 0U;
#line 1069
    __wait.private = (void *)tmp;
#line 1069
    __wait.func = & autoremove_wake_function;
#line 1069
    __wait.task_list.next = & __wait.task_list;
#line 1069
    __wait.task_list.prev = & __wait.task_list;
    ldv_49877: 
#line 1069
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1069
    bm_ext = _bme_get(mdev, enr);
#line 1069
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1069
      goto ldv_49875;
    } else {

    }
#line 1069
    tmp___0 = get_current();
#line 1069
    tmp___1 = signal_pending(tmp___0);
#line 1069
    if (tmp___1 == 0) {
#line 1069
      schedule();
#line 1069
      goto ldv_49876;
    } else {

    }
#line 1069
    __ret = -512;
#line 1069
    goto ldv_49875;
    ldv_49876: ;
#line 1069
    goto ldv_49877;
    ldv_49875: 
#line 1069
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1069
  sig = __ret;
#line 1071
  if (sig != 0) {
#line 1072
    return (-4);
  } else {

  }
#line 1074
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1074
  if (tmp___2 != 0) {
#line 1075
    return (0);
  } else {

  }
#line 1077
  i = 0;
#line 1077
  goto ldv_49886;
  ldv_49885: 
#line 1078
  __ret___0 = 0;
#line 1078
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1078
  if (tmp___8 != 0) {
#line 1078
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1078
    if (tmp___9 == 0) {
#line 1078
      tmp___3 = get_current();
#line 1078
      __wait___0.flags = 0U;
#line 1078
      __wait___0.private = (void *)tmp___3;
#line 1078
      __wait___0.func = & autoremove_wake_function;
#line 1078
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1078
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49883: 
#line 1078
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1078
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1078
      if (tmp___4 == 0) {
#line 1078
        goto ldv_49881;
      } else {
#line 1078
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1078
        if (tmp___5 != 0) {
#line 1078
          goto ldv_49881;
        } else {

        }
      }
#line 1078
      tmp___6 = get_current();
#line 1078
      tmp___7 = signal_pending(tmp___6);
#line 1078
      if (tmp___7 == 0) {
#line 1078
        schedule();
#line 1078
        goto ldv_49882;
      } else {

      }
#line 1078
      __ret___0 = -512;
#line 1078
      goto ldv_49881;
      ldv_49882: ;
#line 1078
      goto ldv_49883;
      ldv_49881: 
#line 1078
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1078
  sig = __ret___0;
#line 1082
  if (sig != 0) {
#line 1082
    goto _L;
  } else {
#line 1082
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1082
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1083
      spin_lock_irq(& mdev->al_lock);
#line 1084
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1084
      if (tmp___10 == 0U) {
#line 1085
        bm_ext->flags = 0UL;
#line 1086
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1087
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1089
      spin_unlock_irq(& mdev->al_lock);
#line 1090
      if (sig != 0) {
#line 1091
        return (-4);
      } else {

      }
#line 1092
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1092
      if (tmp___11 != 0L) {
#line 1093
        return (-4);
      } else {

      }
#line 1094
      if (sa != 0) {
#line 1094
        sa = sa - 1;
#line 1094
        if (sa == 0) {
#line 1095
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1097
      goto retry;
    } else {

    }
  }
#line 1077
  i = i + 1;
  ldv_49886: ;
#line 1077
  if (i <= 3) {
#line 1078
    goto ldv_49885;
  } else {

  }
#line 1100
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1101
  return (0);
}
}
#line 1113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1115
  enr = (unsigned int )(sector >> 15);
#line 1116
  al_enr = enr * 4U;
#line 1121
  spin_lock_irq(& mdev->al_lock);
#line 1122
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1136
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1137
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1137
      __mptr = (struct lc_element  const  *)e;
#line 1137
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1137
      bm_ext = 0;
    }
#line 1138
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1139
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1139
      if (tmp != 0) {
#line 1139
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1139);
      } else {

      }
#line 1140
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1140
      if (tmp___0 == 0) {
#line 1140
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1140);
      } else {

      }
#line 1141
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1142
      mdev->resync_wenr = 4294967295U;
#line 1143
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1143
      if (tmp___1 == 0U) {
#line 1144
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1145
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1147
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1151
  e = lc_try_get(mdev->resync, enr);
#line 1152
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1152
    __mptr___0 = (struct lc_element  const  *)e;
#line 1152
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1152
    bm_ext = 0;
  }
#line 1153
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1154
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1154
    if (tmp___2 != 0) {
#line 1155
      goto proceed;
    } else {

    }
#line 1156
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1156
    if (tmp___3 == 0) {
#line 1157
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1163
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1164
      if (bm_ext->lce.refcnt == 0U) {
#line 1164
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1164);
      } else {

      }
    }
#line 1166
    goto check_al;
  } else {
#line 1169
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1170
      goto try_again;
    } else {

    }
#line 1172
    e = lc_get(mdev->resync, enr);
#line 1173
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1173
      __mptr___1 = (struct lc_element  const  *)e;
#line 1173
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1173
      bm_ext = 0;
    }
#line 1174
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1175
      rs_flags = (mdev->resync)->flags;
#line 1176
      if ((rs_flags & 4UL) != 0UL) {
#line 1177
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1179
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1179
      if (tmp___4 != 0L) {
#line 1179
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1179), "i" (12UL));
        ldv_49907: ;
#line 1179
        goto ldv_49907;
      } else {

      }
#line 1180
      goto try_again;
    } else {

    }
#line 1182
    if (bm_ext->lce.lc_number != enr) {
#line 1183
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1184
      bm_ext->rs_failed = 0;
#line 1185
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1186
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1187
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1187
      if (tmp___5 != 0) {
#line 1187
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1187);
      } else {

      }
    } else {

    }
#line 1189
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1190
    if (bm_ext->lce.refcnt != 1U) {
#line 1190
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1190);
    } else {

    }
#line 1191
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1192
    goto check_al;
  }
  check_al: 
#line 1195
  i = 0;
#line 1195
  goto ldv_49909;
  ldv_49908: 
#line 1196
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1196
  if (tmp___6 != 0L) {
#line 1197
    goto try_again;
  } else {

  }
#line 1198
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1198
  if (tmp___7 != 0) {
#line 1199
    goto try_again;
  } else {

  }
#line 1195
  i = i + 1;
  ldv_49909: ;
#line 1195
  if (i <= 3) {
#line 1196
    goto ldv_49908;
  } else {

  }
#line 1201
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1203
  mdev->resync_wenr = 4294967295U;
#line 1204
  spin_unlock_irq(& mdev->al_lock);
#line 1205
  return (0);
  try_again: ;
#line 1208
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1209
    mdev->resync_wenr = enr;
  } else {

  }
#line 1210
  spin_unlock_irq(& mdev->al_lock);
#line 1211
  return (-11);
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1216
  enr = (unsigned int )(sector >> 15);
#line 1221
  tmp = spinlock_check(& mdev->al_lock);
#line 1221
  flags = _raw_spin_lock_irqsave(tmp);
#line 1222
  e = lc_find(mdev->resync, enr);
#line 1223
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1223
    __mptr = (struct lc_element  const  *)e;
#line 1223
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1223
    bm_ext = 0;
  }
#line 1224
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1225
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1226
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1226
    if (tmp___0 != 0) {
#line 1227
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1228
    return;
  } else {

  }
#line 1231
  if (bm_ext->lce.refcnt == 0U) {
#line 1232
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1233
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1236
    return;
  } else {

  }
#line 1239
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1239
  if (tmp___1 == 0U) {
#line 1240
    bm_ext->flags = 0UL;
#line 1241
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1242
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1245
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1246
  return;
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1254
  spin_lock_irq(& mdev->al_lock);
#line 1256
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1256
  if (tmp != 0) {
#line 1257
    lc_reset(mdev->resync);
#line 1258
    put_ldev(mdev);
  } else {

  }
#line 1260
  mdev->resync_locked = 0U;
#line 1261
  mdev->resync_wenr = 4294967295U;
#line 1262
  spin_unlock_irq(& mdev->al_lock);
#line 1263
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1264
  return;
}
}
#line 1273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1279
  spin_lock_irq(& mdev->al_lock);
#line 1281
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1281
  if (tmp___3 != 0) {
#line 1283
    i = 0;
#line 1283
    goto ldv_49938;
    ldv_49937: 
#line 1284
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1285
    __mptr = (struct lc_element  const  *)e;
#line 1285
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1286
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1287
      goto ldv_49936;
    } else {

    }
#line 1288
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1289
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1292
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1292
      if (tmp != 0) {
#line 1292
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1292);
      } else {

      }
#line 1293
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1293
      if (tmp___0 == 0) {
#line 1293
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1293);
      } else {

      }
#line 1294
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1295
      mdev->resync_wenr = 4294967295U;
#line 1296
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1298
    if (bm_ext->lce.refcnt != 0U) {
#line 1299
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1301
      put_ldev(mdev);
#line 1302
      spin_unlock_irq(& mdev->al_lock);
#line 1303
      return (-11);
    } else {

    }
#line 1305
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1305
    if (tmp___1 != 0) {
#line 1305
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1305);
    } else {

    }
#line 1306
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1306
    if (tmp___2 != 0) {
#line 1306
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1306);
    } else {

    }
#line 1307
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_49936: 
#line 1283
    i = i + 1;
    ldv_49938: ;
#line 1283
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1284
      goto ldv_49937;
    } else {

    }

#line 1309
    if ((mdev->resync)->used != 0U) {
#line 1309
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1309);
    } else {

    }
#line 1310
    put_ldev(mdev);
  } else {

  }
#line 1312
  spin_unlock_irq(& mdev->al_lock);
#line 1313
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1315
  return (0);
}
}
#line 1324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1330
  wake_up = 0;
#line 1332
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1335
    return;
  } else {

  }
#line 1337
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1338
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1340
  _b = sector >= nr_sectors;
#line 1340
  if (_b != 0) {
#line 1340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1340);
  } else {

  }
#line 1340
  if (_b != 0) {
#line 1340
    return;
  } else {

  }
#line 1341
  _b___0 = esector >= nr_sectors;
#line 1341
  if (_b___0 != 0) {
#line 1341
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1341);
  } else {

  }
#line 1341
  if (_b___0 != 0) {
#line 1341
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1343
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1348
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1348
  if (tmp != 0L) {
#line 1349
    return;
  } else {

  }
#line 1350
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1350
  if (tmp___0 != 0L) {
#line 1351
    ebnr = lbnr;
  } else {
#line 1353
    ebnr = (esector - 7UL) >> 3;
  }
#line 1354
  sbnr = (sector + 7UL) >> 3;
#line 1356
  if (sbnr > ebnr) {
#line 1357
    return;
  } else {

  }
#line 1363
  spin_lock_irq(& mdev->al_lock);
#line 1364
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1364
  count = (unsigned long )tmp___1;
#line 1365
  if (count != 0UL) {
#line 1366
    mdev->rs_failed = mdev->rs_failed + count;
#line 1368
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1368
    if (tmp___2 != 0) {
#line 1369
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1370
      put_ldev(mdev);
    } else {

    }
#line 1375
    wake_up = 1;
  } else {

  }
#line 1377
  spin_unlock_irq(& mdev->al_lock);
#line 1378
  if (wake_up != 0) {
#line 1379
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1380
  return;
}
}
#line 1382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_125(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1387
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1389
  mutex_lock(ldv_func_arg1);
#line 1390
  return;
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_126(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1397
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1399
  mutex_unlock(ldv_func_arg1);
#line 1400
  return;
}
}
#line 1402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_127(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1407
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1409
  mutex_lock(ldv_func_arg1);
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_128(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1417
  tmp = mutex_trylock(ldv_func_arg1);
#line 1417
  ldv_func_res = tmp;
#line 1419
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1419
  return (tmp___0);
#line 1421
  return (ldv_func_res);
}
}
#line 1424 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_129(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1429
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1431
  mutex_unlock(ldv_func_arg1);
#line 1432
  return;
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_130(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1439
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1441
  mutex_lock(ldv_func_arg1);
#line 1442
  return;
}
}
#line 1444 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_131(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1449
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1451
  mutex_unlock(ldv_func_arg1);
#line 1452
  return;
}
}
#line 1454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_132(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1459
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1461
  mutex_lock(ldv_func_arg1);
#line 1462
  return;
}
}
#line 1464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_133(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1469
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1471
  mutex_unlock(ldv_func_arg1);
#line 1472
  return;
}
}
#line 1474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_134(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1479
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1481
  mutex_unlock(ldv_func_arg1);
#line 1482
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 314 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 316
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 317
  return;
}
}
#line 459 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 461
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 461
  return ((unsigned int )tmp);
}
}
#line 653
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 655
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_148(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_151(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_153(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_154(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_159(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_160(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_162(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_164(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_168(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_170(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_172(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_174(struct mutex *ldv_func_arg1 ) ;
#line 236
void ldv_mutex_unlock_176(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_150(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_152(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_158(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_161(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_163(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_169(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_171(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) ;
#line 66
void ldv_mutex_lock_175(struct mutex *ldv_func_arg1 ) ;
#line 87
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 91
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 119
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 123
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6345;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6345;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6345;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6345;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6345: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 210
extern int del_timer(struct timer_list * ) ;
#line 281 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 305
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 125 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 128
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 205 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 205
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 205
  return (tmp);
}
}
#line 2234 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2235
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2236
extern struct block_device *bdget(dev_t  ) ;
#line 2241
extern void bdput(struct block_device * ) ;
#line 2284
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1900 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2181
extern int wake_up_process(struct task_struct * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 47 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 48
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 410 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 415
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 609
extern struct gendisk *alloc_disk(int  ) ;
#line 611
extern void put_disk(struct gendisk * ) ;
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 66
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 67
extern void mempool_free_pages(void * , void * ) ;
#line 68 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 70
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 70
  return (tmp);
}
}
#line 213 "include/linux/bio.h"
extern void bioset_free(struct bio_set * ) ;
#line 217
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 851 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 852
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 853
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 855
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 886
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 892
extern void blk_queue_flush(struct request_queue * , unsigned int  ) ;
#line 903
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_49150: ;
#line 593
    goto ldv_49150;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_49165: ;
#line 618
    goto ldv_49165;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1167
  ldv_mutex_lock_152(& mdev->data.mutex);
#line 1170
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1170
  if (tmp != 0L) {
#line 1171
    ldv_mutex_unlock_153(& mdev->data.mutex);
#line 1172
    return (0);
  } else {

  }
#line 1174
  return (1);
}
}
#line 1177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1179
  ldv_mutex_unlock_154(& mdev->data.mutex);
#line 1180
  return;
}
}
#line 1201
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1215
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1221
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1226
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1232
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1236
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1239
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1275
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1277
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1282
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1288
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1289
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1290
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1292
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1298
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1502 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1503 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1521 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1522 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1530 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1540
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1541
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1543 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1553
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1554
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1721
void drbd_nl_cleanup(void) ;
#line 1722
int drbd_nl_init(void) ;
#line 1723
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1808 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1810
  tmp = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1810
  if (tmp == 0) {
#line 1810
    goto ldv_50261;
  } else {

  }
#line 1810
  tmp___0 = get_current();
#line 1810
  __wait.flags = 0U;
#line 1810
  __wait.private = (void *)tmp___0;
#line 1810
  __wait.func = & autoremove_wake_function;
#line 1810
  __wait.task_list.next = & __wait.task_list;
#line 1810
  __wait.task_list.prev = & __wait.task_list;
  ldv_50264: 
#line 1810
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1810
  tmp___1 = test_and_set_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1810
  if (tmp___1 == 0) {
#line 1810
    goto ldv_50263;
  } else {

  }
#line 1810
  schedule();
#line 1810
  goto ldv_50264;
  ldv_50263: 
#line 1810
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50261: ;
#line 1813
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , enum drbd_force_detach_flags forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1861
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1863
  if ((unsigned int )forcedetach == 0U) {
#line 1864
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1864
    if (tmp != 0) {
#line 1865
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1866
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1867
      __ns.i = mdev->state.i;
#line 1867
      __ns.ldv_39162.disk = 4U;
#line 1867
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1868
    goto ldv_50293;
  } else {

  }
  case 2: ;
  case 1: 
#line 1873
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 1874
  if ((unsigned int )forcedetach == 2U) {
#line 1875
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1876
  if ((int )mdev->state.ldv_39162.disk > 2) {
#line 1877
    __ns___0.i = mdev->state.i;
#line 1877
    __ns___0.ldv_39162.disk = 2U;
#line 1877
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1881
  goto ldv_50293;
  }
  ldv_50293: ;
#line 1884
  return;
}
}
#line 1894 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1897
  if (error != 0) {
#line 1899
    tmp = spinlock_check(& mdev->req_lock);
#line 1899
    flags = _raw_spin_lock_irqsave(tmp);
#line 1900
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1901
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1903
  return;
}
}
#line 1956 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1959
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1963
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1963
  if (tmp___1 != 0UL) {
#line 1963
    __min1 = 2251799813685248UL;
#line 1963
    tmp___0 = drbd_md_first_sector(bdev);
#line 1963
    __min2 = tmp___0;
#line 1963
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1963
    s = 0UL;
  }
#line 1966
  goto ldv_50334;
  case -2: 
#line 1968
  __min1___0 = 2251799813685248UL;
#line 1968
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  __min2___0 = tmp___2;
#line 1968
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1971
  __min1___1 = s;
#line 1971
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1971
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1974
  goto ldv_50334;
  default: 
#line 1976
  __min1___2 = 8587575296UL;
#line 1976
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1976
  __min2___2 = tmp___3;
#line 1976
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50334: ;
#line 1979
  return (s);
}
}
#line 1987 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1990
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1992
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1998
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1999
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1999
    if (tmp != 0) {
#line 2000
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 2001
      dump_stack();
    } else {

    }
#line 2003
    return (0UL);
  } else {

  }
#line 2005
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 2005
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 2008
  return (0UL);
  }
}
}
#line 2070 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2072
  _drbd_thread_stop(thi, 0, 0);
#line 2073
  return;
}
}
#line 2075 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2077
  _drbd_thread_stop(thi, 1, 0);
#line 2078
  return;
}
}
#line 2292 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2294
  s = mdev->state;
#line 2299
  switch ((unsigned int )s.ldv_39162.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2324
  goto ldv_50465;
  case 13U: ;
#line 2328
  if (mdev->agreed_pro_version <= 95) {
#line 2329
    return (0);
  } else {

  }
#line 2330
  goto ldv_50465;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2337
  return (0);
  }
  ldv_50465: ;
#line 2340
  switch ((unsigned int )s.ldv_39162.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2348
  goto ldv_50476;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2356
  return (0);
  }
  ldv_50476: ;
#line 2359
  return (1);
}
}
#line 2367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2369
  tmp = drbd_get_max_buffers(mdev);
#line 2369
  mxb = tmp;
#line 2371
  tmp___0 = is_susp(mdev->state);
#line 2371
  if (tmp___0 != 0) {
#line 2372
    return (0);
  } else {

  }
#line 2373
  tmp___1 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 2373
  if (tmp___1 != 0) {
#line 2374
    return (0);
  } else {

  }
#line 2381
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2381
  if (tmp___2 == 0) {
#line 2382
    return (0);
  } else {

  }
#line 2386
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2386
  if (tmp___3 > mxb) {
#line 2387
    return (0);
  } else {

  }
#line 2388
  tmp___4 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2388
  if (tmp___4 != 0) {
#line 2389
    return (0);
  } else {

  }
#line 2390
  return (1);
}
}
#line 2472 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2474
  sk = (mdev->data.socket)->sk;
#line 2475
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2476
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2477
  return;
}
}
#line 2479 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2486
  return (0);
}
}
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_50730;
  ldv_50729: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_50730: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_50729;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 136
int drbd_init(void) ;
#line 137
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 138
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 139
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 140
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 142
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 143
static void md_sync_timer_fn(unsigned long data ) ;
#line 144
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 145
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 146
static void _tl_clear(struct drbd_conf *mdev ) ;
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 192
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 223
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;
  struct bio *tmp___0 ;

  {
#line 231
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 232
    tmp = bio_alloc(gfp_mask, 1U);
#line 232
    return (tmp);
  } else {

  }
#line 234
  tmp___0 = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 234
  return (tmp___0);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 271
  tmp = kmalloc(56UL, 208U);
#line 271
  b = (struct drbd_tl_epoch *)tmp;
#line 272
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 273
    return (0);
  } else {

  }
#line 274
  INIT_LIST_HEAD(& b->requests);
#line 275
  INIT_LIST_HEAD(& b->w.list);
#line 276
  b->next = 0;
#line 277
  b->br_number = 4711U;
#line 278
  b->n_writes = 0;
#line 279
  b->w.cb = 0;
#line 281
  mdev->oldest_tle = b;
#line 282
  mdev->newest_tle = b;
#line 283
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 284
  INIT_LIST_HEAD(& mdev->barrier_acked_requests);
#line 286
  mdev->tl_hash = 0;
#line 287
  mdev->tl_hash_s = 0U;
#line 289
  return (1);
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 294
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            294);
  } else {

  }
#line 295
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 295
  if (tmp == 0) {
#line 295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            295);
  } else {

  }
#line 296
  kfree((void const   *)mdev->oldest_tle);
#line 297
  mdev->oldest_tle = 0;
#line 298
  kfree((void const   *)mdev->unused_spare_tle);
#line 299
  mdev->unused_spare_tle = 0;
#line 300
  kfree((void const   *)mdev->tl_hash);
#line 301
  mdev->tl_hash = 0;
#line 302
  mdev->tl_hash_s = 0U;
#line 303
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 316
  INIT_LIST_HEAD(& new->requests);
#line 317
  INIT_LIST_HEAD(& new->w.list);
#line 318
  new->w.cb = 0;
#line 319
  new->next = 0;
#line 320
  new->n_writes = 0;
#line 322
  newest_before = mdev->newest_tle;
#line 323
  new->br_number = newest_before->br_number + 1U;
#line 324
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 325
    (mdev->newest_tle)->next = new;
#line 326
    mdev->newest_tle = new;
  } else {

  }
#line 328
  return;
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 347
  spin_lock_irq(& mdev->req_lock);
#line 349
  b = mdev->oldest_tle;
#line 352
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 353
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 355
    goto bail;
  } else {

  }
#line 357
  if (b->br_number != barrier_nr) {
#line 358
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 360
    goto bail;
  } else {

  }
#line 362
  if ((unsigned int )b->n_writes != set_size) {
#line 363
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 365
    goto bail;
  } else {

  }
#line 369
  le = b->requests.next;
#line 369
  tle = le->next;
#line 369
  goto ldv_50965;
  ldv_50964: 
#line 370
  __mptr = (struct list_head  const  *)le;
#line 370
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 371
  _req_mod(r, barrier_acked);
#line 369
  le = tle;
#line 369
  tle = le->next;
  ldv_50965: ;
#line 369
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 370
    goto ldv_50964;
  } else {

  }
#line 386
  list_splice_init(& b->requests, & mdev->barrier_acked_requests);
#line 388
  nob = b->next;
#line 389
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 389
  if (tmp != 0) {
#line 390
    _tl_add_barrier(mdev, b);
#line 391
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 392
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 396
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 396
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              396);
    } else {

    }
#line 397
    mdev->oldest_tle = nob;
#line 398
    kfree((void const   *)b);
  }
#line 401
  spin_unlock_irq(& mdev->req_lock);
#line 402
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 402
  if (tmp___0 != 0) {
#line 402
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 402
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 402
  if (tmp___2 < 0) {
#line 402
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 402
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 402, tmp___1);
  } else {

  }
#line 404
  return;
  bail: 
#line 407
  spin_unlock_irq(& mdev->req_lock);
#line 408
  val.i = 0U;
#line 408
  val.ldv_39162.conn = 6U;
#line 408
  mask.i = 0U;
#line 408
  mask.ldv_39162.conn = 31U;
#line 408
  drbd_force_state(mdev, mask, val);
#line 410
  return;
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 427
  b = mdev->oldest_tle;
#line 428
  pn = & mdev->oldest_tle;
#line 429
  goto ldv_51000;
  ldv_50999: 
#line 430
  n_writes = 0;
#line 431
  n_reads = 0;
#line 432
  INIT_LIST_HEAD(& carry_reads);
#line 433
  le = b->requests.next;
#line 433
  tle = le->next;
#line 433
  goto ldv_50992;
  ldv_50991: 
#line 434
  __mptr = (struct list_head  const  *)le;
#line 434
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 435
  rv = _req_mod(req, what);
#line 437
  n_writes = (rv & 1) + n_writes;
#line 438
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 433
  le = tle;
#line 433
  tle = le->next;
  ldv_50992: ;
#line 433
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 434
    goto ldv_50991;
  } else {

  }
#line 440
  tmp = b->next;
#line 442
  if (n_writes != 0) {
#line 443
    if ((unsigned int )what == 24U) {
#line 444
      b->n_writes = n_writes;
#line 445
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 446
        b->w.cb = & w_send_barrier;
#line 447
        inc_ap_pending(mdev);
#line 448
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 451
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 453
    pn = & b->next;
  } else {
#line 455
    if (n_reads != 0) {
#line 456
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 459
    list_del(& b->requests);
#line 464
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 465
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 465
      if (tmp___0 != 0) {
#line 465
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 465
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 465
      if (tmp___2 < 0) {
#line 465
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 465
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 465, tmp___1);
      } else {

      }
    } else {

    }
#line 467
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 469
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 469
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                469);
      } else {

      }
#line 470
      INIT_LIST_HEAD(& b->requests);
#line 471
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 472
      INIT_LIST_HEAD(& b->w.list);
#line 473
      b->w.cb = 0;
#line 474
      b->br_number = random32();
#line 475
      b->n_writes = 0;
#line 477
      *pn = b;
#line 478
      goto ldv_50998;
    } else {

    }
#line 480
    *pn = tmp;
#line 481
    kfree((void const   *)b);
  }
#line 483
  b = tmp;
#line 484
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_51000: ;
#line 429
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 430
    goto ldv_50999;
  } else {

  }
  ldv_50998: 
#line 490
  le = mdev->barrier_acked_requests.next;
#line 490
  tle = le->next;
#line 490
  goto ldv_51004;
  ldv_51003: 
#line 491
  __mptr___0 = (struct list_head  const  *)le;
#line 491
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 492
  _req_mod(req, what);
#line 490
  le = tle;
#line 490
  tle = le->next;
  ldv_51004: ;
#line 490
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 491
    goto ldv_51003;
  } else {

  }

#line 495
  return;
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 


  {
#line 507
  spin_lock_irq(& mdev->req_lock);
#line 508
  _tl_clear(mdev);
#line 509
  spin_unlock_irq(& mdev->req_lock);
#line 510
  return;
}
}
#line 512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 517
  _tl_restart(mdev, connection_lost_while_pending);
#line 520
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 520
  if (tmp == 0) {
#line 520
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            520);
  } else {

  }
#line 523
  le = mdev->out_of_sequence_requests.next;
#line 523
  tle = le->next;
#line 523
  goto ldv_51018;
  ldv_51017: 
#line 524
  __mptr = (struct list_head  const  *)le;
#line 524
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 527
  _req_mod(r, connection_lost_while_pending);
#line 523
  le = tle;
#line 523
  tle = le->next;
  ldv_51018: ;
#line 523
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 524
    goto ldv_51017;
  } else {

  }
#line 531
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 533
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 534
  return;
}
}
#line 537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 539
  spin_lock_irq(& mdev->req_lock);
#line 540
  _tl_restart(mdev, what);
#line 541
  spin_unlock_irq(& mdev->req_lock);
#line 542
  return;
}
}
#line 548 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 554
  spin_lock_irq(& mdev->req_lock);
#line 555
  b = mdev->oldest_tle;
#line 556
  goto ldv_51038;
  ldv_51037: 
#line 557
  le = b->requests.next;
#line 557
  tle = le->next;
#line 557
  goto ldv_51035;
  ldv_51034: 
#line 558
  __mptr = (struct list_head  const  *)le;
#line 558
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 559
  if ((req->rq_state & 1UL) == 0UL) {
#line 560
    goto ldv_51033;
  } else {

  }
#line 561
  _req_mod(req, abort_disk_io);
  ldv_51033: 
#line 557
  le = tle;
#line 557
  tle = le->next;
  ldv_51035: ;
#line 557
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 558
    goto ldv_51034;
  } else {

  }
#line 563
  b = b->next;
  ldv_51038: ;
#line 556
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 557
    goto ldv_51037;
  } else {

  }
#line 566
  le = mdev->barrier_acked_requests.next;
#line 566
  tle = le->next;
#line 566
  goto ldv_51044;
  ldv_51043: 
#line 567
  __mptr___0 = (struct list_head  const  *)le;
#line 567
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 568
  if ((req->rq_state & 1UL) == 0UL) {
#line 569
    goto ldv_51042;
  } else {

  }
#line 570
  _req_mod(req, abort_disk_io);
  ldv_51042: 
#line 566
  le = tle;
#line 566
  tle = le->next;
  ldv_51044: ;
#line 566
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 567
    goto ldv_51043;
  } else {

  }
#line 573
  spin_unlock_irq(& mdev->req_lock);
#line 574
  return;
}
}
#line 582 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 585
  return (((((int )os.ldv_39162.conn > 9 && (int )ns.ldv_39162.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_39162.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 602
  tmp = spinlock_check(& mdev->req_lock);
#line 602
  flags = _raw_spin_lock_irqsave(tmp);
#line 603
  os = mdev->state;
#line 604
  ns.i = (os.i & ~ mask.i) | val.i;
#line 605
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 606
  ns = mdev->state;
#line 607
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 609
  return (rv);
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 621
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 622
  return;
}
}
#line 624
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 625
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 636
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) ;
#line 638
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 642 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 649
  tmp = test_and_clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 649
  if (tmp != 0) {
#line 650
    return (SS_CW_SUCCESS);
  } else {

  }
#line 652
  tmp___0 = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 652
  if (tmp___0 != 0) {
#line 653
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 655
  rv = SS_UNKNOWN_ERROR;
#line 656
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 656
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 657
  os = mdev->state;
#line 658
  ns.i = (os.i & ~ mask.i) | val.i;
#line 659
  ns = sanitize_state(mdev, os, ns, 0);
#line 661
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 661
  if (tmp___2 == 0) {
#line 662
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 663
  if ((int )rv == 0) {
#line 664
    rv = is_valid_state(mdev, ns);
#line 665
    if ((int )rv == 1) {
#line 666
      rv = is_valid_state_transition(mdev, ns, os);
#line 667
      if ((int )rv == 1) {
#line 668
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 671
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 673
  return (rv);
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 695
  init_completion(& done);
#line 697
  if (((unsigned int )f & 8U) != 0U) {
#line 698
    ldv_mutex_lock_155(& mdev->state_mutex);
  } else {

  }
#line 700
  tmp = spinlock_check(& mdev->req_lock);
#line 700
  flags = _raw_spin_lock_irqsave(tmp);
#line 701
  os = mdev->state;
#line 702
  ns.i = (os.i & ~ mask.i) | val.i;
#line 703
  ns = sanitize_state(mdev, os, ns, 0);
#line 705
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 705
  if (tmp___3 != 0) {
#line 706
    rv = is_valid_state(mdev, ns);
#line 707
    if ((int )rv == 1) {
#line 708
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 709
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 711
    if ((int )rv <= 0) {
#line 712
      if (((unsigned int )f & 2U) != 0U) {
#line 713
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 714
      goto abort;
    } else {

    }
#line 717
    drbd_state_lock___0(mdev);
#line 718
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 718
    if (tmp___0 == 0) {
#line 719
      drbd_state_unlock(mdev);
#line 720
      rv = SS_CW_FAILED_BY_PEER;
#line 721
      if (((unsigned int )f & 2U) != 0U) {
#line 722
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 723
      goto abort;
    } else {

    }
#line 726
    rv = _req_st_cond(mdev, mask, val);
#line 726
    if ((int )rv != 0) {
#line 726
      goto ldv_51119;
    } else {

    }
#line 726
    tmp___1 = get_current();
#line 726
    __wait.flags = 0U;
#line 726
    __wait.private = (void *)tmp___1;
#line 726
    __wait.func = & autoremove_wake_function;
#line 726
    __wait.task_list.next = & __wait.task_list;
#line 726
    __wait.task_list.prev = & __wait.task_list;
    ldv_51122: 
#line 726
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 726
    rv = _req_st_cond(mdev, mask, val);
#line 726
    if ((int )rv != 0) {
#line 726
      goto ldv_51121;
    } else {

    }
#line 726
    schedule();
#line 726
    goto ldv_51122;
    ldv_51121: 
#line 726
    finish_wait(& mdev->state_wait, & __wait);
    ldv_51119: ;
#line 729
    if ((int )rv <= 0) {
#line 730
      drbd_state_unlock(mdev);
#line 731
      if (((unsigned int )f & 2U) != 0U) {
#line 732
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 733
      goto abort;
    } else {

    }
#line 735
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 735
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 736
    os = mdev->state;
#line 737
    ns.i = (os.i & ~ mask.i) | val.i;
#line 738
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 739
    drbd_state_unlock(mdev);
  } else {
#line 741
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 744
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 746
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 747
    tmp___4 = get_current();
#line 747
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 747
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              747);
    } else {

    }
#line 748
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 752
  if (((unsigned int )f & 8U) != 0U) {
#line 753
    ldv_mutex_unlock_156(& mdev->state_mutex);
  } else {

  }
#line 755
  return (rv);
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 774
  rv = drbd_req_state(mdev, mask, val, f);
#line 774
  if ((int )rv != -18) {
#line 774
    goto ldv_51133;
  } else {

  }
#line 774
  tmp = get_current();
#line 774
  __wait.flags = 0U;
#line 774
  __wait.private = (void *)tmp;
#line 774
  __wait.func = & autoremove_wake_function;
#line 774
  __wait.task_list.next = & __wait.task_list;
#line 774
  __wait.task_list.prev = & __wait.task_list;
  ldv_51136: 
#line 774
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 774
  rv = drbd_req_state(mdev, mask, val, f);
#line 774
  if ((int )rv != -18) {
#line 774
    goto ldv_51135;
  } else {

  }
#line 774
  schedule();
#line 774
  goto ldv_51136;
  ldv_51135: 
#line 774
  finish_wait(& mdev->state_wait, & __wait);
  ldv_51133: ;
#line 777
  return (rv);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 782
  tmp = is_susp(ns);
#line 782
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39162.pdsk);
#line 782
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39162.disk);
#line 782
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_39162.peer);
#line 782
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_39162.role);
#line 782
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_39162.conn);
#line 782
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 793
  return;
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 799
  if ((int )err == -18) {
#line 800
    return;
  } else {

  }
#line 801
  tmp = drbd_set_st_err_str(err);
#line 801
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 802
  print_st(mdev, (char *)" state", os);
#line 803
  print_st(mdev, (char *)"wanted", ns);
#line 804
  return;
}
}
#line 813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 818
  rv = 1;
#line 820
  fp = FP_DONT_CARE;
#line 821
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 821
  if (tmp != 0) {
#line 822
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 823
    put_ldev(mdev);
  } else {

  }
#line 826
  tmp___0 = get_net_conf(mdev);
#line 826
  if (tmp___0 != 0) {
#line 827
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 829
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 830
    put_net_conf(mdev);
  } else {

  }
#line 833
  if ((int )rv <= 0) {

  } else
#line 835
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 836
    rv = SS_DEVICE_IN_USE;
  } else
#line 838
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39162.conn <= 9) && (int )ns.ldv_39162.disk <= 7) {
#line 839
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 841
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_39162.conn <= 9) && (int )ns.ldv_39162.pdsk > 5) {
#line 843
    rv = SS_PRIMARY_NOP;
  } else
#line 845
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39162.disk <= 4) && (int )ns.ldv_39162.pdsk <= 4) {
#line 846
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 848
  if ((int )ns.ldv_39162.conn > 10 && (int )ns.ldv_39162.disk <= 3) {
#line 849
    rv = SS_NO_LOCAL_DISK;
  } else
#line 851
  if ((int )ns.ldv_39162.conn > 10 && (int )ns.ldv_39162.pdsk <= 3) {
#line 852
    rv = SS_NO_REMOTE_DISK;
  } else
#line 854
  if (((int )ns.ldv_39162.conn > 10 && (int )ns.ldv_39162.disk <= 7) && (int )ns.ldv_39162.pdsk <= 7) {
#line 855
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 857
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 862
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 864
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 866
    rv = SS_NO_VERIFY_ALG;
  } else
#line 868
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 870
    rv = SS_NOT_SUPPORTED;
  } else
#line 872
  if ((int )ns.ldv_39162.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 873
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 875
  return (rv);
}
}
#line 885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 888
  rv = 1;
#line 890
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_39162.conn > 10) {
#line 892
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 894
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 895
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 897
  if ((int )ns.ldv_39162.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 898
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 900
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_39162.conn <= 1) {
#line 901
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 903
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_39162.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 904
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 906
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 907
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 909
  if ((int )ns.ldv_39162.conn == (int )os.ldv_39162.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 910
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 914
  tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 914
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 917
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 919
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_39162.conn <= 9) {
#line 920
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 922
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_39162.conn != (int )os.ldv_39162.conn) && (int )os.ldv_39162.conn > 10) {
#line 924
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 926
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_39162.conn <= 9) {
#line 928
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 930
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_39162.conn <= 8) {
#line 932
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 934
  return (rv);
}
}
#line 937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 939
  msg_table[0] = "";
#line 939
  msg_table[1] = "Online-verify aborted.";
#line 939
  msg_table[2] = "Resync aborted.";
#line 939
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 939
  msg_table[4] = "Implicitly upgraded disk";
#line 939
  msg_table[5] = "Implicitly upgraded pdsk";
#line 948
  if ((unsigned int )warn != 0U) {
#line 949
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 950
  return;
}
}
#line 962 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;

  {
#line 968
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 969
    *warn = NO_WARNING;
  } else {

  }
#line 971
  fp = FP_DONT_CARE;
#line 972
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 972
  if (tmp != 0) {
#line 973
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 974
    put_ldev(mdev);
  } else {

  }
#line 978
  if (((int )ns.ldv_39162.conn > 2 && (int )ns.ldv_39162.conn <= 7) && (int )os.ldv_39162.conn <= 1) {
#line 980
    ns.ldv_39162.conn = os.ldv_39162.conn;
  } else {

  }
#line 984
  if (((((int )os.ldv_39162.conn > 2 && (int )os.ldv_39162.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_39162.conn <= 10) {
#line 986
    ns.ldv_39162.conn = os.ldv_39162.conn;
  } else {

  }
#line 989
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 990
    ns.ldv_39162.disk = 0U;
  } else {

  }
#line 993
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 994
    ns.ldv_39162.conn = os.ldv_39162.conn;
  } else {

  }
#line 996
  if ((int )ns.ldv_39162.conn <= 9) {
#line 997
    ns.ldv_39162.peer_isp = 0U;
#line 998
    ns.ldv_39162.peer = 0U;
#line 999
    if ((int )ns.ldv_39162.pdsk > 6 || (int )ns.ldv_39162.pdsk <= 3) {
#line 1000
      ns.ldv_39162.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 1004
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1005
    ns.ldv_39162.aftr_isp = 0U;
  } else {

  }
#line 1008
  if (((int )os.ldv_39162.conn > 10 && (int )ns.ldv_39162.conn > 10) && ((int )ns.ldv_39162.disk <= 2 || (int )ns.ldv_39162.pdsk <= 2)) {
#line 1010
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1011
      *warn = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 1013
    ns.ldv_39162.conn = 10U;
  } else {

  }
#line 1017
  if ((int )ns.ldv_39162.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1017
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1017
    if (tmp___0 != 0) {
#line 1019
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 1020
        ns.ldv_39162.disk = mdev->new_state_tmp.ldv_39162.disk;
#line 1021
        ns.ldv_39162.pdsk = mdev->new_state_tmp.ldv_39162.pdsk;
      } else {
#line 1023
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1024
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 1025
        ns.ldv_39162.disk = 0U;
#line 1026
        ns.ldv_39162.pdsk = 6U;
      }
#line 1028
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1032
  if ((int )ns.ldv_39162.conn > 9 && (int )ns.ldv_39162.conn <= 21) {
#line 1033
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 1034
      ns.ldv_39162.disk = 8U;
    } else {

    }
#line 1035
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 1036
      ns.ldv_39162.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 1040
  disk_min = D_DISKLESS;
#line 1041
  disk_max = D_UP_TO_DATE;
#line 1042
  pdsk_min = D_INCONSISTENT;
#line 1043
  pdsk_max = D_UNKNOWN;
#line 1044
  switch ((unsigned int )ns.ldv_39162.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 1050
  disk_min = D_INCONSISTENT;
#line 1051
  disk_max = D_OUTDATED;
#line 1052
  pdsk_min = D_UP_TO_DATE;
#line 1053
  pdsk_max = D_UP_TO_DATE;
#line 1054
  goto ldv_51181;
  case 18U: ;
  case 19U: 
#line 1057
  disk_min = D_UP_TO_DATE;
#line 1058
  disk_max = D_UP_TO_DATE;
#line 1059
  pdsk_min = D_UP_TO_DATE;
#line 1060
  pdsk_max = D_UP_TO_DATE;
#line 1061
  goto ldv_51181;
  case 10U: 
#line 1063
  disk_min = D_DISKLESS;
#line 1064
  disk_max = D_UP_TO_DATE;
#line 1065
  pdsk_min = D_DISKLESS;
#line 1066
  pdsk_max = D_UP_TO_DATE;
#line 1067
  goto ldv_51181;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 1072
  disk_min = D_UP_TO_DATE;
#line 1073
  disk_max = D_UP_TO_DATE;
#line 1074
  pdsk_min = D_INCONSISTENT;
#line 1075
  pdsk_max = D_CONSISTENT;
#line 1076
  goto ldv_51181;
  case 17U: 
#line 1078
  disk_min = D_INCONSISTENT;
#line 1079
  disk_max = D_INCONSISTENT;
#line 1080
  pdsk_min = D_UP_TO_DATE;
#line 1081
  pdsk_max = D_UP_TO_DATE;
#line 1082
  goto ldv_51181;
  case 16U: 
#line 1084
  disk_min = D_UP_TO_DATE;
#line 1085
  disk_max = D_UP_TO_DATE;
#line 1086
  pdsk_min = D_INCONSISTENT;
#line 1087
  pdsk_max = D_INCONSISTENT;
#line 1088
  goto ldv_51181;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1100
  goto ldv_51181;
  }
  ldv_51181: ;
#line 1102
  if ((unsigned int )ns.ldv_39162.disk > (unsigned int )disk_max) {
#line 1103
    ns.ldv_39162.disk = (unsigned char )disk_max;
  } else {

  }
#line 1105
  if ((unsigned int )ns.ldv_39162.disk < (unsigned int )disk_min) {
#line 1106
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1107
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 1108
    ns.ldv_39162.disk = (unsigned char )disk_min;
  } else {

  }
#line 1110
  if ((unsigned int )ns.ldv_39162.pdsk > (unsigned int )pdsk_max) {
#line 1111
    ns.ldv_39162.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1113
  if ((unsigned int )ns.ldv_39162.pdsk < (unsigned int )pdsk_min) {
#line 1114
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1115
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 1116
    ns.ldv_39162.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1119
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39162.conn <= 9) && (int )ns.ldv_39162.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39162.conn > 9) || (int )os.ldv_39162.pdsk <= 5)) {
#line 1122
    ns.ldv_39162.susp_fen = 1U;
  } else {

  }
#line 1124
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39162.disk <= 7) && (int )ns.ldv_39162.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39162.disk > 7) || (int )os.ldv_39162.pdsk > 7)) {
#line 1127
    ns.ldv_39162.susp_nod = 1U;
  } else {

  }
#line 1129
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1130
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1131
      ns.ldv_39162.conn = 20U;
    } else {

    }
#line 1132
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1133
      ns.ldv_39162.conn = 21U;
    } else {

    }
  } else {
#line 1135
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1136
      ns.ldv_39162.conn = 16U;
    } else {

    }
#line 1137
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1138
      ns.ldv_39162.conn = 17U;
    } else {

    }
  }
#line 1141
  return (ns);
}
}
#line 1145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1147
  if (mdev->agreed_pro_version <= 89) {
#line 1148
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1149
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1150
  mdev->ov_position = 0UL;
#line 1151
  if ((unsigned int )cs == 19U) {
#line 1157
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1159
    bit = mdev->ov_start_sector >> 3;
#line 1160
    if (mdev->rs_total <= bit) {
#line 1161
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1163
      mdev->rs_total = 1UL;
    } else {
#line 1165
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1166
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1168
  mdev->ov_left = mdev->rs_total;
#line 1169
  return;
}
}
#line 1171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1173
  tmp = test_and_clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1173
  if (tmp != 0) {
#line 1174
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1175
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1191
  rv = 1;
#line 1195
  os = mdev->state;
#line 1197
  ns = sanitize_state(mdev, os, ns, & ssw);
#line 1199
  if (ns.i == os.i) {
#line 1200
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1202
  if (((unsigned int )flags & 1U) == 0U) {
#line 1206
    rv = is_valid_state(mdev, ns);
#line 1207
    if ((int )rv <= 0) {
#line 1211
      tmp = is_valid_state(mdev, os);
#line 1211
      if ((int )tmp == (int )rv) {
#line 1212
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1214
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1217
  if ((int )rv <= 0) {
#line 1218
    if (((unsigned int )flags & 2U) != 0U) {
#line 1219
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1220
    return (rv);
  } else {

  }
#line 1223
  print_sanitize_warnings(mdev, ssw);
#line 1227
  pbp = (char *)(& pb);
#line 1228
  *pbp = 0;
#line 1229
  if ((int )ns.ldv_39162.role != (int )os.ldv_39162.role) {
#line 1230
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_39162.role);
#line 1230
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_39162.role);
#line 1230
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1230
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1233
  if ((int )ns.ldv_39162.peer != (int )os.ldv_39162.peer) {
#line 1234
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_39162.peer);
#line 1234
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_39162.peer);
#line 1234
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1234
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1237
  if ((int )ns.ldv_39162.conn != (int )os.ldv_39162.conn) {
#line 1238
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_39162.conn);
#line 1238
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_39162.conn);
#line 1238
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1238
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1241
  if ((int )ns.ldv_39162.disk != (int )os.ldv_39162.disk) {
#line 1242
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39162.disk);
#line 1242
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_39162.disk);
#line 1242
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1242
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1245
  if ((int )ns.ldv_39162.pdsk != (int )os.ldv_39162.pdsk) {
#line 1246
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39162.pdsk);
#line 1246
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_39162.pdsk);
#line 1246
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1246
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1249
  tmp___18 = is_susp(ns);
#line 1249
  tmp___19 = is_susp(os);
#line 1249
  if (tmp___18 != tmp___19) {
#line 1250
    tmp___15 = is_susp(ns);
#line 1250
    tmp___16 = is_susp(os);
#line 1250
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1250
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1253
  if ((int )ns.ldv_39162.aftr_isp != (int )os.ldv_39162.aftr_isp) {
#line 1254
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_39162.aftr_isp,
                       (int )ns.ldv_39162.aftr_isp);
#line 1254
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1257
  if ((int )ns.ldv_39162.peer_isp != (int )os.ldv_39162.peer_isp) {
#line 1258
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_39162.peer_isp,
                       (int )ns.ldv_39162.peer_isp);
#line 1258
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1261
  if ((int )ns.ldv_39162.user_isp != (int )os.ldv_39162.user_isp) {
#line 1262
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_39162.user_isp,
                       (int )ns.ldv_39162.user_isp);
#line 1262
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1265
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1276
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1276
    tmp___23 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 1276
    if (tmp___23 == 0) {
#line 1280
      set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1286
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1288
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1290
  mdev->state = ns;
#line 1292
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_39162.disk > 2) {
#line 1293
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1295
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1296
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1299
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_39162.conn <= 9) {
#line 1301
    tmp___24 = drbd_bm_bits(mdev);
#line 1301
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1303
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1307
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1309
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1310
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1312
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1313
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1316
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1318
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1319
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1322
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1324
    now = jiffies;
#line 1327
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_39162.conn);
#line 1328
    mdev->rs_start = now;
#line 1329
    mdev->rs_last_events = 0;
#line 1330
    mdev->rs_last_sect_ev = 0;
#line 1331
    mdev->ov_last_oos_size = 0UL;
#line 1332
    mdev->ov_last_oos_start = 0UL;
#line 1334
    i = 0;
#line 1334
    goto ldv_51225;
    ldv_51224: 
#line 1335
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1336
    mdev->rs_mark_time[i] = now;
#line 1334
    i = i + 1;
    ldv_51225: ;
#line 1334
    if (i <= 7) {
#line 1335
      goto ldv_51224;
    } else {

    }
#line 1339
    drbd_rs_controller_reset(mdev);
#line 1341
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1342
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1344
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1348
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1348
  if (tmp___26 != 0) {
#line 1349
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1353
    tmp___25 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 1353
    if (tmp___25 != 0) {
#line 1354
      mdf = mdf | 64U;
    } else {

    }
#line 1355
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_39162.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1357
      mdf = mdf | 2U;
    } else {

    }
#line 1358
    if ((int )mdev->state.ldv_39162.conn > 9) {
#line 1359
      mdf = mdf | 4U;
    } else {

    }
#line 1360
    if ((int )mdev->state.ldv_39162.disk > 4) {
#line 1361
      mdf = mdf | 1U;
    } else {

    }
#line 1362
    if ((int )mdev->state.ldv_39162.disk > 5) {
#line 1363
      mdf = mdf | 16U;
    } else {

    }
#line 1364
    if ((int )mdev->state.ldv_39162.pdsk <= 5 && (int )mdev->state.ldv_39162.pdsk > 3) {
#line 1365
      mdf = mdf | 32U;
    } else {

    }
#line 1366
    if ((mdev->ldev)->md.flags != mdf) {
#line 1367
      (mdev->ldev)->md.flags = mdf;
#line 1368
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1370
    if ((int )os.ldv_39162.disk <= 6 && (int )ns.ldv_39162.disk > 6) {
#line 1371
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1372
    put_ldev(mdev);
  } else {

  }
#line 1376
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1378
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1381
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1382
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1385
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1386
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1389
  if (((int )os.ldv_39162.conn > 8 && (int )ns.ldv_39162.conn <= 7) && (int )ns.ldv_39162.conn > 2) {
#line 1391
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1394
  if ((int )os.ldv_39162.conn <= 9 && (int )ns.ldv_39162.conn > 9) {
#line 1395
    drbd_resume_al(mdev);
  } else {

  }
#line 1400
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 1401
    mdev->last_reconnect_jif = jiffies;
  } else {

  }
#line 1402
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_39162.disk > 3) {
#line 1404
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1406
  tmp___27 = kmalloc(48UL, 32U);
#line 1406
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1407
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1408
    ascw->os = os;
#line 1409
    ascw->ns = ns;
#line 1410
    ascw->flags = flags;
#line 1411
    ascw->w.cb = & w_after_state_ch;
#line 1412
    ascw->done = done;
#line 1413
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1415
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1418
  return (rv);
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1424
  __mptr = (struct drbd_work  const  *)w;
#line 1424
  ascw = (struct after_state_chg_work *)__mptr;
#line 1425
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1426
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1427
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1427
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1427);
    } else {

    }
#line 1428
    complete(ascw->done);
  } else {

  }
#line 1430
  kfree((void const   *)ascw);
#line 1432
  return (1);
}
}
#line 1435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1437
  if (rv != 0) {
#line 1438
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1439
    val.i = 0U;
#line 1439
    val.ldv_39162.conn = 10U;
#line 1439
    mask.i = 0U;
#line 1439
    mask.ldv_39162.conn = 31U;
#line 1439
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1440
    return;
  } else {

  }
#line 1443
  switch ((int )mdev->state.ldv_39162.conn) {
  case 12: 
#line 1445
  val___0.i = 0U;
#line 1445
  val___0.ldv_39162.conn = 15U;
#line 1445
  mask___0.i = 0U;
#line 1445
  mask___0.ldv_39162.conn = 31U;
#line 1445
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1446
  goto ldv_51249;
  case 11: 
#line 1448
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1449
  goto ldv_51249;
  }
  ldv_51249: ;
#line 1452
  return;
}
}
#line 1453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1459
  tmp = get_current();
#line 1459
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1459
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1459);
  } else {

  }
#line 1462
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1464
  drbd_bm_lock(mdev, why, flags);
#line 1465
  rv = (*io_fn)(mdev);
#line 1466
  drbd_bm_unlock(mdev);
#line 1468
  drbd_resume_io(mdev);
#line 1470
  return (rv);
}
}
#line 1480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 1484
  what = nothing;
#line 1485
  nsm.i = 4294967295U;
#line 1487
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1488
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 1489
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1490
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1493
  fp = FP_DONT_CARE;
#line 1494
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1494
  if (tmp != 0) {
#line 1495
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1496
    put_ldev(mdev);
  } else {

  }
#line 1500
  drbd_bcast_state(mdev, ns);
#line 1502
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39162.disk > 7) || (int )os.ldv_39162.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39162.disk <= 7) && (int )ns.ldv_39162.pdsk <= 7)) {
#line 1504
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1509
  if ((int )os.ldv_39162.disk <= 3 && (int )ns.ldv_39162.disk > 3) {
#line 1510
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
  } else {

  }
#line 1512
  nsm.i = 4294967295U;
#line 1513
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1514
    if ((int )os.ldv_39162.conn <= 9 && (int )ns.ldv_39162.conn > 9) {
#line 1515
      what = resend;
    } else {

    }
#line 1517
    if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_39162.disk > 3) {
#line 1519
      what = restart_frozen_disk_io;
    } else {

    }
#line 1521
    if ((unsigned int )what != 27U) {
#line 1522
      nsm.ldv_39162.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1525
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1527
    if ((int )os.ldv_39162.pdsk > 5 && (int )ns.ldv_39162.pdsk <= 5) {
#line 1528
      tmp___0 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 1528
      if (tmp___0 != 0) {
#line 1529
        drbd_uuid_new_current(mdev);
#line 1530
        clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1532
      spin_lock_irq(& mdev->req_lock);
#line 1533
      _tl_clear(mdev);
#line 1534
      __ns.i = mdev->state.i;
#line 1534
      __ns.ldv_39162.susp_fen = 0U;
#line 1534
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1535
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1538
    if ((int )os.ldv_39162.conn <= 9 && (int )ns.ldv_39162.conn > 9) {
#line 1539
      clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 1540
      what = resend;
#line 1541
      nsm.ldv_39162.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1545
  if ((unsigned int )what != 27U) {
#line 1546
    spin_lock_irq(& mdev->req_lock);
#line 1547
    _tl_restart(mdev, what);
#line 1548
    nsm.i = nsm.i & mdev->state.i;
#line 1549
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1550
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1557
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1557
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1557
    if (tmp___1 != 0) {
#line 1560
      drbd_gen_and_send_sync_uuid(mdev);
#line 1561
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1565
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_39162.pdsk > 0) {
#line 1568
    mdev->rs_total = 0UL;
#line 1569
    mdev->rs_failed = 0UL;
#line 1570
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1571
    drbd_rs_cancel_all(mdev);
#line 1573
    drbd_send_uuids(mdev);
#line 1574
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1579
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1581
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1586
  if ((((int )os.ldv_39162.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_39162.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1592
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1592
    if (tmp___3 != 0) {
#line 1593
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_39162.disk > 7) {
#line 1595
        tmp___2 = is_susp(mdev->state);
#line 1595
        if (tmp___2 != 0) {
#line 1596
          set_bit(26U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1598
          drbd_uuid_new_current(mdev);
#line 1599
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1602
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1606
  if ((int )ns.ldv_39162.pdsk <= 3) {
#line 1606
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1606
    if (tmp___4 != 0) {
#line 1607
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_39162.disk > 7) {
#line 1609
        drbd_uuid_new_current(mdev);
#line 1610
        drbd_send_uuids(mdev);
      } else {

      }
#line 1613
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1617
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1619
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1625
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_39162.conn <= 10) {
#line 1625
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1625
    if (tmp___5 != 0) {
#line 1629
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1631
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1635
  if (((int )ns.ldv_39162.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1637
    drbd_send_sizes(mdev, 0, 0);
#line 1638
    drbd_send_uuids(mdev);
#line 1639
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1643
  if ((int )ns.ldv_39162.conn > 9 && ((int )os.ldv_39162.aftr_isp != (int )ns.ldv_39162.aftr_isp || (int )os.ldv_39162.user_isp != (int )ns.ldv_39162.user_isp)) {
#line 1646
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1649
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1651
    suspend_other_sg(mdev);
  } else {

  }
#line 1655
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_39162.conn > 9) {
#line 1656
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1658
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1659
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1662
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1665
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1670
  if ((((int )os.ldv_39162.conn <= 9 && (int )ns.ldv_39162.conn <= 9) && (int )os.ldv_39162.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1673
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1678
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1679
    eh = EP_PASS_ON;
#line 1680
    was_io_error = 0;
#line 1685
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1686
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1687
      was_io_error = test_and_clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 1689
      if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1690
        drbd_khelper(mdev, (char *)"local-io-error");
      } else {

      }
#line 1705
      tmp___6 = test_and_clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1705
      if (tmp___6 != 0) {
#line 1706
        tl_abort_disk_io(mdev);
      } else {

      }
#line 1711
      if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1712
        tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.disk);
#line 1712
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___7);
      } else {

      }
#line 1716
      if ((int )ns.ldv_39162.conn > 9) {
#line 1717
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1719
      drbd_rs_cancel_all(mdev);
#line 1724
      drbd_md_sync(mdev);
    } else {

    }
#line 1726
    put_ldev(mdev);
  } else {

  }
#line 1732
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1735
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1736
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39162.disk);
#line 1736
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1740
    if ((int )ns.ldv_39162.conn > 9) {
#line 1741
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1745
    put_ldev(mdev);
  } else {

  }
#line 1749
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_39162.conn > 9) {
#line 1750
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1753
  if ((int )ns.ldv_39162.disk > 3 && (int )ns.ldv_39162.pdsk > 3) {
#line 1753
    tmp___9 = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1753
    if (tmp___9 != 0) {
#line 1755
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1756
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1760
  if ((((int )os.ldv_39162.conn > 10 && (int )ns.ldv_39162.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1763
    resume_next_sg(mdev);
  } else {

  }
#line 1767
  if (((int )os.ldv_39162.disk <= 7 && (int )os.ldv_39162.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1768
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1771
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1772
    clear_bit(29, (unsigned long volatile   *)(& mdev->flags));
#line 1773
    __wake_up(& mdev->state_wait, 3U, 1, 0);
  } else {

  }
#line 1783
  if ((int )os.ldv_39162.conn > 10 && (int )ns.ldv_39162.conn <= 10) {
#line 1783
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1783
    if (tmp___10 != 0) {
#line 1784
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1786
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1790
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1790
    tmp___11 = is_susp(ns);
#line 1790
    if (tmp___11 == 0) {
#line 1790
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1791
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1794
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1795
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1799
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1802
    if ((int )os.ldv_39162.aftr_isp != (int )ns.ldv_39162.aftr_isp) {
#line 1803
      resume_next_sg(mdev);
    } else {

    }
#line 1805
    tmp___12 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1805
    if (tmp___12 != 0) {
#line 1806
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1809
  drbd_md_sync(mdev);
#line 1810
  return;
}
}
#line 1813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1815
  thi = (struct drbd_thread *)arg;
#line 1816
  mdev = thi->mdev;
  restart: 
#line 1821
  retval = (*(thi->function))(thi);
#line 1823
  tmp = spinlock_check(& thi->t_lock);
#line 1823
  flags = _raw_spin_lock_irqsave(tmp);
#line 1835
  if ((unsigned int )thi->t_state == 3U) {
#line 1836
    tmp___0 = get_current();
#line 1836
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1837
    thi->t_state = Running;
#line 1838
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1839
    goto restart;
  } else {

  }
#line 1842
  thi->task = 0;
#line 1843
  thi->t_state = None;
#line 1844
  __asm__  volatile   ("mfence": : : "memory");
#line 1845
  complete(& thi->stop);
#line 1846
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1848
  tmp___1 = get_current();
#line 1848
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1851
  module_put(& __this_module);
#line 1852
  return (retval);
}
}
#line 1855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1858
  spinlock_check(& thi->t_lock);
#line 1858
  __raw_spin_lock_init(& thi->t_lock.ldv_5954.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1859
  thi->task = 0;
#line 1860
  thi->t_state = None;
#line 1861
  thi->function = func;
#line 1862
  thi->mdev = mdev;
#line 1863
  return;
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 1867
  mdev = thi->mdev;
#line 1871
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1878
  tmp = spinlock_check(& thi->t_lock);
#line 1878
  flags = _raw_spin_lock_irqsave(tmp);
#line 1880
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1882
  tmp___0 = get_current();
#line 1882
  tmp___1 = get_current();
#line 1882
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1886
  tmp___2 = try_module_get(& __this_module);
#line 1886
  if (tmp___2) {
#line 1886
    tmp___3 = 0;
  } else {
#line 1886
    tmp___3 = 1;
  }
#line 1886
  if (tmp___3) {
#line 1887
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1888
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1889
    return (0);
  } else {

  }
#line 1892
  init_completion(& thi->stop);
#line 1893
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1893
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1893);
  } else {

  }
#line 1894
  thi->reset_cpu_mask = 1;
#line 1895
  thi->t_state = Running;
#line 1896
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1897
  tmp___4 = get_current();
#line 1897
  flush_signals(tmp___4);
#line 1899
  tmp___5 = mdev_to_minor(mdev);
#line 1899
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___5,
                              me);
#line 1902
  tmp___6 = IS_ERR((void const   *)nt);
#line 1902
  if (tmp___6 != 0L) {
#line 1903
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1905
    module_put(& __this_module);
#line 1906
    return (0);
  } else {

  }
#line 1908
  tmp___7 = spinlock_check(& thi->t_lock);
#line 1908
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1909
  thi->task = nt;
#line 1910
  thi->t_state = Running;
#line 1911
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1912
  wake_up_process(nt);
#line 1913
  goto ldv_51305;
  case 2U: 
#line 1915
  thi->t_state = Restarting;
#line 1916
  tmp___8 = get_current();
#line 1916
  tmp___9 = get_current();
#line 1916
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___9->comm), tmp___8->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1922
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1923
  goto ldv_51305;
  }
  ldv_51305: ;
#line 1926
  return (1);
}
}
#line 1930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1934
  ns = restart != 0 ? Restarting : Exiting;
#line 1937
  tmp = spinlock_check(& thi->t_lock);
#line 1937
  flags = _raw_spin_lock_irqsave(tmp);
#line 1939
  if ((unsigned int )thi->t_state == 0U) {
#line 1940
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1941
    if (restart != 0) {
#line 1942
      drbd_thread_start(thi);
    } else {

    }
#line 1943
    return;
  } else {

  }
#line 1946
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1947
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1948
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1949
      return;
    } else {

    }
#line 1952
    thi->t_state = ns;
#line 1953
    __asm__  volatile   ("mfence": : : "memory");
#line 1954
    init_completion(& thi->stop);
#line 1955
    tmp___0 = get_current();
#line 1955
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1956
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1960
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1962
  if (wait != 0) {
#line 1963
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1964
  return;
}
}
#line 1974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1979
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1979
  if (tmp != 0U) {
#line 1980
    return;
  } else {

  }
#line 1982
  tmp___0 = mdev_to_minor(mdev);
#line 1982
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1982
  ord = (int )(tmp___0 % tmp___1);
#line 1983
  cpu = -1;
#line 1983
  goto ldv_51326;
  ldv_51325: 
#line 1984
  tmp___2 = ord;
#line 1984
  ord = ord - 1;
#line 1984
  if (tmp___2 == 0) {
#line 1985
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1986
    return;
  } else {

  }
  ldv_51326: 
#line 1983
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1983
  cpu = (int )tmp___3;
#line 1983
  if (cpu < nr_cpu_ids) {
#line 1984
    goto ldv_51325;
  } else {

  }
#line 1990
  cpumask_setall(mdev->cpu_mask);
#line 1991
  return;
}
}
#line 2000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 2002
  tmp = get_current();
#line 2002
  p = tmp;
#line 2003
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 2008
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 2008
  if (_b != 0) {
#line 2008
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2008);
  } else {

  }
#line 2008
  if (_b != 0) {
#line 2009
    return;
  } else {

  }
#line 2010
  if (thi->reset_cpu_mask == 0) {
#line 2011
    return;
  } else {

  }
#line 2012
  thi->reset_cpu_mask = 0;
#line 2013
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 2014
  return;
}
}
#line 2018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 2024
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 2024
  if (_b != 0) {
#line 2024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2024);
  } else {

  }
#line 2024
  if (_b != 0) {
#line 2024
    return (0);
  } else {

  }
#line 2025
  _b___0 = size == 0UL;
#line 2025
  if (_b___0 != 0) {
#line 2025
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2025);
  } else {

  }
#line 2025
  if (_b___0 != 0) {
#line 2025
    return (0);
  } else {

  }
#line 2027
  h->magic = 1728214147U;
#line 2028
  tmp = __fswab16((int )((__u16 )cmd));
#line 2028
  h->command = tmp;
#line 2029
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 2029
  h->length = tmp___0;
#line 2031
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 2033
  ok = (size_t )sent == size;
#line 2034
  if (ok == 0) {
#line 2034
    tmp___2 = get_current();
#line 2034
    tmp___3 = signal_pending(tmp___2);
#line 2034
    if (tmp___3 == 0) {
#line 2035
      tmp___1 = cmdname(cmd);
#line 2035
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 2037
  return (ok);
}
}
#line 2043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 2046
  ok = 0;
#line 2049
  if (use_data_socket != 0) {
#line 2050
    ldv_mutex_lock_157(& mdev->data.mutex);
#line 2051
    sock = mdev->data.socket;
  } else {
#line 2053
    ldv_mutex_lock_158(& mdev->meta.mutex);
#line 2054
    sock = mdev->meta.socket;
  }
#line 2059
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 2059
  if (tmp != 0L) {
#line 2060
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 2062
  if (use_data_socket != 0) {
#line 2063
    ldv_mutex_unlock_159(& mdev->data.mutex);
  } else {
#line 2065
    ldv_mutex_unlock_160(& mdev->meta.mutex);
  }
#line 2066
  return (ok);
}
}
#line 2069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2075
  h.magic = 1728214147U;
#line 2076
  tmp = __fswab16((int )((__u16 )cmd));
#line 2076
  h.command = tmp;
#line 2077
  tmp___0 = __fswab16((int )((__u16 )size));
#line 2077
  h.length = tmp___0;
#line 2079
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 2079
  if (tmp___1 == 0) {
#line 2080
    return (0);
  } else {

  }
#line 2082
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 2082
  ok = tmp___2 == 8;
#line 2084
  if (ok != 0) {
#line 2084
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 2084
    if ((size_t )tmp___3 == size) {
#line 2084
      tmp___4 = 1;
    } else {
#line 2084
      tmp___4 = 0;
    }
  } else {
#line 2084
    tmp___4 = 0;
  }
#line 2084
  ok = tmp___4;
#line 2087
  drbd_put_data_sock___0(mdev);
#line 2089
  return (ok);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 2097
  apv = mdev->agreed_pro_version;
#line 2099
  if (apv > 87) {
#line 2099
    if (apv == 88) {
#line 2099
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 2099
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 2099
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 2099
    size = tmp___0;
  } else {
#line 2099
    size = 12;
  }
#line 2108
  ldv_mutex_lock_161(& mdev->data.mutex);
#line 2109
  sock = mdev->data.socket;
#line 2111
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2111
  if (tmp___6 != 0L) {
#line 2112
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 2114
    p = & mdev->data.sbuf.rs_param_95;
#line 2117
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2119
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2119
    p->rate = tmp___1;
#line 2120
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2120
    p->c_plan_ahead = tmp___2;
#line 2121
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2121
    p->c_delay_target = tmp___3;
#line 2122
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2122
    p->c_fill_target = tmp___4;
#line 2123
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2123
    p->c_max_rate = tmp___5;
#line 2125
    if (apv > 87) {
#line 2126
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2127
    if (apv > 88) {
#line 2128
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2130
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2132
    rv = 0;
  }
#line 2134
  ldv_mutex_unlock_162(& mdev->data.mutex);
#line 2136
  return (rv);
}
}
#line 2139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2144
  size = 32;
#line 2146
  if (mdev->agreed_pro_version > 86) {
#line 2147
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2147
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2151
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2151
  p = (struct p_protocol *)tmp___0;
#line 2152
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2153
    return (0);
  } else {

  }
#line 2155
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2155
  p->protocol = tmp___1;
#line 2156
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2156
  p->after_sb_0p = tmp___2;
#line 2157
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2157
  p->after_sb_1p = tmp___3;
#line 2158
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2158
  p->after_sb_2p = tmp___4;
#line 2159
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2159
  p->two_primaries = tmp___5;
#line 2161
  cf = 0;
#line 2162
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2163
    cf = cf | 1;
  } else {

  }
#line 2164
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2165
    if (mdev->agreed_pro_version > 91) {
#line 2166
      cf = cf | 2;
    } else {
#line 2168
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2169
      kfree((void const   *)p);
#line 2170
      return (-1);
    }
  } else {

  }
#line 2173
  tmp___6 = __fswab32((__u32 )cf);
#line 2173
  p->conn_flags = tmp___6;
#line 2175
  if (mdev->agreed_pro_version > 86) {
#line 2176
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2178
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2180
  kfree((void const   *)p);
#line 2181
  return (rv);
}
}
#line 2184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2189
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2189
  if (tmp == 0) {
#line 2190
    return (1);
  } else {

  }
#line 2192
  i = 0;
#line 2192
  goto ldv_51392;
  ldv_51391: ;
#line 2193
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2193
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2193
    p.uuid[i] = tmp___0;
  } else {
#line 2193
    p.uuid[i] = 0ULL;
  }
#line 2192
  i = i + 1;
  ldv_51392: ;
#line 2192
  if (i <= 3) {
#line 2193
    goto ldv_51391;
  } else {

  }
#line 2195
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2196
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2196
  p.uuid[4] = tmp___1;
#line 2197
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2198
  tmp___2 = constant_test_bit(10U, (unsigned long const volatile   *)(& mdev->flags));
#line 2198
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2199
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2200
  tmp___3 = __fswab64(uuid_flags);
#line 2200
  p.uuid[5] = tmp___3;
#line 2202
  put_ldev(mdev);
#line 2204
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2204
  return (tmp___4);
}
}
#line 2208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2210
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2210
  return (tmp);
}
}
#line 2213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2215
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2215
  return (tmp);
}
}
#line 2218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2220
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2220
  if (tmp != 0) {
#line 2221
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2222
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2228
    put_ldev(mdev);
  } else {
#line 2230
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2231
  return;
}
}
#line 2236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2241
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2241
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2241);
  } else {

  }
#line 2243
  uuid = (mdev->ldev)->md.uuid[1];
#line 2244
  if (uuid != 0ULL && uuid != 4ULL) {
#line 2245
    uuid = uuid + 281474976710656ULL;
  } else {
#line 2247
    get_random_bytes((void *)(& uuid), 8);
  }
#line 2248
  drbd_uuid_set(mdev, 1, uuid);
#line 2249
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2250
  drbd_md_sync(mdev);
#line 2251
  tmp = __fswab64(uuid);
#line 2251
  p.uuid = tmp;
#line 2253
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2253
  return (tmp___0);
}
}
#line 2257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  unsigned int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___0 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2265
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2265
  if (tmp___0 != 0) {
#line 2266
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2266);
    } else {

    }
#line 2267
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2268
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2269
    q_order_type = drbd_queue_order_type(mdev);
#line 2270
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2270
    max_bio_size = tmp << 9;
#line 2271
    _min1 = max_bio_size;
#line 2271
    _min2 = 131072U;
#line 2271
    max_bio_size = _min1 < _min2 ? _min1 : _min2;
#line 2272
    put_ldev(mdev);
  } else {
#line 2274
    d_size = 0UL;
#line 2275
    u_size = 0UL;
#line 2276
    q_order_type = 0;
#line 2277
    max_bio_size = 131072U;
  }
#line 2281
  if (mdev->agreed_pro_version <= 94) {
#line 2282
    _min1___0 = max_bio_size;
#line 2282
    _min2___0 = 32768U;
#line 2282
    max_bio_size = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
  } else {

  }
#line 2284
  tmp___1 = __fswab64((__u64 )d_size);
#line 2284
  p.d_size = tmp___1;
#line 2285
  tmp___2 = __fswab64((__u64 )u_size);
#line 2285
  p.u_size = tmp___2;
#line 2286
  if (trigger_reply == 0) {
#line 2286
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2286
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2286
    tmp___4 = 0ULL;
  }
#line 2286
  tmp___5 = __fswab64(tmp___4);
#line 2286
  p.c_size = tmp___5;
#line 2287
  tmp___6 = __fswab32(max_bio_size);
#line 2287
  p.max_bio_size = tmp___6;
#line 2288
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2288
  p.queue_order_type = tmp___7;
#line 2289
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2289
  p.dds_flags = tmp___8;
#line 2291
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2293
  return (ok);
}
}
#line 2300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2304
  ok = 0;
#line 2308
  drbd_state_lock___0(mdev);
#line 2310
  ldv_mutex_lock_163(& mdev->data.mutex);
#line 2312
  tmp = __fswab32(mdev->state.i);
#line 2312
  p.state = tmp;
#line 2313
  sock = mdev->data.socket;
#line 2315
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2315
  if (tmp___0 != 0L) {
#line 2316
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2320
  ldv_mutex_unlock_164(& mdev->data.mutex);
#line 2322
  drbd_state_unlock(mdev);
#line 2323
  return (ok);
}
}
#line 2336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2340
  ok = 0;
#line 2342
  ldv_mutex_lock_165(& mdev->data.mutex);
#line 2344
  tmp = __fswab32(state.i);
#line 2344
  p.state = tmp;
#line 2345
  sock = mdev->data.socket;
#line 2347
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2347
  if (tmp___0 != 0L) {
#line 2348
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2352
  ldv_mutex_unlock_166(& mdev->data.mutex);
#line 2354
  return (ok);
}
}
#line 2357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2362
  tmp = __fswab32(mask.i);
#line 2362
  p.mask = tmp;
#line 2363
  tmp___0 = __fswab32(val.i);
#line 2363
  p.val = tmp___0;
#line 2365
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2365
  return (tmp___1);
}
}
#line 2369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2373
  tmp = __fswab32((__u32 )retcode);
#line 2373
  p.retcode = tmp;
#line 2375
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2375
  return (tmp___0);
}
}
#line 2379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2392
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2394
    return (0);
  } else {

  }
#line 2396
  if (c->bit_offset >= c->bm_bits) {
#line 2397
    return (0);
  } else {

  }
#line 2400
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2401
  memset((void *)(& p->code), 0, 4087UL);
#line 2403
  plain_bits = 0UL;
#line 2408
  toggle = 2U;
  ldv_51465: ;
#line 2413
  if (toggle == 0U) {
#line 2413
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2413
    tmp = tmp___0;
  } else {
#line 2413
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2413
    tmp = tmp___1;
  }
#line 2415
  if (tmp == 0xffffffffffffffffUL) {
#line 2416
    tmp = c->bm_bits;
  } else {

  }
#line 2417
  rl = tmp - c->bit_offset;
#line 2419
  if (toggle == 2U) {
#line 2420
    if (rl == 0UL) {
#line 2423
      DCBP_set_start(p, 1);
#line 2425
      toggle = toggle == 0U;
#line 2426
      goto ldv_51463;
    } else {

    }
#line 2428
    DCBP_set_start(p, 0);
  } else {

  }
#line 2433
  if (rl == 0UL) {
#line 2434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2436
    return (-1);
  } else {

  }
#line 2439
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2440
  if (bits == -105) {
#line 2441
    goto ldv_51464;
  } else {

  }
#line 2442
  if (bits <= 0) {
#line 2443
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2444
    return (0);
  } else {

  }
#line 2447
  toggle = toggle == 0U;
#line 2448
  plain_bits = plain_bits + rl;
#line 2449
  c->bit_offset = tmp;
  ldv_51463: ;
#line 2450
  if (c->bit_offset < c->bm_bits) {
#line 2451
    goto ldv_51465;
  } else {

  }
  ldv_51464: 
#line 2452
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2454
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2457
    c->bit_offset = c->bit_offset - plain_bits;
#line 2458
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2459
    c->bit_offset = c->word_offset * 64UL;
#line 2460
    return (0);
  } else {

  }
#line 2465
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2468
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2470
  return ((int )len);
}
}
#line 2480 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2483
  p = (struct p_compressed_bm *)h;
#line 2488
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2490
  if (len < 0) {
#line 2491
    return (-5);
  } else {

  }
#line 2493
  if (len != 0) {
#line 2494
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2495
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2498
    c->packets[0] = c->packets[0] + 1U;
#line 2499
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2501
    if (c->bit_offset >= c->bm_bits) {
#line 2502
      len = 0;
    } else {

    }
  } else {
#line 2506
    __min1 = 511UL;
#line 2506
    __min2 = c->bm_words - c->word_offset;
#line 2506
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2507
    len = (int )((unsigned int )num_words * 8U);
#line 2508
    if (len != 0) {
#line 2509
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2510
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2512
    c->word_offset = c->word_offset + num_words;
#line 2513
    c->bit_offset = c->word_offset * 64UL;
#line 2515
    c->packets[1] = c->packets[1] + 1U;
#line 2516
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2518
    if (c->bit_offset > c->bm_bits) {
#line 2519
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2521
  if (ok != 0) {
#line 2522
    if (len == 0) {
#line 2523
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2524
      return (0);
    } else {
#line 2526
      return (1);
    }
  } else {

  }
#line 2528
  return (-5);
}
}
#line 2532 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2538
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2538
  if (_b != 0) {
#line 2538
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2538);
  } else {

  }
#line 2538
  if (_b != 0) {
#line 2538
    return (0);
  } else {

  }
#line 2542
  tmp = __get_free_pages(16U, 0U);
#line 2542
  p = (struct p_header80 *)tmp;
#line 2543
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2545
    return (0);
  } else {

  }
#line 2548
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2548
  if (tmp___2 != 0) {
#line 2549
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2549
    if (tmp___1 != 0) {
#line 2550
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2551
      drbd_bm_set_all(mdev);
#line 2552
      tmp___0 = drbd_bm_write(mdev);
#line 2552
      if (tmp___0 != 0) {
#line 2556
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2558
        drbd_md_clear_flag(mdev, 8);
#line 2559
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2562
    put_ldev(mdev);
  } else {

  }
#line 2565
  tmp___3 = drbd_bm_bits(mdev);
#line 2565
  tmp___4 = drbd_bm_words(mdev);
#line 2565
  __constr_expr_0.bm_bits = tmp___3;
#line 2565
  __constr_expr_0.bm_words = tmp___4;
#line 2565
  __constr_expr_0.bit_offset = 0UL;
#line 2565
  __constr_expr_0.word_offset = 0UL;
#line 2565
  __constr_expr_0.packets[0] = 0U;
#line 2565
  __constr_expr_0.packets[1] = 0U;
#line 2565
  __constr_expr_0.bytes[0] = 0U;
#line 2565
  __constr_expr_0.bytes[1] = 0U;
#line 2565
  c = __constr_expr_0;
  ldv_51488: 
#line 2571
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2572
  if (err > 0) {
#line 2573
    goto ldv_51488;
  } else {

  }
#line 2574
  free_pages((unsigned long )p, 0U);
#line 2575
  return (err == 0);
}
}
#line 2578 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2582
  tmp = drbd_get_data_sock___0(mdev);
#line 2582
  if (tmp == 0) {
#line 2583
    return (-1);
  } else {

  }
#line 2584
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2584
  err = tmp___0 == 0;
#line 2585
  drbd_put_data_sock___0(mdev);
#line 2586
  return (err);
}
}
#line 2589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2594
  p.barrier = barrier_nr;
#line 2595
  tmp = __fswab32(set_size);
#line 2595
  p.set_size = tmp;
#line 2597
  if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 2598
    return (0);
  } else {

  }
#line 2599
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2601
  return (ok);
}
}
#line 2612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2620
  p.sector = sector;
#line 2621
  p.block_id = block_id;
#line 2622
  p.blksize = blksize;
#line 2623
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2623
  tmp___0 = __fswab32((__u32 )tmp);
#line 2623
  p.seq_num = tmp___0;
#line 2625
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_39162.conn <= 9) {
#line 2626
    return (0);
  } else {

  }
#line 2627
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2629
  return (ok);
}
}
#line 2635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2638
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2638
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2638
    tmp___0 = tmp;
  } else {
#line 2638
    tmp___0 = 0U;
  }
#line 2638
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2640
  tmp___1 = __fswab32((__u32 )data_size);
#line 2640
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2640
  return (tmp___2);
}
}
#line 2644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2647
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2647
  return (tmp);
}
}
#line 2656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2659
  tmp = __fswab32(e->size);
#line 2659
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2659
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_48227.block_id);
#line 2659
  return (tmp___1);
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2670
  tmp = __fswab64(block_id);
#line 2670
  tmp___0 = __fswab32((__u32 )blksize);
#line 2670
  tmp___1 = __fswab64((__u64 )sector);
#line 2670
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2670
  return (tmp___2);
}
}
#line 2676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2682
  tmp = __fswab64((__u64 )sector);
#line 2682
  p.sector = tmp;
#line 2683
  p.block_id = block_id;
#line 2684
  tmp___0 = __fswab32((__u32 )size);
#line 2684
  p.blksize = tmp___0;
#line 2686
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2688
  return (ok);
}
}
#line 2691 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2699
  tmp = __fswab64((__u64 )sector);
#line 2699
  p.sector = tmp;
#line 2700
  p.block_id = 1728263026ULL;
#line 2701
  tmp___0 = __fswab32((__u32 )size);
#line 2701
  p.blksize = tmp___0;
#line 2703
  p.head.magic = 1728214147U;
#line 2704
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2704
  p.head.command = tmp___1;
#line 2705
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2705
  p.head.length = tmp___2;
#line 2707
  ldv_mutex_lock_167(& mdev->data.mutex);
#line 2709
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2709
  ok = tmp___3 == 32;
#line 2710
  if (ok != 0) {
#line 2710
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2710
    if (tmp___4 == digest_size) {
#line 2710
      tmp___5 = 1;
    } else {
#line 2710
      tmp___5 = 0;
    }
  } else {
#line 2710
    tmp___5 = 0;
  }
#line 2710
  ok = tmp___5;
#line 2712
  ldv_mutex_unlock_168(& mdev->data.mutex);
#line 2714
  return (ok);
}
}
#line 2717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2722
  tmp = __fswab64((__u64 )sector);
#line 2722
  p.sector = tmp;
#line 2723
  p.block_id = 1728261953ULL;
#line 2724
  tmp___0 = __fswab32((__u32 )size);
#line 2724
  p.blksize = tmp___0;
#line 2726
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2728
  return (ok);
}
}
#line 2735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2740
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2740
    tmp___0 = 1;
  } else {
#line 2740
    tmp = get_t_state(& mdev->asender);
#line 2740
    if ((unsigned int )tmp != 1U) {
#line 2740
      tmp___0 = 1;
    } else
#line 2740
    if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 2740
      tmp___0 = 1;
    } else {
#line 2740
      tmp___0 = 0;
    }
  }
#line 2740
  drop_it = tmp___0;
#line 2745
  if (drop_it != 0) {
#line 2746
    return (1);
  } else {

  }
#line 2748
  mdev->ko_count = mdev->ko_count - 1U;
#line 2748
  drop_it = mdev->ko_count == 0U;
#line 2749
  if (drop_it == 0) {
#line 2750
    tmp___1 = get_current();
#line 2750
    tmp___2 = get_current();
#line 2750
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2752
    request_ping(mdev);
  } else {

  }
#line 2755
  return (drop_it);
}
}
#line 2779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2782
  tmp = kmap(page);
#line 2782
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2782
  sent = tmp___0;
#line 2783
  kunmap(page);
#line 2784
  if ((size_t )sent == size) {
#line 2785
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2786
  return ((size_t )sent == size);
}
}
#line 2789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2792
  tmp = current_thread_info___2();
#line 2792
  oldfs = tmp->addr_limit;
#line 2794
  len = (int )size;
#line 2802
  if ((int )disable_sendpage) {
#line 2803
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2803
    return (tmp___0);
  } else {
#line 2802
    tmp___1 = page_count(page);
#line 2802
    if (tmp___1 <= 0) {
#line 2803
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2803
      return (tmp___0);
    } else {
#line 2802
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2802
      if (tmp___2 != 0) {
#line 2803
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2803
        return (tmp___0);
      } else {

      }
    }
  }
#line 2805
  msg_flags = msg_flags | 16384U;
#line 2806
  drbd_update_congested(mdev);
#line 2807
  tmp___3 = current_thread_info___2();
#line 2807
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2807
  tmp___3->addr_limit = __constr_expr_0;
  ldv_51587: 
#line 2809
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2809
  sent = (int )tmp___4;
#line 2812
  if (sent == -11) {
#line 2813
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2813
    if (tmp___5 != 0) {
#line 2815
      goto ldv_51584;
    } else {
#line 2817
      goto ldv_51585;
    }
  } else {

  }
#line 2819
  if (sent <= 0) {
#line 2820
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2822
    goto ldv_51584;
  } else {

  }
#line 2824
  len = len - sent;
#line 2825
  offset = offset + sent;
  ldv_51585: ;
#line 2826
  if (len > 0) {
#line 2827
    goto ldv_51587;
  } else {

  }
  ldv_51584: 
#line 2827
  tmp___6 = current_thread_info___2();
#line 2827
  tmp___6->addr_limit = oldfs;
#line 2828
  clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 2830
  ok = len == 0;
#line 2831
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2831
  if (tmp___7 != 0L) {
#line 2832
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2833
  return (ok);
}
}
#line 2836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2841
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2841
  i = (int )bio->bi_idx;
#line 2841
  goto ldv_51595;
  ldv_51594: 
#line 2842
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2842
  if (tmp == 0) {
#line 2845
    return (0);
  } else {

  }
#line 2841
  bvec = bvec + 1;
#line 2841
  i = i + 1;
  ldv_51595: ;
#line 2841
  if ((int )bio->bi_vcnt > i) {
#line 2842
    goto ldv_51594;
  } else {

  }

#line 2847
  return (1);
}
}
#line 2850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2855
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2855
  i = (int )bio->bi_idx;
#line 2855
  goto ldv_51604;
  ldv_51603: 
#line 2856
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2856
  if (tmp == 0) {
#line 2859
    return (0);
  } else {

  }
#line 2855
  bvec = bvec + 1;
#line 2855
  i = i + 1;
  ldv_51604: ;
#line 2855
  if ((int )bio->bi_vcnt > i) {
#line 2856
    goto ldv_51603;
  } else {

  }

#line 2861
  return (1);
}
}
#line 2864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2866
  page = e->pages;
#line 2867
  len = e->size;
#line 2869
  goto ldv_51618;
  ldv_51617: 
#line 2870
  __min1 = len;
#line 2870
  __min2 = 4096U;
#line 2870
  l = __min1 < __min2 ? __min1 : __min2;
#line 2871
  tmp = page_chain_next(page);
#line 2871
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2871
  if (tmp___0 == 0) {
#line 2873
    return (0);
  } else {

  }
#line 2874
  len = len - l;
#line 2869
  page = page_chain_next(page);
  ldv_51618: ;
#line 2869
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2869
    tmp___1 = page_chain_next(page);
#line 2869
    __builtin_prefetch((void const   *)tmp___1);
#line 2869
    if (1 != 0) {
#line 2870
      goto ldv_51617;
    } else {
#line 2872
      goto ldv_51619;
    }
  } else {

  }
  ldv_51619: ;
#line 2876
  return (1);
}
}
#line 2879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2881
  if (mdev->agreed_pro_version > 94) {
#line 2882
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 1024UL) != 0UL ? 16 : 0)) | ((bi_rw & 2048UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2887
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2895
  ok = 1;
#line 2897
  dp_flags = 0U;
#line 2901
  tmp = drbd_get_data_sock___0(mdev);
#line 2901
  if (tmp == 0) {
#line 2902
    return (0);
  } else {

  }
#line 2904
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2904
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2904
    dgs = (int )tmp___0;
  } else {
#line 2904
    dgs = 0;
  }
#line 2907
  if (req->size <= 32768U) {
#line 2908
    p.head.h80.magic = 1728214147U;
#line 2909
    p.head.h80.command = 0U;
#line 2910
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2910
    p.head.h80.length = tmp___1;
  } else {
#line 2913
    p.head.h95.magic = 23171U;
#line 2914
    p.head.h95.command = 0U;
#line 2915
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2915
    p.head.h95.length = tmp___2;
  }
#line 2919
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2919
  p.sector = tmp___3;
#line 2920
  p.block_id = (u64 )req;
#line 2921
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2921
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2921
  p.seq_num = tmp___5;
#line 2923
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2925
  if ((int )mdev->state.ldv_39162.conn > 15 && (int )mdev->state.ldv_39162.conn <= 21) {
#line 2927
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2929
  tmp___6 = __fswab32(dp_flags);
#line 2929
  p.dp_flags = tmp___6;
#line 2930
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 2931
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2931
  ok = tmp___7 == 32;
#line 2933
  if (ok != 0 && dgs != 0) {
#line 2934
    dgb = mdev->int_dig_out;
#line 2935
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2936
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2936
    ok = tmp___8 == dgs;
  } else {

  }
#line 2938
  if (ok != 0) {
#line 2950
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2951
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2953
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2956
    if (dgs > 0 && dgs <= 64) {
#line 2960
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2961
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2961
      if (tmp___9 != 0) {
#line 2962
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2971
  drbd_put_data_sock___0(mdev);
#line 2973
  return (ok);
}
}
#line 2980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2988
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2988
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2988
    dgs = (int )tmp;
  } else {
#line 2988
    dgs = 0;
  }
#line 2991
  if (e->size <= 32768U) {
#line 2992
    p.head.h80.magic = 1728214147U;
#line 2993
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2993
    p.head.h80.command = tmp___0;
#line 2994
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2994
    p.head.h80.length = tmp___1;
  } else {
#line 2997
    p.head.h95.magic = 23171U;
#line 2998
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2998
    p.head.h95.command = tmp___2;
#line 2999
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2999
    p.head.h95.length = tmp___3;
  }
#line 3003
  tmp___4 = __fswab64((__u64 )e->sector);
#line 3003
  p.sector = tmp___4;
#line 3004
  p.block_id = e->ldv_48227.block_id;
#line 3011
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 3011
  if (tmp___5 == 0) {
#line 3012
    return (0);
  } else {

  }
#line 3014
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 3014
  ok = tmp___6 == 32;
#line 3015
  if (ok != 0 && dgs != 0) {
#line 3016
    dgb = mdev->int_dig_out;
#line 3017
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 3018
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 3018
    ok = tmp___7 == dgs;
  } else {

  }
#line 3020
  if (ok != 0) {
#line 3021
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 3023
  drbd_put_data_sock___0(mdev);
#line 3025
  return (ok);
}
}
#line 3028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 3032
  tmp = __fswab64((__u64 )req->sector);
#line 3032
  p.sector = tmp;
#line 3033
  tmp___0 = __fswab32(req->size);
#line 3033
  p.blksize = tmp___0;
#line 3035
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 3035
  return (tmp___1);
}
}
#line 3054 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 3059
  sent = 0;
#line 3061
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 3062
    return (-1000);
  } else {

  }
#line 3066
  iov.iov_base = buf;
#line 3067
  iov.iov_len = size;
#line 3069
  msg.msg_name = 0;
#line 3070
  msg.msg_namelen = 0;
#line 3071
  msg.msg_control = 0;
#line 3072
  msg.msg_controllen = 0UL;
#line 3073
  msg.msg_flags = msg_flags | 16384U;
#line 3075
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3076
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 3077
    drbd_update_congested(mdev);
  } else {

  }
  ldv_51661: 
#line 3089
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 3090
  if (rv == -11) {
#line 3091
    tmp = we_should_drop_the_connection(mdev, sock);
#line 3091
    if (tmp != 0) {
#line 3092
      goto ldv_51659;
    } else {
#line 3094
      goto ldv_51660;
    }
  } else {

  }
#line 3096
  if (rv == 0) {
#line 3096
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3096);
  } else {

  }
#line 3097
  if (rv == -4) {
#line 3098
    tmp___0 = get_current();
#line 3098
    flush_signals(tmp___0);
#line 3099
    rv = 0;
  } else {

  }
#line 3101
  if (rv < 0) {
#line 3102
    goto ldv_51659;
  } else {

  }
#line 3103
  sent = sent + rv;
#line 3104
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 3105
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_51660: ;
#line 3106
  if ((size_t )sent < size) {
#line 3107
    goto ldv_51661;
  } else {

  }
  ldv_51659: ;
#line 3108
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3109
    clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 3111
  if (rv <= 0) {
#line 3112
    if (rv != -11) {
#line 3113
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 3116
      val.i = 0U;
#line 3116
      val.ldv_39162.conn = 4U;
#line 3116
      mask.i = 0U;
#line 3116
      mask.ldv_39162.conn = 31U;
#line 3116
      drbd_force_state(mdev, mask, val);
    } else {
#line 3118
      val___0.i = 0U;
#line 3118
      val___0.ldv_39162.conn = 3U;
#line 3118
      mask___0.i = 0U;
#line 3118
      mask___0.ldv_39162.conn = 31U;
#line 3118
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 3121
  return (sent);
}
}
#line 3124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 3126
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 3128
  rv = 0;
#line 3130
  ldv_mutex_lock_169(& drbd_main_mutex);
#line 3131
  tmp = spinlock_check(& mdev->req_lock);
#line 3131
  flags = _raw_spin_lock_irqsave(tmp);
#line 3135
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 3136
    if ((mode & 2U) != 0U) {
#line 3137
      rv = -30;
    } else
#line 3138
    if (! allow_oos) {
#line 3139
      rv = -124;
    } else {

    }
  } else {

  }
#line 3142
  if (rv == 0) {
#line 3143
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 3144
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 3145
  ldv_mutex_unlock_170(& drbd_main_mutex);
#line 3147
  return (rv);
}
}
#line 3150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3152
  mdev = (struct drbd_conf *)gd->private_data;
#line 3153
  ldv_mutex_lock_171(& drbd_main_mutex);
#line 3154
  mdev->open_cnt = mdev->open_cnt - 1;
#line 3155
  ldv_mutex_unlock_172(& drbd_main_mutex);
#line 3156
  return (0);
}
}
#line 3159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3163
  __constr_expr_0.rate = 250;
#line 3163
  __constr_expr_0.after = -1;
#line 3163
  __constr_expr_0.al_extents = 127;
#line 3163
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3163
  __constr_expr_0.verify_alg_len = 0;
#line 3163
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3163
  __constr_expr_0.cpu_mask_len = 0;
#line 3163
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3163
  __constr_expr_0.csums_alg_len = 0;
#line 3163
  __constr_expr_0.use_rle = 0U;
#line 3163
  __constr_expr_0.on_no_data = 0;
#line 3163
  __constr_expr_0.c_plan_ahead = 0;
#line 3163
  __constr_expr_0.c_delay_target = 10;
#line 3163
  __constr_expr_0.c_fill_target = 0;
#line 3163
  __constr_expr_0.c_max_rate = 102400;
#line 3163
  __constr_expr_0.c_min_rate = 4096;
#line 3163
  mdev->sync_conf = __constr_expr_0;
#line 3181
  __constr_expr_1.ldv_39162.role = 2U;
#line 3181
  __constr_expr_1.ldv_39162.peer = 0U;
#line 3181
  __constr_expr_1.ldv_39162.conn = 0U;
#line 3181
  __constr_expr_1.ldv_39162.disk = 0U;
#line 3181
  __constr_expr_1.ldv_39162.pdsk = 6U;
#line 3181
  __constr_expr_1.ldv_39162.susp = 0U;
#line 3181
  __constr_expr_1.ldv_39162.aftr_isp = (unsigned char)0;
#line 3181
  __constr_expr_1.ldv_39162.peer_isp = (unsigned char)0;
#line 3181
  __constr_expr_1.ldv_39162.user_isp = (unsigned char)0;
#line 3181
  __constr_expr_1.ldv_39162.susp_nod = 0U;
#line 3181
  __constr_expr_1.ldv_39162.susp_fen = 0U;
#line 3181
  __constr_expr_1.ldv_39162._pad = (unsigned short)0;
#line 3181
  mdev->state = __constr_expr_1;
#line 3182
  return;
}
}
#line 3193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;

  {
#line 3198
  drbd_set_defaults(mdev);
#line 3200
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3201
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3202
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3203
  atomic_set(& mdev->unacked_cnt, 0);
#line 3204
  atomic_set(& mdev->local_cnt, 0);
#line 3205
  atomic_set(& mdev->net_cnt, 0);
#line 3206
  atomic_set(& mdev->packet_seq, 0);
#line 3207
  atomic_set(& mdev->pp_in_use, 0);
#line 3208
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3209
  atomic_set(& mdev->rs_sect_in, 0);
#line 3210
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3211
  atomic_set(& mdev->ap_in_flight, 0);
#line 3212
  atomic_set(& mdev->md_io_in_use, 0);
#line 3214
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key);
#line 3215
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___0);
#line 3216
  sema_init(& mdev->data.work.s, 0);
#line 3217
  sema_init(& mdev->meta.work.s, 0);
#line 3218
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___1);
#line 3220
  spinlock_check(& mdev->data.work.q_lock);
#line 3220
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5954.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___2);
#line 3221
  spinlock_check(& mdev->meta.work.q_lock);
#line 3221
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5954.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___3);
#line 3223
  spinlock_check(& mdev->al_lock);
#line 3223
  __raw_spin_lock_init(& mdev->al_lock.ldv_5954.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___4);
#line 3224
  spinlock_check(& mdev->req_lock);
#line 3224
  __raw_spin_lock_init(& mdev->req_lock.ldv_5954.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___5);
#line 3225
  spinlock_check(& mdev->peer_seq_lock);
#line 3225
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5954.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___6);
#line 3226
  spinlock_check(& mdev->epoch_lock);
#line 3226
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5954.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___7);
#line 3228
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3229
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3230
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3231
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3232
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3233
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3234
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3235
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3236
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3237
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3238
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3239
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3240
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3241
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3243
  mdev->resync_work.cb = & w_resync_timer;
#line 3244
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3245
  mdev->go_diskless.cb = & w_go_diskless;
#line 3246
  mdev->md_sync_work.cb = & w_md_sync;
#line 3247
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3248
  mdev->start_resync_work.cb = & w_start_resync;
#line 3249
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___8);
#line 3250
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___9);
#line 3251
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___10);
#line 3252
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___11);
#line 3253
  mdev->resync_timer.function = & resync_timer_fn;
#line 3254
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3255
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3256
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3257
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3258
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3259
  mdev->request_timer.function = & request_timer_fn;
#line 3260
  mdev->request_timer.data = (unsigned long )mdev;
#line 3262
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___12);
#line 3263
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___13);
#line 3264
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___14);
#line 3265
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___15);
#line 3266
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___16);
#line 3267
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___17);
#line 3269
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3270
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3271
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3273
  mdev->agreed_pro_version = 96;
#line 3274
  mdev->write_ordering = WO_bdev_flush;
#line 3275
  mdev->resync_wenr = 4294967295U;
#line 3276
  mdev->peer_max_bio_size = 4096U;
#line 3277
  mdev->local_max_bio_size = 4096U;
#line 3278
  return;
}
}
#line 3280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3283
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3288
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3288
  if (tmp___0 != 0) {
#line 3289
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3290
  tmp___9 = 0UL;
#line 3290
  mdev->rs_failed = tmp___9;
#line 3290
  tmp___8 = tmp___9;
#line 3290
  mdev->rs_total = tmp___8;
#line 3290
  tmp___7 = tmp___8;
#line 3290
  mdev->rs_start = tmp___7;
#line 3290
  tmp___6 = tmp___7;
#line 3290
  mdev->p_size = tmp___6;
#line 3290
  tmp___5 = (unsigned int )tmp___6;
#line 3290
  mdev->writ_cnt = tmp___5;
#line 3290
  tmp___4 = tmp___5;
#line 3290
  mdev->send_cnt = tmp___4;
#line 3290
  tmp___3 = tmp___4;
#line 3290
  mdev->recv_cnt = tmp___3;
#line 3290
  tmp___2 = tmp___3;
#line 3290
  mdev->read_cnt = tmp___2;
#line 3290
  tmp___1 = tmp___2;
#line 3290
  mdev->bm_writ_cnt = tmp___1;
#line 3290
  mdev->al_writ_cnt = tmp___1;
#line 3300
  mdev->rs_last_events = 0;
#line 3301
  mdev->rs_last_sect_ev = 0;
#line 3302
  i = 0;
#line 3302
  goto ldv_51717;
  ldv_51716: 
#line 3303
  mdev->rs_mark_left[i] = 0UL;
#line 3304
  mdev->rs_mark_time[i] = 0UL;
#line 3302
  i = i + 1;
  ldv_51717: ;
#line 3302
  if (i <= 7) {
#line 3303
    goto ldv_51716;
  } else {

  }

#line 3306
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3306
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3306);
  } else {

  }
#line 3308
  drbd_set_my_capacity(mdev, 0UL);
#line 3309
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3311
    drbd_bm_resize(mdev, 0UL, 1);
#line 3312
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3315
  drbd_free_resources(mdev);
#line 3316
  clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3322
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3322
  if (tmp___10 == 0) {
#line 3322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3322);
  } else {

  }
#line 3323
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3323
  if (tmp___11 == 0) {
#line 3323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3323);
  } else {

  }
#line 3324
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3324
  if (tmp___12 == 0) {
#line 3324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3324);
  } else {

  }
#line 3325
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3325
  if (tmp___13 == 0) {
#line 3325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3325);
  } else {

  }
#line 3326
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3326
  if (tmp___14 == 0) {
#line 3326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3326);
  } else {

  }
#line 3327
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3327
  if (tmp___15 == 0) {
#line 3327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3327);
  } else {

  }
#line 3328
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3328
  if (tmp___16 == 0) {
#line 3328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3328);
  } else {

  }
#line 3329
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3329
  if (tmp___17 == 0) {
#line 3329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3329);
  } else {

  }
#line 3330
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3330
  if (tmp___18 == 0) {
#line 3330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3330);
  } else {

  }
#line 3331
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3331
  if (tmp___19 == 0) {
#line 3331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3331);
  } else {

  }
#line 3332
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3332
  if (tmp___20 == 0) {
#line 3332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3332);
  } else {

  }
#line 3334
  drbd_set_defaults(mdev);
#line 3335
  return;
}
}
#line 3338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3342
  goto ldv_51724;
  ldv_51723: 
#line 3343
  page = drbd_pp_pool;
#line 3344
  drbd_pp_pool = (struct page *)page->ldv_13528.private;
#line 3345
  __free_pages(page, 0U);
#line 3346
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_51724: ;
#line 3342
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3343
    goto ldv_51723;
  } else {

  }

#line 3351
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 3352
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 3353
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 3354
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 3355
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3356
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3357
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3358
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3359
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3360
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3361
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3362
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3363
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3364
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3365
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3366
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3368
  drbd_md_io_bio_set = 0;
#line 3369
  drbd_md_io_page_pool = 0;
#line 3370
  drbd_ee_mempool = 0;
#line 3371
  drbd_request_mempool = 0;
#line 3372
  drbd_ee_cache = 0;
#line 3373
  drbd_request_cache = 0;
#line 3374
  drbd_bm_ext_cache = 0;
#line 3375
  drbd_al_ext_cache = 0;
#line 3377
  return;
}
}
#line 3380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3383
  number = (int const   )(minor_count * 32U);
#line 3387
  drbd_request_mempool = 0;
#line 3388
  drbd_ee_cache = 0;
#line 3389
  drbd_request_cache = 0;
#line 3390
  drbd_bm_ext_cache = 0;
#line 3391
  drbd_al_ext_cache = 0;
#line 3392
  drbd_pp_pool = 0;
#line 3393
  drbd_md_io_page_pool = 0;
#line 3394
  drbd_md_io_bio_set = 0;
#line 3397
  drbd_request_cache = kmem_cache_create("drbd_req", 112UL, 0UL, 0UL, 0);
#line 3399
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3400
    goto Enomem;
  } else {

  }
#line 3402
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3404
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3405
    goto Enomem;
  } else {

  }
#line 3407
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3409
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3410
    goto Enomem;
  } else {

  }
#line 3412
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3414
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3415
    goto Enomem;
  } else {

  }
#line 3424
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 3425
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 3426
    goto Enomem;
  } else {

  }
#line 3428
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3430
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3431
    goto Enomem;
  } else {

  }
#line 3433
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3435
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3436
    goto Enomem;
  } else {

  }
#line 3439
  spinlock_check(& drbd_pp_lock);
#line 3439
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5954.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3441
  i = 0;
#line 3441
  goto ldv_51735;
  ldv_51734: 
#line 3442
  page = alloc_pages(131282U, 0U);
#line 3443
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3444
    goto Enomem;
  } else {

  }
#line 3445
  page->ldv_13528.private = (unsigned long )drbd_pp_pool;
#line 3446
  drbd_pp_pool = page;
#line 3441
  i = i + 1;
  ldv_51735: ;
#line 3441
  if (i < number) {
#line 3442
    goto ldv_51734;
  } else {

  }
#line 3448
  drbd_pp_vacant = number;
#line 3450
  return (0);
  Enomem: 
#line 3453
  drbd_destroy_mempools();
#line 3454
  return (-12);
}
}
#line 3457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3464
  return (0);
}
}
#line 3467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3475
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3476
  if (rr != 0) {
#line 3477
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3479
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3480
  if (rr != 0) {
#line 3481
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3483
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3484
  if (rr != 0) {
#line 3485
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3487
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3488
  if (rr != 0) {
#line 3489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3491
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3492
  if (rr != 0) {
#line 3493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3494
  return;
}
}
#line 3498 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3500
  tmp = minor_to_mdev(minor);
#line 3500
  mdev = tmp;
#line 3502
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3503
    return;
  } else {

  }
#line 3505
  del_timer_sync(& mdev->request_timer);
#line 3508
  if (mdev->open_cnt != 0) {
#line 3509
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3510);
  } else {

  }
#line 3512
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3512
  _b = tmp___0 == 0;
#line 3512
  if (_b != 0) {
#line 3512
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3512);
  } else {

  }
#line 3512
  if (_b != 0) {
#line 3514
    lp = mdev->data.work.q.next;
#line 3514
    goto ldv_51756;
    ldv_51755: 
#line 3515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3514
    lp = lp->next;
    ldv_51756: ;
#line 3514
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3515
      goto ldv_51755;
    } else {

    }

  } else {

  }
#line 3520
  del_gendisk(mdev->vdisk);
#line 3525
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3526
    bdput(mdev->this_bdev);
  } else {

  }
#line 3528
  drbd_free_resources(mdev);
#line 3530
  drbd_release_ee_lists(mdev);
#line 3533
  kfree((void const   *)mdev->ee_hash);
#line 3539
  lc_destroy(mdev->act_log);
#line 3540
  lc_destroy(mdev->resync);
#line 3542
  kfree((void const   *)mdev->p_uuid);
#line 3545
  kfree((void const   *)mdev->int_dig_out);
#line 3546
  kfree((void const   *)mdev->int_dig_in);
#line 3547
  kfree((void const   *)mdev->int_dig_vv);
#line 3552
  drbd_free_mdev(mdev);
#line 3553
  return;
}
}
#line 3555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3559
  unregister_reboot_notifier(& drbd_notifier);
#line 3569
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3570
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3572
  drbd_nl_cleanup();
#line 3574
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3575
    i = minor_count;
#line 3576
    goto ldv_51763;
    ldv_51762: 
#line 3577
    drbd_delete_device(i);
    ldv_51763: 
#line 3576
    tmp = i;
#line 3576
    i = i - 1U;
#line 3576
    if (tmp != 0U) {
#line 3577
      goto ldv_51762;
    } else {

    }
#line 3578
    drbd_destroy_mempools();
  } else {

  }
#line 3581
  kfree((void const   *)minor_table);
#line 3583
  unregister_blkdev(147U, "drbd");
#line 3585
  printk("\016drbd: module cleanup done.\n");
#line 3586
  return;
}
}
#line 3595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3597
  mdev = (struct drbd_conf *)congested_data;
#line 3599
  reason = 45;
#line 3600
  r = 0;
#line 3602
  tmp = may_inc_ap_bio___0(mdev);
#line 3602
  if (tmp) {
#line 3602
    tmp___0 = 0;
  } else {
#line 3602
    tmp___0 = 1;
  }
#line 3602
  if (tmp___0) {
#line 3604
    r = bdi_bits;
#line 3605
    reason = 100;
#line 3606
    goto out;
  } else {

  }
#line 3609
  tmp___2 = constant_test_bit(30U, (unsigned long const volatile   *)(& mdev->flags));
#line 3609
  if (tmp___2 != 0) {
#line 3610
    r = r | 4;
#line 3616
    tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 3616
    if (tmp___1 == 0) {
#line 3617
      r = r | 8;
    } else {
#line 3619
      put_ldev(mdev);
    }
#line 3620
    r = r & bdi_bits;
#line 3621
    reason = 99;
#line 3622
    goto out;
  } else {

  }
#line 3625
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3625
  if (tmp___3 != 0) {
#line 3626
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3627
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3628
    put_ldev(mdev);
#line 3629
    if (r != 0) {
#line 3630
      reason = 98;
    } else {

    }
  } else {

  }
#line 3633
  if ((bdi_bits & 4) != 0) {
#line 3633
    tmp___4 = constant_test_bit(20U, (unsigned long const volatile   *)(& mdev->flags));
#line 3633
    if (tmp___4 != 0) {
#line 3634
      r = r | 4;
#line 3635
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3639
  mdev->congestion_reason = reason;
#line 3640
  return (r);
}
}
#line 3643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3650
  tmp = kzalloc(4728UL, 208U);
#line 3650
  mdev = (struct drbd_conf *)tmp;
#line 3651
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3652
    return (0);
  } else {

  }
#line 3653
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3653
  if (tmp___0) {
#line 3653
    tmp___1 = 0;
  } else {
#line 3653
    tmp___1 = 1;
  }
#line 3653
  if (tmp___1) {
#line 3654
    goto out_no_cpumask;
  } else {

  }
#line 3656
  mdev->minor = minor;
#line 3658
  drbd_init_set_defaults(mdev);
#line 3660
  q = blk_alloc_queue(208U);
#line 3661
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3662
    goto out_no_q;
  } else {

  }
#line 3663
  mdev->rq_queue = q;
#line 3664
  q->queuedata = (void *)mdev;
#line 3666
  disk = alloc_disk(1);
#line 3667
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3668
    goto out_no_disk;
  } else {

  }
#line 3669
  mdev->vdisk = disk;
#line 3671
  set_disk_ro(disk, 1);
#line 3673
  disk->queue = q;
#line 3674
  disk->major = 147;
#line 3675
  disk->first_minor = (int )minor;
#line 3676
  disk->fops = & drbd_ops;
#line 3677
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3678
  disk->private_data = (void *)mdev;
#line 3680
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3682
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3684
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3685
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3687
  blk_queue_make_request(q, & drbd_make_request);
#line 3688
  blk_queue_flush(q, 3072U);
#line 3691
  blk_queue_max_hw_sectors(q, 16U);
#line 3692
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3693
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3694
  q->queue_lock = & mdev->req_lock;
#line 3696
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3697
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3698
    goto out_no_io_page;
  } else {

  }
#line 3700
  tmp___2 = drbd_bm_init(mdev);
#line 3700
  if (tmp___2 != 0) {
#line 3701
    goto out_no_bitmap;
  } else {

  }
#line 3703
  tmp___3 = tl_init(mdev);
#line 3703
  if (tmp___3 == 0) {
#line 3704
    goto out_no_tl;
  } else {

  }
#line 3706
  tmp___4 = kzalloc(120UL, 208U);
#line 3706
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3707
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3708
    goto out_no_app_reads;
  } else {

  }
#line 3710
  tmp___5 = kzalloc(40UL, 208U);
#line 3710
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3711
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3712
    goto out_no_epoch;
  } else {

  }
#line 3714
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3715
  mdev->epochs = 1U;
#line 3717
  return (mdev);
  out_no_epoch: 
#line 3722
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3724
  tl_cleanup(mdev);
  out_no_tl: 
#line 3726
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3728
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3730
  put_disk(disk);
  out_no_disk: 
#line 3732
  blk_cleanup_queue(q);
  out_no_q: 
#line 3734
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3736
  kfree((void const   *)mdev);
#line 3737
  return (0);
}
}
#line 3742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3744
  kfree((void const   *)mdev->current_epoch);
#line 3745
  kfree((void const   *)mdev->app_reads_hash);
#line 3746
  tl_cleanup(mdev);
#line 3747
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3748
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3749
  __free_pages(mdev->md_io_page, 0U);
#line 3750
  put_disk(mdev->vdisk);
#line 3751
  blk_cleanup_queue(mdev->rq_queue);
#line 3752
  free_cpumask_var(mdev->cpu_mask);
#line 3753
  drbd_free_tl_hash(mdev);
#line 3754
  kfree((void const   *)mdev);
#line 3755
  return;
}
}
#line 3758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3769
  if (minor_count == 0U || minor_count > 256U) {
#line 3770
    printk("\vdrbd: invalid minor_count (%d)\n", minor_count);
#line 3773
    return (-22);
  } else {

  }
#line 3779
  err = drbd_nl_init();
#line 3780
  if (err != 0) {
#line 3781
    return (err);
  } else {

  }
#line 3783
  err = register_blkdev(147U, "drbd");
#line 3784
  if (err != 0) {
#line 3785
    printk("\vdrbd: unable to register block device major %d\n", 147);
#line 3788
    return (err);
  } else {

  }
#line 3791
  register_reboot_notifier(& drbd_notifier);
#line 3796
  err = -12;
#line 3798
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3800
  drbd_proc = 0;
#line 3801
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3801
  minor_table = (struct drbd_conf **)tmp;
#line 3803
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3804
    goto Enomem;
  } else {

  }
#line 3806
  err = drbd_create_mempools();
#line 3807
  if (err != 0) {
#line 3808
    goto Enomem;
  } else {

  }
#line 3810
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3811
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3812
    printk("\vdrbd: unable to register proc file\n");
#line 3813
    goto Enomem;
  } else {

  }
#line 3816
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3818
  printk("\016drbd: initialized. Version: 8.3.13 (api:%d/proto:%d-%d)\n", 88, 86,
         96);
#line 3821
  tmp___0 = drbd_buildtag();
#line 3821
  printk("\016drbd: %s\n", tmp___0);
#line 3822
  printk("\016drbd: registered as block device major %d\n", 147);
#line 3824
  printk("\016drbd: minor_table @ 0x%p\n", minor_table);
#line 3826
  return (0);
  Enomem: 
#line 3829
  drbd_cleanup();
#line 3830
  if (err == -12) {
#line 3832
    printk("\vdrbd: ran out of memory\n");
  } else {
#line 3834
    printk("\vdrbd: initialization failure\n");
  }
#line 3835
  return (err);
}
}
#line 3838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3840
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3841
    return;
  } else {

  }
#line 3843
  blkdev_put(ldev->backing_bdev, 131U);
#line 3844
  blkdev_put(ldev->md_bdev, 131U);
#line 3846
  kfree((void const   *)ldev);
#line 3847
  return;
}
}
#line 3849 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3851
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3852
    ldv_mutex_lock_173(& mdev->data.mutex);
#line 3853
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3854
    sock_release(mdev->data.socket);
#line 3855
    mdev->data.socket = 0;
#line 3856
    ldv_mutex_unlock_174(& mdev->data.mutex);
  } else {

  }
#line 3858
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3859
    ldv_mutex_lock_175(& mdev->meta.mutex);
#line 3860
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3861
    sock_release(mdev->meta.socket);
#line 3862
    mdev->meta.socket = 0;
#line 3863
    ldv_mutex_unlock_176(& mdev->meta.mutex);
  } else {

  }
#line 3865
  return;
}
}
#line 3868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3870
  crypto_free_hash(mdev->csums_tfm);
#line 3871
  mdev->csums_tfm = 0;
#line 3872
  crypto_free_hash(mdev->verify_tfm);
#line 3873
  mdev->verify_tfm = 0;
#line 3874
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3875
  mdev->cram_hmac_tfm = 0;
#line 3876
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3877
  mdev->integrity_w_tfm = 0;
#line 3878
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3879
  mdev->integrity_r_tfm = 0;
#line 3881
  drbd_free_sock(mdev);
#line 3883
  drbd_free_bc(mdev->ldev);
#line 3883
  mdev->ldev = 0;
#line 3884
  return;
}
}
#line 3912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3918
  del_timer(& mdev->md_sync_timer);
#line 3920
  tmp = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 3920
  if (tmp == 0) {
#line 3921
    return;
  } else {

  }
#line 3925
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3925
  if (tmp___0 == 0) {
#line 3926
    return;
  } else {

  }
#line 3928
  tmp___1 = drbd_md_get_buffer(mdev);
#line 3928
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3929
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3930
    goto out;
  } else {

  }
#line 3932
  memset((void *)buffer, 0, 512UL);
#line 3934
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3934
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3934
  buffer->la_size = tmp___3;
#line 3935
  i = 0;
#line 3935
  goto ldv_51829;
  ldv_51828: 
#line 3936
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3936
  buffer->uuid[i] = tmp___4;
#line 3935
  i = i + 1;
  ldv_51829: ;
#line 3935
  if (i <= 3) {
#line 3936
    goto ldv_51828;
  } else {

  }
#line 3937
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3937
  buffer->flags = tmp___5;
#line 3938
  buffer->magic = 1795323011U;
#line 3940
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3940
  buffer->md_size_sect = tmp___6;
#line 3941
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3941
  buffer->al_offset = tmp___7;
#line 3942
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3942
  buffer->al_nr_extents = tmp___8;
#line 3943
  buffer->bm_bytes_per_bit = 1048576U;
#line 3944
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3944
  buffer->device_uuid = tmp___9;
#line 3946
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3946
  buffer->bm_offset = tmp___10;
#line 3947
  tmp___11 = __fswab32(mdev->peer_max_bio_size);
#line 3947
  buffer->la_peer_max_bio_size = tmp___11;
#line 3949
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3949
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3949);
  } else {

  }
#line 3950
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3952
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3952
  if (tmp___13 == 0) {
#line 3954
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3955
    drbd_chk_io_error____1(mdev, 1, DRBD_META_IO_ERROR, "drbd_md_sync");
  } else {

  }
#line 3960
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3960
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3962
  drbd_md_put_buffer(mdev);
  out: 
#line 3964
  put_ldev(mdev);
#line 3965
  return;
}
}
#line 3975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  unsigned int peer ;
  __u32 tmp___16 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
#line 3978
  rv = 101;
#line 3980
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3980
  if (tmp == 0) {
#line 3981
    return (118);
  } else {

  }
#line 3983
  tmp___0 = drbd_md_get_buffer(mdev);
#line 3983
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3984
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3985
    goto out;
  } else {

  }
#line 3987
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3987
  if (tmp___1 == 0) {
#line 3990
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3991
    rv = 118;
#line 3992
    goto err;
  } else {

  }
#line 3995
  tmp___2 = __fswab32(buffer->magic);
#line 3995
  if (tmp___2 != 2205418091U) {
#line 3996
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3997
    rv = 119;
#line 3998
    goto err;
  } else {

  }
#line 4000
  tmp___4 = __fswab32(buffer->al_offset);
#line 4000
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 4001
    tmp___3 = __fswab32(buffer->al_offset);
#line 4001
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 4003
    rv = 119;
#line 4004
    goto err;
  } else {

  }
#line 4006
  tmp___6 = __fswab32(buffer->bm_offset);
#line 4006
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 4007
    tmp___5 = __fswab32(buffer->bm_offset);
#line 4007
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 4009
    rv = 119;
#line 4010
    goto err;
  } else {

  }
#line 4012
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 4012
  if (tmp___8 != bdev->md.md_size_sect) {
#line 4013
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 4013
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 4015
    rv = 119;
#line 4016
    goto err;
  } else {

  }
#line 4019
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 4019
  if (tmp___10 != 4096U) {
#line 4020
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 4020
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 4022
    rv = 119;
#line 4023
    goto err;
  } else {

  }
#line 4026
  tmp___11 = __fswab64(buffer->la_size);
#line 4026
  bdev->md.la_size_sect = tmp___11;
#line 4027
  i = 0;
#line 4027
  goto ldv_51842;
  ldv_51841: 
#line 4028
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 4028
  bdev->md.uuid[i] = tmp___12;
#line 4027
  i = i + 1;
  ldv_51842: ;
#line 4027
  if (i <= 3) {
#line 4028
    goto ldv_51841;
  } else {

  }
#line 4029
  tmp___13 = __fswab32(buffer->flags);
#line 4029
  bdev->md.flags = tmp___13;
#line 4030
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 4030
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 4031
  tmp___15 = __fswab64(buffer->device_uuid);
#line 4031
  bdev->md.device_uuid = tmp___15;
#line 4033
  spin_lock_irq(& mdev->req_lock);
#line 4034
  if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 4036
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 4036
    peer = tmp___16;
#line 4037
    _max1 = peer;
#line 4037
    _max2 = 4096U;
#line 4037
    peer = _max1 > _max2 ? _max1 : _max2;
#line 4038
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 4040
  spin_unlock_irq(& mdev->req_lock);
#line 4042
  if (mdev->sync_conf.al_extents <= 6) {
#line 4043
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 4046
  drbd_md_put_buffer(mdev);
  out: 
#line 4048
  put_ldev(mdev);
#line 4050
  return (rv);
}
}
#line 4071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4073
  tmp = test_and_set_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 4073
  if (tmp == 0) {
#line 4074
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 4075
  return;
}
}
#line 4078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 4082
  i = 2;
#line 4082
  goto ldv_51856;
  ldv_51855: 
#line 4083
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 4082
  i = i + 1;
  ldv_51856: ;
#line 4082
  if (i <= 2) {
#line 4083
    goto ldv_51855;
  } else {

  }

#line 4087
  return;
}
}
#line 4086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4088
  if (idx == 0) {
#line 4089
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 4090
      val = val | 1ULL;
    } else {
#line 4092
      val = val & 0xfffffffffffffffeULL;
    }
#line 4094
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 4097
  (mdev->ldev)->md.uuid[idx] = val;
#line 4098
  drbd_md_mark_dirty(mdev);
#line 4099
  return;
}
}
#line 4102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4104
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 4105
    drbd_uuid_move_history(mdev);
#line 4106
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 4108
  _drbd_uuid_set(mdev, idx, val);
#line 4109
  return;
}
}
#line 4118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 4121
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4123
  if (bm_uuid != 0ULL) {
#line 4124
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 4126
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 4128
  get_random_bytes((void *)(& val), 8);
#line 4129
  _drbd_uuid_set(mdev, 0, val);
#line 4130
  drbd_print_uuids(mdev, "new current UUID");
#line 4132
  drbd_md_sync(mdev);
#line 4133
  return;
}
}
#line 4135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 4137
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 4138
    return;
  } else {

  }
#line 4140
  if (val == 0ULL) {
#line 4141
    drbd_uuid_move_history(mdev);
#line 4142
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 4143
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 4145
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4146
    if (bm_uuid != 0ULL) {
#line 4147
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 4149
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 4151
  drbd_md_mark_dirty(mdev);
#line 4152
  return;
}
}
#line 4160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4162
  rv = -5;
#line 4164
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4164
  if (tmp != 0) {
#line 4165
    drbd_md_set_flag(mdev, 8);
#line 4166
    drbd_md_sync(mdev);
#line 4167
    drbd_bm_set_all(mdev);
#line 4169
    rv = drbd_bm_write(mdev);
#line 4171
    if (rv == 0) {
#line 4172
      drbd_md_clear_flag(mdev, 8);
#line 4173
      drbd_md_sync(mdev);
    } else {

    }
#line 4176
    put_ldev(mdev);
  } else {

  }
#line 4179
  return (rv);
}
}
#line 4188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4190
  rv = -5;
#line 4192
  drbd_resume_al(mdev);
#line 4193
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4193
  if (tmp != 0) {
#line 4194
    drbd_bm_clear_all(mdev);
#line 4195
    rv = drbd_bm_write(mdev);
#line 4196
    put_ldev(mdev);
  } else {

  }
#line 4199
  return (rv);
}
}
#line 4202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4204
  __mptr = (struct drbd_work  const  *)w;
#line 4204
  work = (struct bm_io_work *)__mptr;
#line 4205
  rv = -5;
#line 4207
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4207
  if (tmp != 0) {
#line 4207
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4207);
  } else {

  }
#line 4209
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4209
  if (tmp___0 != 0) {
#line 4210
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4211
    rv = (*(work->io_fn))(mdev);
#line 4212
    drbd_bm_unlock(mdev);
#line 4213
    put_ldev(mdev);
  } else {

  }
#line 4216
  clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
#line 4217
  __asm__  volatile   ("": : : "memory");
#line 4218
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4220
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4221
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4223
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4224
  work->why = 0;
#line 4225
  work->flags = 0;
#line 4227
  return (1);
}
}
#line 4230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4232
  lc_destroy(mdev->resync);
#line 4233
  mdev->resync = 0;
#line 4234
  lc_destroy(mdev->act_log);
#line 4235
  mdev->act_log = 0;
#line 4236
  drbd_free_bc(mdev->ldev);
#line 4236
  mdev->ldev = 0;
#line 4240
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4241
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4242
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4244
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4245
  return;
}
}
#line 4247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4249
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4249
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4249);
  } else {

  }
#line 4254
  val.i = 0U;
#line 4254
  val.ldv_39162.disk = 0U;
#line 4254
  mask.i = 0U;
#line 4254
  mask.ldv_39162.disk = 15U;
#line 4254
  drbd_force_state(mdev, mask, val);
#line 4255
  return (1);
}
}
#line 4258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4260
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4260
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4260);
  } else {

  }
#line 4261
  tmp = test_and_set_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 4261
  if (tmp == 0) {
#line 4262
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4263
  return;
}
}
#line 4277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4282
  tmp = get_current();
#line 4282
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4282
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4282);
  } else {

  }
#line 4284
  tmp___0 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 4284
  if (tmp___0 != 0) {
#line 4284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4284);
  } else {

  }
#line 4285
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 4285
  if (tmp___1 != 0) {
#line 4285
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4285);
  } else {

  }
#line 4286
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4286
  if (tmp___2 == 0) {
#line 4286
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4286);
  } else {

  }
#line 4287
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4288
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4291
  mdev->bm_io_work.io_fn = io_fn;
#line 4292
  mdev->bm_io_work.done = done;
#line 4293
  mdev->bm_io_work.why = why;
#line 4294
  mdev->bm_io_work.flags = flags;
#line 4296
  spin_lock_irq(& mdev->req_lock);
#line 4297
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 4298
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4298
  if (tmp___4 == 0) {
#line 4299
    tmp___3 = test_and_set_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 4299
    if (tmp___3 == 0) {
#line 4300
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4302
  spin_unlock_irq(& mdev->req_lock);
#line 4303
  return;
}
}
#line 4314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4319
  tmp = get_current();
#line 4319
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4319);
  } else {

  }
#line 4321
  if (((unsigned int )flags & 9U) == 0U) {
#line 4322
    drbd_suspend_io(mdev);
  } else {

  }
#line 4324
  drbd_bm_lock(mdev, why, flags);
#line 4325
  rv = (*io_fn)(mdev);
#line 4326
  drbd_bm_unlock(mdev);
#line 4328
  if (((unsigned int )flags & 9U) == 0U) {
#line 4329
    drbd_resume_io(mdev);
  } else {

  }
#line 4331
  return (rv);
}
}
#line 4334 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4336
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4337
    drbd_md_mark_dirty(mdev);
#line 4338
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4340
  return;
}
}
#line 4342 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4344
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4345
    drbd_md_mark_dirty(mdev);
#line 4346
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4348
  return;
}
}
#line 4349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4351
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4356
  mdev = (struct drbd_conf *)data;
#line 4358
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4359
  return;
}
}
#line 4361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4363
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4368
  drbd_md_sync(mdev);
#line 4369
  return (1);
}
}
#line 4389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4393
  tmp = rsp->count;
#line 4393
  rsp->count = rsp->count - 1UL;
#line 4393
  if (tmp == 0UL) {
#line 4394
    get_random_bytes((void *)(& refresh), 8);
#line 4395
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4396
    rsp->count = 10000UL;
  } else {

  }
#line 4398
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4399
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4399
  return ((unsigned long )tmp___0);
}
}
#line 4403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4404
  _faults[0] = (char *)"Meta-data write";
#line 4404
  _faults[1] = (char *)"Meta-data read";
#line 4404
  _faults[2] = (char *)"Resync write";
#line 4404
  _faults[3] = (char *)"Resync read";
#line 4404
  _faults[4] = (char *)"Data write";
#line 4404
  _faults[5] = (char *)"Data read";
#line 4404
  _faults[6] = (char *)"Data read ahead";
#line 4404
  _faults[7] = (char *)"BM allocation";
#line 4404
  _faults[8] = (char *)"EE allocation";
#line 4404
  _faults[9] = (char *)"receive data corruption";
#line 4417
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4423
  rrs.state = 0UL;
#line 4423
  rrs.count = 0UL;
#line 4425
  if (fault_devs == 0) {
#line 4425
    goto _L;
  } else {
#line 4425
    tmp = mdev_to_minor(mdev);
#line 4425
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4425
      tmp___0 = _drbd_fault_random(& rrs);
#line 4425
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4425
        tmp___1 = 1;
      } else {
#line 4425
        tmp___1 = 0;
      }
    } else {
#line 4425
      tmp___1 = 0;
    }
  }
#line 4425
  ret = (unsigned int )tmp___1;
#line 4430
  if (ret != 0U) {
#line 4431
    fault_count = fault_count + 1;
#line 4433
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4433
    if (tmp___3 != 0) {
#line 4434
      tmp___2 = _drbd_fault_str(type);
#line 4434
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4438
  return (ret);
}
}
#line 4442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4447
  buildtag[0] = '\000';
#line 4447
  tmp = 1U;
#line 4447
  while (1) {
#line 4447
    if (tmp >= 38U) {
#line 4447
      break;
    } else {

    }
#line 4447
    buildtag[tmp] = (char)0;
#line 4447
    tmp = tmp + 1U;
  }
#line 4449
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4451
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 4457
  return ((char const   *)(& buildtag));
}
}
#line 4505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_109_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4704
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4661
  LDV_IN_INTERRUPT = 1;
#line 4670
  ldv_initialize();
#line 4686
  ldv_handler_precall();
#line 4687
  tmp = drbd_init();
#line 4687
  if (tmp != 0) {
#line 4688
    goto ldv_final;
  } else {

  }
#line 4711
  goto ldv_52036;
  ldv_52035: 
#line 4715
  tmp___0 = nondet_int();
#line 4715
  switch (tmp___0) {
  case 0: ;
#line 4720
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4733
    ldv_handler_precall();
#line 4734
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 4735
    ldv_check_return_value(res_drbd_open_73);
#line 4736
    if (res_drbd_open_73 != 0) {
#line 4737
      goto ldv_module_exit;
    } else {

    }
#line 4758
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4764
  goto ldv_52030;
  case 1: ;
#line 4768
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4781
    ldv_handler_precall();
#line 4782
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 4803
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4809
  goto ldv_52030;
  case 2: 
#line 4828
  ldv_handler_precall();
#line 4829
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 4854
  goto ldv_52030;
  case 3: 
#line 4879
  ldv_handler_precall();
#line 4880
  md_sync_timer_fn(var_md_sync_timer_fn_109_p0);
#line 4899
  goto ldv_52030;
  default: ;
#line 4900
  goto ldv_52030;
  }
  ldv_52030: ;
  ldv_52036: 
#line 4711
  tmp___1 = nondet_int();
#line 4711
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4713
    goto ldv_52035;
  } else {

  }

  ldv_module_exit: 
#line 4922
  ldv_handler_precall();
#line 4923
  drbd_cleanup();
  ldv_final: 
#line 4944
  ldv_check_final_state();
#line 4947
  return;
}
}
#line 4951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4956
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 4958
  mutex_lock(ldv_func_arg1);
#line 4959
  return;
}
}
#line 4961 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4966
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 4968
  mutex_unlock(ldv_func_arg1);
#line 4969
  return;
}
}
#line 4971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4976
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4978
  mutex_lock(ldv_func_arg1);
#line 4979
  return;
}
}
#line 4981 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_148(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4986
  tmp = mutex_trylock(ldv_func_arg1);
#line 4986
  ldv_func_res = tmp;
#line 4988
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4988
  return (tmp___0);
#line 4990
  return (ldv_func_res);
}
}
#line 4993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4998
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 5000
  mutex_unlock(ldv_func_arg1);
#line 5001
  return;
}
}
#line 5003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5008
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5010
  mutex_lock(ldv_func_arg1);
#line 5011
  return;
}
}
#line 5013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_151(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5018
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5020
  mutex_unlock(ldv_func_arg1);
#line 5021
  return;
}
}
#line 5023 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_152(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5028
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5030
  mutex_lock(ldv_func_arg1);
#line 5031
  return;
}
}
#line 5033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_153(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5038
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5040
  mutex_unlock(ldv_func_arg1);
#line 5041
  return;
}
}
#line 5043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_154(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5048
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5050
  mutex_unlock(ldv_func_arg1);
#line 5051
  return;
}
}
#line 5053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_155(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5058
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5060
  mutex_lock(ldv_func_arg1);
#line 5061
  return;
}
}
#line 5063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_156(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5068
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5070
  mutex_unlock(ldv_func_arg1);
#line 5071
  return;
}
}
#line 5073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_157(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5078
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5080
  mutex_lock(ldv_func_arg1);
#line 5081
  return;
}
}
#line 5083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_158(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5088
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5090
  mutex_lock(ldv_func_arg1);
#line 5091
  return;
}
}
#line 5093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_159(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5098
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5100
  mutex_unlock(ldv_func_arg1);
#line 5101
  return;
}
}
#line 5103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_160(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5108
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5110
  mutex_unlock(ldv_func_arg1);
#line 5111
  return;
}
}
#line 5113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_161(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5118
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5120
  mutex_lock(ldv_func_arg1);
#line 5121
  return;
}
}
#line 5123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_162(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5128
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5130
  mutex_unlock(ldv_func_arg1);
#line 5131
  return;
}
}
#line 5133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_163(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5138
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5140
  mutex_lock(ldv_func_arg1);
#line 5141
  return;
}
}
#line 5143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_164(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5148
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5150
  mutex_unlock(ldv_func_arg1);
#line 5151
  return;
}
}
#line 5153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5158
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5160
  mutex_lock(ldv_func_arg1);
#line 5161
  return;
}
}
#line 5163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5168
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5170
  mutex_unlock(ldv_func_arg1);
#line 5171
  return;
}
}
#line 5173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5178
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5180
  mutex_lock(ldv_func_arg1);
#line 5181
  return;
}
}
#line 5183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_168(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5188
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5190
  mutex_unlock(ldv_func_arg1);
#line 5191
  return;
}
}
#line 5193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_169(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5198
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5200
  mutex_lock(ldv_func_arg1);
#line 5201
  return;
}
}
#line 5203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_170(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5208
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5210
  mutex_unlock(ldv_func_arg1);
#line 5211
  return;
}
}
#line 5213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_171(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5218
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5220
  mutex_lock(ldv_func_arg1);
#line 5221
  return;
}
}
#line 5223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_172(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5228
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5230
  mutex_unlock(ldv_func_arg1);
#line 5231
  return;
}
}
#line 5233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_173(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5238
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5240
  mutex_lock(ldv_func_arg1);
#line 5241
  return;
}
}
#line 5243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_174(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5248
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5250
  mutex_unlock(ldv_func_arg1);
#line 5251
  return;
}
}
#line 5253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_175(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5258
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5260
  mutex_lock(ldv_func_arg1);
#line 5261
  return;
}
}
#line 5263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_176(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5268
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5270
  mutex_unlock(ldv_func_arg1);
#line 5271
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_212(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_210(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_213(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_215(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_209(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_211(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_214(struct mutex *ldv_func_arg1 ) ;
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 91
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 124
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 136
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 160
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 165
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 170
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 175
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_209(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 185
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 187
  mutex_lock(ldv_func_arg1);
#line 188
  return;
}
}
#line 190 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_210(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 195
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 197
  mutex_unlock(ldv_func_arg1);
#line 198
  return;
}
}
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_211(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 205
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 207
  mutex_lock(ldv_func_arg1);
#line 208
  return;
}
}
#line 210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_212(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 215
  tmp = mutex_trylock(ldv_func_arg1);
#line 215
  ldv_func_res = tmp;
#line 217
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 217
  return (tmp___0);
#line 219
  return (ldv_func_res);
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_213(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 227
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 229
  mutex_unlock(ldv_func_arg1);
#line 230
  return;
}
}
#line 232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_214(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 237
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 239
  mutex_lock(ldv_func_arg1);
#line 240
  return;
}
}
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_215(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 247
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 249
  mutex_unlock(ldv_func_arg1);
#line 250
  return;
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 334 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 404 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 407
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 407
  return (tmp != 0);
}
}
#line 495 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 498
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 499
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_226(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_224(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_227(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_229(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_231(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_232(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_234(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_236(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_223(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_225(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_228(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_230(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_233(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_235(struct mutex *ldv_func_arg1 ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___3(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 209
  switch (8UL) {
  case 1UL: 
#line 209
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6273;
  case 2UL: 
#line 209
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6273;
  case 4UL: 
#line 209
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6273;
  case 8UL: 
#line 209
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 209
  goto ldv_6273;
  default: 
#line 209
  __bad_percpu_size();
  }
  ldv_6273: 
#line 209
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 211
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 552 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2280 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___3();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___3();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 124 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 126
extern void cn_del_callback(struct cb_id * ) ;
#line 127
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 409 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  pagefault_disable___0();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 75
  pagefault_enable___0();
#line 76
  return;
}
}
#line 856 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 860
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 876
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 883
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1564 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1956 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1959
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1963
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1963
  if (tmp___1 != 0UL) {
#line 1963
    __min1 = 2251799813685248UL;
#line 1963
    tmp___0 = drbd_md_first_sector(bdev);
#line 1963
    __min2 = tmp___0;
#line 1963
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1963
    s = 0UL;
  }
#line 1966
  goto ldv_50149;
  case -2: 
#line 1968
  __min1___0 = 2251799813685248UL;
#line 1968
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  __min2___0 = tmp___2;
#line 1968
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1971
  __min1___1 = s;
#line 1971
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1971
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1974
  goto ldv_50149;
  default: 
#line 1976
  __min1___2 = 8587575296UL;
#line 1976
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1976
  __min2___2 = tmp___3;
#line 1976
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_50149: ;
#line 1979
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[90U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"detach_force", 40960, 4}, 
        {"disk_timeout", 0, 4}};
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 108
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 109
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_50932;
  ldv_50931: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_50929;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_50929: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_50932: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_50931;
  } else {

  }

#line 14
  return (1);
}
}
#line 35
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 35 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  unsigned short *tmp___6 ;
  u16 tmp___7 ;

  {
#line 20
  goto ldv_50994;
  ldv_50993: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_50961;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_50961;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_50961;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_50961;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_50961;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_50961;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50961;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50961;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50961;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_50961;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50961;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_50961;
  case 89: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->disk_timeout = (int )tmp___5;
#line 20
  goto ldv_50961;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_50961: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_50994: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___7 = get_unaligned_le16((void const   *)tmp___6);
#line 20
  tag = (int )tmp___7;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_50993;
  } else {

  }

#line 20
  return (1);
}
}
#line 39
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) ;
#line 39 "include/linux/drbd_nl.h"
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 37
  goto ldv_51011;
  ldv_51010: 
#line 37
  tmp = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 37
  dlen = (int )tmp___0;
#line 37
  switch (tag & 8191) {
  case 88: 
#line 37
  arg->detach_force = (int )((signed char )*((char *)tags)) != 0;
#line 37
  goto ldv_51008;
  default: ;
#line 37
  if ((tag & 8192) != 0) {
#line 37
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 37
    return (0);
  } else {

  }
  }
  ldv_51008: 
#line 37
  tags = tags + (unsigned long )dlen;
  ldv_51011: 
#line 37
  tmp___1 = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 37
  tag = (int )tmp___2;
#line 37
  if (tag != 0) {
#line 38
    goto ldv_51010;
  } else {

  }

#line 37
  return (1);
}
}
#line 73
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 73 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 41
  goto ldv_51102;
  ldv_51101: 
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 41
  dlen = (int )tmp___0;
#line 41
  switch (tag & 8191) {
  case 8: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->my_addr_len = dlen;
#line 41
  __min1 = (size_t )dlen;
#line 41
  __min2 = 128UL;
#line 41
  __len = __min1 < __min2 ? __min1 : __min2;
#line 41
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 41
  goto ldv_51034;
  case 9: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->peer_addr_len = dlen;
#line 41
  __min1___0 = (size_t )dlen;
#line 41
  __min2___0 = 128UL;
#line 41
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 41
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 41
  goto ldv_51034;
  case 10: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->shared_secret_len = dlen;
#line 41
  __min1___1 = (size_t )dlen;
#line 41
  __min2___1 = 64UL;
#line 41
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 41
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 41
  goto ldv_51034;
  case 11: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->cram_hmac_alg_len = dlen;
#line 41
  __min1___2 = (size_t )dlen;
#line 41
  __min2___2 = 64UL;
#line 41
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 41
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 41
  goto ldv_51034;
  case 44: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->integrity_alg_len = dlen;
#line 41
  __min1___3 = (size_t )dlen;
#line 41
  __min2___3 = 64UL;
#line 41
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 41
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 41
  goto ldv_51034;
  case 14: 
#line 41
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->timeout = (int )tmp___1;
#line 41
  goto ldv_51034;
  case 15: 
#line 41
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->wire_protocol = (int )tmp___2;
#line 41
  goto ldv_51034;
  case 16: 
#line 41
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->try_connect_int = (int )tmp___3;
#line 41
  goto ldv_51034;
  case 17: 
#line 41
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_int = (int )tmp___4;
#line 41
  goto ldv_51034;
  case 18: 
#line 41
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_epoch_size = (int )tmp___5;
#line 41
  goto ldv_51034;
  case 19: 
#line 41
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_buffers = (int )tmp___6;
#line 41
  goto ldv_51034;
  case 20: 
#line 41
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->unplug_watermark = (int )tmp___7;
#line 41
  goto ldv_51034;
  case 21: 
#line 41
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->sndbuf_size = (int )tmp___8;
#line 41
  goto ldv_51034;
  case 22: 
#line 41
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ko_count = (int )tmp___9;
#line 41
  goto ldv_51034;
  case 24: 
#line 41
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_0p = (int )tmp___10;
#line 41
  goto ldv_51034;
  case 25: 
#line 41
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_1p = (int )tmp___11;
#line 41
  goto ldv_51034;
  case 26: 
#line 41
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_2p = (int )tmp___12;
#line 41
  goto ldv_51034;
  case 39: 
#line 41
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rr_conflict = (int )tmp___13;
#line 41
  goto ldv_51034;
  case 40: 
#line 41
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_timeo = (int )tmp___14;
#line 41
  goto ldv_51034;
  case 67: 
#line 41
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rcvbuf_size = (int )tmp___15;
#line 41
  goto ldv_51034;
  case 81: 
#line 41
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->on_congestion = (int )tmp___16;
#line 41
  goto ldv_51034;
  case 82: 
#line 41
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_fill = (int )tmp___17;
#line 41
  goto ldv_51034;
  case 83: 
#line 41
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_extents = (int )tmp___18;
#line 41
  goto ldv_51034;
  case 60: 
#line 41
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 27: 
#line 41
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 28: 
#line 41
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 41: 
#line 41
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 61: 
#line 41
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 62: 
#line 41
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  case 70: 
#line 41
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_51034;
  default: ;
#line 41
  if ((tag & 8192) != 0) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 41
    return (0);
  } else {

  }
  }
  ldv_51034: 
#line 41
  tags = tags + (unsigned long )dlen;
  ldv_51102: 
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 41
  tag = (int )tmp___20;
#line 41
  if (tag != 0) {
#line 42
    goto ldv_51101;
  } else {

  }

#line 41
  return (1);
}
}
#line 77
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 77 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 75
  goto ldv_51119;
  ldv_51118: 
#line 75
  tmp = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 75
  dlen = (int )tmp___0;
#line 75
  switch (tag & 8191) {
  case 84: 
#line 75
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 75
  goto ldv_51116;
  default: ;
#line 75
  if ((tag & 8192) != 0) {
#line 75
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 75
    return (0);
  } else {

  }
  }
  ldv_51116: 
#line 75
  tags = tags + (unsigned long )dlen;
  ldv_51119: 
#line 75
  tmp___1 = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 75
  tag = (int )tmp___2;
#line 75
  if (tag != 0) {
#line 76
    goto ldv_51118;
  } else {

  }

#line 75
  return (1);
}
}
#line 83
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 83 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 79
  goto ldv_51138;
  ldv_51137: 
#line 79
  tmp = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 79
  dlen = (int )tmp___0;
#line 79
  switch (tag & 8191) {
  case 29: 
#line 79
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 79
  goto ldv_51133;
  case 68: 
#line 79
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_51133;
  case 69: 
#line 79
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_51133;
  default: ;
#line 79
  if ((tag & 8192) != 0) {
#line 79
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 79
    return (0);
  } else {

  }
  }
  ldv_51133: 
#line 79
  tags = tags + (unsigned long )dlen;
  ldv_51138: 
#line 79
  tmp___1 = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 79
  tag = (int )tmp___2;
#line 79
  if (tag != 0) {
#line 80
    goto ldv_51137;
  } else {

  }

#line 79
  return (1);
}
}
#line 104
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 104 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 85
  goto ldv_51194;
  ldv_51193: 
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 85
  dlen = (int )tmp___0;
#line 85
  switch (tag & 8191) {
  case 30: 
#line 85
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->rate = (int )tmp___1;
#line 85
  goto ldv_51152;
  case 31: 
#line 85
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->after = (int )tmp___2;
#line 85
  goto ldv_51152;
  case 32: 
#line 85
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->al_extents = (int )tmp___3;
#line 85
  goto ldv_51152;
  case 52: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->verify_alg_len = dlen;
#line 85
  __min1 = (size_t )dlen;
#line 85
  __min2 = 64UL;
#line 85
  __len = __min1 < __min2 ? __min1 : __min2;
#line 85
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 85
  goto ldv_51152;
  case 51: ;
#line 85
  if (dlen > 32) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->cpu_mask_len = dlen;
#line 85
  __min1___0 = (size_t )dlen;
#line 85
  __min2___0 = 32UL;
#line 85
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 85
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 85
  goto ldv_51152;
  case 64: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->csums_alg_len = dlen;
#line 85
  __min1___1 = (size_t )dlen;
#line 85
  __min2___1 = 64UL;
#line 85
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 85
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 85
  goto ldv_51152;
  case 65: 
#line 85
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 85
  goto ldv_51152;
  case 75: 
#line 85
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->on_no_data = (int )tmp___4;
#line 85
  goto ldv_51152;
  case 76: 
#line 85
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_plan_ahead = (int )tmp___5;
#line 85
  goto ldv_51152;
  case 77: 
#line 85
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_delay_target = (int )tmp___6;
#line 85
  goto ldv_51152;
  case 78: 
#line 85
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_fill_target = (int )tmp___7;
#line 85
  goto ldv_51152;
  case 79: 
#line 85
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_max_rate = (int )tmp___8;
#line 85
  goto ldv_51152;
  case 80: 
#line 85
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_min_rate = (int )tmp___9;
#line 85
  goto ldv_51152;
  default: ;
#line 85
  if ((tag & 8192) != 0) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 85
    return (0);
  } else {

  }
  }
  ldv_51152: 
#line 85
  tags = tags + (unsigned long )dlen;
  ldv_51194: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 85
  tag = (int )tmp___11;
#line 85
  if (tag != 0) {
#line 86
    goto ldv_51193;
  } else {

  }

#line 85
  return (1);
}
}
#line 148
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 148 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 146
  goto ldv_51493;
  ldv_51492: 
#line 146
  tmp = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 146
  dlen = (int )tmp___0;
#line 146
  switch (tag & 8191) {
  case 66: 
#line 146
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_51490;
  default: ;
#line 146
  if ((tag & 8192) != 0) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 146
    return (0);
  } else {

  }
  }
  ldv_51490: 
#line 146
  tags = tags + (unsigned long )dlen;
  ldv_51493: 
#line 146
  tmp___1 = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 146
  tag = (int )tmp___2;
#line 146
  if (tag != 0) {
#line 147
    goto ldv_51492;
  } else {

  }

#line 146
  return (1);
}
}
#line 152
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 152 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 150
  goto ldv_51510;
  ldv_51509: 
#line 150
  tmp = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 150
  dlen = (int )tmp___0;
#line 150
  switch (tag & 8191) {
  case 63: 
#line 150
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 150
  goto ldv_51507;
  default: ;
#line 150
  if ((tag & 8192) != 0) {
#line 150
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 150
    return (0);
  } else {

  }
  }
  ldv_51507: 
#line 150
  tags = tags + (unsigned long )dlen;
  ldv_51510: 
#line 150
  tmp___1 = tags;
#line 150
  tags = tags + 1;
#line 150
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 150
  tag = (int )tmp___2;
#line 150
  if (tag != 0) {
#line 151
    goto ldv_51509;
  } else {

  }

#line 150
  return (1);
}
}
#line 35
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 35 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;
  void *__gu_p___28 ;
  unsigned short *tmp___23 ;
  void *__gu_p___29 ;
  unsigned short *tmp___24 ;
  void *__gu_p___30 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_51555;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_51555;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_51555;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_51555;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51555;
  }
  ldv_51555: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_51562;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_51562;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_51562;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_51562;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51562;
  }
  ldv_51562: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_51569;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_51569;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_51569;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_51569;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51569;
  }
  ldv_51569: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_51576;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_51576;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_51576;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_51576;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51576;
  }
  ldv_51576: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_51583;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_51583;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_51583;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_51583;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51583;
  }
  ldv_51583: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_51593;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_51593;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_51593;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_51593;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51593;
  }
  ldv_51593: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_51600;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_51600;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_51600;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_51600;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51600;
  }
  ldv_51600: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_51610;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_51610;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_51610;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_51610;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51610;
  }
  ldv_51610: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_51617;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_51617;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_51617;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_51617;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51617;
  }
  ldv_51617: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_51624;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_51624;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_51624;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_51624;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51624;
  }
  ldv_51624: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_51631;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_51631;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_51631;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_51631;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51631;
  }
  ldv_51631: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_51638;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_51638;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_51638;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_51638;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51638;
  }
  ldv_51638: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_51645;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_51645;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_51645;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_51645;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51645;
  }
  ldv_51645: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_51652;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_51652;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_51652;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_51652;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51652;
  }
  ldv_51652: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_51659;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_51659;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_51659;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_51659;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51659;
  }
  ldv_51659: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_51666;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_51666;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51666;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_51666;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51666;
  }
  ldv_51666: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_51673;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_51673;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_51673;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_51673;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51673;
  }
  ldv_51673: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_51680;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_51680;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_51680;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_51680;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51680;
  }
  ldv_51680: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_51687;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_51687;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_51687;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_51687;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51687;
  }
  ldv_51687: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_51694;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_51694;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_51694;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_51694;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51694;
  }
  ldv_51694: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_51701;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_51701;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_51701;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_51701;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51701;
  }
  ldv_51701: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_51708;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_51708;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_51708;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_51708;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51708;
  }
  ldv_51708: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_51715;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_51715;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_51715;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_51715;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51715;
  }
  ldv_51715: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_51722;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_51722;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_51722;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_51722;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51722;
  }
  ldv_51722: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_51729;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_51729;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51729;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_51729;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51729;
  }
  ldv_51729: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_51736;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_51736;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_51736;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_51736;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51736;
  }
  ldv_51736: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_51743;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_51743;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_51743;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_51743;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51743;
  }
  ldv_51743: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_51750;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_51750;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_51750;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_51750;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51750;
  }
  ldv_51750: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_51757;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_51757;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_51757;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_51757;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51757;
  }
  ldv_51757: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  tmp___23 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___28 = (void *)tmp___23;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___28) = 89U;
#line 20
  goto ldv_51764;
  case 2UL: 
#line 20
  put_unaligned_le16(89, __gu_p___28);
#line 20
  goto ldv_51764;
  case 4UL: 
#line 20
  put_unaligned_le32(89U, __gu_p___28);
#line 20
  goto ldv_51764;
  case 8UL: 
#line 20
  put_unaligned_le64(89ULL, __gu_p___28);
#line 20
  goto ldv_51764;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51764;
  }
  ldv_51764: 
#line 20
  tmp___24 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___29 = (void *)tmp___24;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___29) = 4U;
#line 20
  goto ldv_51771;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___29);
#line 20
  goto ldv_51771;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___29);
#line 20
  goto ldv_51771;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___29);
#line 20
  goto ldv_51771;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51771;
  }
  ldv_51771: 
#line 20
  __gu_p___30 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___30) = (unsigned char )arg->disk_timeout;
#line 20
  goto ldv_51778;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_timeout), __gu_p___30);
#line 20
  goto ldv_51778;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51778;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_51778;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_51778;
  }
  ldv_51778: 
#line 20
  tags = tags + 4U;
#line 20
  return (tags);
}
}
#line 73
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 73 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p = (void *)tmp;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p) = 8U;
#line 41
  goto ldv_51817;
  case 2UL: 
#line 41
  put_unaligned_le16(57352, __gu_p);
#line 41
  goto ldv_51817;
  case 4UL: 
#line 41
  put_unaligned_le32(57352U, __gu_p);
#line 41
  goto ldv_51817;
  case 8UL: 
#line 41
  put_unaligned_le64(57352ULL, __gu_p);
#line 41
  goto ldv_51817;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51817;
  }
  ldv_51817: 
#line 41
  tmp___0 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___0 = (void *)tmp___0;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 41
  goto ldv_51824;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 41
  goto ldv_51824;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51824;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_51824;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51824;
  }
  ldv_51824: 
#line 41
  __len = (size_t )arg->my_addr_len;
#line 41
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 41
  tags = tags + (unsigned long )arg->my_addr_len;
#line 41
  tmp___1 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___1 = (void *)tmp___1;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___1) = 9U;
#line 41
  goto ldv_51834;
  case 2UL: 
#line 41
  put_unaligned_le16(57353, __gu_p___1);
#line 41
  goto ldv_51834;
  case 4UL: 
#line 41
  put_unaligned_le32(57353U, __gu_p___1);
#line 41
  goto ldv_51834;
  case 8UL: 
#line 41
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 41
  goto ldv_51834;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51834;
  }
  ldv_51834: 
#line 41
  tmp___2 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___2 = (void *)tmp___2;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 41
  goto ldv_51841;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 41
  goto ldv_51841;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51841;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_51841;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51841;
  }
  ldv_51841: 
#line 41
  __len___0 = (size_t )arg->peer_addr_len;
#line 41
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 41
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 41
  tmp___3 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___3 = (void *)tmp___3;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___3) = 10U;
#line 41
  goto ldv_51851;
  case 2UL: 
#line 41
  put_unaligned_le16(49162, __gu_p___3);
#line 41
  goto ldv_51851;
  case 4UL: 
#line 41
  put_unaligned_le32(49162U, __gu_p___3);
#line 41
  goto ldv_51851;
  case 8UL: 
#line 41
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 41
  goto ldv_51851;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51851;
  }
  ldv_51851: 
#line 41
  tmp___4 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___4 = (void *)tmp___4;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 41
  goto ldv_51858;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 41
  goto ldv_51858;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51858;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_51858;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51858;
  }
  ldv_51858: 
#line 41
  __len___1 = (size_t )arg->shared_secret_len;
#line 41
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 41
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 41
  tmp___5 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___5 = (void *)tmp___5;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___5) = 11U;
#line 41
  goto ldv_51868;
  case 2UL: 
#line 41
  put_unaligned_le16(49163, __gu_p___5);
#line 41
  goto ldv_51868;
  case 4UL: 
#line 41
  put_unaligned_le32(49163U, __gu_p___5);
#line 41
  goto ldv_51868;
  case 8UL: 
#line 41
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 41
  goto ldv_51868;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51868;
  }
  ldv_51868: 
#line 41
  tmp___6 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___6 = (void *)tmp___6;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 41
  goto ldv_51875;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 41
  goto ldv_51875;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51875;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_51875;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51875;
  }
  ldv_51875: 
#line 41
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 41
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 41
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 41
  tmp___7 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___7 = (void *)tmp___7;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___7) = 44U;
#line 41
  goto ldv_51885;
  case 2UL: 
#line 41
  put_unaligned_le16(49196, __gu_p___7);
#line 41
  goto ldv_51885;
  case 4UL: 
#line 41
  put_unaligned_le32(49196U, __gu_p___7);
#line 41
  goto ldv_51885;
  case 8UL: 
#line 41
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 41
  goto ldv_51885;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51885;
  }
  ldv_51885: 
#line 41
  tmp___8 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___8 = (void *)tmp___8;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 41
  goto ldv_51892;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 41
  goto ldv_51892;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51892;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_51892;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51892;
  }
  ldv_51892: 
#line 41
  __len___3 = (size_t )arg->integrity_alg_len;
#line 41
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 41
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 41
  tmp___9 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___9 = (void *)tmp___9;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___9) = 14U;
#line 41
  goto ldv_51902;
  case 2UL: 
#line 41
  put_unaligned_le16(14, __gu_p___9);
#line 41
  goto ldv_51902;
  case 4UL: 
#line 41
  put_unaligned_le32(14U, __gu_p___9);
#line 41
  goto ldv_51902;
  case 8UL: 
#line 41
  put_unaligned_le64(14ULL, __gu_p___9);
#line 41
  goto ldv_51902;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51902;
  }
  ldv_51902: 
#line 41
  tmp___10 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___10 = (void *)tmp___10;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___10) = 4U;
#line 41
  goto ldv_51909;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___10);
#line 41
  goto ldv_51909;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___10);
#line 41
  goto ldv_51909;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___10);
#line 41
  goto ldv_51909;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51909;
  }
  ldv_51909: 
#line 41
  __gu_p___11 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 41
  goto ldv_51916;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 41
  goto ldv_51916;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51916;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 41
  goto ldv_51916;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51916;
  }
  ldv_51916: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___11 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___12 = (void *)tmp___11;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___12) = 15U;
#line 41
  goto ldv_51923;
  case 2UL: 
#line 41
  put_unaligned_le16(8207, __gu_p___12);
#line 41
  goto ldv_51923;
  case 4UL: 
#line 41
  put_unaligned_le32(8207U, __gu_p___12);
#line 41
  goto ldv_51923;
  case 8UL: 
#line 41
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 41
  goto ldv_51923;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51923;
  }
  ldv_51923: 
#line 41
  tmp___12 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___13 = (void *)tmp___12;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___13) = 4U;
#line 41
  goto ldv_51930;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___13);
#line 41
  goto ldv_51930;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___13);
#line 41
  goto ldv_51930;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___13);
#line 41
  goto ldv_51930;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51930;
  }
  ldv_51930: 
#line 41
  __gu_p___14 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 41
  goto ldv_51937;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 41
  goto ldv_51937;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51937;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_51937;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51937;
  }
  ldv_51937: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___13 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___15 = (void *)tmp___13;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___15) = 16U;
#line 41
  goto ldv_51944;
  case 2UL: 
#line 41
  put_unaligned_le16(16, __gu_p___15);
#line 41
  goto ldv_51944;
  case 4UL: 
#line 41
  put_unaligned_le32(16U, __gu_p___15);
#line 41
  goto ldv_51944;
  case 8UL: 
#line 41
  put_unaligned_le64(16ULL, __gu_p___15);
#line 41
  goto ldv_51944;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51944;
  }
  ldv_51944: 
#line 41
  tmp___14 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___16 = (void *)tmp___14;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___16) = 4U;
#line 41
  goto ldv_51951;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___16);
#line 41
  goto ldv_51951;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___16);
#line 41
  goto ldv_51951;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___16);
#line 41
  goto ldv_51951;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51951;
  }
  ldv_51951: 
#line 41
  __gu_p___17 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 41
  goto ldv_51958;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 41
  goto ldv_51958;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51958;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_51958;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51958;
  }
  ldv_51958: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___15 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___18 = (void *)tmp___15;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___18) = 17U;
#line 41
  goto ldv_51965;
  case 2UL: 
#line 41
  put_unaligned_le16(17, __gu_p___18);
#line 41
  goto ldv_51965;
  case 4UL: 
#line 41
  put_unaligned_le32(17U, __gu_p___18);
#line 41
  goto ldv_51965;
  case 8UL: 
#line 41
  put_unaligned_le64(17ULL, __gu_p___18);
#line 41
  goto ldv_51965;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51965;
  }
  ldv_51965: 
#line 41
  tmp___16 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___19 = (void *)tmp___16;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___19) = 4U;
#line 41
  goto ldv_51972;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___19);
#line 41
  goto ldv_51972;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___19);
#line 41
  goto ldv_51972;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___19);
#line 41
  goto ldv_51972;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51972;
  }
  ldv_51972: 
#line 41
  __gu_p___20 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 41
  goto ldv_51979;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 41
  goto ldv_51979;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51979;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_51979;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51979;
  }
  ldv_51979: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___17 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___21 = (void *)tmp___17;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___21) = 18U;
#line 41
  goto ldv_51986;
  case 2UL: 
#line 41
  put_unaligned_le16(18, __gu_p___21);
#line 41
  goto ldv_51986;
  case 4UL: 
#line 41
  put_unaligned_le32(18U, __gu_p___21);
#line 41
  goto ldv_51986;
  case 8UL: 
#line 41
  put_unaligned_le64(18ULL, __gu_p___21);
#line 41
  goto ldv_51986;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51986;
  }
  ldv_51986: 
#line 41
  tmp___18 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___22 = (void *)tmp___18;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___22) = 4U;
#line 41
  goto ldv_51993;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___22);
#line 41
  goto ldv_51993;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___22);
#line 41
  goto ldv_51993;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___22);
#line 41
  goto ldv_51993;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_51993;
  }
  ldv_51993: 
#line 41
  __gu_p___23 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 41
  goto ldv_52000;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 41
  goto ldv_52000;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_52000;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_52000;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52000;
  }
  ldv_52000: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___24 = (void *)tmp___19;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___24) = 19U;
#line 41
  goto ldv_52007;
  case 2UL: 
#line 41
  put_unaligned_le16(19, __gu_p___24);
#line 41
  goto ldv_52007;
  case 4UL: 
#line 41
  put_unaligned_le32(19U, __gu_p___24);
#line 41
  goto ldv_52007;
  case 8UL: 
#line 41
  put_unaligned_le64(19ULL, __gu_p___24);
#line 41
  goto ldv_52007;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52007;
  }
  ldv_52007: 
#line 41
  tmp___20 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___25 = (void *)tmp___20;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___25) = 4U;
#line 41
  goto ldv_52014;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___25);
#line 41
  goto ldv_52014;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___25);
#line 41
  goto ldv_52014;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___25);
#line 41
  goto ldv_52014;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52014;
  }
  ldv_52014: 
#line 41
  __gu_p___26 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 41
  goto ldv_52021;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 41
  goto ldv_52021;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_52021;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_52021;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52021;
  }
  ldv_52021: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___21 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___27 = (void *)tmp___21;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___27) = 20U;
#line 41
  goto ldv_52028;
  case 2UL: 
#line 41
  put_unaligned_le16(20, __gu_p___27);
#line 41
  goto ldv_52028;
  case 4UL: 
#line 41
  put_unaligned_le32(20U, __gu_p___27);
#line 41
  goto ldv_52028;
  case 8UL: 
#line 41
  put_unaligned_le64(20ULL, __gu_p___27);
#line 41
  goto ldv_52028;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52028;
  }
  ldv_52028: 
#line 41
  tmp___22 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___28 = (void *)tmp___22;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___28) = 4U;
#line 41
  goto ldv_52035;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___28);
#line 41
  goto ldv_52035;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___28);
#line 41
  goto ldv_52035;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___28);
#line 41
  goto ldv_52035;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52035;
  }
  ldv_52035: 
#line 41
  __gu_p___29 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 41
  goto ldv_52042;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 41
  goto ldv_52042;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_52042;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_52042;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52042;
  }
  ldv_52042: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___23 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___30 = (void *)tmp___23;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___30) = 21U;
#line 41
  goto ldv_52049;
  case 2UL: 
#line 41
  put_unaligned_le16(21, __gu_p___30);
#line 41
  goto ldv_52049;
  case 4UL: 
#line 41
  put_unaligned_le32(21U, __gu_p___30);
#line 41
  goto ldv_52049;
  case 8UL: 
#line 41
  put_unaligned_le64(21ULL, __gu_p___30);
#line 41
  goto ldv_52049;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52049;
  }
  ldv_52049: 
#line 41
  tmp___24 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___31 = (void *)tmp___24;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___31) = 4U;
#line 41
  goto ldv_52056;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___31);
#line 41
  goto ldv_52056;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___31);
#line 41
  goto ldv_52056;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___31);
#line 41
  goto ldv_52056;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52056;
  }
  ldv_52056: 
#line 41
  __gu_p___32 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 41
  goto ldv_52063;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 41
  goto ldv_52063;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_52063;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_52063;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52063;
  }
  ldv_52063: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___25 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___33 = (void *)tmp___25;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___33) = 22U;
#line 41
  goto ldv_52070;
  case 2UL: 
#line 41
  put_unaligned_le16(22, __gu_p___33);
#line 41
  goto ldv_52070;
  case 4UL: 
#line 41
  put_unaligned_le32(22U, __gu_p___33);
#line 41
  goto ldv_52070;
  case 8UL: 
#line 41
  put_unaligned_le64(22ULL, __gu_p___33);
#line 41
  goto ldv_52070;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52070;
  }
  ldv_52070: 
#line 41
  tmp___26 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___34 = (void *)tmp___26;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___34) = 4U;
#line 41
  goto ldv_52077;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___34);
#line 41
  goto ldv_52077;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___34);
#line 41
  goto ldv_52077;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___34);
#line 41
  goto ldv_52077;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52077;
  }
  ldv_52077: 
#line 41
  __gu_p___35 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 41
  goto ldv_52084;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 41
  goto ldv_52084;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_52084;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_52084;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52084;
  }
  ldv_52084: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___27 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___36 = (void *)tmp___27;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___36) = 24U;
#line 41
  goto ldv_52091;
  case 2UL: 
#line 41
  put_unaligned_le16(24, __gu_p___36);
#line 41
  goto ldv_52091;
  case 4UL: 
#line 41
  put_unaligned_le32(24U, __gu_p___36);
#line 41
  goto ldv_52091;
  case 8UL: 
#line 41
  put_unaligned_le64(24ULL, __gu_p___36);
#line 41
  goto ldv_52091;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52091;
  }
  ldv_52091: 
#line 41
  tmp___28 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___37 = (void *)tmp___28;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___37) = 4U;
#line 41
  goto ldv_52098;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___37);
#line 41
  goto ldv_52098;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___37);
#line 41
  goto ldv_52098;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___37);
#line 41
  goto ldv_52098;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52098;
  }
  ldv_52098: 
#line 41
  __gu_p___38 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 41
  goto ldv_52105;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 41
  goto ldv_52105;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_52105;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_52105;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52105;
  }
  ldv_52105: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___29 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___39 = (void *)tmp___29;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___39) = 25U;
#line 41
  goto ldv_52112;
  case 2UL: 
#line 41
  put_unaligned_le16(25, __gu_p___39);
#line 41
  goto ldv_52112;
  case 4UL: 
#line 41
  put_unaligned_le32(25U, __gu_p___39);
#line 41
  goto ldv_52112;
  case 8UL: 
#line 41
  put_unaligned_le64(25ULL, __gu_p___39);
#line 41
  goto ldv_52112;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52112;
  }
  ldv_52112: 
#line 41
  tmp___30 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___40 = (void *)tmp___30;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___40) = 4U;
#line 41
  goto ldv_52119;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___40);
#line 41
  goto ldv_52119;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___40);
#line 41
  goto ldv_52119;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___40);
#line 41
  goto ldv_52119;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52119;
  }
  ldv_52119: 
#line 41
  __gu_p___41 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 41
  goto ldv_52126;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 41
  goto ldv_52126;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_52126;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_52126;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52126;
  }
  ldv_52126: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___31 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___42 = (void *)tmp___31;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___42) = 26U;
#line 41
  goto ldv_52133;
  case 2UL: 
#line 41
  put_unaligned_le16(26, __gu_p___42);
#line 41
  goto ldv_52133;
  case 4UL: 
#line 41
  put_unaligned_le32(26U, __gu_p___42);
#line 41
  goto ldv_52133;
  case 8UL: 
#line 41
  put_unaligned_le64(26ULL, __gu_p___42);
#line 41
  goto ldv_52133;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52133;
  }
  ldv_52133: 
#line 41
  tmp___32 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___43 = (void *)tmp___32;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___43) = 4U;
#line 41
  goto ldv_52140;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___43);
#line 41
  goto ldv_52140;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___43);
#line 41
  goto ldv_52140;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___43);
#line 41
  goto ldv_52140;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52140;
  }
  ldv_52140: 
#line 41
  __gu_p___44 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 41
  goto ldv_52147;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 41
  goto ldv_52147;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_52147;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_52147;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52147;
  }
  ldv_52147: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___33 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___45 = (void *)tmp___33;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___45) = 39U;
#line 41
  goto ldv_52154;
  case 2UL: 
#line 41
  put_unaligned_le16(39, __gu_p___45);
#line 41
  goto ldv_52154;
  case 4UL: 
#line 41
  put_unaligned_le32(39U, __gu_p___45);
#line 41
  goto ldv_52154;
  case 8UL: 
#line 41
  put_unaligned_le64(39ULL, __gu_p___45);
#line 41
  goto ldv_52154;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52154;
  }
  ldv_52154: 
#line 41
  tmp___34 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___46 = (void *)tmp___34;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___46) = 4U;
#line 41
  goto ldv_52161;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___46);
#line 41
  goto ldv_52161;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___46);
#line 41
  goto ldv_52161;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___46);
#line 41
  goto ldv_52161;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52161;
  }
  ldv_52161: 
#line 41
  __gu_p___47 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 41
  goto ldv_52168;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 41
  goto ldv_52168;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_52168;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_52168;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52168;
  }
  ldv_52168: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___35 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___48 = (void *)tmp___35;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___48) = 40U;
#line 41
  goto ldv_52175;
  case 2UL: 
#line 41
  put_unaligned_le16(40, __gu_p___48);
#line 41
  goto ldv_52175;
  case 4UL: 
#line 41
  put_unaligned_le32(40U, __gu_p___48);
#line 41
  goto ldv_52175;
  case 8UL: 
#line 41
  put_unaligned_le64(40ULL, __gu_p___48);
#line 41
  goto ldv_52175;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52175;
  }
  ldv_52175: 
#line 41
  tmp___36 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___49 = (void *)tmp___36;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___49) = 4U;
#line 41
  goto ldv_52182;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___49);
#line 41
  goto ldv_52182;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___49);
#line 41
  goto ldv_52182;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___49);
#line 41
  goto ldv_52182;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52182;
  }
  ldv_52182: 
#line 41
  __gu_p___50 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 41
  goto ldv_52189;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 41
  goto ldv_52189;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_52189;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_52189;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52189;
  }
  ldv_52189: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___37 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___51 = (void *)tmp___37;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___51) = 67U;
#line 41
  goto ldv_52196;
  case 2UL: 
#line 41
  put_unaligned_le16(67, __gu_p___51);
#line 41
  goto ldv_52196;
  case 4UL: 
#line 41
  put_unaligned_le32(67U, __gu_p___51);
#line 41
  goto ldv_52196;
  case 8UL: 
#line 41
  put_unaligned_le64(67ULL, __gu_p___51);
#line 41
  goto ldv_52196;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52196;
  }
  ldv_52196: 
#line 41
  tmp___38 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___52 = (void *)tmp___38;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___52) = 4U;
#line 41
  goto ldv_52203;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___52);
#line 41
  goto ldv_52203;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___52);
#line 41
  goto ldv_52203;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___52);
#line 41
  goto ldv_52203;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52203;
  }
  ldv_52203: 
#line 41
  __gu_p___53 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 41
  goto ldv_52210;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 41
  goto ldv_52210;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_52210;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_52210;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52210;
  }
  ldv_52210: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___39 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___54 = (void *)tmp___39;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___54) = 81U;
#line 41
  goto ldv_52217;
  case 2UL: 
#line 41
  put_unaligned_le16(81, __gu_p___54);
#line 41
  goto ldv_52217;
  case 4UL: 
#line 41
  put_unaligned_le32(81U, __gu_p___54);
#line 41
  goto ldv_52217;
  case 8UL: 
#line 41
  put_unaligned_le64(81ULL, __gu_p___54);
#line 41
  goto ldv_52217;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52217;
  }
  ldv_52217: 
#line 41
  tmp___40 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___55 = (void *)tmp___40;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___55) = 4U;
#line 41
  goto ldv_52224;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___55);
#line 41
  goto ldv_52224;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___55);
#line 41
  goto ldv_52224;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___55);
#line 41
  goto ldv_52224;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52224;
  }
  ldv_52224: 
#line 41
  __gu_p___56 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 41
  goto ldv_52231;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 41
  goto ldv_52231;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_52231;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_52231;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52231;
  }
  ldv_52231: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___41 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___57 = (void *)tmp___41;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___57) = 82U;
#line 41
  goto ldv_52238;
  case 2UL: 
#line 41
  put_unaligned_le16(82, __gu_p___57);
#line 41
  goto ldv_52238;
  case 4UL: 
#line 41
  put_unaligned_le32(82U, __gu_p___57);
#line 41
  goto ldv_52238;
  case 8UL: 
#line 41
  put_unaligned_le64(82ULL, __gu_p___57);
#line 41
  goto ldv_52238;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52238;
  }
  ldv_52238: 
#line 41
  tmp___42 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___58 = (void *)tmp___42;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___58) = 4U;
#line 41
  goto ldv_52245;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___58);
#line 41
  goto ldv_52245;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___58);
#line 41
  goto ldv_52245;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___58);
#line 41
  goto ldv_52245;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52245;
  }
  ldv_52245: 
#line 41
  __gu_p___59 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 41
  goto ldv_52252;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 41
  goto ldv_52252;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_52252;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_52252;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52252;
  }
  ldv_52252: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___43 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___60 = (void *)tmp___43;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___60) = 83U;
#line 41
  goto ldv_52259;
  case 2UL: 
#line 41
  put_unaligned_le16(83, __gu_p___60);
#line 41
  goto ldv_52259;
  case 4UL: 
#line 41
  put_unaligned_le32(83U, __gu_p___60);
#line 41
  goto ldv_52259;
  case 8UL: 
#line 41
  put_unaligned_le64(83ULL, __gu_p___60);
#line 41
  goto ldv_52259;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52259;
  }
  ldv_52259: 
#line 41
  tmp___44 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___61 = (void *)tmp___44;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___61) = 4U;
#line 41
  goto ldv_52266;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___61);
#line 41
  goto ldv_52266;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___61);
#line 41
  goto ldv_52266;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___61);
#line 41
  goto ldv_52266;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52266;
  }
  ldv_52266: 
#line 41
  __gu_p___62 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 41
  goto ldv_52273;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 41
  goto ldv_52273;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_52273;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_52273;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52273;
  }
  ldv_52273: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___45 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___63 = (void *)tmp___45;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___63) = 60U;
#line 41
  goto ldv_52280;
  case 2UL: 
#line 41
  put_unaligned_le16(41020, __gu_p___63);
#line 41
  goto ldv_52280;
  case 4UL: 
#line 41
  put_unaligned_le32(41020U, __gu_p___63);
#line 41
  goto ldv_52280;
  case 8UL: 
#line 41
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 41
  goto ldv_52280;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52280;
  }
  ldv_52280: 
#line 41
  tmp___46 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___64 = (void *)tmp___46;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___64) = 1U;
#line 41
  goto ldv_52287;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___64);
#line 41
  goto ldv_52287;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___64);
#line 41
  goto ldv_52287;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___64);
#line 41
  goto ldv_52287;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52287;
  }
  ldv_52287: 
#line 41
  *((char *)tags) = (char )arg->mind_af;
#line 41
  tags = tags + 1U;
#line 41
  tmp___47 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___65 = (void *)tmp___47;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___65) = 27U;
#line 41
  goto ldv_52294;
  case 2UL: 
#line 41
  put_unaligned_le16(32795, __gu_p___65);
#line 41
  goto ldv_52294;
  case 4UL: 
#line 41
  put_unaligned_le32(32795U, __gu_p___65);
#line 41
  goto ldv_52294;
  case 8UL: 
#line 41
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 41
  goto ldv_52294;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52294;
  }
  ldv_52294: 
#line 41
  tmp___48 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___66 = (void *)tmp___48;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___66) = 1U;
#line 41
  goto ldv_52301;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___66);
#line 41
  goto ldv_52301;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___66);
#line 41
  goto ldv_52301;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___66);
#line 41
  goto ldv_52301;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52301;
  }
  ldv_52301: 
#line 41
  *((char *)tags) = (char )arg->want_lose;
#line 41
  tags = tags + 1U;
#line 41
  tmp___49 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___67 = (void *)tmp___49;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___67) = 28U;
#line 41
  goto ldv_52308;
  case 2UL: 
#line 41
  put_unaligned_le16(32796, __gu_p___67);
#line 41
  goto ldv_52308;
  case 4UL: 
#line 41
  put_unaligned_le32(32796U, __gu_p___67);
#line 41
  goto ldv_52308;
  case 8UL: 
#line 41
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 41
  goto ldv_52308;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52308;
  }
  ldv_52308: 
#line 41
  tmp___50 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___68 = (void *)tmp___50;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___68) = 1U;
#line 41
  goto ldv_52315;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___68);
#line 41
  goto ldv_52315;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___68);
#line 41
  goto ldv_52315;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___68);
#line 41
  goto ldv_52315;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52315;
  }
  ldv_52315: 
#line 41
  *((char *)tags) = (char )arg->two_primaries;
#line 41
  tags = tags + 1U;
#line 41
  tmp___51 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___69 = (void *)tmp___51;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___69) = 41U;
#line 41
  goto ldv_52322;
  case 2UL: 
#line 41
  put_unaligned_le16(32809, __gu_p___69);
#line 41
  goto ldv_52322;
  case 4UL: 
#line 41
  put_unaligned_le32(32809U, __gu_p___69);
#line 41
  goto ldv_52322;
  case 8UL: 
#line 41
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 41
  goto ldv_52322;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52322;
  }
  ldv_52322: 
#line 41
  tmp___52 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___70 = (void *)tmp___52;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___70) = 1U;
#line 41
  goto ldv_52329;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___70);
#line 41
  goto ldv_52329;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___70);
#line 41
  goto ldv_52329;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___70);
#line 41
  goto ldv_52329;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52329;
  }
  ldv_52329: 
#line 41
  *((char *)tags) = (char )arg->always_asbp;
#line 41
  tags = tags + 1U;
#line 41
  tmp___53 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___71 = (void *)tmp___53;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___71) = 61U;
#line 41
  goto ldv_52336;
  case 2UL: 
#line 41
  put_unaligned_le16(32829, __gu_p___71);
#line 41
  goto ldv_52336;
  case 4UL: 
#line 41
  put_unaligned_le32(32829U, __gu_p___71);
#line 41
  goto ldv_52336;
  case 8UL: 
#line 41
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 41
  goto ldv_52336;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52336;
  }
  ldv_52336: 
#line 41
  tmp___54 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___72 = (void *)tmp___54;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___72) = 1U;
#line 41
  goto ldv_52343;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___72);
#line 41
  goto ldv_52343;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___72);
#line 41
  goto ldv_52343;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___72);
#line 41
  goto ldv_52343;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52343;
  }
  ldv_52343: 
#line 41
  *((char *)tags) = (char )arg->no_cork;
#line 41
  tags = tags + 1U;
#line 41
  tmp___55 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___73 = (void *)tmp___55;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___73) = 62U;
#line 41
  goto ldv_52350;
  case 2UL: 
#line 41
  put_unaligned_le16(41022, __gu_p___73);
#line 41
  goto ldv_52350;
  case 4UL: 
#line 41
  put_unaligned_le32(41022U, __gu_p___73);
#line 41
  goto ldv_52350;
  case 8UL: 
#line 41
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 41
  goto ldv_52350;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52350;
  }
  ldv_52350: 
#line 41
  tmp___56 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___74 = (void *)tmp___56;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___74) = 1U;
#line 41
  goto ldv_52357;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___74);
#line 41
  goto ldv_52357;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___74);
#line 41
  goto ldv_52357;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___74);
#line 41
  goto ldv_52357;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52357;
  }
  ldv_52357: 
#line 41
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 41
  tags = tags + 1U;
#line 41
  tmp___57 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___75 = (void *)tmp___57;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___75) = 70U;
#line 41
  goto ldv_52364;
  case 2UL: 
#line 41
  put_unaligned_le16(41030, __gu_p___75);
#line 41
  goto ldv_52364;
  case 4UL: 
#line 41
  put_unaligned_le32(41030U, __gu_p___75);
#line 41
  goto ldv_52364;
  case 8UL: 
#line 41
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 41
  goto ldv_52364;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52364;
  }
  ldv_52364: 
#line 41
  tmp___58 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___76 = (void *)tmp___58;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___76) = 1U;
#line 41
  goto ldv_52371;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___76);
#line 41
  goto ldv_52371;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___76);
#line 41
  goto ldv_52371;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___76);
#line 41
  goto ldv_52371;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52371;
  }
  ldv_52371: 
#line 41
  *((char *)tags) = (char )arg->dry_run;
#line 41
  tags = tags + 1U;
#line 41
  return (tags);
}
}
#line 104
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 104 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p = (void *)tmp;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p) = 30U;
#line 85
  goto ldv_52468;
  case 2UL: 
#line 85
  put_unaligned_le16(30, __gu_p);
#line 85
  goto ldv_52468;
  case 4UL: 
#line 85
  put_unaligned_le32(30U, __gu_p);
#line 85
  goto ldv_52468;
  case 8UL: 
#line 85
  put_unaligned_le64(30ULL, __gu_p);
#line 85
  goto ldv_52468;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52468;
  }
  ldv_52468: 
#line 85
  tmp___0 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___0 = (void *)tmp___0;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___0) = 4U;
#line 85
  goto ldv_52475;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___0);
#line 85
  goto ldv_52475;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___0);
#line 85
  goto ldv_52475;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___0);
#line 85
  goto ldv_52475;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52475;
  }
  ldv_52475: 
#line 85
  __gu_p___1 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 85
  goto ldv_52482;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 85
  goto ldv_52482;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 85
  goto ldv_52482;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 85
  goto ldv_52482;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52482;
  }
  ldv_52482: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___1 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___2 = (void *)tmp___1;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___2) = 31U;
#line 85
  goto ldv_52489;
  case 2UL: 
#line 85
  put_unaligned_le16(31, __gu_p___2);
#line 85
  goto ldv_52489;
  case 4UL: 
#line 85
  put_unaligned_le32(31U, __gu_p___2);
#line 85
  goto ldv_52489;
  case 8UL: 
#line 85
  put_unaligned_le64(31ULL, __gu_p___2);
#line 85
  goto ldv_52489;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52489;
  }
  ldv_52489: 
#line 85
  tmp___2 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___3 = (void *)tmp___2;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___3) = 4U;
#line 85
  goto ldv_52496;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___3);
#line 85
  goto ldv_52496;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___3);
#line 85
  goto ldv_52496;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___3);
#line 85
  goto ldv_52496;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52496;
  }
  ldv_52496: 
#line 85
  __gu_p___4 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 85
  goto ldv_52503;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 85
  goto ldv_52503;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 85
  goto ldv_52503;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 85
  goto ldv_52503;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52503;
  }
  ldv_52503: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___3 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___5 = (void *)tmp___3;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___5) = 32U;
#line 85
  goto ldv_52510;
  case 2UL: 
#line 85
  put_unaligned_le16(32, __gu_p___5);
#line 85
  goto ldv_52510;
  case 4UL: 
#line 85
  put_unaligned_le32(32U, __gu_p___5);
#line 85
  goto ldv_52510;
  case 8UL: 
#line 85
  put_unaligned_le64(32ULL, __gu_p___5);
#line 85
  goto ldv_52510;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52510;
  }
  ldv_52510: 
#line 85
  tmp___4 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___6 = (void *)tmp___4;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___6) = 4U;
#line 85
  goto ldv_52517;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___6);
#line 85
  goto ldv_52517;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___6);
#line 85
  goto ldv_52517;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___6);
#line 85
  goto ldv_52517;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52517;
  }
  ldv_52517: 
#line 85
  __gu_p___7 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 85
  goto ldv_52524;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 85
  goto ldv_52524;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_52524;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_52524;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52524;
  }
  ldv_52524: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___5 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___8 = (void *)tmp___5;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___8) = 52U;
#line 85
  goto ldv_52531;
  case 2UL: 
#line 85
  put_unaligned_le16(49204, __gu_p___8);
#line 85
  goto ldv_52531;
  case 4UL: 
#line 85
  put_unaligned_le32(49204U, __gu_p___8);
#line 85
  goto ldv_52531;
  case 8UL: 
#line 85
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 85
  goto ldv_52531;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52531;
  }
  ldv_52531: 
#line 85
  tmp___6 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___9 = (void *)tmp___6;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 85
  goto ldv_52538;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 85
  goto ldv_52538;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_52538;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_52538;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52538;
  }
  ldv_52538: 
#line 85
  __len = (size_t )arg->verify_alg_len;
#line 85
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 85
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 85
  tmp___7 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___10 = (void *)tmp___7;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___10) = 51U;
#line 85
  goto ldv_52548;
  case 2UL: 
#line 85
  put_unaligned_le16(49203, __gu_p___10);
#line 85
  goto ldv_52548;
  case 4UL: 
#line 85
  put_unaligned_le32(49203U, __gu_p___10);
#line 85
  goto ldv_52548;
  case 8UL: 
#line 85
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 85
  goto ldv_52548;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52548;
  }
  ldv_52548: 
#line 85
  tmp___8 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___11 = (void *)tmp___8;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 85
  goto ldv_52555;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 85
  goto ldv_52555;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_52555;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_52555;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52555;
  }
  ldv_52555: 
#line 85
  __len___0 = (size_t )arg->cpu_mask_len;
#line 85
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 85
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 85
  tmp___9 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___12 = (void *)tmp___9;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___12) = 64U;
#line 85
  goto ldv_52565;
  case 2UL: 
#line 85
  put_unaligned_le16(49216, __gu_p___12);
#line 85
  goto ldv_52565;
  case 4UL: 
#line 85
  put_unaligned_le32(49216U, __gu_p___12);
#line 85
  goto ldv_52565;
  case 8UL: 
#line 85
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 85
  goto ldv_52565;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52565;
  }
  ldv_52565: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___13 = (void *)tmp___10;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 85
  goto ldv_52572;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 85
  goto ldv_52572;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_52572;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_52572;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52572;
  }
  ldv_52572: 
#line 85
  __len___1 = (size_t )arg->csums_alg_len;
#line 85
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 85
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 85
  tmp___11 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___14 = (void *)tmp___11;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___14) = 65U;
#line 85
  goto ldv_52582;
  case 2UL: 
#line 85
  put_unaligned_le16(32833, __gu_p___14);
#line 85
  goto ldv_52582;
  case 4UL: 
#line 85
  put_unaligned_le32(32833U, __gu_p___14);
#line 85
  goto ldv_52582;
  case 8UL: 
#line 85
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 85
  goto ldv_52582;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52582;
  }
  ldv_52582: 
#line 85
  tmp___12 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___15 = (void *)tmp___12;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___15) = 1U;
#line 85
  goto ldv_52589;
  case 2UL: 
#line 85
  put_unaligned_le16(1, __gu_p___15);
#line 85
  goto ldv_52589;
  case 4UL: 
#line 85
  put_unaligned_le32(1U, __gu_p___15);
#line 85
  goto ldv_52589;
  case 8UL: 
#line 85
  put_unaligned_le64(1ULL, __gu_p___15);
#line 85
  goto ldv_52589;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52589;
  }
  ldv_52589: 
#line 85
  *((char *)tags) = (char )arg->use_rle;
#line 85
  tags = tags + 1U;
#line 85
  tmp___13 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___16 = (void *)tmp___13;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___16) = 75U;
#line 85
  goto ldv_52596;
  case 2UL: 
#line 85
  put_unaligned_le16(75, __gu_p___16);
#line 85
  goto ldv_52596;
  case 4UL: 
#line 85
  put_unaligned_le32(75U, __gu_p___16);
#line 85
  goto ldv_52596;
  case 8UL: 
#line 85
  put_unaligned_le64(75ULL, __gu_p___16);
#line 85
  goto ldv_52596;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52596;
  }
  ldv_52596: 
#line 85
  tmp___14 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___17 = (void *)tmp___14;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___17) = 4U;
#line 85
  goto ldv_52603;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___17);
#line 85
  goto ldv_52603;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___17);
#line 85
  goto ldv_52603;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___17);
#line 85
  goto ldv_52603;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52603;
  }
  ldv_52603: 
#line 85
  __gu_p___18 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 85
  goto ldv_52610;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 85
  goto ldv_52610;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_52610;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_52610;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52610;
  }
  ldv_52610: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___15 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___19 = (void *)tmp___15;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___19) = 76U;
#line 85
  goto ldv_52617;
  case 2UL: 
#line 85
  put_unaligned_le16(76, __gu_p___19);
#line 85
  goto ldv_52617;
  case 4UL: 
#line 85
  put_unaligned_le32(76U, __gu_p___19);
#line 85
  goto ldv_52617;
  case 8UL: 
#line 85
  put_unaligned_le64(76ULL, __gu_p___19);
#line 85
  goto ldv_52617;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52617;
  }
  ldv_52617: 
#line 85
  tmp___16 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___20 = (void *)tmp___16;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___20) = 4U;
#line 85
  goto ldv_52624;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___20);
#line 85
  goto ldv_52624;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___20);
#line 85
  goto ldv_52624;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___20);
#line 85
  goto ldv_52624;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52624;
  }
  ldv_52624: 
#line 85
  __gu_p___21 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 85
  goto ldv_52631;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 85
  goto ldv_52631;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_52631;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_52631;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52631;
  }
  ldv_52631: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___17 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___22 = (void *)tmp___17;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___22) = 77U;
#line 85
  goto ldv_52638;
  case 2UL: 
#line 85
  put_unaligned_le16(77, __gu_p___22);
#line 85
  goto ldv_52638;
  case 4UL: 
#line 85
  put_unaligned_le32(77U, __gu_p___22);
#line 85
  goto ldv_52638;
  case 8UL: 
#line 85
  put_unaligned_le64(77ULL, __gu_p___22);
#line 85
  goto ldv_52638;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52638;
  }
  ldv_52638: 
#line 85
  tmp___18 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___23 = (void *)tmp___18;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___23) = 4U;
#line 85
  goto ldv_52645;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___23);
#line 85
  goto ldv_52645;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___23);
#line 85
  goto ldv_52645;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___23);
#line 85
  goto ldv_52645;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52645;
  }
  ldv_52645: 
#line 85
  __gu_p___24 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 85
  goto ldv_52652;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 85
  goto ldv_52652;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_52652;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_52652;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52652;
  }
  ldv_52652: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___19 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___25 = (void *)tmp___19;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___25) = 78U;
#line 85
  goto ldv_52659;
  case 2UL: 
#line 85
  put_unaligned_le16(78, __gu_p___25);
#line 85
  goto ldv_52659;
  case 4UL: 
#line 85
  put_unaligned_le32(78U, __gu_p___25);
#line 85
  goto ldv_52659;
  case 8UL: 
#line 85
  put_unaligned_le64(78ULL, __gu_p___25);
#line 85
  goto ldv_52659;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52659;
  }
  ldv_52659: 
#line 85
  tmp___20 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___26 = (void *)tmp___20;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___26) = 4U;
#line 85
  goto ldv_52666;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___26);
#line 85
  goto ldv_52666;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___26);
#line 85
  goto ldv_52666;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___26);
#line 85
  goto ldv_52666;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52666;
  }
  ldv_52666: 
#line 85
  __gu_p___27 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 85
  goto ldv_52673;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 85
  goto ldv_52673;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52673;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_52673;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52673;
  }
  ldv_52673: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___21 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___28 = (void *)tmp___21;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___28) = 79U;
#line 85
  goto ldv_52680;
  case 2UL: 
#line 85
  put_unaligned_le16(79, __gu_p___28);
#line 85
  goto ldv_52680;
  case 4UL: 
#line 85
  put_unaligned_le32(79U, __gu_p___28);
#line 85
  goto ldv_52680;
  case 8UL: 
#line 85
  put_unaligned_le64(79ULL, __gu_p___28);
#line 85
  goto ldv_52680;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52680;
  }
  ldv_52680: 
#line 85
  tmp___22 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___29 = (void *)tmp___22;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___29) = 4U;
#line 85
  goto ldv_52687;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___29);
#line 85
  goto ldv_52687;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___29);
#line 85
  goto ldv_52687;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___29);
#line 85
  goto ldv_52687;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52687;
  }
  ldv_52687: 
#line 85
  __gu_p___30 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 85
  goto ldv_52694;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 85
  goto ldv_52694;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52694;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_52694;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52694;
  }
  ldv_52694: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___23 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___31 = (void *)tmp___23;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___31) = 80U;
#line 85
  goto ldv_52701;
  case 2UL: 
#line 85
  put_unaligned_le16(80, __gu_p___31);
#line 85
  goto ldv_52701;
  case 4UL: 
#line 85
  put_unaligned_le32(80U, __gu_p___31);
#line 85
  goto ldv_52701;
  case 8UL: 
#line 85
  put_unaligned_le64(80ULL, __gu_p___31);
#line 85
  goto ldv_52701;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52701;
  }
  ldv_52701: 
#line 85
  tmp___24 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___32 = (void *)tmp___24;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___32) = 4U;
#line 85
  goto ldv_52708;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___32);
#line 85
  goto ldv_52708;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___32);
#line 85
  goto ldv_52708;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___32);
#line 85
  goto ldv_52708;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52708;
  }
  ldv_52708: 
#line 85
  __gu_p___33 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 85
  goto ldv_52715;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 85
  goto ldv_52715;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52715;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_52715;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_52715;
  }
  ldv_52715: 
#line 85
  tags = tags + 4U;
#line 85
  return (tags);
}
}
#line 116
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 116 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 114
  tmp = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p = (void *)tmp;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p) = 33U;
#line 114
  goto ldv_52803;
  case 2UL: 
#line 114
  put_unaligned_le16(33, __gu_p);
#line 114
  goto ldv_52803;
  case 4UL: 
#line 114
  put_unaligned_le32(33U, __gu_p);
#line 114
  goto ldv_52803;
  case 8UL: 
#line 114
  put_unaligned_le64(33ULL, __gu_p);
#line 114
  goto ldv_52803;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52803;
  }
  ldv_52803: 
#line 114
  tmp___0 = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p___0 = (void *)tmp___0;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___0) = 4U;
#line 114
  goto ldv_52810;
  case 2UL: 
#line 114
  put_unaligned_le16(4, __gu_p___0);
#line 114
  goto ldv_52810;
  case 4UL: 
#line 114
  put_unaligned_le32(4U, __gu_p___0);
#line 114
  goto ldv_52810;
  case 8UL: 
#line 114
  put_unaligned_le64(4ULL, __gu_p___0);
#line 114
  goto ldv_52810;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52810;
  }
  ldv_52810: 
#line 114
  __gu_p___1 = (void *)tags;
#line 114
  switch (4UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 114
  goto ldv_52817;
  case 2UL: 
#line 114
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 114
  goto ldv_52817;
  case 4UL: 
#line 114
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52817;
  case 8UL: 
#line 114
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 114
  goto ldv_52817;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_52817;
  }
  ldv_52817: 
#line 114
  tags = tags + 4U;
#line 114
  return (tags);
}
}
#line 197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 198
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  struct task_struct *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 202
  envp[0] = (char *)"HOME=/";
#line 202
  envp[1] = (char *)"TERM=linux";
#line 202
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 202
  envp[3] = 0;
#line 202
  envp[4] = 0;
#line 202
  envp[5] = 0;
#line 210
  argv[0] = (char *)(& usermode_helper);
#line 210
  argv[1] = cmd;
#line 210
  argv[2] = (char *)(& mb);
#line 210
  argv[3] = 0;
#line 213
  tmp = get_current();
#line 213
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 214
    set_bit(30U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 216
  tmp___0 = mdev_to_minor(mdev);
#line 216
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp___0);
#line 218
  tmp___1 = get_net_conf(mdev);
#line 218
  if (tmp___1 != 0) {
#line 219
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 221
    afs = (char *)"ipv6";
#line 222
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 224
    goto ldv_53138;
    case 2: 
#line 226
    afs = (char *)"ipv4";
#line 227
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 229
    goto ldv_53138;
    default: 
#line 231
    afs = (char *)"ssocks";
#line 232
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_53138: 
#line 235
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 236
    envp[3] = (char *)(& af);
#line 237
    envp[4] = (char *)(& ad);
#line 238
    put_net_conf(mdev);
  } else {

  }
#line 243
  drbd_md_sync(mdev);
#line 245
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 247
  drbd_bcast_ev_helper(mdev, cmd);
#line 248
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 249
  if (ret != 0) {
#line 250
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 254
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 258
  tmp___2 = get_current();
#line 258
  if ((unsigned long )tmp___2 == (unsigned long )mdev->worker.task) {
#line 259
    clear_bit(30, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 261
  if (ret < 0) {
#line 262
    ret = 0;
  } else {

  }
#line 264
  return (ret);
}
}
#line 267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 274
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 274
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            274);
  } else {

  }
#line 276
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 276
  if (tmp != 0) {
#line 277
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 278
    put_ldev(mdev);
  } else {
#line 280
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 281
    nps = (enum drbd_disk_state )mdev->state.ldv_39162.pdsk;
#line 282
    goto out;
  }
#line 285
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 287
  switch ((r >> 8) & 255) {
  case 3: 
#line 289
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 290
  nps = D_INCONSISTENT;
#line 291
  goto ldv_53150;
  case 4: 
#line 293
  ex_to_string = (char *)"peer was fenced";
#line 294
  nps = D_OUTDATED;
#line 295
  goto ldv_53150;
  case 5: ;
#line 297
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 299
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 300
    nps = D_OUTDATED;
  } else {
#line 302
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 303
    nps = (enum drbd_disk_state )mdev->state.ldv_39162.pdsk;
  }
#line 305
  goto ldv_53150;
  case 6: 
#line 309
  ex_to_string = (char *)"peer is active";
#line 310
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 311
  nps = D_UNKNOWN;
#line 312
  val.i = 0U;
#line 312
  val.ldv_39162.disk = 5U;
#line 312
  mask.i = 0U;
#line 312
  mask.ldv_39162.disk = 15U;
#line 312
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 313
  goto ldv_53150;
  case 7: ;
#line 315
  if ((unsigned int )fp != 2U) {
#line 316
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 317
  ex_to_string = (char *)"peer was stonithed";
#line 318
  nps = D_OUTDATED;
#line 319
  goto ldv_53150;
  default: 
#line 322
  nps = D_UNKNOWN;
#line 323
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 324
  return (nps);
  }
  ldv_53150: 
#line 327
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 331
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 334
    val___0.i = 0U;
#line 334
    val___0.ldv_39162.susp_fen = 0U;
#line 334
    mask___0.i = 0U;
#line 334
    mask___0.ldv_39162.susp_fen = 1U;
#line 334
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 337
  return (nps);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;
  int tmp ;

  {
#line 342
  mdev = (struct drbd_conf *)data;
#line 346
  nps = drbd_try_outdate_peer(mdev);
#line 359
  spin_lock_irq(& mdev->req_lock);
#line 360
  ns = mdev->state;
#line 361
  if ((int )ns.ldv_39162.conn <= 8) {
#line 361
    tmp = constant_test_bit(29U, (unsigned long const volatile   *)(& mdev->flags));
#line 361
    if (tmp == 0) {
#line 362
      ns.ldv_39162.pdsk = (unsigned char )nps;
#line 363
      _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
    } else {

    }
  } else {

  }
#line 365
  spin_unlock_irq(& mdev->req_lock);
#line 367
  return (0);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 374
  tmp = mdev_to_minor(mdev);
#line 374
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 374
  __k = tmp___0;
#line 374
  tmp___1 = IS_ERR((void const   *)__k);
#line 374
  if (tmp___1 == 0L) {
#line 374
    wake_up_process(__k);
  } else {

  }
#line 374
  opa = __k;
#line 375
  tmp___2 = IS_ERR((void const   *)opa);
#line 375
  if (tmp___2 != 0L) {
#line 376
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 377
  return;
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 382
  max_tries = 4;
#line 383
  rv = 0;
#line 384
  try = 0;
#line 385
  forced = 0;
#line 389
  if ((unsigned int )new_role == 1U) {
#line 390
    request_ping(mdev);
  } else {

  }
#line 392
  ldv_mutex_lock_233(& mdev->state_mutex);
#line 394
  mask.i = 0U;
#line 394
  mask.ldv_39162.role = 3U;
#line 395
  val.i = 0U;
#line 395
  val.ldv_39162.role = (unsigned char )new_role;
#line 397
  goto ldv_53188;
  ldv_53191: 
#line 398
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 402
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 403
    val.ldv_39162.pdsk = 0U;
#line 404
    mask.ldv_39162.pdsk = 0U;
#line 405
    goto ldv_53188;
  } else {

  }
#line 408
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_39162.disk <= 7 && (int )mdev->state.ldv_39162.disk > 3)) {
#line 411
    mask.ldv_39162.disk = 15U;
#line 412
    val.ldv_39162.disk = 8U;
#line 413
    forced = 1;
#line 414
    goto ldv_53188;
  } else {

  }
#line 417
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 419
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 419
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              419);
    } else {

    }
#line 420
    nps = drbd_try_outdate_peer(mdev);
#line 422
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 423
      val.ldv_39162.disk = 8U;
#line 424
      mask.ldv_39162.disk = 15U;
    } else {

    }
#line 427
    val.ldv_39162.pdsk = (unsigned char )nps;
#line 428
    mask.ldv_39162.pdsk = 15U;
#line 430
    goto ldv_53188;
  } else {

  }
#line 433
  if ((int )rv == 2) {
#line 434
    goto fail;
  } else {

  }
#line 435
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 436
    nps = drbd_try_outdate_peer(mdev);
#line 438
    if (force != 0 && (unsigned int )nps > 5U) {
#line 439
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 440
      nps = D_OUTDATED;
    } else {

    }
#line 443
    mask.ldv_39162.pdsk = 15U;
#line 444
    val.ldv_39162.pdsk = (unsigned char )nps;
#line 446
    goto ldv_53188;
  } else {

  }
#line 448
  if ((int )rv == -1) {
#line 451
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 452
    if (try < max_tries) {
#line 453
      try = max_tries + -1;
    } else {

    }
#line 454
    goto ldv_53188;
  } else {

  }
#line 456
  if ((int )rv <= 0) {
#line 457
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 459
    if ((int )rv <= 0) {
#line 460
      goto fail;
    } else {

    }
  } else {

  }
#line 462
  goto ldv_53190;
  ldv_53188: 
#line 397
  tmp = try;
#line 397
  try = try + 1;
#line 397
  if (tmp < max_tries) {
#line 398
    goto ldv_53191;
  } else {

  }
  ldv_53190: ;
#line 465
  if ((int )rv <= 0) {
#line 466
    goto fail;
  } else {

  }
#line 468
  if (forced != 0) {
#line 469
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 472
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 472
  if (tmp___0 == 0) {
#line 472
    goto ldv_53192;
  } else {

  }
#line 472
  tmp___1 = get_current();
#line 472
  __wait.flags = 0U;
#line 472
  __wait.private = (void *)tmp___1;
#line 472
  __wait.func = & autoremove_wake_function;
#line 472
  __wait.task_list.next = & __wait.task_list;
#line 472
  __wait.task_list.prev = & __wait.task_list;
  ldv_53195: 
#line 472
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 472
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 472
  if (tmp___2 == 0) {
#line 472
    goto ldv_53194;
  } else {

  }
#line 472
  schedule();
#line 472
  goto ldv_53195;
  ldv_53194: 
#line 472
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53192: ;
#line 474
  if ((unsigned int )new_role == 2U) {
#line 475
    set_disk_ro(mdev->vdisk, 1);
#line 476
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 476
    if (tmp___3 != 0) {
#line 477
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 478
      put_ldev(mdev);
    } else {

    }
  } else {
#line 481
    tmp___4 = get_net_conf(mdev);
#line 481
    if (tmp___4 != 0) {
#line 482
      (mdev->net_conf)->want_lose = 0U;
#line 483
      put_net_conf(mdev);
    } else {

    }
#line 485
    set_disk_ro(mdev->vdisk, 0);
#line 486
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 486
    if (tmp___5 != 0) {
#line 487
      if ((((int )mdev->state.ldv_39162.conn <= 9 || (int )mdev->state.ldv_39162.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 490
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 492
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 493
      put_ldev(mdev);
    } else {

    }
  }
#line 500
  if ((int )mdev->state.ldv_39162.conn > 8) {
#line 502
    if (forced != 0) {
#line 503
      drbd_send_uuids(mdev);
    } else {

    }
#line 504
    drbd_send_current_state(mdev);
  } else {

  }
#line 507
  drbd_md_sync(mdev);
#line 509
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 511
  ldv_mutex_unlock_234(& mdev->state_mutex);
#line 512
  return (rv);
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 519
  if ((unsigned int )minor >= minor_count) {
#line 520
    return (0);
  } else {

  }
#line 522
  mdev = minor_to_mdev((unsigned int )minor);
#line 524
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 525
    disk = 0;
#line 526
    mdev = drbd_new_device((unsigned int )minor);
#line 528
    spin_lock_irq(& drbd_pp_lock);
#line 529
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 530
      *(minor_table + (unsigned long )minor) = mdev;
#line 531
      disk = mdev->vdisk;
#line 532
      mdev = 0;
    } else {

    }
#line 534
    spin_unlock_irq(& drbd_pp_lock);
#line 536
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 539
      add_disk(disk);
    } else {
#line 541
      drbd_free_mdev(mdev);
    }
#line 543
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 546
  return (mdev);
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 554
  memset((void *)(& primary_args), 0, 4UL);
#line 555
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 555
  if (tmp == 0) {
#line 556
    reply->ret_code = 126;
#line 557
    return (0);
  } else {

  }
#line 560
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 560
  reply->ret_code = (int )tmp___0;
#line 563
  return (0);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 569
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 569
  reply->ret_code = (int )tmp;
#line 571
  return (0);
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 579
  md_size_sect = 0UL;
#line 580
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 583
  bdev->md.md_size_sect = 262144U;
#line 584
  tmp = drbd_md_ss__(mdev, bdev);
#line 584
  bdev->md.md_offset = (u64 )tmp;
#line 585
  bdev->md.al_offset = 8;
#line 586
  bdev->md.bm_offset = 72;
#line 587
  goto ldv_53219;
  case -2: 
#line 590
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 590
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 591
  bdev->md.md_offset = 0ULL;
#line 592
  bdev->md.al_offset = 8;
#line 593
  bdev->md.bm_offset = 72;
#line 594
  goto ldv_53219;
  case -1: ;
  case -3: 
#line 597
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 597
  bdev->md.md_offset = (u64 )tmp___1;
#line 599
  bdev->md.al_offset = -64;
#line 601
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 602
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 603
  md_size_sect = md_size_sect >> 15;
#line 604
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 608
  md_size_sect = md_size_sect + 72UL;
#line 610
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 612
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 613
  goto ldv_53219;
  }
  ldv_53219: ;
#line 616
  return;
}
}
#line 618 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 622
  units[0] = 75;
#line 622
  units[1] = 77;
#line 622
  units[2] = 71;
#line 622
  units[3] = 84;
#line 622
  units[4] = 80;
#line 622
  units[5] = 69;
#line 623
  base = 0;
#line 624
  goto ldv_53230;
  ldv_53229: 
#line 626
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 627
  base = base + 1;
  ldv_53230: ;
#line 624
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 625
    goto ldv_53229;
  } else {

  }
#line 629
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 631
  return (buf);
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 649
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 650
  tmp = is_susp(mdev->state);
#line 650
  if (tmp != 0) {
#line 651
    return;
  } else {

  }
#line 652
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 652
  if (tmp___0 == 0) {
#line 652
    goto ldv_53235;
  } else {

  }
#line 652
  tmp___1 = get_current();
#line 652
  __wait.flags = 0U;
#line 652
  __wait.private = (void *)tmp___1;
#line 652
  __wait.func = & autoremove_wake_function;
#line 652
  __wait.task_list.next = & __wait.task_list;
#line 652
  __wait.task_list.prev = & __wait.task_list;
  ldv_53238: 
#line 652
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 652
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 652
  if (tmp___2 == 0) {
#line 652
    goto ldv_53237;
  } else {

  }
#line 652
  schedule();
#line 652
  goto ldv_53238;
  ldv_53237: 
#line 652
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53235: ;
#line 655
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 657
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 658
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 659
  return;
}
}
#line 668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 676
  rv = 0;
#line 687
  drbd_suspend_io(mdev);
#line 690
  tmp = lc_try_lock(mdev->act_log);
#line 690
  if (tmp != 0) {
#line 690
    goto ldv_53254;
  } else {

  }
#line 690
  tmp___0 = get_current();
#line 690
  __wait.flags = 0U;
#line 690
  __wait.private = (void *)tmp___0;
#line 690
  __wait.func = & autoremove_wake_function;
#line 690
  __wait.task_list.next = & __wait.task_list;
#line 690
  __wait.task_list.prev = & __wait.task_list;
  ldv_53257: 
#line 690
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 690
  tmp___1 = lc_try_lock(mdev->act_log);
#line 690
  if (tmp___1 != 0) {
#line 690
    goto ldv_53256;
  } else {

  }
#line 690
  schedule();
#line 690
  goto ldv_53257;
  ldv_53256: 
#line 690
  finish_wait(& mdev->al_wait, & __wait);
  ldv_53254: 
#line 692
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 693
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 694
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 697
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 699
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 701
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 701
  if (tmp___5 != size) {
#line 701
    goto _L;
  } else {
#line 701
    tmp___6 = drbd_bm_capacity(mdev);
#line 701
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 704
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 705
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 705
      if (tmp___3 != 0L) {
#line 707
        tmp___2 = drbd_bm_capacity(mdev);
#line 707
        size = tmp___2 >> 1;
#line 708
        if (size == 0UL) {
#line 709
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 712
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 716
        rv = dev_size_error;
      } else {

      }
#line 719
      drbd_set_my_capacity(mdev, size);
#line 720
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 721
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 721
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 724
  if ((int )rv == -1) {
#line 725
    goto out;
  } else {

  }
#line 727
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 729
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 729
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 732
  if (la_size_changed != 0 || md_moved != 0) {
#line 735
    drbd_al_shrink(mdev);
#line 736
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 740
    err___0 = drbd_bitmap_io(mdev, md_moved != 0 ? & drbd_bm_write_all : & drbd_bm_write,
                             (char *)"size changed", BM_LOCKED_MASK);
#line 742
    if (err___0 != 0) {
#line 743
      rv = dev_size_error;
#line 744
      goto out;
    } else {

    }
#line 746
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 749
  if (size > la_size) {
#line 750
    rv = grew;
  } else {

  }
#line 751
  if (size < la_size) {
#line 752
    rv = shrunk;
  } else {

  }
  out: 
#line 754
  lc_unlock(mdev->act_log);
#line 755
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 756
  drbd_resume_io(mdev);
#line 758
  return (rv);
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 764
  p_size = mdev->p_size;
#line 765
  la_size = (sector_t )bdev->md.la_size_sect;
#line 767
  u_size = (sector_t )bdev->dc.disk_size;
#line 768
  size = 0UL;
#line 770
  m_size = drbd_get_max_capacity___1(bdev);
#line 772
  if ((int )mdev->state.ldv_39162.conn <= 9 && assume_peer_has_space != 0) {
#line 773
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 774
    p_size = m_size;
  } else {

  }
#line 777
  if (p_size != 0UL && m_size != 0UL) {
#line 778
    __min1 = p_size;
#line 778
    __min2 = m_size;
#line 778
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 780
  if (la_size != 0UL) {
#line 781
    size = la_size;
#line 782
    if (m_size != 0UL && m_size < size) {
#line 783
      size = m_size;
    } else {

    }
#line 784
    if (p_size != 0UL && p_size < size) {
#line 785
      size = p_size;
    } else {

    }
  } else {
#line 787
    if (m_size != 0UL) {
#line 788
      size = m_size;
    } else {

    }
#line 789
    if (p_size != 0UL) {
#line 790
      size = p_size;
    } else {

    }
  }
#line 794
  if (size == 0UL) {
#line 795
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 797
  if (u_size != 0UL) {
#line 798
    if (u_size > size) {
#line 799
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 802
      size = u_size;
    }
  } else {

  }
#line 805
  return (size);
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 823
  _b = mdev->sync_conf.al_extents <= 6;
#line 823
  if (_b != 0) {
#line 823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            823);
  } else {

  }
#line 823
  if (_b != 0) {
#line 824
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 826
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 828
    return (0);
  } else {

  }
#line 830
  in_use = 0U;
#line 831
  t = mdev->act_log;
#line 832
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 835
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 837
    return (-12);
  } else {

  }
#line 839
  spin_lock_irq(& mdev->al_lock);
#line 840
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 841
    i = 0;
#line 841
    goto ldv_53286;
    ldv_53285: 
#line 842
    e = lc_element_by_index(t, (unsigned int )i);
#line 843
    if (e->refcnt != 0U) {
#line 844
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 846
    in_use = e->refcnt + in_use;
#line 841
    i = i + 1;
    ldv_53286: ;
#line 841
    if ((unsigned int )i < t->nr_elements) {
#line 842
      goto ldv_53285;
    } else {

    }

  } else {

  }
#line 849
  if (in_use == 0U) {
#line 850
    mdev->act_log = n;
  } else {

  }
#line 851
  spin_unlock_irq(& mdev->al_lock);
#line 852
  if (in_use != 0U) {
#line 853
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 854
    lc_destroy(n);
#line 855
    return (-16);
  } else
#line 857
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 858
    lc_destroy(t);
  } else {

  }
#line 860
  drbd_md_mark_dirty(mdev);
#line 861
  return (0);
}
}
#line 864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  unsigned int max_hw_sectors ;
  unsigned int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 866
  q = mdev->rq_queue;
#line 867
  max_hw_sectors = max_bio_size >> 9;
#line 868
  max_segments = 0U;
#line 870
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 870
  if (tmp___0 != 0) {
#line 871
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 873
    tmp = queue_max_hw_sectors(b);
#line 873
    _min1 = tmp;
#line 873
    _min2 = max_bio_size >> 9;
#line 873
    max_hw_sectors = _min1 < _min2 ? _min1 : _min2;
#line 874
    max_segments = (unsigned int )(mdev->ldev)->dc.max_bio_bvecs;
#line 875
    put_ldev(mdev);
  } else {

  }
#line 878
  blk_queue_logical_block_size(q, 512);
#line 879
  blk_queue_max_hw_sectors(q, max_hw_sectors);
#line 881
  blk_queue_max_segments(q, max_segments != 0U ? (int )((unsigned short )max_segments) : 128);
#line 882
  blk_queue_segment_boundary(q, 4095UL);
#line 884
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 884
  if (tmp___1 != 0) {
#line 885
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 887
    blk_queue_stack_limits(q, b___0);
#line 889
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 890
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 893
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 895
    put_ldev(mdev);
  } else {

  }
#line 897
  return;
}
}
#line 899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  unsigned int now ;
  unsigned int new ;
  unsigned int local ;
  unsigned int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;

  {
#line 903
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 903
  now = tmp << 9;
#line 904
  local = mdev->local_max_bio_size;
#line 905
  peer = mdev->peer_max_bio_size;
#line 907
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 907
  if (tmp___1 != 0) {
#line 908
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 908
    local = tmp___0 << 9;
#line 909
    mdev->local_max_bio_size = local;
#line 910
    put_ldev(mdev);
  } else {

  }
#line 912
  _min1 = local;
#line 912
  _min2 = 131072U;
#line 912
  local = _min1 < _min2 ? _min1 : _min2;
#line 917
  if ((int )mdev->state.ldv_39162.conn > 9) {
#line 918
    if (mdev->agreed_pro_version <= 93) {
#line 919
      _min1___0 = mdev->peer_max_bio_size;
#line 919
      _min2___0 = 32768U;
#line 919
      peer = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
    } else
#line 921
    if (mdev->agreed_pro_version == 94) {
#line 922
      peer = 32768U;
    } else {
#line 924
      peer = 131072U;
    }
  } else {

  }
#line 927
  _min1___1 = local;
#line 927
  _min2___1 = peer;
#line 927
  new = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 929
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 930
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%u < %u)\n",
            new, now);
  } else {

  }
#line 932
  if (new != now) {
#line 933
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 935
  drbd_setup_queue_param(mdev, new);
#line 936
  return;
}
}
#line 945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 947
  tmp = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 947
  if (tmp == 0) {
#line 947
    goto ldv_53319;
  } else {

  }
#line 947
  tmp___0 = get_current();
#line 947
  __wait.flags = 0U;
#line 947
  __wait.private = (void *)tmp___0;
#line 947
  __wait.func = & autoremove_wake_function;
#line 947
  __wait.task_list.next = & __wait.task_list;
#line 947
  __wait.task_list.prev = & __wait.task_list;
  ldv_53322: 
#line 947
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 947
  tmp___1 = test_and_set_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 947
  if (tmp___1 == 0) {
#line 947
    goto ldv_53321;
  } else {

  }
#line 947
  schedule();
#line 947
  goto ldv_53322;
  ldv_53321: 
#line 947
  finish_wait(& mdev->state_wait, & __wait);
  ldv_53319: 
#line 948
  tmp___2 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 948
  if (tmp___2 == 0) {
#line 948
    goto ldv_53323;
  } else {

  }
#line 948
  tmp___3 = get_current();
#line 948
  __wait___0.flags = 0U;
#line 948
  __wait___0.private = (void *)tmp___3;
#line 948
  __wait___0.func = & autoremove_wake_function;
#line 948
  __wait___0.task_list.next = & __wait___0.task_list;
#line 948
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53326: 
#line 948
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 948
  tmp___4 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 948
  if (tmp___4 == 0) {
#line 948
    goto ldv_53325;
  } else {

  }
#line 948
  schedule();
#line 948
  goto ldv_53326;
  ldv_53325: 
#line 948
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_53323: 
#line 949
  drbd_thread_start(& mdev->worker);
#line 950
  drbd_flush_workqueue(mdev);
#line 951
  return;
}
}
#line 956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 958
  spin_lock_irq(& mdev->req_lock);
#line 959
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 962
    set_bit(22U, (unsigned long volatile   *)(& mdev->flags));
#line 963
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 965
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  }
#line 966
  spin_unlock_irq(& mdev->req_lock);
#line 967
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 968
  return;
}
}
#line 971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 973
  s = 0;
#line 975
  tmp = lc_try_lock(mdev->act_log);
#line 975
  if (tmp != 0) {
#line 976
    drbd_al_shrink(mdev);
#line 977
    lc_unlock(mdev->act_log);
  } else {
#line 979
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 980
    return;
  }
#line 983
  spin_lock_irq(& mdev->req_lock);
#line 984
  if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 985
    tmp___0 = test_and_set_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 985
    s = tmp___0 == 0;
  } else {

  }
#line 987
  spin_unlock_irq(& mdev->req_lock);
#line 989
  if (s != 0) {
#line 990
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 991
  return;
}
}
#line 995 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1002
  nbc = 0;
#line 1004
  resync_lru = 0;
#line 1007
  cp_discovered = 0;
#line 1010
  drbd_reconfig_start(mdev);
#line 1013
  if ((int )mdev->state.ldv_39162.disk > 0) {
#line 1014
    retcode = ERR_DISK_CONFIGURED;
#line 1015
    goto fail;
  } else {

  }
#line 1021
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1021
  if (tmp == 0) {
#line 1021
    goto ldv_53352;
  } else {

  }
#line 1021
  tmp___0 = get_current();
#line 1021
  __wait.flags = 0U;
#line 1021
  __wait.private = (void *)tmp___0;
#line 1021
  __wait.func = & autoremove_wake_function;
#line 1021
  __wait.task_list.next = & __wait.task_list;
#line 1021
  __wait.task_list.prev = & __wait.task_list;
  ldv_53355: 
#line 1021
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1021
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1021
  if (tmp___1 == 0) {
#line 1021
    goto ldv_53354;
  } else {

  }
#line 1021
  schedule();
#line 1021
  goto ldv_53355;
  ldv_53354: 
#line 1021
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53352: 
#line 1024
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 1027
  mdev->rs_total = 0UL;
#line 1028
  mdev->rs_failed = 0UL;
#line 1029
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 1032
  tmp___2 = kzalloc(400UL, 208U);
#line 1032
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1033
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1034
    retcode = ERR_NOMEM;
#line 1035
    goto fail;
  } else {

  }
#line 1038
  nbc->dc.disk_size = 0ULL;
#line 1039
  nbc->dc.on_io_error = 0;
#line 1040
  nbc->dc.fencing = 0;
#line 1041
  nbc->dc.max_bio_bvecs = 0;
#line 1043
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1043
  if (tmp___3 == 0) {
#line 1044
    retcode = ERR_MANDATORY_TAG;
#line 1045
    goto fail;
  } else {

  }
#line 1048
  if (nbc->dc.meta_dev_idx < -3) {
#line 1049
    retcode = ERR_MD_IDX_INVALID;
#line 1050
    goto fail;
  } else {

  }
#line 1053
  tmp___4 = get_net_conf(mdev);
#line 1053
  if (tmp___4 != 0) {
#line 1054
    prot = (mdev->net_conf)->wire_protocol;
#line 1055
    put_net_conf(mdev);
#line 1056
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1057
      retcode = ERR_STONITH_AND_PROT_A;
#line 1058
      goto fail;
    } else {

    }
  } else {

  }
#line 1062
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1064
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1064
  if (tmp___6 != 0L) {
#line 1065
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1067
    retcode = ERR_OPEN_DISK;
#line 1068
    goto fail;
  } else {

  }
#line 1070
  nbc->backing_bdev = bdev;
#line 1080
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1084
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1084
  if (tmp___8 != 0L) {
#line 1085
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1085
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1087
    retcode = ERR_OPEN_MD_DISK;
#line 1088
    goto fail;
  } else {

  }
#line 1090
  nbc->md_bdev = bdev;
#line 1092
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1095
    retcode = ERR_MD_IDX_INVALID;
#line 1096
    goto fail;
  } else {

  }
#line 1099
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1102
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1103
    retcode = ERR_NOMEM;
#line 1104
    goto fail;
  } else {

  }
#line 1108
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1110
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1110
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1111
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1114
    retcode = ERR_DISK_TOO_SMALL;
#line 1115
    goto fail;
  } else {

  }
#line 1118
  if (nbc->dc.meta_dev_idx < 0) {
#line 1119
    max_possible_sectors = 2251799813685248UL;
#line 1121
    min_md_device_sectors = 2048UL;
  } else {
#line 1123
    max_possible_sectors = 8587575296UL;
#line 1124
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1127
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1127
  if (tmp___11 < min_md_device_sectors) {
#line 1128
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1129
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1132
    goto fail;
  } else {

  }
#line 1137
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1137
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1137
  if (tmp___12 < tmp___13) {
#line 1139
    retcode = ERR_DISK_TOO_SMALL;
#line 1140
    goto fail;
  } else {

  }
#line 1143
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1145
  if (nbc->known_size > max_possible_sectors) {
#line 1146
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1149
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1150
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1154
  drbd_suspend_io(mdev);
#line 1156
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1156
  if (tmp___14 == 0) {
#line 1156
    goto ldv_53357;
  } else {
#line 1156
    tmp___15 = is_susp(mdev->state);
#line 1156
    if (tmp___15 != 0) {
#line 1156
      goto ldv_53357;
    } else {

    }
  }
#line 1156
  tmp___16 = get_current();
#line 1156
  __wait___0.flags = 0U;
#line 1156
  __wait___0.private = (void *)tmp___16;
#line 1156
  __wait___0.func = & autoremove_wake_function;
#line 1156
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1156
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53360: 
#line 1156
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1156
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1156
  if (tmp___17 == 0) {
#line 1156
    goto ldv_53359;
  } else {
#line 1156
    tmp___18 = is_susp(mdev->state);
#line 1156
    if (tmp___18 != 0) {
#line 1156
      goto ldv_53359;
    } else {

    }
  }
#line 1156
  schedule();
#line 1156
  goto ldv_53360;
  ldv_53359: 
#line 1156
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_53357: 
#line 1158
  drbd_flush_workqueue(mdev);
#line 1160
  val.i = 0U;
#line 1160
  val.ldv_39162.disk = 1U;
#line 1160
  mask.i = 0U;
#line 1160
  mask.ldv_39162.disk = 15U;
#line 1160
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1161
  retcode = (enum drbd_ret_code )rv;
#line 1162
  drbd_resume_io(mdev);
#line 1163
  if ((int )rv <= 0) {
#line 1164
    goto fail;
  } else {

  }
#line 1166
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1166
  if (tmp___19 == 0) {
#line 1167
    goto force_diskless;
  } else {

  }
#line 1169
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1172
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1172
  logical_block_size = (int )tmp___20;
#line 1173
  if (logical_block_size == 0) {
#line 1174
    logical_block_size = 512;
  } else {

  }
#line 1176
  if (logical_block_size != 512) {
#line 1177
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1178
      tmp___21 = alloc_pages(16U, 0U);
#line 1178
      page = tmp___21;
#line 1179
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1180
        goto force_diskless_dec;
      } else {

      }
#line 1182
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1184
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1186
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1190
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1191
    tmp___22 = drbd_bm_init(mdev);
#line 1191
    if (tmp___22 != 0) {
#line 1192
      retcode = ERR_NOMEM;
#line 1193
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1197
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1197
  retcode = (enum drbd_ret_code )tmp___23;
#line 1198
  if ((unsigned int )retcode != 101U) {
#line 1199
    goto force_diskless_dec;
  } else {

  }
#line 1201
  if (((int )mdev->state.ldv_39162.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1204
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1206
    retcode = ERR_DATA_NOT_CURRENT;
#line 1207
    goto force_diskless_dec;
  } else {

  }
#line 1211
  tmp___24 = drbd_check_al_size(mdev);
#line 1211
  if (tmp___24 != 0) {
#line 1212
    retcode = ERR_NOMEM;
#line 1213
    goto force_diskless_dec;
  } else {

  }
#line 1217
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1217
  if (tmp___25 != 0) {
#line 1217
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1217
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1219
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1220
      retcode = ERR_DISK_TOO_SMALL;
#line 1221
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1224
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1224
  if (tmp___27 == 0) {
#line 1225
    retcode = ERR_IO_MD_DISK;
#line 1226
    goto force_diskless_dec;
  } else {

  }
#line 1231
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1232
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1234
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1240
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1240
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1240);
  } else {

  }
#line 1241
  mdev->ldev = nbc;
#line 1242
  mdev->resync = resync_lru;
#line 1243
  nbc = 0;
#line 1244
  resync_lru = 0;
#line 1246
  mdev->write_ordering = WO_bdev_flush;
#line 1247
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1249
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1249
  if (tmp___28 != 0) {
#line 1250
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1252
    clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1254
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1254
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1256
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 1257
    cp_discovered = 1;
  } else {

  }
#line 1260
  mdev->send_cnt = 0U;
#line 1261
  mdev->recv_cnt = 0U;
#line 1262
  mdev->read_cnt = 0U;
#line 1263
  mdev->writ_cnt = 0U;
#line 1265
  drbd_reconsider_max_bio_size(mdev);
#line 1281
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 1282
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1282
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1282
    if (tmp___30 != 0) {
#line 1282
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1282
      if (tmp___31 == 0) {
#line 1285
        set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1287
  dd = drbd_determine_dev_size(mdev, 0);
#line 1288
  if ((int )dd == -1) {
#line 1289
    retcode = ERR_NOMEM_BITMAP;
#line 1290
    goto force_diskless_dec;
  } else
#line 1291
  if ((int )dd == 2) {
#line 1292
    set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1294
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1294
  if (tmp___34 != 0) {
#line 1295
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1297
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1297
    if (tmp___32 != 0) {
#line 1299
      retcode = ERR_IO_MD_DISK;
#line 1300
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1303
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1303
    if (tmp___33 < 0) {
#line 1305
      retcode = ERR_IO_MD_DISK;
#line 1306
      goto force_diskless_dec;
    } else {

    }
  }
#line 1310
  if (cp_discovered != 0) {
#line 1311
    drbd_al_apply_to_bm(mdev);
#line 1312
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1312
    if (tmp___35 != 0) {
#line 1314
      retcode = ERR_IO_MD_DISK;
#line 1315
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1319
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1319
  tmp___37 = drbd_bm_bits(mdev);
#line 1319
  if (tmp___36 == tmp___37) {
#line 1320
    drbd_suspend_al(mdev);
  } else {

  }
#line 1322
  spin_lock_irq(& mdev->req_lock);
#line 1323
  os = mdev->state;
#line 1324
  ns.i = os.i;
#line 1330
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1330
  if (tmp___39 != 0) {
#line 1331
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1331
    if (tmp___38 != 0) {
#line 1332
      ns.ldv_39162.disk = 7U;
    } else {
#line 1334
      ns.ldv_39162.disk = 5U;
    }
  } else {
#line 1336
    ns.ldv_39162.disk = 4U;
  }
#line 1339
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1339
  if (tmp___40 != 0) {
#line 1340
    ns.ldv_39162.pdsk = 5U;
  } else {

  }
#line 1342
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1344
    ns.ldv_39162.disk = 8U;
  } else {

  }
#line 1353
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1354
    mdev->new_state_tmp.i = ns.i;
#line 1355
    ns.i = os.i;
#line 1356
    ns.ldv_39162.disk = 3U;
#line 1361
    kfree((void const   *)mdev->p_uuid);
#line 1362
    mdev->p_uuid = 0;
  } else {

  }
#line 1365
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1366
  ns = mdev->state;
#line 1367
  spin_unlock_irq(& mdev->req_lock);
#line 1369
  if ((int )rv <= 0) {
#line 1370
    goto force_diskless_dec;
  } else {

  }
#line 1372
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1373
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1375
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1377
  drbd_md_mark_dirty(mdev);
#line 1378
  drbd_md_sync(mdev);
#line 1380
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1381
  put_ldev(mdev);
#line 1382
  reply->ret_code = (int )retcode;
#line 1383
  drbd_reconfig_done(mdev);
#line 1384
  return (0);
  force_diskless_dec: 
#line 1387
  put_ldev(mdev);
  force_diskless: 
#line 1389
  val___0.i = 0U;
#line 1389
  val___0.ldv_39162.disk = 2U;
#line 1389
  mask___0.i = 0U;
#line 1389
  mask___0.ldv_39162.disk = 15U;
#line 1389
  drbd_force_state(mdev, mask___0, val___0);
#line 1390
  drbd_md_sync(mdev);
  fail: ;
#line 1392
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1393
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1394
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1396
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1397
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1399
    kfree((void const   *)nbc);
  } else {

  }
#line 1401
  lc_destroy(resync_lru);
#line 1403
  reply->ret_code = (int )retcode;
#line 1404
  drbd_reconfig_done(mdev);
#line 1405
  return (0);
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  struct detach dt ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___0 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1418
  dt.detach_force = (unsigned char)0;
#line 1420
  tmp = detach_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dt);
#line 1420
  if (tmp == 0) {
#line 1421
    reply->ret_code = 126;
#line 1422
    goto out;
  } else {

  }
#line 1425
  if ((unsigned int )*((unsigned char *)(& dt) + 0UL) != 0U) {
#line 1426
    set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 1427
    val.i = 0U;
#line 1427
    val.ldv_39162.disk = 2U;
#line 1427
    mask.i = 0U;
#line 1427
    mask.ldv_39162.disk = 15U;
#line 1427
    drbd_force_state(mdev, mask, val);
#line 1428
    reply->ret_code = 1;
#line 1429
    goto out;
  } else {

  }
#line 1432
  drbd_suspend_io(mdev);
#line 1433
  drbd_md_get_buffer(mdev);
#line 1434
  val___0.i = 0U;
#line 1434
  val___0.ldv_39162.disk = 2U;
#line 1434
  mask___0.i = 0U;
#line 1434
  mask___0.ldv_39162.disk = 15U;
#line 1434
  tmp___0 = drbd_request_state(mdev, mask___0, val___0);
#line 1434
  retcode = (enum drbd_ret_code )tmp___0;
#line 1435
  drbd_md_put_buffer(mdev);
#line 1437
  __ret = 0;
#line 1437
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1437
    tmp___1 = get_current();
#line 1437
    __wait.flags = 0U;
#line 1437
    __wait.private = (void *)tmp___1;
#line 1437
    __wait.func = & autoremove_wake_function;
#line 1437
    __wait.task_list.next = & __wait.task_list;
#line 1437
    __wait.task_list.prev = & __wait.task_list;
    ldv_53393: 
#line 1437
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1437
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1437
      goto ldv_53391;
    } else {

    }
#line 1437
    tmp___2 = get_current();
#line 1437
    tmp___3 = signal_pending(tmp___2);
#line 1437
    if (tmp___3 == 0) {
#line 1437
      schedule();
#line 1437
      goto ldv_53392;
    } else {

    }
#line 1437
    __ret = -512;
#line 1437
    goto ldv_53391;
    ldv_53392: ;
#line 1437
    goto ldv_53393;
    ldv_53391: 
#line 1437
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1437
  ret = __ret;
#line 1439
  drbd_resume_io(mdev);
#line 1441
  if ((long )retcode == 4294967285L) {
#line 1442
    retcode = 2;
  } else {

  }
#line 1443
  if (ret != 0) {
#line 1444
    retcode = ERR_INTR;
  } else {

  }
#line 1445
  reply->ret_code = (int )retcode;
  out: ;
#line 1447
  return (0);
}
}
#line 1450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1455
  new_conf = 0;
#line 1456
  tfm = 0;
#line 1457
  integrity_w_tfm = 0;
#line 1458
  integrity_r_tfm = 0;
#line 1459
  new_tl_hash = 0;
#line 1460
  new_ee_hash = 0;
#line 1463
  int_dig_out = 0;
#line 1464
  int_dig_in = 0;
#line 1465
  int_dig_vv = 0;
#line 1468
  drbd_reconfig_start(mdev);
#line 1470
  if ((int )mdev->state.ldv_39162.conn > 0) {
#line 1471
    retcode = ERR_NET_CONFIGURED;
#line 1472
    goto fail;
  } else {

  }
#line 1476
  tmp = kzalloc(544UL, 208U);
#line 1476
  new_conf = (struct net_conf *)tmp;
#line 1477
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1478
    retcode = ERR_NOMEM;
#line 1479
    goto fail;
  } else {

  }
#line 1482
  new_conf->timeout = 60;
#line 1483
  new_conf->try_connect_int = 10;
#line 1484
  new_conf->ping_int = 10;
#line 1485
  new_conf->max_epoch_size = 2048;
#line 1486
  new_conf->max_buffers = 2048;
#line 1487
  new_conf->unplug_watermark = 128;
#line 1488
  new_conf->sndbuf_size = 0;
#line 1489
  new_conf->rcvbuf_size = 0;
#line 1490
  new_conf->ko_count = 0;
#line 1491
  new_conf->after_sb_0p = 0;
#line 1492
  new_conf->after_sb_1p = 0;
#line 1493
  new_conf->after_sb_2p = 0;
#line 1494
  new_conf->want_lose = 0U;
#line 1495
  new_conf->two_primaries = 0U;
#line 1496
  new_conf->wire_protocol = 3;
#line 1497
  new_conf->ping_timeo = 5;
#line 1498
  new_conf->rr_conflict = 0;
#line 1499
  new_conf->on_congestion = 0;
#line 1500
  new_conf->cong_extents = 127;
#line 1502
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1502
  if (tmp___0 == 0) {
#line 1503
    retcode = ERR_MANDATORY_TAG;
#line 1504
    goto fail;
  } else {

  }
#line 1507
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1509
    retcode = ERR_NOT_PROTO_C;
#line 1510
    goto fail;
  } else {

  }
#line 1513
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1513
  if (tmp___1 != 0) {
#line 1514
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1515
    put_ldev(mdev);
#line 1516
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1517
      retcode = ERR_STONITH_AND_PROT_A;
#line 1518
      goto fail;
    } else {

    }
  } else {

  }
#line 1522
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1523
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1524
    goto fail;
  } else {

  }
#line 1527
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1528
    retcode = ERR_DISCARD;
#line 1529
    goto fail;
  } else {

  }
#line 1532
  retcode = NO_ERROR;
#line 1534
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1535
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1536
  i = 0;
#line 1536
  goto ldv_53421;
  ldv_53420: 
#line 1537
  odev = minor_to_mdev((unsigned int )i);
#line 1538
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1539
    goto ldv_53419;
  } else {

  }
#line 1540
  tmp___4 = get_net_conf(odev);
#line 1540
  if (tmp___4 != 0) {
#line 1541
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1542
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1542
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1542
      if (tmp___2 == 0) {
#line 1544
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1546
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1547
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1547
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1547
      if (tmp___3 == 0) {
#line 1549
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1551
    put_net_conf(odev);
#line 1552
    if ((unsigned int )retcode != 101U) {
#line 1553
      goto fail;
    } else {

    }
  } else {

  }
  ldv_53419: 
#line 1536
  i = i + 1;
  ldv_53421: ;
#line 1536
  if ((unsigned int )i < minor_count) {
#line 1537
    goto ldv_53420;
  } else {

  }

#line 1557
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1558
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1560
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1561
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1561
    if (tmp___5 != 0L) {
#line 1562
      tfm = 0;
#line 1563
      retcode = ERR_AUTH_ALG;
#line 1564
      goto fail;
    } else {

    }
#line 1567
    tmp___6 = crypto_hash_tfm(tfm);
#line 1567
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1567
    if (tmp___7 == 0) {
#line 1568
      retcode = ERR_AUTH_ALG_ND;
#line 1569
      goto fail;
    } else {

    }
  } else {

  }
#line 1573
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1574
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1575
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1575
    if (tmp___8 != 0L) {
#line 1576
      integrity_w_tfm = 0;
#line 1577
      retcode = ERR_INTEGRITY_ALG;
#line 1578
      goto fail;
    } else {

    }
#line 1581
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1581
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1581
    if (tmp___10 == 0) {
#line 1582
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1583
      goto fail;
    } else {

    }
#line 1586
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1587
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1587
    if (tmp___11 != 0L) {
#line 1588
      integrity_r_tfm = 0;
#line 1589
      retcode = ERR_INTEGRITY_ALG;
#line 1590
      goto fail;
    } else {

    }
  } else {

  }
#line 1594
  ns = new_conf->max_epoch_size / 8;
#line 1595
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1596
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1596
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1597
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1598
      retcode = ERR_NOMEM;
#line 1599
      goto fail;
    } else {

    }
  } else {

  }
#line 1603
  ns = new_conf->max_buffers / 8;
#line 1604
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1605
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1605
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1606
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1607
      retcode = ERR_NOMEM;
#line 1608
      goto fail;
    } else {

    }
  } else {

  }
#line 1612
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1614
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1615
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1615
    i = (int )tmp___14;
#line 1616
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1617
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1618
      retcode = ERR_NOMEM;
#line 1619
      goto fail;
    } else {

    }
#line 1621
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1622
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1623
      retcode = ERR_NOMEM;
#line 1624
      goto fail;
    } else {

    }
#line 1626
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1627
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1628
      retcode = ERR_NOMEM;
#line 1629
      goto fail;
    } else {

    }
  } else {

  }
#line 1633
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1634
    tmp___15 = drbd_bm_init(mdev);
#line 1634
    if (tmp___15 != 0) {
#line 1635
      retcode = ERR_NOMEM;
#line 1636
      goto fail;
    } else {

    }
  } else {

  }
#line 1640
  drbd_flush_workqueue(mdev);
#line 1641
  spin_lock_irq(& mdev->req_lock);
#line 1642
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1643
    retcode = ERR_NET_CONFIGURED;
#line 1644
    spin_unlock_irq(& mdev->req_lock);
#line 1645
    goto fail;
  } else {

  }
#line 1647
  mdev->net_conf = new_conf;
#line 1649
  mdev->send_cnt = 0U;
#line 1650
  mdev->recv_cnt = 0U;
#line 1652
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1653
    kfree((void const   *)mdev->tl_hash);
#line 1654
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1655
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1658
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1659
    kfree((void const   *)mdev->ee_hash);
#line 1660
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1661
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1664
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1665
  mdev->cram_hmac_tfm = tfm;
#line 1667
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1668
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1670
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1671
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1673
  kfree((void const   *)mdev->int_dig_out);
#line 1674
  kfree((void const   *)mdev->int_dig_in);
#line 1675
  kfree((void const   *)mdev->int_dig_vv);
#line 1676
  mdev->int_dig_out = int_dig_out;
#line 1677
  mdev->int_dig_in = int_dig_in;
#line 1678
  mdev->int_dig_vv = int_dig_vv;
#line 1679
  __ns.i = mdev->state.i;
#line 1679
  __ns.ldv_39162.conn = 2U;
#line 1679
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1679
  retcode = (enum drbd_ret_code )tmp___16;
#line 1680
  spin_unlock_irq(& mdev->req_lock);
#line 1682
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1683
  reply->ret_code = (int )retcode;
#line 1684
  drbd_reconfig_done(mdev);
#line 1685
  return (0);
  fail: 
#line 1688
  kfree((void const   *)int_dig_out);
#line 1689
  kfree((void const   *)int_dig_in);
#line 1690
  kfree((void const   *)int_dig_vv);
#line 1691
  crypto_free_hash(tfm);
#line 1692
  crypto_free_hash(integrity_w_tfm);
#line 1693
  crypto_free_hash(integrity_r_tfm);
#line 1694
  kfree((void const   *)new_tl_hash);
#line 1695
  kfree((void const   *)new_ee_hash);
#line 1696
  kfree((void const   *)new_conf);
#line 1698
  reply->ret_code = (int )retcode;
#line 1699
  drbd_reconfig_done(mdev);
#line 1700
  return (0);
}
}
#line 1703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1709
  memset((void *)(& dc), 0, 4UL);
#line 1710
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1710
  if (tmp == 0) {
#line 1711
    retcode = 126;
#line 1712
    goto fail;
  } else {

  }
#line 1715
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1716
    spin_lock_irq(& mdev->req_lock);
#line 1717
    if ((int )mdev->state.ldv_39162.conn > 7) {
#line 1718
      __ns.i = mdev->state.i;
#line 1718
      __ns.ldv_39162.conn = 1U;
#line 1718
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1719
    spin_unlock_irq(& mdev->req_lock);
#line 1720
    goto done;
  } else {

  }
#line 1723
  val.i = 0U;
#line 1723
  val.ldv_39162.conn = 1U;
#line 1723
  mask.i = 0U;
#line 1723
  mask.ldv_39162.conn = 31U;
#line 1723
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1723
  retcode = (int )tmp___0;
#line 1725
  if (retcode == 2) {
#line 1726
    goto done;
  } else
#line 1727
  if (retcode == -9) {
#line 1728
    goto done;
  } else
#line 1729
  if (retcode == -7) {
#line 1732
    val___0.i = 0U;
#line 1732
    val___0.ldv_39162.conn = 1U;
#line 1732
    val___0.ldv_39162.pdsk = 5U;
#line 1731
    mask___0.i = 0U;
#line 1731
    mask___0.ldv_39162.conn = 31U;
#line 1732
    mask___0.ldv_39162.pdsk = 15U;
#line 1732
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1733
  if (retcode == -10) {
#line 1736
    val___1.i = 0U;
#line 1736
    val___1.ldv_39162.conn = 1U;
#line 1736
    val___1.ldv_39162.disk = 5U;
#line 1735
    mask___1.i = 0U;
#line 1735
    mask___1.ldv_39162.conn = 31U;
#line 1736
    mask___1.ldv_39162.disk = 15U;
#line 1736
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1736
    retcode = (int )tmp___1;
#line 1738
    if (retcode == -11 || retcode == -16) {
#line 1739
      val___2.i = 0U;
#line 1739
      val___2.ldv_39162.conn = 1U;
#line 1739
      mask___2.i = 0U;
#line 1739
      mask___2.ldv_39162.conn = 31U;
#line 1739
      drbd_force_state(mdev, mask___2, val___2);
#line 1740
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1744
  if (retcode <= 0) {
#line 1745
    goto fail;
  } else {

  }
#line 1747
  __ret = 0;
#line 1747
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1747
    tmp___2 = get_current();
#line 1747
    __wait.flags = 0U;
#line 1747
    __wait.private = (void *)tmp___2;
#line 1747
    __wait.func = & autoremove_wake_function;
#line 1747
    __wait.task_list.next = & __wait.task_list;
#line 1747
    __wait.task_list.prev = & __wait.task_list;
    ldv_53456: 
#line 1747
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1747
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1747
      goto ldv_53454;
    } else {

    }
#line 1747
    tmp___3 = get_current();
#line 1747
    tmp___4 = signal_pending(tmp___3);
#line 1747
    if (tmp___4 == 0) {
#line 1747
      schedule();
#line 1747
      goto ldv_53455;
    } else {

    }
#line 1747
    __ret = -512;
#line 1747
    goto ldv_53454;
    ldv_53455: ;
#line 1747
    goto ldv_53456;
    ldv_53454: 
#line 1747
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1747
  if (__ret != 0) {
#line 1751
    retcode = 129;
#line 1752
    goto fail;
  } else {

  }
  done: 
#line 1756
  retcode = 101;
  fail: 
#line 1758
  drbd_md_sync(mdev);
#line 1759
  reply->ret_code = retcode;
#line 1760
  return (0);
}
}
#line 1763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1767
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1768
  if ((int )mdev->state.ldv_39162.role != (int )mdev->state.ldv_39162.peer) {
#line 1769
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1771
    iass = constant_test_bit(5U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1773
  if (iass != 0) {
#line 1774
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1776
    val.i = 0U;
#line 1776
    val.ldv_39162.conn = 15U;
#line 1776
    mask.i = 0U;
#line 1776
    mask.ldv_39162.conn = 31U;
#line 1776
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1778
  return;
}
}
#line 1779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1783
  retcode = 101;
#line 1787
  memset((void *)(& rs), 0, 16UL);
#line 1788
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1788
  if (tmp == 0) {
#line 1789
    retcode = 126;
#line 1790
    goto fail;
  } else {

  }
#line 1793
  if ((int )mdev->state.ldv_39162.conn > 10) {
#line 1794
    retcode = 130;
#line 1795
    goto fail;
  } else {

  }
#line 1798
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1800
    retcode = 131;
#line 1801
    goto fail;
  } else {

  }
#line 1804
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1804
  if (tmp___0 == 0) {
#line 1805
    retcode = 138;
#line 1806
    goto fail;
  } else {

  }
#line 1809
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1810
    retcode = 153;
#line 1811
    goto fail_ldev;
  } else {

  }
#line 1814
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1814
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1815
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1817
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1818
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1819
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1820
  drbd_md_sync(mdev);
#line 1821
  put_ldev(mdev);
#line 1822
  if ((int )dd == -1) {
#line 1823
    retcode = 140;
#line 1824
    goto fail;
  } else {

  }
#line 1827
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1828
    if ((int )dd == 2) {
#line 1829
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1831
    drbd_send_uuids(mdev);
#line 1832
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1836
  reply->ret_code = retcode;
#line 1837
  return (0);
  fail_ldev: 
#line 1840
  put_ldev(mdev);
#line 1841
  goto fail;
}
}
#line 1844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1847
  retcode = 101;
#line 1851
  verify_tfm = 0;
#line 1852
  csums_tfm = 0;
#line 1855
  rs_plan_s = 0;
#line 1858
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1858
  if (tmp) {
#line 1858
    tmp___0 = 0;
  } else {
#line 1858
    tmp___0 = 1;
  }
#line 1858
  if (tmp___0) {
#line 1859
    retcode = 122;
#line 1860
    goto fail;
  } else {

  }
#line 1863
  if ((nlp->flags & 2) != 0) {
#line 1864
    memset((void *)(& sc), 0, 212UL);
#line 1865
    sc.rate = 250;
#line 1866
    sc.after = -1;
#line 1867
    sc.al_extents = 127;
#line 1868
    sc.on_no_data = 0;
#line 1869
    sc.c_plan_ahead = 0;
#line 1870
    sc.c_delay_target = 10;
#line 1871
    sc.c_fill_target = 0;
#line 1872
    sc.c_max_rate = 102400;
#line 1873
    sc.c_min_rate = 4096;
  } else {
#line 1875
    __len = 212UL;
#line 1875
    if (__len > 63UL) {
#line 1875
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1875
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1877
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1877
  if (tmp___1 == 0) {
#line 1878
    retcode = 126;
#line 1879
    goto fail;
  } else {

  }
#line 1883
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1888
  if (rsr != 0) {
#line 1888
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1888
    if (tmp___2 != 0) {
#line 1889
      retcode = 148;
#line 1890
      goto fail;
    } else {

    }
  } else {

  }
#line 1893
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1894
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1895
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1895
    if (tmp___3 != 0L) {
#line 1896
      csums_tfm = 0;
#line 1897
      retcode = 144;
#line 1898
      goto fail;
    } else {

    }
#line 1901
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1901
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1901
    if (tmp___5 == 0) {
#line 1902
      retcode = 145;
#line 1903
      goto fail;
    } else {

    }
  } else {

  }
#line 1908
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1910
  if (ovr != 0) {
#line 1911
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1911
    if (tmp___6 != 0) {
#line 1912
      retcode = 149;
#line 1913
      goto fail;
    } else {

    }
  } else {

  }
#line 1917
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1918
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1919
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1919
    if (tmp___7 != 0L) {
#line 1920
      verify_tfm = 0;
#line 1921
      retcode = 146;
#line 1922
      goto fail;
    } else {

    }
#line 1925
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1925
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1925
    if (tmp___9 == 0) {
#line 1926
      retcode = 147;
#line 1927
      goto fail;
    } else {

    }
  } else {

  }
#line 1932
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1933
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1935
    if (err != 0) {
#line 1936
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1937
      retcode = 143;
#line 1938
      goto fail;
    } else {

    }
  } else {

  }
#line 1942
  _b = sc.rate <= 0;
#line 1942
  if (_b != 0) {
#line 1942
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1942);
  } else {

  }
#line 1942
  if (_b != 0) {
#line 1942
    sc.rate = 1;
  } else {

  }
#line 1943
  _b___0 = sc.al_extents <= 6;
#line 1943
  if (_b___0 != 0) {
#line 1943
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1943);
  } else {

  }
#line 1943
  if (_b___0 != 0) {
#line 1943
    sc.al_extents = 127;
  } else {

  }
#line 1945
  if (sc.al_extents > 3843) {
#line 1946
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1947
    sc.al_extents = 3843;
  } else {

  }
#line 1954
  if (sc.after >= 0) {
#line 1955
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1960
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1961
  if (retcode != 101) {
#line 1962
    goto fail;
  } else {

  }
#line 1964
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1965
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1966
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1966
    rs_plan_s = (int *)tmp___10;
#line 1967
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1968
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1969
      retcode = 122;
#line 1970
      goto fail;
    } else {

    }
  } else {

  }
#line 1976
  spin_lock(& mdev->peer_seq_lock);
#line 1977
  mdev->sync_conf = sc;
#line 1979
  if (rsr == 0) {
#line 1980
    crypto_free_hash(mdev->csums_tfm);
#line 1981
    mdev->csums_tfm = csums_tfm;
#line 1982
    csums_tfm = 0;
  } else {

  }
#line 1985
  if (ovr == 0) {
#line 1986
    crypto_free_hash(mdev->verify_tfm);
#line 1987
    mdev->verify_tfm = verify_tfm;
#line 1988
    verify_tfm = 0;
  } else {

  }
#line 1991
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1992
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1993
    mdev->rs_plan_s.values = rs_plan_s;
#line 1994
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1995
    mdev->rs_planed = 0;
#line 1996
    rs_plan_s = 0;
  } else {

  }
#line 1999
  spin_unlock(& mdev->peer_seq_lock);
#line 2001
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2001
  if (tmp___14 != 0) {
#line 2002
    tmp___11 = lc_try_lock(mdev->act_log);
#line 2002
    if (tmp___11 != 0) {
#line 2002
      goto ldv_53501;
    } else {

    }
#line 2002
    tmp___12 = get_current();
#line 2002
    __wait.flags = 0U;
#line 2002
    __wait.private = (void *)tmp___12;
#line 2002
    __wait.func = & autoremove_wake_function;
#line 2002
    __wait.task_list.next = & __wait.task_list;
#line 2002
    __wait.task_list.prev = & __wait.task_list;
    ldv_53504: 
#line 2002
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 2002
    tmp___13 = lc_try_lock(mdev->act_log);
#line 2002
    if (tmp___13 != 0) {
#line 2002
      goto ldv_53503;
    } else {

    }
#line 2002
    schedule();
#line 2002
    goto ldv_53504;
    ldv_53503: 
#line 2002
    finish_wait(& mdev->al_wait, & __wait);
    ldv_53501: 
#line 2003
    drbd_al_shrink(mdev);
#line 2004
    err = drbd_check_al_size(mdev);
#line 2005
    lc_unlock(mdev->act_log);
#line 2006
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 2008
    put_ldev(mdev);
#line 2009
    drbd_md_sync(mdev);
#line 2011
    if (err != 0) {
#line 2012
      retcode = 122;
#line 2013
      goto fail;
    } else {

    }
  } else {

  }
#line 2017
  if ((int )mdev->state.ldv_39162.conn > 9) {
#line 2018
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 2020
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2020
  if (tmp___15) {
#line 2020
    tmp___16 = 0;
  } else {
#line 2020
    tmp___16 = 1;
  }
#line 2020
  if (tmp___16) {
#line 2021
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2022
    drbd_calc_cpu_mask(mdev);
#line 2023
    mdev->receiver.reset_cpu_mask = 1;
#line 2024
    mdev->asender.reset_cpu_mask = 1;
#line 2025
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 2028
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 2030
  kfree((void const   *)rs_plan_s);
#line 2031
  free_cpumask_var(new_cpu_mask);
#line 2032
  crypto_free_hash(csums_tfm);
#line 2033
  crypto_free_hash(verify_tfm);
#line 2034
  reply->ret_code = retcode;
#line 2035
  return (0);
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2046
  drbd_suspend_io(mdev);
#line 2047
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2047
  if (tmp == 0) {
#line 2047
    goto ldv_53511;
  } else {

  }
#line 2047
  tmp___0 = get_current();
#line 2047
  __wait.flags = 0U;
#line 2047
  __wait.private = (void *)tmp___0;
#line 2047
  __wait.func = & autoremove_wake_function;
#line 2047
  __wait.task_list.next = & __wait.task_list;
#line 2047
  __wait.task_list.prev = & __wait.task_list;
  ldv_53514: 
#line 2047
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2047
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2047
  if (tmp___1 == 0) {
#line 2047
    goto ldv_53513;
  } else {

  }
#line 2047
  schedule();
#line 2047
  goto ldv_53514;
  ldv_53513: 
#line 2047
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53511: 
#line 2048
  drbd_flush_workqueue(mdev);
#line 2050
  val.i = 0U;
#line 2050
  val.ldv_39162.conn = 12U;
#line 2050
  mask.i = 0U;
#line 2050
  mask.ldv_39162.conn = 31U;
#line 2050
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2050
  retcode = (int )tmp___2;
#line 2052
  if (retcode <= 0 && retcode != -15) {
#line 2053
    val___0.i = 0U;
#line 2053
    val___0.ldv_39162.conn = 12U;
#line 2053
    mask___0.i = 0U;
#line 2053
    mask___0.ldv_39162.conn = 31U;
#line 2053
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2055
  goto ldv_53531;
  ldv_53530: 
#line 2056
  spin_lock_irq(& mdev->req_lock);
#line 2057
  if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 2058
    __ns.i = mdev->state.i;
#line 2058
    __ns.ldv_39162.disk = 4U;
#line 2058
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2058
    retcode = (int )tmp___3;
  } else {

  }
#line 2059
  spin_unlock_irq(& mdev->req_lock);
#line 2061
  if (retcode != -15) {
#line 2062
    goto ldv_53525;
  } else {

  }
#line 2064
  val___1.i = 0U;
#line 2064
  val___1.ldv_39162.conn = 12U;
#line 2064
  mask___1.i = 0U;
#line 2064
  mask___1.ldv_39162.conn = 31U;
#line 2064
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_53531: ;
#line 2055
  if (retcode == -15) {
#line 2056
    goto ldv_53530;
  } else {

  }
  ldv_53525: 
#line 2066
  drbd_resume_io(mdev);
#line 2068
  reply->ret_code = retcode;
#line 2069
  return (0);
}
}
#line 2072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2076
  rv = drbd_bmio_set_n_write(mdev);
#line 2077
  drbd_suspend_al(mdev);
#line 2078
  return (rv);
}
}
#line 2081 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2089
  drbd_suspend_io(mdev);
#line 2090
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2090
  if (tmp == 0) {
#line 2090
    goto ldv_53542;
  } else {

  }
#line 2090
  tmp___0 = get_current();
#line 2090
  __wait.flags = 0U;
#line 2090
  __wait.private = (void *)tmp___0;
#line 2090
  __wait.func = & autoremove_wake_function;
#line 2090
  __wait.task_list.next = & __wait.task_list;
#line 2090
  __wait.task_list.prev = & __wait.task_list;
  ldv_53545: 
#line 2090
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2090
  tmp___1 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2090
  if (tmp___1 == 0) {
#line 2090
    goto ldv_53544;
  } else {

  }
#line 2090
  schedule();
#line 2090
  goto ldv_53545;
  ldv_53544: 
#line 2090
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53542: 
#line 2091
  drbd_flush_workqueue(mdev);
#line 2093
  val.i = 0U;
#line 2093
  val.ldv_39162.conn = 11U;
#line 2093
  mask.i = 0U;
#line 2093
  mask.ldv_39162.conn = 31U;
#line 2093
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2093
  retcode = (int )tmp___2;
#line 2095
  if (retcode <= 0) {
#line 2096
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2099
      val___0.i = 0U;
#line 2099
      val___0.ldv_39162.pdsk = 4U;
#line 2099
      mask___0.i = 0U;
#line 2099
      mask___0.ldv_39162.pdsk = 15U;
#line 2099
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2100
      if (retcode > 0) {
#line 2101
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2101
        if (tmp___3 != 0) {
#line 2104
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2107
      val___1.i = 0U;
#line 2107
      val___1.ldv_39162.conn = 11U;
#line 2107
      mask___1.i = 0U;
#line 2107
      mask___1.ldv_39162.conn = 31U;
#line 2107
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2109
  drbd_resume_io(mdev);
#line 2111
  reply->ret_code = retcode;
#line 2112
  return (0);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2118
  retcode = 101;
#line 2120
  val.i = 0U;
#line 2120
  val.ldv_39162.user_isp = 1U;
#line 2120
  mask.i = 0U;
#line 2120
  mask.ldv_39162.user_isp = 1U;
#line 2120
  tmp = drbd_request_state(mdev, mask, val);
#line 2120
  if (tmp == 2) {
#line 2121
    retcode = 134;
  } else {

  }
#line 2123
  reply->ret_code = retcode;
#line 2124
  return (0);
}
}
#line 2127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2130
  retcode = 101;
#line 2133
  val.i = 0U;
#line 2133
  val.ldv_39162.user_isp = 0U;
#line 2133
  mask.i = 0U;
#line 2133
  mask.ldv_39162.user_isp = 1U;
#line 2133
  tmp = drbd_request_state(mdev, mask, val);
#line 2133
  if (tmp == 2) {
#line 2134
    s = mdev->state;
#line 2135
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2136
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2139
      retcode = 135;
    }
  } else {

  }
#line 2143
  reply->ret_code = retcode;
#line 2144
  return (0);
}
}
#line 2147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2150
  val.i = 0U;
#line 2150
  val.ldv_39162.susp = 1U;
#line 2150
  mask.i = 0U;
#line 2150
  mask.ldv_39162.susp = 1U;
#line 2150
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2152
  return (0);
}
}
#line 2155 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2158
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 2158
  if (tmp != 0) {
#line 2159
    drbd_uuid_new_current(mdev);
#line 2160
    clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2162
  drbd_suspend_io(mdev);
#line 2163
  val.i = 0U;
#line 2163
  val.ldv_39162.susp = 0U;
#line 2163
  val.ldv_39162.susp_nod = 0U;
#line 2163
  val.ldv_39162.susp_fen = 0U;
#line 2163
  mask.i = 0U;
#line 2163
  mask.ldv_39162.susp = 1U;
#line 2163
  mask.ldv_39162.susp_nod = 1U;
#line 2163
  mask.ldv_39162.susp_fen = 1U;
#line 2163
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2164
  if (reply->ret_code == 1) {
#line 2165
    if ((int )mdev->state.ldv_39162.conn <= 9) {
#line 2166
      tl_clear(mdev);
    } else {

    }
#line 2167
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2168
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2170
  drbd_resume_io(mdev);
#line 2172
  return (0);
}
}
#line 2175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2178
  val.i = 0U;
#line 2178
  val.ldv_39162.disk = 5U;
#line 2178
  mask.i = 0U;
#line 2178
  mask.ldv_39162.disk = 15U;
#line 2178
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2179
  return (0);
}
}
#line 2182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2187
  tl = (unsigned short *)(& reply->tag_list);
#line 2189
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2189
  if (tmp != 0) {
#line 2190
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2191
    put_ldev(mdev);
  } else {

  }
#line 2194
  tmp___0 = get_net_conf(mdev);
#line 2194
  if (tmp___0 != 0) {
#line 2195
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2196
    put_net_conf(mdev);
  } else {

  }
#line 2198
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2200
  tmp___1 = tl;
#line 2200
  tl = tl + 1;
#line 2200
  __gu_p = (void *)tmp___1;
#line 2200
  switch (2UL) {
  case 1UL: 
#line 2200
  *((u8 *)__gu_p) = 0U;
#line 2200
  goto ldv_53614;
  case 2UL: 
#line 2200
  put_unaligned_le16(0, __gu_p);
#line 2200
  goto ldv_53614;
  case 4UL: 
#line 2200
  put_unaligned_le32(0U, __gu_p);
#line 2200
  goto ldv_53614;
  case 8UL: 
#line 2200
  put_unaligned_le64(0ULL, __gu_p);
#line 2200
  goto ldv_53614;
  default: 
#line 2200
  __bad_unaligned_access_size();
#line 2200
  goto ldv_53614;
  }
  ldv_53614: ;
#line 2202
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2208
  tl = (unsigned short *)(& reply->tag_list);
#line 2209
  s = mdev->state;
#line 2213
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2216
  if ((int )s.ldv_39162.conn > 15 && (int )s.ldv_39162.conn <= 21) {
#line 2217
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2217
    if (tmp != 0) {
#line 2218
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2219
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2220
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2223
  tmp___0 = tl;
#line 2223
  tl = tl + 1;
#line 2223
  __gu_p = (void *)tmp___0;
#line 2223
  switch (2UL) {
  case 1UL: 
#line 2223
  *((u8 *)__gu_p) = 0U;
#line 2223
  goto ldv_53630;
  case 2UL: 
#line 2223
  put_unaligned_le16(0, __gu_p);
#line 2223
  goto ldv_53630;
  case 4UL: 
#line 2223
  put_unaligned_le32(0U, __gu_p);
#line 2223
  goto ldv_53630;
  case 8UL: 
#line 2223
  put_unaligned_le64(0ULL, __gu_p);
#line 2223
  goto ldv_53630;
  default: 
#line 2223
  __bad_unaligned_access_size();
#line 2223
  goto ldv_53630;
  }
  ldv_53630: ;
#line 2225
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2233
  tl = (unsigned short *)(& reply->tag_list);
#line 2235
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2235
  if (tmp != 0) {
#line 2236
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2237
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2238
    put_ldev(mdev);
  } else {

  }
#line 2240
  tmp___0 = tl;
#line 2240
  tl = tl + 1;
#line 2240
  __gu_p = (void *)tmp___0;
#line 2240
  switch (2UL) {
  case 1UL: 
#line 2240
  *((u8 *)__gu_p) = 0U;
#line 2240
  goto ldv_53643;
  case 2UL: 
#line 2240
  put_unaligned_le16(0, __gu_p);
#line 2240
  goto ldv_53643;
  case 4UL: 
#line 2240
  put_unaligned_le32(0U, __gu_p);
#line 2240
  goto ldv_53643;
  case 8UL: 
#line 2240
  put_unaligned_le64(0ULL, __gu_p);
#line 2240
  goto ldv_53643;
  default: 
#line 2240
  __bad_unaligned_access_size();
#line 2240
  goto ldv_53643;
  }
  ldv_53643: ;
#line 2242
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2257
  tl = (unsigned short *)(& reply->tag_list);
#line 2259
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2259
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2259
    rv = tmp != 0;
  } else {
#line 2259
    rv = 2;
  }
#line 2262
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2263
  tmp___0 = tl;
#line 2263
  tl = tl + 1;
#line 2263
  __gu_p = (void *)tmp___0;
#line 2263
  switch (2UL) {
  case 1UL: 
#line 2263
  *((u8 *)__gu_p) = 0U;
#line 2263
  goto ldv_53657;
  case 2UL: 
#line 2263
  put_unaligned_le16(0, __gu_p);
#line 2263
  goto ldv_53657;
  case 4UL: 
#line 2263
  put_unaligned_le32(0U, __gu_p);
#line 2263
  goto ldv_53657;
  case 8UL: 
#line 2263
  put_unaligned_le64(0ULL, __gu_p);
#line 2263
  goto ldv_53657;
  default: 
#line 2263
  __bad_unaligned_access_size();
#line 2263
  goto ldv_53657;
  }
  ldv_53657: ;
#line 2265
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2272
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2275
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2275
  if (tmp == 0) {
#line 2276
    reply->ret_code = 126;
#line 2277
    return (0);
  } else {

  }
#line 2282
  drbd_suspend_io(mdev);
#line 2283
  tmp___0 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2283
  if (tmp___0 == 0) {
#line 2283
    goto ldv_53668;
  } else {

  }
#line 2283
  tmp___1 = get_current();
#line 2283
  __wait.flags = 0U;
#line 2283
  __wait.private = (void *)tmp___1;
#line 2283
  __wait.func = & autoremove_wake_function;
#line 2283
  __wait.task_list.next = & __wait.task_list;
#line 2283
  __wait.task_list.prev = & __wait.task_list;
  ldv_53671: 
#line 2283
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2283
  tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2283
  if (tmp___2 == 0) {
#line 2283
    goto ldv_53670;
  } else {

  }
#line 2283
  schedule();
#line 2283
  goto ldv_53671;
  ldv_53670: 
#line 2283
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_53668: 
#line 2286
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2287
  val.i = 0U;
#line 2287
  val.ldv_39162.conn = 18U;
#line 2287
  mask.i = 0U;
#line 2287
  mask.ldv_39162.conn = 31U;
#line 2287
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2288
  drbd_resume_io(mdev);
#line 2289
  return (0);
}
}
#line 2293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2296
  retcode = 101;
#line 2297
  skip_initial_sync = 0;
#line 2302
  memset((void *)(& args), 0, 4UL);
#line 2303
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2303
  if (tmp == 0) {
#line 2304
    reply->ret_code = 126;
#line 2305
    return (0);
  } else {

  }
#line 2308
  ldv_mutex_lock_235(& mdev->state_mutex);
#line 2310
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2310
  if (tmp___0 == 0) {
#line 2311
    retcode = 138;
#line 2312
    goto out;
  } else {

  }
#line 2316
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2318
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2319
    skip_initial_sync = 1;
  } else
#line 2320
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2321
    retcode = 151;
#line 2322
    goto out_dec;
  } else {

  }
#line 2325
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2326
  drbd_uuid_new_current(mdev);
#line 2328
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2329
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2331
    if (err != 0) {
#line 2332
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2333
      retcode = 118;
    } else {

    }
#line 2335
    if (skip_initial_sync != 0) {
#line 2336
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2337
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2338
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2339
      spin_lock_irq(& mdev->req_lock);
#line 2340
      __ns.i = mdev->state.i;
#line 2340
      __ns.ldv_39162.disk = 8U;
#line 2340
      __ns.ldv_39162.pdsk = 8U;
#line 2340
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2342
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2346
  drbd_md_sync(mdev);
  out_dec: 
#line 2348
  put_ldev(mdev);
  out: 
#line 2350
  ldv_mutex_unlock_236(& mdev->state_mutex);
#line 2352
  reply->ret_code = retcode;
#line 2353
  return (0);
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2363
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1320}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 2396
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2402
  reply_size = 34;
#line 2406
  tmp = try_module_get(& __this_module);
#line 2406
  if (tmp) {
#line 2406
    tmp___0 = 0;
  } else {
#line 2406
    tmp___0 = 1;
  }
#line 2406
  if (tmp___0) {
#line 2407
    printk("\vdrbd: try_module_get() failed!\n");
#line 2408
    return;
  } else {

  }
#line 2411
  tmp___1 = capable(21);
#line 2411
  if (tmp___1) {
#line 2411
    tmp___2 = 0;
  } else {
#line 2411
    tmp___2 = 1;
  }
#line 2411
  if (tmp___2) {
#line 2412
    retcode = 152;
#line 2413
    goto fail;
  } else {

  }
#line 2416
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2418
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2419
    retcode = 127;
#line 2420
    goto fail;
  } else {

  }
#line 2423
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2425
    retcode = 137;
#line 2426
    goto fail;
  } else {

  }
#line 2429
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2432
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2433
    retcode = 137;
#line 2434
    goto fail;
  } else {

  }
#line 2437
  reply_size = cm->reply_body_size + reply_size;
#line 2440
  tmp___3 = kzalloc((size_t )reply_size, 208U);
#line 2440
  cn_reply = (struct cn_msg *)tmp___3;
#line 2441
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2442
    retcode = 122;
#line 2443
    goto fail;
  } else {

  }
#line 2445
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2447
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2449
  reply->minor = nlp->drbd_minor;
#line 2450
  reply->ret_code = 101;
#line 2453
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2455
  cn_reply->id = req->id;
#line 2456
  cn_reply->seq = req->seq;
#line 2457
  cn_reply->ack = req->ack + 1U;
#line 2458
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2459
  cn_reply->flags = 0U;
#line 2461
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2462
  if (rr != 0 && rr != -3) {
#line 2463
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2465
  kfree((void const   *)cn_reply);
#line 2466
  module_put(& __this_module);
#line 2467
  return;
  fail: 
#line 2469
  drbd_nl_send_reply(req, retcode);
#line 2470
  module_put(& __this_module);
#line 2471
  return;
}
}
#line 2473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2479
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2480
  len = (int )len < (int )l ? len : l;
#line 2481
  tmp = tl;
#line 2481
  tl = tl + 1;
#line 2481
  __gu_p = (void *)tmp;
#line 2481
  switch (2UL) {
  case 1UL: 
#line 2481
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2481
  goto ldv_53720;
  case 2UL: 
#line 2481
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2481
  goto ldv_53720;
  case 4UL: 
#line 2481
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2481
  goto ldv_53720;
  case 8UL: 
#line 2481
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2481
  goto ldv_53720;
  default: 
#line 2481
  __bad_unaligned_access_size();
#line 2481
  goto ldv_53720;
  }
  ldv_53720: 
#line 2482
  tmp___0 = tl;
#line 2482
  tl = tl + 1;
#line 2482
  __gu_p___0 = (void *)tmp___0;
#line 2482
  switch (2UL) {
  case 1UL: 
#line 2482
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2482
  goto ldv_53727;
  case 2UL: 
#line 2482
  put_unaligned_le16((int )len, __gu_p___0);
#line 2482
  goto ldv_53727;
  case 4UL: 
#line 2482
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2482
  goto ldv_53727;
  case 8UL: 
#line 2482
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2482
  goto ldv_53727;
  default: 
#line 2482
  __bad_unaligned_access_size();
#line 2482
  goto ldv_53727;
  }
  ldv_53727: 
#line 2483
  __len = (size_t )len;
#line 2483
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2484
  tl = tl + (unsigned long )len;
#line 2485
  if (nul_terminated != 0) {
#line 2486
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2487
  return (tl);
}
}
#line 2491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2493
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2493
  return (tmp);
}
}
#line 2497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2499
  tmp = strlen(str);
#line 2499
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2499
  return (tmp___0);
}
}
#line 2503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2505
  tmp = tl;
#line 2505
  tl = tl + 1;
#line 2505
  __gu_p = (void *)tmp;
#line 2505
  switch (2UL) {
  case 1UL: 
#line 2505
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2505
  goto ldv_53753;
  case 2UL: 
#line 2505
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2505
  goto ldv_53753;
  case 4UL: 
#line 2505
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2505
  goto ldv_53753;
  case 8UL: 
#line 2505
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2505
  goto ldv_53753;
  default: 
#line 2505
  __bad_unaligned_access_size();
#line 2505
  goto ldv_53753;
  }
  ldv_53753: ;
#line 2506
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2508
  tmp___0 = tl;
#line 2508
  tl = tl + 1;
#line 2508
  __gu_p___0 = (void *)tmp___0;
#line 2508
  switch (2UL) {
  case 1UL: 
#line 2508
  *((u8 *)__gu_p___0) = 4U;
#line 2508
  goto ldv_53761;
  case 2UL: 
#line 2508
  put_unaligned_le16(4, __gu_p___0);
#line 2508
  goto ldv_53761;
  case 4UL: 
#line 2508
  put_unaligned_le32(4U, __gu_p___0);
#line 2508
  goto ldv_53761;
  case 8UL: 
#line 2508
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2508
  goto ldv_53761;
  default: 
#line 2508
  __bad_unaligned_access_size();
#line 2508
  goto ldv_53761;
  }
  ldv_53761: 
#line 2509
  __gu_p___1 = (void *)tl;
#line 2509
  switch (4UL) {
  case 1UL: 
#line 2509
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2509
  goto ldv_53768;
  case 2UL: 
#line 2509
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2509
  goto ldv_53768;
  case 4UL: 
#line 2509
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2509
  goto ldv_53768;
  case 8UL: 
#line 2509
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2509
  goto ldv_53768;
  default: 
#line 2509
  __bad_unaligned_access_size();
#line 2509
  goto ldv_53768;
  }
  ldv_53768: 
#line 2510
  tl = tl + 4U;
#line 2511
  goto ldv_53773;
  case 16384U: 
#line 2513
  tmp___1 = tl;
#line 2513
  tl = tl + 1;
#line 2513
  __gu_p___2 = (void *)tmp___1;
#line 2513
  switch (2UL) {
  case 1UL: 
#line 2513
  *((u8 *)__gu_p___2) = 8U;
#line 2513
  goto ldv_53777;
  case 2UL: 
#line 2513
  put_unaligned_le16(8, __gu_p___2);
#line 2513
  goto ldv_53777;
  case 4UL: 
#line 2513
  put_unaligned_le32(8U, __gu_p___2);
#line 2513
  goto ldv_53777;
  case 8UL: 
#line 2513
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2513
  goto ldv_53777;
  default: 
#line 2513
  __bad_unaligned_access_size();
#line 2513
  goto ldv_53777;
  }
  ldv_53777: 
#line 2514
  __gu_p___3 = (void *)tl;
#line 2514
  switch (8UL) {
  case 1UL: 
#line 2514
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2514
  goto ldv_53784;
  case 2UL: 
#line 2514
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2514
  goto ldv_53784;
  case 4UL: 
#line 2514
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2514
  goto ldv_53784;
  case 8UL: 
#line 2514
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2514
  goto ldv_53784;
  default: 
#line 2514
  __bad_unaligned_access_size();
#line 2514
  goto ldv_53784;
  }
  ldv_53784: 
#line 2515
  tl = tl + 8U;
#line 2516
  goto ldv_53773;
  default: ;
  }
  ldv_53773: ;
#line 2521
  return (tl);
}
}
#line 2524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2530
  cn_reply = (struct cn_msg *)(& buffer);
#line 2531
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2533
  tl = (unsigned short *)(& reply->tag_list);
#line 2537
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2539
  tmp = tl;
#line 2539
  tl = tl + 1;
#line 2539
  __gu_p = (void *)tmp;
#line 2539
  switch (2UL) {
  case 1UL: 
#line 2539
  *((u8 *)__gu_p) = 0U;
#line 2539
  goto ldv_53800;
  case 2UL: 
#line 2539
  put_unaligned_le16(0, __gu_p);
#line 2539
  goto ldv_53800;
  case 4UL: 
#line 2539
  put_unaligned_le32(0U, __gu_p);
#line 2539
  goto ldv_53800;
  case 8UL: 
#line 2539
  put_unaligned_le64(0ULL, __gu_p);
#line 2539
  goto ldv_53800;
  default: 
#line 2539
  __bad_unaligned_access_size();
#line 2539
  goto ldv_53800;
  }
  ldv_53800: 
#line 2541
  cn_reply->id.idx = 8U;
#line 2542
  cn_reply->id.val = 1U;
#line 2544
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2544
  cn_reply->seq = (__u32 )tmp___0;
#line 2545
  cn_reply->ack = 0U;
#line 2546
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2548
  cn_reply->flags = 0U;
#line 2550
  reply->packet_type = 17;
#line 2551
  reply->minor = mdev_to_minor(mdev);
#line 2552
  reply->ret_code = 101;
#line 2554
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2555
  return;
}
}
#line 2557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2563
  cn_reply = (struct cn_msg *)(& buffer);
#line 2564
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2566
  tl = (unsigned short *)(& reply->tag_list);
#line 2570
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2571
  tmp = tl;
#line 2571
  tl = tl + 1;
#line 2571
  __gu_p = (void *)tmp;
#line 2571
  switch (2UL) {
  case 1UL: 
#line 2571
  *((u8 *)__gu_p) = 0U;
#line 2571
  goto ldv_53815;
  case 2UL: 
#line 2571
  put_unaligned_le16(0, __gu_p);
#line 2571
  goto ldv_53815;
  case 4UL: 
#line 2571
  put_unaligned_le32(0U, __gu_p);
#line 2571
  goto ldv_53815;
  case 8UL: 
#line 2571
  put_unaligned_le64(0ULL, __gu_p);
#line 2571
  goto ldv_53815;
  default: 
#line 2571
  __bad_unaligned_access_size();
#line 2571
  goto ldv_53815;
  }
  ldv_53815: 
#line 2573
  cn_reply->id.idx = 8U;
#line 2574
  cn_reply->id.val = 1U;
#line 2576
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2576
  cn_reply->seq = (__u32 )tmp___0;
#line 2577
  cn_reply->ack = 0U;
#line 2578
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2580
  cn_reply->flags = 0U;
#line 2582
  reply->packet_type = 20;
#line 2583
  reply->minor = mdev_to_minor(mdev);
#line 2584
  reply->ret_code = 101;
#line 2586
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2587
  return;
}
}
#line 2589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2600
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2601
    return;
  } else {

  }
#line 2602
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2603
    return;
  } else {

  }
#line 2611
  tmp = kzalloc(33026UL, 16U);
#line 2611
  cn_reply = (struct cn_msg *)tmp;
#line 2618
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2621
    return;
  } else {

  }
#line 2624
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2625
  tl = (unsigned short *)(& reply->tag_list);
#line 2627
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2628
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2629
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2630
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2631
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_48227.block_id));
#line 2634
  __min1 = e->size;
#line 2634
  __min2 = 32768U;
#line 2634
  len = __min1 < __min2 ? __min1 : __min2;
#line 2635
  tmp___0 = tl;
#line 2635
  tl = tl + 1;
#line 2635
  __gu_p = (void *)tmp___0;
#line 2635
  switch (2UL) {
  case 1UL: 
#line 2635
  *((u8 *)__gu_p) = 50U;
#line 2635
  goto ldv_53838;
  case 2UL: 
#line 2635
  put_unaligned_le16(49202, __gu_p);
#line 2635
  goto ldv_53838;
  case 4UL: 
#line 2635
  put_unaligned_le32(49202U, __gu_p);
#line 2635
  goto ldv_53838;
  case 8UL: 
#line 2635
  put_unaligned_le64(49202ULL, __gu_p);
#line 2635
  goto ldv_53838;
  default: 
#line 2635
  __bad_unaligned_access_size();
#line 2635
  goto ldv_53838;
  }
  ldv_53838: 
#line 2636
  tmp___1 = tl;
#line 2636
  tl = tl + 1;
#line 2636
  __gu_p___0 = (void *)tmp___1;
#line 2636
  switch (2UL) {
  case 1UL: 
#line 2636
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2636
  goto ldv_53845;
  case 2UL: 
#line 2636
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2636
  goto ldv_53845;
  case 4UL: 
#line 2636
  put_unaligned_le32(len, __gu_p___0);
#line 2636
  goto ldv_53845;
  case 8UL: 
#line 2636
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2636
  goto ldv_53845;
  default: 
#line 2636
  __bad_unaligned_access_size();
#line 2636
  goto ldv_53845;
  }
  ldv_53845: 
#line 2638
  page = e->pages;
#line 2639
  goto ldv_53861;
  ldv_53860: 
#line 2640
  tmp___2 = kmap_atomic___0(page);
#line 2640
  d = tmp___2;
#line 2641
  __min1___0 = len;
#line 2641
  __min2___0 = 4096U;
#line 2641
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2642
  __len = (size_t )l;
#line 2642
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2643
  __kunmap_atomic___0(d);
#line 2644
  tl = tl + (unsigned long )l;
#line 2645
  len = len - l;
#line 2646
  if (len == 0U) {
#line 2647
    goto ldv_53859;
  } else {

  }
#line 2639
  page = page_chain_next(page);
  ldv_53861: ;
#line 2639
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2639
    tmp___3 = page_chain_next(page);
#line 2639
    __builtin_prefetch((void const   *)tmp___3);
#line 2639
    if (1 != 0) {
#line 2640
      goto ldv_53860;
    } else {
#line 2642
      goto ldv_53859;
    }
  } else {

  }
  ldv_53859: 
#line 2649
  tmp___4 = tl;
#line 2649
  tl = tl + 1;
#line 2649
  __gu_p___1 = (void *)tmp___4;
#line 2649
  switch (2UL) {
  case 1UL: 
#line 2649
  *((u8 *)__gu_p___1) = 0U;
#line 2649
  goto ldv_53864;
  case 2UL: 
#line 2649
  put_unaligned_le16(0, __gu_p___1);
#line 2649
  goto ldv_53864;
  case 4UL: 
#line 2649
  put_unaligned_le32(0U, __gu_p___1);
#line 2649
  goto ldv_53864;
  case 8UL: 
#line 2649
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2649
  goto ldv_53864;
  default: 
#line 2649
  __bad_unaligned_access_size();
#line 2649
  goto ldv_53864;
  }
  ldv_53864: 
#line 2651
  cn_reply->id.idx = 8U;
#line 2652
  cn_reply->id.val = 1U;
#line 2654
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2654
  cn_reply->seq = (__u32 )tmp___5;
#line 2655
  cn_reply->ack = 0U;
#line 2656
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2658
  cn_reply->flags = 0U;
#line 2660
  reply->packet_type = 24;
#line 2661
  reply->minor = mdev_to_minor(mdev);
#line 2662
  reply->ret_code = 101;
#line 2664
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2665
  kfree((void const   *)cn_reply);
#line 2666
  return;
}
}
#line 2668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2674
  cn_reply = (struct cn_msg *)(& buffer);
#line 2675
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2677
  tl = (unsigned short *)(& reply->tag_list);
#line 2682
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2682
  if (tmp == 0) {
#line 2683
    return;
  } else {

  }
#line 2684
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2685
  put_ldev(mdev);
#line 2687
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2688
  tmp___0 = tl;
#line 2688
  tl = tl + 1;
#line 2688
  __gu_p = (void *)tmp___0;
#line 2688
  switch (2UL) {
  case 1UL: 
#line 2688
  *((u8 *)__gu_p) = 0U;
#line 2688
  goto ldv_53880;
  case 2UL: 
#line 2688
  put_unaligned_le16(0, __gu_p);
#line 2688
  goto ldv_53880;
  case 4UL: 
#line 2688
  put_unaligned_le32(0U, __gu_p);
#line 2688
  goto ldv_53880;
  case 8UL: 
#line 2688
  put_unaligned_le64(0ULL, __gu_p);
#line 2688
  goto ldv_53880;
  default: 
#line 2688
  __bad_unaligned_access_size();
#line 2688
  goto ldv_53880;
  }
  ldv_53880: 
#line 2690
  cn_reply->id.idx = 8U;
#line 2691
  cn_reply->id.val = 1U;
#line 2693
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2693
  cn_reply->seq = (__u32 )tmp___1;
#line 2694
  cn_reply->ack = 0U;
#line 2695
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2697
  cn_reply->flags = 0U;
#line 2699
  reply->packet_type = 23;
#line 2700
  reply->minor = mdev_to_minor(mdev);
#line 2701
  reply->ret_code = 101;
#line 2703
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2704
  return;
}
}
#line 2706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2709
  try = 10;
#line 2711
  cn_id_drbd.val = 1U;
  ldv_53892: 
#line 2713
  cn_id_drbd.idx = cn_idx;
#line 2714
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2715
  if (err == 0) {
#line 2716
    goto ldv_53891;
  } else {

  }
#line 2717
  cn_idx = cn_idx + 6977U;
#line 2718
  tmp = try;
#line 2718
  try = try - 1;
#line 2718
  if (tmp != 0) {
#line 2719
    goto ldv_53892;
  } else {

  }
  ldv_53891: ;
#line 2720
  if (err != 0) {
#line 2721
    printk("\vdrbd: cn_drbd failed to register\n");
#line 2722
    return (err);
  } else {

  }
#line 2725
  return (0);
}
}
#line 2728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2732
  cn_id_drbd.idx = cn_idx;
#line 2733
  cn_id_drbd.val = 1U;
#line 2735
  cn_del_callback(& cn_id_drbd);
#line 2736
  return;
}
}
#line 2738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2741
  cn_reply = (struct cn_msg *)(& buffer);
#line 2742
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2746
  memset((void *)(& buffer), 0, 32UL);
#line 2747
  cn_reply->id = req->id;
#line 2749
  cn_reply->seq = req->seq;
#line 2750
  cn_reply->ack = req->ack + 1U;
#line 2751
  cn_reply->len = 12U;
#line 2752
  cn_reply->flags = 0U;
#line 2754
  reply->packet_type = 27;
#line 2755
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2756
  reply->ret_code = ret_code;
#line 2758
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2759
  if (rr != 0 && rr != -3) {
#line 2760
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2761
  return;
}
}
#line 2763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_223(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2768
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 2770
  mutex_lock(ldv_func_arg1);
#line 2771
  return;
}
}
#line 2773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_224(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2778
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 2780
  mutex_unlock(ldv_func_arg1);
#line 2781
  return;
}
}
#line 2783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_225(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2788
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2790
  mutex_lock(ldv_func_arg1);
#line 2791
  return;
}
}
#line 2793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_226(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2798
  tmp = mutex_trylock(ldv_func_arg1);
#line 2798
  ldv_func_res = tmp;
#line 2800
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2800
  return (tmp___0);
#line 2802
  return (ldv_func_res);
}
}
#line 2805 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_227(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2810
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2812
  mutex_unlock(ldv_func_arg1);
#line 2813
  return;
}
}
#line 2815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_228(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2820
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2822
  mutex_lock(ldv_func_arg1);
#line 2823
  return;
}
}
#line 2825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_229(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2830
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2832
  mutex_unlock(ldv_func_arg1);
#line 2833
  return;
}
}
#line 2835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_230(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2840
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2842
  mutex_lock(ldv_func_arg1);
#line 2843
  return;
}
}
#line 2845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_231(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2850
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2852
  mutex_unlock(ldv_func_arg1);
#line 2853
  return;
}
}
#line 2855 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_232(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2860
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2862
  mutex_unlock(ldv_func_arg1);
#line 2863
  return;
}
}
#line 2865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_233(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2870
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2872
  mutex_lock(ldv_func_arg1);
#line 2873
  return;
}
}
#line 2875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_234(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2880
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2882
  mutex_unlock(ldv_func_arg1);
#line 2883
  return;
}
}
#line 2885 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_235(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2890
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2892
  mutex_lock(ldv_func_arg1);
#line 2893
  return;
}
}
#line 2895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_236(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2900
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 2902
  mutex_unlock(ldv_func_arg1);
#line 2903
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_drbd_main_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_drbd_main_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_drbd_main_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_drbd_main_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_drbd_main_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_drbd_main_mutex = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_lock  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_lock == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_lock = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_lock == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_lock = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_lock == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_lock = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_lock == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_lock = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_lock == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_lock = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_lock == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_lock == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_lock = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mutex_of_device = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mutex_of_device = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mutex_of_device = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mutex_of_device = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mutex_of_device = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mutex_of_device == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mutex_of_device = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 918
  return;
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 928
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 928
    ldv_error();
  }
#line 931
  nondetermined = ldv_undef_int();
#line 934
  if (nondetermined) {
#line 937
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 939
    return (0);
  } else {
#line 944
    return (-4);
  }
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 954
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 954
    ldv_error();
  }
#line 957
  nondetermined = ldv_undef_int();
#line 960
  if (nondetermined) {
#line 963
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 965
    return (0);
  } else {
#line 970
    return (-4);
  }
}
}
#line 975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 978
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 978
    ldv_error();
  }
#line 980
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 981
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 989
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 989
    ldv_error();
  }
#line 992
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 995
  if (is_mutex_held_by_another_thread) {
#line 998
    return (0);
  } else {
#line 1003
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1005
    return (1);
  }
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 1015
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1015
    ldv_error();
  }
#line 1018
  atomic_value_after_dec = ldv_undef_int();
#line 1021
  if (atomic_value_after_dec == 0) {
#line 1024
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1026
    return (1);
  } else {

  }
#line 1030
  return (0);
}
}
#line 1035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1039
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 1042
    nondetermined = ldv_undef_int();
#line 1045
    if (nondetermined) {
#line 1048
      return (0);
    } else {
#line 1053
      return (1);
    }
  } else {
#line 1059
    return (1);
  }
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 1067
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 1067
    ldv_error();
  }
#line 1069
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1070
  return;
}
}
#line 1074 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 1077
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 1079
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 1081
  ldv_mutex_drbd_main_mutex = 1;
#line 1083
  ldv_mutex_lock = 1;
#line 1085
  ldv_mutex_mutex_of_device = 1;
#line 1087
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 1089
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1090
  return;
}
}
#line 1093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 1096
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 1096
    ldv_error();
  }
#line 1098
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 1098
    ldv_error();
  }
#line 1100
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 1100
    ldv_error();
  }
#line 1102
  if (ldv_mutex_lock == 1) {

  } else {
#line 1102
    ldv_error();
  }
#line 1104
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 1104
    ldv_error();
  }
#line 1106
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 1106
    ldv_error();
  }
#line 1108
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1108
    ldv_error();
  }
#line 1109
  return;
}
}
