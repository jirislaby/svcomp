/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 15 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_off_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 33 "include/uapi/linux/types.h"
typedef __u16 __be16;
#line 35 "include/uapi/linux/types.h"
typedef __u32 __be32;
#line 40 "include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 19 "include/linux/types.h"
typedef __u32 nlink_t;
#line 20 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 106 "include/linux/types.h"
typedef __u8 uint8_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 111 "include/linux/types.h"
typedef __u64 uint64_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 176 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 176 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 181 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 181 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 182 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 187
struct hlist_node;
#line 187 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 191 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 202 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 54
struct net_device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 351 "include/linux/kernel.h"
struct pid;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_2023_8 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_2023_8 ldv_2023 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_2030_10 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_9 {
   s64 lock ;
   struct __anonstruct_ldv_2030_10 ldv_2030 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_9 arch_rwlock_t;
#line 34
struct task_struct;
#line 35
struct lockdep_map;
#line 18 "include/linux/lockdep.h"
struct mm_struct;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2147_12 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2162_13 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2163_11 {
   struct __anonstruct_ldv_2147_12 ldv_2147 ;
   struct __anonstruct_ldv_2162_13 ldv_2162 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2163_11 ldv_2163 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_15 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_15 pgd_t;
#line 282
struct page;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 335
struct thread_struct;
#line 337
struct cpumask;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2766_18 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2766_18 ldv_2766 ;
};
#line 96 "include/linux/bug.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/special_insns.h"
struct exec_domain;
#line 26 "include/linux/personality.h"
struct map_segment;
#line 26 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5121_23 {
   u64 rip ;
   u64 rdp ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5127_24 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5128_22 {
   struct __anonstruct_ldv_5121_23 ldv_5121 ;
   struct __anonstruct_ldv_5127_24 ldv_5127 ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5137_25 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5128_22 ldv_5128 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5137_25 ldv_5137 ;
};
#line 352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 378 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 390 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 398 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 445
struct kmem_cache;
#line 446
struct perf_event;
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5956_29 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5957_28 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5956_29 ldv_5956 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5957_28 ldv_5957 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_30 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_30 rwlock_t;
#line 23 "include/linux/rwlock_types.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct timespec;
#line 101
struct compat_timespec;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_futex_32 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_nanosleep_33 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 102
struct pollfd;
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct __anonstruct_poll_34 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
union __anonunion_ldv_6252_31 {
   struct __anonstruct_futex_32 futex ;
   struct __anonstruct_nanosleep_33 nanosleep ;
   struct __anonstruct_poll_34 poll ;
};
#line 102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_6252_31 ldv_6252 ;
};
#line 52 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 394 "include/linux/spinlock.h"
struct vm_area_struct;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 313 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 105 "include/linux/debugobjects.h"
struct tvec_base;
#line 106 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 11 "include/linux/wait.h"
struct __wait_queue;
#line 11 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 14 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 649 "include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_100 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_100 nodemask_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 721 "include/linux/mmzone.h"
struct rw_semaphore;
#line 722 "include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 189 "include/linux/rcupdate.h"
struct notifier_block;
#line 269 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 855 "include/linux/mmzone.h"
struct ctl_table;
#line 345 "include/linux/irq.h"
struct proc_dir_entry;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 85 "include/linux/list_nulls.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 64 "include/linux/miscdevice.h"
struct sock;
#line 65
struct kobject;
#line 66
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 72 "include/linux/miscdevice.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25
struct iommu_group;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 247 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 301
struct class_attribute;
#line 301 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 396 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 449 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 476 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 568 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 578
struct dma_coherent_mem;
#line 578 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 703 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 1076 "include/linux/device.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};
#line 35 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 40
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 46 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 457 "include/linux/rculist.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 38 "include/linux/uio.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 88
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112
struct address_space;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14687_130 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14697_134 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14699_133 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14697_134 ldv_14697 ;
   int units ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14701_132 {
   union __anonunion_ldv_14699_133 ldv_14699 ;
   atomic_t _count ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14702_131 {
   unsigned long counters ;
   struct __anonstruct_ldv_14701_132 ldv_14701 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14703_129 {
   union __anonunion_ldv_14687_130 ldv_14687 ;
   union __anonunion_ldv_14702_131 ldv_14702 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14710_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 113
struct slab;
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14716_137 {
   struct kmem_cache *slab_cache ;
   struct slab *slab_page ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14717_135 {
   struct list_head lru ;
   struct __anonstruct_ldv_14710_136 ldv_14710 ;
   struct list_head list ;
   struct __anonstruct_ldv_14716_137 ldv_14716 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14722_138 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 113 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_14703_129 ldv_14703 ;
   union __anonunion_ldv_14717_135 ldv_14717 ;
   union __anonunion_ldv_14722_138 ldv_14722 ;
   unsigned long debug_flags ;
};
#line 170 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 218 "include/linux/mm_types.h"
struct __anonstruct_linear_140 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 218 "include/linux/mm_types.h"
union __anonunion_shared_139 {
   struct __anonstruct_linear_140 linear ;
   struct list_head nonlinear ;
};
#line 218
struct anon_vma;
#line 218
struct vm_operations_struct;
#line 218
struct mempolicy;
#line 218 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_139 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 278 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 284 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 297 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 310
struct linux_binfmt;
#line 310
struct mmu_notifier_mm;
#line 310 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   struct uprobes_state uprobes_state ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 1689 "include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 17 "include/asm-generic/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 37 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 1024 "include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 11 "include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18
struct cred;
#line 23 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 24 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 38 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_142 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_142 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_143 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_143 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_144 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_144 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_145 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_145 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_146 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_146 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_147 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_147 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_148 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_148 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_149 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_149 ifs_ifsu ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_150 {
   char ifrn_name[16U] ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_151 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_150 ifr_ifrn ;
   union __anonunion_ifr_ifru_151 ifr_ifru ;
};
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 91 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_18528_154 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_18530_153 {
   struct __anonstruct_ldv_18528_154 ldv_18528 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_18530_153 ldv_18530 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_155 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_155 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 419 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 217 "include/linux/capability.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
struct percpu_rw_semaphore {
   unsigned int *counters ;
   bool locked ;
   struct mutex mtx ;
};
#line 82 "include/linux/percpu-rwsem.h"
struct bio_set;
#line 83
struct bio;
#line 84
struct bio_integrity_payload;
#line 85
struct block_device;
#line 86
struct io_context;
#line 87
struct cgroup_subsys_state;
#line 19 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 21 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 30 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   struct bio_integrity_payload *bi_integrity ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 57
struct hd_geometry;
#line 58
struct kiocb;
#line 59
struct pipe_inode_info;
#line 60
struct poll_table_struct;
#line 61
struct kstatfs;
#line 62
struct swap_info_struct;
#line 64 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 240 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_19689_157 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_19689_157 ldv_19689 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 339 "include/linux/fs.h"
union __anonunion_arg_159 {
   char *buf ;
   void *data ;
};
#line 339 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_158 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_159 arg ;
   int error ;
};
#line 339 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_158 read_descriptor_t;
#line 342 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 401
struct backing_dev_info;
#line 402 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 423
struct request_queue;
#line 424
struct hd_struct;
#line 424
struct gendisk;
#line 424 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
   struct percpu_rw_semaphore bd_block_size_semaphore ;
};
#line 498
struct posix_acl;
#line 499
struct inode_operations;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_20124_160 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 499 "include/linux/fs.h"
union __anonunion_ldv_20144_161 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 499
struct file_lock;
#line 499
struct cdev;
#line 499 "include/linux/fs.h"
union __anonunion_ldv_20160_162 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 499 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_20124_160 ldv_20124 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_20144_161 ldv_20144 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_20160_162 ldv_20160 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 727 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 735 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 758 "include/linux/fs.h"
union __anonunion_f_u_163 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 758 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_163 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 901
struct files_struct;
#line 901 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 902 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 907 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 919
struct net;
#line 924
struct nlm_lockowner;
#line 925 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_165 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_164 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_165 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_164 fl_u ;
};
#line 1011 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1217 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1233
struct file_system_type;
#line 1233
struct super_operations;
#line 1233
struct xattr_handler;
#line 1233
struct mtd_info;
#line 1233 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1474 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1512
struct block_device_operations;
#line 1513 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1548 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1595 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1808 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_166 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_166 sigset_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 177 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_169 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_170 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_171 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_172 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_173 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_174 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_167 {
   int _pad[28U] ;
   struct __anonstruct__kill_168 _kill ;
   struct __anonstruct__timer_169 _timer ;
   struct __anonstruct__rt_170 _rt ;
   struct __anonstruct__sigchld_171 _sigchld ;
   struct __anonstruct__sigfault_172 _sigfault ;
   struct __anonstruct__sigpoll_173 _sigpoll ;
   struct __anonstruct__sigsys_174 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_167 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 460 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837
struct ctl_table_header;
#line 838
struct ctl_dir;
#line 39 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 59 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 98 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 119 "include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 124 "include/linux/sysctl.h"
struct __anonstruct_ldv_23730_178 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 124 "include/linux/sysctl.h"
union __anonunion_ldv_23732_177 {
   struct __anonstruct_ldv_23730_178 ldv_23730 ;
   struct callback_head rcu ;
};
#line 124
struct ctl_table_set;
#line 124 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_23732_177 ldv_23732 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};
#line 145 "include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 151 "include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set * ) ;
   struct ctl_dir dir ;
};
#line 156 "include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct signal_struct;
#line 36
struct key_type;
#line 38
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23811_179 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_23820_180 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_181 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_182 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_23811_179 ldv_23811 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_23820_180 ldv_23820 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_181 type_data ;
   union __anonunion_payload_182 payload ;
};
#line 322
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct callback_head rcu ;
};
#line 92 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 358
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 111 "include/linux/sched.h"
struct cfs_rq;
#line 112
struct task_group;
#line 347
struct kioctx;
#line 348 "include/linux/sched.h"
union __anonunion_ki_obj_183 {
   void *user ;
   struct task_struct *tsk ;
};
#line 348
struct eventfd_ctx;
#line 348 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_183 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 368 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 420 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 428 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 435 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 452 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 488
struct autogroup;
#line 489
struct tty_struct;
#line 489
struct taskstats;
#line 489
struct tty_audit_buf;
#line 489 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 664 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 708
struct reclaim_state;
#line 709 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 724 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1024
struct uts_namespace;
#line 1025
struct rq;
#line 1026 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1092 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1097 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1132 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1158
struct rt_rq;
#line 1158 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1181
struct mem_cgroup;
#line 1181 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1544
struct css_set;
#line 1544
struct compat_robust_list_head;
#line 1544 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 220 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 224 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 74 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/archrandom.h"
enum ldv_22048 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/uapi/linux/net.h"
typedef enum ldv_22048 socket_state;
#line 70 "include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};
#line 93 "include/linux/net.h"
struct proto_ops;
#line 93 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 119 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 133 "include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 69 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 76 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 116 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   unsigned int mask ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned long data[4U] ;
};
#line 126 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 315 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 316
struct sec_path;
#line 316 "include/linux/skbuff.h"
struct __anonstruct_ldv_28226_201 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28227_200 {
   __wsum csum ;
   struct __anonstruct_ldv_28226_201 ldv_28226 ;
};
#line 316 "include/linux/skbuff.h"
union __anonunion_ldv_28265_202 {
   __u32 mark ;
   __u32 dropcount ;
   __u32 avail_size ;
};
#line 316 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_28227_200 ldv_28227 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char pfmemalloc : 1 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   unsigned char head_frag : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_28265_202 ldv_28265 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 528
struct dst_entry;
#line 563
struct rtable;
#line 2658 "include/linux/skbuff.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 35 "include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 65 "include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 105 "include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 120 "include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 128 "include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 137 "include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 166 "include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 183 "include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 281 "include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 303 "include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 331 "include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 382 "include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 404 "include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 425 "include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 458 "include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 474 "include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 494 "include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 505 "include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 511 "include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 536 "include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 670 "include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 678 "include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 754 "include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 44 "include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 79 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_ts_info)(struct net_device * , struct ethtool_ts_info * ) ;
   int (*get_module_info)(struct net_device * , struct ethtool_modinfo * ) ;
   int (*get_module_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_eee)(struct net_device * , struct ethtool_eee * ) ;
   int (*set_eee)(struct net_device * , struct ethtool_eee * ) ;
};
#line 249
struct prot_inuse;
#line 250 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[92U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 74 "include/net/inet_frag.h"
struct tcpm_hash_bucket;
#line 75
struct ipv4_devconf;
#line 76
struct fib_rules_ops;
#line 77
struct fib_table;
#line 78
struct inet_peer_base;
#line 78
struct xt_table;
#line 78 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct inet_peer_base *peers ;
   struct tcpm_hash_bucket *tcp_metrics_hash ;
   unsigned int tcp_metrics_hash_log ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   kgid_t sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 77 "include/net/netns/ipv4.h"
struct neighbour;
#line 77 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , struct sock * , struct sk_buff * , u32  ) ;
   void (*redirect)(struct dst_entry * , struct sock * , struct sk_buff * ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , struct sk_buff * ,
                                     void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 73 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 31 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 31
struct rt6_info;
#line 31
struct rt6_statistics;
#line 31
struct fib6_table;
#line 31 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 72 "include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};
#line 80
struct sctp_mib;
#line 81 "include/net/netns/ipv6.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics[1U] ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 130 "include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 104 "include/linux/in.h"
union __anonunion_in6_u_205 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 104 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_205 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 326 "include/linux/netfilter.h"
struct nlattr;
#line 341
struct ebt_table;
#line 342 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 32 "include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};
#line 23 "include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 28 "include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};
#line 42 "include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};
#line 47 "include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};
#line 52 "include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};
#line 63
struct ip_conntrack_stat;
#line 63
struct nf_ct_event_notifier;
#line 63
struct nf_exp_event_notifier;
#line 63 "include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   struct nf_ip_net nf_ct_proto ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
};
#line 486 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct sock *diag_nlsk ;
   atomic_t rt_genid ;
};
#line 115 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 34 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 330 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_setmaxrate)(struct net_device * , struct ieee_maxrate * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 103 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct callback_head callback_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154 "include/linux/idr.h"
struct xattr_handler {
   char const   *prefix ;
   int flags ;
   size_t (*list)(struct dentry * , char * , size_t  , char const   * , size_t  ,
                  int  ) ;
   int (*get)(struct dentry * , char const   * , void * , size_t  , int  ) ;
   int (*set)(struct dentry * , char const   * , void const   * , size_t  , int  ,
              int  ) ;
};
#line 53 "include/linux/xattr.h"
struct simple_xattrs {
   struct list_head head ;
   spinlock_t lock ;
};
#line 98
struct cgroupfs_root;
#line 99
struct cgroup_subsys;
#line 100
struct cgroup;
#line 101
struct css_id;
#line 62 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
   struct work_struct dput_work ;
};
#line 147 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head files ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head allcg_node ;
   struct list_head cft_q_node ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct callback_head callback_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct simple_xattrs xattrs ;
};
#line 220 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct callback_head callback_head ;
};
#line 264 "include/linux/cgroup.h"
struct cgroup_map_cb {
   int (*fill)(struct cgroup_map_cb * , char const   * , u64  ) ;
   void *state ;
};
#line 274 "include/linux/cgroup.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct simple_xattrs xattrs ;
   int (*open)(struct inode * , struct file * ) ;
   ssize_t (*read)(struct cgroup * , struct cftype * , struct file * , char * , size_t  ,
                   loff_t * ) ;
   u64 (*read_u64)(struct cgroup * , struct cftype * ) ;
   s64 (*read_s64)(struct cgroup * , struct cftype * ) ;
   int (*read_map)(struct cgroup * , struct cftype * , struct cgroup_map_cb * ) ;
   int (*read_seq_string)(struct cgroup * , struct cftype * , struct seq_file * ) ;
   ssize_t (*write)(struct cgroup * , struct cftype * , struct file * , char const   * ,
                    size_t  , loff_t * ) ;
   int (*write_u64)(struct cgroup * , struct cftype * , u64  ) ;
   int (*write_s64)(struct cgroup * , struct cftype * , s64  ) ;
   int (*write_string)(struct cgroup * , struct cftype * , char const   * ) ;
   int (*trigger)(struct cgroup * , unsigned int  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*register_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ,
                         char const   * ) ;
   void (*unregister_event)(struct cgroup * , struct cftype * , struct eventfd_ctx * ) ;
};
#line 391 "include/linux/cgroup.h"
struct cftype_set {
   struct list_head node ;
   struct cftype *cfts ;
};
#line 440
struct cgroup_taskset;
#line 450 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   bool __DEPRECATED_clear_css_refs ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   char const   *name ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct list_head cftsets ;
   struct cftype *base_cftypes ;
   struct cftype_set base_cftset ;
   struct module *module ;
};
#line 642 "include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 3031
struct mnt_namespace;
#line 3032
struct ipc_namespace;
#line 3033 "include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns ;
   struct net *net_ns ;
};
#line 40 "include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 117 "include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 77 "include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr  const  *nlh ;
   int (*dump)(struct sk_buff * , struct netlink_callback * ) ;
   int (*done)(struct netlink_callback * ) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};
#line 137 "include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 39 "include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 423 "include/uapi/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 26 "include/linux/if_link.h"
struct netpoll_info;
#line 27
struct phy_device;
#line 28
struct wireless_dev;
#line 29
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 111 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 130 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 193
struct neigh_parms;
#line 213 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 218 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 247 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 339
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 387 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 388 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 496
struct Qdisc;
#line 496 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 560 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 572 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 584 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 636 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 646 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 659 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 670 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 681 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 697 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * , gfp_t  ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
   int (*ndo_fdb_add)(struct ndmsg * , struct nlattr ** , struct net_device * , unsigned char const   * ,
                      u16  ) ;
   int (*ndo_fdb_del)(struct ndmsg * , struct net_device * , unsigned char const   * ) ;
   int (*ndo_fdb_dump)(struct sk_buff * , struct netlink_callback * , struct net_device * ,
                       int  ) ;
};
#line 1013
struct iw_handler_def;
#line 1013
struct iw_public_data;
#line 1013
struct vlan_info;
#line 1013
struct in_device;
#line 1013
struct dn_dev;
#line 1013
struct inet6_dev;
#line 1013
struct cpu_rmap;
#line 1013
struct pcpu_lstats;
#line 1013
struct pcpu_tstats;
#line 1013
struct pcpu_dstats;
#line 1013 "include/linux/netdevice.h"
union __anonunion_ldv_35518_214 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1013
struct garp_port;
#line 1013
struct rtnl_link_ops;
#line 1013 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_35518_214 ldv_35518 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
   int group ;
   struct pm_qos_request pm_qos_req ;
};
#line 402 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 228 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 19 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct callback_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 89 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
};
#line 133
struct neigh_table;
#line 133 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38363_219 {
   unsigned long expires ;
   struct dst_entry *from ;
};
#line 406
struct dn_route;
#line 406 "include/net/neighbour.h"
union __anonunion_ldv_38388_220 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 406 "include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   union __anonunion_ldv_38363_219 ldv_38363 ;
   struct dst_entry *path ;
   void *__pad0 ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_38388_220 ldv_38388 ;
};
#line 123 "include/net/sock.h"
struct __anonstruct_socket_lock_t_221 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 123 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_221 socket_lock_t;
#line 123
struct proto;
#line 124 "include/net/sock.h"
union __anonunion_ldv_38603_222 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_38611_223 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 124 "include/net/sock.h"
union __anonunion_ldv_38618_224 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 124 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_38603_222 ldv_38603 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_38611_223 ldv_38611 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_38618_224 ldv_38618 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 190
struct cg_proto;
#line 191 "include/net/sock.h"
struct __anonstruct_sk_backlog_225 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 191 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_225 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 840
struct request_sock_ops;
#line 841
struct timewait_sock_ops;
#line 842
struct inet_hashinfo;
#line 843
struct raw_hashinfo;
#line 844
struct udp_table;
#line 844 "include/net/sock.h"
union __anonunion_h_226 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 844 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*release_cb)(struct sock * ) ;
   void (*mtu_reduced)(struct sock * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_226 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct mem_cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 970 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_39979_227 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_39979_227 ldv_39979 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 129 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 138 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 151 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 177 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 191 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 196 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 215 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 230 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 247 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 256 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 262 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 271 "include/linux/crypto.h"
union __anonunion_cra_u_228 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 271 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_228 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 325 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 345 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 360 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 369 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 377 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 389 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 396 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 404 "include/linux/crypto.h"
union __anonunion_crt_u_229 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 404 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_229 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 433 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 437 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 453 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 457 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 371 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 97 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};
#line 151 "include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 158
struct disk_events;
#line 159
struct timer_rand_state;
#line 159
struct blk_integrity;
#line 159 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 71 "include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 81
struct bdi_writeback;
#line 39 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 48 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 65 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_43418_236 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 77 "include/linux/mempool.h"
union __anonunion_ldv_43422_237 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 77 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_43418_236 ldv_43418 ;
   union __anonunion_ldv_43422_237 ldv_43422 ;
   unsigned int flags ;
};
#line 92 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 91 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 296 "include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_pool ;
};
#line 415 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 22 "include/linux/bsg.h"
struct elevator_queue;
#line 25
struct request;
#line 27
struct bsg_job;
#line 28
struct blkcg_gq;
#line 47 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 48 "include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};
#line 67
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_43869_238 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_elv_240 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 79 "include/linux/blkdev.h"
struct __anonstruct_flush_241 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 79 "include/linux/blkdev.h"
union __anonunion_ldv_43880_239 {
   struct __anonstruct_elv_240 elv ;
   struct __anonstruct_flush_241 flush ;
};
#line 79 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_43869_238 ldv_43869 ;
   union __anonunion_ldv_43880_239 ldv_43880 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , struct bio * ,
                                gfp_t  );
#line 33 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 35 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 37 "include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue * );
#line 38 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 39 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 69 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 77 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 98 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 217 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 219 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 220 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 221 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 229 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 231 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 232 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 233 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 234 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 235
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 242 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 248 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 257 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 286
struct throtl_data;
#line 286 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct list_head all_q_node ;
   struct throtl_data *td ;
};
#line 952 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1299 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1331 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1332 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1333 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1334 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1335 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1394 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 160 "include/uapi/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 732 "include/net/ipv6.h"
union __anonunion_ldv_46535_248 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 732 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_46535_248 ldv_46535 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_46550_249 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_46555_251 {
   atomic_t rid ;
   atomic_t ip_id_count ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_46558_250 {
   struct __anonstruct_ldv_46555_251 ldv_46555 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_ldv_46550_249 ldv_46550 ;
   union __anonunion_ldv_46558_250 ldv_46558 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 61 "include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   u32 flush_seq ;
   int total ;
};
#line 50 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
};
#line 316 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1716 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 717 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 725 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 759 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_49189_254 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 764 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_49189_254 ldv_49189 ;
};
#line 789
enum drbd_flag {
    CREATE_BARRIER = 0,
    SIGNAL_ASENDER = 1,
    SEND_PING = 2,
    UNPLUG_REMOTE = 3,
    MD_DIRTY = 4,
    DISCARD_CONCURRENT = 5,
    USE_DEGR_WFC_T = 6,
    CLUSTER_ST_CHANGE = 7,
    CL_ST_CHG_SUCCESS = 8,
    CL_ST_CHG_FAIL = 9,
    CRASHED_PRIMARY = 10,
    CONSIDER_RESYNC = 11,
    MD_NO_FUA = 12,
    SUSPEND_IO = 13,
    BITMAP_IO = 14,
    BITMAP_IO_QUEUED = 15,
    GO_DISKLESS = 16,
    WAS_IO_ERROR = 17,
    WAS_READ_ERROR = 18,
    FORCE_DETACH = 19,
    RESYNC_AFTER_NEG = 20,
    NET_CONGESTED = 21,
    CONFIG_PENDING = 22,
    DEVICE_DYING = 23,
    RESIZE_PENDING = 24,
    CONN_DRY_RUN = 25,
    GOT_PING_ACK = 26,
    NEW_CUR_UUID = 27,
    AL_SUSPENDED = 28,
    AHEAD_TO_SYNC_SOURCE = 29,
    STATE_SENT = 30,
    CALLBACK_PENDING = 31,
    DISCONNECT_SENT = 32,
    DRBD_N_FLAGS = 33
} ;
#line 826
struct drbd_bitmap;
#line 827
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 15,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_IS_LOCKED = 8,
    BM_LOCKED_TEST_ALLOWED = 11,
    BM_LOCKED_SET_ALLOWED = 9,
    BM_LOCKED_CHANGE_ALLOWED = 8
} ;
#line 839 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 915 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   spinlock_t uuid_lock ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
   int disk_timeout ;
};
#line 39 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 81 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 153 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 950 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   unsigned int done ;
   int error ;
};
#line 955 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 963
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 969 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 975 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long drbd_flags[1U] ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct list_head barrier_acked_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_stop_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   unsigned long last_reattach_jif ;
   unsigned long last_reconnect_jif ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct drbd_md_io md_io ;
   atomic_t md_io_in_use ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   unsigned int peer_max_bio_size ;
   unsigned int local_max_bio_size ;
};
#line 1212
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 1881
enum drbd_force_detach_flags {
    DRBD_READ_ERROR = 0,
    DRBD_WRITE_ERROR = 1,
    DRBD_META_IO_ERROR = 2,
    DRBD_FORCE_DETACH = 3
} ;
#line 2557 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 958 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   unsigned int done ;
   unsigned int flags ;
   int error ;
   struct kref kref ;
};
#line 1783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___2;
#line 1895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
typedef int ldv_func_ret_type___13;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 157 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 306 "include/linux/bitmap.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 215 "include/linux/kobject.h"
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13726_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13726_134 ldv_13726 ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 67 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 459 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 72
struct exception_table_entry;
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1341 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
typedef int ldv_func_ret_type___6;
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   unsigned long start_time ;
};
#line 753 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    abort_disk_io = 22,
    completed_ok = 23,
    resend = 24,
    fail_frozen_disk_io = 25,
    restart_frozen_disk_io = 26,
    nothing = 27
} ;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 37 "include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 746
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1220
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1589
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 187 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_255 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_255 updates[62U] ;
   u32 xor_sum ;
};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 64 "include/uapi/linux/net.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum sanitize_state_warnings {
    NO_WARNING = 0,
    ABORTED_ONLINE_VERIFY = 1,
    ABORTED_RESYNC = 2,
    CONNECTION_LOST_NEGOTIATING = 3,
    IMPLICITLY_UPGRADED_DISK = 4,
    IMPLICITLY_UPGRADED_PDSK = 5
} ;
#line 3910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 32 "include/uapi/linux/types.h"
typedef __u16 __le16;
#line 34 "include/uapi/linux/types.h"
typedef __u32 __le32;
#line 36 "include/uapi/linux/types.h"
typedef __u64 __le64;
#line 255 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   int wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 84 "include/linux/nsproxy.h"
struct scm_creds {
   u32 pid ;
   kuid_t uid ;
   kgid_t gid ;
};
#line 17 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct scm_creds creds ;
   __u32 portid ;
   __u32 dst_group ;
   struct sock *ssk ;
};
#line 2228 "include/net/sock.h"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/uapi/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TOO_SMALL = 111,
    ERR_MD_DISK_TOO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 929 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 22 "include/linux/drbd_nl.h"
struct detach {
   unsigned char detach_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 77 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 111 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 139 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
   __u64 stop_sector ;
};
#line 148 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_disk_timeout = 89,
    T_detach_force = 41048,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_stop_sector = 24666,
    T_clear_bm = 41023
} ;
#line 115 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 70
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 72
  return;
}
}
#line 100 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 109
  return;
}
}
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 201
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 204
  return (oldbit);
}
}
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 233
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 237
  return (oldbit);
}
}
#line 275 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 279
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 283
  return (oldbit);
}
}
#line 318 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 320
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 324 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 328
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 333
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.pushsection .altinstructions,\"a\"\n .long 661b - .\n .long 6631f - .\n .word (4*32+23)\n .byte 662b-661b\n .byte 6641f-6631f\n.popsection\n.pushsection .discard,\"aw\",@progbits\n .byte 0xff + (6641f-6631f) - (662b-661b)\n.popsection\n.pushsection .altinstr_replacement, \"ax\"\n6631:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n6641:\n\t.popsection": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 87 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 89
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 89
  return (tmp);
}
}
#line 92 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 94
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 94
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 53 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2860;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2860;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2860;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2860;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2860: ;
#line 14
  return (pfo_ret__);
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 71 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_and_test(int i , atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 81
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %2,%0; sete %1": "+m" (v->counter),
                       "=qm" (c): "ir" (i): "memory");
#line 84
  return ((int )c);
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddb %b0, %1\n": "+q" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5470;
  case 2UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5470;
  case 4UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5470;
  case 8UL: 
#line 182
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5470;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5470: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 171
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) ;
#line 175
int ldv_mutex_trylock_15(struct mutex *ldv_func_arg1 ) ;
#line 177
extern void mutex_unlock(struct mutex * ) ;
#line 180
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_14(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) ;
#line 7 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
extern void mutex_lock(struct mutex * ) ;
#line 10
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) ;
#line 39
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 40
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 43
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) ;
#line 47
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 51
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) ;
#line 63
void ldv_mutex_lock_lock(struct mutex *lock ) ;
#line 67
void ldv_mutex_unlock_lock(struct mutex *lock ) ;
#line 71
void ldv_mutex_lock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) ;
#line 75
void ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) ;
#line 79
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) ;
#line 80
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) ;
#line 83
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) ;
#line 87
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 91
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 206 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6275;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6275;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6275;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6275;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_6275: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5957.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5957.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5957.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5957.rlock, flags);
#line 341
  return;
}
}
#line 62 "include/linux/vmalloc.h"
extern void *__vmalloc(unsigned long  , gfp_t  , pgprot_t  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 77 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 63 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 139
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 568
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 570
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 573
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 323 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 326 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 328
  tmp = alloc_pages_current(gfp_mask, order);
#line 328
  return (tmp);
}
}
#line 359
extern void __free_pages(struct page * , unsigned int  ) ;
#line 64 "include/linux/kref.h"
__inline static int kref_sub(struct kref *kref , unsigned int count , void (*release)(struct kref * ) ) 
{ 
  int __ret_warn_on ;
  long tmp ;
  int tmp___0 ;

  {
#line 67
  __ret_warn_on = (unsigned long )release == (unsigned long )((void (*)(struct kref * ))0);
#line 67
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 67
  if (tmp != 0L) {
#line 67
    warn_slowpath_null("include/linux/kref.h", 67);
  } else {

  }
#line 67
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 69
  tmp___0 = atomic_sub_and_test((int )count, & kref->refcount);
#line 69
  if (tmp___0 != 0) {
#line 70
    (*release)(kref);
#line 71
    return (1);
  } else {

  }
#line 73
  return (0);
}
}
#line 93 "include/linux/kref.h"
__inline static int kref_put(struct kref *kref , void (*release)(struct kref * ) ) 
{ 
  int tmp ;

  {
#line 95
  tmp = kref_sub(kref, 1U, release);
#line 95
  return (tmp);
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 917 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 921
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 923
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 927
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 741 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 743
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2355 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 324 "include/linux/sched.h"
extern void schedule(void) ;
#line 2596
extern int _cond_resched(void) ;
#line 185 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 220 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 267 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 282
  tmp___2 = __kmalloc(size, flags);
#line 282
  return (tmp___2);
}
}
#line 375 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 377
  tmp = kmalloc(size, flags | 32768U);
#line 377
  return (tmp);
}
}
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  pagefault_disable();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 75
  pagefault_enable();
#line 76
  return;
}
}
#line 34 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 35
extern void mempool_free(void * , mempool_t * ) ;
#line 216 "include/linux/bio.h"
extern void bio_put(struct bio * ) ;
#line 244
extern void bio_endio(struct bio * , int  ) ;
#line 251
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 1033 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1149 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_flag(struct drbd_conf *mdev , enum drbd_flag f ) 
{ 


  {
#line 1151
  set_bit((unsigned int )f, (unsigned long volatile   *)(& mdev->drbd_flags));
#line 1152
  return;
}
}
#line 1159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_test_flag(struct drbd_conf *mdev , enum drbd_flag f ) 
{ 
  int tmp ;

  {
#line 1161
  tmp = variable_test_bit((int )f, (unsigned long const volatile   *)(& mdev->drbd_flags));
#line 1161
  return (tmp);
}
}
#line 1243
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1339
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1340
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1483
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1484
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1485
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1486
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1487
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1489
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1491
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1493
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1497
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1499
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1500
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1501
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1502
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1503
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1504
int drbd_bm_write_all(struct drbd_conf *mdev ) ;
#line 1505
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) ;
#line 1506
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1508
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1509
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1510
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1513
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1515
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1516
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1517
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1518
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1521
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1524
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1527
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1528
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1562
mempool_t *drbd_md_io_page_pool ;
#line 1568
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) ;
#line 1570
rwlock_t global_state_lock ;
#line 1587
char *ppsize(char *buf , unsigned long long size ) ;
#line 1612
void wait_until_done_or_force_detached(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                       unsigned int *done ) ;
#line 1853 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1858
  _raw_read_lock(& global_state_lock);
#line 1859
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1860
  _raw_read_unlock(& global_state_lock);
#line 1862
  return (rv);
}
}
#line 1890 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1894
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1896
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1897
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1897
    if (tmp != 0) {
#line 1898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1899
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1900
      __ns.i = mdev->state.i;
#line 1900
      __ns.ldv_39979.disk = 4U;
#line 1900
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1901
    goto ldv_50254;
  } else {

  }
  case 2: ;
  case 1: 
#line 1926
  drbd_set_flag(mdev, WAS_IO_ERROR);
#line 1927
  if ((unsigned int )df == 0U) {
#line 1928
    drbd_set_flag(mdev, WAS_READ_ERROR);
  } else {

  }
#line 1929
  if ((unsigned int )df == 3U) {
#line 1930
    drbd_set_flag(mdev, FORCE_DETACH);
  } else {

  }
#line 1931
  if ((int )mdev->state.ldv_39979.disk > 2) {
#line 1932
    __ns___0.i = mdev->state.i;
#line 1932
    __ns___0.ldv_39979.disk = 2U;
#line 1932
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1936
  goto ldv_50254;
  }
  ldv_50254: ;
#line 1939
  return;
}
}
#line 1949 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1952
  if (error != 0) {
#line 1954
    tmp = spinlock_check(& mdev->req_lock);
#line 1954
    flags = _raw_spin_lock_irqsave(tmp);
#line 1955
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1956
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1958
  return;
}
}
#line 1984 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1986
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1989
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1992
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2247 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2249
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2249
  i = tmp;
#line 2255
  if (i < 0) {
#line 2255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2255);
  } else {

  }
#line 2256
  if (i == 0) {
#line 2257
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2259
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2260
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2262
      drbd_go_diskless(mdev);
    } else {

    }
#line 2263
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2265
  return;
}
}
#line 2268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2273
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2274
    return (0);
  } else {

  }
#line 2276
  atomic_inc(& mdev->local_cnt);
#line 2277
  io_allowed = (unsigned int )mdev->state.ldv_39979.disk >= (unsigned int )mins;
#line 2278
  if (io_allowed == 0) {
#line 2279
    put_ldev(mdev);
  } else {

  }
#line 2280
  return (io_allowed);
}
}
#line 2544 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2548
  tmp = drbd_test_flag(mdev, MD_NO_FUA);
#line 2548
  if (tmp != 0) {
#line 2549
    return;
  } else {

  }
#line 2551
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 16U, 0);
#line 2552
  if (r != 0) {
#line 2553
    drbd_set_flag(mdev, MD_NO_FUA);
#line 2554
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2556
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 189
  b = mdev->bitmap;
#line 190
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 190
  if (tmp == 0) {
#line 191
    return;
  } else {

  }
#line 192
  tmp___9 = get_current();
#line 192
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 192
    tmp___7 = get_current();
#line 192
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 192
      tmp___5 = get_current();
#line 192
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 192
        tmp___3 = get_current();
#line 192
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 192
        tmp___4 = (char *)"worker";
      }
#line 192
      tmp___6 = tmp___4;
    } else {
#line 192
      tmp___6 = (char *)"asender";
    }
#line 192
    tmp___8 = tmp___6;
  } else {
#line 192
    tmp___8 = (char *)"receiver";
  }
#line 192
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 198
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 204
  b = mdev->bitmap;
#line 207
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 209
    return;
  } else {

  }
#line 212
  tmp = ldv_mutex_trylock_15(& b->bm_change);
#line 212
  trylock_failed = tmp == 0;
#line 214
  if (trylock_failed != 0) {
#line 215
    tmp___9 = get_current();
#line 215
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 215
      tmp___7 = get_current();
#line 215
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 215
        tmp___5 = get_current();
#line 215
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 215
          tmp___3 = get_current();
#line 215
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 215
          tmp___4 = (char *)"worker";
        }
#line 215
        tmp___6 = tmp___4;
      } else {
#line 215
        tmp___6 = (char *)"asender";
      }
#line 215
      tmp___8 = tmp___6;
    } else {
#line 215
      tmp___8 = (char *)"receiver";
    }
#line 215
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 223
    ldv_mutex_lock_16(& b->bm_change);
  } else {

  }
#line 225
  if (((unsigned int )b->bm_flags & 15U) != 0U) {
#line 226
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 227
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 15U));
#line 229
  b->bm_why = why;
#line 230
  b->bm_task = get_current();
#line 231
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 235
  b = mdev->bitmap;
#line 236
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 237
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 238
    return;
  } else {

  }
#line 241
  if (((unsigned int )(mdev->bitmap)->bm_flags & 15U) == 0U) {
#line 242
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 244
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967280U);
#line 245
  b->bm_why = 0;
#line 246
  b->bm_task = 0;
#line 247
  ldv_mutex_unlock_17(& b->bm_change);
#line 248
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 278
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 278
  if (tmp != 0L) {
#line 278
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (278), "i" (12UL));
    ldv_50525: ;
#line 278
    goto ldv_50525;
  } else {

  }
#line 279
  page->ldv_14722.private = idx;
#line 280
  return;
}
}
#line 282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 284
  return (page->ldv_14722.private & 16777215UL);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 292
  b = mdev->bitmap;
#line 293
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_14722.private);
#line 294
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 294
  if (tmp == 0) {
#line 294
    goto ldv_50535;
  } else {

  }
#line 294
  tmp___0 = get_current();
#line 294
  __wait.flags = 0U;
#line 294
  __wait.private = (void *)tmp___0;
#line 294
  __wait.func = & autoremove_wake_function;
#line 294
  __wait.task_list.next = & __wait.task_list;
#line 294
  __wait.task_list.prev = & __wait.task_list;
  ldv_50538: 
#line 294
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 294
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 294
  if (tmp___1 == 0) {
#line 294
    goto ldv_50537;
  } else {

  }
#line 294
  schedule();
#line 294
  goto ldv_50538;
  ldv_50537: 
#line 294
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_50535: ;
#line 297
  return;
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 299
  b = mdev->bitmap;
#line 300
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_14722.private);
#line 301
  clear_bit(31, (unsigned long volatile   *)addr);
#line 302
  __asm__  volatile   ("": : : "memory");
#line 303
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 304
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 311
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 312
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 313
  return;
}
}
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 317
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 318
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 322
  addr = (unsigned long const volatile   *)(& page->ldv_14722.private);
#line 323
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 326 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 328
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 329
  return;
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 333
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 334
  return;
}
}
#line 336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 338
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_14722.private));
#line 339
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 343
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_14722.private));
#line 343
  return (tmp);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 350
  page_nr = (unsigned int )(long_nr >> 9);
#line 351
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 351
  if (tmp != 0L) {
#line 351
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (351), "i" (12UL));
    ldv_50572: ;
#line 351
    goto ldv_50572;
  } else {

  }
#line 352
  return (page_nr);
}
}
#line 355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 358
  page_nr = (unsigned int )(bitnr >> 15);
#line 359
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 359
  if (tmp != 0L) {
#line 359
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (359), "i" (12UL));
    ldv_50578: ;
#line 359
    goto ldv_50578;
  } else {

  }
#line 360
  return (page_nr);
}
}
#line 363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 365
  page = *(b->bm_pages + (unsigned long )idx);
#line 366
  tmp = kmap_atomic(page);
#line 366
  return ((unsigned long *)tmp);
}
}
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 371
  tmp = __bm_map_pidx(b, idx);
#line 371
  return (tmp);
}
}
#line 374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 376
  __kunmap_atomic((void *)p_addr);
#line 377
  return;
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 381
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 407
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 408
    return;
  } else {

  }
#line 410
  i = 0UL;
#line 410
  goto ldv_50601;
  ldv_50600: ;
#line 411
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 412
    printk("\tdrbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 415
    goto ldv_50599;
  } else {

  }
#line 417
  __free_pages(*(pages + i), 0U);
#line 418
  *(pages + i) = 0;
  ldv_50599: 
#line 410
  i = i + 1UL;
  ldv_50601: ;
#line 410
  if (i < number) {
#line 411
    goto ldv_50600;
  } else {

  }

#line 415
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 424
  if (v != 0) {
#line 425
    vfree((void const   *)ptr);
  } else {
#line 427
    kfree((void const   *)ptr);
  }
#line 428
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  pgprot_t __constr_expr_0 ;
  void *tmp___4 ;

  {
#line 435
  old_pages = b->bm_pages;
#line 437
  vmalloced = 0U;
#line 438
  have = b->bm_number_of_pages;
#line 440
  tmp = __builtin_expect(have == 0UL, 0L);
#line 440
  if (tmp != 0L) {
#line 440
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 440
    if (tmp___0 != 0L) {
#line 440
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (440), "i" (12UL));
      ldv_50618: ;
#line 440
      goto ldv_50618;
    } else {

    }
  } else {

  }
#line 441
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 441
  if (tmp___1 != 0L) {
#line 441
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 441
    if (tmp___2 != 0L) {
#line 441
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (441), "i" (12UL));
      ldv_50619: ;
#line 441
      goto ldv_50619;
    } else {

    }
  } else {

  }
#line 443
  if (have == want) {
#line 444
    return (old_pages);
  } else {

  }
#line 451
  bytes = (unsigned int )want * 8U;
#line 452
  tmp___3 = kzalloc((size_t )bytes, 16U);
#line 452
  new_pages = (struct page **)tmp___3;
#line 453
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 454
    __constr_expr_0.pgprot = 0x8000000000000163UL;
#line 454
    tmp___4 = __vmalloc((unsigned long )bytes, 32786U, __constr_expr_0);
#line 454
    new_pages = (struct page **)tmp___4;
#line 457
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 458
      return (0);
    } else {

    }
#line 459
    vmalloced = 1U;
  } else {

  }
#line 462
  if (want >= have) {
#line 463
    i = 0U;
#line 463
    goto ldv_50622;
    ldv_50621: 
#line 464
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 463
    i = i + 1U;
    ldv_50622: ;
#line 463
    if ((unsigned long )i < have) {
#line 464
      goto ldv_50621;
    } else {

    }

#line 465
    goto ldv_50625;
    ldv_50624: 
#line 466
    page = alloc_pages(18U, 0U);
#line 467
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 468
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 469
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 470
      return (0);
    } else {

    }
#line 474
    bm_store_page_idx(page, (unsigned long )i);
#line 475
    *(new_pages + (unsigned long )i) = page;
#line 465
    i = i + 1U;
    ldv_50625: ;
#line 465
    if ((unsigned long )i < want) {
#line 466
      goto ldv_50624;
    } else {

    }

  } else {
#line 478
    i = 0U;
#line 478
    goto ldv_50628;
    ldv_50627: 
#line 479
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 478
    i = i + 1U;
    ldv_50628: ;
#line 478
    if ((unsigned long )i < want) {
#line 479
      goto ldv_50627;
    } else {

    }

  }
#line 485
  if (vmalloced != 0U) {
#line 486
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 488
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 490
  return (new_pages);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 499
  b = mdev->bitmap;
#line 500
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 500
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 500
  if (tmp != 0L) {
#line 500
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       500);
  } else {

  }
#line 500
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 501
  tmp___0 = kzalloc(400UL, 208U);
#line 501
  b = (struct drbd_bitmap *)tmp___0;
#line 502
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 503
    return (-12);
  } else {

  }
#line 504
  spinlock_check(& b->bm_lock);
#line 504
  __raw_spin_lock_init(& b->bm_lock.ldv_5957.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 505
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 506
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 508
  mdev->bitmap = b;
#line 510
  return (0);
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 515
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 515
  if (_b != 0) {
#line 515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            515);
  } else {

  }
#line 515
  if (_b != 0) {
#line 515
    return (0UL);
  } else {

  }
#line 516
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 523
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 523
  if (_b != 0) {
#line 523
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            523);
  } else {

  }
#line 523
  if (_b != 0) {
#line 523
    return;
  } else {

  }
#line 524
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 525
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 526
  kfree((void const   *)mdev->bitmap);
#line 527
  mdev->bitmap = 0;
#line 528
  return;
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 543
  cleared = 0;
#line 546
  tmp = (int )b->bm_bits & 32767;
#line 548
  mask = (1UL << (tmp & 63)) - 1UL;
#line 551
  mask = mask;
#line 553
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 554
  bm = p_addr + (unsigned long )(tmp / 64);
#line 555
  if (mask != 0UL) {
#line 560
    tmp___0 = hweight_long(*bm & ~ mask);
#line 560
    cleared = (int )tmp___0;
#line 561
    *bm = *bm & mask;
#line 562
    bm = bm + 1;
  } else {

  }
#line 571
  bm_unmap(p_addr);
#line 572
  return (cleared);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 582
  tmp = (int )b->bm_bits & 32767;
#line 584
  mask = (1UL << (tmp & 63)) - 1UL;
#line 587
  mask = mask;
#line 589
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 590
  bm = p_addr + (unsigned long )(tmp / 64);
#line 591
  if (mask != 0UL) {
#line 596
    *bm = *bm | ~ mask;
#line 597
    bm = bm + 1;
  } else {

  }
#line 605
  bm_unmap(p_addr);
#line 606
  return;
}
}
#line 610 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 613
  bits = 0UL;
#line 614
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 618
  idx = 0;
#line 618
  goto ldv_50680;
  ldv_50679: 
#line 619
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 620
  i = 0;
#line 620
  goto ldv_50676;
  ldv_50675: 
#line 621
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 621
  bits = tmp + bits;
#line 620
  i = i + 1;
  ldv_50676: ;
#line 620
  if ((unsigned int )i <= 511U) {
#line 621
    goto ldv_50675;
  } else {

  }
#line 622
  __bm_unmap(p_addr);
#line 623
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                623, 0);
#line 623
  _cond_resched();
#line 618
  idx = idx + 1;
  ldv_50680: ;
#line 618
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 619
    goto ldv_50679;
  } else {

  }
#line 626
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 627
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 628
  i = 0;
#line 628
  goto ldv_50683;
  ldv_50682: 
#line 629
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 629
  bits = tmp___0 + bits;
#line 628
  i = i + 1;
  ldv_50683: ;
#line 628
  if (i < last_word) {
#line 629
    goto ldv_50682;
  } else {

  }
#line 630
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 631
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 631
  bits = tmp___1 + bits;
#line 635
  __bm_unmap(p_addr);
#line 636
  return (bits);
}
}
#line 640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 646
  end = offset + len;
#line 648
  if (b->bm_words < end) {
#line 649
    printk("\tdrbd: bm_memset end > bm_words\n");
#line 650
    return;
  } else {

  }
#line 653
  goto ldv_50700;
  ldv_50699: 
#line 654
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 654
  __min2 = end;
#line 654
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 655
  idx = bm_word_to_page_idx(b, offset);
#line 656
  p_addr = bm_map_pidx(b, idx);
#line 657
  bm = p_addr + (offset & 511UL);
#line 658
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 659
    printk("\tdrbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 662
    memset((void *)bm, c, do_now * 8UL);
  }
#line 663
  bm_unmap(p_addr);
#line 664
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 665
  offset = offset + do_now;
  ldv_50700: ;
#line 653
  if (offset < end) {
#line 654
    goto ldv_50699;
  } else {

  }

#line 658
  return;
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 679
  b = mdev->bitmap;
#line 682
  opages = 0;
#line 683
  err = 0;
#line 686
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 686
  if (_b != 0) {
#line 686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            686);
  } else {

  }
#line 686
  if (_b != 0) {
#line 686
    return (-12);
  } else {

  }
#line 688
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 690
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 693
  if (b->bm_dev_capacity == capacity) {
#line 694
    goto out;
  } else {

  }
#line 696
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 698
  if (capacity == 0UL) {
#line 699
    spin_lock_irq(& b->bm_lock);
#line 700
    opages = b->bm_pages;
#line 701
    onpages = b->bm_number_of_pages;
#line 702
    owords = b->bm_words;
#line 703
    b->bm_pages = 0;
#line 704
    tmp___2 = 0UL;
#line 704
    b->bm_dev_capacity = tmp___2;
#line 704
    tmp___1 = tmp___2;
#line 704
    b->bm_words = tmp___1;
#line 704
    tmp___0 = tmp___1;
#line 704
    b->bm_bits = tmp___0;
#line 704
    tmp = tmp___0;
#line 704
    b->bm_set = tmp;
#line 704
    b->bm_number_of_pages = tmp;
#line 709
    spin_unlock_irq(& b->bm_lock);
#line 710
    bm_free_pages(opages, onpages);
#line 711
    bm_vk_free((void *)opages, opages_vmalloced);
#line 712
    goto out;
  } else {

  }
#line 714
  bits = (capacity + 7UL) >> 3;
#line 721
  words = (bits + 63UL) >> 6;
#line 723
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 723
  if (tmp___3 != 0) {
#line 724
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 725
    put_ldev(mdev);
#line 726
    if ((unsigned long long )bits > bits_on_disk) {
#line 727
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 728
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 729
      err = -28;
#line 730
      goto out;
    } else {

    }
  } else {

  }
#line 734
  want = (words * 8UL + 4095UL) >> 12;
#line 735
  have = b->bm_number_of_pages;
#line 736
  if (want == have) {
#line 737
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 737
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
              737);
    } else {

    }
#line 738
    npages = b->bm_pages;
  } else {
#line 740
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 740
    if (tmp___4 != 0) {
#line 741
      npages = 0;
    } else {
#line 743
      npages = bm_realloc_pages(b, want);
    }
  }
#line 746
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 747
    err = -12;
#line 748
    goto out;
  } else {

  }
#line 751
  spin_lock_irq(& b->bm_lock);
#line 752
  opages = b->bm_pages;
#line 753
  owords = b->bm_words;
#line 754
  obits = b->bm_bits;
#line 756
  growing = bits > obits;
#line 757
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 758
    bm_set_surplus(b);
  } else {

  }
#line 760
  b->bm_pages = npages;
#line 761
  b->bm_number_of_pages = want;
#line 762
  b->bm_bits = bits;
#line 763
  b->bm_words = words;
#line 764
  b->bm_dev_capacity = capacity;
#line 766
  if (growing != 0) {
#line 767
    if (set_new_bits != 0) {
#line 768
      bm_memset(b, owords, 255, words - owords);
#line 769
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 771
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 775
  if (want < have) {
#line 777
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 780
  bm_clear_surplus(b);
#line 782
  spin_unlock_irq(& b->bm_lock);
#line 783
  if ((unsigned long )opages != (unsigned long )npages) {
#line 784
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 785
  if (growing == 0) {
#line 786
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 787
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 790
  drbd_bm_unlock(mdev);
#line 791
  return (err);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 804
  b = mdev->bitmap;
#line 808
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 808
  if (_b != 0) {
#line 808
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            808);
  } else {

  }
#line 808
  if (_b != 0) {
#line 808
    return (0UL);
  } else {

  }
#line 809
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 809
  if (_b___0 != 0) {
#line 809
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            809);
  } else {

  }
#line 809
  if (_b___0 != 0) {
#line 809
    return (0UL);
  } else {

  }
#line 811
  tmp = spinlock_check(& b->bm_lock);
#line 811
  flags = _raw_spin_lock_irqsave(tmp);
#line 812
  s = b->bm_set;
#line 813
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 815
  return (s);
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 822
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 822
  if (tmp == 0) {
#line 823
    return (0UL);
  } else {

  }
#line 824
  s = _drbd_bm_total_weight(mdev);
#line 825
  put_ldev(mdev);
#line 826
  return (s);
}
}
#line 829 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 831
  b = mdev->bitmap;
#line 832
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 832
  if (_b != 0) {
#line 832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            832);
  } else {

  }
#line 832
  if (_b != 0) {
#line 832
    return (0UL);
  } else {

  }
#line 833
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 833
  if (_b___0 != 0) {
#line 833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            833);
  } else {

  }
#line 833
  if (_b___0 != 0) {
#line 833
    return (0UL);
  } else {

  }
#line 835
  return (b->bm_words);
}
}
#line 838 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 840
  b = mdev->bitmap;
#line 841
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 841
  if (_b != 0) {
#line 841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            841);
  } else {

  }
#line 841
  if (_b != 0) {
#line 841
    return (0UL);
  } else {

  }
#line 843
  return (b->bm_bits);
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 854
  b = mdev->bitmap;
#line 860
  end = offset + number;
#line 862
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 862
  if (_b != 0) {
#line 862
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            862);
  } else {

  }
#line 862
  if (_b != 0) {
#line 862
    return;
  } else {

  }
#line 863
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 863
  if (_b___0 != 0) {
#line 863
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            863);
  } else {

  }
#line 863
  if (_b___0 != 0) {
#line 863
    return;
  } else {

  }
#line 864
  if (number == 0UL) {
#line 865
    return;
  } else {

  }
#line 866
  __ret_warn_on = b->bm_words <= offset;
#line 866
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 866
  if (tmp != 0L) {
#line 866
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       866);
  } else {

  }
#line 866
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 867
  __ret_warn_on___0 = b->bm_words < end;
#line 867
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 867
  if (tmp___0 != 0L) {
#line 867
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       867);
  } else {

  }
#line 867
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 869
  spin_lock_irq(& b->bm_lock);
#line 870
  goto ldv_50789;
  ldv_50788: 
#line 871
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 871
  __min2 = end;
#line 871
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 872
  idx = bm_word_to_page_idx(b, offset);
#line 873
  p_addr = bm_map_pidx(b, idx);
#line 874
  bm = p_addr + (offset & 511UL);
#line 875
  offset = offset + do_now;
#line 876
  goto ldv_50786;
  ldv_50785: 
#line 877
  bits = hweight_long(*bm);
#line 878
  tmp___1 = buffer;
#line 878
  buffer = buffer + 1;
#line 878
  word = *bm | *tmp___1;
#line 879
  tmp___2 = bm;
#line 879
  bm = bm + 1;
#line 879
  *tmp___2 = word;
#line 880
  tmp___3 = hweight_long(word);
#line 880
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_50786: 
#line 876
  tmp___4 = do_now;
#line 876
  do_now = do_now - (size_t )1;
#line 876
  if (tmp___4 != 0UL) {
#line 877
    goto ldv_50785;
  } else {

  }
#line 882
  bm_unmap(p_addr);
#line 883
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_50789: ;
#line 870
  if (offset < end) {
#line 871
    goto ldv_50788;
  } else {

  }

#line 890
  if (b->bm_words == end) {
#line 891
    tmp___5 = bm_clear_surplus(b);
#line 891
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 892
  spin_unlock_irq(& b->bm_lock);
#line 893
  return;
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 901
  b = mdev->bitmap;
#line 905
  end = offset + number;
#line 907
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 907
  if (_b != 0) {
#line 907
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            907);
  } else {

  }
#line 907
  if (_b != 0) {
#line 907
    return;
  } else {

  }
#line 908
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 908
  if (_b___0 != 0) {
#line 908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            908);
  } else {

  }
#line 908
  if (_b___0 != 0) {
#line 908
    return;
  } else {

  }
#line 910
  spin_lock_irq(& b->bm_lock);
#line 911
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 919
    goto ldv_50814;
    ldv_50813: 
#line 920
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 920
    __min2 = end;
#line 920
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 921
    tmp = bm_word_to_page_idx(b, offset);
#line 921
    p_addr = bm_map_pidx(b, tmp);
#line 922
    bm = p_addr + (offset & 511UL);
#line 923
    offset = offset + do_now;
#line 924
    goto ldv_50811;
    ldv_50810: 
#line 925
    tmp___0 = buffer;
#line 925
    buffer = buffer + 1;
#line 925
    tmp___1 = bm;
#line 925
    bm = bm + 1;
#line 925
    *tmp___0 = *tmp___1;
    ldv_50811: 
#line 924
    tmp___2 = do_now;
#line 924
    do_now = do_now - (size_t )1;
#line 924
    if (tmp___2 != 0UL) {
#line 925
      goto ldv_50810;
    } else {

    }
#line 926
    bm_unmap(p_addr);
    ldv_50814: ;
#line 919
    if (offset < end) {
#line 920
      goto ldv_50813;
    } else {

    }

  }
#line 929
  spin_unlock_irq(& b->bm_lock);
#line 930
  return;
}
}
#line 933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 935
  b = mdev->bitmap;
#line 936
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 936
  if (_b != 0) {
#line 936
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            936);
  } else {

  }
#line 936
  if (_b != 0) {
#line 936
    return;
  } else {

  }
#line 937
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 937
  if (_b___0 != 0) {
#line 937
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            937);
  } else {

  }
#line 937
  if (_b___0 != 0) {
#line 937
    return;
  } else {

  }
#line 939
  spin_lock_irq(& b->bm_lock);
#line 940
  bm_memset(b, 0UL, 255, b->bm_words);
#line 941
  bm_clear_surplus(b);
#line 942
  b->bm_set = b->bm_bits;
#line 943
  spin_unlock_irq(& b->bm_lock);
#line 944
  return;
}
}
#line 947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 949
  b = mdev->bitmap;
#line 950
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 950
  if (_b != 0) {
#line 950
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            950);
  } else {

  }
#line 950
  if (_b != 0) {
#line 950
    return;
  } else {

  }
#line 951
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 951
  if (_b___0 != 0) {
#line 951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            951);
  } else {

  }
#line 951
  if (_b___0 != 0) {
#line 951
    return;
  } else {

  }
#line 953
  spin_lock_irq(& b->bm_lock);
#line 954
  bm_memset(b, 0UL, 0, b->bm_words);
#line 955
  b->bm_set = 0UL;
#line 956
  spin_unlock_irq(& b->bm_lock);
#line 957
  return;
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_aio_ctx_destroy(struct kref *kref ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct kref  const  *__mptr ;

  {
#line 972
  __mptr = (struct kref  const  *)kref;
#line 972
  ctx = (struct bm_aio_ctx *)__mptr + 0xffffffffffffffe8UL;
#line 974
  put_ldev(ctx->mdev);
#line 975
  kfree((void const   *)ctx);
#line 976
  return;
}
}
#line 979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 981
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 982
  mdev = ctx->mdev;
#line 983
  b = mdev->bitmap;
#line 984
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 984
  idx = (unsigned int )tmp;
#line 985
  uptodate = (int )bio->bi_flags & 1;
#line 992
  if (error == 0 && uptodate == 0) {
#line 993
    error = -5;
  } else {

  }
#line 995
  if ((ctx->flags & 1U) == 0U) {
#line 995
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 995
    if (tmp___0 == 0) {
#line 997
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 999
  if (error != 0) {
#line 1002
    ctx->error = error;
#line 1003
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 1006
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 1006
    if (tmp___1 != 0) {
#line 1007
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 1010
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 1011
    descriptor.modname = "drbd";
#line 1011
    descriptor.function = "bm_async_io_complete";
#line 1011
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1011
    descriptor.format = "bitmap page idx %u completed\n";
#line 1011
    descriptor.lineno = 1011U;
#line 1011
    descriptor.flags = 0U;
#line 1011
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1011
    if (tmp___2 != 0L) {
#line 1011
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 1014
  bm_page_unlock_io(mdev, (int )idx);
#line 1016
  if ((int )ctx->flags & 1) {
#line 1017
    mempool_free((void *)(bio->bi_io_vec)->bv_page, drbd_md_io_page_pool);
  } else {

  }
#line 1019
  bio_put(bio);
#line 1021
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 1021
  if (tmp___3 != 0) {
#line 1022
    ctx->done = 1U;
#line 1023
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1024
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  } else {

  }
#line 1026
  return;
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  void *tmp___1 ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;

  {
#line 1030
  tmp = bio_alloc_drbd(16U);
#line 1030
  bio = tmp;
#line 1031
  mdev = ctx->mdev;
#line 1032
  b = mdev->bitmap;
#line 1036
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 1038
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 1043
  __min1 = 4096U;
#line 1043
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 1043
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 1043
  len = __min1 < __min2 ? __min1 : __min2;
#line 1047
  bm_page_lock_io(mdev, page_nr);
#line 1050
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 1052
  if ((int )ctx->flags & 1) {
#line 1054
    tmp___1 = mempool_alloc(drbd_md_io_page_pool, 18U);
#line 1054
    page = (struct page *)tmp___1;
#line 1055
    dest = kmap_atomic(page);
#line 1056
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1057
    __len = 4096UL;
#line 1057
    if (__len > 63UL) {
#line 1057
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 1057
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 1058
    __kunmap_atomic(src);
#line 1059
    __kunmap_atomic(dest);
#line 1060
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 1062
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 1064
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 1065
  bio->bi_sector = on_disk_sector;
#line 1068
  bio_add_page(bio, page, len, 0U);
#line 1069
  bio->bi_private = (void *)ctx;
#line 1070
  bio->bi_end_io = & bm_async_io_complete;
#line 1072
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 1072
  if (tmp___2 != 0) {
#line 1073
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 1074
    bio_endio(bio, -5);
  } else {
#line 1076
    submit_bio(rw, bio);
#line 1079
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1081
  return;
}
}
#line 1086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int flags , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  void *tmp ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___0 ;
  int __ret_warn_on ;
  long tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;
  struct _ddebug descriptor___0 ;
  long tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char *tmp___8 ;

  {
#line 1089
  b = mdev->bitmap;
#line 1090
  count = 0;
#line 1093
  err = 0;
#line 1104
  tmp = kmalloc(32UL, 16U);
#line 1104
  ctx = (struct bm_aio_ctx *)tmp;
#line 1105
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1106
    return (-12);
  } else {

  }
#line 1108
  __constr_expr_0.mdev = mdev;
#line 1108
  __constr_expr_0.in_flight.counter = 1;
#line 1108
  __constr_expr_0.done = 0U;
#line 1108
  __constr_expr_0.flags = flags;
#line 1108
  __constr_expr_0.error = 0;
#line 1108
  __constr_expr_0.kref.refcount.counter = 2;
#line 1108
  *ctx = __constr_expr_0;
#line 1117
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1117
  if (tmp___0 == 0) {
#line 1118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in bm_rw()\n");
#line 1119
    kfree((void const   *)ctx);
#line 1120
    return (-19);
  } else {

  }
#line 1123
  if (ctx->flags == 0U) {
#line 1124
    __ret_warn_on = ((unsigned int )b->bm_flags & 15U) == 0U;
#line 1124
    tmp___1 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1124
    if (tmp___1 != 0L) {
#line 1124
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1124);
    } else {

    }
#line 1124
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1126
  num_pages = (int )b->bm_number_of_pages;
#line 1128
  now = jiffies;
#line 1131
  i = 0;
#line 1131
  goto ldv_50901;
  ldv_50900: ;
#line 1133
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1134
    goto ldv_50894;
  } else {

  }
#line 1135
  if (rw & 1) {
#line 1136
    if ((flags & 2U) == 0U) {
#line 1136
      tmp___3 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1136
      if (tmp___3 != 0) {
#line 1138
        descriptor.modname = "drbd";
#line 1138
        descriptor.function = "bm_rw";
#line 1138
        descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1138
        descriptor.format = "skipped bm write for idx %u\n";
#line 1138
        descriptor.lineno = 1138U;
#line 1138
        descriptor.flags = 0U;
#line 1138
        tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1138
        if (tmp___2 != 0L) {
#line 1138
          __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm write for idx %u\n", i);
        } else {

        }
#line 1139
        goto ldv_50897;
      } else {

      }
    } else {

    }
#line 1143
    if (lazy_writeout_upper_idx != 0U) {
#line 1143
      tmp___5 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1143
      if (tmp___5 == 0) {
#line 1145
        descriptor___0.modname = "drbd";
#line 1145
        descriptor___0.function = "bm_rw";
#line 1145
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1145
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1145
        descriptor___0.lineno = 1145U;
#line 1145
        descriptor___0.flags = 0U;
#line 1145
        tmp___4 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1145
        if (tmp___4 != 0L) {
#line 1145
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1146
        goto ldv_50897;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1149
  atomic_inc(& ctx->in_flight);
#line 1150
  bm_page_io_async(ctx, i, rw);
#line 1151
  count = count + 1;
#line 1152
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1152, 0);
#line 1152
  _cond_resched();
  ldv_50897: 
#line 1131
  i = i + 1;
  ldv_50901: ;
#line 1131
  if (i < num_pages) {
#line 1132
    goto ldv_50900;
  } else {

  }
  ldv_50894: 
#line 1163
  tmp___6 = atomic_dec_and_test(& ctx->in_flight);
#line 1163
  if (tmp___6 == 0) {
#line 1164
    wait_until_done_or_force_detached(mdev, mdev->ldev, & ctx->done);
  } else {
#line 1166
    kref_put(& ctx->kref, & bm_aio_ctx_destroy);
  }
#line 1168
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1172
  if (ctx->error != 0) {
#line 1173
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1174
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "bm_rw");
#line 1175
    err = -5;
  } else {

  }
#line 1178
  tmp___7 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1178
  if (tmp___7 != 0) {
#line 1179
    err = -5;
  } else {

  }
#line 1181
  now = jiffies;
#line 1182
  if (rw == 1) {
#line 1183
    drbd_md_flush(mdev);
  } else {
#line 1185
    b->bm_set = bm_count_bits(b);
#line 1186
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1189
  now = b->bm_set;
#line 1191
  tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1191
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___8, now);
#line 1194
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1195
  return (err);
}
}
#line 1202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1204
  tmp = bm_rw(mdev, 0, 0U, 0U);
#line 1204
  return (tmp);
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1215
  tmp = bm_rw(mdev, 1, 0U, 0U);
#line 1215
  return (tmp);
}
}
#line 1224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1226
  tmp = bm_rw(mdev, 1, 2U, 0U);
#line 1226
  return (tmp);
}
}
#line 1234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1236
  tmp = bm_rw(mdev, 1, 1U, upper_idx);
#line 1236
  return (tmp);
}
}
#line 1250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_copy_pages(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1252
  tmp = bm_rw(mdev, 1, 1U, 0U);
#line 1252
  return (tmp);
}
}
#line 1268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx *ctx ;
  int err ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct bm_aio_ctx __constr_expr_0 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1273
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1273
  if (tmp___0 != 0) {
#line 1274
    descriptor.modname = "drbd";
#line 1274
    descriptor.function = "drbd_bm_write_page";
#line 1274
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1274
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1274
    descriptor.lineno = 1274U;
#line 1274
    descriptor.flags = 0U;
#line 1274
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1274
    if (tmp != 0L) {
#line 1274
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1275
    return (0);
  } else {

  }
#line 1278
  tmp___1 = kmalloc(32UL, 16U);
#line 1278
  ctx = (struct bm_aio_ctx *)tmp___1;
#line 1279
  if ((unsigned long )ctx == (unsigned long )((struct bm_aio_ctx *)0)) {
#line 1280
    return (-12);
  } else {

  }
#line 1282
  __constr_expr_0.mdev = mdev;
#line 1282
  __constr_expr_0.in_flight.counter = 1;
#line 1282
  __constr_expr_0.done = 0U;
#line 1282
  __constr_expr_0.flags = 1U;
#line 1282
  __constr_expr_0.error = 0;
#line 1282
  __constr_expr_0.kref.refcount.counter = 2;
#line 1282
  *ctx = __constr_expr_0;
#line 1291
  tmp___2 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1291
  if (tmp___2 == 0) {
#line 1292
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in drbd_bm_write_page()\n");
#line 1293
    kfree((void const   *)ctx);
#line 1294
    return (-19);
  } else {

  }
#line 1297
  bm_page_io_async(ctx, (int )idx, 1041);
#line 1298
  wait_until_done_or_force_detached(mdev, mdev->ldev, & ctx->done);
#line 1300
  if (ctx->error != 0) {
#line 1301
    drbd_chk_io_error_(mdev, 1, DRBD_META_IO_ERROR, "drbd_bm_write_page");
  } else {

  }
#line 1305
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1306
  tmp___3 = atomic_read((atomic_t const   *)(& ctx->in_flight));
#line 1306
  err = tmp___3 == 0 ? ctx->error : -5;
#line 1307
  kref_put(& ctx->kref, & bm_aio_ctx_destroy);
#line 1308
  return (err);
}
}
#line 1319 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1322
  b = mdev->bitmap;
#line 1328
  if (b->bm_bits < bm_fo) {
#line 1329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1330
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1332
    goto ldv_50939;
    ldv_50938: 
#line 1334
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1335
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1335
    p_addr = __bm_map_pidx(b, tmp);
#line 1337
    if ((int )find_zero_bit != 0) {
#line 1338
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1338
      i = (unsigned int )tmp___0;
    } else {
#line 1341
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1341
      i = (unsigned int )tmp___1;
    }
#line 1344
    __bm_unmap(p_addr);
#line 1345
    if (i <= 32767U) {
#line 1346
      bm_fo = (unsigned long )i + bit_offset;
#line 1347
      if (b->bm_bits <= bm_fo) {
#line 1348
        goto ldv_50936;
      } else {

      }
#line 1349
      goto found;
    } else {

    }
#line 1351
    bm_fo = bit_offset + 32768UL;
    ldv_50939: ;
#line 1332
    if (b->bm_bits > bm_fo) {
#line 1333
      goto ldv_50938;
    } else {

    }
    ldv_50936: 
#line 1353
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1356
  return (bm_fo);
}
}
#line 1359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1362
  b = mdev->bitmap;
#line 1363
  i = 0xffffffffffffffffUL;
#line 1365
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1365
  if (_b != 0) {
#line 1365
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1365);
  } else {

  }
#line 1365
  if (_b != 0) {
#line 1365
    return (i);
  } else {

  }
#line 1366
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1366
  if (_b___0 != 0) {
#line 1366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1366);
  } else {

  }
#line 1366
  if (_b___0 != 0) {
#line 1366
    return (i);
  } else {

  }
#line 1368
  spin_lock_irq(& b->bm_lock);
#line 1369
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1370
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1372
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1374
  spin_unlock_irq(& b->bm_lock);
#line 1375
  return (i);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1380
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1380
  return (tmp);
}
}
#line 1393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1396
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1396
  return (tmp);
}
}
#line 1399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1402
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1402
  return (tmp);
}
}
#line 1411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1414
  b = mdev->bitmap;
#line 1415
  p_addr = 0;
#line 1417
  last_page_nr = 4294967295U;
#line 1418
  c = 0;
#line 1419
  changed_total = 0;
#line 1421
  if (b->bm_bits <= e) {
#line 1422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1424
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1426
  bitnr = s;
#line 1426
  goto ldv_50978;
  ldv_50977: 
#line 1427
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1427
  page_nr = tmp;
#line 1428
  if (page_nr != last_page_nr) {
#line 1429
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1430
      __bm_unmap(p_addr);
    } else {

    }
#line 1431
    if (c < 0) {
#line 1432
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1433
    if (c > 0) {
#line 1434
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1435
    changed_total = changed_total + c;
#line 1436
    c = 0;
#line 1437
    p_addr = __bm_map_pidx(b, page_nr);
#line 1438
    last_page_nr = page_nr;
  } else {

  }
#line 1440
  if (val != 0) {
#line 1441
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1441
    c = (tmp___0 == 0) + c;
  } else {
#line 1443
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1443
    c = c - (tmp___1 != 0);
  }
#line 1426
  bitnr = bitnr + 1UL;
  ldv_50978: ;
#line 1426
  if (bitnr <= e) {
#line 1427
    goto ldv_50977;
  } else {

  }

#line 1445
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1446
    __bm_unmap(p_addr);
  } else {

  }
#line 1447
  if (c < 0) {
#line 1448
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1449
  if (c > 0) {
#line 1450
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1451
  changed_total = changed_total + c;
#line 1452
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1453
  return (changed_total);
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1464
  b = mdev->bitmap;
#line 1465
  c = 0;
#line 1467
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1467
  if (_b != 0) {
#line 1467
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1467);
  } else {

  }
#line 1467
  if (_b != 0) {
#line 1467
    return (1);
  } else {

  }
#line 1468
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1468
  if (_b___0 != 0) {
#line 1468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1468);
  } else {

  }
#line 1468
  if (_b___0 != 0) {
#line 1468
    return (0);
  } else {

  }
#line 1470
  tmp = spinlock_check(& b->bm_lock);
#line 1470
  flags = _raw_spin_lock_irqsave(tmp);
#line 1471
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1472
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1474
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1476
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1477
  return (c);
}
}
#line 1481 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1483
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1483
  return (tmp);
}
}
#line 1487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1489
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1489
  return (- tmp);
}
}
#line 1494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1499
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1499
  paddr = (unsigned long *)tmp;
#line 1500
  i = first_word;
#line 1500
  goto ldv_51017;
  ldv_51016: 
#line 1501
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1501
  bits = (int )tmp___0;
#line 1502
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1503
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1500
  i = i + 1;
  ldv_51017: ;
#line 1500
  if (i < last_word) {
#line 1501
    goto ldv_51016;
  } else {

  }
#line 1505
  __kunmap_atomic((void *)paddr);
#line 1506
  return;
}
}
#line 1513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1523
  b = mdev->bitmap;
#line 1524
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1525
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1532
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1534
    spin_lock_irq(& b->bm_lock);
#line 1535
    __bm_change_bits_to(mdev, s, e, 1);
#line 1536
    spin_unlock_irq(& b->bm_lock);
#line 1537
    return;
  } else {

  }
#line 1542
  spin_lock_irq(& b->bm_lock);
#line 1545
  if (sl != 0UL) {
#line 1546
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1548
  first_page = (int )(sl >> 15);
#line 1549
  last_page = (int )(el >> 15);
#line 1553
  first_word = (int )(sl >> 6) & 511;
#line 1554
  last_word = 512;
#line 1557
  page_nr = first_page;
#line 1557
  goto ldv_51034;
  ldv_51033: 
#line 1558
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1559
  spin_unlock_irq(& b->bm_lock);
#line 1560
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1560, 0);
#line 1560
  _cond_resched();
#line 1561
  first_word = 0;
#line 1562
  spin_lock_irq(& b->bm_lock);
#line 1557
  page_nr = page_nr + 1;
  ldv_51034: ;
#line 1557
  if (page_nr < last_page) {
#line 1558
    goto ldv_51033;
  } else {

  }
#line 1565
  last_word = (int )(el >> 6) & 511;
#line 1573
  if (last_word != 0) {
#line 1574
    bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
  } else {

  }
#line 1581
  if (el <= (unsigned long )e) {
#line 1582
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1583
  spin_unlock_irq(& b->bm_lock);
#line 1584
  return;
}
}
#line 1593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1596
  b = mdev->bitmap;
#line 1600
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1600
  if (_b != 0) {
#line 1600
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1600);
  } else {

  }
#line 1600
  if (_b != 0) {
#line 1600
    return (0);
  } else {

  }
#line 1601
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1601
  if (_b___0 != 0) {
#line 1601
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1601);
  } else {

  }
#line 1601
  if (_b___0 != 0) {
#line 1601
    return (0);
  } else {

  }
#line 1603
  tmp = spinlock_check(& b->bm_lock);
#line 1603
  flags = _raw_spin_lock_irqsave(tmp);
#line 1604
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1605
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1606
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1607
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1607
    p_addr = bm_map_pidx(b, tmp___0);
#line 1608
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1608
    i = tmp___1 != 0;
#line 1609
    bm_unmap(p_addr);
  } else
#line 1610
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1611
    i = -1;
  } else {
#line 1613
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1614
    i = 0;
  }
#line 1617
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1618
  return (i);
}
}
#line 1622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1625
  b = mdev->bitmap;
#line 1626
  p_addr = 0;
#line 1628
  page_nr = 4294967295U;
#line 1629
  c = 0;
#line 1635
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1635
  if (_b != 0) {
#line 1635
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1635);
  } else {

  }
#line 1635
  if (_b != 0) {
#line 1635
    return (1);
  } else {

  }
#line 1636
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1636
  if (_b___0 != 0) {
#line 1636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1636);
  } else {

  }
#line 1636
  if (_b___0 != 0) {
#line 1636
    return (1);
  } else {

  }
#line 1638
  tmp = spinlock_check(& b->bm_lock);
#line 1638
  flags = _raw_spin_lock_irqsave(tmp);
#line 1639
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1640
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1641
  bitnr = s;
#line 1641
  goto ldv_51075;
  ldv_51074: 
#line 1642
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1642
  idx = tmp___0;
#line 1643
  if (page_nr != idx) {
#line 1644
    page_nr = idx;
#line 1645
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1646
      bm_unmap(p_addr);
    } else {

    }
#line 1647
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1649
  _b___1 = b->bm_bits <= bitnr;
#line 1649
  if (_b___1 != 0) {
#line 1649
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1649);
  } else {

  }
#line 1649
  if (_b___1 != 0) {
#line 1650
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1652
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1652
    c = (tmp___1 != 0) + c;
  }
#line 1641
  bitnr = bitnr + 1UL;
  ldv_51075: ;
#line 1641
  if (bitnr <= (unsigned long )e) {
#line 1642
    goto ldv_51074;
  } else {

  }

#line 1655
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1656
    bm_unmap(p_addr);
  } else {

  }
#line 1657
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1658
  return (c);
}
}
#line 1676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1678
  b = mdev->bitmap;
#line 1683
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1683
  if (_b != 0) {
#line 1683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1683);
  } else {

  }
#line 1683
  if (_b != 0) {
#line 1683
    return (0);
  } else {

  }
#line 1684
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1684
  if (_b___0 != 0) {
#line 1684
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1684);
  } else {

  }
#line 1684
  if (_b___0 != 0) {
#line 1684
    return (0);
  } else {

  }
#line 1686
  tmp = spinlock_check(& b->bm_lock);
#line 1686
  flags = _raw_spin_lock_irqsave(tmp);
#line 1687
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1688
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1690
  s = (int )(enr << 6);
#line 1691
  _min1 = (enr + 1UL) << 6;
#line 1691
  _min2 = b->bm_words;
#line 1691
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1692
  count = 0;
#line 1693
  if ((size_t )s < b->bm_words) {
#line 1694
    n = e - s;
#line 1695
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1695
    p_addr = bm_map_pidx(b, tmp___0);
#line 1696
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1697
    goto ldv_51101;
    ldv_51100: 
#line 1698
    tmp___1 = bm;
#line 1698
    bm = bm + 1;
#line 1698
    tmp___2 = hweight_long(*tmp___1);
#line 1698
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_51101: 
#line 1697
    tmp___3 = n;
#line 1697
    n = n - 1;
#line 1697
    if (tmp___3 != 0) {
#line 1698
      goto ldv_51100;
    } else {

    }
#line 1699
    bm_unmap(p_addr);
  } else {
#line 1701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1703
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1704
  return (count);
}
}
#line 1709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1711
  b = mdev->bitmap;
#line 1716
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1716
  if (_b != 0) {
#line 1716
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1716);
  } else {

  }
#line 1716
  if (_b != 0) {
#line 1716
    return (0UL);
  } else {

  }
#line 1717
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1717
  if (_b___0 != 0) {
#line 1717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1717);
  } else {

  }
#line 1717
  if (_b___0 != 0) {
#line 1717
    return (0UL);
  } else {

  }
#line 1719
  spin_lock_irq(& b->bm_lock);
#line 1720
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1721
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1722
  weight = b->bm_set;
#line 1724
  s = al_enr * 16UL;
#line 1725
  __min1 = s + 16UL;
#line 1725
  __min2 = b->bm_words;
#line 1725
  e = __min1 < __min2 ? __min1 : __min2;
#line 1727
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1727
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1728);
  } else {

  }
#line 1729
  count = 0;
#line 1730
  if (b->bm_words > s) {
#line 1731
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1731
    i = do_now;
#line 1732
    tmp = bm_word_to_page_idx(b, s);
#line 1732
    p_addr = bm_map_pidx(b, tmp);
#line 1733
    bm = p_addr + (s & 511UL);
#line 1734
    goto ldv_51125;
    ldv_51124: 
#line 1735
    tmp___0 = hweight_long(*bm);
#line 1735
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1736
    *bm = 0xffffffffffffffffUL;
#line 1737
    bm = bm + 1;
    ldv_51125: 
#line 1734
    tmp___1 = i;
#line 1734
    i = i - 1;
#line 1734
    if (tmp___1 != 0) {
#line 1735
      goto ldv_51124;
    } else {

    }
#line 1739
    bm_unmap(p_addr);
#line 1740
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1741
    if (b->bm_words == e) {
#line 1742
      tmp___2 = bm_clear_surplus(b);
#line 1742
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1746
  weight = b->bm_set - weight;
#line 1747
  spin_unlock_irq(& b->bm_lock);
#line 1748
  return (weight);
}
}
#line 1751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_1(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1756
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1758
  mutex_lock(ldv_func_arg1);
#line 1759
  return;
}
}
#line 1761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_2(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1766
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1768
  mutex_unlock(ldv_func_arg1);
#line 1769
  return;
}
}
#line 1771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_3(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1776
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1778
  mutex_lock(ldv_func_arg1);
#line 1779
  return;
}
}
#line 1781 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_4(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1786
  tmp = mutex_trylock(ldv_func_arg1);
#line 1786
  ldv_func_res = tmp;
#line 1788
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1788
  return (tmp___0);
#line 1790
  return (ldv_func_res);
}
}
#line 1793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_5(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1798
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1800
  mutex_unlock(ldv_func_arg1);
#line 1801
  return;
}
}
#line 1803 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_6(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1808
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1810
  mutex_lock(ldv_func_arg1);
#line 1811
  return;
}
}
#line 1813 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_7(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1818
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1820
  mutex_unlock(ldv_func_arg1);
#line 1821
  return;
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_8(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1828
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1830
  mutex_lock(ldv_func_arg1);
#line 1831
  return;
}
}
#line 1833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_9(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1838
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1840
  mutex_unlock(ldv_func_arg1);
#line 1841
  return;
}
}
#line 1843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_10(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1848
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1850
  mutex_lock(ldv_func_arg1);
#line 1851
  return;
}
}
#line 1853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_11(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1858
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1860
  mutex_unlock(ldv_func_arg1);
#line 1861
  return;
}
}
#line 1863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_12(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1868
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1870
  mutex_lock(ldv_func_arg1);
#line 1871
  return;
}
}
#line 1873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_13(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1878
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1880
  mutex_unlock(ldv_func_arg1);
#line 1881
  return;
}
}
#line 1883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_14(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1888
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1890
  mutex_unlock(ldv_func_arg1);
#line 1891
  return;
}
}
#line 1893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
int ldv_mutex_trylock_15(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___13 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1898
  tmp = mutex_trylock(ldv_func_arg1);
#line 1898
  ldv_func_res = tmp;
#line 1900
  tmp___0 = ldv_mutex_trylock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1900
  return (tmp___0);
#line 1902
  return (ldv_func_res);
}
}
#line 1905 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_lock_16(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1910
  ldv_mutex_lock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1912
  mutex_lock(ldv_func_arg1);
#line 1913
  return;
}
}
#line 1915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_mutex_unlock_17(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1920
  ldv_mutex_unlock_bm_change_of_drbd_bitmap(ldv_func_arg1);
#line 1922
  mutex_unlock(ldv_func_arg1);
#line 1923
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_42(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_46(struct mutex *ldv_func_arg1 ) ;
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 465 "include/linux/module.h"
extern bool try_module_get(struct module * ) ;
#line 467
extern void module_put(struct module * ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 84 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 85
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 92
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 125
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 126
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 292 "include/linux/backing-dev.h"
__inline static int bdi_rw_congested(struct backing_dev_info *bdi ) 
{ 
  int tmp ;

  {
#line 294
  tmp = bdi_congested(bdi, 12);
#line 294
  return (tmp);
}
}
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1178
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1180
  return (mdev);
}
}
#line 1575
int proc_details ;
#line 1722 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1723
struct file_operations  const  drbd_proc_fops ;
#line 2287 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2298
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2299
    *bits_left = mdev->ov_left;
  } else {
#line 2301
    tmp = drbd_bm_total_weight(mdev);
#line 2301
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2304
  if (*bits_left > mdev->rs_total) {
#line 2310
    __asm__  volatile   ("": : : "memory");
#line 2311
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39979.conn);
#line 2311
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2314
    *per_mil_done = 0U;
  } else {
#line 2325
    shift = mdev->rs_total > 4294967295UL ? 16U : 10U;
#line 2326
    left = *bits_left >> (int )shift;
#line 2327
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2328
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2329
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2331
  return;
}
}
#line 2417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2419
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 109
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 113
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 124
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 124
  if (tmp___0 != 0L) {
#line 126
    seq_printf(seq, "%ld,", v / 1000000L);
#line 127
    v = v % 1000000L;
#line 128
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 129
    tmp = __builtin_expect(v > 999L, 1L);
#line 129
    if (tmp != 0L) {
#line 130
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 132
      seq_printf(seq, "%ld", v);
    }
  }
#line 133
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;
  unsigned long long stop_sector ;

  {
#line 146
  stalled = 0;
#line 148
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 150
  x = (int )(res / 50U);
#line 151
  y = 20 - x;
#line 152
  seq_printf(seq, "\t[");
#line 153
  i = 1;
#line 153
  goto ldv_51360;
  ldv_51359: 
#line 154
  seq_printf(seq, "=");
#line 153
  i = i + 1;
  ldv_51360: ;
#line 153
  if (i < x) {
#line 154
    goto ldv_51359;
  } else {

  }
#line 155
  seq_printf(seq, ">");
#line 156
  i = 0;
#line 156
  goto ldv_51363;
  ldv_51362: 
#line 157
  seq_printf(seq, ".");
#line 156
  i = i + 1;
  ldv_51363: ;
#line 156
  if (i < y) {
#line 157
    goto ldv_51362;
  } else {

  }
#line 158
  seq_printf(seq, "] ");
#line 160
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 161
    seq_printf(seq, "verified:");
  } else {
#line 163
    seq_printf(seq, "sync\'ed:");
  }
#line 164
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 167
  if (mdev->rs_total > 1048576UL) {
#line 168
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 172
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 189
  i = (mdev->rs_last_mark + 2) % 8;
#line 190
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 191
  if (dt > 6000UL) {
#line 192
    stalled = 1;
  } else {

  }
#line 194
  if (dt == 0UL) {
#line 195
    dt = dt + 1UL;
  } else {

  }
#line 196
  db = mdev->rs_mark_left[i] - rs_left;
#line 197
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 199
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 202
  dbdt = db / dt << 2;
#line 203
  seq_printf(seq, " speed: ");
#line 204
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 205
  seq_printf(seq, " (");
#line 207
  if (proc_details > 0) {
#line 209
    i = (mdev->rs_last_mark + 7) % 8;
#line 210
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 211
    if (dt == 0UL) {
#line 212
      dt = dt + 1UL;
    } else {

    }
#line 213
    db = mdev->rs_mark_left[i] - rs_left;
#line 214
    dbdt = db / dt << 2;
#line 215
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 216
    seq_printf(seq, " -- ");
  } else {

  }
#line 222
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 223
  if (dt == 0UL) {
#line 224
    dt = 1UL;
  } else {

  }
#line 225
  db = mdev->rs_total - rs_left;
#line 226
  dbdt = db / dt << 2;
#line 227
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 228
  seq_printf(seq, ")");
#line 230
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 232
    seq_printf(seq, " want: ");
#line 233
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 235
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 237
  if (proc_details > 0) {
#line 240
    tmp = drbd_bm_bits(mdev);
#line 240
    bm_bits = tmp;
#line 242
    stop_sector = 0ULL;
#line 243
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 245
      bit_pos = bm_bits - mdev->ov_left;
#line 246
      if (mdev->agreed_pro_version > 96) {
#line 247
        stop_sector = (unsigned long long )mdev->ov_stop_sector;
      } else {

      }
    } else {
#line 249
      bit_pos = mdev->bm_resync_fo;
    }
#line 252
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
#line 257
    if (stop_sector != 0ULL && stop_sector != 0xffffffffffffffffULL) {
#line 258
      seq_printf(seq, " stop sector: %llu", stop_sector);
    } else {

    }
#line 259
    seq_printf(seq, "\n");
  } else {

  }
#line 261
  return;
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 265
  __mptr = (struct lc_element  const  *)e;
#line 265
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 267
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 270
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 275
  hole = 0;
#line 279
  write_ordering_chars[0] = 110;
#line 279
  write_ordering_chars[1] = 100;
#line 279
  write_ordering_chars[2] = 102;
#line 285
  tmp = drbd_buildtag();
#line 285
  seq_printf(seq, "version: 8.3.13 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 97, tmp);
#line 308
  i = 0;
#line 308
  goto ldv_51386;
  ldv_51385: 
#line 309
  mdev = minor_to_mdev((unsigned int )i);
#line 310
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 311
    hole = 1;
#line 312
    goto ldv_51384;
  } else {

  }
#line 314
  if (hole != 0) {
#line 315
    hole = 0;
#line 316
    seq_printf(seq, "\n");
  } else {

  }
#line 319
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39979.conn);
#line 321
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 324
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 327
    bdi_rw_congested(& (mdev->rq_queue)->backing_dev_info);
#line 329
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 329
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 329
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 329
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 329
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 329
    tmp___5 = drbd_test_flag(mdev, AL_SUSPENDED);
#line 329
    tmp___6 = is_susp(mdev->state);
#line 329
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.pdsk);
#line 329
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.disk);
#line 329
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_39979.peer);
#line 329
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_39979.role);
#line 329
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 360
    tmp___11 = drbd_bm_total_weight(mdev);
#line 360
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 364
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 368
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 370
  if (proc_details > 0) {
#line 370
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 370
    if (tmp___12 != 0) {
#line 371
      lc_seq_printf_stats(seq, mdev->resync);
#line 372
      lc_seq_printf_stats(seq, mdev->act_log);
#line 373
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 376
  if (proc_details > 1) {
#line 377
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 378
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_51384: 
#line 308
  i = i + 1;
  ldv_51386: ;
#line 308
  if ((unsigned int )i < minor_count) {
#line 309
    goto ldv_51385;
  } else {

  }

#line 384
  return (0);
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  bool tmp___1 ;

  {
#line 389
  tmp___1 = try_module_get(& __this_module);
#line 389
  if ((int )tmp___1) {
#line 390
    tmp = PDE((struct inode  const  *)inode);
#line 390
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 390
    return (tmp___0);
  } else {

  }
#line 391
  return (-19);
}
}
#line 394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 396
  module_put(& __this_module);
#line 397
  tmp = single_release(inode, file);
#line 397
  return (tmp);
}
}
#line 418
void ldv_check_final_state(void) ;
#line 421
extern void ldv_check_return_value(int  ) ;
#line 427
void ldv_initialize(void) ;
#line 430
extern void ldv_handler_precall(void) ;
#line 433
extern int nondet_int(void) ;
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 473
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 463
  LDV_IN_INTERRUPT = 1;
#line 472
  ldv_initialize();
#line 476
  goto ldv_51422;
  ldv_51421: 
#line 480
  tmp = nondet_int();
#line 480
  switch (tmp) {
  case 0: ;
#line 485
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 490
    ldv_handler_precall();
#line 491
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 492
    ldv_check_return_value(res_drbd_proc_open_4);
#line 493
    if (res_drbd_proc_open_4 != 0) {
#line 494
      goto ldv_module_exit;
    } else {

    }
#line 495
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 501
  goto ldv_51418;
  case 1: ;
#line 505
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 510
    ldv_handler_precall();
#line 511
    drbd_proc_release(var_group1, var_group2);
#line 512
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 518
  goto ldv_51418;
  default: ;
#line 519
  goto ldv_51418;
  }
  ldv_51418: ;
  ldv_51422: 
#line 476
  tmp___0 = nondet_int();
#line 476
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 478
    goto ldv_51421;
  } else {

  }

  ldv_module_exit: ;
#line 528
  ldv_check_final_state();
#line 531
  return;
}
}
#line 535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_35(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 540
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 542
  mutex_lock(ldv_func_arg1);
#line 543
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_36(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 550
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 552
  mutex_unlock(ldv_func_arg1);
#line 553
  return;
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_37(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 560
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 562
  mutex_lock(ldv_func_arg1);
#line 563
  return;
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_38(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 570
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 572
  mutex_unlock(ldv_func_arg1);
#line 573
  return;
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_39(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 580
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 582
  mutex_lock(ldv_func_arg1);
#line 583
  return;
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_40(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 590
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 592
  mutex_unlock(ldv_func_arg1);
#line 593
  return;
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_41(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 600
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 602
  mutex_lock(ldv_func_arg1);
#line 603
  return;
}
}
#line 605 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_mutex_trylock_42(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___6 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 610
  tmp = mutex_trylock(ldv_func_arg1);
#line 610
  ldv_func_res = tmp;
#line 612
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 612
  return (tmp___0);
#line 614
  return (ldv_func_res);
}
}
#line 617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_43(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 622
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 624
  mutex_unlock(ldv_func_arg1);
#line 625
  return;
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_44(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 632
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 634
  mutex_lock(ldv_func_arg1);
#line 635
  return;
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_45(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 642
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 644
  mutex_unlock(ldv_func_arg1);
#line 645
  return;
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_lock_46(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 652
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 654
  mutex_lock(ldv_func_arg1);
#line 655
  return;
}
}
#line 657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_47(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 662
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 664
  mutex_unlock(ldv_func_arg1);
#line 665
  return;
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_mutex_unlock_48(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 672
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 674
  mutex_unlock(ldv_func_arg1);
#line 675
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 206 "include/linux/kernel.h"
extern void panic(char const   *  , ...) ;
#line 323
extern int sprintf(char * , char const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+q" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5505;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5505;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5505;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5505;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5505: ;
#line 216
  return (__ret);
}
}
#line 279 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_66(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_68(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_74(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_77(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_79(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5957.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5957.rlock);
#line 326
  return;
}
}
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 176 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 240
extern void add_timer(struct timer_list * ) ;
#line 915 "include/linux/device.h"
extern int dev_emerg(struct device  const  * , char const   *  , ...) ;
#line 343 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 343
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 343
  return (tmp);
}
}
#line 357 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 359
  tmp = PageTail((struct page  const  *)page);
#line 359
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 359
  if (tmp___0 != 0L) {
#line 360
    return (page->ldv_14722.first_page);
  } else {

  }
#line 361
  return (page);
}
}
#line 379 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 381
  tmp = compound_head(page);
#line 381
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_14703.ldv_14702.ldv_14701._count));
#line 381
  return (tmp___0);
}
}
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19186: ;
#line 65
    goto ldv_19186;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19187: ;
#line 67
    goto ldv_19187;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19188: ;
#line 68
    goto ldv_19188;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 207
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_2023.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 648 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 667
  return ((loff_t )inode->i_size);
}
}
#line 321 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2158
extern void flush_signals(struct task_struct * ) ;
#line 2192
extern void force_sig(int  , struct task_struct * ) ;
#line 1475 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1134 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1136
  return (& tfm->base);
}
}
#line 1154 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1156
  tmp = crypto_hash_tfm(tfm);
#line 1156
  return (& tmp->crt_u.hash);
}
}
#line 1169 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1171
  tmp = crypto_hash_crt(tfm);
#line 1171
  return (tmp->digestsize);
}
}
#line 1189 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->init))(desc);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1198
  tmp = crypto_hash_crt(desc->tfm);
#line 1198
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1198
  return (tmp___0);
}
}
#line 1201 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->final))(desc, out);
#line 1203
  return (tmp___0);
}
}
#line 219 "include/linux/bio.h"
extern struct bio *bio_clone_bioset(struct bio * , gfp_t  , struct bio_set * ) ;
#line 221
extern struct bio_set *fs_bio_set ;
#line 228 "include/linux/bio.h"
__inline static struct bio *bio_clone(struct bio *bio , gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;

  {
#line 230
  tmp = bio_clone_bioset(bio, gfp_mask, fs_bio_set);
#line 230
  return (tmp);
}
}
#line 717 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1083 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1085
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1154 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_clear_flag(struct drbd_conf *mdev , enum drbd_flag f ) 
{ 


  {
#line 1156
  clear_bit((int )f, (unsigned long volatile   *)(& mdev->drbd_flags));
#line 1157
  return;
}
}
#line 1164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_test_and_set_flag(struct drbd_conf *mdev , enum drbd_flag f ) 
{ 
  int tmp ;

  {
#line 1166
  tmp = test_and_set_bit((int )f, (unsigned long volatile   *)(& mdev->drbd_flags));
#line 1166
  return (tmp);
}
}
#line 1183 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1185
  return (mdev->minor);
}
}
#line 1196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1198
  ldv_mutex_lock_74(& mdev->data.mutex);
#line 1201
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1201
  if (tmp != 0L) {
#line 1202
    ldv_mutex_unlock_75(& mdev->data.mutex);
#line 1203
    return (0);
  } else {

  }
#line 1205
  return (1);
}
}
#line 1208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1210
  ldv_mutex_unlock_76(& mdev->data.mutex);
#line 1211
  return;
}
}
#line 1237
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1249
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1251
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1268
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1272
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1277
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1285
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1291
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1293
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1294
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1296
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1297
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1299
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1303
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1309
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1310
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1312
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1314
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1315
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1317
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1554
wait_queue_head_t drbd_pp_wait ;
#line 1570 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1598
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1601
int drbd_worker(struct drbd_thread *thi ) ;
#line 1602
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1603
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1604
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1605
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1606
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1609
void drbd_md_put_buffer(struct drbd_conf *mdev ) ;
#line 1614
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1615
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1617 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1619
  if (mdev->ov_last_oos_size != 0UL) {
#line 1620
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1624
  mdev->ov_last_oos_size = 0UL;
#line 1625
  return;
}
}
#line 1628
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1629
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1632
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1633
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1634
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1635
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1636
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1637
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1638
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1639
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1641
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1642
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1643
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1644
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1645
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1647
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1648
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1649
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1651
void resync_timer_fn(unsigned long data ) ;
#line 1652
void start_resync_timer_fn(unsigned long data ) ;
#line 1655
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1656
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1659
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1664
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1679 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1683
  if (level == 1) {
#line 1684
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1686
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1688
  return (err);
}
}
#line 1691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1693
  val = 1;
#line 1694
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1696
  return;
}
}
#line 1698 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1700
  val = 0;
#line 1701
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1703
  return;
}
}
#line 1728
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1729
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1730
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1732
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1734
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1735
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1738
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1739
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1743
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1820 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1822
  return ((struct page *)page->ldv_14722.private);
}
}
#line 1830 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1832
  page = e->pages;
#line 1833
  goto ldv_51043;
  ldv_51042: 
#line 1834
  tmp = page_count(page);
#line 1834
  if (tmp > 1) {
#line 1835
    return (1);
  } else {

  }
#line 1833
  page = page_chain_next(page);
  ldv_51043: ;
#line 1833
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1833
    tmp___0 = page_chain_next(page);
#line 1833
    __builtin_prefetch((void const   *)tmp___0);
#line 1833
    if (1 != 0) {
#line 1834
      goto ldv_51042;
    } else {
#line 1836
      goto ldv_51044;
    }
  } else {

  }
  ldv_51044: ;
#line 1837
  return (0);
}
}
#line 1840 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1842
  tmp = drbd_test_and_set_flag(mdev, CLUSTER_ST_CHANGE);
#line 1842
  if (tmp == 0) {
#line 1842
    goto ldv_51048;
  } else {

  }
#line 1842
  tmp___0 = get_current();
#line 1842
  __wait.flags = 0U;
#line 1842
  __wait.private = (void *)tmp___0;
#line 1842
  __wait.func = & autoremove_wake_function;
#line 1842
  __wait.task_list.next = & __wait.task_list;
#line 1842
  __wait.task_list.prev = & __wait.task_list;
  ldv_51051: 
#line 1842
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1842
  tmp___1 = drbd_test_and_set_flag(mdev, CLUSTER_ST_CHANGE);
#line 1842
  if (tmp___1 == 0) {
#line 1842
    goto ldv_51050;
  } else {

  }
#line 1842
  schedule();
#line 1842
  goto ldv_51051;
  ldv_51050: 
#line 1842
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51048: ;
#line 1845
  return;
}
}
#line 1846 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1848
  drbd_clear_flag(mdev, CLUSTER_ST_CHANGE);
#line 1849
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1850
  return;
}
}
#line 1890 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1894
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1896
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1897
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1897
    if (tmp != 0) {
#line 1898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1899
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1900
      __ns.i = mdev->state.i;
#line 1900
      __ns.ldv_39979.disk = 4U;
#line 1900
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1901
    goto ldv_51081;
  } else {

  }
  case 2: ;
  case 1: 
#line 1926
  drbd_set_flag(mdev, WAS_IO_ERROR);
#line 1927
  if ((unsigned int )df == 0U) {
#line 1928
    drbd_set_flag(mdev, WAS_READ_ERROR);
  } else {

  }
#line 1929
  if ((unsigned int )df == 3U) {
#line 1930
    drbd_set_flag(mdev, FORCE_DETACH);
  } else {

  }
#line 1931
  if ((int )mdev->state.ldv_39979.disk > 2) {
#line 1932
    __ns___0.i = mdev->state.i;
#line 1932
    __ns___0.ldv_39979.disk = 2U;
#line 1932
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1936
  goto ldv_51081;
  }
  ldv_51081: ;
#line 1939
  return;
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 2000
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 2000
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 2000
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 2000
    tmp___0 = 0UL;
  }
#line 2000
  return (tmp___0);
}
}
#line 2079 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2082
  tmp = spinlock_check(& q->q_lock);
#line 2082
  flags = _raw_spin_lock_irqsave(tmp);
#line 2083
  list_add_tail(& w->list, & q->q);
#line 2084
  up(& q->s);
#line 2086
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2087
  return;
}
}
#line 2089 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2091
  tmp = drbd_test_flag(mdev, SIGNAL_ASENDER);
#line 2091
  if (tmp != 0) {
#line 2092
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2093
  return;
}
}
#line 2095 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2097
  drbd_set_flag(mdev, SEND_PING);
#line 2098
  wake_asender(mdev);
#line 2099
  return;
}
}
#line 2101 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2105
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2105
  return (tmp);
}
}
#line 2120 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2122
  _drbd_thread_stop(thi, 0, 1);
#line 2123
  return;
}
}
#line 2180 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2182
  atomic_inc(& mdev->rs_pending_cnt);
#line 2183
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 273 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 276
  bio = bio_clone(bio_src, 16U);
#line 278
  req->private_bio = bio;
#line 280
  bio->bi_private = (void *)req;
#line 281
  bio->bi_end_io = & drbd_endio_pri;
#line 282
  bio->bi_next = 0;
#line 283
  return;
}
}
#line 326
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 328
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 337
  mdev = req->mdev;
#line 342
  rv = __req_mod(req, what, & m);
#line 343
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 344
    complete_master_bio(mdev, & m);
  } else {

  }
#line 346
  return (rv);
}
}
#line 353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 357
  mdev = req->mdev;
#line 361
  tmp = spinlock_check(& mdev->req_lock);
#line 361
  flags = _raw_spin_lock_irqsave(tmp);
#line 362
  rv = __req_mod(req, what, & m);
#line 363
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 365
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 366
    complete_master_bio(mdev, & m);
  } else {

  }
#line 368
  return (rv);
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 113
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;
  struct drbd_conf *mdev ;
  struct drbd_md_io  const  *__mptr ;

  {
#line 146
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 147
  __mptr = (struct drbd_md_io  const  *)md_io;
#line 147
  mdev = (struct drbd_conf *)__mptr + 0xfffffffffffff060UL;
#line 149
  md_io->error = error;
#line 162
  drbd_md_put_buffer(mdev);
#line 163
  md_io->done = 1U;
#line 164
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 165
  bio_put(bio);
#line 166
  put_ldev(mdev);
#line 167
  return;
}
}
#line 172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 174
  flags = 0UL;
#line 175
  mdev = e->mdev;
#line 177
  if (e->ldv_49189.block_id == 0ULL) {
#line 177
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            177);
  } else {

  }
#line 179
  tmp = spinlock_check(& mdev->req_lock);
#line 179
  flags = _raw_spin_lock_irqsave(tmp);
#line 180
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 181
  list_del(& e->w.list);
#line 182
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 182
  if (tmp___0 != 0) {
#line 183
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 184
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 184
  if (tmp___1 != 0) {
#line 185
    __drbd_chk_io_error____0(mdev, DRBD_READ_ERROR, "drbd_endio_read_sec_final");
  } else {

  }
#line 186
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 188
  drbd_queue_work(& mdev->data.work, & e->w);
#line 189
  put_ldev(mdev);
#line 190
  return;
}
}
#line 194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 196
  flags = 0UL;
#line 197
  mdev = e->mdev;
#line 203
  if (e->ldv_49189.block_id == 0ULL) {
#line 203
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            203);
  } else {

  }
#line 209
  e_sector = e->sector;
#line 210
  do_al_complete_io = (int )e->flags & 1;
#line 211
  is_syncer_req = e->ldv_49189.block_id == 0xffffffffffffffffULL;
#line 213
  tmp = spinlock_check(& mdev->req_lock);
#line 213
  flags = _raw_spin_lock_irqsave(tmp);
#line 214
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 215
  list_del(& e->w.list);
#line 216
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 223
  if (is_syncer_req != 0) {
#line 223
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 223
    do_wake = tmp___0;
  } else {
#line 223
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 223
    do_wake = tmp___1;
  }
#line 227
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 227
  if (tmp___2 != 0) {
#line 228
    __drbd_chk_io_error____0(mdev, DRBD_WRITE_ERROR, "drbd_endio_write_sec_final");
  } else {

  }
#line 229
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 231
  if (is_syncer_req != 0) {
#line 232
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 234
  if (do_wake != 0) {
#line 235
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 237
  if (do_al_complete_io != 0) {
#line 238
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 240
  wake_asender(mdev);
#line 241
  put_ldev(mdev);
#line 242
  return;
}
}
#line 247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 249
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 250
  mdev = e->mdev;
#line 251
  uptodate = (int )bio->bi_flags & 1;
#line 252
  is_write = (int )bio->bi_rw & 1;
#line 254
  if (error != 0) {
#line 254
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 254
    if (tmp != 0) {
#line 255
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 258
  if (error == 0 && uptodate == 0) {
#line 259
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 259
    if (tmp___0 != 0) {
#line 260
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 266
    error = -5;
  } else {

  }
#line 269
  if (error != 0) {
#line 270
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 272
  bio_put(bio);
#line 273
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 273
  if (tmp___1 != 0) {
#line 274
    if (is_write != 0) {
#line 275
      drbd_endio_write_sec_final(e);
    } else {
#line 277
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 278
  return;
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  void *tmp___2 ;
  raw_spinlock_t *tmp___3 ;

  {
#line 286
  req = (struct drbd_request *)bio->bi_private;
#line 287
  mdev = req->mdev;
#line 290
  uptodate = (int )bio->bi_flags & 1;
#line 292
  if (error == 0 && uptodate == 0) {
#line 293
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 298
    error = -5;
  } else {

  }
#line 329
  tmp___0 = __builtin_expect((req->rq_state & 8UL) != 0UL, 0L);
#line 329
  if (tmp___0 != 0L) {
#line 330
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_pri");
#line 330
    if (tmp != 0) {
#line 331
      dev_emerg((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "delayed completion of aborted local request; disk-timeout may be too aggressive\n");
    } else {

    }
#line 333
    if (error == 0) {
#line 334
      panic("possible random memory corruption caused by delayed completion of aborted local request\n");
    } else {

    }
  } else {

  }
#line 338
  tmp___1 = __builtin_expect(error != 0, 0L);
#line 338
  if (tmp___1 != 0L) {
#line 339
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 8193UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 345
    what = completed_ok;
  }
#line 347
  bio_put(req->private_bio);
#line 348
  tmp___2 = ERR_PTR((long )error);
#line 348
  req->private_bio = (struct bio *)tmp___2;
#line 351
  tmp___3 = spinlock_check(& mdev->req_lock);
#line 351
  flags = _raw_spin_lock_irqsave(tmp___3);
#line 352
  __req_mod(req, what, & m);
#line 353
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 354
  put_ldev(mdev);
#line 356
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 357
    complete_master_bio(mdev, & m);
  } else {

  }
#line 358
  return;
}
}
#line 360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 362
  __mptr = (struct drbd_work  const  *)w;
#line 362
  req = (struct drbd_request *)__mptr;
#line 368
  spin_lock_irq(& mdev->req_lock);
#line 369
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 370
    _req_mod(req, read_retry_remote_canceled);
#line 371
    spin_unlock_irq(& mdev->req_lock);
#line 372
    return (1);
  } else {

  }
#line 374
  spin_unlock_irq(& mdev->req_lock);
#line 376
  tmp = w_send_read_req(mdev, w, 0);
#line 376
  return (tmp);
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 383
  page = e->pages;
#line 387
  desc.tfm = tfm;
#line 388
  desc.flags = 0U;
#line 390
  sg_init_table(& sg, 1U);
#line 391
  crypto_hash_init(& desc);
#line 393
  goto ldv_51565;
  ldv_51564: 
#line 395
  sg_set_page(& sg, page, 4096U, 0U);
#line 396
  crypto_hash_update(& desc, & sg, sg.length);
#line 397
  page = tmp;
  ldv_51565: 
#line 393
  tmp = page_chain_next(page);
#line 393
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 394
    goto ldv_51564;
  } else {

  }
#line 400
  len = e->size & 4095U;
#line 401
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 402
  crypto_hash_update(& desc, & sg, sg.length);
#line 403
  crypto_hash_final(& desc, (u8 *)digest);
#line 404
  return;
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 413
  desc.tfm = tfm;
#line 414
  desc.flags = 0U;
#line 416
  sg_init_table(& sg, 1U);
#line 417
  crypto_hash_init(& desc);
#line 419
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 419
  i = (int )bio->bi_idx;
#line 419
  goto ldv_51578;
  ldv_51577: 
#line 420
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 421
  crypto_hash_update(& desc, & sg, sg.length);
#line 419
  bvec = bvec + 1;
#line 419
  i = i + 1;
  ldv_51578: ;
#line 419
  if ((int )bio->bi_vcnt > i) {
#line 420
    goto ldv_51577;
  } else {

  }
#line 423
  crypto_hash_final(& desc, (u8 *)digest);
#line 424
  return;
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 429
  __mptr = (struct drbd_work  const  *)w;
#line 429
  e = (struct drbd_epoch_entry *)__mptr;
#line 432
  ok = 1;
#line 434
  if (e->ldv_49189.block_id != 2205466966ULL) {
#line 434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            434);
  } else {

  }
#line 436
  tmp = __builtin_expect(cancel != 0, 0L);
#line 436
  if (tmp != 0L) {
#line 437
    goto out;
  } else {

  }
#line 439
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 439
  if (tmp___0 != 0L) {
#line 440
    goto out;
  } else {

  }
#line 442
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 442
  digest_size = (int )tmp___1;
#line 443
  digest = kmalloc((size_t )digest_size, 16U);
#line 444
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 445
    sector = e->sector;
#line 446
    size = e->size;
#line 447
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 453
    drbd_free_some_ee(mdev, e, 0);
#line 454
    e = 0;
#line 455
    inc_rs_pending(mdev);
#line 456
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 459
    kfree((void const   *)digest);
  } else {
#line 461
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 462
    ok = 0;
  }
  out: ;
#line 466
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 467
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 469
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 469
  if (tmp___2 != 0L) {
#line 470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 471
  return (ok);
}
}
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 480
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 480
  if (tmp == 0) {
#line 481
    return (-5);
  } else {

  }
#line 483
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 483
  if (tmp___0 != 0) {
#line 484
    goto defer;
  } else {

  }
#line 488
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 489
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 490
    goto defer;
  } else {

  }
#line 492
  e->w.cb = & w_e_send_csum;
#line 493
  spin_lock_irq(& mdev->req_lock);
#line 494
  list_add(& e->w.list, & mdev->read_ee);
#line 495
  spin_unlock_irq(& mdev->req_lock);
#line 497
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 498
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 498
  if (tmp___1 == 0) {
#line 499
    return (0);
  } else {

  }
#line 505
  spin_lock_irq(& mdev->req_lock);
#line 506
  list_del(& e->w.list);
#line 507
  spin_unlock_irq(& mdev->req_lock);
#line 509
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 511
  put_ldev(mdev);
#line 512
  return (-11);
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 517
  switch ((int )mdev->state.ldv_39979.conn) {
  case 18: 
#line 519
  w_make_ov_request(mdev, w, cancel);
#line 520
  goto ldv_51607;
  case 17: 
#line 522
  w_make_resync_request(mdev, w, cancel);
#line 523
  goto ldv_51607;
  }
  ldv_51607: ;
#line 526
  return (1);
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 531
  mdev = (struct drbd_conf *)data;
#line 533
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 533
  if (tmp != 0) {
#line 534
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 535
  return;
}
}
#line 537 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 541
  i = 0;
#line 541
  goto ldv_51619;
  ldv_51618: 
#line 542
  *(fb->values + (unsigned long )i) = value;
#line 541
  i = i + 1;
  ldv_51619: ;
#line 541
  if ((unsigned int )i < fb->size) {
#line 542
    goto ldv_51618;
  } else {

  }

#line 546
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 549
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 550
  tmp = fb->head_index;
#line 550
  fb->head_index = fb->head_index + 1U;
#line 550
  *(fb->values + (unsigned long )tmp) = value;
#line 552
  if (fb->head_index >= fb->size) {
#line 553
    fb->head_index = 0U;
  } else {

  }
#line 555
  return (ov);
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 562
  i = 0;
#line 562
  goto ldv_51632;
  ldv_51631: 
#line 563
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 562
  i = i + 1;
  ldv_51632: ;
#line 562
  if ((unsigned int )i < fb->size) {
#line 563
    goto ldv_51631;
  } else {

  }

#line 567
  return;
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 577
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 577
  sect_in = (unsigned int )tmp;
#line 578
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 580
  spin_lock(& mdev->peer_seq_lock);
#line 582
  steps = (int )mdev->rs_plan_s.size;
#line 584
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 585
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 587
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 591
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 594
  cps = correction / steps;
#line 595
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 596
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 599
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 600
  spin_unlock(& mdev->peer_seq_lock);
#line 601
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 603
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 604
  if (req_sect < 0) {
#line 605
    req_sect = 0;
  } else {

  }
#line 607
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 608
  if (req_sect > max_sect) {
#line 609
    req_sect = max_sect;
  } else {

  }
#line 617
  return (req_sect);
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 623
  if (mdev->rs_plan_s.size != 0U) {
#line 624
    tmp = drbd_rs_controller(mdev);
#line 624
    number = tmp >> 3;
#line 625
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 627
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 628
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 633
  return (number);
}
}
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 641
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 641
  capacity = tmp;
#line 645
  i = 0;
#line 647
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 647
  if (tmp___0 != 0L) {
#line 648
    return (1);
  } else {

  }
#line 650
  if (mdev->rs_total == 0UL) {
#line 652
    drbd_resync_finished(mdev);
#line 653
    return (1);
  } else {

  }
#line 656
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 656
  if (tmp___1 == 0) {
#line 661
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 662
    return (1);
  } else {

  }
#line 665
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 665
  max_bio_size = (int )(tmp___2 << 9);
#line 666
  number = drbd_rs_number_requests(mdev);
#line 667
  if (number == 0) {
#line 668
    goto requeue;
  } else {

  }
#line 670
  i = 0;
#line 670
  goto ldv_51680;
  ldv_51679: 
#line 672
  ldv_mutex_lock_77(& mdev->data.mutex);
#line 673
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 674
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 675
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 677
    queued = 1;
#line 678
    sndbuf = 0;
  }
#line 680
  ldv_mutex_unlock_78(& mdev->data.mutex);
#line 681
  if (sndbuf / 2 < queued) {
#line 682
    goto requeue;
  } else {

  }
  next_sector: 
#line 685
  size = 4096;
#line 686
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 688
  if (bit == 0xffffffffffffffffUL) {
#line 689
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 690
    put_ldev(mdev);
#line 691
    return (1);
  } else {

  }
#line 694
  sector = bit << 3;
#line 696
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 696
  if (tmp___3 != 0) {
#line 698
    mdev->bm_resync_fo = bit;
#line 699
    goto requeue;
  } else {
#line 696
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 696
    if (tmp___4 != 0) {
#line 698
      mdev->bm_resync_fo = bit;
#line 699
      goto requeue;
    } else {

    }
  }
#line 701
  mdev->bm_resync_fo = bit + 1UL;
#line 703
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 703
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 703
  if (tmp___6 != 0L) {
#line 704
    drbd_rs_complete_io(mdev, sector);
#line 705
    goto next_sector;
  } else {

  }
#line 715
  align = 1;
#line 716
  rollback_i = i;
  ldv_51668: ;
#line 718
  if (size + 4096 > max_bio_size) {
#line 719
    goto ldv_51667;
  } else {

  }
#line 722
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 723
    goto ldv_51667;
  } else {

  }
#line 726
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 727
    goto ldv_51667;
  } else {

  }
#line 733
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 733
  if (tmp___7 != 1) {
#line 734
    goto ldv_51667;
  } else {

  }
#line 735
  bit = bit + 1UL;
#line 736
  size = size + 4096;
#line 737
  if (4096 << align <= size) {
#line 738
    align = align + 1;
  } else {

  }
#line 739
  i = i + 1;
#line 740
  goto ldv_51668;
  ldv_51667: ;
#line 743
  if (size > 4096) {
#line 744
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 748
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 749
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 750
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 751
    tmp___8 = read_for_csum(mdev, sector, size);
#line 751
    switch (tmp___8) {
    case -5: 
#line 753
    put_ldev(mdev);
#line 754
    return (0);
    case -11: 
#line 756
    drbd_rs_complete_io(mdev, sector);
#line 757
    mdev->bm_resync_fo = sector >> 3;
#line 758
    i = rollback_i;
#line 759
    goto requeue;
    case 0: ;
#line 762
    goto ldv_51672;
    default: 
#line 764
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (764), "i" (12UL));
    ldv_51674: ;
#line 764
    goto ldv_51674;
    }
    ldv_51672: ;
  } else {
#line 767
    inc_rs_pending(mdev);
#line 768
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 768
    if (tmp___11 == 0) {
#line 770
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 771
      atomic_dec(& mdev->rs_pending_cnt);
#line 771
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 771
      if (tmp___10 < 0) {
#line 771
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 771
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 771, tmp___9);
      } else {

      }
#line 772
      put_ldev(mdev);
#line 773
      return (0);
    } else {

    }
  }
#line 670
  i = i + 1;
  ldv_51680: ;
#line 670
  if (i < number) {
#line 671
    goto ldv_51679;
  } else {

  }
#line 778
  tmp___12 = drbd_bm_bits(mdev);
#line 778
  if (mdev->bm_resync_fo >= tmp___12) {
#line 785
    put_ldev(mdev);
#line 786
    return (1);
  } else {

  }
  requeue: 
#line 790
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 791
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 792
  put_ldev(mdev);
#line 793
  return (1);
}
}
#line 796 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  bool stop_sector_reached ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 800
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 800
  capacity = tmp;
#line 801
  stop_sector_reached = 0;
#line 803
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 803
  if (tmp___0 != 0L) {
#line 804
    return (1);
  } else {

  }
#line 806
  number = drbd_rs_number_requests(mdev);
#line 808
  sector = mdev->ov_position;
#line 809
  i = 0;
#line 809
  goto ldv_51700;
  ldv_51699: ;
#line 810
  if (sector >= capacity) {
#line 811
    return (1);
  } else {

  }
#line 816
  stop_sector_reached = (bool )((i > 0 && mdev->agreed_pro_version > 96) && mdev->ov_stop_sector <= sector);
#line 819
  if ((int )stop_sector_reached) {
#line 820
    goto ldv_51693;
  } else {

  }
#line 822
  size = 4096;
#line 824
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 824
  if (tmp___1 != 0) {
#line 826
    mdev->ov_position = sector;
#line 827
    goto requeue;
  } else {
#line 824
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 824
    if (tmp___2 != 0) {
#line 826
      mdev->ov_position = sector;
#line 827
      goto requeue;
    } else {

    }
  }
#line 830
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 831
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 833
  inc_rs_pending(mdev);
#line 834
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 834
  if (tmp___5 == 0) {
#line 835
    atomic_dec(& mdev->rs_pending_cnt);
#line 835
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 835
    if (tmp___4 < 0) {
#line 835
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 835
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 835, tmp___3);
    } else {

    }
#line 836
    return (0);
  } else {

  }
#line 838
  sector = sector + 8UL;
#line 809
  i = i + 1;
  ldv_51700: ;
#line 809
  if (i < number) {
#line 810
    goto ldv_51699;
  } else {

  }
  ldv_51693: 
#line 840
  mdev->ov_position = sector;
  requeue: 
#line 843
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 844
  if (i == 0 || ! stop_sector_reached) {
#line 845
    mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
  } else {

  }
#line 846
  return (1);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 852
  mdev = (struct drbd_conf *)data;
#line 854
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 855
  return;
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 859
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 859
  if (tmp != 0) {
#line 860
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 861
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 862
    add_timer(& mdev->start_resync_timer);
#line 863
    return (1);
  } else {
#line 859
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 859
    if (tmp___0 != 0) {
#line 860
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 861
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 862
      add_timer(& mdev->start_resync_timer);
#line 863
      return (1);
    } else {

    }
  }
#line 866
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 867
  drbd_clear_flag(mdev, AHEAD_TO_SYNC_SOURCE);
#line 868
  return (1);
}
}
#line 871 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 873
  kfree((void const   *)w);
#line 874
  ov_oos_print(mdev);
#line 875
  drbd_resync_finished(mdev);
#line 877
  return (1);
}
}
#line 880 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 882
  kfree((void const   *)w);
#line 884
  drbd_resync_finished(mdev);
#line 886
  return (1);
}
}
#line 889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 891
  drbd_clear_flag(mdev, GOT_PING_ACK);
#line 892
  request_ping(mdev);
#line 893
  tmp = drbd_test_flag(mdev, GOT_PING_ACK);
#line 893
  if (tmp != 0 || (int )mdev->state.ldv_39979.conn <= 9) {
#line 893
    goto ldv_51723;
  } else {

  }
#line 893
  tmp___0 = get_current();
#line 893
  __wait.flags = 0U;
#line 893
  __wait.private = (void *)tmp___0;
#line 893
  __wait.func = & autoremove_wake_function;
#line 893
  __wait.task_list.next = & __wait.task_list;
#line 893
  __wait.task_list.prev = & __wait.task_list;
  ldv_51726: 
#line 893
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 893
  tmp___1 = drbd_test_flag(mdev, GOT_PING_ACK);
#line 893
  if (tmp___1 != 0 || (int )mdev->state.ldv_39979.conn <= 9) {
#line 893
    goto ldv_51725;
  } else {

  }
#line 893
  schedule();
#line 893
  goto ldv_51726;
  ldv_51725: 
#line 893
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51723: ;
#line 896
  return;
}
}
#line 897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 903
  khelper_cmd = 0;
#line 904
  verify_done = 0;
#line 909
  tmp___0 = drbd_rs_del_all(mdev);
#line 909
  if (tmp___0 != 0) {
#line 915
    schedule_timeout_interruptible(25L);
#line 916
    tmp = kmalloc(24UL, 32U);
#line 916
    w = (struct drbd_work *)tmp;
#line 917
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 918
      w->cb = & w_resync_finished;
#line 919
      drbd_queue_work(& mdev->data.work, w);
#line 920
      return (1);
    } else {

    }
#line 922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 925
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 926
  if (dt == 0UL) {
#line 927
    dt = 1UL;
  } else {

  }
#line 929
  db = mdev->rs_total;
#line 931
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 932
    db = db - mdev->ov_left;
  } else {

  }
#line 934
  dbdt = db / dt << 2;
#line 935
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 937
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 937
  if (tmp___1 == 0) {
#line 938
    goto out;
  } else {

  }
#line 940
  ping_peer(mdev);
#line 942
  spin_lock_irq(& mdev->req_lock);
#line 943
  os = mdev->state;
#line 945
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 949
  if ((int )os.ldv_39979.conn <= 10) {
#line 950
    goto out_unlock;
  } else {

  }
#line 952
  ns = os;
#line 953
  ns.ldv_39979.conn = 10U;
#line 955
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify" : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 959
  n_oos = drbd_bm_total_weight(mdev);
#line 961
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 962
    if (n_oos != 0UL) {
#line 963
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 965
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 968
      if (mdev->rs_failed != n_oos) {
#line 968
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                968);
      } else {

      }
#line 970
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 971
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 973
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 974
        s = mdev->rs_same_csum;
#line 975
        t = mdev->rs_total;
#line 976
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 979
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 988
  if (mdev->rs_failed != 0UL) {
#line 989
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 991
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 992
      ns.ldv_39979.disk = 4U;
#line 993
      ns.ldv_39979.pdsk = 8U;
    } else {
#line 995
      ns.ldv_39979.disk = 8U;
#line 996
      ns.ldv_39979.pdsk = 4U;
    }
  } else {
#line 999
    ns.ldv_39979.disk = 8U;
#line 1000
    ns.ldv_39979.pdsk = 8U;
#line 1002
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 1003
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1005
        i = 1;
#line 1005
        goto ldv_51746;
        ldv_51745: 
#line 1006
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 1005
        i = i + 1;
        ldv_51746: ;
#line 1005
        if (i <= 3) {
#line 1006
          goto ldv_51745;
        } else {

        }
#line 1007
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 1008
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 1010
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 1014
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 1017
      drbd_uuid_set_bm(mdev, 0ULL);
#line 1018
      drbd_print_uuids(mdev, "updated UUIDs");
#line 1019
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1023
        i___0 = 0;
#line 1023
        goto ldv_51750;
        ldv_51749: 
#line 1024
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 1023
        i___0 = i___0 + 1;
        ldv_51750: ;
#line 1023
        if (i___0 <= 3) {
#line 1024
          goto ldv_51749;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 1029
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 1031
  spin_unlock_irq(& mdev->req_lock);
#line 1032
  put_ldev(mdev);
  out: 
#line 1034
  mdev->rs_total = 0UL;
#line 1035
  mdev->rs_failed = 0UL;
#line 1036
  mdev->rs_paused = 0UL;
#line 1039
  if (verify_done != 0 && mdev->ov_left == 0UL) {
#line 1040
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1042
  drbd_md_sync(mdev);
#line 1044
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 1045
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 1047
  return (1);
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 1053
  tmp = drbd_ee_has_active_page(e);
#line 1053
  if (tmp != 0) {
#line 1055
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 1056
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 1057
    atomic_sub(i, & mdev->pp_in_use);
#line 1058
    spin_lock_irq(& mdev->req_lock);
#line 1059
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 1060
    spin_unlock_irq(& mdev->req_lock);
#line 1061
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 1063
    drbd_free_some_ee(mdev, e, 0);
  }
#line 1064
  return;
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 1074
  __mptr = (struct drbd_work  const  *)w;
#line 1074
  e = (struct drbd_epoch_entry *)__mptr;
#line 1077
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1077
  if (tmp___1 != 0L) {
#line 1078
    drbd_free_some_ee(mdev, e, 0);
#line 1079
    atomic_dec(& mdev->unacked_cnt);
#line 1079
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1079
    if (tmp___0 < 0) {
#line 1079
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1079
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 1079, tmp);
    } else {

    }
#line 1080
    return (1);
  } else {

  }
#line 1083
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1083
  if (tmp___3 != 0L) {
#line 1084
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 1086
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 1086
    if (tmp___2 != 0) {
#line 1087
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1090
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 1093
  atomic_dec(& mdev->unacked_cnt);
#line 1093
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1093
  if (tmp___5 < 0) {
#line 1093
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1093
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 1093, tmp___4);
  } else {

  }
#line 1095
  move_to_net_ee_or_free(mdev, e);
#line 1097
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 1097
  if (tmp___6 != 0L) {
#line 1098
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1099
  return (ok);
}
}
#line 1108 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1110
  __mptr = (struct drbd_work  const  *)w;
#line 1110
  e = (struct drbd_epoch_entry *)__mptr;
#line 1113
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1113
  if (tmp___1 != 0L) {
#line 1114
    drbd_free_some_ee(mdev, e, 0);
#line 1115
    atomic_dec(& mdev->unacked_cnt);
#line 1115
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1115
    if (tmp___0 < 0) {
#line 1115
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1115
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 1115, tmp);
    } else {

    }
#line 1116
    return (1);
  } else {

  }
#line 1119
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1119
  if (tmp___2 != 0) {
#line 1120
    drbd_rs_complete_io(mdev, e->sector);
#line 1121
    put_ldev(mdev);
  } else {

  }
#line 1124
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 1125
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 1126
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1126
    if (tmp___6 != 0L) {
#line 1127
      tmp___4 = __builtin_expect((int )mdev->state.ldv_39979.pdsk > 3, 1L);
#line 1127
      if (tmp___4 != 0L) {
#line 1128
        inc_rs_pending(mdev);
#line 1129
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 1131
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1131
        if (tmp___3 != 0) {
#line 1132
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 1134
        ok = 1;
      }
    } else {
#line 1137
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1137
      if (tmp___5 != 0) {
#line 1138
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1141
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1144
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1147
  atomic_dec(& mdev->unacked_cnt);
#line 1147
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1147
  if (tmp___8 < 0) {
#line 1147
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1147, tmp___7);
  } else {

  }
#line 1149
  move_to_net_ee_or_free(mdev, e);
#line 1151
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1151
  if (tmp___9 != 0L) {
#line 1152
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1153
  return (ok);
}
}
#line 1156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1158
  __mptr = (struct drbd_work  const  *)w;
#line 1158
  e = (struct drbd_epoch_entry *)__mptr;
#line 1161
  digest = 0;
#line 1162
  eq = 0;
#line 1164
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1164
  if (tmp___1 != 0L) {
#line 1165
    drbd_free_some_ee(mdev, e, 0);
#line 1166
    atomic_dec(& mdev->unacked_cnt);
#line 1166
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1166
    if (tmp___0 < 0) {
#line 1166
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1166
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1166, tmp);
    } else {

    }
#line 1167
    return (1);
  } else {

  }
#line 1170
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1170
  if (tmp___2 != 0) {
#line 1171
    drbd_rs_complete_io(mdev, e->sector);
#line 1172
    put_ldev(mdev);
  } else {

  }
#line 1175
  di = e->ldv_49189.digest;
#line 1177
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1177
  if (tmp___6 != 0L) {
#line 1181
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1182
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1182
      digest_size = (int )tmp___3;
#line 1183
      if (di->digest_size != digest_size) {
#line 1183
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1183);
      } else {

      }
#line 1184
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1186
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1187
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1188
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1188
      eq = tmp___4 == 0;
#line 1189
      kfree((void const   *)digest);
    } else {

    }
#line 1192
    if (eq != 0) {
#line 1193
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1193U);
#line 1195
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1196
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1198
      inc_rs_pending(mdev);
#line 1199
      e->ldv_49189.block_id = 0xffffffffffffffffULL;
#line 1200
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1201
      kfree((void const   *)di);
#line 1202
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1205
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1206
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1206
    if (tmp___5 != 0) {
#line 1207
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1210
  atomic_dec(& mdev->unacked_cnt);
#line 1210
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1210
  if (tmp___8 < 0) {
#line 1210
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1210, tmp___7);
  } else {

  }
#line 1211
  move_to_net_ee_or_free(mdev, e);
#line 1213
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1213
  if (tmp___9 != 0L) {
#line 1214
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1215
  return (ok);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1221
  __mptr = (struct drbd_work  const  *)w;
#line 1221
  e = (struct drbd_epoch_entry *)__mptr;
#line 1222
  sector = e->sector;
#line 1223
  size = e->size;
#line 1226
  ok = 1;
#line 1228
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1228
  if (tmp != 0L) {
#line 1229
    goto out;
  } else {

  }
#line 1231
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1231
  digest_size = (int )tmp___0;
#line 1232
  digest = kmalloc((size_t )digest_size, 16U);
#line 1233
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1234
    ok = 0;
#line 1235
    goto out;
  } else {

  }
#line 1238
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1238
  if (tmp___1 != 0L) {
#line 1239
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1241
    memset(digest, 0, (size_t )digest_size);
  }
#line 1248
  drbd_free_some_ee(mdev, e, 0);
#line 1249
  e = 0;
#line 1250
  inc_rs_pending(mdev);
#line 1251
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1254
  if (ok == 0) {
#line 1255
    atomic_dec(& mdev->rs_pending_cnt);
#line 1255
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1255
    if (tmp___3 < 0) {
#line 1255
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1255
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1255, tmp___2);
    } else {

    }
  } else {

  }
#line 1256
  kfree((void const   *)digest);
  out: ;
#line 1259
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1260
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1261
  atomic_dec(& mdev->unacked_cnt);
#line 1261
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1261
  if (tmp___5 < 0) {
#line 1261
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1261, tmp___4);
  } else {

  }
#line 1262
  return (ok);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1267
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1268
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1270
    mdev->ov_last_oos_start = sector;
#line 1271
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1273
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                         1273U);
#line 1274
  return;
}
}
#line 1276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  bool stop_sector_reached ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1278
  __mptr = (struct drbd_work  const  *)w;
#line 1278
  e = (struct drbd_epoch_entry *)__mptr;
#line 1281
  sector = e->sector;
#line 1282
  size = e->size;
#line 1284
  eq = 0;
#line 1285
  stop_sector_reached = 0;
#line 1287
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1287
  if (tmp___1 != 0L) {
#line 1288
    drbd_free_some_ee(mdev, e, 0);
#line 1289
    atomic_dec(& mdev->unacked_cnt);
#line 1289
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1289
    if (tmp___0 < 0) {
#line 1289
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1289
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1289, tmp);
    } else {

    }
#line 1290
    return (1);
  } else {

  }
#line 1295
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1295
  if (tmp___2 != 0) {
#line 1296
    drbd_rs_complete_io(mdev, e->sector);
#line 1297
    put_ldev(mdev);
  } else {

  }
#line 1300
  di = e->ldv_49189.digest;
#line 1302
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1302
  if (tmp___5 != 0L) {
#line 1303
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1303
    digest_size = (int )tmp___3;
#line 1304
    digest = kmalloc((size_t )digest_size, 16U);
#line 1305
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1306
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1308
      if (di->digest_size != digest_size) {
#line 1308
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
                1308);
      } else {

      }
#line 1309
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1309
      eq = tmp___4 == 0;
#line 1310
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1319
  drbd_free_some_ee(mdev, e, 0);
#line 1320
  if (eq == 0) {
#line 1321
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1323
    ov_oos_print(mdev);
  }
#line 1325
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1328
  atomic_dec(& mdev->unacked_cnt);
#line 1328
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1328
  if (tmp___7 < 0) {
#line 1328
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1328, tmp___6);
  } else {

  }
#line 1330
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1333
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1334
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1336
  stop_sector_reached = (bool )(mdev->agreed_pro_version > 96 && (sector_t )(size >> 9) + sector >= mdev->ov_stop_sector);
#line 1339
  if (mdev->ov_left == 0UL || (int )stop_sector_reached) {
#line 1340
    ov_oos_print(mdev);
#line 1341
    drbd_resync_finished(mdev);
  } else {

  }
#line 1344
  return (ok);
}
}
#line 1347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1349
  __mptr = (struct drbd_work  const  *)w;
#line 1349
  b = (struct drbd_wq_barrier *)__mptr;
#line 1350
  complete(& b->done);
#line 1351
  return (1);
}
}
#line 1354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1356
  __mptr = (struct drbd_work  const  *)w;
#line 1356
  b = (struct drbd_tl_epoch *)__mptr;
#line 1357
  p = & mdev->data.sbuf.barrier;
#line 1358
  ok = 1;
#line 1365
  spin_lock_irq(& mdev->req_lock);
#line 1366
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_39979.conn <= 9) {
#line 1367
    cancel = 1;
  } else {

  }
#line 1368
  spin_unlock_irq(& mdev->req_lock);
#line 1369
  if (cancel != 0) {
#line 1370
    return (1);
  } else {

  }
#line 1372
  tmp = drbd_get_data_sock(mdev);
#line 1372
  if (tmp == 0) {
#line 1373
    return (0);
  } else {

  }
#line 1374
  p->barrier = b->br_number;
#line 1378
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1380
  drbd_put_data_sock(mdev);
#line 1382
  return (ok);
}
}
#line 1385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1387
  if (cancel != 0) {
#line 1388
    return (1);
  } else {

  }
#line 1389
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1389
  return (tmp);
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1394
  __mptr = (struct drbd_work  const  *)w;
#line 1394
  req = (struct drbd_request *)__mptr;
#line 1397
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1397
  if (tmp != 0L) {
#line 1398
    req_mod(req, send_canceled);
#line 1399
    return (1);
  } else {

  }
#line 1402
  ok = drbd_send_oos(mdev, req);
#line 1403
  req_mod(req, oos_handed_to_network);
#line 1405
  return (ok);
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1416
  __mptr = (struct drbd_work  const  *)w;
#line 1416
  req = (struct drbd_request *)__mptr;
#line 1419
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1419
  if (tmp != 0L) {
#line 1420
    req_mod(req, send_canceled);
#line 1421
    return (1);
  } else {

  }
#line 1424
  ok = drbd_send_dblock(mdev, req);
#line 1425
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1427
  return (ok);
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1438
  __mptr = (struct drbd_work  const  *)w;
#line 1438
  req = (struct drbd_request *)__mptr;
#line 1441
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1441
  if (tmp != 0L) {
#line 1442
    req_mod(req, send_canceled);
#line 1443
    return (1);
  } else {

  }
#line 1446
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1449
  if (ok == 0) {
#line 1452
    if ((int )mdev->state.ldv_39979.conn > 9) {
#line 1453
      val.i = 0U;
#line 1453
      val.ldv_39979.conn = 5U;
#line 1453
      mask.i = 0U;
#line 1453
      mask.ldv_39979.conn = 31U;
#line 1453
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1455
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1457
  return (ok);
}
}
#line 1460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1462
  __mptr = (struct drbd_work  const  *)w;
#line 1462
  req = (struct drbd_request *)__mptr;
#line 1464
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 4096UL) != 0UL) {
#line 1465
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1471
  drbd_req_make_private_bio(req, req->master_bio);
#line 1472
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1473
  generic_make_request(req->private_bio);
#line 1475
  return (1);
}
}
#line 1478 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1480
  odev = mdev;
  ldv_51927: ;
#line 1483
  if (odev->sync_conf.after == -1) {
#line 1484
    return (1);
  } else {

  }
#line 1485
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1486
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1486
  if (_b != 0) {
#line 1486
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1486);
  } else {

  }
#line 1486
  if (_b != 0) {
#line 1486
    return (1);
  } else {

  }
#line 1487
  if (((((int )odev->state.ldv_39979.conn > 15 && (int )odev->state.ldv_39979.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1491
    return (0);
  } else {

  }
#line 1492
  goto ldv_51927;
}
}
#line 1501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1504
  rv = 0;
#line 1506
  i = 0;
#line 1506
  goto ldv_51938;
  ldv_51937: 
#line 1507
  odev = minor_to_mdev((unsigned int )i);
#line 1508
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1509
    goto ldv_51934;
  } else {

  }
#line 1510
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1511
    goto ldv_51934;
  } else {

  }
#line 1512
  tmp___0 = _drbd_may_sync_now(odev);
#line 1512
  if (tmp___0 == 0) {
#line 1513
    __ns.i = odev->state.i;
#line 1513
    __ns.ldv_39979.aftr_isp = 1U;
#line 1513
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1513
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_51934: 
#line 1506
  i = i + 1;
  ldv_51938: ;
#line 1506
  if ((unsigned int )i < minor_count) {
#line 1507
    goto ldv_51937;
  } else {

  }

#line 1517
  return (rv);
}
}
#line 1526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1529
  rv = 0;
#line 1531
  i = 0;
#line 1531
  goto ldv_51950;
  ldv_51949: 
#line 1532
  odev = minor_to_mdev((unsigned int )i);
#line 1533
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1534
    goto ldv_51946;
  } else {

  }
#line 1535
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1536
    goto ldv_51946;
  } else {

  }
#line 1537
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1538
    tmp___0 = _drbd_may_sync_now(odev);
#line 1538
    if (tmp___0 != 0) {
#line 1539
      __ns.i = odev->state.i;
#line 1539
      __ns.ldv_39979.aftr_isp = 0U;
#line 1539
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1539
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_51946: 
#line 1531
  i = i + 1;
  ldv_51950: ;
#line 1531
  if ((unsigned int )i < minor_count) {
#line 1532
    goto ldv_51949;
  } else {

  }

#line 1544
  return (rv);
}
}
#line 1547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1549
  _raw_write_lock_irq(& global_state_lock);
#line 1550
  _drbd_resume_next(mdev);
#line 1551
  _raw_write_unlock_irq(& global_state_lock);
#line 1552
  return;
}
}
#line 1554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1556
  _raw_write_lock_irq(& global_state_lock);
#line 1557
  _drbd_pause_after(mdev);
#line 1558
  _raw_write_unlock_irq(& global_state_lock);
#line 1559
  return;
}
}
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1565
  if (o_minor == -1) {
#line 1566
    return (101);
  } else {

  }
#line 1567
  if (o_minor < -1) {
#line 1568
    return (132);
  } else {
#line 1567
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1567
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1568
      return (132);
    } else {

    }
  }
#line 1571
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_51963: ;
#line 1573
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1574
    return (133);
  } else {

  }
#line 1577
  if (odev->sync_conf.after == -1) {
#line 1578
    return (101);
  } else {

  }
#line 1581
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1582
  goto ldv_51963;
}
}
#line 1585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1590
  _raw_write_lock_irq(& global_state_lock);
#line 1591
  retcode = sync_after_error(mdev, na);
#line 1592
  if (retcode == 101) {
#line 1593
    mdev->sync_conf.after = na;
    ldv_51970: 
#line 1595
    changes = _drbd_pause_after(mdev);
#line 1596
    tmp = _drbd_resume_next(mdev);
#line 1596
    changes = tmp | changes;
#line 1597
    if (changes != 0) {
#line 1598
      goto ldv_51970;
    } else {

    }

  } else {

  }
#line 1599
  _raw_write_unlock_irq(& global_state_lock);
#line 1600
  return (retcode);
}
}
#line 1603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1605
  atomic_set(& mdev->rs_sect_in, 0);
#line 1606
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1607
  mdev->rs_in_flight = 0;
#line 1608
  mdev->rs_planed = 0;
#line 1609
  spin_lock(& mdev->peer_seq_lock);
#line 1610
  fifo_set(& mdev->rs_plan_s, 0);
#line 1611
  spin_unlock(& mdev->peer_seq_lock);
#line 1612
  return;
}
}
#line 1622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1627
  if ((int )mdev->state.ldv_39979.conn > 15 && (int )mdev->state.ldv_39979.conn <= 21) {
#line 1628
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1629
    return;
  } else {

  }
#line 1632
  if ((unsigned int )side == 17U) {
#line 1636
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1637
    r = (r >> 8) & 255;
#line 1638
    if (r > 0) {
#line 1639
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1641
      val.i = 0U;
#line 1641
      val.ldv_39979.conn = 1U;
#line 1641
      mask.i = 0U;
#line 1641
      mask.ldv_39979.conn = 31U;
#line 1641
      drbd_force_state(mdev, mask, val);
#line 1642
      return;
    } else {

    }
  } else {
#line 1645
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1646
    r = (r >> 8) & 255;
#line 1647
    if (r > 0) {
#line 1648
      if (r == 3) {
#line 1649
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1652
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1654
        val___0.i = 0U;
#line 1654
        val___0.ldv_39979.conn = 1U;
#line 1654
        mask___0.i = 0U;
#line 1654
        mask___0.ldv_39979.conn = 31U;
#line 1654
        drbd_force_state(mdev, mask___0, val___0);
#line 1655
        return;
      }
    } else {

    }
  }
#line 1660
  drbd_state_lock(mdev);
#line 1661
  _raw_write_lock_irq(& global_state_lock);
#line 1662
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1662
  if (tmp == 0) {
#line 1663
    _raw_write_unlock_irq(& global_state_lock);
#line 1664
    drbd_state_unlock(mdev);
#line 1665
    return;
  } else {

  }
#line 1668
  ns.i = mdev->state.i;
#line 1670
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1670
  ns.ldv_39979.aftr_isp = tmp___0 == 0;
#line 1672
  ns.ldv_39979.conn = (unsigned char )side;
#line 1674
  if ((unsigned int )side == 17U) {
#line 1675
    ns.ldv_39979.disk = 4U;
  } else {
#line 1677
    ns.ldv_39979.pdsk = 4U;
  }
#line 1679
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1679
  r = (int )tmp___1;
#line 1680
  ns = mdev->state;
#line 1682
  if ((int )ns.ldv_39979.conn <= 9) {
#line 1683
    r = 0;
  } else {

  }
#line 1685
  if (r == 1) {
#line 1686
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1686
    tw = tmp___2;
#line 1687
    now = jiffies;
#line 1690
    mdev->rs_failed = 0UL;
#line 1691
    mdev->rs_paused = 0UL;
#line 1692
    mdev->rs_same_csum = 0UL;
#line 1693
    mdev->rs_last_events = 0;
#line 1694
    mdev->rs_last_sect_ev = 0;
#line 1695
    mdev->rs_total = tw;
#line 1696
    mdev->rs_start = now;
#line 1697
    i = 0;
#line 1697
    goto ldv_51993;
    ldv_51992: 
#line 1698
    mdev->rs_mark_left[i] = tw;
#line 1699
    mdev->rs_mark_time[i] = now;
#line 1697
    i = i + 1;
    ldv_51993: ;
#line 1697
    if (i <= 7) {
#line 1698
      goto ldv_51992;
    } else {

    }
#line 1701
    _drbd_pause_after(mdev);
  } else {

  }
#line 1703
  _raw_write_unlock_irq(& global_state_lock);
#line 1705
  if (r == 1) {
#line 1706
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_39979.conn);
#line 1706
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1710
    if ((unsigned int )side == 17U) {
#line 1711
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1720
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1721
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1723
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1734
      if ((unsigned int )side == 16U) {
#line 1735
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1738
      drbd_resync_finished(mdev);
    } else {

    }
#line 1741
    drbd_rs_controller_reset(mdev);
#line 1746
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1747
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1749
    drbd_md_sync(mdev);
  } else {

  }
#line 1751
  put_ldev(mdev);
#line 1752
  drbd_state_unlock(mdev);
#line 1753
  return;
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1757
  mdev = thi->mdev;
#line 1758
  w = 0;
#line 1759
  work_list.next = & work_list;
#line 1759
  work_list.prev = & work_list;
#line 1760
  intr = 0;
#line 1762
  tmp = mdev_to_minor(mdev);
#line 1762
  tmp___0 = get_current();
#line 1762
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1764
  goto ldv_52006;
  ldv_52016: 
#line 1765
  drbd_thread_current_set_cpu(mdev);
#line 1767
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1767
  if (tmp___1 != 0) {
#line 1768
    ldv_mutex_lock_79(& mdev->data.mutex);
#line 1769
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1770
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1771
    ldv_mutex_unlock_80(& mdev->data.mutex);
#line 1773
    intr = down_interruptible(& mdev->data.work.s);
#line 1775
    ldv_mutex_lock_81(& mdev->data.mutex);
#line 1776
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1777
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1778
    ldv_mutex_unlock_82(& mdev->data.mutex);
  } else {

  }
#line 1781
  if (intr != 0) {
#line 1782
    if (intr != -4) {
#line 1782
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1782);
    } else {

    }
#line 1783
    tmp___2 = get_current();
#line 1783
    flush_signals(tmp___2);
#line 1784
    tmp___3 = get_t_state(thi);
#line 1784
    _b = (unsigned int )tmp___3 == 1U;
#line 1784
    if (_b != 0) {
#line 1784
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
              1784);
    } else {

    }
#line 1784
    if (_b != 0) {
#line 1785
      goto ldv_52006;
    } else {

    }
#line 1786
    goto ldv_52007;
  } else {

  }
#line 1789
  tmp___4 = get_t_state(thi);
#line 1789
  if ((unsigned int )tmp___4 != 1U) {
#line 1790
    goto ldv_52007;
  } else {

  }
#line 1795
  w = 0;
#line 1796
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1797
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1797
  _b___0 = tmp___5 != 0;
#line 1797
  if (_b___0 != 0) {
#line 1797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1797);
  } else {

  }
#line 1797
  if (_b___0 != 0) {
#line 1809
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1810
    goto ldv_52006;
  } else {

  }
#line 1812
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1812
  w = (struct drbd_work *)__mptr;
#line 1813
  list_del_init(& w->list);
#line 1814
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1816
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_39979.conn <= 9);
#line 1816
  if (tmp___6 == 0) {
#line 1818
    if ((int )mdev->state.ldv_39979.conn > 9) {
#line 1820
      val.i = 0U;
#line 1820
      val.ldv_39979.conn = 5U;
#line 1820
      mask.i = 0U;
#line 1820
      mask.ldv_39979.conn = 31U;
#line 1820
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_52006: 
#line 1764
  tmp___7 = get_t_state(thi);
#line 1764
  if ((unsigned int )tmp___7 == 1U) {
#line 1765
    goto ldv_52016;
  } else {

  }
  ldv_52007: 
#line 1823
  tmp___8 = drbd_test_flag(mdev, DEVICE_DYING);
#line 1823
  if (tmp___8 == 0) {
#line 1823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_test_flag(mdev, DEVICE_DYING) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1823);
  } else {

  }
#line 1824
  tmp___9 = drbd_test_flag(mdev, CONFIG_PENDING);
#line 1824
  if (tmp___9 == 0) {
#line 1824
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_test_flag(mdev, CONFIG_PENDING) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1824);
  } else {

  }
#line 1826
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1827
  i = 0;
#line 1828
  goto ldv_52023;
  ldv_52022: 
#line 1829
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1830
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1832
  goto ldv_52020;
  ldv_52019: 
#line 1833
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1833
  w = (struct drbd_work *)__mptr___0;
#line 1834
  list_del_init(& w->list);
#line 1835
  (*(w->cb))(mdev, w, 1);
#line 1836
  i = i + 1;
  ldv_52020: 
#line 1832
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1832
  if (tmp___10 == 0) {
#line 1833
    goto ldv_52019;
  } else {

  }
#line 1839
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_52023: 
#line 1828
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1828
  if (tmp___11 == 0) {
#line 1829
    goto ldv_52022;
  } else {

  }
#line 1841
  sema_init(& mdev->data.work.s, 0);
#line 1847
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1849
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared",
            1849);
  } else {

  }
#line 1852
  drbd_thread_stop(& mdev->receiver);
#line 1853
  drbd_mdev_cleanup(mdev);
#line 1855
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1857
  drbd_clear_flag(mdev, DEVICE_DYING);
#line 1858
  drbd_clear_flag(mdev, CONFIG_PENDING);
#line 1859
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1861
  return (0);
}
}
#line 1864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_63(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1869
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1871
  mutex_lock(ldv_func_arg1);
#line 1872
  return;
}
}
#line 1874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_64(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1879
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1881
  mutex_unlock(ldv_func_arg1);
#line 1882
  return;
}
}
#line 1884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_65(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1889
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1891
  mutex_lock(ldv_func_arg1);
#line 1892
  return;
}
}
#line 1894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
int ldv_mutex_trylock_66(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1899
  tmp = mutex_trylock(ldv_func_arg1);
#line 1899
  ldv_func_res = tmp;
#line 1901
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1901
  return (tmp___0);
#line 1903
  return (ldv_func_res);
}
}
#line 1906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_67(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1911
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1913
  mutex_unlock(ldv_func_arg1);
#line 1914
  return;
}
}
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_68(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1921
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1923
  mutex_lock(ldv_func_arg1);
#line 1924
  return;
}
}
#line 1926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_69(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1931
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1933
  mutex_unlock(ldv_func_arg1);
#line 1934
  return;
}
}
#line 1936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_70(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1941
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1943
  mutex_lock(ldv_func_arg1);
#line 1944
  return;
}
}
#line 1946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_71(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1951
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1953
  mutex_unlock(ldv_func_arg1);
#line 1954
  return;
}
}
#line 1956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_72(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1961
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1963
  mutex_lock(ldv_func_arg1);
#line 1964
  return;
}
}
#line 1966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1971
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1973
  mutex_unlock(ldv_func_arg1);
#line 1974
  return;
}
}
#line 1976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_74(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1981
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1983
  mutex_lock(ldv_func_arg1);
#line 1984
  return;
}
}
#line 1986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_75(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1991
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1993
  mutex_unlock(ldv_func_arg1);
#line 1994
  return;
}
}
#line 1996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2001
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2003
  mutex_unlock(ldv_func_arg1);
#line 2004
  return;
}
}
#line 2006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_77(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2011
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2013
  mutex_lock(ldv_func_arg1);
#line 2014
  return;
}
}
#line 2016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2021
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2023
  mutex_unlock(ldv_func_arg1);
#line 2024
  return;
}
}
#line 2026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_79(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2031
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2033
  mutex_lock(ldv_func_arg1);
#line 2034
  return;
}
}
#line 2036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2041
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2043
  mutex_unlock(ldv_func_arg1);
#line 2044
  return;
}
}
#line 2046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_lock_81(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2051
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2053
  mutex_lock(ldv_func_arg1);
#line 2054
  return;
}
}
#line 2056 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_worker.c.prepared"
void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2061
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2063
  mutex_unlock(ldv_func_arg1);
#line 2064
  return;
}
}
#line 248 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 252
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 256
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/uapi/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 177 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 642 "include/linux/list.h"
__inline static void hlist_add_fake(struct hlist_node *n ) 
{ 


  {
#line 644
  n->pprev = & n->next;
#line 645
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 28 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 105 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 108
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 108
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 108
  if (tmp___1 != 0L) {
#line 108
    __ret_warn_on = ! __warned;
#line 108
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp != 0L) {
#line 108
      warn_slowpath_null("include/linux/cpumask.h", 108);
    } else {

    }
#line 108
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 108
    if (tmp___0 != 0L) {
#line 108
      __warned = 1;
    } else {

    }
  } else {

  }
#line 108
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 110
  return (cpu);
}
}
#line 170 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 173
  if (n != -1) {
#line 174
    cpumask_check((unsigned int )n);
  } else {

  }
#line 175
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 175
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_116(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_119(struct mutex *ldv_func_arg1 ) ;
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
extern int mutex_lock_interruptible(struct mutex * ) ;
#line 8
int ldv_mutex_lock_interruptible_117(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_103(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_112(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) ;
#line 84
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___0(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6306;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6306;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6306;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6306;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_6306: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 89 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 91
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 91
  return (tmp);
}
}
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 245 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 345 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 360
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 461 "include/linux/module.h"
extern void __module_get(struct module * ) ;
#line 453 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 57 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 59
  page_link = sg->page_link & 3UL;
#line 65
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 65
  if (tmp != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19174: ;
#line 65
    goto ldv_19174;
  } else {

  }
#line 67
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 67
  if (tmp___0 != 0L) {
#line 67
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (67), "i" (12UL));
    ldv_19175: ;
#line 67
    goto ldv_19175;
  } else {

  }
#line 68
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 68
  if (tmp___1 != 0L) {
#line 68
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (68), "i" (12UL));
    ldv_19176: ;
#line 68
    goto ldv_19176;
  } else {

  }
#line 70
  sg->page_link = page_link | (unsigned long )page;
#line 71
  return;
}
}
#line 87 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 90
  sg_assign_page___0(sg, page);
#line 91
  sg->offset = offset;
#line 92
  sg->length = len;
#line 93
  return;
}
}
#line 111 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 114
  tmp = __phys_addr((unsigned long )buf);
#line 114
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 115
  return;
}
}
#line 263 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 320
extern long schedule_timeout(long  ) ;
#line 323
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2533 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2535
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2535
  return (tmp);
}
}
#line 2559 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2561
  tmp = test_tsk_thread_flag(p, 2);
#line 2561
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2561
  return ((int )tmp___0);
}
}
#line 17 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 28
extern u32 random32(void) ;
#line 205 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 207
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 209
extern void sock_release(struct socket * ) ;
#line 212
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 492 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 495 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 497
  return;
}
}
#line 520 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 522
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1111 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1113
  return ((struct crypto_hash *)tfm);
}
}
#line 1123 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1126
  type = type & 4294967280U;
#line 1127
  mask = mask & 4294967280U;
#line 1128
  type = type | 8U;
#line 1129
  mask = mask | 14U;
#line 1131
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1131
  tmp___0 = __crypto_hash_cast(tmp);
#line 1131
  return (tmp___0);
}
}
#line 1139 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1141
  tmp = crypto_hash_tfm(tfm);
#line 1141
  crypto_free_tfm(tmp);
#line 1142
  return;
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1210
  tmp = crypto_hash_crt(desc->tfm);
#line 1210
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1210
  return (tmp___0);
}
}
#line 1213 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1216
  tmp = crypto_hash_crt(hash);
#line 1216
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1216
  return (tmp___0);
}
}
#line 439 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 441
  disk->part0.nr_sects = size;
#line 442
  return;
}
}
#line 56 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 58
  __might_sleep("include/linux/highmem.h", 58, 0);
#line 59
  tmp = lowmem_page_address((struct page  const  *)page);
#line 59
  return (tmp);
}
}
#line 62 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 64
  return;
}
}
#line 215 "include/linux/bio.h"
extern struct bio *bio_alloc_bioset(gfp_t  , int  , struct bio_set * ) ;
#line 223 "include/linux/bio.h"
__inline static struct bio *bio_alloc(gfp_t gfp_mask , unsigned int nr_iovecs ) 
{ 
  struct bio *tmp ;

  {
#line 225
  tmp = bio_alloc_bioset(gfp_mask, (int )nr_iovecs, fs_bio_set);
#line 225
  return (tmp);
}
}
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_test_and_clear_flag(struct drbd_conf *mdev , enum drbd_flag f ) 
{ 
  int tmp ;

  {
#line 1171
  tmp = test_and_clear_bit((int )f, (unsigned long volatile   *)(& mdev->drbd_flags));
#line 1171
  return (tmp);
}
}
#line 1233
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1239
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1248
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1258
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1260
void tl_clear(struct drbd_conf *mdev ) ;
#line 1262
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1265
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1266
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1269
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1271
int drbd_send_current_state(struct drbd_conf *mdev ) ;
#line 1280
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1282
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1283
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1287
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1289
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1305
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1307
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1316
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1318
void drbd_uuid_move_history(struct drbd_conf *mdev ) ;
#line 1319
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1334
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1337
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1338
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1536
mempool_t *drbd_ee_mempool ;
#line 1551
struct page *drbd_pp_pool ;
#line 1552
spinlock_t drbd_pp_lock ;
#line 1553
int drbd_pp_vacant ;
#line 1588
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1590
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1591
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1592
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1593
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1597
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1658
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1668
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1670
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1674
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1675
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1705 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1707
  val = 1;
#line 1708
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1710
  return;
}
}
#line 1712 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1714
  val = 2;
#line 1715
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1717
  return;
}
}
#line 1719
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1731
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1733
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1757
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1830 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1832
  page = e->pages;
#line 1833
  goto ldv_51493;
  ldv_51492: 
#line 1834
  tmp = page_count(page);
#line 1834
  if (tmp > 1) {
#line 1835
    return (1);
  } else {

  }
#line 1833
  page = page_chain_next(page);
  ldv_51493: ;
#line 1833
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1833
    tmp___0 = page_chain_next(page);
#line 1833
    __builtin_prefetch((void const   *)tmp___0);
#line 1833
    if (1 != 0) {
#line 1834
      goto ldv_51492;
    } else {
#line 1836
      goto ldv_51494;
    }
  } else {

  }
  ldv_51494: ;
#line 1837
  return (0);
}
}
#line 1875 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1879
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1879
  return ((int )tmp);
}
}
#line 1968 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1970
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1973
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1976
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 2011 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 2014
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 2018
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 2018
  if (tmp___1 != 0UL) {
#line 2018
    __min1 = 2251799813685248UL;
#line 2018
    tmp___0 = drbd_md_first_sector(bdev);
#line 2018
    __min2 = tmp___0;
#line 2018
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 2018
    s = 0UL;
  }
#line 2021
  goto ldv_51572;
  case -2: 
#line 2023
  __min1___0 = 2251799813685248UL;
#line 2023
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 2023
  __min2___0 = tmp___2;
#line 2023
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2026
  __min1___1 = s;
#line 2026
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 2026
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 2029
  goto ldv_51572;
  default: 
#line 2031
  __min1___2 = 8587575296UL;
#line 2031
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 2031
  __min2___2 = tmp___3;
#line 2031
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51572: ;
#line 2034
  return (s);
}
}
#line 2068 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 2071
  tmp = spinlock_check(& q->q_lock);
#line 2071
  flags = _raw_spin_lock_irqsave(tmp);
#line 2072
  list_add(& w->list, & q->q);
#line 2073
  up(& q->s);
#line 2075
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 2076
  return;
}
}
#line 2108 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2111
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2111
  return (tmp);
}
}
#line 2114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2117
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2117
  return (tmp);
}
}
#line 2199 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2201
  atomic_inc(& mdev->unacked_cnt);
#line 2202
  return;
}
}
#line 2215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2217
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2217
  if (tmp != 0) {
#line 2218
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2219
  return;
}
}
#line 2227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2231
  atomic_inc(& mdev->net_cnt);
#line 2232
  have_net_conf = (int )mdev->state.ldv_39979.conn > 1;
#line 2233
  if (have_net_conf == 0) {
#line 2234
    put_net_conf(mdev);
  } else {

  }
#line 2235
  return (have_net_conf);
}
}
#line 2493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2495
  changed = mdev->ed_uuid != val;
#line 2496
  mdev->ed_uuid = val;
#line 2497
  return (changed);
}
}
#line 2500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2507
  return ((int )a - (int )b);
}
}
#line 2516 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2519
  spin_lock(& mdev->peer_seq_lock);
#line 2520
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2520
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2521
  mdev->peer_seq = m;
#line 2522
  spin_unlock(& mdev->peer_seq_lock);
#line 2523
  if (m == new_seq) {
#line 2524
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2525
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("\vdrbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_51848: ;
#line 234
    goto ldv_51848;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_51853: ;
#line 243
    goto ldv_51853;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 260
  tmp = ar_hash_slot(mdev, sector);
#line 260
  slot = tmp;
#line 264
  n = slot->first;
#line 264
  goto ldv_51870;
  ldv_51869: ;
#line 265
  if ((unsigned long )req == (unsigned long )id) {
#line 266
    if (req->sector != sector) {
#line 266
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              266);
    } else {

    }
#line 267
    return (req);
  } else {

  }
#line 264
  n = n->next;
  ldv_51870: ;
#line 264
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 264
    __mptr = (struct hlist_node  const  *)n;
#line 264
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 264
    if (1 != 0) {
#line 265
      goto ldv_51869;
    } else {
#line 267
      goto ldv_51871;
    }
  } else {

  }
  ldv_51871: ;
#line 270
  return (0);
}
}
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 313
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_51938: ;
#line 162
  goto ldv_51938;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 130
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 132
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 133
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 152
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 152
  if (tmp___0 != 0L) {
#line 152
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (152), "i" (12UL));
    ldv_52018: ;
#line 152
    goto ldv_52018;
  } else {

  }
#line 153
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 153
  if (tmp___1 != 0L) {
#line 153
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (153), "i" (12UL));
    ldv_52019: ;
#line 153
    goto ldv_52019;
  } else {

  }
#line 155
  page = *head;
#line 157
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 158
    return (0);
  } else {

  }
#line 160
  goto ldv_52022;
  ldv_52021: 
#line 161
  tmp = page_chain_next(page);
#line 162
  n = n - 1;
#line 162
  if (n == 0) {
#line 163
    goto ldv_52020;
  } else {

  }
#line 164
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 166
    return (0);
  } else {

  }
#line 167
  page = tmp;
  ldv_52022: ;
#line 160
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 161
    goto ldv_52021;
  } else {

  }
  ldv_52020: 
#line 171
  page->ldv_14722.private = 0UL;
#line 173
  page = *head;
#line 174
  *head = tmp;
#line 175
  return (page);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 184
  i = 1;
#line 185
  goto ldv_52030;
  ldv_52029: 
#line 186
  i = i + 1;
#line 186
  page = tmp;
  ldv_52030: 
#line 185
  tmp = page_chain_next(page);
#line 185
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 186
    goto ldv_52029;
  } else {

  }

#line 187
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 188
    *len = i;
  } else {

  }
#line 189
  return (page);
}
}
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 195
  i = 0;
#line 196
  goto ldv_52039;
  ldv_52038: 
#line 197
  put_page(page);
#line 198
  i = i + 1;
#line 196
  page = tmp;
  ldv_52039: ;
#line 196
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 196
    tmp = page_chain_next(page);
#line 196
    if (1 != 0) {
#line 197
      goto ldv_52038;
    } else {
#line 199
      goto ldv_52040;
    }
  } else {

  }
  ldv_52040: ;
#line 200
  return (i);
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 208
  tmp = page_chain_tail(chain_first, 0);
#line 209
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 209
  if (tmp___0 != 0L) {
#line 209
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (209), "i" (12UL));
    ldv_52047: ;
#line 209
    goto ldv_52047;
  } else {

  }
#line 213
  chain_last->ldv_14722.private = (unsigned long )*head;
#line 214
  *head = chain_first;
#line 215
  return;
}
}
#line 217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 219
  page = 0;
#line 220
  tmp = 0;
#line 221
  i = 0;
#line 225
  if (drbd_pp_vacant >= number) {
#line 226
    spin_lock(& drbd_pp_lock);
#line 227
    page = page_chain_del(& drbd_pp_pool, number);
#line 228
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 229
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 230
    spin_unlock(& drbd_pp_lock);
#line 231
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 232
      return (page);
    } else {

    }
  } else {

  }
#line 238
  i = 0;
#line 238
  goto ldv_52057;
  ldv_52056: 
#line 239
  tmp = alloc_pages(514U, 0U);
#line 240
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 241
    goto ldv_52055;
  } else {

  }
#line 242
  tmp->ldv_14722.private = (unsigned long )page;
#line 243
  page = tmp;
#line 238
  i = i + 1;
  ldv_52057: ;
#line 238
  if (i < number) {
#line 239
    goto ldv_52056;
  } else {

  }
  ldv_52055: ;
#line 246
  if (i == number) {
#line 247
    return (page);
  } else {

  }
#line 252
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 253
    tmp = page_chain_tail(page, 0);
#line 254
    spin_lock(& drbd_pp_lock);
#line 255
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 256
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 257
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 259
  return (0);
}
}
#line 262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 272
  le = mdev->net_ee.next;
#line 272
  tle = le->next;
#line 272
  goto ldv_52069;
  ldv_52068: 
#line 273
  __mptr = (struct list_head  const  *)le;
#line 273
  e = (struct drbd_epoch_entry *)__mptr;
#line 274
  tmp = drbd_ee_has_active_page___0(e);
#line 274
  if (tmp != 0) {
#line 275
    goto ldv_52067;
  } else {

  }
#line 276
  list_move(le, to_be_freed);
#line 272
  le = tle;
#line 272
  tle = le->next;
  ldv_52069: ;
#line 272
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 273
    goto ldv_52068;
  } else {

  }
  ldv_52067: ;
#line 277
  return;
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 282
  reclaimed.next = & reclaimed;
#line 282
  reclaimed.prev = & reclaimed;
#line 285
  spin_lock_irq(& mdev->req_lock);
#line 286
  reclaim_net_ee(mdev, & reclaimed);
#line 287
  spin_unlock_irq(& mdev->req_lock);
#line 289
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 289
  e = (struct drbd_epoch_entry *)__mptr;
#line 289
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 289
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 289
  goto ldv_52083;
  ldv_52082: 
#line 290
  drbd_free_some_ee(mdev, e, 1);
#line 289
  e = t;
#line 289
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 289
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_52083: ;
#line 289
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 290
    goto ldv_52082;
  } else {

  }

#line 294
  return;
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 307
  page = 0;
#line 308
  tmp = get_current();
#line 308
  wait.flags = 0U;
#line 308
  wait.private = (void *)tmp;
#line 308
  wait.func = & autoremove_wake_function;
#line 308
  wait.task_list.next = & wait.task_list;
#line 308
  wait.task_list.prev = & wait.task_list;
#line 312
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 312
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 313
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 315
  goto ldv_52094;
  ldv_52093: 
#line 316
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 318
  drbd_kick_lo_and_reclaim_net(mdev);
#line 320
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 320
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 321
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 322
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 323
      goto ldv_52092;
    } else {

    }
  } else {

  }
#line 326
  if (! retry) {
#line 327
    goto ldv_52092;
  } else {

  }
#line 329
  tmp___2 = get_current();
#line 329
  tmp___3 = signal_pending(tmp___2);
#line 329
  if (tmp___3 != 0) {
#line 330
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 331
    goto ldv_52092;
  } else {

  }
#line 334
  schedule();
  ldv_52094: ;
#line 315
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 316
    goto ldv_52093;
  } else {

  }
  ldv_52092: 
#line 336
  finish_wait(& drbd_pp_wait, & wait);
#line 338
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 339
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 340
  return (page);
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 349
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 352
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 353
    return;
  } else {

  }
#line 355
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 356
    i = page_chain_free(page);
  } else {
#line 359
    tmp = page_chain_tail(page, & i);
#line 360
    spin_lock(& drbd_pp_lock);
#line 361
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 362
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 363
    spin_unlock(& drbd_pp_lock);
  }
#line 365
  i = atomic_sub_return(i, a);
#line 366
  if (i < 0) {
#line 367
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 369
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 370
  return;
}
}
#line 387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 394
  page = 0;
#line 395
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 397
  tmp = drbd_insert_fault(mdev, 8U);
#line 397
  if (tmp != 0) {
#line 398
    return (0);
  } else {

  }
#line 400
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 400
  e = (struct drbd_epoch_entry *)tmp___0;
#line 401
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 402
    if ((gfp_mask & 512U) == 0U) {
#line 403
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 404
    return (0);
  } else {

  }
#line 407
  if (data_size != 0U) {
#line 408
    page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 409
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 410
      goto fail;
    } else {

    }
  } else {

  }
#line 413
  INIT_HLIST_NODE(& e->collision);
#line 414
  e->epoch = 0;
#line 415
  e->mdev = mdev;
#line 416
  e->pages = page;
#line 417
  atomic_set(& e->pending_bios, 0);
#line 418
  e->size = data_size;
#line 419
  e->flags = 0UL;
#line 420
  e->sector = sector;
#line 421
  e->ldv_49189.block_id = id;
#line 423
  return (e);
  fail: 
#line 426
  mempool_free((void *)e, drbd_ee_mempool);
#line 427
  return (0);
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 432
  if ((e->flags & 16UL) != 0UL) {
#line 433
    kfree((void const   *)e->ldv_49189.digest);
  } else {

  }
#line 434
  drbd_pp_free(mdev, e->pages, is_net);
#line 435
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 435
  if (tmp != 0) {
#line 435
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            435);
  } else {

  }
#line 436
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 436
  if (tmp___0 == 0) {
#line 436
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            436);
  } else {

  }
#line 437
  mempool_free((void *)e, drbd_ee_mempool);
#line 438
  return;
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 442
  work_list.next = & work_list;
#line 442
  work_list.prev = & work_list;
#line 444
  count = 0;
#line 445
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 447
  spin_lock_irq(& mdev->req_lock);
#line 448
  list_splice_init(list, & work_list);
#line 449
  spin_unlock_irq(& mdev->req_lock);
#line 451
  __mptr = (struct list_head  const  *)work_list.next;
#line 451
  e = (struct drbd_epoch_entry *)__mptr;
#line 451
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 451
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 451
  goto ldv_52135;
  ldv_52134: 
#line 452
  drbd_free_some_ee(mdev, e, is_net);
#line 453
  count = count + 1;
#line 451
  e = t;
#line 451
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 451
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_52135: ;
#line 451
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 452
    goto ldv_52134;
  } else {

  }

#line 455
  return (count);
}
}
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 470
  work_list.next = & work_list;
#line 470
  work_list.prev = & work_list;
#line 471
  reclaimed.next = & reclaimed;
#line 471
  reclaimed.prev = & reclaimed;
#line 473
  ok = (int )mdev->state.ldv_39979.conn > 8;
#line 475
  spin_lock_irq(& mdev->req_lock);
#line 476
  reclaim_net_ee(mdev, & reclaimed);
#line 477
  list_splice_init(& mdev->done_ee, & work_list);
#line 478
  spin_unlock_irq(& mdev->req_lock);
#line 480
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 480
  e = (struct drbd_epoch_entry *)__mptr;
#line 480
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 480
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 480
  goto ldv_52152;
  ldv_52151: 
#line 481
  drbd_free_some_ee(mdev, e, 1);
#line 480
  e = t;
#line 480
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 480
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_52152: ;
#line 480
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 481
    goto ldv_52151;
  } else {

  }
#line 487
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 487
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 487
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 487
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 487
  goto ldv_52161;
  ldv_52160: 
#line 489
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 489
  ok = tmp != 0 && ok != 0;
#line 490
  drbd_free_some_ee(mdev, e, 0);
#line 487
  e = t;
#line 487
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 487
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_52161: ;
#line 487
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 488
    goto ldv_52160;
  } else {

  }
#line 492
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 494
  return (ok);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 499
  tmp = get_current();
#line 499
  wait.flags = 0U;
#line 499
  wait.private = (void *)tmp;
#line 499
  wait.func = & autoremove_wake_function;
#line 499
  wait.task_list.next = & wait.task_list;
#line 499
  wait.task_list.prev = & wait.task_list;
#line 503
  goto ldv_52169;
  ldv_52168: 
#line 504
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 505
  spin_unlock_irq(& mdev->req_lock);
#line 506
  io_schedule();
#line 507
  finish_wait(& mdev->ee_wait, & wait);
#line 508
  spin_lock_irq(& mdev->req_lock);
  ldv_52169: 
#line 503
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 503
  if (tmp___0 == 0) {
#line 504
    goto ldv_52168;
  } else {

  }

#line 508
  return;
}
}
#line 512 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 514
  spin_lock_irq(& mdev->req_lock);
#line 515
  _drbd_wait_ee_list_empty(mdev, head);
#line 516
  spin_unlock_irq(& mdev->req_lock);
#line 517
  return;
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 524
  sk = sock->sk;
#line 525
  err = 0;
#line 527
  *what = "listen";
#line 528
  err = (*((sock->ops)->listen))(sock, 5);
#line 529
  if (err < 0) {
#line 530
    goto out;
  } else {

  }
#line 532
  *what = "sock_create_lite";
#line 533
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 535
  if (err < 0) {
#line 536
    goto out;
  } else {

  }
#line 538
  *what = "accept";
#line 539
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 540
  if (err < 0) {
#line 541
    sock_release(*newsock);
#line 542
    *newsock = 0;
#line 543
    goto out;
  } else {

  }
#line 545
  (*newsock)->ops = sock->ops;
#line 546
  __module_get(((*newsock)->ops)->owner);
  out: ;
#line 549
  return (err);
}
}
#line 552 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 556
  iov.iov_base = buf;
#line 556
  iov.iov_len = size;
#line 560
  msg.msg_name = 0;
#line 560
  msg.msg_namelen = 0;
#line 560
  msg.msg_iov = (struct iovec *)(& iov);
#line 560
  msg.msg_iovlen = 1UL;
#line 560
  msg.msg_control = 0;
#line 560
  msg.msg_controllen = 0UL;
#line 560
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 567
  tmp = current_thread_info___0();
#line 567
  oldfs = tmp->addr_limit;
#line 568
  tmp___0 = current_thread_info___0();
#line 568
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 568
  tmp___0->addr_limit = __constr_expr_0;
#line 569
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 570
  tmp___1 = current_thread_info___0();
#line 570
  tmp___1->addr_limit = oldfs;
#line 572
  return (rv);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  long t ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 578
  iov.iov_base = buf;
#line 578
  iov.iov_len = size;
#line 582
  msg.msg_name = 0;
#line 582
  msg.msg_namelen = 0;
#line 582
  msg.msg_iov = (struct iovec *)(& iov);
#line 582
  msg.msg_iovlen = 1UL;
#line 582
  msg.msg_control = 0;
#line 582
  msg.msg_controllen = 0UL;
#line 582
  msg.msg_flags = 16640U;
#line 589
  tmp = current_thread_info___0();
#line 589
  oldfs = tmp->addr_limit;
#line 590
  tmp___0 = current_thread_info___0();
#line 590
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 590
  tmp___0->addr_limit = __constr_expr_0;
#line 591
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 592
  tmp___1 = current_thread_info___0();
#line 592
  tmp___1->addr_limit = oldfs;
#line 594
  if (rv < 0) {
#line 595
    if (rv == -104) {
#line 596
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 597
    if (rv != -512) {
#line 598
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else
#line 599
    if (rv == 0) {
#line 600
      tmp___3 = drbd_test_flag(mdev, DISCONNECT_SENT);
#line 600
      if (tmp___3 != 0) {
#line 602
        __ret = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 602
        if ((int )mdev->state.ldv_39979.conn > 9) {
#line 602
          tmp___2 = get_current();
#line 602
          __wait.flags = 0U;
#line 602
          __wait.private = (void *)tmp___2;
#line 602
          __wait.func = & autoremove_wake_function;
#line 602
          __wait.task_list.next = & __wait.task_list;
#line 602
          __wait.task_list.prev = & __wait.task_list;
          ldv_52210: 
#line 602
          prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 602
          if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 602
            goto ldv_52209;
          } else {

          }
#line 602
          __ret = schedule_timeout(__ret);
#line 602
          if (__ret == 0L) {
#line 602
            goto ldv_52209;
          } else {

          }
#line 602
          goto ldv_52210;
          ldv_52209: 
#line 602
          finish_wait(& mdev->state_wait, & __wait);
        } else {

        }
#line 602
        t = __ret;
#line 604
        if (t != 0L) {
#line 605
          goto out;
        } else {

        }
      } else {

      }
#line 607
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
    } else {

    }
  } else {

  }
#line 610
  if ((size_t )rv != size) {
#line 611
    val.i = 0U;
#line 611
    val.ldv_39979.conn = 4U;
#line 611
    mask.i = 0U;
#line 611
    mask.ldv_39979.conn = 31U;
#line 611
    drbd_force_state(mdev, mask, val);
  } else {

  }
  out: ;
#line 614
  return (rv);
}
}
#line 622 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 626
  if (snd != 0U) {
#line 627
    (sock->sk)->sk_sndbuf = (int )snd;
#line 628
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 630
  if (rcv != 0U) {
#line 631
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 632
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 634
  return;
}
}
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 642
  disconnect_on_error = 1;
#line 644
  tmp = get_net_conf(mdev);
#line 644
  if (tmp == 0) {
#line 645
    return (0);
  } else {

  }
#line 647
  what = "sock_create_kern";
#line 648
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 650
  if (err < 0) {
#line 651
    sock = 0;
#line 652
    goto out;
  } else {

  }
#line 655
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 655
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 655
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 657
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 667
  __min1 = (mdev->net_conf)->my_addr_len;
#line 667
  __min2 = 28;
#line 667
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 667
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 669
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 670
    src_in6.sin6_port = 0U;
  } else {
#line 672
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 674
  what = "bind before connect";
#line 675
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 678
  if (err < 0) {
#line 679
    goto out;
  } else {

  }
#line 683
  disconnect_on_error = 0;
#line 684
  what = "connect";
#line 685
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 690
  if (err < 0) {
#line 691
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 692
      sock_release(sock);
#line 693
      sock = 0;
    } else {

    }
#line 695
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 702
    disconnect_on_error = 0;
#line 703
    goto ldv_52249;
    default: 
#line 705
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_52249: ;
#line 707
    if (disconnect_on_error != 0) {
#line 708
      val.i = 0U;
#line 708
      val.ldv_39979.conn = 1U;
#line 708
      mask.i = 0U;
#line 708
      mask.ldv_39979.conn = 31U;
#line 708
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 710
  put_net_conf(mdev);
#line 711
  return (sock);
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 717
  s_estab = 0;
#line 720
  tmp = get_net_conf(mdev);
#line 720
  if (tmp == 0) {
#line 721
    return (0);
  } else {

  }
#line 723
  what = "sock_create_kern";
#line 724
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 726
  if (err != 0) {
#line 727
    s_listen = 0;
#line 728
    goto out;
  } else {

  }
#line 731
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 732
  tmp___0 = random32();
#line 732
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 734
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 735
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 736
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 737
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 740
  what = "bind before listen";
#line 741
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 744
  if (err < 0) {
#line 745
    goto out;
  } else {

  }
#line 747
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 750
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 751
    sock_release(s_listen);
  } else {

  }
#line 752
  if (err < 0) {
#line 753
    if ((err != -11 && err != -4) && err != -512) {
#line 754
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 755
      val.i = 0U;
#line 755
      val.ldv_39979.conn = 1U;
#line 755
      mask.i = 0U;
#line 755
      mask.ldv_39979.conn = 31U;
#line 755
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 758
  put_net_conf(mdev);
#line 760
  return (s_estab);
}
}
#line 763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 766
  h = & mdev->data.sbuf.header.h80;
#line 768
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 768
  return (tmp);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 773
  h = & mdev->data.rbuf.header.h80;
#line 776
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 778
  if (rr == 8 && h->magic == 1728214147U) {
#line 779
    tmp = __fswab16((int )h->command);
#line 779
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 781
  return (65535);
}
}
#line 789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 794
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 795
    return (0);
  } else {

  }
#line 797
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 799
  if (rr > 0 || rr == -11) {
#line 800
    return (1);
  } else {
#line 802
    sock_release(*sock);
#line 803
    *sock = 0;
#line 804
    return (0);
  }
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  enum drbd_state_rv rv ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state __ns ;

  {
#line 822
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            822);
  } else {

  }
#line 824
  drbd_clear_flag(mdev, DISCONNECT_SENT);
#line 825
  val.i = 0U;
#line 825
  val.ldv_39979.conn = 8U;
#line 825
  mask.i = 0U;
#line 825
  mask.ldv_39979.conn = 31U;
#line 825
  tmp = drbd_request_state(mdev, mask, val);
#line 825
  if (tmp <= 0) {
#line 826
    return (-2);
  } else {

  }
#line 828
  sock = 0;
#line 829
  msock = 0;
  ldv_52309: 
#line 832
  try = 0;
  ldv_52301: 
#line 834
  s = drbd_try_connect(mdev);
#line 835
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 836
    goto ldv_52300;
  } else {
#line 835
    try = try + 1;
#line 835
    if (try > 2) {
#line 836
      goto ldv_52300;
    } else {

    }
  }
#line 838
  schedule_timeout_interruptible(25L);
#line 839
  goto ldv_52301;
  ldv_52300: ;
#line 841
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 842
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 843
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 844
      sock = s;
#line 845
      s = 0;
    } else
#line 846
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 847
      drbd_clear_flag(mdev, DISCARD_CONCURRENT);
#line 848
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 849
      msock = s;
#line 850
      s = 0;
    } else {
#line 852
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 853
      goto out_release_sockets;
    }
  } else {

  }
#line 857
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 858
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 859
    ok = drbd_socket_okay(mdev, & sock);
#line 860
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 860
    ok = tmp___0 != 0 && ok != 0;
#line 861
    if (ok != 0) {
#line 862
      goto ldv_52303;
    } else {

    }
  } else {

  }
  retry: 
#line 866
  s = drbd_wait_for_connect(mdev);
#line 867
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 868
    tmp___1 = drbd_recv_fp(mdev, s);
#line 868
    try = (int )tmp___1;
#line 869
    drbd_socket_okay(mdev, & sock);
#line 870
    drbd_socket_okay(mdev, & msock);
#line 871
    switch (try) {
    case 65522: ;
#line 873
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 874
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 875
      sock_release(sock);
    } else {

    }
#line 877
    sock = s;
#line 878
    goto ldv_52306;
    case 65521: ;
#line 880
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 881
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 882
      sock_release(msock);
    } else {

    }
#line 884
    msock = s;
#line 885
    drbd_set_flag(mdev, DISCARD_CONCURRENT);
#line 886
    goto ldv_52306;
    default: 
#line 888
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 889
    sock_release(s);
#line 890
    tmp___2 = random32();
#line 890
    if ((int )tmp___2 & 1) {
#line 891
      goto retry;
    } else {

    }
    }
    ldv_52306: ;
  } else {

  }
#line 895
  if ((int )mdev->state.ldv_39979.conn <= 1) {
#line 896
    goto out_release_sockets;
  } else {

  }
#line 897
  tmp___5 = get_current();
#line 897
  tmp___6 = signal_pending(tmp___5);
#line 897
  if (tmp___6 != 0) {
#line 898
    tmp___3 = get_current();
#line 898
    flush_signals(tmp___3);
#line 899
    __asm__  volatile   ("": : : "memory");
#line 900
    tmp___4 = get_t_state(& mdev->receiver);
#line 900
    if ((unsigned int )tmp___4 == 2U) {
#line 901
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 904
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 905
    ok = drbd_socket_okay(mdev, & sock);
#line 906
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 906
    ok = tmp___7 != 0 && ok != 0;
#line 907
    if (ok != 0) {
#line 908
      goto ldv_52303;
    } else {

    }
  } else {

  }
#line 910
  goto ldv_52309;
  ldv_52303: 
#line 912
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 913
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 915
  (sock->sk)->sk_allocation = 16U;
#line 916
  (msock->sk)->sk_allocation = 16U;
#line 918
  (sock->sk)->sk_priority = 4U;
#line 919
  (msock->sk)->sk_priority = 6U;
#line 926
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 926
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 926
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 929
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 930
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 934
  drbd_tcp_nodelay(sock);
#line 935
  drbd_tcp_nodelay(msock);
#line 937
  mdev->data.socket = sock;
#line 938
  mdev->meta.socket = msock;
#line 939
  mdev->last_received = jiffies;
#line 941
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 941
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            941);
  } else {

  }
#line 943
  h = drbd_do_handshake(mdev);
#line 944
  if (h <= 0) {
#line 945
    return (h);
  } else {

  }
#line 947
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 949
    tmp___9 = drbd_do_auth(mdev);
#line 949
    switch (tmp___9) {
    case -1: 
#line 951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 952
    return (-1);
    case 0: 
#line 954
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 955
    return (0);
    }
  } else {

  }
#line 959
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 960
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 962
  atomic_set(& mdev->packet_seq, 0);
#line 963
  mdev->peer_seq = 0U;
#line 965
  tmp___10 = drbd_send_protocol(mdev);
#line 965
  if (tmp___10 == -1) {
#line 966
    return (-1);
  } else {

  }
#line 967
  drbd_set_flag(mdev, STATE_SENT);
#line 968
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 969
  drbd_send_sizes(mdev, 0, 0);
#line 970
  drbd_send_uuids(mdev);
#line 971
  drbd_send_current_state(mdev);
#line 972
  drbd_clear_flag(mdev, USE_DEGR_WFC_T);
#line 973
  drbd_clear_flag(mdev, RESIZE_PENDING);
#line 975
  spin_lock_irq(& mdev->req_lock);
#line 976
  __ns.i = mdev->state.i;
#line 976
  __ns.ldv_39979.conn = 9U;
#line 976
  rv = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 977
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 144U) {
#line 978
    drbd_clear_flag(mdev, STATE_SENT);
  } else {

  }
#line 979
  spin_unlock_irq(& mdev->req_lock);
#line 981
  if ((int )rv <= 0) {
#line 982
    return (0);
  } else {

  }
#line 984
  drbd_thread_start(& mdev->asender);
#line 985
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 987
  return (1);
  out_release_sockets: ;
#line 990
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 991
    sock_release(sock);
  } else {

  }
#line 992
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 993
    sock_release(msock);
  } else {

  }
#line 994
  return (-1);
}
}
#line 997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 999
  h = & mdev->data.rbuf.header;
#line 1002
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 1003
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 1003
  if (tmp___1 != 0L) {
#line 1004
    tmp = get_current();
#line 1004
    tmp___0 = signal_pending(tmp);
#line 1004
    if (tmp___0 == 0) {
#line 1005
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 1006
    return (0);
  } else {

  }
#line 1009
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 1009
  if (tmp___9 != 0L) {
#line 1010
    tmp___2 = __fswab16((int )h->h80.command);
#line 1010
    *cmd = (enum drbd_packets )tmp___2;
#line 1011
    tmp___3 = __fswab16((int )h->h80.length);
#line 1011
    *packet_size = (unsigned int )tmp___3;
  } else
#line 1012
  if ((unsigned int )h->h95.magic == 23171U) {
#line 1013
    tmp___4 = __fswab16((int )h->h95.command);
#line 1013
    *cmd = (enum drbd_packets )tmp___4;
#line 1014
    tmp___5 = __fswab32(h->h95.length);
#line 1014
    *packet_size = tmp___5;
  } else {
#line 1016
    tmp___6 = __fswab16((int )h->h80.length);
#line 1016
    tmp___7 = __fswab16((int )h->h80.command);
#line 1016
    tmp___8 = __fswab32(h->h80.magic);
#line 1016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 1020
    return (0);
  }
#line 1022
  mdev->last_received = jiffies;
#line 1024
  return (1);
}
}
#line 1027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 1031
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 1031
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1031
    if (tmp != 0) {
#line 1032
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 16U, 0);
#line 1034
      if (rv != 0) {
#line 1035
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                  rv);
#line 1039
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 1041
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1043
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct list_head  const  *__mptr ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1057
  rv = FE_STILL_LIVE;
#line 1059
  spin_lock(& mdev->epoch_lock);
  ldv_52344: 
#line 1061
  next_epoch = 0;
#line 1063
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1065
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1067
  atomic_dec(& epoch->active);
#line 1068
  goto ldv_52334;
  case 1U: 
#line 1070
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1071
  goto ldv_52334;
  case 2U: ;
#line 1074
  goto ldv_52334;
  }
  ldv_52334: ;
#line 1077
  if (epoch_size != 0) {
#line 1077
    tmp___2 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1077
    if (tmp___2 == 0) {
#line 1077
      tmp___3 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1077
      if (tmp___3 != 0 || ((unsigned int )ev & 32U) != 0U) {
#line 1080
        if (((unsigned int )ev & 32U) == 0U) {
#line 1081
          spin_unlock(& mdev->epoch_lock);
#line 1082
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1083
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1085
        tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1085
        if (tmp___1 != 0) {
#line 1086
          atomic_dec(& mdev->unacked_cnt);
#line 1086
          tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
          if (tmp___0 < 0) {
#line 1086
            tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1086
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                    "drbd_may_finish_epoch", 1086, tmp);
          } else {

          }
        } else {

        }
#line 1088
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1089
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1089
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1090
          list_del(& epoch->list);
#line 1091
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1092
          mdev->epochs = mdev->epochs - 1U;
#line 1093
          kfree((void const   *)epoch);
#line 1095
          if ((unsigned int )rv == 0U) {
#line 1096
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1098
          epoch->flags = 0UL;
#line 1099
          atomic_set(& epoch->epoch_size, 0);
#line 1101
          if ((unsigned int )rv == 0U) {
#line 1102
            rv = FE_RECYCLED;
          } else {

          }
#line 1103
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1107
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1108
    goto ldv_52343;
  } else {

  }
#line 1110
  epoch = next_epoch;
#line 1111
  goto ldv_52344;
  ldv_52343: 
#line 1113
  spin_unlock(& mdev->epoch_lock);
#line 1115
  return (rv);
}
}
#line 1123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1126
  write_ordering_str[0] = (char *)"none";
#line 1126
  write_ordering_str[1] = (char *)"drain";
#line 1126
  write_ordering_str[2] = (char *)"flush";
#line 1132
  pwo = mdev->write_ordering;
#line 1133
  _min1 = pwo;
#line 1133
  _min2 = wo;
#line 1133
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1134
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 444UL) != 0U) {
#line 1135
    wo = WO_drain_io;
  } else {

  }
#line 1136
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 452UL) != 0U) {
#line 1137
    wo = WO_none;
  } else {

  }
#line 1138
  mdev->write_ordering = wo;
#line 1139
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1140
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1141
  return;
}
}
#line 1160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1163
  bios = 0;
#line 1165
  page = e->pages;
#line 1166
  sector = e->sector;
#line 1167
  ds = e->size;
#line 1168
  n_bios = 0U;
#line 1169
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1170
  err = -12;
  next_bio: 
#line 1181
  bio = bio_alloc(16U, nr_pages);
#line 1182
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1183
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1184
    goto fail;
  } else {

  }
#line 1187
  bio->bi_sector = sector;
#line 1188
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1189
  bio->bi_rw = (unsigned long )rw;
#line 1190
  bio->bi_private = (void *)e;
#line 1191
  bio->bi_end_io = & drbd_endio_sec;
#line 1193
  bio->bi_next = bios;
#line 1194
  bios = bio;
#line 1195
  n_bios = n_bios + 1U;
#line 1197
  goto ldv_52376;
  ldv_52375: 
#line 1198
  __min1 = ds;
#line 1198
  __min2 = 4096U;
#line 1198
  len = __min1 < __min2 ? __min1 : __min2;
#line 1199
  tmp = bio_add_page(bio, page, len, 0U);
#line 1199
  if (tmp == 0) {
#line 1203
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1204
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1208
      err = -28;
#line 1209
      goto fail;
    } else {

    }
#line 1211
    goto next_bio;
  } else {

  }
#line 1213
  ds = ds - len;
#line 1214
  sector = (sector_t )(len >> 9) + sector;
#line 1215
  nr_pages = nr_pages - 1U;
#line 1197
  page = page_chain_next(page);
  ldv_52376: ;
#line 1197
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1197
    tmp___0 = page_chain_next(page);
#line 1197
    __builtin_prefetch((void const   *)tmp___0);
#line 1197
    if (1 != 0) {
#line 1198
      goto ldv_52375;
    } else {
#line 1200
      goto ldv_52377;
    }
  } else {

  }
  ldv_52377: ;
#line 1217
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1217
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1217);
  } else {

  }
#line 1218
  if (ds != 0U) {
#line 1218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1218);
  } else {

  }
#line 1220
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_52378: 
#line 1222
  bio = bios;
#line 1223
  bios = bios->bi_next;
#line 1224
  bio->bi_next = 0;
#line 1226
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1227
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1228
    goto ldv_52378;
  } else {

  }

#line 1228
  return (0);
  fail: ;
#line 1231
  goto ldv_52381;
  ldv_52380: 
#line 1232
  bio = bios;
#line 1233
  bios = bios->bi_next;
#line 1234
  bio_put(bio);
  ldv_52381: ;
#line 1231
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1232
    goto ldv_52380;
  } else {

  }

#line 1236
  return (err);
}
}
#line 1239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1242
  p = & mdev->data.rbuf.barrier;
#line 1245
  inc_unacked(mdev);
#line 1247
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1248
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1248
  rv = (int )tmp;
#line 1255
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1257
  if (rv == 2) {
#line 1258
    return (1);
  } else {

  }
#line 1262
  tmp___0 = kmalloc(40UL, 16U);
#line 1262
  epoch = (struct drbd_epoch *)tmp___0;
#line 1263
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1264
    goto ldv_52392;
  } else {
#line 1266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1271
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1272
  drbd_flush(mdev);
#line 1274
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1274
  if (tmp___2 != 0) {
#line 1275
    tmp___1 = kmalloc(40UL, 16U);
#line 1275
    epoch = (struct drbd_epoch *)tmp___1;
#line 1276
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1277
      goto ldv_52392;
    } else {

    }
  } else {

  }
#line 1280
  epoch = mdev->current_epoch;
#line 1281
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1281
  if (tmp___3 == 0) {
#line 1281
    goto ldv_52395;
  } else {

  }
#line 1281
  tmp___4 = get_current();
#line 1281
  __wait.flags = 0U;
#line 1281
  __wait.private = (void *)tmp___4;
#line 1281
  __wait.func = & autoremove_wake_function;
#line 1281
  __wait.task_list.next = & __wait.task_list;
#line 1281
  __wait.task_list.prev = & __wait.task_list;
  ldv_52398: 
#line 1281
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1281
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1281
  if (tmp___5 == 0) {
#line 1281
    goto ldv_52397;
  } else {

  }
#line 1281
  schedule();
#line 1281
  goto ldv_52398;
  ldv_52397: 
#line 1281
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_52395: 
#line 1283
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1283
  if (tmp___6 != 0) {
#line 1283
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1283);
  } else {

  }
#line 1284
  if (epoch->flags != 0UL) {
#line 1284
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1284);
  } else {

  }
#line 1286
  return (1);
  default: 
#line 1288
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1289
  return (0);
  }
  ldv_52392: 
#line 1292
  epoch->flags = 0UL;
#line 1293
  atomic_set(& epoch->epoch_size, 0);
#line 1294
  atomic_set(& epoch->active, 0);
#line 1296
  spin_lock(& mdev->epoch_lock);
#line 1297
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1297
  if (tmp___7 != 0) {
#line 1298
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1299
    mdev->current_epoch = epoch;
#line 1300
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1303
    kfree((void const   *)epoch);
  }
#line 1305
  spin_unlock(& mdev->epoch_lock);
#line 1307
  return (1);
}
}
#line 1313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1315
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1315
  capacity = tmp;
#line 1319
  dig_in = mdev->int_dig_in;
#line 1320
  dig_vv = mdev->int_dig_vv;
#line 1323
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1323
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1323
    dgs = (int )tmp___0;
  } else {
#line 1323
    dgs = 0;
  }
#line 1326
  if (dgs != 0) {
#line 1327
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1328
    if (rr != dgs) {
#line 1329
      tmp___1 = get_current();
#line 1329
      tmp___2 = signal_pending(tmp___1);
#line 1329
      if (tmp___2 == 0) {
#line 1330
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1333
      return (0);
    } else {

    }
  } else {

  }
#line 1337
  data_size = data_size - dgs;
#line 1339
  _b = (data_size & 511) != 0;
#line 1339
  if (_b != 0) {
#line 1339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1339);
  } else {

  }
#line 1339
  if (_b != 0) {
#line 1339
    return (0);
  } else {

  }
#line 1340
  _b___0 = (unsigned int )data_size > 131072U;
#line 1340
  if (_b___0 != 0) {
#line 1340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1340);
  } else {

  }
#line 1340
  if (_b___0 != 0) {
#line 1340
    return (0);
  } else {

  }
#line 1344
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1349
    return (0);
  } else {

  }
#line 1355
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1356
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1357
    return (0);
  } else {

  }
#line 1359
  if (data_size == 0) {
#line 1360
    return (e);
  } else {

  }
#line 1362
  ds = data_size;
#line 1363
  page = e->pages;
#line 1364
  goto ldv_52426;
  ldv_52425: 
#line 1365
  __min1 = ds;
#line 1365
  __min2 = 4096;
#line 1365
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1366
  tmp___3 = kmap(page);
#line 1366
  data = (unsigned long *)tmp___3;
#line 1367
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1368
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1368
  if (tmp___4 != 0) {
#line 1369
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1370
    *data = ~ *data;
  } else {

  }
#line 1372
  kunmap(page);
#line 1373
  if ((unsigned int )rr != len) {
#line 1374
    drbd_free_some_ee(mdev, e, 0);
#line 1375
    tmp___5 = get_current();
#line 1375
    tmp___6 = signal_pending(tmp___5);
#line 1375
    if (tmp___6 == 0) {
#line 1376
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1378
    return (0);
  } else {

  }
#line 1380
  ds = ds - rr;
#line 1364
  page = page_chain_next(page);
  ldv_52426: ;
#line 1364
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1364
    tmp___7 = page_chain_next(page);
#line 1364
    __builtin_prefetch((void const   *)tmp___7);
#line 1364
    if (1 != 0) {
#line 1365
      goto ldv_52425;
    } else {
#line 1367
      goto ldv_52427;
    }
  } else {

  }
  ldv_52427: ;
#line 1383
  if (dgs != 0) {
#line 1384
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1385
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1385
    if (tmp___8 != 0) {
#line 1386
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1388
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1390
      drbd_free_some_ee(mdev, e, 0);
#line 1391
      return (0);
    } else {

    }
  } else {

  }
#line 1394
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1395
  return (e);
}
}
#line 1401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1404
  rv = 1;
#line 1407
  if (data_size == 0) {
#line 1408
    return (1);
  } else {

  }
#line 1410
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1412
  data = kmap(page);
#line 1413
  goto ldv_52447;
  ldv_52446: 
#line 1414
  __min1 = data_size;
#line 1414
  __min2 = 4096;
#line 1414
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1415
  __min1___1 = data_size;
#line 1415
  __min2___1 = 4096;
#line 1415
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1416
    rv = 0;
#line 1417
    tmp = get_current();
#line 1417
    tmp___0 = signal_pending(tmp);
#line 1417
    if (tmp___0 == 0) {
#line 1420
      __min1___0 = data_size;
#line 1420
      __min2___0 = 4096;
#line 1420
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1421
    goto ldv_52445;
  } else {

  }
#line 1423
  data_size = data_size - rr;
  ldv_52447: ;
#line 1413
  if (data_size != 0) {
#line 1414
    goto ldv_52446;
  } else {

  }
  ldv_52445: 
#line 1425
  kunmap(page);
#line 1426
  drbd_pp_free(mdev, page, 0);
#line 1427
  return (rv);
}
}
#line 1430 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1436
  dig_in = mdev->int_dig_in;
#line 1437
  dig_vv = mdev->int_dig_vv;
#line 1439
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1439
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1439
    dgs = (int )tmp;
  } else {
#line 1439
    dgs = 0;
  }
#line 1442
  if (dgs != 0) {
#line 1443
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1444
    if (rr != dgs) {
#line 1445
      tmp___0 = get_current();
#line 1445
      tmp___1 = signal_pending(tmp___0);
#line 1445
      if (tmp___1 == 0) {
#line 1446
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1449
      return (0);
    } else {

    }
  } else {

  }
#line 1453
  data_size = data_size - dgs;
#line 1457
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1459
  bio = req->master_bio;
#line 1460
  if (bio->bi_sector != sector) {
#line 1460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1460);
  } else {

  }
#line 1462
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1462
  i = (int )bio->bi_idx;
#line 1462
  goto ldv_52466;
  ldv_52465: 
#line 1463
  __min1 = data_size;
#line 1463
  __min2 = (int )bvec->bv_len;
#line 1463
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1464
  tmp___2 = kmap(bvec->bv_page);
#line 1464
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1467
  kunmap(bvec->bv_page);
#line 1468
  if (rr != expect) {
#line 1469
    tmp___3 = get_current();
#line 1469
    tmp___4 = signal_pending(tmp___3);
#line 1469
    if (tmp___4 == 0) {
#line 1470
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1473
    return (0);
  } else {

  }
#line 1475
  data_size = data_size - rr;
#line 1462
  bvec = bvec + 1;
#line 1462
  i = i + 1;
  ldv_52466: ;
#line 1462
  if ((int )bio->bi_vcnt > i) {
#line 1463
    goto ldv_52465;
  } else {

  }

#line 1478
  if (dgs != 0) {
#line 1479
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1480
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1480
    if (tmp___5 != 0) {
#line 1481
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1482
      return (0);
    } else {

    }
  } else {

  }
#line 1486
  if (data_size != 0) {
#line 1486
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1486);
  } else {

  }
#line 1487
  return (1);
}
}
#line 1492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1494
  e = (struct drbd_epoch_entry *)w;
#line 1495
  sector = e->sector;
#line 1498
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1498
  if (tmp == 0) {
#line 1498
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1498);
  } else {

  }
#line 1500
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1500
  if (tmp___0 != 0L) {
#line 1501
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1501U);
#line 1502
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1505
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1507
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1509
  atomic_dec(& mdev->unacked_cnt);
#line 1509
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1509
  if (tmp___2 < 0) {
#line 1509
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1509
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1509, tmp___1);
  } else {

  }
#line 1511
  return (ok);
}
}
#line 1514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1518
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1519
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1520
    goto fail;
  } else {

  }
#line 1522
  atomic_dec(& mdev->rs_pending_cnt);
#line 1522
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1522
  if (tmp___0 < 0) {
#line 1522
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1522
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1522, tmp);
  } else {

  }
#line 1524
  inc_unacked(mdev);
#line 1528
  e->w.cb = & e_end_resync_block;
#line 1530
  spin_lock_irq(& mdev->req_lock);
#line 1531
  list_add(& e->w.list, & mdev->sync_ee);
#line 1532
  spin_unlock_irq(& mdev->req_lock);
#line 1534
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1535
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1535
  if (tmp___1 == 0) {
#line 1536
    return (1);
  } else {

  }
#line 1539
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1540
  spin_lock_irq(& mdev->req_lock);
#line 1541
  list_del(& e->w.list);
#line 1542
  spin_unlock_irq(& mdev->req_lock);
#line 1544
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1546
  put_ldev(mdev);
#line 1547
  return (0);
}
}
#line 1550 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1555
  p = & mdev->data.rbuf.data;
#line 1557
  tmp = __fswab64(p->sector);
#line 1557
  sector = (sector_t )tmp;
#line 1559
  spin_lock_irq(& mdev->req_lock);
#line 1560
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1561
  spin_unlock_irq(& mdev->req_lock);
#line 1562
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1562
  if (tmp___0 != 0L) {
#line 1563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1564
    return (0);
  } else {

  }
#line 1570
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1572
  if (ok != 0) {
#line 1573
    req_mod(req, data_received);
  } else {

  }
#line 1578
  return (ok);
}
}
#line 1581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1585
  p = & mdev->data.rbuf.data;
#line 1587
  tmp = __fswab64(p->sector);
#line 1587
  sector = (sector_t )tmp;
#line 1588
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1588
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1588);
  } else {

  }
#line 1590
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1590
  if (tmp___1 != 0) {
#line 1594
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1596
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1596
    if (tmp___0 != 0) {
#line 1597
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1599
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1601
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1604
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1606
  return (ok);
}
}
#line 1612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1614
  e = (struct drbd_epoch_entry *)w;
#line 1615
  sector = e->sector;
#line 1616
  ok = 1;
#line 1618
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1619
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1619
    if (tmp___0 != 0L) {
#line 1620
      pcmd = ((int )mdev->state.ldv_39979.conn > 15 && (int )mdev->state.ldv_39979.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1624
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1624
      ok = tmp & ok;
#line 1625
      if (pcmd == 23) {
#line 1626
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1626U);
      } else {

      }
    } else {
#line 1628
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1632
    atomic_dec(& mdev->unacked_cnt);
#line 1632
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1632
    if (tmp___2 < 0) {
#line 1632
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1632
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1632, tmp___1);
    } else {

    }
  } else {

  }
#line 1636
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1637
    spin_lock_irq(& mdev->req_lock);
#line 1638
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1638
    if (tmp___3 != 0) {
#line 1638
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1638);
    } else {

    }
#line 1639
    hlist_del_init(& e->collision);
#line 1640
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1642
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1642
    if (tmp___4 == 0) {
#line 1642
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1642);
    } else {

    }
  }
#line 1645
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1647
  return (ok);
}
}
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1652
  e = (struct drbd_epoch_entry *)w;
#line 1653
  ok = 1;
#line 1655
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1655
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1655);
  } else {

  }
#line 1656
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1658
  spin_lock_irq(& mdev->req_lock);
#line 1659
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1659
  if (tmp != 0) {
#line 1659
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            1659);
  } else {

  }
#line 1660
  hlist_del_init(& e->collision);
#line 1661
  spin_unlock_irq(& mdev->req_lock);
#line 1663
  atomic_dec(& mdev->unacked_cnt);
#line 1663
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1663
  if (tmp___1 < 0) {
#line 1663
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1663
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1663, tmp___0);
  } else {

  }
#line 1665
  return (ok);
}
}
#line 1668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static bool overlapping_resync_write(struct drbd_conf *mdev , struct drbd_epoch_entry *data_e ) 
{ 
  struct drbd_epoch_entry *rs_e ;
  bool rv ;
  struct list_head  const  *__mptr ;
  int tmp ;
  struct list_head  const  *__mptr___0 ;

  {
#line 1672
  rv = 0;
#line 1674
  spin_lock_irq(& mdev->req_lock);
#line 1675
  __mptr = (struct list_head  const  *)mdev->sync_ee.next;
#line 1675
  rs_e = (struct drbd_epoch_entry *)__mptr;
#line 1675
  goto ldv_52545;
  ldv_52544: 
#line 1676
  tmp = overlaps(data_e->sector, (int )data_e->size, rs_e->sector, (int )rs_e->size);
#line 1676
  if (tmp != 0) {
#line 1677
    rv = 1;
#line 1678
    goto ldv_52543;
  } else {

  }
#line 1675
  __mptr___0 = (struct list_head  const  *)rs_e->w.list.next;
#line 1675
  rs_e = (struct drbd_epoch_entry *)__mptr___0;
  ldv_52545: ;
#line 1675
  if ((unsigned long )(& rs_e->w.list) != (unsigned long )(& mdev->sync_ee)) {
#line 1676
    goto ldv_52544;
  } else {

  }
  ldv_52543: 
#line 1681
  spin_unlock_irq(& mdev->req_lock);
#line 1683
  return (rv);
}
}
#line 1707 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1709
  tmp = get_current();
#line 1709
  wait.flags = 0U;
#line 1709
  wait.private = (void *)tmp;
#line 1709
  wait.func = & autoremove_wake_function;
#line 1709
  wait.task_list.next = & wait.task_list;
#line 1709
  wait.task_list.prev = & wait.task_list;
#line 1712
  ret = 0;
#line 1713
  spin_lock(& mdev->peer_seq_lock);
  ldv_52555: 
#line 1715
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1716
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1716
  if (tmp___0 <= 0) {
#line 1717
    goto ldv_52554;
  } else {

  }
#line 1718
  tmp___1 = get_current();
#line 1718
  tmp___2 = signal_pending(tmp___1);
#line 1718
  if (tmp___2 != 0) {
#line 1719
    ret = -512;
#line 1720
    goto ldv_52554;
  } else {

  }
#line 1722
  p_seq = mdev->peer_seq;
#line 1723
  spin_unlock(& mdev->peer_seq_lock);
#line 1724
  timeout = schedule_timeout(7500L);
#line 1725
  spin_lock(& mdev->peer_seq_lock);
#line 1726
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1727
    ret = -110;
#line 1728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1729
    goto ldv_52554;
  } else {

  }
#line 1731
  goto ldv_52555;
  ldv_52554: 
#line 1732
  finish_wait(& mdev->seq_wait, & wait);
#line 1733
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1734
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1735
  spin_unlock(& mdev->peer_seq_lock);
#line 1736
  return (ret);
}
}
#line 1742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1744
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 2048 : 0)) | ((dpf & 32U) != 0U ? 4096 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  bool tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  bool tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;

  {
#line 1755
  p = & mdev->data.rbuf.data;
#line 1756
  rw = 1;
#line 1759
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1759
  if (tmp___1 == 0) {
#line 1760
    spin_lock(& mdev->peer_seq_lock);
#line 1761
    tmp = __fswab32(p->seq_num);
#line 1761
    if (mdev->peer_seq + 1U == tmp) {
#line 1762
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1763
    spin_unlock(& mdev->peer_seq_lock);
#line 1765
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1766
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1767
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1767
    return (tmp___0);
  } else {

  }
#line 1775
  tmp___2 = __fswab64(p->sector);
#line 1775
  sector = (sector_t )tmp___2;
#line 1776
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1777
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1778
    put_ldev(mdev);
#line 1779
    return (0);
  } else {

  }
#line 1782
  e->w.cb = & e_end_block;
#line 1784
  tmp___3 = __fswab32(p->dp_flags);
#line 1784
  dp_flags = tmp___3;
#line 1785
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1785
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1786
  if ((unsigned long )e->pages == (unsigned long )((struct page *)0)) {
#line 1787
    if (e->size != 0U) {
#line 1787
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1787);
    } else {

    }
#line 1788
    if ((dp_flags & 32U) == 0U) {
#line 1788
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( dp_flags & DP_FLUSH ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1788);
    } else {

    }
  } else {

  }
#line 1791
  if ((dp_flags & 4U) != 0U) {
#line 1792
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1794
  spin_lock(& mdev->epoch_lock);
#line 1795
  e->epoch = mdev->current_epoch;
#line 1796
  atomic_inc(& (e->epoch)->epoch_size);
#line 1797
  atomic_inc(& (e->epoch)->active);
#line 1798
  spin_unlock(& mdev->epoch_lock);
#line 1801
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1802
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1806
    size = (int const   )e->size;
#line 1807
    tmp___5 = drbd_test_flag(mdev, DISCARD_CONCURRENT);
#line 1807
    discard = tmp___5;
#line 1808
    tmp___6 = get_current();
#line 1808
    wait.flags = 0U;
#line 1808
    wait.private = (void *)tmp___6;
#line 1808
    wait.func = & autoremove_wake_function;
#line 1808
    wait.task_list.next = & wait.task_list;
#line 1808
    wait.task_list.prev = & wait.task_list;
#line 1814
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1814
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              1814);
    } else {

    }
#line 1815
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1815
    if (tmp___7 != 0L) {
#line 1815
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1815), "i" (12UL));
      ldv_52577: ;
#line 1815
      goto ldv_52577;
    } else {

    }
#line 1816
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1816
    if (tmp___8 != 0L) {
#line 1816
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1816), "i" (12UL));
      ldv_52578: ;
#line 1816
      goto ldv_52578;
    } else {

    }
#line 1852
    tmp___9 = __fswab32(p->seq_num);
#line 1852
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1852
    if (tmp___10 != 0) {
#line 1853
      goto out_interrupted;
    } else {

    }
#line 1855
    spin_lock_irq(& mdev->req_lock);
#line 1857
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1857
    hlist_add_head(& e->collision, tmp___11);
#line 1860
    slot = tl_hash_slot(mdev, sector);
#line 1861
    first = 1;
    ldv_52589: 
#line 1863
    have_unacked = 0;
#line 1864
    have_conflict = 0;
#line 1865
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1867
    n = slot->first;
#line 1867
    goto ldv_52586;
    ldv_52585: 
#line 1868
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1868
    if (tmp___14 != 0) {
#line 1871
      if (first != 0) {
#line 1872
        tmp___12 = get_current();
#line 1872
        tmp___13 = get_current();
#line 1872
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1877
      if ((i->rq_state & 16UL) != 0UL) {
#line 1878
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1879
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1867
    n = n->next;
    ldv_52586: ;
#line 1867
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1867
      __mptr = (struct hlist_node  const  *)n;
#line 1867
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1867
      if (1 != 0) {
#line 1868
        goto ldv_52585;
      } else {
#line 1870
        goto ldv_52587;
      }
    } else {

    }
    ldv_52587: ;
#line 1883
    if (have_conflict == 0) {
#line 1884
      goto ldv_52588;
    } else {

    }
#line 1887
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1888
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1890
      inc_unacked(mdev);
#line 1891
      e->w.cb = & e_send_discard_ack;
#line 1892
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1894
      spin_unlock_irq(& mdev->req_lock);
#line 1899
      put_ldev(mdev);
#line 1900
      wake_asender(mdev);
#line 1901
      finish_wait(& mdev->misc_wait, & wait);
#line 1902
      return (1);
    } else {

    }
#line 1905
    tmp___15 = get_current();
#line 1905
    tmp___16 = signal_pending(tmp___15);
#line 1905
    if (tmp___16 != 0) {
#line 1906
      hlist_del_init(& e->collision);
#line 1908
      spin_unlock_irq(& mdev->req_lock);
#line 1910
      finish_wait(& mdev->misc_wait, & wait);
#line 1911
      goto out_interrupted;
    } else {

    }
#line 1914
    spin_unlock_irq(& mdev->req_lock);
#line 1915
    if (first != 0) {
#line 1916
      first = 0;
#line 1917
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1919
    if (discard != 0) {
#line 1922
      if (have_unacked != 0) {
#line 1922
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                1922);
      } else {

      }
    } else {

    }
#line 1924
    schedule();
#line 1925
    spin_lock_irq(& mdev->req_lock);
#line 1926
    goto ldv_52589;
    ldv_52588: 
#line 1927
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1930
  list_add(& e->w.list, & mdev->active_ee);
#line 1931
  spin_unlock_irq(& mdev->req_lock);
#line 1933
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) {
#line 1934
    tmp___17 = overlapping_resync_write(mdev, e);
#line 1934
    if (tmp___17) {
#line 1934
      tmp___18 = 0;
    } else {
#line 1934
      tmp___18 = 1;
    }
#line 1934
    if (tmp___18) {
#line 1934
      goto ldv_52590;
    } else {

    }
#line 1934
    tmp___19 = get_current();
#line 1934
    __wait.flags = 0U;
#line 1934
    __wait.private = (void *)tmp___19;
#line 1934
    __wait.func = & autoremove_wake_function;
#line 1934
    __wait.task_list.next = & __wait.task_list;
#line 1934
    __wait.task_list.prev = & __wait.task_list;
    ldv_52593: 
#line 1934
    prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1934
    tmp___20 = overlapping_resync_write(mdev, e);
#line 1934
    if (tmp___20) {
#line 1934
      tmp___21 = 0;
    } else {
#line 1934
      tmp___21 = 1;
    }
#line 1934
    if (tmp___21) {
#line 1934
      goto ldv_52592;
    } else {

    }
#line 1934
    schedule();
#line 1934
    goto ldv_52593;
    ldv_52592: 
#line 1934
    finish_wait(& mdev->ee_wait, & __wait);
    ldv_52590: ;
  } else {

  }
#line 1936
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1938
  inc_unacked(mdev);
#line 1941
  goto ldv_52595;
  case 2: 
#line 1945
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1946
  goto ldv_52595;
  case 1: ;
#line 1949
  goto ldv_52595;
  }
  ldv_52595: ;
#line 1952
  if ((int )mdev->state.ldv_39979.pdsk <= 3) {
#line 1954
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1954U);
#line 1955
    e->flags = e->flags | 1UL;
#line 1956
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1957
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1960
  tmp___22 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1960
  if (tmp___22 == 0) {
#line 1961
    return (1);
  } else {

  }
#line 1964
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1965
  spin_lock_irq(& mdev->req_lock);
#line 1966
  list_del(& e->w.list);
#line 1967
  hlist_del_init(& e->collision);
#line 1968
  spin_unlock_irq(& mdev->req_lock);
#line 1969
  if ((int )e->flags & 1) {
#line 1970
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1973
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1974
  put_ldev(mdev);
#line 1975
  drbd_free_some_ee(mdev, e, 0);
#line 1976
  return (0);
}
}
#line 1990 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1992
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1996
  throttle = 0;
#line 1999
  if (mdev->sync_conf.c_min_rate == 0) {
#line 2000
    return (0);
  } else {

  }
#line 2002
  spin_lock_irq(& mdev->al_lock);
#line 2003
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 2004
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 2005
    __mptr = (struct lc_element  const  *)tmp;
#line 2005
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 2006
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 2006
    if (tmp___0 != 0) {
#line 2007
      spin_unlock_irq(& mdev->al_lock);
#line 2008
      return (0);
    } else {

    }
  } else {

  }
#line 2012
  spin_unlock_irq(& mdev->al_lock);
#line 2014
  res = 0UL;
#line 2014
  _cpu = 4294967295U;
#line 2014
  goto ldv_52619;
  ldv_52618: 
#line 2014
  __vpp_verify = 0;
#line 2014
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 2014
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_52619: 
#line 2014
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 2014
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 2015
    goto ldv_52618;
  } else {

  }
#line 2015
  res___0 = 0UL;
#line 2015
  _cpu___0 = 4294967295U;
#line 2015
  goto ldv_52629;
  ldv_52628: 
#line 2015
  __vpp_verify___0 = 0;
#line 2015
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 2015
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_52629: 
#line 2015
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 2015
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 2016
    goto ldv_52628;
  } else {

  }
#line 2015
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 2015
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 2018
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 2022
    mdev->rs_last_events = curr_events;
#line 2026
    i = (mdev->rs_last_mark + 7) % 8;
#line 2028
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2029
      rs_left = mdev->ov_left;
    } else {
#line 2031
      tmp___2 = drbd_bm_total_weight(mdev);
#line 2031
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 2033
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 2034
    if (dt == 0UL) {
#line 2035
      dt = dt + 1UL;
    } else {

    }
#line 2036
    db = mdev->rs_mark_left[i] - rs_left;
#line 2037
    dbdt = db / dt << 2;
#line 2039
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 2040
      throttle = 1;
    } else {

    }
  } else {

  }
#line 2042
  return (throttle);
}
}
#line 2046 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 2049
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 2049
  capacity = tmp;
#line 2051
  di = 0;
#line 2054
  p = & mdev->data.rbuf.block_req;
#line 2056
  tmp___0 = __fswab64(p->sector);
#line 2056
  sector = (sector_t )tmp___0;
#line 2057
  tmp___1 = __fswab32(p->blksize);
#line 2057
  size = (int )tmp___1;
#line 2059
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 2060
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2060, (unsigned long long )sector, size);
#line 2062
    return (0);
  } else {

  }
#line 2064
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 2065
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            2065, (unsigned long long )sector, size);
#line 2067
    return (0);
  } else {

  }
#line 2070
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 2070
  if (tmp___7 == 0) {
#line 2071
    verb = 1;
#line 2072
    switch ((unsigned int )cmd) {
    case 8U: 
#line 2074
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 2075
    goto ldv_52648;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 2079
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 2080
    goto ldv_52648;
    case 31U: 
#line 2082
    verb = 0;
#line 2083
    atomic_dec(& mdev->rs_pending_cnt);
#line 2083
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2083
    if (tmp___3 < 0) {
#line 2083
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2083
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2083, tmp___2);
    } else {

    }
#line 2084
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 2085
    goto ldv_52648;
    default: 
#line 2087
    tmp___4 = cmdname(cmd);
#line 2087
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_52648: ;
#line 2090
    if (verb != 0) {
#line 2090
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 2090
      if (tmp___5 != 0) {
#line 2091
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 2095
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 2095
    return (tmp___6);
  } else {

  }
#line 2101
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2102
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2103
    put_ldev(mdev);
#line 2104
    return (0);
  } else {

  }
#line 2107
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2109
  e->w.cb = & w_e_end_data_req;
#line 2110
  fault_type = 5U;
#line 2112
  goto submit;
  case 9U: 
#line 2115
  e->w.cb = & w_e_end_rsdata_req;
#line 2116
  fault_type = 3U;
#line 2118
  mdev->bm_resync_fo = sector >> 3;
#line 2119
  goto ldv_52661;
  case 31U: ;
  case 33U: 
#line 2123
  fault_type = 3U;
#line 2124
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2124
  di = (struct digest_info *)tmp___8;
#line 2125
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2126
    goto out_free_e;
  } else {

  }
#line 2128
  di->digest_size = (int )digest_size;
#line 2129
  di->digest = (void *)di + 16U;
#line 2131
  e->ldv_49189.digest = di;
#line 2132
  e->flags = e->flags | 16UL;
#line 2134
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2134
  if ((unsigned int )tmp___9 != digest_size) {
#line 2135
    goto out_free_e;
  } else {

  }
#line 2137
  if ((unsigned int )cmd == 33U) {
#line 2138
    if (mdev->agreed_pro_version <= 88) {
#line 2138
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2138);
    } else {

    }
#line 2139
    e->w.cb = & w_e_end_csum_rs_req;
#line 2141
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2142
  if ((unsigned int )cmd == 31U) {
#line 2144
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2145
    e->w.cb = & w_e_end_ov_reply;
#line 2146
    atomic_dec(& mdev->rs_pending_cnt);
#line 2146
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2146
    if (tmp___11 < 0) {
#line 2146
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2146
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2146, tmp___10);
    } else {

    }
#line 2149
    goto submit_for_resync;
  } else {

  }
#line 2151
  goto ldv_52661;
  case 30U: ;
#line 2154
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2156
    now = jiffies;
#line 2158
    mdev->ov_start_sector = sector;
#line 2159
    mdev->ov_position = sector;
#line 2160
    tmp___12 = drbd_bm_bits(mdev);
#line 2160
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2161
    mdev->rs_total = mdev->ov_left;
#line 2162
    i = 0;
#line 2162
    goto ldv_52673;
    ldv_52672: 
#line 2163
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2164
    mdev->rs_mark_time[i] = now;
#line 2162
    i = i + 1;
    ldv_52673: ;
#line 2162
    if (i <= 7) {
#line 2163
      goto ldv_52672;
    } else {

    }
#line 2166
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2169
  e->w.cb = & w_e_end_ov_req;
#line 2170
  fault_type = 3U;
#line 2171
  goto ldv_52661;
  default: 
#line 2174
  tmp___13 = cmdname(cmd);
#line 2174
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2176
  fault_type = 10U;
#line 2177
  goto out_free_e;
  }
  ldv_52661: ;
#line 2202
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2202
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2202
    if (tmp___14 != 0) {
#line 2203
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2204
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2204
  if (tmp___15 != 0) {
#line 2205
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2208
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2211
  inc_unacked(mdev);
#line 2212
  spin_lock_irq(& mdev->req_lock);
#line 2213
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2214
  spin_unlock_irq(& mdev->req_lock);
#line 2216
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2216
  if (tmp___16 == 0) {
#line 2217
    return (1);
  } else {

  }
#line 2220
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2221
  spin_lock_irq(& mdev->req_lock);
#line 2222
  list_del(& e->w.list);
#line 2223
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2227
  put_ldev(mdev);
#line 2228
  drbd_free_some_ee(mdev, e, 0);
#line 2229
  return (0);
}
}
#line 2232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2234
  rv = -100;
#line 2237
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2238
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2240
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2241
  ch_self = mdev->comm_bm_set;
#line 2243
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2247
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2248
  goto ldv_52687;
  case 0: ;
#line 2250
  goto ldv_52687;
  case 1: ;
#line 2252
  if (self == 0 && peer == 1) {
#line 2253
    rv = -1;
#line 2254
    goto ldv_52687;
  } else {

  }
#line 2256
  if (self == 1 && peer == 0) {
#line 2257
    rv = 1;
#line 2258
    goto ldv_52687;
  } else {

  }
  case 2: ;
#line 2262
  if (self == 0 && peer == 1) {
#line 2263
    rv = 1;
#line 2264
    goto ldv_52687;
  } else {

  }
#line 2266
  if (self == 1 && peer == 0) {
#line 2267
    rv = -1;
#line 2268
    goto ldv_52687;
  } else {

  }
#line 2271
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2274
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2275
    tmp = drbd_test_flag(mdev, DISCARD_CONCURRENT);
#line 2275
    rv = tmp != 0 ? -1 : 1;
#line 2277
    goto ldv_52687;
  } else {
#line 2279
    if (ch_peer == 0UL) {
#line 2279
      rv = 1;
#line 2279
      goto ldv_52687;
    } else {

    }
#line 2280
    if (ch_self == 0UL) {
#line 2280
      rv = -1;
#line 2280
      goto ldv_52687;
    } else {

    }
  }
#line 2282
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2283
    goto ldv_52687;
  } else {

  }
  case 4: ;
#line 2285
  if (ch_self < ch_peer) {
#line 2286
    rv = -1;
  } else
#line 2287
  if (ch_self > ch_peer) {
#line 2288
    rv = 1;
  } else {
#line 2291
    tmp___0 = drbd_test_flag(mdev, DISCARD_CONCURRENT);
#line 2291
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2293
  goto ldv_52687;
  case 5: 
#line 2295
  rv = -1;
#line 2296
  goto ldv_52687;
  case 6: 
#line 2298
  rv = 1;
  }
  ldv_52687: ;
#line 2301
  return (rv);
}
}
#line 2304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2306
  rv = -100;
#line 2308
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2314
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2315
  goto ldv_52705;
  case 0: ;
#line 2317
  goto ldv_52705;
  case 7: 
#line 2319
  hg = drbd_asb_recover_0p(mdev);
#line 2320
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2321
    rv = hg;
  } else {

  }
#line 2322
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2323
    rv = hg;
  } else {

  }
#line 2324
  goto ldv_52705;
  case 10: 
#line 2326
  rv = drbd_asb_recover_0p(mdev);
#line 2327
  goto ldv_52705;
  case 8: ;
#line 2329
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2331
  hg = drbd_asb_recover_0p(mdev);
#line 2332
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2335
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2339
    val.i = 0U;
#line 2339
    val.ldv_39979.role = 2U;
#line 2339
    mask.i = 0U;
#line 2339
    mask.ldv_39979.role = 3U;
#line 2339
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2340
    if ((int )rv2 != 1) {
#line 2341
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2343
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2344
      rv = hg;
    }
  } else {
#line 2347
    rv = hg;
  }
  }
  ldv_52705: ;
#line 2350
  return (rv);
}
}
#line 2353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2355
  rv = -100;
#line 2357
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2365
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2366
  goto ldv_52728;
  case 10: 
#line 2368
  rv = drbd_asb_recover_0p(mdev);
#line 2369
  goto ldv_52728;
  case 0: ;
#line 2371
  goto ldv_52728;
  case 9: 
#line 2373
  hg = drbd_asb_recover_0p(mdev);
#line 2374
  if (hg == -1) {
#line 2380
    val.i = 0U;
#line 2380
    val.ldv_39979.role = 2U;
#line 2380
    mask.i = 0U;
#line 2380
    mask.ldv_39979.role = 3U;
#line 2380
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2381
    if ((int )rv2 != 1) {
#line 2382
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2384
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2385
      rv = hg;
    }
  } else {
#line 2388
    rv = hg;
  }
  }
  ldv_52728: ;
#line 2391
  return (rv);
}
}
#line 2394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2397
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2398
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2399
    return;
  } else {

  }
#line 2401
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2402
  return;
}
}
#line 2423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2428
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2429
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2431
  *rule_nr = 10;
#line 2432
  if (self == 4ULL && peer == 4ULL) {
#line 2433
    return (0);
  } else {

  }
#line 2435
  *rule_nr = 20;
#line 2436
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2438
    return (-2);
  } else {

  }
#line 2440
  *rule_nr = 30;
#line 2441
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2443
    return (2);
  } else {

  }
#line 2445
  if (self == peer) {
#line 2448
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2450
      if (mdev->agreed_pro_version <= 90) {
#line 2451
        return (-1091);
      } else {

      }
#line 2453
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2455
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2456
        drbd_uuid_move_history(mdev);
#line 2457
        (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 2458
        (mdev->ldev)->md.uuid[1] = 0ULL;
#line 2460
        if ((int )mdev->state.ldv_39979.disk > 2) {
#line 2460
          tmp = drbd_bm_total_weight(mdev);
#line 2460
          tmp___0 = (u64 )tmp;
        } else {
#line 2460
          tmp___0 = 0ULL;
        }
#line 2460
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2462
        *rule_nr = 34;
      } else {
#line 2464
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2465
        *rule_nr = 36;
      }
#line 2468
      return (1);
    } else {

    }
#line 2471
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2473
      if (mdev->agreed_pro_version <= 90) {
#line 2474
        return (-1091);
      } else {

      }
#line 2476
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2478
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2480
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2481
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2482
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2484
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2485
        *rule_nr = 35;
      } else {
#line 2487
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2488
        *rule_nr = 37;
      }
#line 2491
      return (-1);
    } else {

    }
#line 2495
    tmp___1 = drbd_test_flag(mdev, CRASHED_PRIMARY);
#line 2495
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2499
    *rule_nr = 40;
#line 2501
    switch (rct) {
    case 0: ;
#line 2502
    return (0);
    case 1: ;
#line 2503
    return (1);
    case 2: ;
#line 2504
    return (-1);
    case 3: 
#line 2506
    dc = drbd_test_flag(mdev, DISCARD_CONCURRENT);
#line 2507
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2511
  *rule_nr = 50;
#line 2512
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2513
  if (self == peer) {
#line 2514
    return (-1);
  } else {

  }
#line 2516
  *rule_nr = 51;
#line 2517
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2518
  if (self == peer) {
#line 2519
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2526
      if (mdev->agreed_pro_version <= 90) {
#line 2527
        return (-1091);
      } else {

      }
#line 2529
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2530
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2532
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Lost last syncUUID packet, corrected:\n");
#line 2533
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2535
      return (-1);
    } else {

    }
  } else {

  }
#line 2539
  *rule_nr = 60;
#line 2540
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2541
  i = 2;
#line 2541
  goto ldv_52759;
  ldv_52758: 
#line 2542
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2543
  if (self == peer) {
#line 2544
    return (-2);
  } else {

  }
#line 2541
  i = i + 1;
  ldv_52759: ;
#line 2541
  if (i <= 3) {
#line 2542
    goto ldv_52758;
  } else {

  }
#line 2547
  *rule_nr = 70;
#line 2548
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2549
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2550
  if (self == peer) {
#line 2551
    return (1);
  } else {

  }
#line 2553
  *rule_nr = 71;
#line 2554
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2555
  if (self == peer) {
#line 2556
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2563
      if (mdev->agreed_pro_version <= 90) {
#line 2564
        return (-1091);
      } else {

      }
#line 2566
      __drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2567
      __drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2569
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2570
      if ((int )mdev->state.ldv_39979.disk > 2) {
#line 2570
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2570
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2570
        tmp___3 = 0ULL;
      }
#line 2570
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2573
      return (1);
    } else {

    }
  } else {

  }
#line 2578
  *rule_nr = 80;
#line 2579
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2580
  i = 2;
#line 2580
  goto ldv_52762;
  ldv_52761: 
#line 2581
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2582
  if (self == peer) {
#line 2583
    return (2);
  } else {

  }
#line 2580
  i = i + 1;
  ldv_52762: ;
#line 2580
  if (i <= 3) {
#line 2581
    goto ldv_52761;
  } else {

  }
#line 2586
  *rule_nr = 90;
#line 2587
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2588
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2589
  if (self == peer && self != 0ULL) {
#line 2590
    return (100);
  } else {

  }
#line 2592
  *rule_nr = 100;
#line 2593
  i = 2;
#line 2593
  goto ldv_52768;
  ldv_52767: 
#line 2594
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2595
  j = 2;
#line 2595
  goto ldv_52765;
  ldv_52764: 
#line 2596
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2597
  if (self == peer) {
#line 2598
    return (-100);
  } else {

  }
#line 2595
  j = j + 1;
  ldv_52765: ;
#line 2595
  if (j <= 3) {
#line 2596
    goto ldv_52764;
  } else {

  }
#line 2593
  i = i + 1;
  ldv_52768: ;
#line 2593
  if (i <= 3) {
#line 2594
    goto ldv_52767;
  } else {

  }

#line 2602
  return (-1000);
}
}
#line 2608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2612
  rv = C_MASK;
#line 2615
  mydisk = (enum drbd_disk_state )mdev->state.ldv_39979.disk;
#line 2616
  if ((unsigned int )mydisk == 3U) {
#line 2617
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_39979.disk;
  } else {

  }
#line 2619
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2621
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2622
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2623
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2626
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2627
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2629
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2631
  if (hg == -1000) {
#line 2632
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2633
    return (C_MASK);
  } else {

  }
#line 2635
  if (hg < -1000) {
#line 2636
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2637
    return (C_MASK);
  } else {

  }
#line 2640
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2642
    if (hg == -100) {
#line 2642
      tmp = 1;
    } else {
#line 2642
      __x___0 = hg;
#line 2642
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2642
      if (ret == 2L) {
#line 2642
        tmp = 1;
      } else {
#line 2642
        tmp = 0;
      }
    }
#line 2642
    f = tmp;
#line 2643
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2644
    if (f != 0) {
#line 2645
      hg = hg * 2;
    } else {

    }
#line 2646
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2650
  __x___2 = hg;
#line 2650
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2650
  if (ret___0 == 100L) {
#line 2651
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2653
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2654
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2656
    forced = hg == -100;
#line 2658
    switch (pcount) {
    case 0: 
#line 2660
    hg = drbd_asb_recover_0p(mdev);
#line 2661
    goto ldv_52791;
    case 1: 
#line 2663
    hg = drbd_asb_recover_1p(mdev);
#line 2664
    goto ldv_52791;
    case 2: 
#line 2666
    hg = drbd_asb_recover_2p(mdev);
#line 2667
    goto ldv_52791;
    }
    ldv_52791: 
#line 2669
    __x___4 = hg;
#line 2669
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2669
    if (ret___1 <= 99L) {
#line 2670
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2673
      if (forced != 0) {
#line 2674
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2676
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2681
  if (hg == -100) {
#line 2682
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2683
      hg = -1;
    } else {

    }
#line 2684
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2685
      hg = 1;
    } else {

    }
#line 2687
    __x___6 = hg;
#line 2687
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2687
    if (ret___2 <= 99L) {
#line 2688
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2693
  if (hg == -100) {
#line 2698
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2699
    drbd_khelper(mdev, (char *)"split-brain");
#line 2700
    return (C_MASK);
  } else {

  }
#line 2703
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2704
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2705
    return (C_MASK);
  } else {

  }
#line 2708
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_39979.disk > 6) {
#line 2710
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2712
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2715
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2716
    return (C_MASK);
    case 10: 
#line 2718
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2723
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2723
    goto _L;
  } else {
#line 2723
    tmp___1 = drbd_test_flag(mdev, CONN_DRY_RUN);
#line 2723
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2724
      if (hg == 0) {
#line 2725
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2727
        __x___8 = hg;
#line 2727
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2727
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2727
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2730
      return (C_MASK);
    } else {

    }
  }
#line 2733
  __x___10 = hg;
#line 2733
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2733
  if (ret___4 > 1L) {
#line 2734
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2735
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_LOCKED_SET_ALLOWED);
#line 2735
    if (tmp___2 != 0) {
#line 2737
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2740
  if (hg > 0) {
#line 2741
    rv = C_WF_BITMAP_S;
  } else
#line 2742
  if (hg < 0) {
#line 2743
    rv = C_WF_BITMAP_T;
  } else {
#line 2745
    rv = C_CONNECTED;
#line 2746
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2746
    if (tmp___4 != 0UL) {
#line 2747
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2747
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2752
  return (rv);
}
}
#line 2756 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2759
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2761
    return (0);
  } else {

  }
#line 2764
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2766
    return (1);
  } else {

  }
#line 2769
  if ((unsigned int )peer == (unsigned int )self) {
#line 2770
    return (0);
  } else {

  }
#line 2773
  return (1);
}
}
#line 2776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2778
  p = & mdev->data.rbuf.protocol;
#line 2781
  p_integrity_alg[0] = '\000';
#line 2781
  tmp = 1U;
#line 2781
  while (1) {
#line 2781
    if (tmp >= 64U) {
#line 2781
      break;
    } else {

    }
#line 2781
    p_integrity_alg[tmp] = (char)0;
#line 2781
    tmp = tmp + 1U;
  }
#line 2783
  tmp___0 = __fswab32(p->protocol);
#line 2783
  p_proto = (int )tmp___0;
#line 2784
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2784
  p_after_sb_0p = (int )tmp___1;
#line 2785
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2785
  p_after_sb_1p = (int )tmp___2;
#line 2786
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2786
  p_after_sb_2p = (int )tmp___3;
#line 2787
  tmp___4 = __fswab32(p->two_primaries);
#line 2787
  p_two_primaries = (int )tmp___4;
#line 2788
  tmp___5 = __fswab32(p->conn_flags);
#line 2788
  cf = (int )tmp___5;
#line 2789
  p_want_lose = cf & 1;
#line 2791
  drbd_clear_flag(mdev, CONN_DRY_RUN);
#line 2793
  if ((cf & 2) != 0) {
#line 2794
    drbd_set_flag(mdev, CONN_DRY_RUN);
  } else {

  }
#line 2796
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2798
    goto disconnect;
  } else {

  }
#line 2801
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2801
  if (tmp___6 != 0) {
#line 2802
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2803
    goto disconnect;
  } else {

  }
#line 2806
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2806
  if (tmp___7 != 0) {
#line 2807
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2808
    goto disconnect;
  } else {

  }
#line 2811
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2811
  if (tmp___8 != 0) {
#line 2812
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2813
    goto disconnect;
  } else {

  }
#line 2816
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2817
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2818
    goto disconnect;
  } else {

  }
#line 2821
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2822
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2823
    goto disconnect;
  } else {

  }
#line 2826
  if (mdev->agreed_pro_version > 86) {
#line 2827
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2829
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2829
    if ((unsigned int )tmp___9 != data_size) {
#line 2830
      return (0);
    } else {

    }
#line 2832
    p_integrity_alg[63] = 0;
#line 2833
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2833
    if (tmp___10 != 0) {
#line 2834
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2835
      goto disconnect;
    } else {

    }
#line 2837
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2841
  return (1);
  disconnect: 
#line 2844
  val.i = 0U;
#line 2844
  val.ldv_39979.conn = 1U;
#line 2844
  mask.i = 0U;
#line 2844
  mask.ldv_39979.conn = 31U;
#line 2844
  drbd_force_state(mdev, mask, val);
#line 2845
  return (0);
}
}
#line 2853 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2858
  if ((int )((signed char )*alg) == 0) {
#line 2859
    return (0);
  } else {

  }
#line 2861
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2862
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2862
  if (tmp___0 != 0L) {
#line 2863
    tmp = PTR_ERR((void const   *)tfm);
#line 2863
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2865
    return (tfm);
  } else {

  }
#line 2867
  tmp___2 = crypto_hash_tfm(tfm);
#line 2867
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2867
  if (tmp___3 == 0) {
#line 2868
    crypto_free_hash(tfm);
#line 2869
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2870
    tmp___1 = ERR_PTR(-22L);
#line 2870
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2872
  return (tfm);
}
}
#line 2875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2877
  ok = 1;
#line 2878
  p = & mdev->data.rbuf.rs_param_95;
#line 2880
  verify_tfm = 0;
#line 2881
  csums_tfm = 0;
#line 2882
  apv = mdev->agreed_pro_version;
#line 2883
  rs_plan_s = 0;
#line 2884
  fifo_size = 0;
#line 2886
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2892
  if (packet_size > exp_max_sz) {
#line 2893
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2895
    return (0);
  } else {

  }
#line 2898
  if (apv <= 88) {
#line 2899
    header_size = 4U;
#line 2900
    data_size = packet_size - header_size;
  } else
#line 2901
  if (apv <= 94) {
#line 2902
    header_size = 132U;
#line 2903
    data_size = packet_size - header_size;
#line 2904
    if (data_size != 0U) {
#line 2904
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2904);
    } else {

    }
  } else {
#line 2906
    header_size = 148U;
#line 2907
    data_size = packet_size - header_size;
#line 2908
    if (data_size != 0U) {
#line 2908
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              2908);
    } else {

    }
  }
#line 2912
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2914
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2914
  if ((unsigned int )tmp != header_size) {
#line 2915
    return (0);
  } else {

  }
#line 2917
  tmp___0 = __fswab32(p->rate);
#line 2917
  mdev->sync_conf.rate = (int )tmp___0;
#line 2919
  if (apv > 87) {
#line 2920
    if (apv == 88) {
#line 2921
      if (data_size > 64U || data_size == 0U) {
#line 2922
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg of wrong size, peer wants %u, accepting only up to %u byte\n",
                data_size, 64);
#line 2925
        return (0);
      } else {

      }
#line 2928
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2928
      if ((unsigned int )tmp___1 != data_size) {
#line 2929
        return (0);
      } else {

      }
#line 2933
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2933
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2933);
      } else {

      }
#line 2934
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2939
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2939
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2939);
      } else {

      }
#line 2940
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2940
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                2940);
      } else {

      }
#line 2941
      p->verify_alg[63] = 0;
#line 2942
      p->csums_alg[63] = 0;
    }
#line 2945
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2945
    if (tmp___3 != 0) {
#line 2946
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2947
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2949
        goto disconnect;
      } else {

      }
#line 2951
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2953
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2953
      if (tmp___2 != 0L) {
#line 2954
        verify_tfm = 0;
#line 2955
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2959
    if (apv > 88) {
#line 2959
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2959
      if (tmp___5 != 0) {
#line 2960
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2961
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2963
          goto disconnect;
        } else {

        }
#line 2965
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2967
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2967
        if (tmp___4 != 0L) {
#line 2968
          csums_tfm = 0;
#line 2969
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2973
    if (apv > 94) {
#line 2974
      tmp___6 = __fswab32(p->rate);
#line 2974
      mdev->sync_conf.rate = (int )tmp___6;
#line 2975
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2975
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2976
      tmp___8 = __fswab32(p->c_delay_target);
#line 2976
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2977
      tmp___9 = __fswab32(p->c_fill_target);
#line 2977
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2978
      tmp___10 = __fswab32(p->c_max_rate);
#line 2978
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2980
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2981
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2982
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 16U);
#line 2982
        rs_plan_s = (int *)tmp___11;
#line 2983
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2984
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2985
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2990
    spin_lock(& mdev->peer_seq_lock);
#line 2992
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2993
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2994
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2994
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2995
      crypto_free_hash(mdev->verify_tfm);
#line 2996
      mdev->verify_tfm = verify_tfm;
#line 2997
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2999
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3000
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 3001
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 3001
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 3002
      crypto_free_hash(mdev->csums_tfm);
#line 3003
      mdev->csums_tfm = csums_tfm;
#line 3004
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 3006
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 3007
      kfree((void const   *)mdev->rs_plan_s.values);
#line 3008
      mdev->rs_plan_s.values = rs_plan_s;
#line 3009
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 3010
      mdev->rs_planed = 0;
    } else {

    }
#line 3012
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 3015
  return (ok);
  disconnect: 
#line 3019
  crypto_free_hash(csums_tfm);
#line 3021
  crypto_free_hash(verify_tfm);
#line 3022
  val.i = 0U;
#line 3022
  val.ldv_39979.conn = 1U;
#line 3022
  mask.i = 0U;
#line 3022
  mask.ldv_39979.conn = 31U;
#line 3022
  drbd_force_state(mdev, mask, val);
#line 3023
  return (0);
}
}
#line 3027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 3031
  if (a == 0UL || b == 0UL) {
#line 3032
    return;
  } else {

  }
#line 3033
  d = a > b ? a - b : b - a;
#line 3034
  if (a >> 3 < d || b >> 3 < d) {
#line 3035
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 3037
  return;
}
}
#line 3039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 3041
  p = & mdev->data.rbuf.sizes;
#line 3042
  dd = 0;
#line 3044
  ldsc = 0;
#line 3047
  tmp = __fswab64(p->d_size);
#line 3047
  p_size = (sector_t )tmp;
#line 3048
  tmp___0 = __fswab64(p->u_size);
#line 3048
  p_usize = (sector_t )tmp___0;
#line 3050
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 3051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 3052
    val.i = 0U;
#line 3052
    val.ldv_39979.conn = 1U;
#line 3052
    mask.i = 0U;
#line 3052
    mask.ldv_39979.conn = 31U;
#line 3052
    drbd_force_state(mdev, mask, val);
#line 3053
    return (0);
  } else {

  }
#line 3058
  mdev->p_size = p_size;
#line 3060
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3060
  if (tmp___6 != 0) {
#line 3061
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 3061
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 3063
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 3068
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 3069
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 3069
      __y = p_usize;
#line 3069
      if (__x != 0UL) {
#line 3069
        if (__y != 0UL) {
#line 3069
          _min1 = __x;
#line 3069
          _min2 = __y;
#line 3069
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 3069
          tmp___2 = __x;
        }
#line 3069
        tmp___3 = tmp___2;
      } else {
#line 3069
        tmp___3 = __y;
      }
#line 3069
      p_usize = tmp___3;
    } else {

    }
#line 3072
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 3074
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 3075
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 3076
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 3082
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 3082
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 3082
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_39979.disk > 4) && (int )mdev->state.ldv_39979.conn <= 9) {
#line 3086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 3087
      val___0.i = 0U;
#line 3087
      val___0.ldv_39979.conn = 1U;
#line 3087
      mask___0.i = 0U;
#line 3087
      mask___0.ldv_39979.conn = 31U;
#line 3087
      drbd_force_state(mdev, mask___0, val___0);
#line 3088
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 3089
      put_ldev(mdev);
#line 3090
      return (0);
    } else {

    }
#line 3092
    put_ldev(mdev);
  } else {

  }
#line 3095
  tmp___7 = __fswab16((int )p->dds_flags);
#line 3095
  ddsf = (enum dds_flags )tmp___7;
#line 3096
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3096
  if (tmp___8 != 0) {
#line 3097
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 3098
    put_ldev(mdev);
#line 3099
    if ((int )dd == -1) {
#line 3100
      return (0);
    } else {

    }
#line 3101
    drbd_md_sync(mdev);
  } else {
#line 3104
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3107
  tmp___9 = __fswab32(p->max_bio_size);
#line 3107
  mdev->peer_max_bio_size = tmp___9;
#line 3108
  drbd_reconsider_max_bio_size(mdev);
#line 3110
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3110
  if (tmp___11 != 0) {
#line 3111
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3111
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3112
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3113
      ldsc = 1;
    } else {

    }
#line 3116
    put_ldev(mdev);
  } else {

  }
#line 3119
  if ((int )mdev->state.ldv_39979.conn > 9) {
#line 3120
    tmp___12 = __fswab64(p->c_size);
#line 3120
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3120
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3124
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3126
    tmp___14 = drbd_test_and_clear_flag(mdev, RESIZE_PENDING);
#line 3126
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3128
      if ((int )mdev->state.ldv_39979.pdsk > 3 && (int )mdev->state.ldv_39979.disk > 3) {
#line 3130
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3131
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3133
          resync_after_online_grow(mdev);
        }
      } else {
#line 3135
        drbd_set_flag(mdev, RESYNC_AFTER_NEG);
      }
    } else {

    }
  } else {

  }
#line 3139
  return (1);
}
}
#line 3142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3144
  p = & mdev->data.rbuf.uuids;
#line 3146
  updated_uuids = 0;
#line 3148
  tmp = kmalloc(48UL, 16U);
#line 3148
  p_uuid = (u64 *)tmp;
#line 3150
  i = 0;
#line 3150
  goto ldv_52906;
  ldv_52905: 
#line 3151
  tmp___0 = __fswab64(p->uuid[i]);
#line 3151
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3150
  i = i + 1;
  ldv_52906: ;
#line 3150
  if (i <= 5) {
#line 3151
    goto ldv_52905;
  } else {

  }
#line 3153
  kfree((void const   *)mdev->p_uuid);
#line 3154
  mdev->p_uuid = p_uuid;
#line 3156
  if ((((int )mdev->state.ldv_39979.conn <= 9 && (int )mdev->state.ldv_39979.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3160
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3162
    val.i = 0U;
#line 3162
    val.ldv_39979.conn = 1U;
#line 3162
    mask.i = 0U;
#line 3162
    mask.ldv_39979.conn = 31U;
#line 3162
    drbd_force_state(mdev, mask, val);
#line 3163
    return (0);
  } else {

  }
#line 3166
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3166
  if (tmp___1 != 0) {
#line 3167
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3172
    if (skip_initial_sync != 0) {
#line 3173
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3174
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3177
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3178
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3179
      __ns.i = mdev->state.i;
#line 3179
      __ns.ldv_39979.disk = 8U;
#line 3179
      __ns.ldv_39979.pdsk = 8U;
#line 3179
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3181
      drbd_md_sync(mdev);
#line 3182
      updated_uuids = 1;
    } else {

    }
#line 3184
    put_ldev(mdev);
  } else
#line 3185
  if ((int )mdev->state.ldv_39979.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3189
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3196
  tmp___2 = drbd_test_flag(mdev, CLUSTER_ST_CHANGE);
#line 3196
  if (tmp___2 == 0) {
#line 3196
    goto ldv_52915;
  } else {

  }
#line 3196
  tmp___3 = get_current();
#line 3196
  __wait.flags = 0U;
#line 3196
  __wait.private = (void *)tmp___3;
#line 3196
  __wait.func = & autoremove_wake_function;
#line 3196
  __wait.task_list.next = & __wait.task_list;
#line 3196
  __wait.task_list.prev = & __wait.task_list;
  ldv_52918: 
#line 3196
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3196
  tmp___4 = drbd_test_flag(mdev, CLUSTER_ST_CHANGE);
#line 3196
  if (tmp___4 == 0) {
#line 3196
    goto ldv_52917;
  } else {

  }
#line 3196
  schedule();
#line 3196
  goto ldv_52918;
  ldv_52917: 
#line 3196
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52915: ;
#line 3197
  if ((int )mdev->state.ldv_39979.conn > 9 && (int )mdev->state.ldv_39979.disk <= 3) {
#line 3198
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3198
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3200
  if (updated_uuids != 0) {
#line 3201
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3203
  return (1);
}
}
#line 3210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3214
  c_tab[0] = 0;
#line 3214
  c_tab[1] = C_TEAR_DOWN;
#line 3214
  c_tab[2] = 0;
#line 3214
  c_tab[3] = 0;
#line 3214
  c_tab[4] = 0;
#line 3214
  c_tab[5] = 0;
#line 3214
  c_tab[6] = 0;
#line 3214
  c_tab[7] = 0;
#line 3214
  c_tab[8] = 0;
#line 3214
  c_tab[9] = 0;
#line 3214
  c_tab[10] = C_CONNECTED;
#line 3214
  c_tab[11] = C_STARTING_SYNC_T;
#line 3214
  c_tab[12] = C_STARTING_SYNC_S;
#line 3214
  c_tab[13] = 0;
#line 3214
  c_tab[14] = 0;
#line 3214
  c_tab[15] = 0;
#line 3214
  c_tab[16] = 0;
#line 3214
  c_tab[17] = 0;
#line 3214
  c_tab[18] = C_VERIFY_T;
#line 3214
  c_tab[19] = 0;
#line 3214
  c_tab[20] = 0;
#line 3214
  c_tab[21] = 0;
#line 3214
  c_tab[22] = 0;
#line 3214
  c_tab[23] = 0;
#line 3214
  c_tab[24] = 0;
#line 3214
  c_tab[25] = 0;
#line 3214
  c_tab[26] = 0;
#line 3214
  c_tab[27] = 0;
#line 3214
  c_tab[28] = 0;
#line 3214
  c_tab[29] = 0;
#line 3214
  c_tab[30] = 0;
#line 3214
  c_tab[31] = C_MASK;
#line 3224
  ms.i = ps.i;
#line 3226
  ms.ldv_39979.conn = (unsigned char )c_tab[(int )ps.ldv_39979.conn];
#line 3227
  ms.ldv_39979.peer = ps.ldv_39979.role;
#line 3228
  ms.ldv_39979.role = ps.ldv_39979.peer;
#line 3229
  ms.ldv_39979.pdsk = ps.ldv_39979.disk;
#line 3230
  ms.ldv_39979.disk = ps.ldv_39979.pdsk;
#line 3231
  ms.ldv_39979.peer_isp = (unsigned char )((int )ps.ldv_39979.aftr_isp | (int )ps.ldv_39979.user_isp);
#line 3233
  return (ms);
}
}
#line 3236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3238
  p = & mdev->data.rbuf.req_state;
#line 3242
  tmp = __fswab32(p->mask);
#line 3242
  mask.i = tmp;
#line 3243
  tmp___0 = __fswab32(p->val);
#line 3243
  val.i = tmp___0;
#line 3245
  tmp___1 = drbd_test_flag(mdev, DISCARD_CONCURRENT);
#line 3245
  if (tmp___1 != 0) {
#line 3245
    tmp___2 = drbd_test_flag(mdev, CLUSTER_ST_CHANGE);
#line 3245
    if (tmp___2 != 0) {
#line 3247
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3248
      return (1);
    } else {

    }
  } else {

  }
#line 3251
  mask = convert_state(mask);
#line 3252
  val = convert_state(val);
#line 3254
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3256
  drbd_send_sr_reply(mdev, rv);
#line 3257
  drbd_md_sync(mdev);
#line 3259
  return (1);
}
}
#line 3262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3264
  p = & mdev->data.rbuf.state;
#line 3270
  tmp = __fswab32(p->state);
#line 3270
  peer_state.i = tmp;
#line 3272
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_39979.disk;
#line 3273
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3274
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3275
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3275
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3278
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3280
  ns = mdev->state;
#line 3280
  os = ns;
#line 3281
  spin_unlock_irq(& mdev->req_lock);
#line 3286
  if ((int )os.ldv_39979.conn <= 7) {
#line 3287
    return (0);
  } else {

  }
#line 3295
  if ((((*((unsigned int *)(& os) + 0UL) == 32768U || *((unsigned int *)(& os) + 0UL) == 57344U) && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_39979.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3304
    if ((int )peer_state.ldv_39979.conn > 10 && (int )peer_state.ldv_39979.conn <= 15) {
#line 3306
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3311
    if ((int )os.ldv_39979.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3313
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3313
      if (tmp___1 <= mdev->rs_failed) {
#line 3314
        drbd_resync_finished(mdev);
      } else {

      }
#line 3315
      return (1);
    } else {

    }
  } else {

  }
#line 3320
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) == 304U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) && (unsigned int )real_peer_disk == 8U) {
#line 3322
    ov_oos_print(mdev);
#line 3323
    drbd_resync_finished(mdev);
#line 3324
    return (1);
  } else {

  }
#line 3332
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_39979.conn > 16) {
#line 3334
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3336
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3337
    ns.ldv_39979.conn = 10U;
  } else {

  }
#line 3339
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3340
    ns.ldv_39979.conn = 23U;
  } else {

  }
#line 3342
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_39979.disk > 2) {
#line 3342
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3342
    if (tmp___5 != 0) {
#line 3347
      cr = (int )os.ldv_39979.conn <= 9;
#line 3350
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3355
      tmp___2 = drbd_test_flag(mdev, CONSIDER_RESYNC);
#line 3355
      cr = tmp___2 | cr;
#line 3358
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_39979.conn > 10 && (int )peer_state.ldv_39979.conn <= 14)) | cr;
#line 3362
      if (cr != 0) {
#line 3363
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_39979.role,
                                      real_peer_disk);
#line 3363
        ns.ldv_39979.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3365
      put_ldev(mdev);
#line 3366
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3367
        ns.ldv_39979.conn = 10U;
#line 3368
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3369
          val.i = 0U;
#line 3369
          val.ldv_39979.disk = 2U;
#line 3369
          mask.i = 0U;
#line 3369
          mask.ldv_39979.disk = 15U;
#line 3369
          drbd_force_state(mdev, mask, val);
        } else
#line 3370
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3371
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3372
          peer_state.ldv_39979.disk = 0U;
#line 3373
          real_peer_disk = D_DISKLESS;
        } else {
#line 3375
          tmp___4 = drbd_test_and_clear_flag(mdev, CONN_DRY_RUN);
#line 3375
          if (tmp___4 != 0) {
#line 3376
            return (0);
          } else {

          }
#line 3377
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3377
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3377);
          } else {

          }
#line 3378
          val___0.i = 0U;
#line 3378
          val___0.ldv_39979.conn = 1U;
#line 3378
          mask___0.i = 0U;
#line 3378
          mask___0.ldv_39979.conn = 31U;
#line 3378
          drbd_force_state(mdev, mask___0, val___0);
#line 3379
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3384
  spin_lock_irq(& mdev->req_lock);
#line 3385
  if (mdev->state.i != os.i) {
#line 3386
    goto retry;
  } else {

  }
#line 3387
  drbd_clear_flag(mdev, CONSIDER_RESYNC);
#line 3388
  ns.ldv_39979.peer = peer_state.ldv_39979.role;
#line 3389
  ns.ldv_39979.pdsk = (unsigned char )real_peer_disk;
#line 3390
  ns.ldv_39979.peer_isp = (unsigned char )((int )peer_state.ldv_39979.aftr_isp | (int )peer_state.ldv_39979.user_isp);
#line 3391
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3392
    ns.ldv_39979.disk = mdev->new_state_tmp.ldv_39979.disk;
  } else {

  }
#line 3393
  cs_flags = (enum chg_state_flags )(((int )os.ldv_39979.conn > 9 || (int )ns.ldv_39979.conn <= 9) + 2);
#line 3394
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3394
    tmp___6 = is_susp(ns);
#line 3394
    if (tmp___6 != 0) {
#line 3394
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3394
        if ((int )os.ldv_39979.conn <= 9) {
#line 3394
          tmp___7 = drbd_test_flag(mdev, NEW_CUR_UUID);
#line 3394
          if (tmp___7 != 0) {
#line 3398
            spin_unlock_irq(& mdev->req_lock);
#line 3399
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3400
            tl_clear(mdev);
#line 3401
            drbd_uuid_new_current(mdev);
#line 3402
            drbd_clear_flag(mdev, NEW_CUR_UUID);
#line 3403
            val___1.i = 0U;
#line 3403
            val___1.ldv_39979.conn = 6U;
#line 3403
            val___1.ldv_39979.susp = 0U;
#line 3403
            mask___1.i = 0U;
#line 3403
            mask___1.ldv_39979.conn = 31U;
#line 3403
            mask___1.ldv_39979.susp = 1U;
#line 3403
            drbd_force_state(mdev, mask___1, val___1);
#line 3404
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3406
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3406
  rv = (int )tmp___8;
#line 3407
  ns = mdev->state;
#line 3408
  spin_unlock_irq(& mdev->req_lock);
#line 3410
  if (rv <= 0) {
#line 3411
    val___2.i = 0U;
#line 3411
    val___2.ldv_39979.conn = 1U;
#line 3411
    mask___2.i = 0U;
#line 3411
    mask___2.ldv_39979.conn = 31U;
#line 3411
    drbd_force_state(mdev, mask___2, val___2);
#line 3412
    return (0);
  } else {

  }
#line 3415
  if ((int )os.ldv_39979.conn > 9) {
#line 3416
    if (((int )ns.ldv_39979.conn > 10 && (int )peer_state.ldv_39979.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3421
      drbd_send_uuids(mdev);
#line 3422
      drbd_send_current_state(mdev);
    } else {

    }
  } else {

  }
#line 3426
  (mdev->net_conf)->want_lose = 0U;
#line 3428
  drbd_md_sync(mdev);
#line 3430
  return (1);
}
}
#line 3433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3435
  p = & mdev->data.rbuf.rs_uuid;
#line 3437
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_39979.conn <= 9) || (int )mdev->state.ldv_39979.disk <= 2) {
#line 3437
    goto ldv_52969;
  } else {

  }
#line 3437
  tmp = get_current();
#line 3437
  __wait.flags = 0U;
#line 3437
  __wait.private = (void *)tmp;
#line 3437
  __wait.func = & autoremove_wake_function;
#line 3437
  __wait.task_list.next = & __wait.task_list;
#line 3437
  __wait.task_list.prev = & __wait.task_list;
  ldv_52972: 
#line 3437
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3437
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_39979.conn <= 9) || (int )mdev->state.ldv_39979.disk <= 2) {
#line 3437
    goto ldv_52971;
  } else {

  }
#line 3437
  schedule();
#line 3437
  goto ldv_52972;
  ldv_52971: 
#line 3437
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52969: 
#line 3447
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3447
  if (tmp___1 != 0) {
#line 3448
    tmp___0 = __fswab64(p->uuid);
#line 3448
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3449
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3451
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3452
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3454
    put_ldev(mdev);
  } else {
#line 3456
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3458
  return (1);
}
}
#line 3468 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3471
  __min1 = 511UL;
#line 3471
  __min2 = c->bm_words - c->word_offset;
#line 3471
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3472
  want = num_words * 8U;
#line 3475
  if (want != data_size) {
#line 3476
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3477
    return (-5);
  } else {

  }
#line 3479
  if (want == 0U) {
#line 3480
    return (0);
  } else {

  }
#line 3481
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3482
  if ((unsigned int )err != want) {
#line 3483
    if (err >= 0) {
#line 3484
      err = -5;
    } else {

    }
#line 3485
    return (err);
  } else {

  }
#line 3488
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3490
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3491
  c->bit_offset = c->word_offset * 64UL;
#line 3492
  if (c->bit_offset > c->bm_bits) {
#line 3493
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3495
  return (1);
}
}
#line 3505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3513
  s = c->bit_offset;
#line 3515
  tmp___0 = __fswab16((int )p->head.length);
#line 3515
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3516
  tmp___1 = DCBP_get_start(p);
#line 3516
  toggle = tmp___1;
#line 3520
  tmp___2 = DCBP_get_pad_bits(p);
#line 3520
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3522
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3523
  if (bits < 0) {
#line 3524
    return (-5);
  } else {

  }
#line 3526
  have = bits;
#line 3526
  goto ldv_53002;
  ldv_53001: 
#line 3527
  bits = vli_decode_bits(& rl, look_ahead);
#line 3528
  if (bits <= 0) {
#line 3529
    return (-5);
  } else {

  }
#line 3531
  if (toggle != 0) {
#line 3532
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3533
    if (c->bm_bits <= e) {
#line 3534
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3535
      return (-5);
    } else {

    }
#line 3537
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3540
  if (have < bits) {
#line 3541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3545
    return (-5);
  } else {

  }
#line 3547
  look_ahead = look_ahead >> bits;
#line 3548
  have = have - bits;
#line 3550
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3551
  if (bits < 0) {
#line 3552
    return (-5);
  } else {

  }
#line 3553
  look_ahead = (tmp << have) | look_ahead;
#line 3554
  have = have + bits;
#line 3526
  s = (unsigned long )((unsigned long long )s + rl);
#line 3526
  toggle = toggle == 0;
  ldv_53002: ;
#line 3526
  if (have > 0) {
#line 3527
    goto ldv_53001;
  } else {

  }
#line 3557
  c->bit_offset = s;
#line 3558
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3560
  return (c->bm_bits != s);
}
}
#line 3570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3574
  tmp___0 = DCBP_get_code(p);
#line 3574
  if ((unsigned int )tmp___0 == 2U) {
#line 3575
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3575
    return (tmp);
  } else {

  }
#line 3581
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3582
  val.i = 0U;
#line 3582
  val.ldv_39979.conn = 6U;
#line 3582
  mask.i = 0U;
#line 3582
  mask.ldv_39979.conn = 31U;
#line 3582
  drbd_force_state(mdev, mask, val);
#line 3583
  return (-5);
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3590
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3593
  total = c->bytes[0] + c->bytes[1];
#line 3597
  if (total == 0U) {
#line 3598
    return;
  } else {

  }
#line 3601
  if (total >= plain) {
#line 3602
    return;
  } else {

  }
#line 3605
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3608
  if (r > 1000U) {
#line 3609
    r = 1000U;
  } else {

  }
#line 3611
  r = 1000U - r;
#line 3612
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3613
  return;
}
}
#line 3628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3633
  ok = 0;
#line 3634
  h = & mdev->data.rbuf.header.h80;
#line 3636
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_LOCKED_SET_ALLOWED);
#line 3642
  tmp = __get_free_pages(16U, 0U);
#line 3642
  buffer = (void *)tmp;
#line 3643
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3644
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3645
    goto out;
  } else {

  }
#line 3648
  tmp___0 = drbd_bm_bits(mdev);
#line 3648
  tmp___1 = drbd_bm_words(mdev);
#line 3648
  __constr_expr_0.bm_bits = tmp___0;
#line 3648
  __constr_expr_0.bm_words = tmp___1;
#line 3648
  __constr_expr_0.bit_offset = 0UL;
#line 3648
  __constr_expr_0.word_offset = 0UL;
#line 3648
  __constr_expr_0.packets[0] = 0U;
#line 3648
  __constr_expr_0.packets[1] = 0U;
#line 3648
  __constr_expr_0.bytes[0] = 0U;
#line 3648
  __constr_expr_0.bytes[1] = 0U;
#line 3648
  c = __constr_expr_0;
  ldv_53039: ;
#line 3654
  if ((unsigned int )cmd == 4U) {
#line 3655
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3656
  if ((unsigned int )cmd == 36U) {
#line 3661
    if (data_size > 4088U) {
#line 3662
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3663
      goto out;
    } else {

    }
#line 3666
    p = (struct p_compressed_bm *)buffer;
#line 3667
    __len = 8UL;
#line 3667
    if (__len > 63UL) {
#line 3667
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3667
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3668
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3668
    if ((unsigned int )tmp___2 != data_size) {
#line 3669
      goto out;
    } else {

    }
#line 3670
    if (data_size <= 1U) {
#line 3671
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3672
      goto out;
    } else {

    }
#line 3674
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3676
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3677
    goto out;
  }
#line 3680
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3681
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3683
  if (err <= 0) {
#line 3684
    if (err < 0) {
#line 3685
      goto out;
    } else {

    }
#line 3686
    goto ldv_53038;
  } else {

  }
#line 3688
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3688
  if (tmp___3 == 0) {
#line 3689
    goto out;
  } else {

  }
#line 3690
  goto ldv_53039;
  ldv_53038: 
#line 3692
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3694
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3697
    tmp___4 = drbd_send_bitmap(mdev);
#line 3697
    ok = tmp___4 == 0;
#line 3698
    if (ok == 0) {
#line 3699
      goto out;
    } else {

    }
#line 3701
    val.i = 0U;
#line 3701
    val.ldv_39979.conn = 15U;
#line 3701
    mask.i = 0U;
#line 3701
    mask.ldv_39979.conn = 31U;
#line 3701
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3702
    if ((int )rv != 1) {
#line 3702
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              3702);
    } else {

    }
  } else
#line 3703
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3706
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39979.conn);
#line 3706
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3710
  ok = 1;
  out: 
#line 3712
  drbd_bm_unlock(mdev);
#line 3713
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3714
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3715
  free_pages((unsigned long )buffer, 0U);
#line 3716
  return (ok);
}
}
#line 3719 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3725
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3728
  size = (int )data_size;
#line 3729
  goto ldv_53062;
  ldv_53061: 
#line 3730
  __min1 = size;
#line 3730
  __min2 = 128;
#line 3730
  want = __min1 < __min2 ? __min1 : __min2;
#line 3731
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3732
  _b = r <= 0;
#line 3732
  if (_b != 0) {
#line 3732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            3732);
  } else {

  }
#line 3732
  if (_b != 0) {
#line 3732
    goto ldv_53060;
  } else {

  }
#line 3733
  size = size - r;
  ldv_53062: ;
#line 3729
  if (size > 0) {
#line 3730
    goto ldv_53061;
  } else {

  }
  ldv_53060: ;
#line 3735
  return (size == 0);
}
}
#line 3738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3742
  drbd_tcp_quickack(mdev->data.socket);
#line 3744
  return (1);
}
}
#line 3747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3749
  p = & mdev->data.rbuf.block_desc;
#line 3751
  switch ((int )mdev->state.ldv_39979.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3755
  goto ldv_53077;
  default: 
#line 3757
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39979.conn);
#line 3757
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_53077: 
#line 3761
  tmp___0 = __fswab32(p->blksize);
#line 3761
  tmp___1 = __fswab64(p->sector);
#line 3761
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3761U);
#line 3763
  return (1);
}
}
#line 3774 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3774
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3809 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3811
  header = & mdev->data.rbuf.header;
#line 3817
  goto ldv_53098;
  ldv_53097: 
#line 3818
  drbd_thread_current_set_cpu(mdev);
#line 3819
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3819
  if (tmp == 0) {
#line 3820
    goto err_out;
  } else {

  }
#line 3822
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3822
  if (tmp___0 != 0L) {
#line 3823
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3824
    goto err_out;
  } else {
#line 3822
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3822
    if (tmp___1 != 0L) {
#line 3823
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3824
      goto err_out;
    } else {

    }
  }
#line 3827
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3828
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3829
    tmp___2 = cmdname(cmd);
#line 3829
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3830
    goto err_out;
  } else {

  }
#line 3833
  if (shs != 0UL) {
#line 3834
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3835
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3835
    if (tmp___5 != 0L) {
#line 3836
      tmp___3 = get_current();
#line 3836
      tmp___4 = signal_pending(tmp___3);
#line 3836
      if (tmp___4 == 0) {
#line 3837
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3838
      goto err_out;
    } else {

    }
  } else {

  }
#line 3842
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3844
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3844
  if (tmp___7 != 0L) {
#line 3845
    tmp___6 = cmdname(cmd);
#line 3845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3847
    goto err_out;
  } else {

  }
  ldv_53098: 
#line 3817
  tmp___8 = get_t_state(& mdev->receiver);
#line 3817
  if ((unsigned int )tmp___8 == 1U) {
#line 3818
    goto ldv_53097;
  } else {

  }

#line 3851
  if (0) {
    err_out: 
#line 3853
    val.i = 0U;
#line 3853
    val.ldv_39979.conn = 6U;
#line 3853
    mask.i = 0U;
#line 3853
    mask.ldv_39979.conn = 31U;
#line 3853
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3857
  drbd_md_sync(mdev);
#line 3858
  return;
}
}
#line 3860 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3864
  barr.w.cb = & w_prev_work_done;
#line 3865
  init_completion(& barr.done);
#line 3866
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3867
  wait_for_completion(& barr.done);
#line 3868
  return;
}
}
#line 3870 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;
  struct drbd_request *req ;
  struct hlist_node *pos ;
  struct hlist_node *n ;
  struct hlist_node  const  *__mptr ;

  {
#line 3874
  spin_lock_irq(& mdev->req_lock);
#line 3876
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3877
    spin_unlock_irq(& mdev->req_lock);
#line 3878
    return;
  } else {

  }
#line 3881
  h = mdev->ee_hash;
#line 3881
  goto ldv_53113;
  ldv_53112: ;
#line 3882
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3883
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3881
  h = h + 1;
  ldv_53113: ;
#line 3881
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3882
    goto ldv_53112;
  } else {

  }
#line 3885
  kfree((void const   *)mdev->ee_hash);
#line 3886
  mdev->ee_hash = 0;
#line 3887
  mdev->ee_hash_s = 0U;
#line 3892
  h = mdev->tl_hash;
#line 3892
  goto ldv_53126;
  ldv_53125: 
#line 3895
  pos = h->first;
#line 3895
  goto ldv_53123;
  ldv_53122: 
#line 3896
  hlist_del_init(& req->collision);
#line 3897
  hlist_add_fake(& req->collision);
#line 3895
  pos = n;
  ldv_53123: ;
#line 3895
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3895
    n = pos->next;
#line 3895
    if (1 != 0) {
#line 3895
      __mptr = (struct hlist_node  const  *)pos;
#line 3895
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3895
      if (1 != 0) {
#line 3896
        goto ldv_53122;
      } else {
#line 3898
        goto ldv_53124;
      }
    } else {
#line 3898
      goto ldv_53124;
    }
  } else {

  }
  ldv_53124: 
#line 3892
  h = h + 1;
  ldv_53126: ;
#line 3892
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3893
    goto ldv_53125;
  } else {

  }
#line 3901
  kfree((void const   *)mdev->tl_hash);
#line 3902
  mdev->tl_hash = 0;
#line 3903
  mdev->tl_hash_s = 0U;
#line 3904
  spin_unlock_irq(& mdev->req_lock);
#line 3905
  return;
}
}
#line 3907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3911
  rv = 0;
#line 3914
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3915
    return;
  } else {

  }
#line 3922
  val.i = 0U;
#line 3922
  val.ldv_39979.conn = 5U;
#line 3922
  mask.i = 0U;
#line 3922
  mask.ldv_39979.conn = 31U;
#line 3922
  drbd_force_state(mdev, mask, val);
#line 3925
  drbd_thread_stop(& mdev->asender);
#line 3926
  drbd_free_sock(mdev);
#line 3929
  spin_lock_irq(& mdev->req_lock);
#line 3930
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3931
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3932
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3933
  spin_unlock_irq(& mdev->req_lock);
#line 3945
  drbd_rs_cancel_all(mdev);
#line 3946
  mdev->rs_total = 0UL;
#line 3947
  mdev->rs_failed = 0UL;
#line 3948
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3949
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3952
  del_timer_sync(& mdev->resync_timer);
#line 3953
  resync_timer_fn((unsigned long )mdev);
#line 3958
  drbd_flush_workqueue(mdev);
#line 3962
  drbd_process_done_ee(mdev);
#line 3964
  kfree((void const   *)mdev->p_uuid);
#line 3965
  mdev->p_uuid = 0;
#line 3967
  tmp = is_susp(mdev->state);
#line 3967
  if (tmp == 0) {
#line 3968
    tl_clear(mdev);
  } else {

  }
#line 3970
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3972
  drbd_md_sync(mdev);
#line 3974
  fp = FP_DONT_CARE;
#line 3975
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3975
  if (tmp___0 != 0) {
#line 3976
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3977
    put_ldev(mdev);
  } else {

  }
#line 3980
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_39979.pdsk > 5) {
#line 3981
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3983
  spin_lock_irq(& mdev->req_lock);
#line 3984
  os = mdev->state;
#line 3985
  if ((int )os.ldv_39979.conn > 1) {
#line 3987
    ns = os;
#line 3988
    ns.ldv_39979.conn = 2U;
#line 3989
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3989
    rv = (int )tmp___1;
  } else {

  }
#line 3991
  spin_unlock_irq(& mdev->req_lock);
#line 3993
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3994
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3994
    if (tmp___2 == 0) {
#line 3994
      goto ldv_53140;
    } else {

    }
#line 3994
    tmp___3 = get_current();
#line 3994
    __wait.flags = 0U;
#line 3994
    __wait.private = (void *)tmp___3;
#line 3994
    __wait.func = & autoremove_wake_function;
#line 3994
    __wait.task_list.next = & __wait.task_list;
#line 3994
    __wait.task_list.prev = & __wait.task_list;
    ldv_53143: 
#line 3994
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3994
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3994
    if (tmp___4 == 0) {
#line 3994
      goto ldv_53142;
    } else {

    }
#line 3994
    schedule();
#line 3994
    goto ldv_53143;
    ldv_53142: 
#line 3994
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_53140: 
#line 3996
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3997
    mdev->cram_hmac_tfm = 0;
#line 3999
    kfree((void const   *)mdev->net_conf);
#line 4000
    mdev->net_conf = 0;
#line 4001
    val___0.i = 0U;
#line 4001
    val___0.ldv_39979.conn = 0U;
#line 4001
    mask___0.i = 0U;
#line 4001
    mask___0.ldv_39979.conn = 31U;
#line 4001
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 4006
  tmp___5 = drbd_test_flag(mdev, BITMAP_IO);
#line 4006
  if (tmp___5 == 0) {
#line 4006
    goto ldv_53148;
  } else {

  }
#line 4006
  tmp___6 = get_current();
#line 4006
  __wait___0.flags = 0U;
#line 4006
  __wait___0.private = (void *)tmp___6;
#line 4006
  __wait___0.func = & autoremove_wake_function;
#line 4006
  __wait___0.task_list.next = & __wait___0.task_list;
#line 4006
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_53151: 
#line 4006
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 4006
  tmp___7 = drbd_test_flag(mdev, BITMAP_IO);
#line 4006
  if (tmp___7 == 0) {
#line 4006
    goto ldv_53150;
  } else {

  }
#line 4006
  schedule();
#line 4006
  goto ldv_53151;
  ldv_53150: 
#line 4006
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_53148: 
#line 4015
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 4015
  i = (unsigned int )tmp___8;
#line 4016
  if (i != 0U) {
#line 4017
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 4018
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 4018
  i = (unsigned int )tmp___9;
#line 4019
  if (i != 0U) {
#line 4020
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 4021
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 4021
  i = (unsigned int )tmp___10;
#line 4022
  if (i != 0U) {
#line 4023
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 4025
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 4025
  if (tmp___11 == 0) {
#line 4025
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4025);
  } else {

  }
#line 4026
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 4026
  if (tmp___12 == 0) {
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4026);
  } else {

  }
#line 4027
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 4027
  if (tmp___13 == 0) {
#line 4027
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4027);
  } else {

  }
#line 4028
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4028
  if (tmp___14 == 0) {
#line 4028
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4028);
  } else {

  }
#line 4031
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 4032
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 4032
  if (tmp___15 == 0) {
#line 4032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4032);
  } else {

  }
#line 4033
  return;
}
}
#line 4044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 4047
  p = & mdev->data.sbuf.handshake;
#line 4050
  tmp = ldv_mutex_lock_interruptible_117(& mdev->data.mutex);
#line 4050
  if (tmp != 0) {
#line 4051
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 4052
    return (0);
  } else {

  }
#line 4055
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 4056
    ldv_mutex_unlock_118(& mdev->data.mutex);
#line 4057
    return (0);
  } else {

  }
#line 4060
  memset((void *)p, 0, 80UL);
#line 4061
  p->protocol_min = 1442840576U;
#line 4062
  p->protocol_max = 1627389952U;
#line 4063
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 4065
  ldv_mutex_unlock_119(& mdev->data.mutex);
#line 4066
  return (ok);
}
}
#line 4076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 4079
  p = & mdev->data.rbuf.handshake;
#line 4080
  expect = 72;
#line 4085
  rv = drbd_send_handshake(mdev);
#line 4086
  if (rv == 0) {
#line 4087
    return (0);
  } else {

  }
#line 4089
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4090
  if (rv == 0) {
#line 4091
    return (0);
  } else {

  }
#line 4093
  if ((unsigned int )cmd != 65534U) {
#line 4094
    tmp = cmdname(cmd);
#line 4094
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 4096
    return (-1);
  } else {

  }
#line 4099
  if ((unsigned int )expect != length) {
#line 4100
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 4102
    return (-1);
  } else {

  }
#line 4105
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 4107
  if (rv != expect) {
#line 4108
    tmp___0 = get_current();
#line 4108
    tmp___1 = signal_pending(tmp___0);
#line 4108
    if (tmp___1 == 0) {
#line 4109
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 4110
    return (0);
  } else {

  }
#line 4113
  tmp___2 = __fswab32(p->protocol_min);
#line 4113
  p->protocol_min = tmp___2;
#line 4114
  tmp___3 = __fswab32(p->protocol_max);
#line 4114
  p->protocol_max = tmp___3;
#line 4115
  if (p->protocol_max == 0U) {
#line 4116
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 4118
  if (p->protocol_min > 97U || p->protocol_max <= 85U) {
#line 4120
    goto incompat;
  } else {

  }
#line 4122
  __min1 = 97;
#line 4122
  __min2 = (int )p->protocol_max;
#line 4122
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 4124
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 4127
  return (1);
  incompat: 
#line 4130
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 97, p->protocol_min, p->protocol_max);
#line 4134
  return (-1);
}
}
#line 4153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4157
  response = 0;
#line 4158
  right_response = 0;
#line 4159
  peers_ch = 0;
#line 4160
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4160
  key_len = (unsigned int )tmp;
#line 4167
  desc.tfm = mdev->cram_hmac_tfm;
#line 4168
  desc.flags = 0U;
#line 4170
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4172
  if (rv != 0) {
#line 4173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4174
    rv = -1;
#line 4175
    goto fail;
  } else {

  }
#line 4178
  get_random_bytes((void *)(& my_challenge), 64);
#line 4180
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4181
  if (rv == 0) {
#line 4182
    goto fail;
  } else {

  }
#line 4184
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4185
  if (rv == 0) {
#line 4186
    goto fail;
  } else {

  }
#line 4188
  if ((unsigned int )cmd != 16U) {
#line 4189
    tmp___0 = cmdname(cmd);
#line 4189
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4191
    rv = 0;
#line 4192
    goto fail;
  } else {

  }
#line 4195
  if (length > 128U) {
#line 4196
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4197
    rv = -1;
#line 4198
    goto fail;
  } else {

  }
#line 4201
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4201
  peers_ch = (char *)tmp___1;
#line 4202
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4203
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4204
    rv = -1;
#line 4205
    goto fail;
  } else {

  }
#line 4208
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4210
  if ((unsigned int )rv != length) {
#line 4211
    tmp___2 = get_current();
#line 4211
    tmp___3 = signal_pending(tmp___2);
#line 4211
    if (tmp___3 == 0) {
#line 4212
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4213
    rv = 0;
#line 4214
    goto fail;
  } else {

  }
#line 4217
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4218
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4218
  response = (char *)tmp___4;
#line 4219
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4220
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4221
    rv = -1;
#line 4222
    goto fail;
  } else {

  }
#line 4225
  sg_init_table(& sg, 1U);
#line 4226
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4228
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4229
  if (rv != 0) {
#line 4230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4231
    rv = -1;
#line 4232
    goto fail;
  } else {

  }
#line 4235
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4236
  if (rv == 0) {
#line 4237
    goto fail;
  } else {

  }
#line 4239
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4240
  if (rv == 0) {
#line 4241
    goto fail;
  } else {

  }
#line 4243
  if ((unsigned int )cmd != 17U) {
#line 4244
    tmp___5 = cmdname(cmd);
#line 4244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4246
    rv = 0;
#line 4247
    goto fail;
  } else {

  }
#line 4250
  if (length != resp_size) {
#line 4251
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4252
    rv = 0;
#line 4253
    goto fail;
  } else {

  }
#line 4256
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4258
  if ((unsigned int )rv != resp_size) {
#line 4259
    tmp___6 = get_current();
#line 4259
    tmp___7 = signal_pending(tmp___6);
#line 4259
    if (tmp___7 == 0) {
#line 4260
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4261
    rv = 0;
#line 4262
    goto fail;
  } else {

  }
#line 4265
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4265
  right_response = (char *)tmp___8;
#line 4266
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4268
    rv = -1;
#line 4269
    goto fail;
  } else {

  }
#line 4272
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4274
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4275
  if (rv != 0) {
#line 4276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4277
    rv = -1;
#line 4278
    goto fail;
  } else {

  }
#line 4281
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4281
  rv = tmp___9 == 0;
#line 4283
  if (rv != 0) {
#line 4284
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4287
    rv = -1;
  }
  fail: 
#line 4290
  kfree((void const   *)peers_ch);
#line 4291
  kfree((void const   *)response);
#line 4292
  kfree((void const   *)right_response);
#line 4294
  return (rv);
}
}
#line 4298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4300
  mdev = thi->mdev;
#line 4301
  tmp = mdev_to_minor(mdev);
#line 4301
  minor = tmp;
#line 4304
  tmp___0 = get_current();
#line 4304
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4306
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_53194: 
#line 4309
  h = drbd_connect(mdev);
#line 4310
  if (h == 0) {
#line 4311
    drbd_disconnect(mdev);
#line 4312
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4314
  if (h == -1) {
#line 4315
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4316
    val.i = 0U;
#line 4316
    val.ldv_39979.conn = 1U;
#line 4316
    mask.i = 0U;
#line 4316
    mask.ldv_39979.conn = 31U;
#line 4316
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4318
  if (h == 0) {
#line 4319
    goto ldv_53194;
  } else {

  }

#line 4320
  if (h > 0) {
#line 4321
    tmp___1 = get_net_conf(mdev);
#line 4321
    if (tmp___1 != 0) {
#line 4322
      drbdd(mdev);
#line 4323
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4327
  drbd_disconnect(mdev);
#line 4329
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4330
  return (0);
}
}
#line 4335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4337
  p = (struct p_req_state_reply *)h;
#line 4339
  tmp = __fswab32(p->retcode);
#line 4339
  retcode = (int )tmp;
#line 4341
  if (retcode > 0) {
#line 4342
    drbd_set_flag(mdev, CL_ST_CHG_SUCCESS);
  } else {
#line 4344
    drbd_set_flag(mdev, CL_ST_CHG_FAIL);
#line 4345
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4348
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4350
  return (1);
}
}
#line 4353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4355
  tmp = drbd_send_ping_ack(mdev);
#line 4355
  return (tmp);
}
}
#line 4359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4362
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4363
  tmp = drbd_test_and_set_flag(mdev, GOT_PING_ACK);
#line 4363
  if (tmp == 0) {
#line 4364
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4366
  return (1);
}
}
#line 4369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4371
  p = (struct p_block_ack *)h;
#line 4372
  tmp = __fswab64(p->sector);
#line 4372
  sector = (sector_t )tmp;
#line 4373
  tmp___0 = __fswab32(p->blksize);
#line 4373
  blksize = (int )tmp___0;
#line 4375
  if (mdev->agreed_pro_version <= 88) {
#line 4375
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4375);
  } else {

  }
#line 4377
  tmp___1 = __fswab32(p->seq_num);
#line 4377
  update_peer_seq(mdev, tmp___1);
#line 4379
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4379
  if (tmp___2 != 0) {
#line 4380
    drbd_rs_complete_io(mdev, sector);
#line 4381
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4381U);
#line 4383
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4384
    put_ldev(mdev);
  } else {

  }
#line 4386
  atomic_dec(& mdev->rs_pending_cnt);
#line 4386
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4386
  if (tmp___4 < 0) {
#line 4386
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4386, tmp___3);
  } else {

  }
#line 4387
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4389
  return (1);
}
}
#line 4394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4397
  tmp = tl_hash_slot(mdev, sector);
#line 4397
  slot = tmp;
#line 4401
  n = slot->first;
#line 4401
  goto ldv_53234;
  ldv_53233: ;
#line 4402
  if ((unsigned long )req == (unsigned long )id) {
#line 4403
    if (req->sector != sector) {
#line 4404
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4408
      goto ldv_53232;
    } else {

    }
#line 4410
    return (req);
  } else {

  }
#line 4401
  n = n->next;
  ldv_53234: ;
#line 4401
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4401
    __mptr = (struct hlist_node  const  *)n;
#line 4401
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4401
    if (1 != 0) {
#line 4402
      goto ldv_53233;
    } else {
#line 4404
      goto ldv_53232;
    }
  } else {

  }
  ldv_53232: ;
#line 4413
  return (0);
}
}
#line 4419 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4426
  spin_lock_irq(& mdev->req_lock);
#line 4427
  req = (*validator)(mdev, id, sector);
#line 4428
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4428
  if (tmp != 0L) {
#line 4429
    spin_unlock_irq(& mdev->req_lock);
#line 4431
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4433
    return (0);
  } else {

  }
#line 4435
  __req_mod(req, what, & m);
#line 4436
  spin_unlock_irq(& mdev->req_lock);
#line 4438
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4439
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4440
  return (1);
}
}
#line 4443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4445
  p = (struct p_block_ack *)h;
#line 4446
  tmp = __fswab64(p->sector);
#line 4446
  sector = (sector_t )tmp;
#line 4447
  tmp___0 = __fswab32(p->blksize);
#line 4447
  blksize = (int )tmp___0;
#line 4450
  tmp___1 = __fswab32(p->seq_num);
#line 4450
  update_peer_seq(mdev, tmp___1);
#line 4452
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4453
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4453U);
#line 4454
    atomic_dec(& mdev->rs_pending_cnt);
#line 4454
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4454
    if (tmp___3 < 0) {
#line 4454
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4454
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4454, tmp___2);
    } else {

    }
#line 4455
    return (1);
  } else {

  }
#line 4457
  tmp___4 = __fswab16((int )h->command);
#line 4457
  switch ((int )tmp___4) {
  case 23: ;
#line 4459
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4459
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4459);
  } else {

  }
#line 4460
  what = write_acked_by_peer_and_sis;
#line 4461
  goto ldv_53262;
  case 22: ;
#line 4463
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4463);
  } else {

  }
#line 4464
  what = write_acked_by_peer;
#line 4465
  goto ldv_53262;
  case 21: ;
#line 4467
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4467
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4467);
  } else {

  }
#line 4468
  what = recv_acked_by_peer;
#line 4469
  goto ldv_53262;
  case 24: ;
#line 4471
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4471
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4471);
  } else {

  }
#line 4472
  what = conflict_discarded_by_peer;
#line 4473
  goto ldv_53262;
  default: 
#line 4475
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
          4475);
#line 4476
  return (0);
  }
  ldv_53262: 
#line 4479
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4479
  return (tmp___5);
}
}
#line 4483 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4485
  p = (struct p_block_ack *)h;
#line 4486
  tmp = __fswab64(p->sector);
#line 4486
  sector = (sector_t )tmp;
#line 4487
  tmp___0 = __fswab32(p->blksize);
#line 4487
  size = (int )tmp___0;
#line 4491
  tmp___1 = __fswab32(p->seq_num);
#line 4491
  update_peer_seq(mdev, tmp___1);
#line 4493
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4494
    atomic_dec(& mdev->rs_pending_cnt);
#line 4494
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4494
    if (tmp___3 < 0) {
#line 4494
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4494
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4494, tmp___2);
    } else {

    }
#line 4495
    drbd_rs_failed_io(mdev, sector, size);
#line 4496
    return (1);
  } else {

  }
#line 4499
  spin_lock_irq(& mdev->req_lock);
#line 4500
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4501
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4502
    spin_unlock_irq(& mdev->req_lock);
#line 4503
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4511
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4511U);
#line 4512
      return (1);
    } else {
#line 4514
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4516
      return (0);
    }
  } else {

  }
#line 4519
  __req_mod(req, neg_acked, & m);
#line 4520
  spin_unlock_irq(& mdev->req_lock);
#line 4522
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4523
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4524
  return (1);
}
}
#line 4527 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4529
  p = (struct p_block_ack *)h;
#line 4530
  tmp = __fswab64(p->sector);
#line 4530
  sector = (sector_t )tmp;
#line 4532
  tmp___0 = __fswab32(p->seq_num);
#line 4532
  update_peer_seq(mdev, tmp___0);
#line 4533
  tmp___1 = __fswab32(p->blksize);
#line 4533
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4536
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4536
  return (tmp___2);
}
}
#line 4540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4544
  p = (struct p_block_ack *)h;
#line 4546
  tmp = __fswab64(p->sector);
#line 4546
  sector = (sector_t )tmp;
#line 4547
  tmp___0 = __fswab32(p->blksize);
#line 4547
  size = (int )tmp___0;
#line 4549
  tmp___1 = __fswab32(p->seq_num);
#line 4549
  update_peer_seq(mdev, tmp___1);
#line 4551
  atomic_dec(& mdev->rs_pending_cnt);
#line 4551
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4551
  if (tmp___3 < 0) {
#line 4551
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4551
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4551, tmp___2);
  } else {

  }
#line 4553
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4553
  if (tmp___5 != 0) {
#line 4554
    drbd_rs_complete_io(mdev, sector);
#line 4555
    tmp___4 = __fswab16((int )h->command);
#line 4555
    switch ((int )tmp___4) {
    case 27: 
#line 4557
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4559
    goto ldv_53300;
    default: 
#line 4561
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4561);
#line 4562
    put_ldev(mdev);
#line 4563
    return (0);
    }
    ldv_53300: 
#line 4565
    put_ldev(mdev);
  } else {

  }
#line 4568
  return (1);
}
}
#line 4571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4573
  p = (struct p_barrier_ack *)h;
#line 4575
  tmp = __fswab32(p->set_size);
#line 4575
  tl_release(mdev, p->barrier, tmp);
#line 4577
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4577
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4577
    if (tmp___0 == 0) {
#line 4577
      tmp___1 = drbd_test_and_set_flag(mdev, AHEAD_TO_SYNC_SOURCE);
#line 4577
      if (tmp___1 == 0) {
#line 4580
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4581
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4584
  return (1);
}
}
#line 4587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4589
  p = (struct p_block_ack *)h;
#line 4594
  tmp = __fswab64(p->sector);
#line 4594
  sector = (sector_t )tmp;
#line 4595
  tmp___0 = __fswab32(p->blksize);
#line 4595
  size = (int )tmp___0;
#line 4597
  tmp___1 = __fswab32(p->seq_num);
#line 4597
  update_peer_seq(mdev, tmp___1);
#line 4599
  tmp___2 = __fswab64(p->block_id);
#line 4599
  if (tmp___2 == 4712ULL) {
#line 4600
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4602
    ov_oos_print(mdev);
  }
#line 4604
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4604
  if (tmp___3 == 0) {
#line 4605
    return (1);
  } else {

  }
#line 4607
  drbd_rs_complete_io(mdev, sector);
#line 4608
  atomic_dec(& mdev->rs_pending_cnt);
#line 4608
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4608
  if (tmp___5 < 0) {
#line 4608
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4608
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4608, tmp___4);
  } else {

  }
#line 4610
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4613
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4614
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4616
  if (mdev->ov_left == 0UL) {
#line 4617
    tmp___6 = kmalloc(24UL, 16U);
#line 4617
    w = (struct drbd_work *)tmp___6;
#line 4618
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4619
      w->cb = & w_ov_finished;
#line 4620
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4622
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4623
      ov_oos_print(mdev);
#line 4624
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4627
  put_ldev(mdev);
#line 4628
  return (1);
}
}
#line 4631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4633
  return (1);
}
}
#line 4641 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4643
  asender_tbl[0].pkt_size = 0UL;
#line 4643
  asender_tbl[0].process = 0;
#line 4643
  asender_tbl[1].pkt_size = 0UL;
#line 4643
  asender_tbl[1].process = 0;
#line 4643
  asender_tbl[2].pkt_size = 0UL;
#line 4643
  asender_tbl[2].process = 0;
#line 4643
  asender_tbl[3].pkt_size = 0UL;
#line 4643
  asender_tbl[3].process = 0;
#line 4643
  asender_tbl[4].pkt_size = 0UL;
#line 4643
  asender_tbl[4].process = 0;
#line 4643
  asender_tbl[5].pkt_size = 0UL;
#line 4643
  asender_tbl[5].process = 0;
#line 4643
  asender_tbl[6].pkt_size = 0UL;
#line 4643
  asender_tbl[6].process = 0;
#line 4643
  asender_tbl[7].pkt_size = 0UL;
#line 4643
  asender_tbl[7].process = 0;
#line 4643
  asender_tbl[8].pkt_size = 0UL;
#line 4643
  asender_tbl[8].process = 0;
#line 4643
  asender_tbl[9].pkt_size = 0UL;
#line 4643
  asender_tbl[9].process = 0;
#line 4643
  asender_tbl[10].pkt_size = 0UL;
#line 4643
  asender_tbl[10].process = 0;
#line 4643
  asender_tbl[11].pkt_size = 0UL;
#line 4643
  asender_tbl[11].process = 0;
#line 4643
  asender_tbl[12].pkt_size = 0UL;
#line 4643
  asender_tbl[12].process = 0;
#line 4643
  asender_tbl[13].pkt_size = 0UL;
#line 4643
  asender_tbl[13].process = 0;
#line 4643
  asender_tbl[14].pkt_size = 0UL;
#line 4643
  asender_tbl[14].process = 0;
#line 4643
  asender_tbl[15].pkt_size = 0UL;
#line 4643
  asender_tbl[15].process = 0;
#line 4643
  asender_tbl[16].pkt_size = 0UL;
#line 4643
  asender_tbl[16].process = 0;
#line 4643
  asender_tbl[17].pkt_size = 0UL;
#line 4643
  asender_tbl[17].process = 0;
#line 4643
  asender_tbl[18].pkt_size = 0UL;
#line 4643
  asender_tbl[18].process = 0;
#line 4643
  asender_tbl[19].pkt_size = 8UL;
#line 4643
  asender_tbl[19].process = & got_Ping;
#line 4643
  asender_tbl[20].pkt_size = 8UL;
#line 4643
  asender_tbl[20].process = & got_PingAck;
#line 4643
  asender_tbl[21].pkt_size = 32UL;
#line 4643
  asender_tbl[21].process = & got_BlockAck;
#line 4643
  asender_tbl[22].pkt_size = 32UL;
#line 4643
  asender_tbl[22].process = & got_BlockAck;
#line 4643
  asender_tbl[23].pkt_size = 32UL;
#line 4643
  asender_tbl[23].process = & got_BlockAck;
#line 4643
  asender_tbl[24].pkt_size = 32UL;
#line 4643
  asender_tbl[24].process = & got_BlockAck;
#line 4643
  asender_tbl[25].pkt_size = 32UL;
#line 4643
  asender_tbl[25].process = & got_NegAck;
#line 4643
  asender_tbl[26].pkt_size = 32UL;
#line 4643
  asender_tbl[26].process = & got_NegDReply;
#line 4643
  asender_tbl[27].pkt_size = 32UL;
#line 4643
  asender_tbl[27].process = & got_NegRSDReply;
#line 4643
  asender_tbl[28].pkt_size = 16UL;
#line 4643
  asender_tbl[28].process = & got_BarrierAck;
#line 4643
  asender_tbl[29].pkt_size = 12UL;
#line 4643
  asender_tbl[29].process = & got_RqSReply;
#line 4643
  asender_tbl[30].pkt_size = 0UL;
#line 4643
  asender_tbl[30].process = 0;
#line 4643
  asender_tbl[31].pkt_size = 0UL;
#line 4643
  asender_tbl[31].process = 0;
#line 4643
  asender_tbl[32].pkt_size = 32UL;
#line 4643
  asender_tbl[32].process = & got_OVResult;
#line 4643
  asender_tbl[33].pkt_size = 0UL;
#line 4643
  asender_tbl[33].process = 0;
#line 4643
  asender_tbl[34].pkt_size = 32UL;
#line 4643
  asender_tbl[34].process = & got_IsInSync;
#line 4643
  asender_tbl[35].pkt_size = 0UL;
#line 4643
  asender_tbl[35].process = 0;
#line 4643
  asender_tbl[36].pkt_size = 0UL;
#line 4643
  asender_tbl[36].process = 0;
#line 4643
  asender_tbl[37].pkt_size = 0UL;
#line 4643
  asender_tbl[37].process = 0;
#line 4643
  asender_tbl[38].pkt_size = 0UL;
#line 4643
  asender_tbl[38].process = 0;
#line 4643
  asender_tbl[39].pkt_size = 16UL;
#line 4643
  asender_tbl[39].process = & got_skip;
#line 4643
  asender_tbl[40].pkt_size = 0UL;
#line 4643
  asender_tbl[40].process = 0;
#line 4643
  asender_tbl[41].pkt_size = 32UL;
#line 4643
  asender_tbl[41].process = & got_NegRSDReply;
#line 4643
  asender_tbl[42].pkt_size = 0UL;
#line 4643
  asender_tbl[42].process = 0;
#line 4664
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4665
    return (0);
  } else {

  }
#line 4666
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long t ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  __u16 tmp___14 ;
  __u16 tmp___15 ;
  __u32 tmp___16 ;
  long tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u16 tmp___20 ;
  __u16 tmp___21 ;
  __u32 tmp___22 ;
  long tmp___23 ;
  int _b___0 ;
  int tmp___24 ;
  struct asender_cmd *tmp___25 ;
  enum drbd_thread_state tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4671
  mdev = thi->mdev;
#line 4672
  h = & mdev->meta.rbuf.header.h80;
#line 4673
  cmd = 0;
#line 4676
  buf = (void *)h;
#line 4677
  received = 0;
#line 4678
  expect = 8;
#line 4680
  ping_timeout_active = 0;
#line 4682
  tmp = mdev_to_minor(mdev);
#line 4682
  tmp___0 = get_current();
#line 4682
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4684
  tmp___1 = get_current();
#line 4684
  tmp___1->policy = 2U;
#line 4685
  tmp___2 = get_current();
#line 4685
  tmp___2->rt_priority = 2U;
#line 4687
  goto ldv_53351;
  ldv_53368: 
#line 4688
  drbd_thread_current_set_cpu(mdev);
#line 4689
  tmp___4 = drbd_test_and_clear_flag(mdev, SEND_PING);
#line 4689
  if (tmp___4 != 0) {
#line 4690
    tmp___3 = drbd_send_ping(mdev);
#line 4690
    _b = tmp___3 == 0;
#line 4690
    if (_b != 0) {
#line 4690
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4690);
    } else {

    }
#line 4690
    if (_b != 0) {
#line 4690
      goto reconnect;
    } else {

    }
#line 4691
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4693
    ping_timeout_active = 1;
  } else {

  }
#line 4698
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4698
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4698
    if (tmp___5 > 3) {
#line 4700
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_53350: 
#line 4702
  drbd_clear_flag(mdev, SIGNAL_ASENDER);
#line 4703
  tmp___6 = get_current();
#line 4703
  flush_signals(tmp___6);
#line 4704
  tmp___7 = drbd_process_done_ee(mdev);
#line 4704
  if (tmp___7 == 0) {
#line 4705
    goto reconnect;
  } else {

  }
#line 4707
  drbd_set_flag(mdev, SIGNAL_ASENDER);
#line 4708
  spin_lock_irq(& mdev->req_lock);
#line 4709
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4710
  spin_unlock_irq(& mdev->req_lock);
#line 4714
  if (empty != 0) {
#line 4715
    goto ldv_53349;
  } else {

  }
#line 4716
  goto ldv_53350;
  ldv_53349: ;
#line 4718
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4719
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4722
  tmp___8 = get_current();
#line 4722
  tmp___9 = signal_pending(tmp___8);
#line 4722
  if (tmp___9 != 0) {
#line 4723
    goto ldv_53351;
  } else {

  }
#line 4725
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4727
  drbd_clear_flag(mdev, SIGNAL_ASENDER);
#line 4729
  tmp___10 = get_current();
#line 4729
  flush_signals(tmp___10);
#line 4741
  tmp___13 = __builtin_expect(rv > 0, 1L);
#line 4741
  if (tmp___13 != 0L) {
#line 4742
    received = received + rv;
#line 4743
    buf = buf + (unsigned long )rv;
  } else
#line 4744
  if (rv == 0) {
#line 4745
    tmp___12 = drbd_test_flag(mdev, DISCONNECT_SENT);
#line 4745
    if (tmp___12 != 0) {
#line 4747
      __ret = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4747
      if ((int )mdev->state.ldv_39979.conn > 9) {
#line 4747
        tmp___11 = get_current();
#line 4747
        __wait.flags = 0U;
#line 4747
        __wait.private = (void *)tmp___11;
#line 4747
        __wait.func = & autoremove_wake_function;
#line 4747
        __wait.task_list.next = & __wait.task_list;
#line 4747
        __wait.task_list.prev = & __wait.task_list;
        ldv_53356: 
#line 4747
        prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 4747
        if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 4747
          goto ldv_53355;
        } else {

        }
#line 4747
        __ret = schedule_timeout(__ret);
#line 4747
        if (__ret == 0L) {
#line 4747
          goto ldv_53355;
        } else {

        }
#line 4747
        goto ldv_53356;
        ldv_53355: 
#line 4747
        finish_wait(& mdev->state_wait, & __wait);
      } else {

      }
#line 4747
      t = __ret;
#line 4749
      if (t != 0L) {
#line 4750
        goto ldv_53358;
      } else {

      }
    } else {

    }
#line 4752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4753
    goto reconnect;
  } else
#line 4754
  if (rv == -11) {
#line 4757
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4759
      goto ldv_53351;
    } else {

    }
#line 4760
    if (ping_timeout_active != 0) {
#line 4761
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4762
      goto reconnect;
    } else {

    }
#line 4764
    drbd_set_flag(mdev, SEND_PING);
#line 4765
    goto ldv_53351;
  } else
#line 4766
  if (rv == -4) {
#line 4767
    goto ldv_53351;
  } else {
#line 4769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4770
    goto reconnect;
  }
#line 4773
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4774
    tmp___17 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4774
    if (tmp___17 != 0L) {
#line 4775
      tmp___14 = __fswab16((int )h->length);
#line 4775
      tmp___15 = __fswab16((int )h->command);
#line 4775
      tmp___16 = __fswab32(h->magic);
#line 4775
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___16, (int )tmp___15, (int )tmp___14);
#line 4779
      goto reconnect;
    } else {

    }
#line 4781
    tmp___18 = __fswab16((int )h->command);
#line 4781
    cmd = get_asender_cmd((int )tmp___18);
#line 4782
    tmp___19 = __fswab16((int )h->length);
#line 4782
    len = (int )tmp___19;
#line 4783
    tmp___23 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4783
    if (tmp___23 != 0L) {
#line 4784
      tmp___20 = __fswab16((int )h->length);
#line 4784
      tmp___21 = __fswab16((int )h->command);
#line 4784
      tmp___22 = __fswab32(h->magic);
#line 4784
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___22, (int )tmp___21, (int )tmp___20);
#line 4788
      goto disconnect;
    } else {

    }
#line 4790
    expect = (int )cmd->pkt_size;
#line 4791
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4791
    if (_b___0 != 0) {
#line 4791
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4791);
    } else {

    }
#line 4791
    if (_b___0 != 0) {
#line 4792
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4794
  if (received == expect) {
#line 4795
    mdev->last_received = jiffies;
#line 4796
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4796
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
              4796);
    } else {

    }
#line 4797
    tmp___24 = (*(cmd->process))(mdev, h);
#line 4797
    if (tmp___24 == 0) {
#line 4798
      goto reconnect;
    } else {

    }
#line 4802
    tmp___25 = get_asender_cmd(20);
#line 4802
    if ((unsigned long )tmp___25 == (unsigned long )cmd) {
#line 4803
      ping_timeout_active = 0;
    } else {

    }
#line 4805
    buf = (void *)h;
#line 4806
    received = 0;
#line 4807
    expect = 8;
#line 4808
    cmd = 0;
  } else {

  }
  ldv_53351: 
#line 4687
  tmp___26 = get_t_state(thi);
#line 4687
  if ((unsigned int )tmp___26 == 1U) {
#line 4688
    goto ldv_53368;
  } else {

  }
  ldv_53358: ;
#line 4812
  if (0) {
    reconnect: 
#line 4814
    val.i = 0U;
#line 4814
    val.ldv_39979.conn = 5U;
#line 4814
    mask.i = 0U;
#line 4814
    mask.ldv_39979.conn = 31U;
#line 4814
    drbd_force_state(mdev, mask, val);
#line 4815
    drbd_md_sync(mdev);
  } else {

  }
#line 4817
  if (0) {
    disconnect: 
#line 4819
    val___0.i = 0U;
#line 4819
    val___0.ldv_39979.conn = 1U;
#line 4819
    mask___0.i = 0U;
#line 4819
    mask___0.ldv_39979.conn = 31U;
#line 4819
    drbd_force_state(mdev, mask___0, val___0);
#line 4820
    drbd_md_sync(mdev);
  } else {

  }
#line 4822
  drbd_clear_flag(mdev, SIGNAL_ASENDER);
#line 4824
  if ((int )mdev->state.ldv_39979.conn > 9) {
#line 4824
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared",
            4824);
  } else {

  }
#line 4825
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4827
  return (0);
}
}
#line 4867 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4879
  LDV_IN_INTERRUPT = 1;
#line 4888
  ldv_initialize();
#line 4890
  goto ldv_53396;
  ldv_53395: 
#line 4893
  tmp = nondet_int();
#line 4893
  switch (tmp) {
  default: ;
#line 4895
  goto ldv_53394;
  }
  ldv_53394: ;
  ldv_53396: 
#line 4890
  tmp___0 = nondet_int();
#line 4890
  if (tmp___0 != 0) {
#line 4891
    goto ldv_53395;
  } else {

  }


#line 4904
  ldv_check_final_state();
#line 4907
  return;
}
}
#line 4911 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_103(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4916
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 4918
  mutex_lock(ldv_func_arg1);
#line 4919
  return;
}
}
#line 4921 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_104(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4926
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 4928
  mutex_unlock(ldv_func_arg1);
#line 4929
  return;
}
}
#line 4931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_105(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4936
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 4938
  mutex_lock(ldv_func_arg1);
#line 4939
  return;
}
}
#line 4941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_trylock_106(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 4946
  tmp = mutex_trylock(ldv_func_arg1);
#line 4946
  ldv_func_res = tmp;
#line 4948
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 4948
  return (tmp___0);
#line 4950
  return (ldv_func_res);
}
}
#line 4953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_107(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4958
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 4960
  mutex_unlock(ldv_func_arg1);
#line 4961
  return;
}
}
#line 4963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_108(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4968
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 4970
  mutex_lock(ldv_func_arg1);
#line 4971
  return;
}
}
#line 4973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_109(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4978
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 4980
  mutex_unlock(ldv_func_arg1);
#line 4981
  return;
}
}
#line 4983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_110(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4988
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 4990
  mutex_lock(ldv_func_arg1);
#line 4991
  return;
}
}
#line 4993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_111(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 4998
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 5000
  mutex_unlock(ldv_func_arg1);
#line 5001
  return;
}
}
#line 5003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_112(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5008
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5010
  mutex_lock(ldv_func_arg1);
#line 5011
  return;
}
}
#line 5013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_113(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5018
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5020
  mutex_unlock(ldv_func_arg1);
#line 5021
  return;
}
}
#line 5023 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_lock_114(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5028
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5030
  mutex_lock(ldv_func_arg1);
#line 5031
  return;
}
}
#line 5033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_115(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5038
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5040
  mutex_unlock(ldv_func_arg1);
#line 5041
  return;
}
}
#line 5043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_116(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5048
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5050
  mutex_unlock(ldv_func_arg1);
#line 5051
  return;
}
}
#line 5053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
int ldv_mutex_lock_interruptible_117(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___13 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 5058
  tmp = mutex_lock_interruptible(ldv_func_arg1);
#line 5058
  ldv_func_res = tmp;
#line 5060
  tmp___0 = ldv_mutex_lock_interruptible_mutex_of_drbd_socket(ldv_func_arg1);
#line 5060
  return (tmp___0);
#line 5062
  return (ldv_func_res);
}
}
#line 5065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_118(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5070
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5072
  mutex_unlock(ldv_func_arg1);
#line 5073
  return;
}
}
#line 5075 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_mutex_unlock_119(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5080
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5082
  mutex_unlock(ldv_func_arg1);
#line 5083
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 333 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 337
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 573
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_140(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_145(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_147(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_142(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_144(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_146(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_148(struct mutex *ldv_func_arg1 ) ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___1(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6294;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6294;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6294;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6294;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_6294: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 163 "include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 165
  tmp = current_thread_info___1();
#line 165
  tmp->preempt_count = tmp->preempt_count + 1;
#line 165
  __asm__  volatile   ("": : : "memory");
#line 166
  return;
}
}
#line 168 "include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void) 
{ 
  struct thread_info *tmp ;

  {
#line 170
  __asm__  volatile   ("": : : "memory");
#line 170
  tmp = current_thread_info___1();
#line 170
  tmp->preempt_count = tmp->preempt_count + -1;
#line 170
  __asm__  volatile   ("": : : "memory");
#line 171
  return;
}
}
#line 273
extern int rcu_is_cpu_idle(void) ;
#line 287 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 289
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 291
  return;
}
}
#line 292 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 294
  lock_release(map, 1, (unsigned long )((void *)0));
#line 296
  return;
}
}
#line 297
extern struct lockdep_map rcu_lock_map ;
#line 300
extern int debug_lockdep_rcu_enabled(void) ;
#line 732 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 734
  __rcu_read_lock();
#line 736
  rcu_lock_acquire(& rcu_lock_map);
#line 737
  tmp = debug_lockdep_rcu_enabled();
#line 737
  if (tmp != 0 && ! __warned) {
#line 737
    tmp___0 = rcu_is_cpu_idle();
#line 737
    if (tmp___0 != 0) {
#line 737
      __warned = 1;
#line 737
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 738, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 740
  return;
}
}
#line 756 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 758
  tmp = debug_lockdep_rcu_enabled();
#line 758
  if (tmp != 0 && ! __warned) {
#line 758
    tmp___0 = rcu_is_cpu_idle();
#line 758
    if (tmp___0 != 0) {
#line 758
      __warned = 1;
#line 758
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 759, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 760
  rcu_lock_release(& rcu_lock_map);
#line 762
  __rcu_read_unlock();
#line 763
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/percpu.h"
extern void __bad_size_call_parameter(void) ;
#line 201 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 203
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 203
  if (tmp != 0L) {
#line 204
    if (part->partno != 0) {
#line 205
      __mptr = (struct device  const  *)part->__dev.parent;
#line 205
      return ((struct gendisk *)__mptr + 0xffffffffffffff90UL);
    } else {
#line 207
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 207
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff90UL);
    }
  } else {

  }
#line 209
  return (0);
}
}
#line 373 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 375
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 376
  if (part->partno != 0) {
#line 377
    tmp = part_to_disk(part);
#line 377
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 378
  return;
}
}
#line 380 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 382
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 383
  if (part->partno != 0) {
#line 384
    tmp = part_to_disk(part);
#line 384
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 385
  return;
}
}
#line 406
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 209 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 210
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1261
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1535
mempool_t *drbd_request_mempool ;
#line 1578
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1580
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1890 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____1(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1894
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1896
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1897
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1897
    if (tmp != 0) {
#line 1898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1899
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1900
      __ns.i = mdev->state.i;
#line 1900
      __ns.ldv_39979.disk = 4U;
#line 1900
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1901
    goto ldv_51031;
  } else {

  }
  case 2: ;
  case 1: 
#line 1926
  drbd_set_flag(mdev, WAS_IO_ERROR);
#line 1927
  if ((unsigned int )df == 0U) {
#line 1928
    drbd_set_flag(mdev, WAS_READ_ERROR);
  } else {

  }
#line 1929
  if ((unsigned int )df == 3U) {
#line 1930
    drbd_set_flag(mdev, FORCE_DETACH);
  } else {

  }
#line 1931
  if ((int )mdev->state.ldv_39979.disk > 2) {
#line 1932
    __ns___0.i = mdev->state.i;
#line 1932
    __ns___0.ldv_39979.disk = 2U;
#line 1932
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1936
  goto ldv_51031;
  }
  ldv_51031: ;
#line 1939
  return;
}
}
#line 2157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2159
  atomic_inc(& mdev->ap_pending_cnt);
#line 2160
  return;
}
}
#line 2337 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2339
  mxb = 1000000;
#line 2340
  tmp = get_net_conf(mdev);
#line 2340
  if (tmp != 0) {
#line 2341
    mxb = (mdev->net_conf)->max_buffers;
#line 2342
    put_net_conf(mdev);
  } else {

  }
#line 2344
  return (mxb);
}
}
#line 2347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2349
  s = mdev->state;
#line 2354
  switch ((unsigned int )s.ldv_39979.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2379
  goto ldv_51203;
  case 13U: ;
#line 2383
  if (mdev->agreed_pro_version <= 95) {
#line 2384
    return (0);
  } else {

  }
#line 2385
  goto ldv_51203;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2392
  return (0);
  }
  ldv_51203: ;
#line 2395
  switch ((unsigned int )s.ldv_39979.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2403
  goto ldv_51214;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2411
  return (0);
  }
  ldv_51214: ;
#line 2414
  return (1);
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2424
  tmp = drbd_get_max_buffers(mdev);
#line 2424
  mxb = tmp;
#line 2426
  tmp___0 = is_susp(mdev->state);
#line 2426
  if (tmp___0 != 0) {
#line 2427
    return (0);
  } else {

  }
#line 2428
  tmp___1 = drbd_test_flag(mdev, SUSPEND_IO);
#line 2428
  if (tmp___1 != 0) {
#line 2429
    return (0);
  } else {

  }
#line 2436
  tmp___2 = drbd_state_is_stable(mdev);
#line 2436
  if (tmp___2 == 0) {
#line 2437
    return (0);
  } else {

  }
#line 2441
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2441
  if (tmp___3 > mxb) {
#line 2442
    return (0);
  } else {

  }
#line 2443
  tmp___4 = drbd_test_flag(mdev, BITMAP_IO);
#line 2443
  if (tmp___4 != 0) {
#line 2444
    return (0);
  } else {

  }
#line 2445
  return (1);
}
}
#line 2448 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2450
  rv = 0;
#line 2452
  spin_lock_irq(& mdev->req_lock);
#line 2453
  rv = may_inc_ap_bio(mdev);
#line 2454
  if ((int )rv) {
#line 2455
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2456
  spin_unlock_irq(& mdev->req_lock);
#line 2458
  return (rv);
}
}
#line 2461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2471
  tmp = inc_ap_bio_cond(mdev, count);
#line 2471
  if ((int )tmp) {
#line 2471
    goto ldv_51235;
  } else {

  }
#line 2471
  tmp___0 = get_current();
#line 2471
  __wait.flags = 0U;
#line 2471
  __wait.private = (void *)tmp___0;
#line 2471
  __wait.func = & autoremove_wake_function;
#line 2471
  __wait.task_list.next = & __wait.task_list;
#line 2471
  __wait.task_list.prev = & __wait.task_list;
  ldv_51238: 
#line 2471
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2471
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2471
  if ((int )tmp___1) {
#line 2471
    goto ldv_51237;
  } else {

  }
#line 2471
  schedule();
#line 2471
  goto ldv_51238;
  ldv_51237: 
#line 2471
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51235: ;
#line 2474
  return;
}
}
#line 2474 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2476
  tmp = drbd_get_max_buffers(mdev);
#line 2476
  mxb = tmp;
#line 2477
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2477
  ap_bio = tmp___0;
#line 2479
  if (ap_bio < 0) {
#line 2479
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2479);
  } else {

  }
#line 2481
  if (ap_bio == 0) {
#line 2481
    tmp___2 = drbd_test_flag(mdev, BITMAP_IO);
#line 2481
    if (tmp___2 != 0) {
#line 2482
      tmp___1 = drbd_test_and_set_flag(mdev, BITMAP_IO_QUEUED);
#line 2482
      if (tmp___1 == 0) {
#line 2483
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2489
  if (ap_bio < mxb) {
#line 2490
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2491
  return;
}
}
#line 232 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 234
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 234
  if (tmp != 0L) {
#line 234
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (234), "i" (12UL));
    ldv_51348: ;
#line 234
    goto ldv_51348;
  } else {

  }
#line 235
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 241 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 243
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 243
  if (tmp != 0L) {
#line 243
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (243), "i" (12UL));
    ldv_51353: ;
#line 243
    goto ldv_51353;
  } else {

  }
#line 244
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 249 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 251
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 288
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 288
  req = (struct drbd_request *)tmp;
#line 290
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 290
  if (tmp___0 != 0L) {
#line 291
    drbd_req_make_private_bio(req, bio_src);
#line 293
    req->rq_state = (int )bio_src->bi_rw & 1 ? 2048UL : 0UL;
#line 294
    req->mdev = mdev;
#line 295
    req->master_bio = bio_src;
#line 296
    req->epoch = 0U;
#line 297
    req->sector = bio_src->bi_sector;
#line 298
    req->size = bio_src->bi_size;
#line 299
    INIT_HLIST_NODE(& req->collision);
#line 300
    INIT_LIST_HEAD(& req->tl_requests);
#line 301
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 303
  return (req);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 308
  mempool_free((void *)req, drbd_request_mempool);
#line 309
  return;
}
}
#line 324
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 330
void request_timer_fn(unsigned long data ) ;
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 373
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_39979.pdsk > 3 && (int )s.ldv_39979.conn > 13) && (int )s.ldv_39979.conn <= 21)));
}
}
#line 381 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 383
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___3 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 108
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 110
  rcu_read_lock();
#line 110
  tmp = current_thread_info___1();
#line 110
  tmp->preempt_count = tmp->preempt_count + 1;
#line 110
  __asm__  volatile   ("": : : "memory");
#line 110
  __vpp_verify = 0;
#line 110
  switch (4UL) {
  case 1UL: ;
#line 110
  switch (4UL) {
  case 1UL: 
#line 110
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 110
  goto ldv_51445;
  case 2UL: 
#line 110
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 110
  goto ldv_51445;
  case 4UL: 
#line 110
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 110
  goto ldv_51445;
  case 8UL: 
#line 110
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 110
  goto ldv_51445;
  default: 
#line 110
  __bad_percpu_size();
  }
  ldv_51445: 
#line 110
  pscr_ret__ = pfo_ret__;
#line 110
  goto ldv_51451;
  case 2UL: ;
#line 110
  switch (4UL) {
  case 1UL: 
#line 110
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 110
  goto ldv_51455;
  case 2UL: 
#line 110
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 110
  goto ldv_51455;
  case 4UL: 
#line 110
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 110
  goto ldv_51455;
  case 8UL: 
#line 110
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 110
  goto ldv_51455;
  default: 
#line 110
  __bad_percpu_size();
  }
  ldv_51455: 
#line 110
  pscr_ret__ = pfo_ret_____0;
#line 110
  goto ldv_51451;
  case 4UL: ;
#line 110
  switch (4UL) {
  case 1UL: 
#line 110
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 110
  goto ldv_51464;
  case 2UL: 
#line 110
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 110
  goto ldv_51464;
  case 4UL: 
#line 110
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 110
  goto ldv_51464;
  case 8UL: 
#line 110
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 110
  goto ldv_51464;
  default: 
#line 110
  __bad_percpu_size();
  }
  ldv_51464: 
#line 110
  pscr_ret__ = pfo_ret_____1;
#line 110
  goto ldv_51451;
  case 8UL: ;
#line 110
  switch (4UL) {
  case 1UL: 
#line 110
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 110
  goto ldv_51473;
  case 2UL: 
#line 110
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 110
  goto ldv_51473;
  case 4UL: 
#line 110
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 110
  goto ldv_51473;
  case 8UL: 
#line 110
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 110
  goto ldv_51473;
  default: 
#line 110
  __bad_percpu_size();
  }
  ldv_51473: 
#line 110
  pscr_ret__ = pfo_ret_____2;
#line 110
  goto ldv_51451;
  default: 
#line 110
  __bad_size_call_parameter();
#line 110
  goto ldv_51451;
  }
  ldv_51451: 
#line 110
  cpu = pscr_ret__;
#line 111
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 112
  __vpp_verify___0 = 0;
#line 112
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 112
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 112
  if ((mdev->vdisk)->part0.partno != 0) {
#line 112
    __vpp_verify___1 = 0;
#line 112
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 112
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 112
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 113
  __vpp_verify___2 = 0;
#line 113
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 113
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 113
  if ((mdev->vdisk)->part0.partno != 0) {
#line 113
    __vpp_verify___3 = 0;
#line 113
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 113
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 113
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 114
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 115
  __asm__  volatile   ("": : : "memory");
#line 115
  tmp___2 = current_thread_info___1();
#line 115
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 115
  __asm__  volatile   ("": : : "memory");
#line 115
  rcu_read_unlock();
#line 116
  return;
}
}
#line 119 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pscr_ret__ ;
  void const   *__vpp_verify ;
  int pfo_ret__ ;
  int pfo_ret_____0 ;
  int pfo_ret_____1 ;
  int pfo_ret_____2 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 121
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 122
  duration = (unsigned long )jiffies - req->start_time;
#line 124
  rcu_read_lock();
#line 124
  tmp = current_thread_info___1();
#line 124
  tmp->preempt_count = tmp->preempt_count + 1;
#line 124
  __asm__  volatile   ("": : : "memory");
#line 124
  __vpp_verify = 0;
#line 124
  switch (4UL) {
  case 1UL: ;
#line 124
  switch (4UL) {
  case 1UL: 
#line 124
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 124
  goto ldv_51511;
  case 2UL: 
#line 124
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 124
  goto ldv_51511;
  case 4UL: 
#line 124
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 124
  goto ldv_51511;
  case 8UL: 
#line 124
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 124
  goto ldv_51511;
  default: 
#line 124
  __bad_percpu_size();
  }
  ldv_51511: 
#line 124
  pscr_ret__ = pfo_ret__;
#line 124
  goto ldv_51517;
  case 2UL: ;
#line 124
  switch (4UL) {
  case 1UL: 
#line 124
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____0): "m" (cpu_number));
#line 124
  goto ldv_51521;
  case 2UL: 
#line 124
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 124
  goto ldv_51521;
  case 4UL: 
#line 124
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 124
  goto ldv_51521;
  case 8UL: 
#line 124
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____0): "m" (cpu_number));
#line 124
  goto ldv_51521;
  default: 
#line 124
  __bad_percpu_size();
  }
  ldv_51521: 
#line 124
  pscr_ret__ = pfo_ret_____0;
#line 124
  goto ldv_51517;
  case 4UL: ;
#line 124
  switch (4UL) {
  case 1UL: 
#line 124
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____1): "m" (cpu_number));
#line 124
  goto ldv_51530;
  case 2UL: 
#line 124
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 124
  goto ldv_51530;
  case 4UL: 
#line 124
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 124
  goto ldv_51530;
  case 8UL: 
#line 124
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____1): "m" (cpu_number));
#line 124
  goto ldv_51530;
  default: 
#line 124
  __bad_percpu_size();
  }
  ldv_51530: 
#line 124
  pscr_ret__ = pfo_ret_____1;
#line 124
  goto ldv_51517;
  case 8UL: ;
#line 124
  switch (4UL) {
  case 1UL: 
#line 124
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret_____2): "m" (cpu_number));
#line 124
  goto ldv_51539;
  case 2UL: 
#line 124
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 124
  goto ldv_51539;
  case 4UL: 
#line 124
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 124
  goto ldv_51539;
  case 8UL: 
#line 124
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret_____2): "m" (cpu_number));
#line 124
  goto ldv_51539;
  default: 
#line 124
  __bad_percpu_size();
  }
  ldv_51539: 
#line 124
  pscr_ret__ = pfo_ret_____2;
#line 124
  goto ldv_51517;
  default: 
#line 124
  __bad_size_call_parameter();
#line 124
  goto ldv_51517;
  }
  ldv_51517: 
#line 124
  cpu = pscr_ret__;
#line 125
  __vpp_verify___0 = 0;
#line 125
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 125
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 125
  if ((mdev->vdisk)->part0.partno != 0) {
#line 125
    __vpp_verify___1 = 0;
#line 125
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 125
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 125
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 126
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 127
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 128
  __asm__  volatile   ("": : : "memory");
#line 128
  tmp___1 = current_thread_info___1();
#line 128
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 128
  __asm__  volatile   ("": : : "memory");
#line 128
  rcu_read_unlock();
#line 129
  return;
}
}
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 133
  s = req->rq_state;
#line 141
  list_del(& req->tl_requests);
#line 146
  if ((int )rw == 1) {
#line 151
    if ((s & 256UL) == 0UL || (s & 4UL) == 0UL) {
#line 152
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                             152U);
    } else {

    }
#line 154
    if (((s & 256UL) != 0UL && (s & 4UL) != 0UL) && (s & 512UL) != 0UL) {
#line 155
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         155U);
    } else {

    }
#line 167
    if ((s & 15UL) != 0UL) {
#line 168
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 168
      if (tmp___0 != 0) {
#line 169
        if ((s & 4096UL) != 0UL) {
#line 170
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 171
        put_ldev(mdev);
      } else {
#line 172
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 172
        if (tmp != 0) {
#line 173
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 180
  drbd_req_free(req);
#line 181
  return;
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 192
  tmp = drbd_test_flag(mdev, CREATE_BARRIER);
#line 192
  if (tmp != 0) {
#line 193
    return;
  } else {

  }
#line 195
  b = mdev->newest_tle;
#line 196
  b->w.cb = & w_send_barrier;
#line 201
  inc_ap_pending(mdev);
#line 202
  drbd_queue_work(& mdev->data.work, & b->w);
#line 203
  drbd_set_flag(mdev, CREATE_BARRIER);
#line 204
  return;
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 209
  s = req->rq_state;
#line 221
  if (((int )mdev->state.ldv_39979.conn > 9 && (s & 64UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 224
    queue_barrier(mdev);
  } else {

  }
#line 229
  if ((s & 128UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 230
    sector = req->sector;
#line 231
    size = (int const   )req->size;
#line 237
    slot = tl_hash_slot___0(mdev, sector);
#line 238
    n = slot->first;
#line 238
    goto ldv_51583;
    ldv_51582: 
#line 239
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 239
    if (tmp != 0) {
#line 240
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 238
    n = n->next;
    ldv_51583: ;
#line 238
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 238
      __mptr = (struct hlist_node  const  *)n;
#line 238
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 238
      if (1 != 0) {
#line 239
        goto ldv_51582;
      } else {
#line 241
        goto ldv_51584;
      }
    } else {

    }
    ldv_51584: 
#line 261
    slot = ee_hash_slot___0(mdev, req->sector);
#line 262
    n = slot->first;
#line 262
    goto ldv_51590;
    ldv_51589: 
#line 263
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 263
    if (tmp___0 != 0) {
#line 264
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 265
      goto ldv_51588;
    } else {

    }
#line 262
    n = n->next;
    ldv_51590: ;
#line 262
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 262
      __mptr___0 = (struct hlist_node  const  *)n;
#line 262
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 262
      if (1 != 0) {
#line 263
        goto ldv_51589;
      } else {
#line 265
        goto ldv_51588;
      }
    } else {

    }
    ldv_51588: ;
  } else {

  }
#line 268
  return;
}
}
#line 272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 275
  bio_endio(m->bio, m->error);
#line 276
  dec_ap_bio(mdev);
#line 277
  return;
}
}
#line 285 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 287
  s = req->rq_state;
#line 288
  mdev = req->mdev;
#line 289
  rw = (req->rq_state & 2048UL) != 0UL;
#line 300
  if ((s & 32UL) != 0UL) {
#line 301
    return;
  } else {

  }
#line 302
  if ((s & 16UL) != 0UL) {
#line 303
    return;
  } else {

  }
#line 304
  if ((int )s & 1 && (s & 8UL) == 0UL) {
#line 305
    return;
  } else {

  }
#line 307
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 329
    ok = (s & 4UL) != 0UL || (s & 256UL) != 0UL;
#line 330
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 330
    error = (int )tmp;
#line 334
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 334
    if (tmp___0 == 0) {
#line 335
      hlist_del(& req->collision);
    } else
#line 337
    if ((s & 880UL) != 0UL) {
#line 337
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              337);
    } else {

    }
#line 340
    if (rw == 1) {
#line 341
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 344
    _drbd_end_io_acct(mdev, req);
#line 346
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 347
    m->bio = req->master_bio;
#line 348
    req->master_bio = 0;
  } else {

  }
#line 351
  if ((int )s & 1) {
#line 352
    return;
  } else {

  }
#line 354
  if ((s & 1008UL) == 0UL || (s & 128UL) != 0UL) {
#line 359
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 360
  return;
}
}
#line 365 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 367
  mdev = req->mdev;
#line 369
  tmp = is_susp(mdev->state);
#line 369
  if (tmp == 0) {
#line 370
    _req_may_be_done(req, m);
  } else {

  }
#line 371
  return;
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 398
  mdev = req->mdev;
#line 399
  sector = req->sector;
#line 400
  size = (int const   )req->size;
#line 406
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 406
  if (tmp == 0) {
#line 406
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            406);
  } else {

  }
#line 408
  tmp___0 = get_net_conf(mdev);
#line 408
  if (tmp___0 == 0) {
#line 409
    return (0);
  } else {

  }
#line 412
  _b = mdev->tl_hash_s == 0U;
#line 412
  if (_b != 0) {
#line 412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            412);
  } else {

  }
#line 412
  if (_b != 0) {
#line 413
    goto out_no_conflict;
  } else {

  }
#line 414
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 414
  if (tmp___1 != 0L) {
#line 414
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (414), "i" (12UL));
    ldv_51623: ;
#line 414
    goto ldv_51623;
  } else {

  }
#line 417
  slot = tl_hash_slot___0(mdev, sector);
#line 418
  n = slot->first;
#line 418
  goto ldv_51629;
  ldv_51628: 
#line 419
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 419
  if (tmp___4 != 0) {
#line 420
    tmp___2 = get_current();
#line 420
    tmp___3 = get_current();
#line 420
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 426
    goto out_conflict;
  } else {

  }
#line 418
  n = n->next;
  ldv_51629: ;
#line 418
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 418
    __mptr = (struct hlist_node  const  *)n;
#line 418
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 418
    if (1 != 0) {
#line 419
      goto ldv_51628;
    } else {
#line 421
      goto ldv_51630;
    }
  } else {

  }
  ldv_51630: ;
#line 430
  if (mdev->ee_hash_s != 0U) {
#line 432
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 432
    if (tmp___5 != 0L) {
#line 432
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (432), "i" (12UL));
      ldv_51631: ;
#line 432
      goto ldv_51631;
    } else {

    }
#line 435
    slot = ee_hash_slot___0(mdev, sector);
#line 436
    n = slot->first;
#line 436
    goto ldv_51636;
    ldv_51635: 
#line 437
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 437
    if (tmp___8 != 0) {
#line 438
      tmp___6 = get_current();
#line 438
      tmp___7 = get_current();
#line 438
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 444
      goto out_conflict;
    } else {

    }
#line 436
    n = n->next;
    ldv_51636: ;
#line 436
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 436
      __mptr___0 = (struct hlist_node  const  *)n;
#line 436
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 436
      if (1 != 0) {
#line 437
        goto ldv_51635;
      } else {
#line 439
        goto ldv_51637;
      }
    } else {

    }
    ldv_51637: ;
  } else {

  }
  out_no_conflict: 
#line 453
  put_net_conf(mdev);
#line 454
  return (0);
  out_conflict: 
#line 457
  put_net_conf(mdev);
#line 458
  return (1);
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 476
  mdev = req->mdev;
#line 477
  rv = 0;
#line 478
  m->bio = 0;
#line 480
  switch ((unsigned int )what) {
  default: 
#line 482
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
          482);
#line 483
  goto ldv_51646;
  case 1U: ;
#line 494
  if ((req->rq_state & 1008UL) != 0UL) {
#line 494
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            494);
  } else {

  }
#line 495
  req->rq_state = req->rq_state | 16UL;
#line 496
  inc_ap_pending(mdev);
#line 497
  goto ldv_51646;
  case 2U: ;
#line 501
  if ((req->rq_state & 15UL) != 0UL) {
#line 501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            501);
  } else {

  }
#line 502
  req->rq_state = req->rq_state | 1UL;
#line 503
  goto ldv_51646;
  case 23U: ;
#line 506
  if ((req->rq_state & 2048UL) != 0UL) {
#line 507
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 509
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 511
  req->rq_state = req->rq_state | 6UL;
#line 512
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 514
  _req_may_be_done_not_susp(req, m);
#line 515
  goto ldv_51646;
  case 22U: 
#line 518
  req->rq_state = req->rq_state | 8UL;
#line 519
  if ((req->rq_state & 2048UL) != 0UL) {
#line 520
    _req_may_be_done_not_susp(req, m);
  } else {
#line 522
    goto goto_queue_for_net_read;
  }
#line 523
  goto ldv_51646;
  case 21U: 
#line 526
  req->rq_state = req->rq_state | 2UL;
#line 527
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 529
  __drbd_chk_io_error____1(mdev, DRBD_WRITE_ERROR, "__req_mod");
#line 530
  _req_may_be_done_not_susp(req, m);
#line 531
  goto ldv_51646;
  case 20U: 
#line 535
  req->rq_state = req->rq_state | 2UL;
#line 536
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 537
  _req_may_be_done_not_susp(req, m);
#line 538
  goto ldv_51646;
  case 19U: 
#line 541
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                         541U);
#line 543
  req->rq_state = req->rq_state | 2UL;
#line 544
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 546
  if ((req->rq_state & 8UL) != 0UL) {
#line 547
    _req_may_be_done(req, m);
#line 548
    goto ldv_51646;
  } else {

  }
#line 551
  __drbd_chk_io_error____1(mdev, DRBD_READ_ERROR, "__req_mod");
  goto_queue_for_net_read: ;
#line 555
  if ((req->rq_state & 1008UL) != 0UL) {
#line 555
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            555);
  } else {

  }
#line 559
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 560
    _req_may_be_done_not_susp(req, m);
#line 561
    goto ldv_51646;
  } else {

  }
#line 565
  req->rq_state = req->rq_state | 16UL;
#line 566
  inc_ap_pending(mdev);
  case 4U: 
#line 579
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 579
  hlist_add_head(& req->collision, tmp);
#line 581
  drbd_set_flag(mdev, UNPLUG_REMOTE);
#line 583
  if ((req->rq_state & 16UL) == 0UL) {
#line 583
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            583);
  } else {

  }
#line 584
  req->rq_state = req->rq_state | 32UL;
#line 585
  req->w.cb = (req->rq_state & 15UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 588
  drbd_queue_work(& mdev->data.work, & req->w);
#line 589
  goto ldv_51646;
  case 3U: 
#line 595
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 595
  hlist_add_head(& req->collision, tmp___0);
#line 615
  drbd_set_flag(mdev, UNPLUG_REMOTE);
#line 619
  tmp___1 = drbd_test_flag(mdev, CREATE_BARRIER);
#line 619
  if (tmp___1 != 0) {
#line 619
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_test_flag(mdev, CREATE_BARRIER) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            619);
  } else {

  }
#line 621
  req->epoch = (mdev->newest_tle)->br_number;
#line 624
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 627
  if ((req->rq_state & 16UL) == 0UL) {
#line 627
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            627);
  } else {

  }
#line 628
  req->rq_state = req->rq_state | 32UL;
#line 629
  req->w.cb = & w_send_dblock;
#line 630
  drbd_queue_work(& mdev->data.work, & req->w);
#line 633
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 634
    queue_barrier(mdev);
  } else {

  }
#line 636
  goto ldv_51646;
  case 5U: 
#line 639
  req->rq_state = req->rq_state | 32UL;
#line 640
  req->w.cb = & w_send_oos;
#line 641
  drbd_queue_work(& mdev->data.work, & req->w);
#line 642
  goto ldv_51646;
  case 11U: ;
  case 6U: ;
  case 7U: 
#line 649
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 652
  _req_may_be_done_not_susp(req, m);
#line 653
  goto ldv_51646;
  case 8U: ;
#line 657
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 658
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 660
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 664
    if ((req->rq_state & 16UL) != 0UL) {
#line 665
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 665
      if (tmp___2 != 0) {
#line 665
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 665
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
      if (tmp___4 < 0) {
#line 665
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 665, tmp___3);
      } else {

      }
#line 666
      req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 667
      req->rq_state = req->rq_state | 256UL;
    } else {

    }
  } else {

  }
#line 673
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 674
  req->rq_state = req->rq_state | 64UL;
#line 675
  _req_may_be_done_not_susp(req, m);
#line 676
  goto ldv_51646;
  case 9U: 
#line 681
  req->rq_state = req->rq_state & 0xffffffffffffffdfUL;
#line 682
  req->rq_state = req->rq_state | 128UL;
#line 683
  _req_may_be_done_not_susp(req, m);
#line 684
  goto ldv_51646;
  case 10U: ;
#line 689
  if ((req->rq_state & 16UL) != 0UL) {
#line 690
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 690
    if (tmp___5 != 0) {
#line 690
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 690
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 690
    if (tmp___7 < 0) {
#line 690
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 690
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 690, tmp___6);
    } else {

    }
  } else {

  }
#line 691
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 692
  req->rq_state = req->rq_state | 128UL;
#line 693
  if ((req->rq_state & 64UL) != 0UL && (req->rq_state & 2048UL) != 0UL) {
#line 694
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 698
  if ((req->rq_state & 32UL) == 0UL) {
#line 699
    _req_may_be_done(req, m);
  } else {

  }
#line 700
  goto ldv_51646;
  case 15U: ;
#line 706
  if ((unsigned int )what == 15U) {
#line 707
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 710
  req->rq_state = req->rq_state | 128UL;
  case 14U: ;
  case 13U: ;
#line 714
  if ((unsigned int )what == 14U) {
#line 715
    req->rq_state = req->rq_state | 512UL;
  } else {

  }
  case 12U: 
#line 725
  req->rq_state = req->rq_state | 256UL;
#line 726
  if ((req->rq_state & 16UL) == 0UL) {
#line 726
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            726);
  } else {

  }
#line 727
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 727
  if (tmp___8 != 0) {
#line 727
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 727
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 727
  if (tmp___10 < 0) {
#line 727
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 727
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 727, tmp___9);
  } else {

  }
#line 728
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 729
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 730
  _req_may_be_done_not_susp(req, m);
#line 731
  goto ldv_51646;
  case 16U: ;
#line 735
  if ((req->rq_state & 16UL) != 0UL) {
#line 736
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 736
    if (tmp___11 != 0) {
#line 736
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 736
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 736
    if (tmp___13 < 0) {
#line 736
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 736
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 736, tmp___12);
    } else {

    }
#line 737
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 739
  req->rq_state = req->rq_state & 0xfffffffffffffeefUL;
#line 741
  req->rq_state = req->rq_state | 128UL;
#line 742
  _req_may_be_done_not_susp(req, m);
#line 744
  goto ldv_51646;
  case 25U: ;
#line 747
  if ((req->rq_state & 2UL) == 0UL) {
#line 748
    goto ldv_51646;
  } else {

  }
#line 750
  _req_may_be_done(req, m);
#line 751
  goto ldv_51646;
  case 26U: ;
#line 754
  if ((req->rq_state & 2UL) == 0UL) {
#line 755
    goto ldv_51646;
  } else {

  }
#line 757
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 759
  rv = 2;
#line 760
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 761
    rv = 1;
  } else {

  }
#line 763
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 764
  req->w.cb = & w_restart_disk_io;
#line 765
  drbd_queue_work(& mdev->data.work, & req->w);
#line 766
  goto ldv_51646;
  case 24U: ;
#line 770
  if ((req->rq_state & 2048UL) == 0UL && (unsigned long )req->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                struct drbd_work * ,
                                                                                                int  ))0)) {
#line 771
    _req_may_be_done(req, m);
#line 772
    goto ldv_51646;
  } else {

  }
#line 779
  if ((req->rq_state & 256UL) == 0UL) {
#line 780
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 781
      drbd_queue_work(& mdev->data.work, & req->w);
#line 782
      rv = (req->rq_state & 2048UL) != 0UL ? 1 : 2;
    } else {

    }
#line 784
    goto ldv_51646;
  } else {

  }
  case 17U: ;
#line 789
  if ((req->rq_state & 2048UL) == 0UL) {
#line 790
    goto ldv_51646;
  } else {

  }
#line 792
  if ((req->rq_state & 16UL) != 0UL) {
#line 796
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 797
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 799
  if ((req->rq_state & 1008UL) != 0UL) {
#line 800
    req->rq_state = req->rq_state | 128UL;
#line 801
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 802
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 804
  _req_may_be_done(req, m);
#line 805
  goto ldv_51646;
  case 18U: ;
#line 808
  if ((req->rq_state & 16UL) == 0UL) {
#line 808
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            808);
  } else {

  }
#line 809
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 809
  if (tmp___14 != 0) {
#line 809
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 809
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 809
  if (tmp___16 < 0) {
#line 809
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 809
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 809, tmp___15);
  } else {

  }
#line 810
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 811
  req->rq_state = req->rq_state | 384UL;
#line 812
  _req_may_be_done_not_susp(req, m);
#line 813
  goto ldv_51646;
  }
  ldv_51646: ;
#line 816
  return (rv);
}
}
#line 826 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 831
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 832
    return (1);
  } else {

  }
#line 833
  if ((int )mdev->state.ldv_39979.disk > 4) {
#line 834
    return (0);
  } else {

  }
#line 835
  if ((int )mdev->state.ldv_39979.disk <= 3) {
#line 836
    return (0);
  } else {

  }
#line 838
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 839
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 841
  if (sector >= nr_sectors) {
#line 841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            841);
  } else {

  }
#line 842
  if (esector >= nr_sectors) {
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            842);
  } else {

  }
#line 844
  sbnr = sector >> 3;
#line 845
  ebnr = esector >> 3;
#line 847
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 847
  return (tmp == 0);
}
}
#line 850 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static void maybe_pull_ahead(struct drbd_conf *mdev ) 
{ 
  int congested ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 852
  congested = 0;
#line 859
  tmp = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 859
  if (tmp == 0) {
#line 860
    return;
  } else {

  }
#line 862
  if ((mdev->net_conf)->cong_fill != 0) {
#line 862
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 862
    if (tmp___0 >= (mdev->net_conf)->cong_fill) {
#line 864
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 865
      congested = 1;
    } else {

    }
  } else {

  }
#line 868
  if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 869
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 870
    congested = 1;
  } else {

  }
#line 873
  if (congested != 0) {
#line 874
    queue_barrier(mdev);
#line 876
    if ((mdev->net_conf)->on_congestion == 1) {
#line 877
      __ns.i = mdev->state.i;
#line 877
      __ns.ldv_39979.conn = 22U;
#line 877
      _drbd_set_state(mdev, __ns, 0, 0);
    } else {
#line 879
      __ns___0.i = mdev->state.i;
#line 879
      __ns___0.ldv_39979.conn = 1U;
#line 879
      _drbd_set_state(mdev, __ns___0, 0, 0);
    }
  } else {

  }
#line 881
  put_ldev(mdev);
#line 882
  return;
}
}
#line 884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  union drbd_state s ;
  long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  bool tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  bool tmp___11 ;
  bool tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  long tmp___18 ;
  int tmp___19 ;
  long tmp___20 ;
  bool tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;

  {
#line 886
  rw = (int const   )bio->bi_rw & (int const   )8193;
#line 887
  size = (int const   )bio->bi_size;
#line 888
  sector = bio->bi_sector;
#line 889
  b = 0;
#line 891
  send_oos = 0;
#line 892
  err = -5;
#line 893
  ret = 0;
#line 897
  req = drbd_req_new(mdev, bio);
#line 898
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 899
    dec_ap_bio(mdev);
#line 902
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 903
    bio_endio(bio, -12);
#line 904
    return (0);
  } else {

  }
#line 906
  req->start_time = start_time;
#line 908
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 909
  if (local == 0) {
#line 910
    bio_put(req->private_bio);
#line 911
    req->private_bio = 0;
  } else {

  }
#line 913
  if (rw == 1) {
#line 917
    tmp = __builtin_expect(size == 0, 0L);
#line 917
    if (tmp != 0L) {
#line 919
      if ((bio->bi_rw & 4096UL) == 0UL) {
#line 919
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_rw & REQ_FLUSH ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                919);
      } else {

      }
#line 920
      remote = 0;
    } else {
#line 922
      remote = 1;
    }
  } else {
#line 925
    if (local != 0) {
#line 926
      tmp___0 = drbd_may_do_local_read(mdev, sector, size);
#line 926
      if (tmp___0 == 0) {
#line 932
        local = 0;
#line 933
        bio_put(req->private_bio);
#line 934
        req->private_bio = 0;
#line 935
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 938
    remote = local == 0 && (int )mdev->state.ldv_39979.pdsk > 7;
  }
#line 949
  if ((rw == 8192 && (int )mdev->state.ldv_39979.disk > 3) && local == 0) {
#line 950
    err = -11;
#line 951
    goto fail_and_free_req;
  } else {

  }
#line 961
  if ((rw == 1 && local != 0) && size != 0) {
#line 961
    tmp___1 = drbd_test_flag(mdev, AL_SUSPENDED);
#line 961
    if (tmp___1 == 0) {
#line 963
      req->rq_state = req->rq_state | 4096UL;
#line 964
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 967
  s = mdev->state;
#line 968
  if (remote != 0) {
#line 968
    tmp___2 = drbd_should_do_remote(s);
#line 968
    if ((int )tmp___2) {
#line 968
      tmp___3 = 1;
    } else {
#line 968
      tmp___3 = 0;
    }
  } else {
#line 968
    tmp___3 = 0;
  }
#line 968
  remote = tmp___3;
#line 969
  if (rw == 1) {
#line 969
    tmp___4 = drbd_should_send_oos(s);
#line 969
    if ((int )tmp___4) {
#line 969
      tmp___5 = 1;
    } else {
#line 969
      tmp___5 = 0;
    }
  } else {
#line 969
    tmp___5 = 0;
  }
#line 969
  send_oos = tmp___5;
#line 970
  if (remote != 0 && send_oos != 0) {
#line 970
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            970);
  } else {

  }
#line 972
  if (local == 0 && remote == 0) {
#line 972
    tmp___7 = is_susp(mdev->state);
#line 972
    if (tmp___7 == 0) {
#line 973
      tmp___6 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 973
      if (tmp___6 != 0) {
#line 974
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 975
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 984
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 984
    tmp___9 = drbd_test_flag(mdev, CREATE_BARRIER);
#line 984
    if (tmp___9 != 0) {
      allocate_barrier: 
#line 988
      tmp___8 = kmalloc(56UL, 16U);
#line 988
      b = (struct drbd_tl_epoch *)tmp___8;
#line 989
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 990
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 991
        err = -12;
#line 992
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 997
  spin_lock_irq(& mdev->req_lock);
#line 999
  tmp___10 = is_susp(mdev->state);
#line 999
  if (tmp___10 != 0) {
#line 1004
    ret = 1;
#line 1005
    spin_unlock_irq(& mdev->req_lock);
#line 1006
    goto fail_free_complete;
  } else {

  }
#line 1009
  if (remote != 0 || send_oos != 0) {
#line 1010
    tmp___11 = drbd_should_do_remote(mdev->state);
#line 1010
    remote = (int )tmp___11;
#line 1011
    if (rw == 1) {
#line 1011
      tmp___12 = drbd_should_send_oos(mdev->state);
#line 1011
      if ((int )tmp___12) {
#line 1011
        tmp___13 = 1;
      } else {
#line 1011
        tmp___13 = 0;
      }
    } else {
#line 1011
      tmp___13 = 0;
    }
#line 1011
    send_oos = tmp___13;
#line 1012
    if (remote != 0 && send_oos != 0) {
#line 1012
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1012);
    } else {

    }
#line 1014
    if (remote == 0 && send_oos == 0) {
#line 1015
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 1016
    if (local == 0 && remote == 0) {
#line 1017
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 1018
      spin_unlock_irq(& mdev->req_lock);
#line 1019
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 1023
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1024
    mdev->unused_spare_tle = b;
#line 1025
    b = 0;
  } else {

  }
#line 1027
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1027
    tmp___14 = drbd_test_flag(mdev, CREATE_BARRIER);
#line 1027
    if (tmp___14 != 0) {
#line 1032
      spin_unlock_irq(& mdev->req_lock);
#line 1033
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 1038
  _drbd_start_io_acct(mdev, req, bio);
#line 1050
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 1050
    tmp___16 = drbd_test_and_clear_flag(mdev, CREATE_BARRIER);
#line 1050
    if (tmp___16 != 0) {
#line 1052
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 1053
      mdev->unused_spare_tle = 0;
    } else {
#line 1050
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1055
  if (remote != 0 && rw == 1) {
#line 1055
    tmp___15 = drbd_test_flag(mdev, CREATE_BARRIER);
#line 1055
    if (tmp___15 != 0) {
#line 1055
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && drbd_test_flag(mdev, CREATE_BARRIER)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1056);
    } else {

    }
  } else {

  }
#line 1074
  if (remote != 0) {
#line 1075
    _req_mod(req, to_be_send);
  } else {

  }
#line 1076
  if (local != 0) {
#line 1077
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 1082
  if (rw == 1) {
#line 1082
    tmp___17 = _req_conflicts(req);
#line 1082
    if (tmp___17 != 0) {
#line 1083
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 1087
  tmp___18 = __builtin_expect(size != 0, 1L);
#line 1087
  if (tmp___18 != 0L) {
#line 1088
    list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
  } else {

  }
#line 1092
  if (remote != 0) {
#line 1097
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 1101
  if (send_oos != 0) {
#line 1101
    tmp___19 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
                                      1101U);
#line 1101
    if (tmp___19 != 0) {
#line 1102
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 1104
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 1106
    maybe_pull_ahead(mdev);
  } else {

  }
#line 1111
  tmp___20 = __builtin_expect((bio->bi_rw & 4096UL) != 0UL, 0L);
#line 1111
  if (tmp___20 != 0L && (mdev->newest_tle)->n_writes != 0) {
#line 1111
    tmp___21 = drbd_should_do_remote(mdev->state);
#line 1111
    if ((int )tmp___21) {
#line 1114
      queue_barrier(mdev);
    } else {

    }
  } else {

  }
#line 1116
  spin_unlock_irq(& mdev->req_lock);
#line 1117
  kfree((void const   *)b);
#line 1119
  if (local != 0) {
#line 1120
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1127
    tmp___23 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1127
    if (tmp___23 != 0) {
#line 1128
      tmp___22 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1128
      if (tmp___22 != 0) {
#line 1131
        bio_endio(req->private_bio, -5);
      } else {
#line 1133
        generic_make_request(req->private_bio);
      }
#line 1134
      put_ldev(mdev);
    } else {
#line 1136
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1139
  return (0);
  fail_conflicting: 
#line 1148
  _drbd_end_io_acct(mdev, req);
#line 1149
  spin_unlock_irq(& mdev->req_lock);
#line 1150
  if (remote != 0) {
#line 1151
    tmp___24 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1151
    if (tmp___24 != 0) {
#line 1151
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1151
    tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1151
    if (tmp___26 < 0) {
#line 1151
      tmp___25 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1151
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1151, tmp___25);
    } else {

    }
  } else {

  }
#line 1154
  err = 0;
  fail_free_complete: ;
#line 1157
  if ((req->rq_state & 4096UL) != 0UL) {
#line 1158
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1160
  if (local != 0) {
#line 1161
    bio_put(req->private_bio);
#line 1162
    req->private_bio = 0;
#line 1163
    put_ldev(mdev);
  } else {

  }
#line 1165
  if (ret == 0) {
#line 1166
    bio_endio(bio, err);
  } else {

  }
#line 1168
  drbd_req_free(req);
#line 1169
  dec_ap_bio(mdev);
#line 1170
  kfree((void const   *)b);
#line 1172
  return (ret);
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1182
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1184
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1184
    if (tmp___1 != 0) {
#line 1185
      tmp = get_current();
#line 1185
      tmp___0 = get_current();
#line 1185
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1191
    return (1);
  } else {

  }
#line 1194
  return (0);
}
}
#line 1197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1200
  mdev = (struct drbd_conf *)q->queuedata;
#line 1203
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1203
  if (tmp != 0) {
#line 1204
    bio_endio(bio, -1);
#line 1205
    return;
  } else {

  }
#line 1208
  start_time = jiffies;
#line 1213
  if ((bio->bi_size & 511U) != 0U) {
#line 1213
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
            1213);
  } else {

  }
#line 1217
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1218
  e_enr = bio->bi_size != 0U ? (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8) : s_enr;
#line 1220
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1220
  if (tmp___1 != 0L) {
    ldv_51744: 
#line 1222
    inc_ap_bio(mdev, 1);
#line 1223
    tmp___0 = drbd_make_request_common(mdev, bio, start_time);
#line 1223
    if (tmp___0 != 0) {
#line 1224
      goto ldv_51744;
    } else {

    }

#line 1224
    return;
  } else {

  }
#line 1229
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1235
    bio_endio(bio, -22);
  } else {
#line 1247
    sect = bio->bi_sector;
#line 1248
    sps = 256;
#line 1249
    mask = sps + -1;
#line 1250
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1251
    bp = bio_split(bio, (int )first_sectors);
#line 1258
    inc_ap_bio(mdev, 3);
#line 1260
    if (s_enr + 1U != e_enr) {
#line 1260
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared",
              1260);
    } else {

    }
#line 1262
    goto ldv_51752;
    ldv_51751: 
#line 1263
    inc_ap_bio(mdev, 1);
    ldv_51752: 
#line 1262
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1262
    if (tmp___2 != 0) {
#line 1263
      goto ldv_51751;
    } else {

    }

#line 1265
    goto ldv_51755;
    ldv_51754: 
#line 1266
    inc_ap_bio(mdev, 1);
    ldv_51755: 
#line 1265
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1265
    if (tmp___3 != 0) {
#line 1266
      goto ldv_51754;
    } else {

    }
#line 1268
    dec_ap_bio(mdev);
#line 1270
    bio_pair_release(bp);
  }
#line 1272
  return;
}
}
#line 1287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1289
  mdev = (struct drbd_conf *)q->queuedata;
#line 1290
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1292
  bio_size = bvm->bi_size;
#line 1295
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1297
  if (limit < 0) {
#line 1298
    limit = 0;
  } else {

  }
#line 1299
  if (bio_size == 0U) {
#line 1300
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1301
      limit = (int )bvec->bv_len;
    } else
#line 1302
    if (limit != 0) {
#line 1302
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1302
      if (tmp != 0) {
#line 1303
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1305
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1306
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1307
          _min1 = limit;
#line 1307
          _min2 = backing_limit;
#line 1307
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1309
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1311
  return (limit);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long ent ;
  unsigned long dt ;
  unsigned long et ;
  unsigned long nt ;
  unsigned long now ;
  int tmp ;
  int tmp___0 ;
  unsigned long __x ;
  unsigned long __y ;
  unsigned long _min1 ;
  unsigned long _min2 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1316
  mdev = (struct drbd_conf *)data;
#line 1319
  ent = 0UL;
#line 1319
  dt = 0UL;
#line 1322
  tmp = get_net_conf(mdev);
#line 1322
  if (tmp != 0) {
#line 1323
    if ((int )mdev->state.ldv_39979.conn > 8) {
#line 1324
      ent = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
    } else {

    }
#line 1326
    put_net_conf(mdev);
  } else {

  }
#line 1328
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1328
  if (tmp___0 != 0) {
#line 1329
    dt = (unsigned long )(((mdev->ldev)->dc.disk_timeout * 250) / 10);
#line 1330
    put_ldev(mdev);
  } else {

  }
#line 1332
  __x = dt;
#line 1332
  __y = ent;
#line 1332
  if (__x != 0UL) {
#line 1332
    if (__y != 0UL) {
#line 1332
      _min1 = __x;
#line 1332
      _min2 = __y;
#line 1332
      tmp___1 = _min1 < _min2 ? _min1 : _min2;
    } else {
#line 1332
      tmp___1 = __x;
    }
#line 1332
    tmp___2 = tmp___1;
  } else {
#line 1332
    tmp___2 = __y;
  }
#line 1332
  et = tmp___2;
#line 1334
  if (et == 0UL) {
#line 1335
    return;
  } else {

  }
#line 1337
  now = jiffies;
#line 1339
  spin_lock_irq(& mdev->req_lock);
#line 1340
  le = & (mdev->oldest_tle)->requests;
#line 1341
  tmp___3 = list_empty((struct list_head  const  *)le);
#line 1341
  if (tmp___3 != 0) {
#line 1342
    spin_unlock_irq(& mdev->req_lock);
#line 1343
    mod_timer(& mdev->request_timer, now + et);
#line 1344
    return;
  } else {

  }
#line 1347
  le = le->prev;
#line 1348
  __mptr = (struct list_head  const  *)le;
#line 1348
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1368
  if (((ent != 0UL && (req->rq_state & 16UL) != 0UL) && ((1 != 0 && 1 != 0) && (long )(req->start_time + ent) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reconnect_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reconnect_jif + ent) - (long )now < 0L))) {
#line 1369
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1370
    __ns.i = mdev->state.i;
#line 1370
    __ns.ldv_39979.conn = 3U;
#line 1370
    _drbd_set_state(mdev, __ns, 3, 0);
  } else {

  }
#line 1374
  if (((dt != 0UL && (int )req->rq_state & 1) && ((1 != 0 && 1 != 0) && (long )(req->start_time + dt) - (long )now < 0L)) && (((1 == 0 || 1 == 0) || (long )now - (long )mdev->last_reattach_jif < 0L) || ((1 == 0 || 1 == 0) || (long )(mdev->last_reattach_jif + dt) - (long )now < 0L))) {
#line 1375
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing device failed to meet the disk-timeout\n");
#line 1376
    __drbd_chk_io_error____1(mdev, DRBD_FORCE_DETACH, "request_timer_fn");
  } else {

  }
#line 1378
  nt = ((1 == 0 || 1 == 0) || (long )(req->start_time + et) - (long )now >= 0L ? req->start_time : now) + et;
#line 1379
  spin_unlock_irq(& mdev->req_lock);
#line 1380
  mod_timer(& mdev->request_timer, nt);
#line 1381
  return;
}
}
#line 1383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_137(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1388
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1390
  mutex_lock(ldv_func_arg1);
#line 1391
  return;
}
}
#line 1393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1398
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1400
  mutex_unlock(ldv_func_arg1);
#line 1401
  return;
}
}
#line 1403 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_139(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1408
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1410
  mutex_lock(ldv_func_arg1);
#line 1411
  return;
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
int ldv_mutex_trylock_140(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1418
  tmp = mutex_trylock(ldv_func_arg1);
#line 1418
  ldv_func_res = tmp;
#line 1420
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1420
  return (tmp___0);
#line 1422
  return (ldv_func_res);
}
}
#line 1425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_141(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1430
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1432
  mutex_unlock(ldv_func_arg1);
#line 1433
  return;
}
}
#line 1435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_142(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1440
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1442
  mutex_lock(ldv_func_arg1);
#line 1443
  return;
}
}
#line 1445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_143(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1450
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1452
  mutex_unlock(ldv_func_arg1);
#line 1453
  return;
}
}
#line 1455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_144(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1460
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1462
  mutex_lock(ldv_func_arg1);
#line 1463
  return;
}
}
#line 1465 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_145(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1470
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1472
  mutex_unlock(ldv_func_arg1);
#line 1473
  return;
}
}
#line 1475 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_146(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1480
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1482
  mutex_lock(ldv_func_arg1);
#line 1483
  return;
}
}
#line 1485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_147(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1490
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1492
  mutex_unlock(ldv_func_arg1);
#line 1493
  return;
}
}
#line 1495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_lock_148(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1500
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1502
  mutex_lock(ldv_func_arg1);
#line 1503
  return;
}
}
#line 1505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_149(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1510
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1512
  mutex_unlock(ldv_func_arg1);
#line 1513
  return;
}
}
#line 1515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_req.c.prepared"
void ldv_mutex_unlock_150(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1520
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1522
  mutex_unlock(ldv_func_arg1);
#line 1523
  return;
}
}
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __cmpxchg_wrong_size(void) ;
#line 209 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v , int old , int new ) 
{ 
  int __ret ;
  int __old ;
  int __new ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 211
  __old = old;
#line 211
  __new = new;
#line 211
  switch (4UL) {
  case 1UL: 
#line 211
  __ptr = (u8 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgb %2,%1": "=a" (__ret),
                       "+m" (*__ptr): "q" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5490;
  case 2UL: 
#line 211
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgw %2,%1": "=a" (__ret),
                       "+m" (*__ptr___0): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5490;
  case 4UL: 
#line 211
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgl %2,%1": "=a" (__ret),
                       "+m" (*__ptr___1): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5490;
  case 8UL: 
#line 211
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 211
  __asm__  volatile   (".pushsection .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.popsection\n671:\n\tlock; cmpxchgq %2,%1": "=a" (__ret),
                       "+m" (*__ptr___2): "r" (__new), "0" (__old): "memory");
#line 211
  goto ldv_5490;
  default: 
#line 211
  __cmpxchg_wrong_size();
  }
  ldv_5490: ;
#line 211
  return (__ret);
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_168(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_169(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_171(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_173(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_177(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_178(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_170(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_172(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_174(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_176(struct mutex *ldv_func_arg1 ) ;
#line 787 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 789
  return ((bdev->bd_disk)->queue);
}
}
#line 1098 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1100
  retval = 512;
#line 1102
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1103
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1105
  return ((unsigned short )retval);
}
}
#line 1108 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1110
  tmp = bdev_get_queue(bdev);
#line 1110
  tmp___0 = queue_logical_block_size(tmp);
#line 1110
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) ;
#line 1610
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1737
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1747
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1748
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1756
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 1890 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____2(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1894
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1896
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1897
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1897
    if (tmp != 0) {
#line 1898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1899
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1900
      __ns.i = mdev->state.i;
#line 1900
      __ns.ldv_39979.disk = 4U;
#line 1900
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1901
    goto ldv_50242;
  } else {

  }
  case 2: ;
  case 1: 
#line 1926
  drbd_set_flag(mdev, WAS_IO_ERROR);
#line 1927
  if ((unsigned int )df == 0U) {
#line 1928
    drbd_set_flag(mdev, WAS_READ_ERROR);
  } else {

  }
#line 1929
  if ((unsigned int )df == 3U) {
#line 1930
    drbd_set_flag(mdev, FORCE_DETACH);
  } else {

  }
#line 1931
  if ((int )mdev->state.ldv_39979.disk > 2) {
#line 1932
    __ns___0.i = mdev->state.i;
#line 1932
    __ns___0.ldv_39979.disk = 2U;
#line 1932
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1936
  goto ldv_50242;
  }
  ldv_50242: ;
#line 1939
  return;
}
}
#line 1949 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1952
  if (error != 0) {
#line 1954
    tmp = spinlock_check(& mdev->req_lock);
#line 1954
    flags = _raw_spin_lock_irqsave(tmp);
#line 1955
    __drbd_chk_io_error____2(mdev, forcedetach, where);
#line 1956
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1958
  return;
}
}
#line 137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void *drbd_md_get_buffer(struct drbd_conf *mdev ) 
{ 
  int r ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  void *tmp___1 ;

  {
#line 143
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 143
  if (r == 0 || (int )mdev->state.ldv_39979.disk <= 2) {
#line 143
    goto ldv_50542;
  } else {

  }
#line 143
  tmp = get_current();
#line 143
  __wait.flags = 0U;
#line 143
  __wait.private = (void *)tmp;
#line 143
  __wait.func = & autoremove_wake_function;
#line 143
  __wait.task_list.next = & __wait.task_list;
#line 143
  __wait.task_list.prev = & __wait.task_list;
  ldv_50545: 
#line 143
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 143
  r = atomic_cmpxchg(& mdev->md_io_in_use, 0, 1);
#line 143
  if (r == 0 || (int )mdev->state.ldv_39979.disk <= 2) {
#line 143
    goto ldv_50544;
  } else {

  }
#line 143
  schedule();
#line 143
  goto ldv_50545;
  ldv_50544: 
#line 143
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50542: ;
#line 147
  if (r == 0) {
#line 147
    tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 147
    tmp___1 = tmp___0;
  } else {
#line 147
    tmp___1 = 0;
  }
#line 147
  return (tmp___1);
}
}
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_md_put_buffer(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 152
  tmp = atomic_dec_and_test(& mdev->md_io_in_use);
#line 152
  if (tmp != 0) {
#line 153
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 154
  return;
}
}
#line 156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void wait_until_done_or_force_detached(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                       unsigned int *done ) 
{ 
  long dt ;
  long __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 159
  dt = (long )((bdev->dc.disk_timeout * 250) / 10);
#line 160
  if (dt == 0L) {
#line 161
    dt = 9223372036854775807L;
  } else {

  }
#line 163
  __ret = dt;
#line 163
  if (*done == 0U) {
#line 163
    tmp___1 = drbd_test_flag(mdev, FORCE_DETACH);
#line 163
    if (tmp___1 == 0) {
#line 163
      tmp = get_current();
#line 163
      __wait.flags = 0U;
#line 163
      __wait.private = (void *)tmp;
#line 163
      __wait.func = & autoremove_wake_function;
#line 163
      __wait.task_list.next = & __wait.task_list;
#line 163
      __wait.task_list.prev = & __wait.task_list;
      ldv_50558: 
#line 163
      prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 163
      if (*done != 0U) {
#line 163
        goto ldv_50557;
      } else {
#line 163
        tmp___0 = drbd_test_flag(mdev, FORCE_DETACH);
#line 163
        if (tmp___0 != 0) {
#line 163
          goto ldv_50557;
        } else {

        }
      }
#line 163
      __ret = schedule_timeout(__ret);
#line 163
      if (__ret == 0L) {
#line 163
        goto ldv_50557;
      } else {

      }
#line 163
      goto ldv_50558;
      ldv_50557: 
#line 163
      finish_wait(& mdev->misc_wait, & __wait);
    } else {

    }
  } else {

  }
#line 163
  dt = __ret;
#line 165
  if (dt == 0L) {
#line 166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta-data IO operation timed out\n");
#line 167
    drbd_chk_io_error____0(mdev, 1, DRBD_FORCE_DETACH, "wait_until_done_or_force_detached");
  } else {

  }
#line 169
  return;
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 179
  mdev->md_io.done = 0U;
#line 180
  mdev->md_io.error = -19;
#line 182
  if (rw & 1) {
#line 182
    tmp = drbd_test_flag(mdev, MD_NO_FUA);
#line 182
    if (tmp == 0) {
#line 183
      rw = rw | 6144;
    } else {

    }
  } else {

  }
#line 184
  rw = rw | 16;
#line 186
  bio = bio_alloc_drbd(16U);
#line 187
  bio->bi_bdev = bdev->md_bdev;
#line 188
  bio->bi_sector = sector;
#line 189
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 189
  ok = tmp___0 == size;
#line 190
  if (ok == 0) {
#line 191
    goto out;
  } else {

  }
#line 192
  bio->bi_private = (void *)(& mdev->md_io);
#line 193
  bio->bi_end_io = & drbd_md_io_complete;
#line 194
  bio->bi_rw = (unsigned long )rw;
#line 196
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 196
  if (tmp___1 == 0) {
#line 197
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: get_ldev_if_state() == 1 in _drbd_md_sync_page_io()\n");
#line 198
    ok = 0;
#line 199
    goto out;
  } else {

  }
#line 202
  atomic_inc(& bio->bi_cnt);
#line 203
  atomic_inc(& mdev->md_io_in_use);
#line 204
  tmp___2 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 204
  if (tmp___2 != 0) {
#line 205
    bio_endio(bio, -5);
  } else {
#line 207
    submit_bio(rw, bio);
  }
#line 208
  wait_until_done_or_force_detached(mdev, bdev, & mdev->md_io.done);
#line 209
  ok = (int )bio->bi_flags & 1 && mdev->md_io.error == 0;
  out: 
#line 212
  bio_put(bio);
#line 213
  return (ok);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 220
  offset = 0;
#line 221
  iop = mdev->md_io_page;
#line 223
  tmp = atomic_read((atomic_t const   *)(& mdev->md_io_in_use));
#line 223
  if (tmp != 1) {
#line 223
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->md_io_in_use) == 1 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            223);
  } else {

  }
#line 225
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 225
  if (tmp___0 != 0L) {
#line 225
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (225), "i" (12UL));
    ldv_50583: ;
#line 225
    goto ldv_50583;
  } else {

  }
#line 227
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 227
  logical_block_size = (int )tmp___1;
#line 228
  if (logical_block_size == 0) {
#line 229
    logical_block_size = 512;
  } else {

  }
#line 232
  if (logical_block_size != 512) {
#line 233
    mask = logical_block_size / 512 + -1;
#line 234
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 234
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              234);
    } else {

    }
#line 235
    if ((mask + 1) * 512 != logical_block_size) {
#line 235
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              235);
    } else {

    }
#line 236
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 237
    sector = (sector_t )(~ mask) & sector;
#line 238
    iop = mdev->md_io_tmpp;
#line 240
    if (rw & 1) {
#line 243
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 243
      p = tmp___2;
#line 244
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 244
      hp = tmp___3;
#line 246
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 249
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 249
      if (tmp___4 != 0L) {
#line 250
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 253
        return (0);
      } else {

      }
#line 256
      __len = 512UL;
#line 256
      if (__len > 63UL) {
#line 256
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 256
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 260
  tmp___7 = drbd_md_first_sector(bdev);
#line 260
  if (tmp___7 > sector) {
#line 262
    tmp___5 = get_current();
#line 262
    tmp___6 = get_current();
#line 262
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 260
    tmp___8 = drbd_md_last_sector(bdev);
#line 260
    if (tmp___8 < sector) {
#line 262
      tmp___5 = get_current();
#line 262
      tmp___6 = get_current();
#line 262
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 266
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 267
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 267
  if (tmp___9 != 0L) {
#line 268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 270
    return (0);
  } else {

  }
#line 273
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 274
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 274
    p___0 = tmp___10;
#line 275
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 275
    hp___0 = tmp___11;
#line 277
    __len___0 = 512UL;
#line 277
    if (__len___0 > 63UL) {
#line 277
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 277
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 280
  return (ok);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 287
  al_flags = 0UL;
#line 290
  spin_lock_irq(& mdev->al_lock);
#line 291
  tmp = lc_find(mdev->resync, enr / 4U);
#line 292
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 292
  if (tmp___2 != 0L) {
#line 293
    __mptr = (struct lc_element  const  *)tmp;
#line 293
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 294
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 294
    if (tmp___1 != 0) {
#line 295
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 295
      wake = tmp___0 == 0;
#line 296
      spin_unlock_irq(& mdev->al_lock);
#line 297
      if (wake != 0) {
#line 298
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 299
      return (0);
    } else {

    }
  } else {

  }
#line 302
  al_ext = lc_get(mdev->act_log, enr);
#line 303
  al_flags = (mdev->act_log)->flags;
#line 304
  spin_unlock_irq(& mdev->al_lock);
#line 315
  return (al_ext);
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 320
  enr = (unsigned int )(sector >> 13);
#line 324
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 324
  if (tmp <= 0) {
#line 324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            324);
  } else {

  }
#line 326
  al_ext = _al_get(mdev, enr);
#line 326
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 326
    goto ldv_50613;
  } else {

  }
#line 326
  tmp___0 = get_current();
#line 326
  __wait.flags = 0U;
#line 326
  __wait.private = (void *)tmp___0;
#line 326
  __wait.func = & autoremove_wake_function;
#line 326
  __wait.task_list.next = & __wait.task_list;
#line 326
  __wait.task_list.prev = & __wait.task_list;
  ldv_50616: 
#line 326
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 326
  al_ext = _al_get(mdev, enr);
#line 326
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 326
    goto ldv_50615;
  } else {

  }
#line 326
  schedule();
#line 326
  goto ldv_50616;
  ldv_50615: 
#line 326
  finish_wait(& mdev->al_wait, & __wait);
  ldv_50613: ;
#line 328
  if (al_ext->lc_number != enr) {
#line 335
    init_completion(& al_work.event);
#line 336
    al_work.al_ext = al_ext;
#line 337
    al_work.enr = enr;
#line 338
    al_work.old_enr = al_ext->lc_number;
#line 339
    al_work.w.cb = & w_al_write_transaction;
#line 340
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 341
    wait_for_completion(& al_work.event);
#line 343
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 345
    spin_lock_irq(& mdev->al_lock);
#line 346
    lc_changed(mdev->act_log, al_ext);
#line 347
    spin_unlock_irq(& mdev->al_lock);
#line 348
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 350
  return;
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 354
  enr = (unsigned int )(sector >> 13);
#line 358
  tmp = spinlock_check(& mdev->al_lock);
#line 358
  flags = _raw_spin_lock_irqsave(tmp);
#line 360
  extent = lc_find(mdev->act_log, enr);
#line 362
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 363
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 364
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 365
    return;
  } else {

  }
#line 368
  tmp___0 = lc_put(mdev->act_log, extent);
#line 368
  if (tmp___0 == 0U) {
#line 369
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 371
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 372
  return;
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 385
  return (al_enr >> 5);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 394
  return (rs_enr >> 3);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 404
  __mptr = (struct drbd_work  const  *)w;
#line 404
  aw = (struct update_al_work *)__mptr;
#line 405
  updated = aw->al_ext;
#line 406
  new_enr = aw->enr;
#line 407
  evicted = aw->old_enr;
#line 412
  xor_sum = 0U;
#line 414
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 414
  if (tmp___0 == 0) {
#line 415
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.disk);
#line 415
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 418
    complete(& ((struct update_al_work *)w)->event);
#line 419
    return (1);
  } else {

  }
#line 427
  if ((int )mdev->state.ldv_39979.conn <= 9 && evicted != 4294967295U) {
#line 428
    tmp___1 = al_extent_to_bm_page(evicted);
#line 428
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 431
  if ((int )mdev->state.ldv_39979.disk <= 3) {
#line 432
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.disk);
#line 432
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 435
    complete(& ((struct update_al_work *)w)->event);
#line 436
    put_ldev(mdev);
#line 437
    return (1);
  } else {

  }
#line 440
  tmp___3 = drbd_md_get_buffer(mdev);
#line 440
  buffer = (struct al_transaction *)tmp___3;
#line 441
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 442
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk failed while waiting for md_io buffer\n");
#line 443
    complete(& ((struct update_al_work *)w)->event);
#line 444
    put_ldev(mdev);
#line 445
    return (1);
  } else {

  }
#line 448
  buffer->magic = 1728214147U;
#line 449
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 449
  buffer->tr_number = tmp___4;
#line 451
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 451
  n = (int )tmp___5;
#line 453
  tmp___6 = __fswab32((__u32 )n);
#line 453
  buffer->updates[0].pos = tmp___6;
#line 454
  tmp___7 = __fswab32(new_enr);
#line 454
  buffer->updates[0].extent = tmp___7;
#line 456
  xor_sum = xor_sum ^ new_enr;
#line 458
  __min1 = 61;
#line 458
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 458
  mx = __min1 < __min2 ? __min1 : __min2;
#line 460
  i = 0;
#line 460
  goto ldv_50656;
  ldv_50655: 
#line 461
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 462
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 462
  extent_nr = tmp___8->lc_number;
#line 463
  tmp___9 = __fswab32(idx);
#line 463
  buffer->updates[i + 1].pos = tmp___9;
#line 464
  tmp___10 = __fswab32(extent_nr);
#line 464
  buffer->updates[i + 1].extent = tmp___10;
#line 465
  xor_sum = xor_sum ^ extent_nr;
#line 460
  i = i + 1;
  ldv_50656: ;
#line 460
  if (i < mx) {
#line 461
    goto ldv_50655;
  } else {

  }

#line 467
  goto ldv_50659;
  ldv_50658: 
#line 468
  buffer->updates[i + 1].pos = 4294967295U;
#line 469
  buffer->updates[i + 1].extent = 4294967295U;
#line 470
  xor_sum = ~ xor_sum;
#line 467
  i = i + 1;
  ldv_50659: ;
#line 467
  if (i <= 60) {
#line 468
    goto ldv_50658;
  } else {

  }
#line 472
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 473
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 474
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 476
  tmp___11 = __fswab32(xor_sum);
#line 476
  buffer->xor_sum = tmp___11;
#line 478
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 481
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 481
  if (tmp___12 == 0) {
#line 482
    drbd_chk_io_error____0(mdev, 1, DRBD_META_IO_ERROR, "w_al_write_transaction");
  } else {

  }
#line 484
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 484
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 486
    mdev->al_tr_pos = 0;
  } else {

  }
#line 488
  if (mdev->al_tr_pos > 63) {
#line 488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            488);
  } else {

  }
#line 489
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 491
  drbd_md_put_buffer(mdev);
#line 493
  complete(& ((struct update_al_work *)w)->event);
#line 494
  put_ldev(mdev);
#line 496
  return (1);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 515
  xor_sum = 0U;
#line 517
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 521
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 521
  if (tmp == 0) {
#line 522
    return (-1);
  } else {

  }
#line 524
  tmp___0 = __fswab32(b->magic);
#line 524
  rv = tmp___0 == 2205418087U;
#line 526
  i = 0;
#line 526
  goto ldv_50673;
  ldv_50672: 
#line 527
  tmp___1 = __fswab32(b->updates[i].extent);
#line 527
  xor_sum = tmp___1 ^ xor_sum;
#line 526
  i = i + 1;
  ldv_50673: ;
#line 526
  if (i <= 61) {
#line 527
    goto ldv_50672;
  } else {

  }
#line 528
  tmp___2 = __fswab32(b->xor_sum);
#line 528
  rv = (tmp___2 == xor_sum) & rv;
#line 530
  return (rv);
}
}
#line 540 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 546
  active_extents = 0;
#line 547
  transactions = 0;
#line 548
  found_valid = 0;
#line 549
  from = 0;
#line 550
  to = 0;
#line 551
  from_tnr = 0U;
#line 552
  to_tnr = 0U;
#line 555
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 560
  tmp = drbd_md_get_buffer(mdev);
#line 560
  buffer = (struct al_transaction *)tmp;
#line 561
  if ((unsigned long )buffer == (unsigned long )((struct al_transaction *)0)) {
#line 562
    return (0);
  } else {

  }
#line 565
  i = 0;
#line 565
  goto ldv_50693;
  ldv_50692: 
#line 566
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 567
  if (rv == 0) {
#line 568
    goto ldv_50691;
  } else {

  }
#line 569
  if (rv == -1) {
#line 570
    drbd_md_put_buffer(mdev);
#line 571
    return (0);
  } else {

  }
#line 573
  tmp___0 = __fswab32(buffer->tr_number);
#line 573
  cnr = tmp___0;
#line 575
  found_valid = found_valid + 1;
#line 575
  if (found_valid == 1) {
#line 576
    from = i;
#line 577
    to = i;
#line 578
    from_tnr = cnr;
#line 579
    to_tnr = cnr;
#line 580
    goto ldv_50691;
  } else {

  }
#line 582
  if ((int )cnr - (int )from_tnr < 0) {
#line 583
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 583
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              583);
    } else {

    }
#line 584
    from = i;
#line 585
    from_tnr = cnr;
  } else {

  }
#line 587
  if ((int )cnr - (int )to_tnr > 0) {
#line 588
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 588
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              588);
    } else {

    }
#line 589
    to = i;
#line 590
    to_tnr = cnr;
  } else {

  }
  ldv_50691: 
#line 565
  i = i + 1;
  ldv_50693: ;
#line 565
  if (i <= mx) {
#line 566
    goto ldv_50692;
  } else {

  }

#line 594
  if (found_valid == 0) {
#line 595
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 596
    drbd_md_put_buffer(mdev);
#line 597
    return (1);
  } else {

  }
#line 602
  i = from;
  ldv_50708: 
#line 608
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 609
  _b = rv == 0;
#line 609
  if (_b != 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            609);
  } else {

  }
#line 609
  if (_b != 0) {
#line 609
    goto cancel;
  } else {

  }
#line 610
  if (rv == -1) {
#line 611
    drbd_md_put_buffer(mdev);
#line 612
    return (0);
  } else {

  }
#line 615
  tmp___1 = __fswab32(buffer->tr_number);
#line 615
  trn = tmp___1;
#line 617
  spin_lock_irq(& mdev->al_lock);
#line 623
  j = 61;
#line 623
  goto ldv_50705;
  ldv_50704: 
#line 624
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 624
  pos = (int )tmp___2;
#line 625
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 625
  extent_nr = tmp___3;
#line 627
  if (extent_nr == 4294967295U) {
#line 628
    goto ldv_50703;
  } else {

  }
#line 630
  lc_set(mdev->act_log, extent_nr, pos);
#line 631
  active_extents = active_extents + 1;
  ldv_50703: 
#line 623
  j = j - 1;
  ldv_50705: ;
#line 623
  if (j >= 0) {
#line 624
    goto ldv_50704;
  } else {

  }
#line 633
  spin_unlock_irq(& mdev->al_lock);
#line 635
  transactions = transactions + 1;
  cancel: ;
#line 638
  if (i == to) {
#line 639
    goto ldv_50707;
  } else {

  }
#line 640
  i = i + 1;
#line 641
  if (i > mx) {
#line 642
    i = 0;
  } else {

  }
#line 643
  goto ldv_50708;
  ldv_50707: 
#line 645
  mdev->al_tr_number = to_tnr + 1U;
#line 646
  mdev->al_tr_pos = to;
#line 647
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 647
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 649
    mdev->al_tr_pos = 0;
  } else {

  }
#line 652
  drbd_md_put_buffer(mdev);
#line 654
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 657
  return (1);
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 667
  add = 0UL;
#line 671
  tmp___0 = lc_try_lock(mdev->act_log);
#line 671
  if (tmp___0 != 0) {
#line 671
    goto ldv_50717;
  } else {

  }
#line 671
  tmp___1 = get_current();
#line 671
  __wait.flags = 0U;
#line 671
  __wait.private = (void *)tmp___1;
#line 671
  __wait.func = & autoremove_wake_function;
#line 671
  __wait.task_list.next = & __wait.task_list;
#line 671
  __wait.task_list.prev = & __wait.task_list;
  ldv_50720: 
#line 671
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 671
  tmp___2 = lc_try_lock(mdev->act_log);
#line 671
  if (tmp___2 != 0) {
#line 671
    goto ldv_50719;
  } else {

  }
#line 671
  schedule();
#line 671
  goto ldv_50720;
  ldv_50719: 
#line 671
  finish_wait(& mdev->al_wait, & __wait);
  ldv_50717: 
#line 673
  i = 0;
#line 673
  goto ldv_50725;
  ldv_50724: 
#line 674
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 674
  enr = tmp___3->lc_number;
#line 675
  if (enr == 4294967295U) {
#line 676
    goto ldv_50721;
  } else {

  }
#line 677
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 677
  tmp = (int )tmp___4;
#line 678
  descriptor.modname = "drbd";
#line 678
  descriptor.function = "drbd_al_apply_to_bm";
#line 678
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 678
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 678
  descriptor.lineno = 678U;
#line 678
  descriptor.flags = 0U;
#line 678
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 678
  if (tmp___5 != 0L) {
#line 678
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 679
  add = (unsigned long )tmp + add;
  ldv_50721: 
#line 673
  i = i + 1;
  ldv_50725: ;
#line 673
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 674
    goto ldv_50724;
  } else {

  }
#line 682
  lc_unlock(mdev->act_log);
#line 683
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 685
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 685
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 686
  return;
}
}
#line 689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 693
  spin_lock_irq(& mdev->al_lock);
#line 694
  rv = al_ext->refcnt == 0U;
#line 695
  tmp = __builtin_expect(rv != 0, 1L);
#line 695
  if (tmp != 0L) {
#line 696
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 697
  spin_unlock_irq(& mdev->al_lock);
#line 699
  return (rv);
}
}
#line 711 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 716
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 716
  if (tmp == 0) {
#line 716
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            716);
  } else {

  }
#line 718
  i = 0;
#line 718
  goto ldv_50743;
  ldv_50742: 
#line 719
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 720
  if (al_ext->lc_number == 4294967295U) {
#line 721
    goto ldv_50737;
  } else {

  }
#line 722
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 722
  if (tmp___0 != 0) {
#line 722
    goto ldv_50738;
  } else {

  }
#line 722
  tmp___1 = get_current();
#line 722
  __wait.flags = 0U;
#line 722
  __wait.private = (void *)tmp___1;
#line 722
  __wait.func = & autoremove_wake_function;
#line 722
  __wait.task_list.next = & __wait.task_list;
#line 722
  __wait.task_list.prev = & __wait.task_list;
  ldv_50741: 
#line 722
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 722
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 722
  if (tmp___2 != 0) {
#line 722
    goto ldv_50740;
  } else {

  }
#line 722
  schedule();
#line 722
  goto ldv_50741;
  ldv_50740: 
#line 722
  finish_wait(& mdev->al_wait, & __wait);
  ldv_50738: ;
  ldv_50737: 
#line 718
  i = i + 1;
  ldv_50743: ;
#line 718
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 719
    goto ldv_50742;
  } else {

  }
#line 725
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 726
  return;
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 730
  __mptr = (struct drbd_work  const  *)w;
#line 730
  udw = (struct update_odbm_work *)__mptr;
#line 732
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 732
  if (tmp___0 == 0) {
#line 733
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 733
    if (tmp != 0) {
#line 734
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 735
    kfree((void const   *)udw);
#line 736
    return (1);
  } else {

  }
#line 739
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 739
  drbd_bm_write_page(mdev, tmp___1);
#line 740
  put_ldev(mdev);
#line 742
  kfree((void const   *)udw);
#line 744
  tmp___2 = drbd_bm_total_weight(mdev);
#line 744
  if (tmp___2 <= mdev->rs_failed) {
#line 745
    switch ((int )mdev->state.ldv_39979.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 748
    drbd_resync_finished(mdev);
    default: ;
#line 751
    goto ldv_50759;
    }
    ldv_50759: ;
  } else {

  }
#line 754
  drbd_bcast_sync_progress(mdev);
#line 756
  return (1);
}
}
#line 766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___0 ;
  int rs_left ;
  int tmp___1 ;
  void *tmp___2 ;

  {
#line 774
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 774
  if (tmp == 0) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            774);
  } else {

  }
#line 778
  enr = (unsigned int )(sector >> 15);
#line 780
  e = lc_get(mdev->resync, enr);
#line 781
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 782
    __mptr = (struct lc_element  const  *)e;
#line 782
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 783
    if (ext->lce.lc_number == enr) {
#line 784
      if (success != 0) {
#line 785
        ext->rs_left = ext->rs_left - count;
      } else {
#line 787
        ext->rs_failed = ext->rs_failed + count;
      }
#line 788
      if (ext->rs_left < ext->rs_failed) {
#line 789
        tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_39979.conn);
#line 789
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d cstate=%s\n",
                 (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                 count, tmp___0);
#line 802
        ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
      } else {

      }
    } else {
#line 811
      tmp___1 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 811
      rs_left = tmp___1;
#line 812
      if (ext->flags != 0UL) {
#line 813
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 817
        ext->flags = 0UL;
      } else {

      }
#line 819
      if (ext->rs_failed != 0) {
#line 820
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 824
      ext->rs_left = rs_left;
#line 825
      ext->rs_failed = success == 0 ? count : 0;
#line 826
      lc_changed(mdev->resync, & ext->lce);
    }
#line 828
    lc_put(mdev->resync, & ext->lce);
#line 831
    if (ext->rs_left == ext->rs_failed) {
#line 832
      ext->rs_failed = 0;
#line 834
      tmp___2 = kmalloc(32UL, 32U);
#line 834
      udw = (struct update_odbm_work *)tmp___2;
#line 835
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 836
        udw->enr = ext->lce.lc_number;
#line 837
        udw->w.cb = & w_update_odbm;
#line 838
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 840
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 844
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 848
  return;
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 853
  now = jiffies;
#line 854
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 855
  next = (mdev->rs_last_mark + 1) % 8;
#line 856
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 857
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 860
      mdev->rs_mark_time[next] = now;
#line 861
      mdev->rs_mark_left[next] = still_to_go;
#line 862
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 864
  return;
}
}
#line 874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 879
  count = 0UL;
#line 881
  wake_up = 0;
#line 884
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 885
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 887
    return;
  } else {

  }
#line 889
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 890
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 892
  _b = sector >= nr_sectors;
#line 892
  if (_b != 0) {
#line 892
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            892);
  } else {

  }
#line 892
  if (_b != 0) {
#line 892
    return;
  } else {

  }
#line 893
  _b___0 = esector >= nr_sectors;
#line 893
  if (_b___0 != 0) {
#line 893
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            893);
  } else {

  }
#line 893
  if (_b___0 != 0) {
#line 893
    esector = nr_sectors - 1UL;
  } else {

  }
#line 895
  lbnr = (nr_sectors - 1UL) >> 3;
#line 900
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 900
  if (tmp != 0L) {
#line 901
    return;
  } else {

  }
#line 902
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 902
  if (tmp___0 != 0L) {
#line 903
    ebnr = lbnr;
  } else {
#line 905
    ebnr = (esector - 7UL) >> 3;
  }
#line 906
  sbnr = (sector + 7UL) >> 3;
#line 908
  if (sbnr > ebnr) {
#line 909
    return;
  } else {

  }
#line 915
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 915
  count = (unsigned long )tmp___1;
#line 916
  if (count != 0UL) {
#line 916
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 916
    if (tmp___4 != 0) {
#line 917
      tmp___2 = drbd_bm_total_weight(mdev);
#line 917
      drbd_advance_rs_marks(mdev, tmp___2);
#line 918
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 918
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 919
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 920
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 924
      wake_up = 1;
#line 925
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 927
  if (wake_up != 0) {
#line 928
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 929
  return;
}
}
#line 939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 944
  count = 0U;
#line 948
  if (size == 0) {
#line 949
    return (0);
  } else {

  }
#line 951
  if ((size < 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 954
    return (0);
  } else {

  }
#line 957
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 957
  if (tmp == 0) {
#line 958
    return (0);
  } else {

  }
#line 960
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 961
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 963
  _b = sector >= nr_sectors;
#line 963
  if (_b != 0) {
#line 963
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            963);
  } else {

  }
#line 963
  if (_b != 0) {
#line 964
    goto out;
  } else {

  }
#line 965
  _b___0 = esector >= nr_sectors;
#line 965
  if (_b___0 != 0) {
#line 965
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            965);
  } else {

  }
#line 965
  if (_b___0 != 0) {
#line 966
    esector = nr_sectors - 1UL;
  } else {

  }
#line 968
  lbnr = (nr_sectors - 1UL) >> 3;
#line 972
  sbnr = sector >> 3;
#line 973
  ebnr = esector >> 3;
#line 977
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 977
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 978
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 978
  count = (unsigned int )tmp___1;
#line 980
  enr = (unsigned int )(sector >> 15);
#line 981
  e = lc_find(mdev->resync, enr);
#line 982
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 983
    __mptr = (struct lc_element  const  *)e;
#line 983
    __mptr___0 = (struct lc_element  const  *)e;
#line 983
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 984
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 987
  put_ldev(mdev);
#line 989
  return ((int )count);
}
}
#line 993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 997
  wakeup = 0;
#line 1000
  spin_lock_irq(& mdev->al_lock);
#line 1001
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1002
    spin_unlock_irq(& mdev->al_lock);
#line 1003
    return (0);
  } else {

  }
#line 1005
  e = lc_get(mdev->resync, enr);
#line 1006
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1006
    __mptr = (struct lc_element  const  *)e;
#line 1006
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1006
    bm_ext = 0;
  }
#line 1007
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1008
    if (bm_ext->lce.lc_number != enr) {
#line 1009
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1010
      bm_ext->rs_failed = 0;
#line 1011
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1012
      wakeup = 1;
    } else {

    }
#line 1014
    if (bm_ext->lce.refcnt == 1U) {
#line 1015
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1016
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1018
  rs_flags = (mdev->resync)->flags;
#line 1019
  spin_unlock_irq(& mdev->al_lock);
#line 1020
  if (wakeup != 0) {
#line 1021
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1023
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1024
    if ((rs_flags & 4UL) != 0UL) {
#line 1025
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1027
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1027
    if (tmp != 0L) {
#line 1027
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1027), "i" (12UL));
      ldv_50846: ;
#line 1027
      goto ldv_50846;
    } else {

    }
  } else {

  }
#line 1030
  return (bm_ext);
}
}
#line 1033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1036
  rv = 0;
#line 1038
  spin_lock_irq(& mdev->al_lock);
#line 1039
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1039
  if (tmp != 0L) {
#line 1040
    rv = 1;
  } else {
#line 1042
    al_ext = lc_find(mdev->act_log, enr);
#line 1043
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1044
      if (al_ext->refcnt != 0U) {
#line 1045
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1048
  spin_unlock_irq(& mdev->al_lock);
#line 1055
  return (rv);
}
}
#line 1065 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 1067
  enr = (unsigned int )(sector >> 15);
#line 1070
  sa = 200;
  retry: 
#line 1074
  __ret = 0;
#line 1074
  bm_ext = _bme_get(mdev, enr);
#line 1074
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1074
    tmp = get_current();
#line 1074
    __wait.flags = 0U;
#line 1074
    __wait.private = (void *)tmp;
#line 1074
    __wait.func = & autoremove_wake_function;
#line 1074
    __wait.task_list.next = & __wait.task_list;
#line 1074
    __wait.task_list.prev = & __wait.task_list;
    ldv_50867: 
#line 1074
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1074
    bm_ext = _bme_get(mdev, enr);
#line 1074
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1074
      goto ldv_50865;
    } else {

    }
#line 1074
    tmp___0 = get_current();
#line 1074
    tmp___1 = signal_pending(tmp___0);
#line 1074
    if (tmp___1 == 0) {
#line 1074
      schedule();
#line 1074
      goto ldv_50866;
    } else {

    }
#line 1074
    __ret = -512;
#line 1074
    goto ldv_50865;
    ldv_50866: ;
#line 1074
    goto ldv_50867;
    ldv_50865: 
#line 1074
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1074
  sig = __ret;
#line 1076
  if (sig != 0) {
#line 1077
    return (-4);
  } else {

  }
#line 1079
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1079
  if (tmp___2 != 0) {
#line 1080
    return (0);
  } else {

  }
#line 1082
  i = 0;
#line 1082
  goto ldv_50876;
  ldv_50875: 
#line 1083
  __ret___0 = 0;
#line 1083
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1083
  if (tmp___8 != 0) {
#line 1083
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1083
    if (tmp___9 == 0) {
#line 1083
      tmp___3 = get_current();
#line 1083
      __wait___0.flags = 0U;
#line 1083
      __wait___0.private = (void *)tmp___3;
#line 1083
      __wait___0.func = & autoremove_wake_function;
#line 1083
      __wait___0.task_list.next = & __wait___0.task_list;
#line 1083
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_50873: 
#line 1083
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1083
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1083
      if (tmp___4 == 0) {
#line 1083
        goto ldv_50871;
      } else {
#line 1083
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1083
        if (tmp___5 != 0) {
#line 1083
          goto ldv_50871;
        } else {

        }
      }
#line 1083
      tmp___6 = get_current();
#line 1083
      tmp___7 = signal_pending(tmp___6);
#line 1083
      if (tmp___7 == 0) {
#line 1083
        schedule();
#line 1083
        goto ldv_50872;
      } else {

      }
#line 1083
      __ret___0 = -512;
#line 1083
      goto ldv_50871;
      ldv_50872: ;
#line 1083
      goto ldv_50873;
      ldv_50871: 
#line 1083
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 1083
  sig = __ret___0;
#line 1087
  if (sig != 0) {
#line 1087
    goto _L;
  } else {
#line 1087
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1087
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 1088
      spin_lock_irq(& mdev->al_lock);
#line 1089
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 1089
      if (tmp___10 == 0U) {
#line 1090
        bm_ext->flags = 0UL;
#line 1091
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 1092
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 1094
      spin_unlock_irq(& mdev->al_lock);
#line 1095
      if (sig != 0) {
#line 1096
        return (-4);
      } else {

      }
#line 1097
      tmp___11 = schedule_timeout_interruptible(25L);
#line 1097
      if (tmp___11 != 0L) {
#line 1098
        return (-4);
      } else {

      }
#line 1099
      if (sa != 0) {
#line 1099
        sa = sa - 1;
#line 1099
        if (sa == 0) {
#line 1100
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 1102
      goto retry;
    } else {

    }
  }
#line 1082
  i = i + 1;
  ldv_50876: ;
#line 1082
  if (i <= 3) {
#line 1083
    goto ldv_50875;
  } else {

  }
#line 1105
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1106
  return (0);
}
}
#line 1118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1120
  enr = (unsigned int )(sector >> 15);
#line 1121
  al_enr = enr * 4U;
#line 1126
  spin_lock_irq(& mdev->al_lock);
#line 1127
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1141
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1142
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1142
      __mptr = (struct lc_element  const  *)e;
#line 1142
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1142
      bm_ext = 0;
    }
#line 1143
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1144
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1144
      if (tmp != 0) {
#line 1144
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1144);
      } else {

      }
#line 1145
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1145
      if (tmp___0 == 0) {
#line 1145
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1145);
      } else {

      }
#line 1146
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1147
      mdev->resync_wenr = 4294967295U;
#line 1148
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1148
      if (tmp___1 == 0U) {
#line 1149
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1150
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1152
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1156
  e = lc_try_get(mdev->resync, enr);
#line 1157
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1157
    __mptr___0 = (struct lc_element  const  *)e;
#line 1157
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1157
    bm_ext = 0;
  }
#line 1158
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1159
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1159
    if (tmp___2 != 0) {
#line 1160
      goto proceed;
    } else {

    }
#line 1161
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1161
    if (tmp___3 == 0) {
#line 1162
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1168
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1169
      if (bm_ext->lce.refcnt == 0U) {
#line 1169
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1169);
      } else {

      }
    }
#line 1171
    goto check_al;
  } else {
#line 1174
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1175
      goto try_again;
    } else {

    }
#line 1177
    e = lc_get(mdev->resync, enr);
#line 1178
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1178
      __mptr___1 = (struct lc_element  const  *)e;
#line 1178
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1178
      bm_ext = 0;
    }
#line 1179
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1180
      rs_flags = (mdev->resync)->flags;
#line 1181
      if ((rs_flags & 4UL) != 0UL) {
#line 1182
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1184
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1184
      if (tmp___4 != 0L) {
#line 1184
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1184), "i" (12UL));
        ldv_50897: ;
#line 1184
        goto ldv_50897;
      } else {

      }
#line 1185
      goto try_again;
    } else {

    }
#line 1187
    if (bm_ext->lce.lc_number != enr) {
#line 1188
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1189
      bm_ext->rs_failed = 0;
#line 1190
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1191
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1192
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1192
      if (tmp___5 != 0) {
#line 1192
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1192);
      } else {

      }
    } else {

    }
#line 1194
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1195
    if (bm_ext->lce.refcnt != 1U) {
#line 1195
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1195);
    } else {

    }
#line 1196
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1197
    goto check_al;
  }
  check_al: 
#line 1200
  i = 0;
#line 1200
  goto ldv_50899;
  ldv_50898: 
#line 1201
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1201
  if (tmp___6 != 0L) {
#line 1202
    goto try_again;
  } else {

  }
#line 1203
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1203
  if (tmp___7 != 0) {
#line 1204
    goto try_again;
  } else {

  }
#line 1200
  i = i + 1;
  ldv_50899: ;
#line 1200
  if (i <= 3) {
#line 1201
    goto ldv_50898;
  } else {

  }
#line 1206
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1208
  mdev->resync_wenr = 4294967295U;
#line 1209
  spin_unlock_irq(& mdev->al_lock);
#line 1210
  return (0);
  try_again: ;
#line 1213
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1214
    mdev->resync_wenr = enr;
  } else {

  }
#line 1215
  spin_unlock_irq(& mdev->al_lock);
#line 1216
  return (-11);
}
}
#line 1219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1221
  enr = (unsigned int )(sector >> 15);
#line 1226
  tmp = spinlock_check(& mdev->al_lock);
#line 1226
  flags = _raw_spin_lock_irqsave(tmp);
#line 1227
  e = lc_find(mdev->resync, enr);
#line 1228
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1228
    __mptr = (struct lc_element  const  *)e;
#line 1228
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1228
    bm_ext = 0;
  }
#line 1229
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1230
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1231
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1231
    if (tmp___0 != 0) {
#line 1232
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1233
    return;
  } else {

  }
#line 1236
  if (bm_ext->lce.refcnt == 0U) {
#line 1237
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1238
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1241
    return;
  } else {

  }
#line 1244
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1244
  if (tmp___1 == 0U) {
#line 1245
    bm_ext->flags = 0UL;
#line 1246
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1247
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1250
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1251
  return;
}
}
#line 1257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1259
  spin_lock_irq(& mdev->al_lock);
#line 1261
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1261
  if (tmp != 0) {
#line 1262
    lc_reset(mdev->resync);
#line 1263
    put_ldev(mdev);
  } else {

  }
#line 1265
  mdev->resync_locked = 0U;
#line 1266
  mdev->resync_wenr = 4294967295U;
#line 1267
  spin_unlock_irq(& mdev->al_lock);
#line 1268
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1269
  return;
}
}
#line 1278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1284
  spin_lock_irq(& mdev->al_lock);
#line 1286
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1286
  if (tmp___3 != 0) {
#line 1288
    i = 0;
#line 1288
    goto ldv_50928;
    ldv_50927: 
#line 1289
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1290
    __mptr = (struct lc_element  const  *)e;
#line 1290
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1291
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1292
      goto ldv_50926;
    } else {

    }
#line 1293
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1294
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1297
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1297
      if (tmp != 0) {
#line 1297
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1297);
      } else {

      }
#line 1298
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1298
      if (tmp___0 == 0) {
#line 1298
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
                1298);
      } else {

      }
#line 1299
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1300
      mdev->resync_wenr = 4294967295U;
#line 1301
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1303
    if (bm_ext->lce.refcnt != 0U) {
#line 1304
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1306
      put_ldev(mdev);
#line 1307
      spin_unlock_irq(& mdev->al_lock);
#line 1308
      return (-11);
    } else {

    }
#line 1310
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1310
    if (tmp___1 != 0) {
#line 1310
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1310);
    } else {

    }
#line 1311
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1311
    if (tmp___2 != 0) {
#line 1311
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1311);
    } else {

    }
#line 1312
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_50926: 
#line 1288
    i = i + 1;
    ldv_50928: ;
#line 1288
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1289
      goto ldv_50927;
    } else {

    }

#line 1314
    if ((mdev->resync)->used != 0U) {
#line 1314
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
              1314);
    } else {

    }
#line 1315
    put_ldev(mdev);
  } else {

  }
#line 1317
  spin_unlock_irq(& mdev->al_lock);
#line 1318
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1320
  return (0);
}
}
#line 1329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1335
  wake_up = 0;
#line 1337
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1340
    return;
  } else {

  }
#line 1342
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1343
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1345
  _b = sector >= nr_sectors;
#line 1345
  if (_b != 0) {
#line 1345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1345);
  } else {

  }
#line 1345
  if (_b != 0) {
#line 1345
    return;
  } else {

  }
#line 1346
  _b___0 = esector >= nr_sectors;
#line 1346
  if (_b___0 != 0) {
#line 1346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared",
            1346);
  } else {

  }
#line 1346
  if (_b___0 != 0) {
#line 1346
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1348
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1353
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1353
  if (tmp != 0L) {
#line 1354
    return;
  } else {

  }
#line 1355
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1355
  if (tmp___0 != 0L) {
#line 1356
    ebnr = lbnr;
  } else {
#line 1358
    ebnr = (esector - 7UL) >> 3;
  }
#line 1359
  sbnr = (sector + 7UL) >> 3;
#line 1361
  if (sbnr > ebnr) {
#line 1362
    return;
  } else {

  }
#line 1368
  spin_lock_irq(& mdev->al_lock);
#line 1369
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1369
  count = (unsigned long )tmp___1;
#line 1370
  if (count != 0UL) {
#line 1371
    mdev->rs_failed = mdev->rs_failed + count;
#line 1373
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1373
    if (tmp___2 != 0) {
#line 1374
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1375
      put_ldev(mdev);
    } else {

    }
#line 1380
    wake_up = 1;
  } else {

  }
#line 1382
  spin_unlock_irq(& mdev->al_lock);
#line 1383
  if (wake_up != 0) {
#line 1384
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1385
  return;
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_165(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1392
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 1394
  mutex_lock(ldv_func_arg1);
#line 1395
  return;
}
}
#line 1397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_166(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1402
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 1404
  mutex_unlock(ldv_func_arg1);
#line 1405
  return;
}
}
#line 1407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_167(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1412
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 1414
  mutex_lock(ldv_func_arg1);
#line 1415
  return;
}
}
#line 1417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
int ldv_mutex_trylock_168(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 1422
  tmp = mutex_trylock(ldv_func_arg1);
#line 1422
  ldv_func_res = tmp;
#line 1424
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 1424
  return (tmp___0);
#line 1426
  return (ldv_func_res);
}
}
#line 1429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_169(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1434
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 1436
  mutex_unlock(ldv_func_arg1);
#line 1437
  return;
}
}
#line 1439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_170(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1444
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1446
  mutex_lock(ldv_func_arg1);
#line 1447
  return;
}
}
#line 1449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_171(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1454
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1456
  mutex_unlock(ldv_func_arg1);
#line 1457
  return;
}
}
#line 1459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_172(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1464
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1466
  mutex_lock(ldv_func_arg1);
#line 1467
  return;
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_173(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1474
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 1476
  mutex_unlock(ldv_func_arg1);
#line 1477
  return;
}
}
#line 1479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_174(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1484
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1486
  mutex_lock(ldv_func_arg1);
#line 1487
  return;
}
}
#line 1489 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_175(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1494
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 1496
  mutex_unlock(ldv_func_arg1);
#line 1497
  return;
}
}
#line 1499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_lock_176(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1504
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1506
  mutex_lock(ldv_func_arg1);
#line 1507
  return;
}
}
#line 1509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_177(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1514
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1516
  mutex_unlock(ldv_func_arg1);
#line 1517
  return;
}
}
#line 1519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_actlog.c.prepared"
void ldv_mutex_unlock_178(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 1524
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 1526
  mutex_unlock(ldv_func_arg1);
#line 1527
  return;
}
}
#line 77 "include/uapi/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 80 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 255 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 257
  tmp = cpumask_check(cpu);
#line 257
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 258
  return;
}
}
#line 314 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 316
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 317
  return;
}
}
#line 459 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 461
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 461
  return ((unsigned int )tmp);
}
}
#line 653
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 655
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_196(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_199(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_201(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_206(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_208(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_211(struct mutex *ldv_func_arg1 ) ;
#line 212
void ldv_mutex_unlock_212(struct mutex *ldv_func_arg1 ) ;
#line 216
void ldv_mutex_unlock_214(struct mutex *ldv_func_arg1 ) ;
#line 220
void ldv_mutex_unlock_216(struct mutex *ldv_func_arg1 ) ;
#line 224
void ldv_mutex_unlock_218(struct mutex *ldv_func_arg1 ) ;
#line 228
void ldv_mutex_unlock_220(struct mutex *ldv_func_arg1 ) ;
#line 232
void ldv_mutex_unlock_222(struct mutex *ldv_func_arg1 ) ;
#line 236
void ldv_mutex_unlock_224(struct mutex *ldv_func_arg1 ) ;
#line 240
void ldv_mutex_unlock_226(struct mutex *ldv_func_arg1 ) ;
#line 244
void ldv_mutex_unlock_228(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_198(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_200(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_202(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_204(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_207(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_209(struct mutex *ldv_func_arg1 ) ;
#line 42
void ldv_mutex_lock_210(struct mutex *ldv_func_arg1 ) ;
#line 46
void ldv_mutex_lock_213(struct mutex *ldv_func_arg1 ) ;
#line 50
void ldv_mutex_lock_215(struct mutex *ldv_func_arg1 ) ;
#line 54
void ldv_mutex_lock_217(struct mutex *ldv_func_arg1 ) ;
#line 58
void ldv_mutex_lock_219(struct mutex *ldv_func_arg1 ) ;
#line 62
void ldv_mutex_lock_221(struct mutex *ldv_func_arg1 ) ;
#line 66
void ldv_mutex_lock_223(struct mutex *ldv_func_arg1 ) ;
#line 70
void ldv_mutex_lock_225(struct mutex *ldv_func_arg1 ) ;
#line 74
void ldv_mutex_lock_227(struct mutex *ldv_func_arg1 ) ;
#line 95
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) ;
#line 99
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) ;
#line 135
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 139
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___2(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6382;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6382;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6382;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6382;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_6382: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 94 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , unsigned int  , char const   * ,
                           struct lock_class_key * ) ;
#line 175
extern int del_timer(struct timer_list * ) ;
#line 205 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 205
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 205
  return (tmp);
}
}
#line 2047 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2048
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2049
extern struct block_device *bdget(dev_t  ) ;
#line 2054
extern void bdput(struct block_device * ) ;
#line 2097
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1866 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2147
extern int wake_up_process(struct task_struct * ) ;
#line 246 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 270
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 125 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 128
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 13 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 14
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 410 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 415
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 609
extern struct gendisk *alloc_disk(int  ) ;
#line 611
extern void put_disk(struct gendisk * ) ;
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 33
extern void mempool_destroy(mempool_t * ) ;
#line 41
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 42
extern void mempool_free_slab(void * , void * ) ;
#line 66
extern void *mempool_alloc_pages(gfp_t  , void * ) ;
#line 67
extern void mempool_free_pages(void * , void * ) ;
#line 68 "include/linux/mempool.h"
__inline static mempool_t *mempool_create_page_pool(int min_nr , int order ) 
{ 
  mempool_t *tmp ;

  {
#line 70
  tmp = mempool_create(min_nr, & mempool_alloc_pages, & mempool_free_pages, (void *)((long )order));
#line 70
  return (tmp);
}
}
#line 213 "include/linux/bio.h"
extern void bioset_free(struct bio_set * ) ;
#line 895 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 896
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 897
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 899
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 932
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 938
extern void blk_queue_flush(struct request_queue * , unsigned int  ) ;
#line 949
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_50147: ;
#line 593
    goto ldv_50147;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_50162: ;
#line 618
    goto ldv_50162;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock___0(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1198
  ldv_mutex_lock_204(& mdev->data.mutex);
#line 1201
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1201
  if (tmp != 0L) {
#line 1202
    ldv_mutex_unlock_205(& mdev->data.mutex);
#line 1203
    return (0);
  } else {

  }
#line 1205
  return (1);
}
}
#line 1208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock___0(struct drbd_conf *mdev ) 
{ 


  {
#line 1210
  ldv_mutex_unlock_206(& mdev->data.mutex);
#line 1211
  return;
}
}
#line 1232
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1246
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1252
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1257
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1263
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1267
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1270
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1306
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1308
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1313
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1320
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1321
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1322
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1324
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1330
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1531 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1532 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1533 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1535 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1536 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1551 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1552 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1553 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1554 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1562 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_md_io_page_pool  ;
#line 1566 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bio_set *drbd_md_io_bio_set  ;
#line 1572
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1573
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1575 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1585
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1586
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1753
void drbd_nl_cleanup(void) ;
#line 1754
int drbd_nl_init(void) ;
#line 1755
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1840 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1842
  tmp = drbd_test_and_set_flag(mdev, CLUSTER_ST_CHANGE);
#line 1842
  if (tmp == 0) {
#line 1842
    goto ldv_51288;
  } else {

  }
#line 1842
  tmp___0 = get_current();
#line 1842
  __wait.flags = 0U;
#line 1842
  __wait.private = (void *)tmp___0;
#line 1842
  __wait.func = & autoremove_wake_function;
#line 1842
  __wait.task_list.next = & __wait.task_list;
#line 1842
  __wait.task_list.prev = & __wait.task_list;
  ldv_51291: 
#line 1842
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1842
  tmp___1 = drbd_test_and_set_flag(mdev, CLUSTER_ST_CHANGE);
#line 1842
  if (tmp___1 == 0) {
#line 1842
    goto ldv_51290;
  } else {

  }
#line 1842
  schedule();
#line 1842
  goto ldv_51291;
  ldv_51290: 
#line 1842
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51288: ;
#line 1845
  return;
}
}
#line 1890 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , enum drbd_force_detach_flags df ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1894
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1896
  if ((unsigned int )df == 0U || (unsigned int )df == 1U) {
#line 1897
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1897
    if (tmp != 0) {
#line 1898
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1899
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1900
      __ns.i = mdev->state.i;
#line 1900
      __ns.ldv_39979.disk = 4U;
#line 1900
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1901
    goto ldv_51321;
  } else {

  }
  case 2: ;
  case 1: 
#line 1926
  drbd_set_flag(mdev, WAS_IO_ERROR);
#line 1927
  if ((unsigned int )df == 0U) {
#line 1928
    drbd_set_flag(mdev, WAS_READ_ERROR);
  } else {

  }
#line 1929
  if ((unsigned int )df == 3U) {
#line 1930
    drbd_set_flag(mdev, FORCE_DETACH);
  } else {

  }
#line 1931
  if ((int )mdev->state.ldv_39979.disk > 2) {
#line 1932
    __ns___0.i = mdev->state.i;
#line 1932
    __ns___0.ldv_39979.disk = 2U;
#line 1932
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1933
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1936
  goto ldv_51321;
  }
  ldv_51321: ;
#line 1939
  return;
}
}
#line 1949 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , enum drbd_force_detach_flags forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1952
  if (error != 0) {
#line 1954
    tmp = spinlock_check(& mdev->req_lock);
#line 1954
    flags = _raw_spin_lock_irqsave(tmp);
#line 1955
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1956
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1958
  return;
}
}
#line 2011 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 2014
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 2018
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 2018
  if (tmp___1 != 0UL) {
#line 2018
    __min1 = 2251799813685248UL;
#line 2018
    tmp___0 = drbd_md_first_sector(bdev);
#line 2018
    __min2 = tmp___0;
#line 2018
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 2018
    s = 0UL;
  }
#line 2021
  goto ldv_51362;
  case -2: 
#line 2023
  __min1___0 = 2251799813685248UL;
#line 2023
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 2023
  __min2___0 = tmp___2;
#line 2023
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2026
  __min1___1 = s;
#line 2026
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 2026
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 2029
  goto ldv_51362;
  default: 
#line 2031
  __min1___2 = 8587575296UL;
#line 2031
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 2031
  __min2___2 = tmp___3;
#line 2031
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51362: ;
#line 2034
  return (s);
}
}
#line 2042 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 2045
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 2047
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 2053
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2054
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 2054
    if (tmp != 0) {
#line 2055
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 2056
      dump_stack();
    } else {

    }
#line 2058
    return (0UL);
  } else {

  }
#line 2060
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 2060
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 2063
  return (0UL);
  }
}
}
#line 2125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2127
  _drbd_thread_stop(thi, 0, 0);
#line 2128
  return;
}
}
#line 2130 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2132
  _drbd_thread_stop(thi, 1, 0);
#line 2133
  return;
}
}
#line 2347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2349
  s = mdev->state;
#line 2354
  switch ((unsigned int )s.ldv_39979.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2379
  goto ldv_51493;
  case 13U: ;
#line 2383
  if (mdev->agreed_pro_version <= 95) {
#line 2384
    return (0);
  } else {

  }
#line 2385
  goto ldv_51493;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2392
  return (0);
  }
  ldv_51493: ;
#line 2395
  switch ((unsigned int )s.ldv_39979.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
  case 2U: ;
#line 2403
  goto ldv_51504;
  case 1U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2411
  return (0);
  }
  ldv_51504: ;
#line 2414
  return (1);
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2424
  tmp = drbd_get_max_buffers(mdev);
#line 2424
  mxb = tmp;
#line 2426
  tmp___0 = is_susp(mdev->state);
#line 2426
  if (tmp___0 != 0) {
#line 2427
    return (0);
  } else {

  }
#line 2428
  tmp___1 = drbd_test_flag(mdev, SUSPEND_IO);
#line 2428
  if (tmp___1 != 0) {
#line 2429
    return (0);
  } else {

  }
#line 2436
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2436
  if (tmp___2 == 0) {
#line 2437
    return (0);
  } else {

  }
#line 2441
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2441
  if (tmp___3 > mxb) {
#line 2442
    return (0);
  } else {

  }
#line 2443
  tmp___4 = drbd_test_flag(mdev, BITMAP_IO);
#line 2443
  if (tmp___4 != 0) {
#line 2444
    return (0);
  } else {

  }
#line 2445
  return (1);
}
}
#line 2527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2529
  sk = (mdev->data.socket)->sk;
#line 2530
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2531
    drbd_set_flag(mdev, NET_CONGESTED);
  } else {

  }
#line 2532
  return;
}
}
#line 2534 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2541
  return (0);
}
}
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_51758;
  ldv_51757: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_51758: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_51757;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 144
int drbd_init(void) ;
#line 145
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 146
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 147
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 148
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 150
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 151
static void md_sync_timer_fn(unsigned long data ) ;
#line 152
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 153
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 154
static void _tl_clear(struct drbd_conf *mdev ) ;
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 200
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 231 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 231
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct bio *bio_alloc_drbd(gfp_t gfp_mask ) 
{ 
  struct bio *tmp ;
  struct bio *tmp___0 ;

  {
#line 239
  if ((unsigned long )drbd_md_io_bio_set == (unsigned long )((struct bio_set *)0)) {
#line 240
    tmp = bio_alloc(gfp_mask, 1U);
#line 240
    return (tmp);
  } else {

  }
#line 242
  tmp___0 = bio_alloc_bioset(gfp_mask, 1, drbd_md_io_bio_set);
#line 242
  return (tmp___0);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 279
  tmp = kmalloc(56UL, 208U);
#line 279
  b = (struct drbd_tl_epoch *)tmp;
#line 280
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 281
    return (0);
  } else {

  }
#line 282
  INIT_LIST_HEAD(& b->requests);
#line 283
  INIT_LIST_HEAD(& b->w.list);
#line 284
  b->next = 0;
#line 285
  b->br_number = 4711U;
#line 286
  b->n_writes = 0;
#line 287
  b->w.cb = 0;
#line 289
  mdev->oldest_tle = b;
#line 290
  mdev->newest_tle = b;
#line 291
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 292
  INIT_LIST_HEAD(& mdev->barrier_acked_requests);
#line 294
  mdev->tl_hash = 0;
#line 295
  mdev->tl_hash_s = 0U;
#line 297
  return (1);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 302
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 302
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            302);
  } else {

  }
#line 303
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 303
  if (tmp == 0) {
#line 303
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            303);
  } else {

  }
#line 304
  kfree((void const   *)mdev->oldest_tle);
#line 305
  mdev->oldest_tle = 0;
#line 306
  kfree((void const   *)mdev->unused_spare_tle);
#line 307
  mdev->unused_spare_tle = 0;
#line 308
  kfree((void const   *)mdev->tl_hash);
#line 309
  mdev->tl_hash = 0;
#line 310
  mdev->tl_hash_s = 0U;
#line 311
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 324
  INIT_LIST_HEAD(& new->requests);
#line 325
  INIT_LIST_HEAD(& new->w.list);
#line 326
  new->w.cb = 0;
#line 327
  new->next = 0;
#line 328
  new->n_writes = 0;
#line 330
  newest_before = mdev->newest_tle;
#line 331
  new->br_number = newest_before->br_number + 1U;
#line 332
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 333
    (mdev->newest_tle)->next = new;
#line 334
    mdev->newest_tle = new;
  } else {

  }
#line 336
  return;
}
}
#line 348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 355
  spin_lock_irq(& mdev->req_lock);
#line 357
  b = mdev->oldest_tle;
#line 360
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 361
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 363
    goto bail;
  } else {

  }
#line 365
  if (b->br_number != barrier_nr) {
#line 366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 368
    goto bail;
  } else {

  }
#line 370
  if ((unsigned int )b->n_writes != set_size) {
#line 371
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 373
    goto bail;
  } else {

  }
#line 377
  le = b->requests.next;
#line 377
  tle = le->next;
#line 377
  goto ldv_51993;
  ldv_51992: 
#line 378
  __mptr = (struct list_head  const  *)le;
#line 378
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 379
  _req_mod(r, barrier_acked);
#line 377
  le = tle;
#line 377
  tle = le->next;
  ldv_51993: ;
#line 377
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 378
    goto ldv_51992;
  } else {

  }
#line 394
  list_splice_init(& b->requests, & mdev->barrier_acked_requests);
#line 396
  nob = b->next;
#line 397
  tmp = drbd_test_and_clear_flag(mdev, CREATE_BARRIER);
#line 397
  if (tmp != 0) {
#line 398
    _tl_add_barrier(mdev, b);
#line 399
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 400
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 404
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 404
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              404);
    } else {

    }
#line 405
    mdev->oldest_tle = nob;
#line 406
    kfree((void const   *)b);
  }
#line 409
  spin_unlock_irq(& mdev->req_lock);
#line 410
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 410
  if (tmp___0 != 0) {
#line 410
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 410
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
  if (tmp___2 < 0) {
#line 410
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 410, tmp___1);
  } else {

  }
#line 412
  return;
  bail: 
#line 415
  spin_unlock_irq(& mdev->req_lock);
#line 416
  val.i = 0U;
#line 416
  val.ldv_39979.conn = 6U;
#line 416
  mask.i = 0U;
#line 416
  mask.ldv_39979.conn = 31U;
#line 416
  drbd_force_state(mdev, mask, val);
#line 418
  return;
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 435
  b = mdev->oldest_tle;
#line 436
  pn = & mdev->oldest_tle;
#line 437
  goto ldv_52028;
  ldv_52027: 
#line 438
  n_writes = 0;
#line 439
  n_reads = 0;
#line 440
  INIT_LIST_HEAD(& carry_reads);
#line 441
  le = b->requests.next;
#line 441
  tle = le->next;
#line 441
  goto ldv_52020;
  ldv_52019: 
#line 442
  __mptr = (struct list_head  const  *)le;
#line 442
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 443
  rv = _req_mod(req, what);
#line 445
  n_writes = (rv & 1) + n_writes;
#line 446
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 441
  le = tle;
#line 441
  tle = le->next;
  ldv_52020: ;
#line 441
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 442
    goto ldv_52019;
  } else {

  }
#line 448
  tmp = b->next;
#line 450
  if (n_writes != 0) {
#line 451
    if ((unsigned int )what == 24U) {
#line 452
      b->n_writes = n_writes;
#line 453
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 454
        b->w.cb = & w_send_barrier;
#line 455
        inc_ap_pending(mdev);
#line 456
        drbd_set_flag(mdev, CREATE_BARRIER);
      } else {

      }
#line 459
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 461
    pn = & b->next;
  } else {
#line 463
    if (n_reads != 0) {
#line 464
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 467
    list_del(& b->requests);
#line 472
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 473
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 473
      if (tmp___0 != 0) {
#line 473
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 473
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 473
      if (tmp___2 < 0) {
#line 473
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 473
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 473, tmp___1);
      } else {

      }
    } else {

    }
#line 475
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 477
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 477
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
                477);
      } else {

      }
#line 478
      INIT_LIST_HEAD(& b->requests);
#line 479
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 480
      INIT_LIST_HEAD(& b->w.list);
#line 481
      b->w.cb = 0;
#line 482
      b->br_number = random32();
#line 483
      b->n_writes = 0;
#line 485
      *pn = b;
#line 486
      goto ldv_52026;
    } else {

    }
#line 488
    *pn = tmp;
#line 489
    kfree((void const   *)b);
  }
#line 491
  b = tmp;
#line 492
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_52028: ;
#line 437
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 438
    goto ldv_52027;
  } else {

  }
  ldv_52026: 
#line 498
  le = mdev->barrier_acked_requests.next;
#line 498
  tle = le->next;
#line 498
  goto ldv_52032;
  ldv_52031: 
#line 499
  __mptr___0 = (struct list_head  const  *)le;
#line 499
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 500
  _req_mod(req, what);
#line 498
  le = tle;
#line 498
  tle = le->next;
  ldv_52032: ;
#line 498
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 499
    goto ldv_52031;
  } else {

  }

#line 503
  return;
}
}
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 


  {
#line 515
  spin_lock_irq(& mdev->req_lock);
#line 516
  _tl_clear(mdev);
#line 517
  spin_unlock_irq(& mdev->req_lock);
#line 518
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 525
  _tl_restart(mdev, connection_lost_while_pending);
#line 528
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 528
  if (tmp == 0) {
#line 528
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            528);
  } else {

  }
#line 531
  le = mdev->out_of_sequence_requests.next;
#line 531
  tle = le->next;
#line 531
  goto ldv_52046;
  ldv_52045: 
#line 532
  __mptr = (struct list_head  const  *)le;
#line 532
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 535
  _req_mod(r, connection_lost_while_pending);
#line 531
  le = tle;
#line 531
  tle = le->next;
  ldv_52046: ;
#line 531
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 532
    goto ldv_52045;
  } else {

  }
#line 539
  drbd_clear_flag(mdev, CREATE_BARRIER);
#line 541
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 542
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 547
  spin_lock_irq(& mdev->req_lock);
#line 548
  _tl_restart(mdev, what);
#line 549
  spin_unlock_irq(& mdev->req_lock);
#line 550
  return;
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void tl_abort_disk_io(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *req ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;

  {
#line 562
  spin_lock_irq(& mdev->req_lock);
#line 563
  b = mdev->oldest_tle;
#line 564
  goto ldv_52066;
  ldv_52065: 
#line 565
  le = b->requests.next;
#line 565
  tle = le->next;
#line 565
  goto ldv_52063;
  ldv_52062: 
#line 566
  __mptr = (struct list_head  const  *)le;
#line 566
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 567
  if ((req->rq_state & 1UL) == 0UL) {
#line 568
    goto ldv_52061;
  } else {

  }
#line 569
  _req_mod(req, abort_disk_io);
  ldv_52061: 
#line 565
  le = tle;
#line 565
  tle = le->next;
  ldv_52063: ;
#line 565
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 566
    goto ldv_52062;
  } else {

  }
#line 571
  b = b->next;
  ldv_52066: ;
#line 564
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 565
    goto ldv_52065;
  } else {

  }
#line 574
  le = mdev->barrier_acked_requests.next;
#line 574
  tle = le->next;
#line 574
  goto ldv_52072;
  ldv_52071: 
#line 575
  __mptr___0 = (struct list_head  const  *)le;
#line 575
  req = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 576
  if ((req->rq_state & 1UL) == 0UL) {
#line 577
    goto ldv_52070;
  } else {

  }
#line 578
  _req_mod(req, abort_disk_io);
  ldv_52070: 
#line 574
  le = tle;
#line 574
  tle = le->next;
  ldv_52072: ;
#line 574
  if ((unsigned long )(& mdev->barrier_acked_requests) != (unsigned long )le) {
#line 575
    goto ldv_52071;
  } else {

  }
#line 581
  spin_unlock_irq(& mdev->req_lock);
#line 582
  return;
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 593
  return (((((int )os.ldv_39979.conn > 9 && (int )ns.ldv_39979.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U))) || ((int )os.ldv_39979.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 610
  tmp = spinlock_check(& mdev->req_lock);
#line 610
  flags = _raw_spin_lock_irqsave(tmp);
#line 611
  os = mdev->state;
#line 612
  ns.i = (os.i & ~ mask.i) | val.i;
#line 613
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 614
  ns = mdev->state;
#line 615
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 617
  return (rv);
}
}
#line 626 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 629
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 630
  return;
}
}
#line 632
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 633
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 644
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) ;
#line 646
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 657
  tmp = drbd_test_and_clear_flag(mdev, CL_ST_CHG_SUCCESS);
#line 657
  if (tmp != 0) {
#line 658
    return (SS_CW_SUCCESS);
  } else {

  }
#line 660
  tmp___0 = drbd_test_and_clear_flag(mdev, CL_ST_CHG_FAIL);
#line 660
  if (tmp___0 != 0) {
#line 661
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 663
  rv = SS_UNKNOWN_ERROR;
#line 664
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 664
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 665
  os = mdev->state;
#line 666
  ns.i = (os.i & ~ mask.i) | val.i;
#line 667
  ns = sanitize_state(mdev, os, ns, 0);
#line 669
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 669
  if (tmp___2 == 0) {
#line 670
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 671
  if ((int )rv == 0) {
#line 672
    rv = is_valid_state(mdev, ns);
#line 673
    if ((int )rv == 1) {
#line 674
      rv = is_valid_state_transition(mdev, ns, os);
#line 675
      if ((int )rv == 1) {
#line 676
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 679
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 681
  return (rv);
}
}
#line 695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 703
  init_completion(& done);
#line 705
  if (((unsigned int )f & 8U) != 0U) {
#line 706
    ldv_mutex_lock_207(& mdev->state_mutex);
  } else {

  }
#line 708
  tmp = spinlock_check(& mdev->req_lock);
#line 708
  flags = _raw_spin_lock_irqsave(tmp);
#line 709
  os = mdev->state;
#line 710
  ns.i = (os.i & ~ mask.i) | val.i;
#line 711
  ns = sanitize_state(mdev, os, ns, 0);
#line 713
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 713
  if (tmp___3 != 0) {
#line 714
    rv = is_valid_state(mdev, ns);
#line 715
    if ((int )rv == 1) {
#line 716
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 717
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 719
    if ((int )rv <= 0) {
#line 720
      if (((unsigned int )f & 2U) != 0U) {
#line 721
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 722
      goto abort;
    } else {

    }
#line 725
    drbd_state_lock___0(mdev);
#line 726
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 726
    if (tmp___0 == 0) {
#line 727
      drbd_state_unlock(mdev);
#line 728
      rv = SS_CW_FAILED_BY_PEER;
#line 729
      if (((unsigned int )f & 2U) != 0U) {
#line 730
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 731
      goto abort;
    } else {

    }
#line 734
    if ((unsigned int )*((unsigned short *)(& mask) + 0UL) == 496U && (unsigned int )*((unsigned short *)(& val) + 0UL) == 16U) {
#line 735
      drbd_set_flag(mdev, DISCONNECT_SENT);
    } else {

    }
#line 737
    rv = _req_st_cond(mdev, mask, val);
#line 737
    if ((int )rv != 0) {
#line 737
      goto ldv_52147;
    } else {

    }
#line 737
    tmp___1 = get_current();
#line 737
    __wait.flags = 0U;
#line 737
    __wait.private = (void *)tmp___1;
#line 737
    __wait.func = & autoremove_wake_function;
#line 737
    __wait.task_list.next = & __wait.task_list;
#line 737
    __wait.task_list.prev = & __wait.task_list;
    ldv_52150: 
#line 737
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 737
    rv = _req_st_cond(mdev, mask, val);
#line 737
    if ((int )rv != 0) {
#line 737
      goto ldv_52149;
    } else {

    }
#line 737
    schedule();
#line 737
    goto ldv_52150;
    ldv_52149: 
#line 737
    finish_wait(& mdev->state_wait, & __wait);
    ldv_52147: ;
#line 740
    if ((int )rv <= 0) {
#line 741
      drbd_state_unlock(mdev);
#line 742
      if (((unsigned int )f & 2U) != 0U) {
#line 743
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 744
      goto abort;
    } else {

    }
#line 746
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 746
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 747
    os = mdev->state;
#line 748
    ns.i = (os.i & ~ mask.i) | val.i;
#line 749
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 750
    drbd_state_unlock(mdev);
  } else {
#line 752
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 755
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 757
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 758
    tmp___4 = get_current();
#line 758
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 758
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              758);
    } else {

    }
#line 759
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 763
  if (((unsigned int )f & 8U) != 0U) {
#line 764
    ldv_mutex_unlock_208(& mdev->state_mutex);
  } else {

  }
#line 766
  return (rv);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 785
  rv = drbd_req_state(mdev, mask, val, f);
#line 785
  if ((int )rv != -18) {
#line 785
    goto ldv_52161;
  } else {

  }
#line 785
  tmp = get_current();
#line 785
  __wait.flags = 0U;
#line 785
  __wait.private = (void *)tmp;
#line 785
  __wait.func = & autoremove_wake_function;
#line 785
  __wait.task_list.next = & __wait.task_list;
#line 785
  __wait.task_list.prev = & __wait.task_list;
  ldv_52164: 
#line 785
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 785
  rv = drbd_req_state(mdev, mask, val, f);
#line 785
  if ((int )rv != -18) {
#line 785
    goto ldv_52163;
  } else {

  }
#line 785
  schedule();
#line 785
  goto ldv_52164;
  ldv_52163: 
#line 785
  finish_wait(& mdev->state_wait, & __wait);
  ldv_52161: ;
#line 788
  return (rv);
}
}
#line 791 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 793
  tmp = is_susp(ns);
#line 793
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39979.pdsk);
#line 793
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39979.disk);
#line 793
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_39979.peer);
#line 793
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_39979.role);
#line 793
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_39979.conn);
#line 793
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 804
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 810
  if ((int )err == -18) {
#line 811
    return;
  } else {

  }
#line 812
  tmp = drbd_set_st_err_str(err);
#line 812
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 813
  print_st(mdev, (char *)" state", os);
#line 814
  print_st(mdev, (char *)"wanted", ns);
#line 815
  return;
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 829
  rv = 1;
#line 831
  fp = FP_DONT_CARE;
#line 832
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 832
  if (tmp != 0) {
#line 833
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 834
    put_ldev(mdev);
  } else {

  }
#line 837
  tmp___0 = get_net_conf(mdev);
#line 837
  if (tmp___0 != 0) {
#line 838
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 840
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 841
    put_net_conf(mdev);
  } else {

  }
#line 844
  if ((int )rv <= 0) {

  } else
#line 846
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 847
    rv = SS_DEVICE_IN_USE;
  } else
#line 849
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39979.conn <= 9) && (int )ns.ldv_39979.disk <= 7) {
#line 850
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 852
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_39979.conn <= 9) && (int )ns.ldv_39979.pdsk > 5) {
#line 854
    rv = SS_PRIMARY_NOP;
  } else
#line 856
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39979.disk <= 4) && (int )ns.ldv_39979.pdsk <= 4) {
#line 857
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 859
  if ((int )ns.ldv_39979.conn > 10 && (int )ns.ldv_39979.disk <= 3) {
#line 860
    rv = SS_NO_LOCAL_DISK;
  } else
#line 862
  if ((int )ns.ldv_39979.conn > 10 && (int )ns.ldv_39979.pdsk <= 3) {
#line 863
    rv = SS_NO_REMOTE_DISK;
  } else
#line 865
  if (((int )ns.ldv_39979.conn > 10 && (int )ns.ldv_39979.disk <= 7) && (int )ns.ldv_39979.pdsk <= 7) {
#line 866
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 868
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 873
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 875
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 877
    rv = SS_NO_VERIFY_ALG;
  } else
#line 879
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 881
    rv = SS_NOT_SUPPORTED;
  } else
#line 883
  if ((int )ns.ldv_39979.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 884
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 886
  return (rv);
}
}
#line 896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;
  int tmp ;

  {
#line 899
  rv = 1;
#line 901
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_39979.conn > 10) {
#line 903
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 905
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 906
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 908
  if ((int )ns.ldv_39979.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 909
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 911
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_39979.conn <= 1) {
#line 912
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 914
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_39979.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 915
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 917
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 918
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 920
  if ((int )ns.ldv_39979.conn == (int )os.ldv_39979.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 921
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 925
  tmp = drbd_test_flag(mdev, STATE_SENT);
#line 925
  if (tmp != 0 && ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U || (unsigned int )*((unsigned short *)(& os) + 0UL) != 128U))) {
#line 928
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 930
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_39979.conn <= 9) {
#line 931
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 933
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_39979.conn != (int )os.ldv_39979.conn) && (int )os.ldv_39979.conn > 10) {
#line 935
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 937
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_39979.conn <= 9) {
#line 939
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 941
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_39979.conn <= 8) {
#line 943
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 945
  return (rv);
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void print_sanitize_warnings(struct drbd_conf *mdev , enum sanitize_state_warnings warn ) 
{ 
  char const   *msg_table[6U] ;

  {
#line 950
  msg_table[0] = "";
#line 950
  msg_table[1] = "Online-verify aborted.";
#line 950
  msg_table[2] = "Resync aborted.";
#line 950
  msg_table[3] = "Connection lost while negotiating, no data!";
#line 950
  msg_table[4] = "Implicitly upgraded disk";
#line 950
  msg_table[5] = "Implicitly upgraded pdsk";
#line 959
  if ((unsigned int )warn != 0U) {
#line 960
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", msg_table[(unsigned int )warn]);
  } else {

  }
#line 961
  return;
}
}
#line 973 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , enum sanitize_state_warnings *warn ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;

  {
#line 979
  if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 980
    *warn = NO_WARNING;
  } else {

  }
#line 982
  fp = FP_DONT_CARE;
#line 983
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 983
  if (tmp != 0) {
#line 984
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 985
    put_ldev(mdev);
  } else {

  }
#line 989
  if (((int )ns.ldv_39979.conn > 2 && (int )ns.ldv_39979.conn <= 7) && (int )os.ldv_39979.conn <= 1) {
#line 991
    ns.ldv_39979.conn = os.ldv_39979.conn;
  } else {

  }
#line 995
  if (((((int )os.ldv_39979.conn > 2 && (int )os.ldv_39979.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_39979.conn <= 10) {
#line 997
    ns.ldv_39979.conn = os.ldv_39979.conn;
  } else {

  }
#line 1000
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 1001
    ns.ldv_39979.disk = 0U;
  } else {

  }
#line 1004
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 1005
    ns.ldv_39979.conn = os.ldv_39979.conn;
  } else {

  }
#line 1007
  if ((int )ns.ldv_39979.conn <= 9) {
#line 1008
    ns.ldv_39979.peer_isp = 0U;
#line 1009
    ns.ldv_39979.peer = 0U;
#line 1010
    if ((int )ns.ldv_39979.pdsk > 6 || (int )ns.ldv_39979.pdsk <= 3) {
#line 1011
      ns.ldv_39979.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 1015
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1016
    ns.ldv_39979.aftr_isp = 0U;
  } else {

  }
#line 1019
  if (((int )os.ldv_39979.conn > 10 && (int )ns.ldv_39979.conn > 10) && ((int )ns.ldv_39979.disk <= 2 || (int )ns.ldv_39979.pdsk <= 2)) {
#line 1021
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1022
      *warn = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? ABORTED_ONLINE_VERIFY : ABORTED_RESYNC;
    } else {

    }
#line 1024
    ns.ldv_39979.conn = 10U;
  } else {

  }
#line 1028
  if ((int )ns.ldv_39979.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1028
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1028
    if (tmp___0 != 0) {
#line 1030
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 1031
        ns.ldv_39979.disk = mdev->new_state_tmp.ldv_39979.disk;
#line 1032
        ns.ldv_39979.pdsk = mdev->new_state_tmp.ldv_39979.pdsk;
      } else {
#line 1034
        if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1035
          *warn = CONNECTION_LOST_NEGOTIATING;
        } else {

        }
#line 1036
        ns.ldv_39979.disk = 0U;
#line 1037
        ns.ldv_39979.pdsk = 6U;
      }
#line 1039
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1043
  if ((int )ns.ldv_39979.conn > 9 && (int )ns.ldv_39979.conn <= 21) {
#line 1044
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 1045
      ns.ldv_39979.disk = 8U;
    } else {

    }
#line 1046
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 1047
      ns.ldv_39979.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 1051
  disk_min = D_DISKLESS;
#line 1052
  disk_max = D_UP_TO_DATE;
#line 1053
  pdsk_min = D_INCONSISTENT;
#line 1054
  pdsk_max = D_UNKNOWN;
#line 1055
  switch ((unsigned int )ns.ldv_39979.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 1061
  disk_min = D_INCONSISTENT;
#line 1062
  disk_max = D_OUTDATED;
#line 1063
  pdsk_min = D_UP_TO_DATE;
#line 1064
  pdsk_max = D_UP_TO_DATE;
#line 1065
  goto ldv_52209;
  case 18U: ;
  case 19U: 
#line 1068
  disk_min = D_UP_TO_DATE;
#line 1069
  disk_max = D_UP_TO_DATE;
#line 1070
  pdsk_min = D_UP_TO_DATE;
#line 1071
  pdsk_max = D_UP_TO_DATE;
#line 1072
  goto ldv_52209;
  case 10U: 
#line 1074
  disk_min = D_DISKLESS;
#line 1075
  disk_max = D_UP_TO_DATE;
#line 1076
  pdsk_min = D_DISKLESS;
#line 1077
  pdsk_max = D_UP_TO_DATE;
#line 1078
  goto ldv_52209;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 1083
  disk_min = D_UP_TO_DATE;
#line 1084
  disk_max = D_UP_TO_DATE;
#line 1085
  pdsk_min = D_INCONSISTENT;
#line 1086
  pdsk_max = D_CONSISTENT;
#line 1087
  goto ldv_52209;
  case 17U: 
#line 1089
  disk_min = D_INCONSISTENT;
#line 1090
  disk_max = D_INCONSISTENT;
#line 1091
  pdsk_min = D_UP_TO_DATE;
#line 1092
  pdsk_max = D_UP_TO_DATE;
#line 1093
  goto ldv_52209;
  case 16U: 
#line 1095
  disk_min = D_UP_TO_DATE;
#line 1096
  disk_max = D_UP_TO_DATE;
#line 1097
  pdsk_min = D_INCONSISTENT;
#line 1098
  pdsk_max = D_INCONSISTENT;
#line 1099
  goto ldv_52209;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 1111
  goto ldv_52209;
  }
  ldv_52209: ;
#line 1113
  if ((unsigned int )ns.ldv_39979.disk > (unsigned int )disk_max) {
#line 1114
    ns.ldv_39979.disk = (unsigned char )disk_max;
  } else {

  }
#line 1116
  if ((unsigned int )ns.ldv_39979.disk < (unsigned int )disk_min) {
#line 1117
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1118
      *warn = IMPLICITLY_UPGRADED_DISK;
    } else {

    }
#line 1119
    ns.ldv_39979.disk = (unsigned char )disk_min;
  } else {

  }
#line 1121
  if ((unsigned int )ns.ldv_39979.pdsk > (unsigned int )pdsk_max) {
#line 1122
    ns.ldv_39979.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 1124
  if ((unsigned int )ns.ldv_39979.pdsk < (unsigned int )pdsk_min) {
#line 1125
    if ((unsigned long )warn != (unsigned long )((enum sanitize_state_warnings *)0)) {
#line 1126
      *warn = IMPLICITLY_UPGRADED_PDSK;
    } else {

    }
#line 1127
    ns.ldv_39979.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 1130
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39979.conn <= 9) && (int )ns.ldv_39979.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39979.conn > 9) || (int )os.ldv_39979.pdsk <= 5)) {
#line 1133
    ns.ldv_39979.susp_fen = 1U;
  } else {

  }
#line 1135
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39979.disk <= 7) && (int )ns.ldv_39979.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39979.disk > 7) || (int )os.ldv_39979.pdsk > 7)) {
#line 1138
    ns.ldv_39979.susp_nod = 1U;
  } else {

  }
#line 1140
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1141
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 1142
      ns.ldv_39979.conn = 20U;
    } else {

    }
#line 1143
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1144
      ns.ldv_39979.conn = 21U;
    } else {

    }
  } else {
#line 1146
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1147
      ns.ldv_39979.conn = 16U;
    } else {

    }
#line 1148
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1149
      ns.ldv_39979.conn = 17U;
    } else {

    }
  }
#line 1152
  return (ns);
}
}
#line 1156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1158
  if (mdev->agreed_pro_version <= 89) {
#line 1159
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1160
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1161
  mdev->ov_position = 0UL;
#line 1162
  if ((unsigned int )cs == 19U) {
#line 1168
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1170
    bit = mdev->ov_start_sector >> 3;
#line 1171
    if (mdev->rs_total <= bit) {
#line 1172
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1174
      mdev->rs_total = 1UL;
    } else {
#line 1176
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1177
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1179
  mdev->ov_left = mdev->rs_total;
#line 1180
  return;
}
}
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1184
  tmp = drbd_test_and_clear_flag(mdev, AL_SUSPENDED);
#line 1184
  if (tmp != 0) {
#line 1185
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1186
  return;
}
}
#line 1198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  enum sanitize_state_warnings ssw ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1202
  rv = 1;
#line 1206
  os = mdev->state;
#line 1208
  ns = sanitize_state(mdev, os, ns, & ssw);
#line 1210
  if (ns.i == os.i) {
#line 1211
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1213
  if (((unsigned int )flags & 1U) == 0U) {
#line 1217
    rv = is_valid_state(mdev, ns);
#line 1218
    if ((int )rv <= 0) {
#line 1222
      tmp = is_valid_state(mdev, os);
#line 1222
      if ((int )tmp == (int )rv) {
#line 1223
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1225
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1228
  if ((int )rv <= 0) {
#line 1229
    if (((unsigned int )flags & 2U) != 0U) {
#line 1230
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1231
    return (rv);
  } else {

  }
#line 1234
  print_sanitize_warnings(mdev, ssw);
#line 1238
  pbp = (char *)(& pb);
#line 1239
  *pbp = 0;
#line 1240
  if ((int )ns.ldv_39979.role != (int )os.ldv_39979.role) {
#line 1241
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_39979.role);
#line 1241
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_39979.role);
#line 1241
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1241
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1244
  if ((int )ns.ldv_39979.peer != (int )os.ldv_39979.peer) {
#line 1245
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_39979.peer);
#line 1245
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_39979.peer);
#line 1245
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1245
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1248
  if ((int )ns.ldv_39979.conn != (int )os.ldv_39979.conn) {
#line 1249
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_39979.conn);
#line 1249
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_39979.conn);
#line 1249
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1249
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1252
  if ((int )ns.ldv_39979.disk != (int )os.ldv_39979.disk) {
#line 1253
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39979.disk);
#line 1253
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_39979.disk);
#line 1253
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1253
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1256
  if ((int )ns.ldv_39979.pdsk != (int )os.ldv_39979.pdsk) {
#line 1257
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_39979.pdsk);
#line 1257
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_39979.pdsk);
#line 1257
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1257
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1260
  tmp___18 = is_susp(ns);
#line 1260
  tmp___19 = is_susp(os);
#line 1260
  if (tmp___18 != tmp___19) {
#line 1261
    tmp___15 = is_susp(ns);
#line 1261
    tmp___16 = is_susp(os);
#line 1261
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1261
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1264
  if ((int )ns.ldv_39979.aftr_isp != (int )os.ldv_39979.aftr_isp) {
#line 1265
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_39979.aftr_isp,
                       (int )ns.ldv_39979.aftr_isp);
#line 1265
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1268
  if ((int )ns.ldv_39979.peer_isp != (int )os.ldv_39979.peer_isp) {
#line 1269
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_39979.peer_isp,
                       (int )ns.ldv_39979.peer_isp);
#line 1269
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1272
  if ((int )ns.ldv_39979.user_isp != (int )os.ldv_39979.user_isp) {
#line 1273
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_39979.user_isp,
                       (int )ns.ldv_39979.user_isp);
#line 1273
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1276
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1287
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1287
    tmp___23 = drbd_test_and_set_flag(mdev, CONFIG_PENDING);
#line 1287
    if (tmp___23 == 0) {
#line 1291
      drbd_set_flag(mdev, DEVICE_DYING);
    } else {

    }
  } else {

  }
#line 1297
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1299
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1301
  mdev->state = ns;
#line 1303
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_39979.disk > 2) {
#line 1304
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1306
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1307
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1311
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_39979.conn <= 10) {
#line 1313
    tmp___24 = drbd_bm_bits(mdev);
#line 1313
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1315
    if (mdev->ov_left != 0UL) {
#line 1316
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
                (unsigned long long )mdev->ov_start_sector);
    } else {

    }
  } else {

  }
#line 1320
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1322
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1323
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1325
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1326
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1329
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1331
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1332
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1335
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1337
    now = jiffies;
#line 1340
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_39979.conn);
#line 1341
    mdev->rs_start = now;
#line 1342
    mdev->rs_last_events = 0;
#line 1343
    mdev->rs_last_sect_ev = 0;
#line 1344
    mdev->ov_last_oos_size = 0UL;
#line 1345
    mdev->ov_last_oos_start = 0UL;
#line 1347
    i = 0;
#line 1347
    goto ldv_52253;
    ldv_52252: 
#line 1348
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1349
    mdev->rs_mark_time[i] = now;
#line 1347
    i = i + 1;
    ldv_52253: ;
#line 1347
    if (i <= 7) {
#line 1348
      goto ldv_52252;
    } else {

    }
#line 1352
    drbd_rs_controller_reset(mdev);
#line 1354
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1355
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1357
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1361
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1361
  if (tmp___26 != 0) {
#line 1362
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1366
    tmp___25 = drbd_test_flag(mdev, CRASHED_PRIMARY);
#line 1366
    if (tmp___25 != 0) {
#line 1367
      mdf = mdf | 64U;
    } else {

    }
#line 1368
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_39979.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1370
      mdf = mdf | 2U;
    } else {

    }
#line 1371
    if ((int )mdev->state.ldv_39979.conn > 9) {
#line 1372
      mdf = mdf | 4U;
    } else {

    }
#line 1373
    if ((int )mdev->state.ldv_39979.disk > 4) {
#line 1374
      mdf = mdf | 1U;
    } else {

    }
#line 1375
    if ((int )mdev->state.ldv_39979.disk > 5) {
#line 1376
      mdf = mdf | 16U;
    } else {

    }
#line 1377
    if ((int )mdev->state.ldv_39979.pdsk <= 5 && (int )mdev->state.ldv_39979.pdsk > 3) {
#line 1378
      mdf = mdf | 32U;
    } else {

    }
#line 1379
    if ((mdev->ldev)->md.flags != mdf) {
#line 1380
      (mdev->ldev)->md.flags = mdf;
#line 1381
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1383
    if ((int )os.ldv_39979.disk <= 6 && (int )ns.ldv_39979.disk > 6) {
#line 1384
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1385
    put_ldev(mdev);
  } else {

  }
#line 1389
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1391
    drbd_set_flag(mdev, CONSIDER_RESYNC);
  } else {

  }
#line 1394
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1395
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1398
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1399
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1402
  if (((int )os.ldv_39979.conn > 8 && (int )ns.ldv_39979.conn <= 7) && (int )ns.ldv_39979.conn > 2) {
#line 1404
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1407
  if ((int )os.ldv_39979.conn <= 9 && (int )ns.ldv_39979.conn > 9) {
#line 1408
    drbd_resume_al(mdev);
  } else {

  }
#line 1413
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 1414
    mdev->last_reconnect_jif = jiffies;
  } else {

  }
#line 1415
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_39979.disk > 3) {
#line 1417
    mdev->last_reattach_jif = jiffies;
  } else {

  }
#line 1419
  tmp___27 = kmalloc(48UL, 32U);
#line 1419
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1420
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1421
    ascw->os = os;
#line 1422
    ascw->ns = ns;
#line 1423
    ascw->flags = flags;
#line 1424
    ascw->w.cb = & w_after_state_ch;
#line 1425
    ascw->done = done;
#line 1426
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1428
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1431
  return (rv);
}
}
#line 1434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1437
  __mptr = (struct drbd_work  const  *)w;
#line 1437
  ascw = (struct after_state_chg_work *)__mptr;
#line 1438
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1439
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1440
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1440
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              1440);
    } else {

    }
#line 1441
    complete(ascw->done);
  } else {

  }
#line 1443
  kfree((void const   *)ascw);
#line 1445
  return (1);
}
}
#line 1448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1450
  if (rv != 0) {
#line 1451
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1452
    val.i = 0U;
#line 1452
    val.ldv_39979.conn = 10U;
#line 1452
    mask.i = 0U;
#line 1452
    mask.ldv_39979.conn = 31U;
#line 1452
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1453
    return;
  } else {

  }
#line 1456
  switch ((int )mdev->state.ldv_39979.conn) {
  case 12: 
#line 1458
  val___0.i = 0U;
#line 1458
  val___0.ldv_39979.conn = 15U;
#line 1458
  mask___0.i = 0U;
#line 1458
  mask___0.ldv_39979.conn = 31U;
#line 1458
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1459
  goto ldv_52277;
  case 11: 
#line 1461
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1462
  goto ldv_52277;
  }
  ldv_52277: ;
#line 1465
  return;
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1472
  tmp = get_current();
#line 1472
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1472
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1472);
  } else {

  }
#line 1475
  drbd_set_flag(mdev, SUSPEND_IO);
#line 1477
  drbd_bm_lock(mdev, why, flags);
#line 1478
  rv = (*io_fn)(mdev);
#line 1479
  drbd_bm_unlock(mdev);
#line 1481
  drbd_resume_io(mdev);
#line 1483
  return (rv);
}
}
#line 1493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 1497
  what = nothing;
#line 1498
  nsm.i = 4294967295U;
#line 1500
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1501
    drbd_clear_flag(mdev, CRASHED_PRIMARY);
#line 1502
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1503
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1506
  fp = FP_DONT_CARE;
#line 1507
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1507
  if (tmp != 0) {
#line 1508
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1509
    put_ldev(mdev);
  } else {

  }
#line 1513
  drbd_bcast_state(mdev, ns);
#line 1515
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_39979.disk > 7) || (int )os.ldv_39979.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_39979.disk <= 7) && (int )ns.ldv_39979.pdsk <= 7)) {
#line 1517
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1522
  if ((int )os.ldv_39979.disk <= 3 && (int )ns.ldv_39979.disk > 3) {
#line 1523
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
  } else {

  }
#line 1525
  nsm.i = 4294967295U;
#line 1526
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1527
    if ((int )os.ldv_39979.conn <= 9 && (int )ns.ldv_39979.conn > 9) {
#line 1528
      what = resend;
    } else {

    }
#line 1530
    if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U) && (int )ns.ldv_39979.disk > 3) {
#line 1532
      what = restart_frozen_disk_io;
    } else {

    }
#line 1534
    if ((unsigned int )what != 27U) {
#line 1535
      nsm.ldv_39979.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1538
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1540
    if ((int )os.ldv_39979.pdsk > 5 && (int )ns.ldv_39979.pdsk <= 5) {
#line 1541
      tmp___0 = drbd_test_flag(mdev, NEW_CUR_UUID);
#line 1541
      if (tmp___0 != 0) {
#line 1542
        drbd_uuid_new_current(mdev);
#line 1543
        drbd_clear_flag(mdev, NEW_CUR_UUID);
      } else {

      }
#line 1545
      spin_lock_irq(& mdev->req_lock);
#line 1546
      _tl_clear(mdev);
#line 1547
      __ns.i = mdev->state.i;
#line 1547
      __ns.ldv_39979.susp_fen = 0U;
#line 1547
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1548
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1551
    if ((int )os.ldv_39979.conn <= 9 && (int )ns.ldv_39979.conn > 9) {
#line 1552
      drbd_clear_flag(mdev, NEW_CUR_UUID);
#line 1553
      what = resend;
#line 1554
      nsm.ldv_39979.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1558
  if ((unsigned int )what != 27U) {
#line 1559
    spin_lock_irq(& mdev->req_lock);
#line 1560
    _tl_restart(mdev, what);
#line 1561
    nsm.i = nsm.i & mdev->state.i;
#line 1562
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1563
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1570
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1570
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1570
    if (tmp___1 != 0) {
#line 1573
      drbd_gen_and_send_sync_uuid(mdev);
#line 1574
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1578
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_39979.pdsk > 0) {
#line 1581
    mdev->rs_total = 0UL;
#line 1582
    mdev->rs_failed = 0UL;
#line 1583
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1584
    drbd_rs_cancel_all(mdev);
#line 1586
    drbd_send_uuids(mdev);
#line 1587
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1592
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1594
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1599
  if ((((int )os.ldv_39979.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_39979.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1605
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1605
    if (tmp___3 != 0) {
#line 1606
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_39979.disk > 7) {
#line 1608
        tmp___2 = is_susp(mdev->state);
#line 1608
        if (tmp___2 != 0) {
#line 1609
          drbd_set_flag(mdev, NEW_CUR_UUID);
        } else {
#line 1611
          drbd_uuid_new_current(mdev);
#line 1612
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1615
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1619
  if ((int )ns.ldv_39979.pdsk <= 3) {
#line 1619
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1619
    if (tmp___4 != 0) {
#line 1620
      if ((((unsigned int )*((unsigned char *)(& os) + 0UL) == 8U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_39979.disk > 7) {
#line 1622
        drbd_uuid_new_current(mdev);
#line 1623
        drbd_send_uuids(mdev);
      } else {

      }
#line 1626
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1630
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_LOCKED_SET_ALLOWED);
      } else {

      }
#line 1632
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1638
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_39979.conn <= 10) {
#line 1638
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1638
    if (tmp___5 != 0) {
#line 1642
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1644
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1648
  if (((int )ns.ldv_39979.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1650
    drbd_send_sizes(mdev, 0, 0);
#line 1651
    drbd_send_uuids(mdev);
#line 1652
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1656
  if ((int )ns.ldv_39979.conn > 9 && ((int )os.ldv_39979.aftr_isp != (int )ns.ldv_39979.aftr_isp || (int )os.ldv_39979.user_isp != (int )ns.ldv_39979.user_isp)) {
#line 1659
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1662
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1664
    suspend_other_sg(mdev);
  } else {

  }
#line 1668
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_39979.conn > 9) {
#line 1669
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1671
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1672
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1675
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1678
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1683
  if ((((int )os.ldv_39979.conn <= 9 && (int )ns.ldv_39979.conn <= 9) && (int )os.ldv_39979.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1686
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1691
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1696
    if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1697
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1705
      if ((unsigned int )eh == 1U) {
#line 1705
        tmp___6 = drbd_test_flag(mdev, WAS_IO_ERROR);
#line 1705
        if (tmp___6 != 0) {
#line 1706
          drbd_khelper(mdev, (char *)"local-io-error");
        } else {

        }
      } else {

      }
#line 1721
      tmp___7 = drbd_test_flag(mdev, FORCE_DETACH);
#line 1721
      if (tmp___7 != 0) {
#line 1722
        tl_abort_disk_io(mdev);
      } else {

      }
#line 1727
      if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1728
        tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.disk);
#line 1728
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
                tmp___8);
      } else {

      }
#line 1732
      if ((int )ns.ldv_39979.conn > 9) {
#line 1733
        drbd_send_state(mdev, ns);
      } else {

      }
#line 1735
      drbd_rs_cancel_all(mdev);
#line 1740
      drbd_md_sync(mdev);
    } else {

    }
#line 1742
    put_ldev(mdev);
  } else {

  }
#line 1748
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1751
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1752
      tmp___9 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_39979.disk);
#line 1752
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___9);
    } else {

    }
#line 1756
    if ((int )ns.ldv_39979.conn > 9) {
#line 1757
      drbd_send_state(mdev, ns);
    } else {

    }
#line 1761
    put_ldev(mdev);
  } else {

  }
#line 1765
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) && (int )ns.ldv_39979.conn > 9) {
#line 1766
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1769
  if ((int )ns.ldv_39979.disk > 3 && (int )ns.ldv_39979.pdsk > 3) {
#line 1769
    tmp___10 = drbd_test_and_clear_flag(mdev, RESYNC_AFTER_NEG);
#line 1769
    if (tmp___10 != 0) {
#line 1771
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1772
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1776
  if ((((int )os.ldv_39979.conn > 10 && (int )ns.ldv_39979.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1779
    resume_next_sg(mdev);
  } else {

  }
#line 1783
  if (((int )os.ldv_39979.disk <= 7 && (int )os.ldv_39979.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1784
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1789
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) && mdev->agreed_pro_version > 96) {
#line 1791
    drbd_send_state(mdev, ns);
  } else {

  }
#line 1794
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 144U) {
#line 1795
    drbd_clear_flag(mdev, STATE_SENT);
#line 1796
    __wake_up(& mdev->state_wait, 3U, 1, 0);
  } else {

  }
#line 1806
  if ((int )os.ldv_39979.conn > 10 && (int )ns.ldv_39979.conn <= 10) {
#line 1806
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1806
    if (tmp___11 != 0) {
#line 1807
      drbd_queue_bitmap_io(mdev, & drbd_bm_write_copy_pages, 0, (char *)"write from resync_finished",
                           BM_IS_LOCKED);
#line 1809
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1813
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1813
    tmp___12 = is_susp(ns);
#line 1813
    if (tmp___12 == 0) {
#line 1813
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1814
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1817
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1818
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1822
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1825
    if ((int )os.ldv_39979.aftr_isp != (int )ns.ldv_39979.aftr_isp) {
#line 1826
      resume_next_sg(mdev);
    } else {

    }
#line 1828
    tmp___13 = drbd_test_flag(mdev, DEVICE_DYING);
#line 1828
    if (tmp___13 != 0) {
#line 1829
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1832
  drbd_md_sync(mdev);
#line 1833
  return;
}
}
#line 1836 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1838
  thi = (struct drbd_thread *)arg;
#line 1839
  mdev = thi->mdev;
  restart: 
#line 1844
  retval = (*(thi->function))(thi);
#line 1846
  tmp = spinlock_check(& thi->t_lock);
#line 1846
  flags = _raw_spin_lock_irqsave(tmp);
#line 1858
  if ((unsigned int )thi->t_state == 3U) {
#line 1859
    tmp___0 = get_current();
#line 1859
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1860
    thi->t_state = Running;
#line 1861
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1862
    goto restart;
  } else {

  }
#line 1865
  thi->task = 0;
#line 1866
  thi->t_state = None;
#line 1867
  __asm__  volatile   ("mfence": : : "memory");
#line 1868
  complete(& thi->stop);
#line 1869
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1871
  tmp___1 = get_current();
#line 1871
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1874
  module_put(& __this_module);
#line 1875
  return (retval);
}
}
#line 1878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1881
  spinlock_check(& thi->t_lock);
#line 1881
  __raw_spin_lock_init(& thi->t_lock.ldv_5957.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1882
  thi->task = 0;
#line 1883
  thi->t_state = None;
#line 1884
  thi->function = func;
#line 1885
  thi->mdev = mdev;
#line 1886
  return;
}
}
#line 1888 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  bool tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;
  unsigned int tmp___5 ;
  long tmp___6 ;
  raw_spinlock_t *tmp___7 ;
  struct task_struct *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 1890
  mdev = thi->mdev;
#line 1894
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1901
  tmp = spinlock_check(& thi->t_lock);
#line 1901
  flags = _raw_spin_lock_irqsave(tmp);
#line 1903
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1905
  tmp___0 = get_current();
#line 1905
  tmp___1 = get_current();
#line 1905
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1909
  tmp___2 = try_module_get(& __this_module);
#line 1909
  if (tmp___2) {
#line 1909
    tmp___3 = 0;
  } else {
#line 1909
    tmp___3 = 1;
  }
#line 1909
  if (tmp___3) {
#line 1910
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1911
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1912
    return (0);
  } else {

  }
#line 1915
  init_completion(& thi->stop);
#line 1916
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1916
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            1916);
  } else {

  }
#line 1917
  thi->reset_cpu_mask = 1;
#line 1918
  thi->t_state = Running;
#line 1919
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1920
  tmp___4 = get_current();
#line 1920
  flush_signals(tmp___4);
#line 1922
  tmp___5 = mdev_to_minor(mdev);
#line 1922
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___5,
                              me);
#line 1925
  tmp___6 = IS_ERR((void const   *)nt);
#line 1925
  if (tmp___6 != 0L) {
#line 1926
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1928
    module_put(& __this_module);
#line 1929
    return (0);
  } else {

  }
#line 1931
  tmp___7 = spinlock_check(& thi->t_lock);
#line 1931
  flags = _raw_spin_lock_irqsave(tmp___7);
#line 1932
  thi->task = nt;
#line 1933
  thi->t_state = Running;
#line 1934
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1935
  wake_up_process(nt);
#line 1936
  goto ldv_52332;
  case 2U: 
#line 1938
  thi->t_state = Restarting;
#line 1939
  tmp___8 = get_current();
#line 1939
  tmp___9 = get_current();
#line 1939
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___9->comm), tmp___8->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1945
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1946
  goto ldv_52332;
  }
  ldv_52332: ;
#line 1949
  return (1);
}
}
#line 1953 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1957
  ns = restart != 0 ? Restarting : Exiting;
#line 1960
  tmp = spinlock_check(& thi->t_lock);
#line 1960
  flags = _raw_spin_lock_irqsave(tmp);
#line 1962
  if ((unsigned int )thi->t_state == 0U) {
#line 1963
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1964
    if (restart != 0) {
#line 1965
      drbd_thread_start(thi);
    } else {

    }
#line 1966
    return;
  } else {

  }
#line 1969
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1970
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1971
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1972
      return;
    } else {

    }
#line 1975
    thi->t_state = ns;
#line 1976
    __asm__  volatile   ("mfence": : : "memory");
#line 1977
    init_completion(& thi->stop);
#line 1978
    tmp___0 = get_current();
#line 1978
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1979
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1983
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1985
  if (wait != 0) {
#line 1986
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1987
  return;
}
}
#line 1997 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 2002
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 2002
  if (tmp != 0U) {
#line 2003
    return;
  } else {

  }
#line 2005
  tmp___0 = mdev_to_minor(mdev);
#line 2005
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 2005
  ord = (int )(tmp___0 % tmp___1);
#line 2006
  cpu = -1;
#line 2006
  goto ldv_52353;
  ldv_52352: 
#line 2007
  tmp___2 = ord;
#line 2007
  ord = ord - 1;
#line 2007
  if (tmp___2 == 0) {
#line 2008
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 2009
    return;
  } else {

  }
  ldv_52353: 
#line 2006
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 2006
  cpu = (int )tmp___3;
#line 2006
  if (cpu < nr_cpu_ids) {
#line 2007
    goto ldv_52352;
  } else {

  }
#line 2013
  cpumask_setall(mdev->cpu_mask);
#line 2014
  return;
}
}
#line 2023 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 2025
  tmp = get_current();
#line 2025
  p = tmp;
#line 2026
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 2031
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 2031
  if (_b != 0) {
#line 2031
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2031);
  } else {

  }
#line 2031
  if (_b != 0) {
#line 2032
    return;
  } else {

  }
#line 2033
  if (thi->reset_cpu_mask == 0) {
#line 2034
    return;
  } else {

  }
#line 2035
  thi->reset_cpu_mask = 0;
#line 2036
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 2037
  return;
}
}
#line 2041 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 2047
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 2047
  if (_b != 0) {
#line 2047
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2047);
  } else {

  }
#line 2047
  if (_b != 0) {
#line 2047
    return (0);
  } else {

  }
#line 2048
  _b___0 = size == 0UL;
#line 2048
  if (_b___0 != 0) {
#line 2048
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2048);
  } else {

  }
#line 2048
  if (_b___0 != 0) {
#line 2048
    return (0);
  } else {

  }
#line 2050
  h->magic = 1728214147U;
#line 2051
  tmp = __fswab16((int )((__u16 )cmd));
#line 2051
  h->command = tmp;
#line 2052
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 2052
  h->length = tmp___0;
#line 2054
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 2056
  ok = (size_t )sent == size;
#line 2057
  if (ok == 0) {
#line 2057
    tmp___2 = get_current();
#line 2057
    tmp___3 = signal_pending(tmp___2);
#line 2057
    if (tmp___3 == 0) {
#line 2058
      tmp___1 = cmdname(cmd);
#line 2058
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 2060
  return (ok);
}
}
#line 2066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 2069
  ok = 0;
#line 2072
  if (use_data_socket != 0) {
#line 2073
    ldv_mutex_lock_209(& mdev->data.mutex);
#line 2074
    sock = mdev->data.socket;
  } else {
#line 2076
    ldv_mutex_lock_210(& mdev->meta.mutex);
#line 2077
    sock = mdev->meta.socket;
  }
#line 2082
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 2082
  if (tmp != 0L) {
#line 2083
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 2085
  if (use_data_socket != 0) {
#line 2086
    ldv_mutex_unlock_211(& mdev->data.mutex);
  } else {
#line 2088
    ldv_mutex_unlock_212(& mdev->meta.mutex);
  }
#line 2089
  return (ok);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2098
  h.magic = 1728214147U;
#line 2099
  tmp = __fswab16((int )((__u16 )cmd));
#line 2099
  h.command = tmp;
#line 2100
  tmp___0 = __fswab16((int )((__u16 )size));
#line 2100
  h.length = tmp___0;
#line 2102
  tmp___1 = drbd_get_data_sock___0(mdev);
#line 2102
  if (tmp___1 == 0) {
#line 2103
    return (0);
  } else {

  }
#line 2105
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 2105
  ok = tmp___2 == 8;
#line 2107
  if (ok != 0) {
#line 2107
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 2107
    if ((size_t )tmp___3 == size) {
#line 2107
      tmp___4 = 1;
    } else {
#line 2107
      tmp___4 = 0;
    }
  } else {
#line 2107
    tmp___4 = 0;
  }
#line 2107
  ok = tmp___4;
#line 2110
  drbd_put_data_sock___0(mdev);
#line 2112
  return (ok);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 2120
  apv = mdev->agreed_pro_version;
#line 2122
  if (apv > 87) {
#line 2122
    if (apv == 88) {
#line 2122
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 2122
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 2122
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 2122
    size = tmp___0;
  } else {
#line 2122
    size = 12;
  }
#line 2131
  ldv_mutex_lock_213(& mdev->data.mutex);
#line 2132
  sock = mdev->data.socket;
#line 2134
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2134
  if (tmp___6 != 0L) {
#line 2135
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 2137
    p = & mdev->data.sbuf.rs_param_95;
#line 2140
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 2142
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 2142
    p->rate = tmp___1;
#line 2143
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 2143
    p->c_plan_ahead = tmp___2;
#line 2144
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 2144
    p->c_delay_target = tmp___3;
#line 2145
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 2145
    p->c_fill_target = tmp___4;
#line 2146
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 2146
    p->c_max_rate = tmp___5;
#line 2148
    if (apv > 87) {
#line 2149
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 2150
    if (apv > 88) {
#line 2151
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 2153
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 2155
    rv = 0;
  }
#line 2157
  ldv_mutex_unlock_214(& mdev->data.mutex);
#line 2159
  return (rv);
}
}
#line 2162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 2167
  size = 32;
#line 2169
  if (mdev->agreed_pro_version > 86) {
#line 2170
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 2170
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 2174
  tmp___0 = kmalloc((size_t )size, 16U);
#line 2174
  p = (struct p_protocol *)tmp___0;
#line 2175
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 2176
    return (0);
  } else {

  }
#line 2178
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 2178
  p->protocol = tmp___1;
#line 2179
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 2179
  p->after_sb_0p = tmp___2;
#line 2180
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 2180
  p->after_sb_1p = tmp___3;
#line 2181
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 2181
  p->after_sb_2p = tmp___4;
#line 2182
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 2182
  p->two_primaries = tmp___5;
#line 2184
  cf = 0;
#line 2185
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2186
    cf = cf | 1;
  } else {

  }
#line 2187
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2188
    if (mdev->agreed_pro_version > 91) {
#line 2189
      cf = cf | 2;
    } else {
#line 2191
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 2192
      kfree((void const   *)p);
#line 2193
      return (-1);
    }
  } else {

  }
#line 2196
  tmp___6 = __fswab32((__u32 )cf);
#line 2196
  p->conn_flags = tmp___6;
#line 2198
  if (mdev->agreed_pro_version > 86) {
#line 2199
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2201
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2203
  kfree((void const   *)p);
#line 2204
  return (rv);
}
}
#line 2207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2212
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2212
  if (tmp == 0) {
#line 2213
    return (1);
  } else {

  }
#line 2215
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2216
  i = 0;
#line 2216
  goto ldv_52419;
  ldv_52418: ;
#line 2217
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2217
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2217
    p.uuid[i] = tmp___0;
  } else {
#line 2217
    p.uuid[i] = 0ULL;
  }
#line 2216
  i = i + 1;
  ldv_52419: ;
#line 2216
  if (i <= 3) {
#line 2217
    goto ldv_52418;
  } else {

  }
#line 2218
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 2220
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2221
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2221
  p.uuid[4] = tmp___1;
#line 2222
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2223
  tmp___2 = drbd_test_flag(mdev, CRASHED_PRIMARY);
#line 2223
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2224
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2225
  tmp___3 = __fswab64(uuid_flags);
#line 2225
  p.uuid[5] = tmp___3;
#line 2227
  put_ldev(mdev);
#line 2229
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2229
  return (tmp___4);
}
}
#line 2233 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2235
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2235
  return (tmp);
}
}
#line 2238 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2240
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2240
  return (tmp);
}
}
#line 2243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2245
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2245
  if (tmp != 0) {
#line 2246
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2247
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2253
    put_ldev(mdev);
  } else {
#line 2255
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2256
  return;
}
}
#line 2261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2266
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2266
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2266);
  } else {

  }
#line 2268
  uuid = (mdev->ldev)->md.uuid[1];
#line 2269
  if (uuid != 0ULL && uuid != 4ULL) {
#line 2270
    uuid = uuid + 281474976710656ULL;
  } else {
#line 2272
    get_random_bytes((void *)(& uuid), 8);
  }
#line 2273
  drbd_uuid_set(mdev, 1, uuid);
#line 2274
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2275
  drbd_md_sync(mdev);
#line 2276
  tmp = __fswab64(uuid);
#line 2276
  p.uuid = tmp;
#line 2278
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2278
  return (tmp___0);
}
}
#line 2282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  unsigned int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  int tmp___0 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2290
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2290
  if (tmp___0 != 0) {
#line 2291
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2291
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
              2291);
    } else {

    }
#line 2292
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2293
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2294
    q_order_type = drbd_queue_order_type(mdev);
#line 2295
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2295
    max_bio_size = tmp << 9;
#line 2296
    _min1 = max_bio_size;
#line 2296
    _min2 = 131072U;
#line 2296
    max_bio_size = _min1 < _min2 ? _min1 : _min2;
#line 2297
    put_ldev(mdev);
  } else {
#line 2299
    d_size = 0UL;
#line 2300
    u_size = 0UL;
#line 2301
    q_order_type = 0;
#line 2302
    max_bio_size = 131072U;
  }
#line 2306
  if (mdev->agreed_pro_version <= 94) {
#line 2307
    _min1___0 = max_bio_size;
#line 2307
    _min2___0 = 32768U;
#line 2307
    max_bio_size = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
  } else {

  }
#line 2309
  tmp___1 = __fswab64((__u64 )d_size);
#line 2309
  p.d_size = tmp___1;
#line 2310
  tmp___2 = __fswab64((__u64 )u_size);
#line 2310
  p.u_size = tmp___2;
#line 2311
  if (trigger_reply == 0) {
#line 2311
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2311
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2311
    tmp___4 = 0ULL;
  }
#line 2311
  tmp___5 = __fswab64(tmp___4);
#line 2311
  p.c_size = tmp___5;
#line 2312
  tmp___6 = __fswab32(max_bio_size);
#line 2312
  p.max_bio_size = tmp___6;
#line 2313
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2313
  p.queue_order_type = tmp___7;
#line 2314
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2314
  p.dds_flags = tmp___8;
#line 2316
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2318
  return (ok);
}
}
#line 2325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_current_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2329
  ok = 0;
#line 2333
  drbd_state_lock___0(mdev);
#line 2335
  ldv_mutex_lock_215(& mdev->data.mutex);
#line 2337
  tmp = __fswab32(mdev->state.i);
#line 2337
  p.state = tmp;
#line 2338
  sock = mdev->data.socket;
#line 2340
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2340
  if (tmp___0 != 0L) {
#line 2341
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2345
  ldv_mutex_unlock_216(& mdev->data.mutex);
#line 2347
  drbd_state_unlock(mdev);
#line 2348
  return (ok);
}
}
#line 2361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2365
  ok = 0;
#line 2367
  ldv_mutex_lock_217(& mdev->data.mutex);
#line 2369
  tmp = __fswab32(state.i);
#line 2369
  p.state = tmp;
#line 2370
  sock = mdev->data.socket;
#line 2372
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2372
  if (tmp___0 != 0L) {
#line 2373
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2377
  ldv_mutex_unlock_218(& mdev->data.mutex);
#line 2379
  return (ok);
}
}
#line 2382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2387
  tmp = __fswab32(mask.i);
#line 2387
  p.mask = tmp;
#line 2388
  tmp___0 = __fswab32(val.i);
#line 2388
  p.val = tmp___0;
#line 2390
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2390
  return (tmp___1);
}
}
#line 2394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2398
  tmp = __fswab32((__u32 )retcode);
#line 2398
  p.retcode = tmp;
#line 2400
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2400
  return (tmp___0);
}
}
#line 2404 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2417
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2419
    return (0);
  } else {

  }
#line 2421
  if (c->bit_offset >= c->bm_bits) {
#line 2422
    return (0);
  } else {

  }
#line 2425
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2426
  memset((void *)(& p->code), 0, 4087UL);
#line 2428
  plain_bits = 0UL;
#line 2433
  toggle = 2U;
  ldv_52492: ;
#line 2438
  if (toggle == 0U) {
#line 2438
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2438
    tmp = tmp___0;
  } else {
#line 2438
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2438
    tmp = tmp___1;
  }
#line 2440
  if (tmp == 0xffffffffffffffffUL) {
#line 2441
    tmp = c->bm_bits;
  } else {

  }
#line 2442
  rl = tmp - c->bit_offset;
#line 2444
  if (toggle == 2U) {
#line 2445
    if (rl == 0UL) {
#line 2448
      DCBP_set_start(p, 1);
#line 2450
      toggle = toggle == 0U;
#line 2451
      goto ldv_52490;
    } else {

    }
#line 2453
    DCBP_set_start(p, 0);
  } else {

  }
#line 2458
  if (rl == 0UL) {
#line 2459
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2461
    return (-1);
  } else {

  }
#line 2464
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2465
  if (bits == -105) {
#line 2466
    goto ldv_52491;
  } else {

  }
#line 2467
  if (bits <= 0) {
#line 2468
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2469
    return (0);
  } else {

  }
#line 2472
  toggle = toggle == 0U;
#line 2473
  plain_bits = plain_bits + rl;
#line 2474
  c->bit_offset = tmp;
  ldv_52490: ;
#line 2475
  if (c->bit_offset < c->bm_bits) {
#line 2476
    goto ldv_52492;
  } else {

  }
  ldv_52491: 
#line 2477
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2479
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2482
    c->bit_offset = c->bit_offset - plain_bits;
#line 2483
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2484
    c->bit_offset = c->word_offset * 64UL;
#line 2485
    return (0);
  } else {

  }
#line 2490
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2493
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2495
  return ((int )len);
}
}
#line 2505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2508
  p = (struct p_compressed_bm *)h;
#line 2513
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2515
  if (len < 0) {
#line 2516
    return (-5);
  } else {

  }
#line 2518
  if (len != 0) {
#line 2519
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2520
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2523
    c->packets[0] = c->packets[0] + 1U;
#line 2524
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2526
    if (c->bit_offset >= c->bm_bits) {
#line 2527
      len = 0;
    } else {

    }
  } else {
#line 2531
    __min1 = 511UL;
#line 2531
    __min2 = c->bm_words - c->word_offset;
#line 2531
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2532
    len = (int )((unsigned int )num_words * 8U);
#line 2533
    if (len != 0) {
#line 2534
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2535
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2537
    c->word_offset = c->word_offset + num_words;
#line 2538
    c->bit_offset = c->word_offset * 64UL;
#line 2540
    c->packets[1] = c->packets[1] + 1U;
#line 2541
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2543
    if (c->bit_offset > c->bm_bits) {
#line 2544
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2546
  if (ok != 0) {
#line 2547
    if (len == 0) {
#line 2548
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2549
      return (0);
    } else {
#line 2551
      return (1);
    }
  } else {

  }
#line 2553
  return (-5);
}
}
#line 2557 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2563
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2563
  if (_b != 0) {
#line 2563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            2563);
  } else {

  }
#line 2563
  if (_b != 0) {
#line 2563
    return (0);
  } else {

  }
#line 2567
  tmp = __get_free_pages(16U, 0U);
#line 2567
  p = (struct p_header80 *)tmp;
#line 2568
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2570
    return (0);
  } else {

  }
#line 2573
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2573
  if (tmp___2 != 0) {
#line 2574
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2574
    if (tmp___1 != 0) {
#line 2575
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2576
      drbd_bm_set_all(mdev);
#line 2577
      tmp___0 = drbd_bm_write(mdev);
#line 2577
      if (tmp___0 != 0) {
#line 2581
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2583
        drbd_md_clear_flag(mdev, 8);
#line 2584
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2587
    put_ldev(mdev);
  } else {

  }
#line 2590
  tmp___3 = drbd_bm_bits(mdev);
#line 2590
  tmp___4 = drbd_bm_words(mdev);
#line 2590
  __constr_expr_0.bm_bits = tmp___3;
#line 2590
  __constr_expr_0.bm_words = tmp___4;
#line 2590
  __constr_expr_0.bit_offset = 0UL;
#line 2590
  __constr_expr_0.word_offset = 0UL;
#line 2590
  __constr_expr_0.packets[0] = 0U;
#line 2590
  __constr_expr_0.packets[1] = 0U;
#line 2590
  __constr_expr_0.bytes[0] = 0U;
#line 2590
  __constr_expr_0.bytes[1] = 0U;
#line 2590
  c = __constr_expr_0;
  ldv_52515: 
#line 2596
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2597
  if (err > 0) {
#line 2598
    goto ldv_52515;
  } else {

  }
#line 2599
  free_pages((unsigned long )p, 0U);
#line 2600
  return (err == 0);
}
}
#line 2603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2607
  tmp = drbd_get_data_sock___0(mdev);
#line 2607
  if (tmp == 0) {
#line 2608
    return (-1);
  } else {

  }
#line 2609
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2609
  err = tmp___0 == 0;
#line 2610
  drbd_put_data_sock___0(mdev);
#line 2611
  return (err);
}
}
#line 2614 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2619
  p.barrier = barrier_nr;
#line 2620
  tmp = __fswab32(set_size);
#line 2620
  p.set_size = tmp;
#line 2622
  if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 2623
    return (0);
  } else {

  }
#line 2624
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2626
  return (ok);
}
}
#line 2637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2645
  p.sector = sector;
#line 2646
  p.block_id = block_id;
#line 2647
  p.blksize = blksize;
#line 2648
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2648
  tmp___0 = __fswab32((__u32 )tmp);
#line 2648
  p.seq_num = tmp___0;
#line 2650
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_39979.conn <= 9) {
#line 2651
    return (0);
  } else {

  }
#line 2652
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2654
  return (ok);
}
}
#line 2660 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2663
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2663
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2663
    tmp___0 = tmp;
  } else {
#line 2663
    tmp___0 = 0U;
  }
#line 2663
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2665
  tmp___1 = __fswab32((__u32 )data_size);
#line 2665
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2665
  return (tmp___2);
}
}
#line 2669 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2672
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2672
  return (tmp);
}
}
#line 2681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2684
  tmp = __fswab32(e->size);
#line 2684
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2684
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_49189.block_id);
#line 2684
  return (tmp___1);
}
}
#line 2692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2695
  tmp = __fswab64(block_id);
#line 2695
  tmp___0 = __fswab32((__u32 )blksize);
#line 2695
  tmp___1 = __fswab64((__u64 )sector);
#line 2695
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2695
  return (tmp___2);
}
}
#line 2701 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2707
  tmp = __fswab64((__u64 )sector);
#line 2707
  p.sector = tmp;
#line 2708
  p.block_id = block_id;
#line 2709
  tmp___0 = __fswab32((__u32 )size);
#line 2709
  p.blksize = tmp___0;
#line 2711
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2713
  return (ok);
}
}
#line 2716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2724
  tmp = __fswab64((__u64 )sector);
#line 2724
  p.sector = tmp;
#line 2725
  p.block_id = 1728263026ULL;
#line 2726
  tmp___0 = __fswab32((__u32 )size);
#line 2726
  p.blksize = tmp___0;
#line 2728
  p.head.magic = 1728214147U;
#line 2729
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2729
  p.head.command = tmp___1;
#line 2730
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2730
  p.head.length = tmp___2;
#line 2732
  ldv_mutex_lock_219(& mdev->data.mutex);
#line 2734
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2734
  ok = tmp___3 == 32;
#line 2735
  if (ok != 0) {
#line 2735
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2735
    if (tmp___4 == digest_size) {
#line 2735
      tmp___5 = 1;
    } else {
#line 2735
      tmp___5 = 0;
    }
  } else {
#line 2735
    tmp___5 = 0;
  }
#line 2735
  ok = tmp___5;
#line 2737
  ldv_mutex_unlock_220(& mdev->data.mutex);
#line 2739
  return (ok);
}
}
#line 2742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2747
  tmp = __fswab64((__u64 )sector);
#line 2747
  p.sector = tmp;
#line 2748
  p.block_id = 1728261953ULL;
#line 2749
  tmp___0 = __fswab32((__u32 )size);
#line 2749
  p.blksize = tmp___0;
#line 2751
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2753
  return (ok);
}
}
#line 2760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2765
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2765
    tmp___0 = 1;
  } else {
#line 2765
    tmp = get_t_state(& mdev->asender);
#line 2765
    if ((unsigned int )tmp != 1U) {
#line 2765
      tmp___0 = 1;
    } else
#line 2765
    if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 2765
      tmp___0 = 1;
    } else {
#line 2765
      tmp___0 = 0;
    }
  }
#line 2765
  drop_it = tmp___0;
#line 2770
  if (drop_it != 0) {
#line 2771
    return (1);
  } else {

  }
#line 2773
  mdev->ko_count = mdev->ko_count - 1U;
#line 2773
  drop_it = mdev->ko_count == 0U;
#line 2774
  if (drop_it == 0) {
#line 2775
    tmp___1 = get_current();
#line 2775
    tmp___2 = get_current();
#line 2775
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2777
    request_ping(mdev);
  } else {

  }
#line 2780
  return (drop_it);
}
}
#line 2804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2807
  tmp = kmap(page);
#line 2807
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2807
  sent = tmp___0;
#line 2808
  kunmap(page);
#line 2809
  if ((size_t )sent == size) {
#line 2810
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2811
  return ((size_t )sent == size);
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2817
  tmp = current_thread_info___2();
#line 2817
  oldfs = tmp->addr_limit;
#line 2819
  len = (int )size;
#line 2827
  if ((int )disable_sendpage) {
#line 2828
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2828
    return (tmp___0);
  } else {
#line 2827
    tmp___1 = page_count(page);
#line 2827
    if (tmp___1 <= 0) {
#line 2828
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2828
      return (tmp___0);
    } else {
#line 2827
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2827
      if (tmp___2 != 0) {
#line 2828
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2828
        return (tmp___0);
      } else {

      }
    }
  }
#line 2830
  msg_flags = msg_flags | 16384U;
#line 2831
  drbd_update_congested(mdev);
#line 2832
  tmp___3 = current_thread_info___2();
#line 2832
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2832
  tmp___3->addr_limit = __constr_expr_0;
  ldv_52614: 
#line 2834
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2834
  sent = (int )tmp___4;
#line 2837
  if (sent == -11) {
#line 2838
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2838
    if (tmp___5 != 0) {
#line 2840
      goto ldv_52611;
    } else {
#line 2842
      goto ldv_52612;
    }
  } else {

  }
#line 2844
  if (sent <= 0) {
#line 2845
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2847
    goto ldv_52611;
  } else {

  }
#line 2849
  len = len - sent;
#line 2850
  offset = offset + sent;
  ldv_52612: ;
#line 2851
  if (len > 0) {
#line 2852
    goto ldv_52614;
  } else {

  }
  ldv_52611: 
#line 2852
  tmp___6 = current_thread_info___2();
#line 2852
  tmp___6->addr_limit = oldfs;
#line 2853
  drbd_clear_flag(mdev, NET_CONGESTED);
#line 2855
  ok = len == 0;
#line 2856
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2856
  if (tmp___7 != 0L) {
#line 2857
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2858
  return (ok);
}
}
#line 2861 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2866
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2866
  i = (int )bio->bi_idx;
#line 2866
  goto ldv_52622;
  ldv_52621: 
#line 2867
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2867
  if (tmp == 0) {
#line 2870
    return (0);
  } else {

  }
#line 2866
  bvec = bvec + 1;
#line 2866
  i = i + 1;
  ldv_52622: ;
#line 2866
  if ((int )bio->bi_vcnt > i) {
#line 2867
    goto ldv_52621;
  } else {

  }

#line 2872
  return (1);
}
}
#line 2875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2880
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 2880
  i = (int )bio->bi_idx;
#line 2880
  goto ldv_52631;
  ldv_52630: 
#line 2881
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2881
  if (tmp == 0) {
#line 2884
    return (0);
  } else {

  }
#line 2880
  bvec = bvec + 1;
#line 2880
  i = i + 1;
  ldv_52631: ;
#line 2880
  if ((int )bio->bi_vcnt > i) {
#line 2881
    goto ldv_52630;
  } else {

  }

#line 2886
  return (1);
}
}
#line 2889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2891
  page = e->pages;
#line 2892
  len = e->size;
#line 2894
  goto ldv_52645;
  ldv_52644: 
#line 2895
  __min1 = len;
#line 2895
  __min2 = 4096U;
#line 2895
  l = __min1 < __min2 ? __min1 : __min2;
#line 2896
  tmp = page_chain_next(page);
#line 2896
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2896
  if (tmp___0 == 0) {
#line 2898
    return (0);
  } else {

  }
#line 2899
  len = len - l;
#line 2894
  page = page_chain_next(page);
  ldv_52645: ;
#line 2894
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2894
    tmp___1 = page_chain_next(page);
#line 2894
    __builtin_prefetch((void const   *)tmp___1);
#line 2894
    if (1 != 0) {
#line 2895
      goto ldv_52644;
    } else {
#line 2897
      goto ldv_52646;
    }
  } else {

  }
  ldv_52646: ;
#line 2901
  return (1);
}
}
#line 2904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2906
  if (mdev->agreed_pro_version > 94) {
#line 2907
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 2048UL) != 0UL ? 16 : 0)) | ((bi_rw & 4096UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2912
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2918 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2920
  ok = 1;
#line 2922
  dp_flags = 0U;
#line 2926
  tmp = drbd_get_data_sock___0(mdev);
#line 2926
  if (tmp == 0) {
#line 2927
    return (0);
  } else {

  }
#line 2929
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2929
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2929
    dgs = (int )tmp___0;
  } else {
#line 2929
    dgs = 0;
  }
#line 2932
  if (req->size <= 32768U) {
#line 2933
    p.head.h80.magic = 1728214147U;
#line 2934
    p.head.h80.command = 0U;
#line 2935
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2935
    p.head.h80.length = tmp___1;
  } else {
#line 2938
    p.head.h95.magic = 23171U;
#line 2939
    p.head.h95.command = 0U;
#line 2940
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2940
    p.head.h95.length = tmp___2;
  }
#line 2944
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2944
  p.sector = tmp___3;
#line 2945
  p.block_id = (u64 )req;
#line 2946
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2946
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2946
  p.seq_num = tmp___5;
#line 2948
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2950
  if ((int )mdev->state.ldv_39979.conn > 15 && (int )mdev->state.ldv_39979.conn <= 21) {
#line 2952
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2954
  tmp___6 = __fswab32(dp_flags);
#line 2954
  p.dp_flags = tmp___6;
#line 2955
  drbd_set_flag(mdev, UNPLUG_REMOTE);
#line 2956
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2956
  ok = tmp___7 == 32;
#line 2958
  if (ok != 0 && dgs != 0) {
#line 2959
    dgb = mdev->int_dig_out;
#line 2960
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2961
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2961
    ok = tmp___8 == dgs;
  } else {

  }
#line 2963
  if (ok != 0) {
#line 2975
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2976
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2978
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2981
    if (dgs > 0 && dgs <= 64) {
#line 2985
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2986
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2986
      if (tmp___9 != 0) {
#line 2987
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2996
  drbd_put_data_sock___0(mdev);
#line 2998
  return (ok);
}
}
#line 3005 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 3013
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 3013
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 3013
    dgs = (int )tmp;
  } else {
#line 3013
    dgs = 0;
  }
#line 3016
  if (e->size <= 32768U) {
#line 3017
    p.head.h80.magic = 1728214147U;
#line 3018
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 3018
    p.head.h80.command = tmp___0;
#line 3019
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 3019
    p.head.h80.length = tmp___1;
  } else {
#line 3022
    p.head.h95.magic = 23171U;
#line 3023
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 3023
    p.head.h95.command = tmp___2;
#line 3024
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 3024
    p.head.h95.length = tmp___3;
  }
#line 3028
  tmp___4 = __fswab64((__u64 )e->sector);
#line 3028
  p.sector = tmp___4;
#line 3029
  p.block_id = e->ldv_49189.block_id;
#line 3036
  tmp___5 = drbd_get_data_sock___0(mdev);
#line 3036
  if (tmp___5 == 0) {
#line 3037
    return (0);
  } else {

  }
#line 3039
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 3039
  ok = tmp___6 == 32;
#line 3040
  if (ok != 0 && dgs != 0) {
#line 3041
    dgb = mdev->int_dig_out;
#line 3042
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 3043
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 3043
    ok = tmp___7 == dgs;
  } else {

  }
#line 3045
  if (ok != 0) {
#line 3046
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 3048
  drbd_put_data_sock___0(mdev);
#line 3050
  return (ok);
}
}
#line 3053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 3057
  tmp = __fswab64((__u64 )req->sector);
#line 3057
  p.sector = tmp;
#line 3058
  tmp___0 = __fswab32(req->size);
#line 3058
  p.blksize = tmp___0;
#line 3060
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 3060
  return (tmp___1);
}
}
#line 3079 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 3084
  sent = 0;
#line 3086
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 3087
    return (-1000);
  } else {

  }
#line 3091
  iov.iov_base = buf;
#line 3092
  iov.iov_len = size;
#line 3094
  msg.msg_name = 0;
#line 3095
  msg.msg_namelen = 0;
#line 3096
  msg.msg_control = 0;
#line 3097
  msg.msg_controllen = 0UL;
#line 3098
  msg.msg_flags = msg_flags | 16384U;
#line 3100
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3101
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 3102
    drbd_update_congested(mdev);
  } else {

  }
  ldv_52688: 
#line 3114
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 3115
  if (rv == -11) {
#line 3116
    tmp = we_should_drop_the_connection(mdev, sock);
#line 3116
    if (tmp != 0) {
#line 3117
      goto ldv_52686;
    } else {
#line 3119
      goto ldv_52687;
    }
  } else {

  }
#line 3121
  if (rv == 0) {
#line 3121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3121);
  } else {

  }
#line 3122
  if (rv == -4) {
#line 3123
    tmp___0 = get_current();
#line 3123
    flush_signals(tmp___0);
#line 3124
    rv = 0;
  } else {

  }
#line 3126
  if (rv < 0) {
#line 3127
    goto ldv_52686;
  } else {

  }
#line 3128
  sent = sent + rv;
#line 3129
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 3130
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_52687: ;
#line 3131
  if ((size_t )sent < size) {
#line 3132
    goto ldv_52688;
  } else {

  }
  ldv_52686: ;
#line 3133
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 3134
    drbd_clear_flag(mdev, NET_CONGESTED);
  } else {

  }
#line 3136
  if (rv <= 0) {
#line 3137
    if (rv != -11) {
#line 3138
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 3141
      val.i = 0U;
#line 3141
      val.ldv_39979.conn = 4U;
#line 3141
      mask.i = 0U;
#line 3141
      mask.ldv_39979.conn = 31U;
#line 3141
      drbd_force_state(mdev, mask, val);
    } else {
#line 3143
      val___0.i = 0U;
#line 3143
      val___0.ldv_39979.conn = 3U;
#line 3143
      mask___0.i = 0U;
#line 3143
      mask___0.ldv_39979.conn = 31U;
#line 3143
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 3146
  return (sent);
}
}
#line 3149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 3151
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 3153
  rv = 0;
#line 3155
  ldv_mutex_lock_221(& drbd_main_mutex);
#line 3156
  tmp = spinlock_check(& mdev->req_lock);
#line 3156
  flags = _raw_spin_lock_irqsave(tmp);
#line 3160
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 3161
    if ((mode & 2U) != 0U) {
#line 3162
      rv = -30;
    } else
#line 3163
    if (! allow_oos) {
#line 3164
      rv = -124;
    } else {

    }
  } else {

  }
#line 3167
  if (rv == 0) {
#line 3168
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 3169
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 3170
  ldv_mutex_unlock_222(& drbd_main_mutex);
#line 3172
  return (rv);
}
}
#line 3175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3177
  mdev = (struct drbd_conf *)gd->private_data;
#line 3178
  ldv_mutex_lock_223(& drbd_main_mutex);
#line 3179
  mdev->open_cnt = mdev->open_cnt - 1;
#line 3180
  ldv_mutex_unlock_224(& drbd_main_mutex);
#line 3181
  return (0);
}
}
#line 3184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 3188
  __constr_expr_0.rate = 250;
#line 3188
  __constr_expr_0.after = -1;
#line 3188
  __constr_expr_0.al_extents = 127;
#line 3188
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 3188
  __constr_expr_0.verify_alg_len = 0;
#line 3188
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 3188
  __constr_expr_0.cpu_mask_len = 0;
#line 3188
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 3188
  __constr_expr_0.csums_alg_len = 0;
#line 3188
  __constr_expr_0.use_rle = 0U;
#line 3188
  __constr_expr_0.on_no_data = 0;
#line 3188
  __constr_expr_0.c_plan_ahead = 0;
#line 3188
  __constr_expr_0.c_delay_target = 10;
#line 3188
  __constr_expr_0.c_fill_target = 0;
#line 3188
  __constr_expr_0.c_max_rate = 102400;
#line 3188
  __constr_expr_0.c_min_rate = 4096;
#line 3188
  mdev->sync_conf = __constr_expr_0;
#line 3206
  __constr_expr_1.ldv_39979.role = 2U;
#line 3206
  __constr_expr_1.ldv_39979.peer = 0U;
#line 3206
  __constr_expr_1.ldv_39979.conn = 0U;
#line 3206
  __constr_expr_1.ldv_39979.disk = 0U;
#line 3206
  __constr_expr_1.ldv_39979.pdsk = 6U;
#line 3206
  __constr_expr_1.ldv_39979.susp = 0U;
#line 3206
  __constr_expr_1.ldv_39979.aftr_isp = (unsigned char)0;
#line 3206
  __constr_expr_1.ldv_39979.peer_isp = (unsigned char)0;
#line 3206
  __constr_expr_1.ldv_39979.user_isp = (unsigned char)0;
#line 3206
  __constr_expr_1.ldv_39979.susp_nod = 0U;
#line 3206
  __constr_expr_1.ldv_39979.susp_fen = 0U;
#line 3206
  __constr_expr_1.ldv_39979._pad = (unsigned short)0;
#line 3206
  mdev->state = __constr_expr_1;
#line 3207
  return;
}
}
#line 3218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;

  {
#line 3223
  drbd_set_defaults(mdev);
#line 3225
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 3226
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 3227
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3228
  atomic_set(& mdev->unacked_cnt, 0);
#line 3229
  atomic_set(& mdev->local_cnt, 0);
#line 3230
  atomic_set(& mdev->net_cnt, 0);
#line 3231
  atomic_set(& mdev->packet_seq, 0);
#line 3232
  atomic_set(& mdev->pp_in_use, 0);
#line 3233
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 3234
  atomic_set(& mdev->rs_sect_in, 0);
#line 3235
  atomic_set(& mdev->rs_sect_ev, 0);
#line 3236
  atomic_set(& mdev->ap_in_flight, 0);
#line 3237
  atomic_set(& mdev->md_io_in_use, 0);
#line 3239
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key);
#line 3240
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___0);
#line 3241
  sema_init(& mdev->data.work.s, 0);
#line 3242
  sema_init(& mdev->meta.work.s, 0);
#line 3243
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___1);
#line 3245
  spinlock_check(& mdev->data.work.q_lock);
#line 3245
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5957.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___2);
#line 3246
  spinlock_check(& mdev->meta.work.q_lock);
#line 3246
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5957.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___3);
#line 3248
  spinlock_check(& mdev->al_lock);
#line 3248
  __raw_spin_lock_init(& mdev->al_lock.ldv_5957.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___4);
#line 3249
  spinlock_check(& mdev->req_lock);
#line 3249
  __raw_spin_lock_init(& mdev->req_lock.ldv_5957.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___5);
#line 3250
  spinlock_check(& mdev->peer_seq_lock);
#line 3250
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5957.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___6);
#line 3251
  spinlock_check(& mdev->epoch_lock);
#line 3251
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5957.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___7);
#line 3253
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3254
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3255
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3256
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3257
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3258
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3259
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3260
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3261
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3262
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3263
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3264
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3265
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3266
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3268
  mdev->resync_work.cb = & w_resync_timer;
#line 3269
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3270
  mdev->go_diskless.cb = & w_go_diskless;
#line 3271
  mdev->md_sync_work.cb = & w_md_sync;
#line 3272
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3273
  mdev->start_resync_work.cb = & w_start_resync;
#line 3274
  init_timer_key(& mdev->resync_timer, 0U, "(&mdev->resync_timer)", & __key___8);
#line 3275
  init_timer_key(& mdev->md_sync_timer, 0U, "(&mdev->md_sync_timer)", & __key___9);
#line 3276
  init_timer_key(& mdev->start_resync_timer, 0U, "(&mdev->start_resync_timer)", & __key___10);
#line 3277
  init_timer_key(& mdev->request_timer, 0U, "(&mdev->request_timer)", & __key___11);
#line 3278
  mdev->resync_timer.function = & resync_timer_fn;
#line 3279
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3280
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3281
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3282
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3283
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3284
  mdev->request_timer.function = & request_timer_fn;
#line 3285
  mdev->request_timer.data = (unsigned long )mdev;
#line 3287
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___12);
#line 3288
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___13);
#line 3289
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___14);
#line 3290
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___15);
#line 3291
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___16);
#line 3292
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___17);
#line 3294
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3295
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3296
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3298
  mdev->agreed_pro_version = 97;
#line 3299
  mdev->write_ordering = WO_bdev_flush;
#line 3300
  mdev->resync_wenr = 4294967295U;
#line 3301
  mdev->peer_max_bio_size = 4096U;
#line 3302
  mdev->local_max_bio_size = 4096U;
#line 3303
  return;
}
}
#line 3305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3308
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3313
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3313
  if (tmp___0 != 0) {
#line 3314
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3314
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3315
  tmp___9 = 0UL;
#line 3315
  mdev->rs_failed = tmp___9;
#line 3315
  tmp___8 = tmp___9;
#line 3315
  mdev->rs_total = tmp___8;
#line 3315
  tmp___7 = tmp___8;
#line 3315
  mdev->rs_start = tmp___7;
#line 3315
  tmp___6 = tmp___7;
#line 3315
  mdev->p_size = tmp___6;
#line 3315
  tmp___5 = (unsigned int )tmp___6;
#line 3315
  mdev->writ_cnt = tmp___5;
#line 3315
  tmp___4 = tmp___5;
#line 3315
  mdev->send_cnt = tmp___4;
#line 3315
  tmp___3 = tmp___4;
#line 3315
  mdev->recv_cnt = tmp___3;
#line 3315
  tmp___2 = tmp___3;
#line 3315
  mdev->read_cnt = tmp___2;
#line 3315
  tmp___1 = tmp___2;
#line 3315
  mdev->bm_writ_cnt = tmp___1;
#line 3315
  mdev->al_writ_cnt = tmp___1;
#line 3325
  mdev->rs_last_events = 0;
#line 3326
  mdev->rs_last_sect_ev = 0;
#line 3327
  i = 0;
#line 3327
  goto ldv_52744;
  ldv_52743: 
#line 3328
  mdev->rs_mark_left[i] = 0UL;
#line 3329
  mdev->rs_mark_time[i] = 0UL;
#line 3327
  i = i + 1;
  ldv_52744: ;
#line 3327
  if (i <= 7) {
#line 3328
    goto ldv_52743;
  } else {

  }

#line 3331
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3331
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3331);
  } else {

  }
#line 3333
  drbd_set_my_capacity(mdev, 0UL);
#line 3334
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3336
    drbd_bm_resize(mdev, 0UL, 1);
#line 3337
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3340
  drbd_free_resources(mdev);
#line 3341
  drbd_clear_flag(mdev, AL_SUSPENDED);
#line 3347
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3347
  if (tmp___10 == 0) {
#line 3347
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3347);
  } else {

  }
#line 3348
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3348
  if (tmp___11 == 0) {
#line 3348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3348);
  } else {

  }
#line 3349
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3349
  if (tmp___12 == 0) {
#line 3349
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3349);
  } else {

  }
#line 3350
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3350
  if (tmp___13 == 0) {
#line 3350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3350);
  } else {

  }
#line 3351
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3351
  if (tmp___14 == 0) {
#line 3351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3351);
  } else {

  }
#line 3352
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3352
  if (tmp___15 == 0) {
#line 3352
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3352);
  } else {

  }
#line 3353
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3353
  if (tmp___16 == 0) {
#line 3353
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3353);
  } else {

  }
#line 3354
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3354
  if (tmp___17 == 0) {
#line 3354
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3354);
  } else {

  }
#line 3355
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3355
  if (tmp___18 == 0) {
#line 3355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3355);
  } else {

  }
#line 3356
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3356
  if (tmp___19 == 0) {
#line 3356
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3356);
  } else {

  }
#line 3357
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3357
  if (tmp___20 == 0) {
#line 3357
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3357);
  } else {

  }
#line 3359
  drbd_set_defaults(mdev);
#line 3360
  return;
}
}
#line 3363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3367
  goto ldv_52751;
  ldv_52750: 
#line 3368
  page = drbd_pp_pool;
#line 3369
  drbd_pp_pool = (struct page *)page->ldv_14722.private;
#line 3370
  __free_pages(page, 0U);
#line 3371
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_52751: ;
#line 3367
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3368
    goto ldv_52750;
  } else {

  }

#line 3376
  if ((unsigned long )drbd_md_io_bio_set != (unsigned long )((struct bio_set *)0)) {
#line 3377
    bioset_free(drbd_md_io_bio_set);
  } else {

  }
#line 3378
  if ((unsigned long )drbd_md_io_page_pool != (unsigned long )((mempool_t *)0)) {
#line 3379
    mempool_destroy(drbd_md_io_page_pool);
  } else {

  }
#line 3380
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3381
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3382
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3383
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3384
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3385
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3386
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3387
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3388
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3389
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3390
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3391
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3393
  drbd_md_io_bio_set = 0;
#line 3394
  drbd_md_io_page_pool = 0;
#line 3395
  drbd_ee_mempool = 0;
#line 3396
  drbd_request_mempool = 0;
#line 3397
  drbd_ee_cache = 0;
#line 3398
  drbd_request_cache = 0;
#line 3399
  drbd_bm_ext_cache = 0;
#line 3400
  drbd_al_ext_cache = 0;
#line 3402
  return;
}
}
#line 3405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3408
  number = (int const   )(minor_count * 32U);
#line 3412
  drbd_request_mempool = 0;
#line 3413
  drbd_ee_cache = 0;
#line 3414
  drbd_request_cache = 0;
#line 3415
  drbd_bm_ext_cache = 0;
#line 3416
  drbd_al_ext_cache = 0;
#line 3417
  drbd_pp_pool = 0;
#line 3418
  drbd_md_io_page_pool = 0;
#line 3419
  drbd_md_io_bio_set = 0;
#line 3422
  drbd_request_cache = kmem_cache_create("drbd_req", 112UL, 0UL, 0UL, 0);
#line 3424
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3425
    goto Enomem;
  } else {

  }
#line 3427
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3429
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3430
    goto Enomem;
  } else {

  }
#line 3432
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3434
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3435
    goto Enomem;
  } else {

  }
#line 3437
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3439
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3440
    goto Enomem;
  } else {

  }
#line 3449
  drbd_md_io_page_pool = mempool_create_page_pool(128, 0);
#line 3450
  if ((unsigned long )drbd_md_io_page_pool == (unsigned long )((mempool_t *)0)) {
#line 3451
    goto Enomem;
  } else {

  }
#line 3453
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3455
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3456
    goto Enomem;
  } else {

  }
#line 3458
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3460
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3461
    goto Enomem;
  } else {

  }
#line 3464
  spinlock_check(& drbd_pp_lock);
#line 3464
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5957.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3466
  i = 0;
#line 3466
  goto ldv_52762;
  ldv_52761: 
#line 3467
  page = alloc_pages(131282U, 0U);
#line 3468
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3469
    goto Enomem;
  } else {

  }
#line 3470
  page->ldv_14722.private = (unsigned long )drbd_pp_pool;
#line 3471
  drbd_pp_pool = page;
#line 3466
  i = i + 1;
  ldv_52762: ;
#line 3466
  if (i < number) {
#line 3467
    goto ldv_52761;
  } else {

  }
#line 3473
  drbd_pp_vacant = number;
#line 3475
  return (0);
  Enomem: 
#line 3478
  drbd_destroy_mempools();
#line 3479
  return (-12);
}
}
#line 3482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3489
  return (0);
}
}
#line 3492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3500
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3501
  if (rr != 0) {
#line 3502
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3504
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3505
  if (rr != 0) {
#line 3506
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3508
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3509
  if (rr != 0) {
#line 3510
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3512
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3513
  if (rr != 0) {
#line 3514
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3516
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3517
  if (rr != 0) {
#line 3518
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3519
  return;
}
}
#line 3523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3525
  tmp = minor_to_mdev(minor);
#line 3525
  mdev = tmp;
#line 3527
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3528
    return;
  } else {

  }
#line 3530
  del_timer_sync(& mdev->request_timer);
#line 3533
  if (mdev->open_cnt != 0) {
#line 3534
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3535);
  } else {

  }
#line 3537
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3537
  _b = tmp___0 == 0;
#line 3537
  if (_b != 0) {
#line 3537
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3537);
  } else {

  }
#line 3537
  if (_b != 0) {
#line 3539
    lp = mdev->data.work.q.next;
#line 3539
    goto ldv_52783;
    ldv_52782: 
#line 3540
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3539
    lp = lp->next;
    ldv_52783: ;
#line 3539
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3540
      goto ldv_52782;
    } else {

    }

  } else {

  }
#line 3545
  del_gendisk(mdev->vdisk);
#line 3550
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3551
    bdput(mdev->this_bdev);
  } else {

  }
#line 3553
  drbd_free_resources(mdev);
#line 3555
  drbd_release_ee_lists(mdev);
#line 3558
  kfree((void const   *)mdev->ee_hash);
#line 3564
  lc_destroy(mdev->act_log);
#line 3565
  lc_destroy(mdev->resync);
#line 3567
  kfree((void const   *)mdev->p_uuid);
#line 3570
  kfree((void const   *)mdev->int_dig_out);
#line 3571
  kfree((void const   *)mdev->int_dig_in);
#line 3572
  kfree((void const   *)mdev->int_dig_vv);
#line 3577
  drbd_free_mdev(mdev);
#line 3578
  return;
}
}
#line 3580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3584
  unregister_reboot_notifier(& drbd_notifier);
#line 3594
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3595
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3597
  drbd_nl_cleanup();
#line 3599
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3600
    i = minor_count;
#line 3601
    goto ldv_52790;
    ldv_52789: 
#line 3602
    drbd_delete_device(i);
    ldv_52790: 
#line 3601
    tmp = i;
#line 3601
    i = i - 1U;
#line 3601
    if (tmp != 0U) {
#line 3602
      goto ldv_52789;
    } else {

    }
#line 3603
    drbd_destroy_mempools();
  } else {

  }
#line 3606
  kfree((void const   *)minor_table);
#line 3608
  unregister_blkdev(147U, "drbd");
#line 3610
  printk("\016drbd: module cleanup done.\n");
#line 3611
  return;
}
}
#line 3620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3622
  mdev = (struct drbd_conf *)congested_data;
#line 3624
  reason = 45;
#line 3625
  r = 0;
#line 3627
  tmp = may_inc_ap_bio___0(mdev);
#line 3627
  if (tmp) {
#line 3627
    tmp___0 = 0;
  } else {
#line 3627
    tmp___0 = 1;
  }
#line 3627
  if (tmp___0) {
#line 3629
    r = bdi_bits;
#line 3630
    reason = 100;
#line 3631
    goto out;
  } else {

  }
#line 3634
  tmp___2 = drbd_test_flag(mdev, CALLBACK_PENDING);
#line 3634
  if (tmp___2 != 0) {
#line 3635
    r = r | 4;
#line 3641
    tmp___1 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 3641
    if (tmp___1 == 0) {
#line 3642
      r = r | 8;
    } else {
#line 3644
      put_ldev(mdev);
    }
#line 3645
    r = r & bdi_bits;
#line 3646
    reason = 99;
#line 3647
    goto out;
  } else {

  }
#line 3650
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3650
  if (tmp___3 != 0) {
#line 3651
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3652
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3653
    put_ldev(mdev);
#line 3654
    if (r != 0) {
#line 3655
      reason = 98;
    } else {

    }
  } else {

  }
#line 3658
  if ((bdi_bits & 4) != 0) {
#line 3658
    tmp___4 = drbd_test_flag(mdev, NET_CONGESTED);
#line 3658
    if (tmp___4 != 0) {
#line 3659
      r = r | 4;
#line 3660
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3664
  mdev->congestion_reason = reason;
#line 3665
  return (r);
}
}
#line 3668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3675
  tmp = kzalloc(4736UL, 208U);
#line 3675
  mdev = (struct drbd_conf *)tmp;
#line 3676
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3677
    return (0);
  } else {

  }
#line 3678
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3678
  if (tmp___0) {
#line 3678
    tmp___1 = 0;
  } else {
#line 3678
    tmp___1 = 1;
  }
#line 3678
  if (tmp___1) {
#line 3679
    goto out_no_cpumask;
  } else {

  }
#line 3681
  mdev->minor = minor;
#line 3683
  drbd_init_set_defaults(mdev);
#line 3685
  q = blk_alloc_queue(208U);
#line 3686
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3687
    goto out_no_q;
  } else {

  }
#line 3688
  mdev->rq_queue = q;
#line 3689
  q->queuedata = (void *)mdev;
#line 3691
  disk = alloc_disk(1);
#line 3692
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3693
    goto out_no_disk;
  } else {

  }
#line 3694
  mdev->vdisk = disk;
#line 3696
  set_disk_ro(disk, 1);
#line 3698
  disk->queue = q;
#line 3699
  disk->major = 147;
#line 3700
  disk->first_minor = (int )minor;
#line 3701
  disk->fops = & drbd_ops;
#line 3702
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3703
  disk->private_data = (void *)mdev;
#line 3705
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3707
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3709
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3710
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3712
  blk_queue_make_request(q, & drbd_make_request);
#line 3713
  blk_queue_flush(q, 6144U);
#line 3716
  blk_queue_max_hw_sectors(q, 16U);
#line 3717
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3718
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3719
  q->queue_lock = & mdev->req_lock;
#line 3721
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3722
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3723
    goto out_no_io_page;
  } else {

  }
#line 3725
  tmp___2 = drbd_bm_init(mdev);
#line 3725
  if (tmp___2 != 0) {
#line 3726
    goto out_no_bitmap;
  } else {

  }
#line 3728
  tmp___3 = tl_init(mdev);
#line 3728
  if (tmp___3 == 0) {
#line 3729
    goto out_no_tl;
  } else {

  }
#line 3731
  tmp___4 = kzalloc(120UL, 208U);
#line 3731
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3732
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3733
    goto out_no_app_reads;
  } else {

  }
#line 3735
  tmp___5 = kzalloc(40UL, 208U);
#line 3735
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3736
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3737
    goto out_no_epoch;
  } else {

  }
#line 3739
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3740
  mdev->epochs = 1U;
#line 3742
  return (mdev);
  out_no_epoch: 
#line 3747
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3749
  tl_cleanup(mdev);
  out_no_tl: 
#line 3751
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3753
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3755
  put_disk(disk);
  out_no_disk: 
#line 3757
  blk_cleanup_queue(q);
  out_no_q: 
#line 3759
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3761
  kfree((void const   *)mdev);
#line 3762
  return (0);
}
}
#line 3767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3769
  kfree((void const   *)mdev->current_epoch);
#line 3770
  kfree((void const   *)mdev->app_reads_hash);
#line 3771
  tl_cleanup(mdev);
#line 3772
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3773
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3774
  __free_pages(mdev->md_io_page, 0U);
#line 3775
  put_disk(mdev->vdisk);
#line 3776
  blk_cleanup_queue(mdev->rq_queue);
#line 3777
  free_cpumask_var(mdev->cpu_mask);
#line 3778
  drbd_free_tl_hash(mdev);
#line 3779
  kfree((void const   *)mdev);
#line 3780
  return;
}
}
#line 3783 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3794
  if (minor_count == 0U || minor_count > 256U) {
#line 3795
    printk("\vdrbd: invalid minor_count (%d)\n", minor_count);
#line 3798
    return (-22);
  } else {

  }
#line 3804
  err = drbd_nl_init();
#line 3805
  if (err != 0) {
#line 3806
    return (err);
  } else {

  }
#line 3808
  err = register_blkdev(147U, "drbd");
#line 3809
  if (err != 0) {
#line 3810
    printk("\vdrbd: unable to register block device major %d\n", 147);
#line 3813
    return (err);
  } else {

  }
#line 3816
  register_reboot_notifier(& drbd_notifier);
#line 3821
  err = -12;
#line 3823
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3825
  drbd_proc = 0;
#line 3826
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3826
  minor_table = (struct drbd_conf **)tmp;
#line 3828
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3829
    goto Enomem;
  } else {

  }
#line 3831
  err = drbd_create_mempools();
#line 3832
  if (err != 0) {
#line 3833
    goto Enomem;
  } else {

  }
#line 3835
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3836
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3837
    printk("\vdrbd: unable to register proc file\n");
#line 3838
    goto Enomem;
  } else {

  }
#line 3841
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3843
  printk("\016drbd: initialized. Version: 8.3.13 (api:%d/proto:%d-%d)\n", 88, 86,
         97);
#line 3846
  tmp___0 = drbd_buildtag();
#line 3846
  printk("\016drbd: %s\n", tmp___0);
#line 3847
  printk("\016drbd: registered as block device major %d\n", 147);
#line 3849
  printk("\016drbd: minor_table @ 0x%p\n", minor_table);
#line 3851
  return (0);
  Enomem: 
#line 3854
  drbd_cleanup();
#line 3855
  if (err == -12) {
#line 3857
    printk("\vdrbd: ran out of memory\n");
  } else {
#line 3859
    printk("\vdrbd: initialization failure\n");
  }
#line 3860
  return (err);
}
}
#line 3863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3865
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3866
    return;
  } else {

  }
#line 3868
  blkdev_put(ldev->backing_bdev, 131U);
#line 3869
  blkdev_put(ldev->md_bdev, 131U);
#line 3871
  kfree((void const   *)ldev);
#line 3872
  return;
}
}
#line 3874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3876
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3877
    ldv_mutex_lock_225(& mdev->data.mutex);
#line 3878
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3879
    sock_release(mdev->data.socket);
#line 3880
    mdev->data.socket = 0;
#line 3881
    ldv_mutex_unlock_226(& mdev->data.mutex);
  } else {

  }
#line 3883
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3884
    ldv_mutex_lock_227(& mdev->meta.mutex);
#line 3885
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3886
    sock_release(mdev->meta.socket);
#line 3887
    mdev->meta.socket = 0;
#line 3888
    ldv_mutex_unlock_228(& mdev->meta.mutex);
  } else {

  }
#line 3890
  return;
}
}
#line 3893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3895
  crypto_free_hash(mdev->csums_tfm);
#line 3896
  mdev->csums_tfm = 0;
#line 3897
  crypto_free_hash(mdev->verify_tfm);
#line 3898
  mdev->verify_tfm = 0;
#line 3899
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3900
  mdev->cram_hmac_tfm = 0;
#line 3901
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3902
  mdev->integrity_w_tfm = 0;
#line 3903
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3904
  mdev->integrity_r_tfm = 0;
#line 3906
  drbd_free_sock(mdev);
#line 3908
  drbd_free_bc(mdev->ldev);
#line 3908
  mdev->ldev = 0;
#line 3909
  return;
}
}
#line 3937 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3943
  del_timer(& mdev->md_sync_timer);
#line 3945
  tmp = drbd_test_and_clear_flag(mdev, MD_DIRTY);
#line 3945
  if (tmp == 0) {
#line 3946
    return;
  } else {

  }
#line 3950
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3950
  if (tmp___0 == 0) {
#line 3951
    return;
  } else {

  }
#line 3953
  tmp___1 = drbd_md_get_buffer(mdev);
#line 3953
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3954
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 3955
    goto out;
  } else {

  }
#line 3957
  memset((void *)buffer, 0, 512UL);
#line 3959
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3959
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3959
  buffer->la_size = tmp___3;
#line 3960
  i = 0;
#line 3960
  goto ldv_52856;
  ldv_52855: 
#line 3961
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3961
  buffer->uuid[i] = tmp___4;
#line 3960
  i = i + 1;
  ldv_52856: ;
#line 3960
  if (i <= 3) {
#line 3961
    goto ldv_52855;
  } else {

  }
#line 3962
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3962
  buffer->flags = tmp___5;
#line 3963
  buffer->magic = 1795323011U;
#line 3965
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3965
  buffer->md_size_sect = tmp___6;
#line 3966
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3966
  buffer->al_offset = tmp___7;
#line 3967
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3967
  buffer->al_nr_extents = tmp___8;
#line 3968
  buffer->bm_bytes_per_bit = 1048576U;
#line 3969
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3969
  buffer->device_uuid = tmp___9;
#line 3971
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3971
  buffer->bm_offset = tmp___10;
#line 3972
  tmp___11 = __fswab32(mdev->peer_max_bio_size);
#line 3972
  buffer->la_peer_max_bio_size = tmp___11;
#line 3974
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3974
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3974
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            3974);
  } else {

  }
#line 3975
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3977
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3977
  if (tmp___13 == 0) {
#line 3979
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3980
    drbd_chk_io_error____1(mdev, 1, DRBD_META_IO_ERROR, "drbd_md_sync");
  } else {

  }
#line 3985
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3985
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3987
  drbd_md_put_buffer(mdev);
  out: 
#line 3989
  put_ldev(mdev);
#line 3990
  return;
}
}
#line 4000 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  unsigned int peer ;
  __u32 tmp___16 ;
  unsigned int _max1 ;
  unsigned int _max2 ;

  {
#line 4003
  rv = 101;
#line 4005
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4005
  if (tmp == 0) {
#line 4006
    return (118);
  } else {

  }
#line 4008
  tmp___0 = drbd_md_get_buffer(mdev);
#line 4008
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 4009
  if ((unsigned long )buffer == (unsigned long )((struct meta_data_on_disk *)0)) {
#line 4010
    goto out;
  } else {

  }
#line 4012
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 4012
  if (tmp___1 == 0) {
#line 4015
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 4016
    rv = 118;
#line 4017
    goto err;
  } else {

  }
#line 4020
  tmp___2 = __fswab32(buffer->magic);
#line 4020
  if (tmp___2 != 2205418091U) {
#line 4021
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 4022
    rv = 119;
#line 4023
    goto err;
  } else {

  }
#line 4025
  tmp___4 = __fswab32(buffer->al_offset);
#line 4025
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 4026
    tmp___3 = __fswab32(buffer->al_offset);
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 4028
    rv = 119;
#line 4029
    goto err;
  } else {

  }
#line 4031
  tmp___6 = __fswab32(buffer->bm_offset);
#line 4031
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 4032
    tmp___5 = __fswab32(buffer->bm_offset);
#line 4032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 4034
    rv = 119;
#line 4035
    goto err;
  } else {

  }
#line 4037
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 4037
  if (tmp___8 != bdev->md.md_size_sect) {
#line 4038
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 4038
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 4040
    rv = 119;
#line 4041
    goto err;
  } else {

  }
#line 4044
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 4044
  if (tmp___10 != 4096U) {
#line 4045
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 4045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 4047
    rv = 119;
#line 4048
    goto err;
  } else {

  }
#line 4051
  tmp___11 = __fswab64(buffer->la_size);
#line 4051
  bdev->md.la_size_sect = tmp___11;
#line 4052
  i = 0;
#line 4052
  goto ldv_52869;
  ldv_52868: 
#line 4053
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 4053
  bdev->md.uuid[i] = tmp___12;
#line 4052
  i = i + 1;
  ldv_52869: ;
#line 4052
  if (i <= 3) {
#line 4053
    goto ldv_52868;
  } else {

  }
#line 4054
  tmp___13 = __fswab32(buffer->flags);
#line 4054
  bdev->md.flags = tmp___13;
#line 4055
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 4055
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 4056
  tmp___15 = __fswab64(buffer->device_uuid);
#line 4056
  bdev->md.device_uuid = tmp___15;
#line 4058
  spin_lock_irq(& mdev->req_lock);
#line 4059
  if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 4061
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 4061
    peer = tmp___16;
#line 4062
    _max1 = peer;
#line 4062
    _max2 = 4096U;
#line 4062
    peer = _max1 > _max2 ? _max1 : _max2;
#line 4063
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 4065
  spin_unlock_irq(& mdev->req_lock);
#line 4067
  if (mdev->sync_conf.al_extents <= 6) {
#line 4068
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 4071
  drbd_md_put_buffer(mdev);
  out: 
#line 4073
  put_ldev(mdev);
#line 4075
  return (rv);
}
}
#line 4096 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4098
  tmp = drbd_test_and_set_flag(mdev, MD_DIRTY);
#line 4098
  if (tmp == 0) {
#line 4099
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 4100
  return;
}
}
#line 4103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 4107
  i = 2;
#line 4107
  goto ldv_52883;
  ldv_52882: 
#line 4108
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 4107
  i = i + 1;
  ldv_52883: ;
#line 4107
  if (i <= 2) {
#line 4108
    goto ldv_52882;
  } else {

  }

#line 4112
  return;
}
}
#line 4111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void __drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 4113
  if (idx == 0) {
#line 4114
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 4115
      val = val | 1ULL;
    } else {
#line 4117
      val = val & 0xfffffffffffffffeULL;
    }
#line 4119
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 4122
  (mdev->ldev)->md.uuid[idx] = val;
#line 4123
  drbd_md_mark_dirty(mdev);
#line 4124
  return;
}
}
#line 4126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 4129
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4129
  flags = _raw_spin_lock_irqsave(tmp);
#line 4130
  __drbd_uuid_set(mdev, idx, val);
#line 4131
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4132
  return;
}
}
#line 4134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 4137
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4137
  flags = _raw_spin_lock_irqsave(tmp);
#line 4138
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 4139
    drbd_uuid_move_history(mdev);
#line 4140
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 4142
  __drbd_uuid_set(mdev, idx, val);
#line 4143
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4144
  return;
}
}
#line 4153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 4158
  get_random_bytes((void *)(& val), 8);
#line 4160
  spin_lock_irq(& (mdev->ldev)->md.uuid_lock);
#line 4161
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4163
  if (bm_uuid != 0ULL) {
#line 4164
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 4166
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 4167
  __drbd_uuid_set(mdev, 0, val);
#line 4168
  spin_unlock_irq(& (mdev->ldev)->md.uuid_lock);
#line 4170
  drbd_print_uuids(mdev, "new current UUID");
#line 4172
  drbd_md_sync(mdev);
#line 4173
  return;
}
}
#line 4175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned long long bm_uuid ;

  {
#line 4178
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 4179
    return;
  } else {

  }
#line 4181
  tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 4181
  flags = _raw_spin_lock_irqsave(tmp);
#line 4182
  if (val == 0ULL) {
#line 4183
    drbd_uuid_move_history(mdev);
#line 4184
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 4185
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 4187
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 4188
    if (bm_uuid != 0ULL) {
#line 4189
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 4191
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 4193
  spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 4195
  drbd_md_mark_dirty(mdev);
#line 4196
  return;
}
}
#line 4204 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4206
  rv = -5;
#line 4208
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4208
  if (tmp != 0) {
#line 4209
    drbd_md_set_flag(mdev, 8);
#line 4210
    drbd_md_sync(mdev);
#line 4211
    drbd_bm_set_all(mdev);
#line 4213
    rv = drbd_bm_write(mdev);
#line 4215
    if (rv == 0) {
#line 4216
      drbd_md_clear_flag(mdev, 8);
#line 4217
      drbd_md_sync(mdev);
    } else {

    }
#line 4220
    put_ldev(mdev);
  } else {

  }
#line 4223
  return (rv);
}
}
#line 4232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 4234
  rv = -5;
#line 4236
  drbd_resume_al(mdev);
#line 4237
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 4237
  if (tmp != 0) {
#line 4238
    drbd_bm_clear_all(mdev);
#line 4239
    rv = drbd_bm_write(mdev);
#line 4240
    put_ldev(mdev);
  } else {

  }
#line 4243
  return (rv);
}
}
#line 4246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 4248
  __mptr = (struct drbd_work  const  *)w;
#line 4248
  work = (struct bm_io_work *)__mptr;
#line 4249
  rv = -5;
#line 4251
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4251
  if (tmp != 0) {
#line 4251
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4251);
  } else {

  }
#line 4253
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4253
  if (tmp___0 != 0) {
#line 4254
    drbd_bm_lock(mdev, work->why, work->flags);
#line 4255
    rv = (*(work->io_fn))(mdev);
#line 4256
    drbd_bm_unlock(mdev);
#line 4257
    put_ldev(mdev);
  } else {

  }
#line 4260
  drbd_clear_flag(mdev, BITMAP_IO);
#line 4261
  __asm__  volatile   ("": : : "memory");
#line 4262
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 4264
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 4265
    (*(work->done))(mdev, rv);
  } else {

  }
#line 4267
  drbd_clear_flag(mdev, BITMAP_IO_QUEUED);
#line 4268
  work->why = 0;
#line 4269
  work->flags = 0;
#line 4271
  return (1);
}
}
#line 4274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 4276
  lc_destroy(mdev->resync);
#line 4277
  mdev->resync = 0;
#line 4278
  lc_destroy(mdev->act_log);
#line 4279
  mdev->act_log = 0;
#line 4280
  drbd_free_bc(mdev->ldev);
#line 4280
  mdev->ldev = 0;
#line 4284
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 4285
    __free_pages(mdev->md_io_tmpp, 0U);
#line 4286
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 4288
  drbd_clear_flag(mdev, GO_DISKLESS);
#line 4289
  return;
}
}
#line 4291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  int tmp ;
  int tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 4293
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4293);
  } else {

  }
#line 4308
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 4309
    tmp___0 = drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"detach",
                                         BM_LOCKED_MASK);
#line 4309
    if (tmp___0 != 0) {
#line 4311
      tmp = drbd_test_flag(mdev, WAS_READ_ERROR);
#line 4311
      if (tmp != 0) {
#line 4312
        drbd_md_set_flag(mdev, 8);
#line 4313
        drbd_md_sync(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4318
  val.i = 0U;
#line 4318
  val.ldv_39979.disk = 0U;
#line 4318
  mask.i = 0U;
#line 4318
  mask.ldv_39979.disk = 15U;
#line 4318
  drbd_force_state(mdev, mask, val);
#line 4319
  return (1);
}
}
#line 4322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4324
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4324);
  } else {

  }
#line 4325
  tmp = drbd_test_and_set_flag(mdev, GO_DISKLESS);
#line 4325
  if (tmp == 0) {
#line 4326
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4327
  return;
}
}
#line 4341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4346
  tmp = get_current();
#line 4346
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4346);
  } else {

  }
#line 4348
  tmp___0 = drbd_test_flag(mdev, BITMAP_IO_QUEUED);
#line 4348
  if (tmp___0 != 0) {
#line 4348
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !drbd_test_flag(mdev, BITMAP_IO_QUEUED) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4348);
  } else {

  }
#line 4349
  tmp___1 = drbd_test_flag(mdev, BITMAP_IO);
#line 4349
  if (tmp___1 != 0) {
#line 4349
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !drbd_test_flag(mdev, BITMAP_IO) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4349);
  } else {

  }
#line 4350
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4350
  if (tmp___2 == 0) {
#line 4350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4350);
  } else {

  }
#line 4351
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4352
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4355
  mdev->bm_io_work.io_fn = io_fn;
#line 4356
  mdev->bm_io_work.done = done;
#line 4357
  mdev->bm_io_work.why = why;
#line 4358
  mdev->bm_io_work.flags = flags;
#line 4360
  spin_lock_irq(& mdev->req_lock);
#line 4361
  drbd_set_flag(mdev, BITMAP_IO);
#line 4362
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4362
  if (tmp___4 == 0) {
#line 4363
    tmp___3 = drbd_test_and_set_flag(mdev, BITMAP_IO_QUEUED);
#line 4363
    if (tmp___3 == 0) {
#line 4364
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4366
  spin_unlock_irq(& mdev->req_lock);
#line 4367
  return;
}
}
#line 4378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4383
  tmp = get_current();
#line 4383
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4383
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared",
            4383);
  } else {

  }
#line 4385
  if (((unsigned int )flags & 9U) == 0U) {
#line 4386
    drbd_suspend_io(mdev);
  } else {

  }
#line 4388
  drbd_bm_lock(mdev, why, flags);
#line 4389
  rv = (*io_fn)(mdev);
#line 4390
  drbd_bm_unlock(mdev);
#line 4392
  if (((unsigned int )flags & 9U) == 0U) {
#line 4393
    drbd_resume_io(mdev);
  } else {

  }
#line 4395
  return (rv);
}
}
#line 4398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4400
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4401
    drbd_md_mark_dirty(mdev);
#line 4402
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4404
  return;
}
}
#line 4406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4408
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4409
    drbd_md_mark_dirty(mdev);
#line 4410
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4412
  return;
}
}
#line 4413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4415
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4420
  mdev = (struct drbd_conf *)data;
#line 4422
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4423
  return;
}
}
#line 4425 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4427
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4432
  drbd_md_sync(mdev);
#line 4433
  return (1);
}
}
#line 4453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4457
  tmp = rsp->count;
#line 4457
  rsp->count = rsp->count - 1UL;
#line 4457
  if (tmp == 0UL) {
#line 4458
    get_random_bytes((void *)(& refresh), 8);
#line 4459
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4460
    rsp->count = 10000UL;
  } else {

  }
#line 4462
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4463
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4463
  return ((unsigned long )tmp___0);
}
}
#line 4467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4468
  _faults[0] = (char *)"Meta-data write";
#line 4468
  _faults[1] = (char *)"Meta-data read";
#line 4468
  _faults[2] = (char *)"Resync write";
#line 4468
  _faults[3] = (char *)"Resync read";
#line 4468
  _faults[4] = (char *)"Data write";
#line 4468
  _faults[5] = (char *)"Data read";
#line 4468
  _faults[6] = (char *)"Data read ahead";
#line 4468
  _faults[7] = (char *)"BM allocation";
#line 4468
  _faults[8] = (char *)"EE allocation";
#line 4468
  _faults[9] = (char *)"receive data corruption";
#line 4481
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4487
  rrs.state = 0UL;
#line 4487
  rrs.count = 0UL;
#line 4489
  if (fault_devs == 0) {
#line 4489
    goto _L;
  } else {
#line 4489
    tmp = mdev_to_minor(mdev);
#line 4489
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4489
      tmp___0 = _drbd_fault_random(& rrs);
#line 4489
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4489
        tmp___1 = 1;
      } else {
#line 4489
        tmp___1 = 0;
      }
    } else {
#line 4489
      tmp___1 = 0;
    }
  }
#line 4489
  ret = (unsigned int )tmp___1;
#line 4494
  if (ret != 0U) {
#line 4495
    fault_count = fault_count + 1;
#line 4497
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4497
    if (tmp___3 != 0) {
#line 4498
      tmp___2 = _drbd_fault_str(type);
#line 4498
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4502
  return (ret);
}
}
#line 4506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4511
  buildtag[0] = '\000';
#line 4511
  tmp = 1U;
#line 4511
  while (1) {
#line 4511
    if (tmp >= 38U) {
#line 4511
      break;
    } else {

    }
#line 4511
    buildtag[tmp] = (char)0;
#line 4511
    tmp = tmp + 1U;
  }
#line 4513
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4515
    sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
  } else {

  }
#line 4521
  return ((char const   *)(& buildtag));
}
}
#line 4569 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_73_p1 ;
  int res_drbd_open_73 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_74_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_80_p1 ;
  void *var_drbd_notify_sys_80_p2 ;
  unsigned long var_md_sync_timer_fn_110_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4768
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4725
  LDV_IN_INTERRUPT = 1;
#line 4734
  ldv_initialize();
#line 4750
  ldv_handler_precall();
#line 4751
  tmp = drbd_init();
#line 4751
  if (tmp != 0) {
#line 4752
    goto ldv_final;
  } else {

  }
#line 4775
  goto ldv_53080;
  ldv_53079: 
#line 4779
  tmp___0 = nondet_int();
#line 4779
  switch (tmp___0) {
  case 0: ;
#line 4784
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4797
    ldv_handler_precall();
#line 4798
    res_drbd_open_73 = drbd_open(var_group1, var_drbd_open_73_p1);
#line 4799
    ldv_check_return_value(res_drbd_open_73);
#line 4800
    if (res_drbd_open_73 != 0) {
#line 4801
      goto ldv_module_exit;
    } else {

    }
#line 4822
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4828
  goto ldv_53074;
  case 1: ;
#line 4832
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4845
    ldv_handler_precall();
#line 4846
    drbd_release(var_group2, var_drbd_release_74_p1);
#line 4867
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4873
  goto ldv_53074;
  case 2: 
#line 4892
  ldv_handler_precall();
#line 4893
  drbd_notify_sys(var_group3, var_drbd_notify_sys_80_p1, var_drbd_notify_sys_80_p2);
#line 4918
  goto ldv_53074;
  case 3: 
#line 4943
  ldv_handler_precall();
#line 4944
  md_sync_timer_fn(var_md_sync_timer_fn_110_p0);
#line 4963
  goto ldv_53074;
  default: ;
#line 4964
  goto ldv_53074;
  }
  ldv_53074: ;
  ldv_53080: 
#line 4775
  tmp___1 = nondet_int();
#line 4775
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4777
    goto ldv_53079;
  } else {

  }

  ldv_module_exit: 
#line 4986
  ldv_handler_precall();
#line 4987
  drbd_cleanup();
  ldv_final: 
#line 5008
  ldv_check_final_state();
#line 5011
  return;
}
}
#line 5015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_193(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5020
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 5022
  mutex_lock(ldv_func_arg1);
#line 5023
  return;
}
}
#line 5025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_194(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5030
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 5032
  mutex_unlock(ldv_func_arg1);
#line 5033
  return;
}
}
#line 5035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_195(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5040
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 5042
  mutex_lock(ldv_func_arg1);
#line 5043
  return;
}
}
#line 5045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_mutex_trylock_196(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 5050
  tmp = mutex_trylock(ldv_func_arg1);
#line 5050
  ldv_func_res = tmp;
#line 5052
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 5052
  return (tmp___0);
#line 5054
  return (ldv_func_res);
}
}
#line 5057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_197(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5062
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 5064
  mutex_unlock(ldv_func_arg1);
#line 5065
  return;
}
}
#line 5067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_198(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5072
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 5074
  mutex_lock(ldv_func_arg1);
#line 5075
  return;
}
}
#line 5077 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_199(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5082
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 5084
  mutex_unlock(ldv_func_arg1);
#line 5085
  return;
}
}
#line 5087 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_200(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5092
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 5094
  mutex_lock(ldv_func_arg1);
#line 5095
  return;
}
}
#line 5097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_201(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5102
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 5104
  mutex_unlock(ldv_func_arg1);
#line 5105
  return;
}
}
#line 5107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_202(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5112
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5114
  mutex_lock(ldv_func_arg1);
#line 5115
  return;
}
}
#line 5117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_203(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5122
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 5124
  mutex_unlock(ldv_func_arg1);
#line 5125
  return;
}
}
#line 5127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_204(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5132
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5134
  mutex_lock(ldv_func_arg1);
#line 5135
  return;
}
}
#line 5137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_205(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5142
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5144
  mutex_unlock(ldv_func_arg1);
#line 5145
  return;
}
}
#line 5147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_206(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5152
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5154
  mutex_unlock(ldv_func_arg1);
#line 5155
  return;
}
}
#line 5157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_207(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5162
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5164
  mutex_lock(ldv_func_arg1);
#line 5165
  return;
}
}
#line 5167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_208(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5172
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 5174
  mutex_unlock(ldv_func_arg1);
#line 5175
  return;
}
}
#line 5177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_209(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5182
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5184
  mutex_lock(ldv_func_arg1);
#line 5185
  return;
}
}
#line 5187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_210(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5192
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5194
  mutex_lock(ldv_func_arg1);
#line 5195
  return;
}
}
#line 5197 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_211(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5202
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5204
  mutex_unlock(ldv_func_arg1);
#line 5205
  return;
}
}
#line 5207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_212(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5212
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5214
  mutex_unlock(ldv_func_arg1);
#line 5215
  return;
}
}
#line 5217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_213(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5222
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5224
  mutex_lock(ldv_func_arg1);
#line 5225
  return;
}
}
#line 5227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_214(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5232
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5234
  mutex_unlock(ldv_func_arg1);
#line 5235
  return;
}
}
#line 5237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_215(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5242
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5244
  mutex_lock(ldv_func_arg1);
#line 5245
  return;
}
}
#line 5247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_216(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5252
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5254
  mutex_unlock(ldv_func_arg1);
#line 5255
  return;
}
}
#line 5257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_217(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5262
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5264
  mutex_lock(ldv_func_arg1);
#line 5265
  return;
}
}
#line 5267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_218(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5272
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5274
  mutex_unlock(ldv_func_arg1);
#line 5275
  return;
}
}
#line 5277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_219(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5282
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5284
  mutex_lock(ldv_func_arg1);
#line 5285
  return;
}
}
#line 5287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_220(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5292
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5294
  mutex_unlock(ldv_func_arg1);
#line 5295
  return;
}
}
#line 5297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_221(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5302
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5304
  mutex_lock(ldv_func_arg1);
#line 5305
  return;
}
}
#line 5307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_222(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5312
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5314
  mutex_unlock(ldv_func_arg1);
#line 5315
  return;
}
}
#line 5317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_223(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5322
  ldv_mutex_lock_drbd_main_mutex(ldv_func_arg1);
#line 5324
  mutex_lock(ldv_func_arg1);
#line 5325
  return;
}
}
#line 5327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_224(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5332
  ldv_mutex_unlock_drbd_main_mutex(ldv_func_arg1);
#line 5334
  mutex_unlock(ldv_func_arg1);
#line 5335
  return;
}
}
#line 5337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_225(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5342
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5344
  mutex_lock(ldv_func_arg1);
#line 5345
  return;
}
}
#line 5347 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_226(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5352
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5354
  mutex_unlock(ldv_func_arg1);
#line 5355
  return;
}
}
#line 5357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_lock_227(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5362
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5364
  mutex_lock(ldv_func_arg1);
#line 5365
  return;
}
}
#line 5367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_mutex_unlock_228(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 5372
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 5374
  mutex_unlock(ldv_func_arg1);
#line 5375
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_268(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_266(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_269(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_271(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_273(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_275(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_265(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_267(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_270(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_272(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_274(struct mutex *ldv_func_arg1 ) ;
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 99
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 132
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 144
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 168
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 173
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 178
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 183
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_265(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 193
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 195
  mutex_lock(ldv_func_arg1);
#line 196
  return;
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_266(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 203
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 205
  mutex_unlock(ldv_func_arg1);
#line 206
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_267(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 213
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 215
  mutex_lock(ldv_func_arg1);
#line 216
  return;
}
}
#line 218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
int ldv_mutex_trylock_268(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 223
  tmp = mutex_trylock(ldv_func_arg1);
#line 223
  ldv_func_res = tmp;
#line 225
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 225
  return (tmp___0);
#line 227
  return (ldv_func_res);
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_269(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 235
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 237
  mutex_unlock(ldv_func_arg1);
#line 238
  return;
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_270(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 245
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 247
  mutex_lock(ldv_func_arg1);
#line 248
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_271(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 255
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 257
  mutex_unlock(ldv_func_arg1);
#line 258
  return;
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_272(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 265
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 267
  mutex_lock(ldv_func_arg1);
#line 268
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_273(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 275
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 277
  mutex_unlock(ldv_func_arg1);
#line 278
  return;
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_lock_274(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 285
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 287
  mutex_lock(ldv_func_arg1);
#line 288
  return;
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_strings.c.prepared"
void ldv_mutex_unlock_275(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 295
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 297
  mutex_unlock(ldv_func_arg1);
#line 298
  return;
}
}
#line 47 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 326 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 404 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 407
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 407
  return (tmp != 0);
}
}
#line 495 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 498
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 499
  return;
}
}
#line 171 "include/linux/mutex.h"
int ldv_mutex_trylock_290(struct mutex *ldv_func_arg1 ) ;
#line 176
void ldv_mutex_unlock_288(struct mutex *ldv_func_arg1 ) ;
#line 180
void ldv_mutex_unlock_291(struct mutex *ldv_func_arg1 ) ;
#line 184
void ldv_mutex_unlock_293(struct mutex *ldv_func_arg1 ) ;
#line 188
void ldv_mutex_unlock_295(struct mutex *ldv_func_arg1 ) ;
#line 192
void ldv_mutex_unlock_297(struct mutex *ldv_func_arg1 ) ;
#line 196
void ldv_mutex_unlock_299(struct mutex *ldv_func_arg1 ) ;
#line 200
void ldv_mutex_unlock_300(struct mutex *ldv_func_arg1 ) ;
#line 204
void ldv_mutex_unlock_302(struct mutex *ldv_func_arg1 ) ;
#line 208
void ldv_mutex_unlock_304(struct mutex *ldv_func_arg1 ) ;
#line 10 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_287(struct mutex *ldv_func_arg1 ) ;
#line 14
void ldv_mutex_lock_289(struct mutex *ldv_func_arg1 ) ;
#line 18
void ldv_mutex_lock_292(struct mutex *ldv_func_arg1 ) ;
#line 22
void ldv_mutex_lock_294(struct mutex *ldv_func_arg1 ) ;
#line 26
void ldv_mutex_lock_296(struct mutex *ldv_func_arg1 ) ;
#line 30
void ldv_mutex_lock_298(struct mutex *ldv_func_arg1 ) ;
#line 34
void ldv_mutex_lock_301(struct mutex *ldv_func_arg1 ) ;
#line 38
void ldv_mutex_lock_303(struct mutex *ldv_func_arg1 ) ;
#line 208 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info___3(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 211
  switch (8UL) {
  case 1UL: 
#line 211
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6310;
  case 2UL: 
#line 211
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6310;
  case 4UL: 
#line 211
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6310;
  case 8UL: 
#line 211
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 211
  goto ldv_6310;
  default: 
#line 211
  __bad_percpu_size();
  }
  ldv_6310: 
#line 211
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 213
  return (ti);
}
}
#line 70 "include/linux/kmod.h"
extern int call_usermodehelper_fns(char * , char ** , char ** , int  , int (*)(struct subprocess_info * ,
                                                                               struct cred * ) ,
                                   void (*)(struct subprocess_info * ) , void * ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , int wait ) 
{ 
  int tmp ;

  {
#line 77
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 77
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 210 "include/linux/capability.h"
extern bool capable(int  ) ;
#line 2093 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info___3();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable___0(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info___3();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 71 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 73
extern void cn_del_callback(struct cb_id * ) ;
#line 74
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 409 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 66 "include/linux/highmem.h"
__inline static void *kmap_atomic___0(struct page *page ) 
{ 
  void *tmp ;

  {
#line 68
  pagefault_disable___0();
#line 69
  tmp = lowmem_page_address((struct page  const  *)page);
#line 69
  return (tmp);
}
}
#line 73 "include/linux/highmem.h"
__inline static void __kunmap_atomic___0(void *addr ) 
{ 


  {
#line 75
  pagefault_enable___0();
#line 76
  return;
}
}
#line 900 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 906
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 922
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 929
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1596 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 2011 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 2014
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 2018
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 2018
  if (tmp___1 != 0UL) {
#line 2018
    __min1 = 2251799813685248UL;
#line 2018
    tmp___0 = drbd_md_first_sector(bdev);
#line 2018
    __min2 = tmp___0;
#line 2018
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 2018
    s = 0UL;
  }
#line 2021
  goto ldv_51163;
  case -2: 
#line 2023
  __min1___0 = 2251799813685248UL;
#line 2023
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 2023
  __min2___0 = tmp___2;
#line 2023
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2026
  __min1___1 = s;
#line 2026
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 2026
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 2029
  goto ldv_51163;
  default: 
#line 2031
  __min1___2 = 8587575296UL;
#line 2031
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 2031
  __min2___2 = tmp___3;
#line 2031
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_51163: ;
#line 2034
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[91U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"detach_force", 40960, 4}, 
        {"disk_timeout", 0, 4}, 
        {"stop_sector", 24576, 8}};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 117
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 118
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_51963;
  ldv_51962: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_51960;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_51960: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_51963: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_51962;
  } else {

  }

#line 14
  return (1);
}
}
#line 35
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 35 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  unsigned short *tmp___6 ;
  u16 tmp___7 ;

  {
#line 20
  goto ldv_52025;
  ldv_52024: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_51992;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_51992;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_51992;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_51992;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_51992;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_51992;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51992;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51992;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51992;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_51992;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51992;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_51992;
  case 89: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->disk_timeout = (int )tmp___5;
#line 20
  goto ldv_51992;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_51992: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_52025: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___7 = get_unaligned_le16((void const   *)tmp___6);
#line 20
  tag = (int )tmp___7;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_52024;
  } else {

  }

#line 20
  return (1);
}
}
#line 39
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) ;
#line 39 "include/linux/drbd_nl.h"
static int detach_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct detach *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 37
  goto ldv_52042;
  ldv_52041: 
#line 37
  tmp = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 37
  dlen = (int )tmp___0;
#line 37
  switch (tag & 8191) {
  case 88: 
#line 37
  arg->detach_force = (int )((signed char )*((char *)tags)) != 0;
#line 37
  goto ldv_52039;
  default: ;
#line 37
  if ((tag & 8192) != 0) {
#line 37
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 37
    return (0);
  } else {

  }
  }
  ldv_52039: 
#line 37
  tags = tags + (unsigned long )dlen;
  ldv_52042: 
#line 37
  tmp___1 = tags;
#line 37
  tags = tags + 1;
#line 37
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 37
  tag = (int )tmp___2;
#line 37
  if (tag != 0) {
#line 38
    goto ldv_52041;
  } else {

  }

#line 37
  return (1);
}
}
#line 73
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 73 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 41
  goto ldv_52133;
  ldv_52132: 
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 41
  dlen = (int )tmp___0;
#line 41
  switch (tag & 8191) {
  case 8: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->my_addr_len = dlen;
#line 41
  __min1 = (size_t )dlen;
#line 41
  __min2 = 128UL;
#line 41
  __len = __min1 < __min2 ? __min1 : __min2;
#line 41
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 41
  goto ldv_52065;
  case 9: ;
#line 41
  if (dlen > 128) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->peer_addr_len = dlen;
#line 41
  __min1___0 = (size_t )dlen;
#line 41
  __min2___0 = 128UL;
#line 41
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 41
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 41
  goto ldv_52065;
  case 10: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->shared_secret_len = dlen;
#line 41
  __min1___1 = (size_t )dlen;
#line 41
  __min2___1 = 64UL;
#line 41
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 41
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 41
  goto ldv_52065;
  case 11: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->cram_hmac_alg_len = dlen;
#line 41
  __min1___2 = (size_t )dlen;
#line 41
  __min2___2 = 64UL;
#line 41
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 41
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 41
  goto ldv_52065;
  case 44: ;
#line 41
  if (dlen > 64) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 41
    return (0);
  } else {

  }
#line 41
  arg->integrity_alg_len = dlen;
#line 41
  __min1___3 = (size_t )dlen;
#line 41
  __min2___3 = 64UL;
#line 41
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 41
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 41
  goto ldv_52065;
  case 14: 
#line 41
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->timeout = (int )tmp___1;
#line 41
  goto ldv_52065;
  case 15: 
#line 41
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->wire_protocol = (int )tmp___2;
#line 41
  goto ldv_52065;
  case 16: 
#line 41
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->try_connect_int = (int )tmp___3;
#line 41
  goto ldv_52065;
  case 17: 
#line 41
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_int = (int )tmp___4;
#line 41
  goto ldv_52065;
  case 18: 
#line 41
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_epoch_size = (int )tmp___5;
#line 41
  goto ldv_52065;
  case 19: 
#line 41
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->max_buffers = (int )tmp___6;
#line 41
  goto ldv_52065;
  case 20: 
#line 41
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->unplug_watermark = (int )tmp___7;
#line 41
  goto ldv_52065;
  case 21: 
#line 41
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->sndbuf_size = (int )tmp___8;
#line 41
  goto ldv_52065;
  case 22: 
#line 41
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ko_count = (int )tmp___9;
#line 41
  goto ldv_52065;
  case 24: 
#line 41
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_0p = (int )tmp___10;
#line 41
  goto ldv_52065;
  case 25: 
#line 41
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_1p = (int )tmp___11;
#line 41
  goto ldv_52065;
  case 26: 
#line 41
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->after_sb_2p = (int )tmp___12;
#line 41
  goto ldv_52065;
  case 39: 
#line 41
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rr_conflict = (int )tmp___13;
#line 41
  goto ldv_52065;
  case 40: 
#line 41
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->ping_timeo = (int )tmp___14;
#line 41
  goto ldv_52065;
  case 67: 
#line 41
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->rcvbuf_size = (int )tmp___15;
#line 41
  goto ldv_52065;
  case 81: 
#line 41
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->on_congestion = (int )tmp___16;
#line 41
  goto ldv_52065;
  case 82: 
#line 41
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_fill = (int )tmp___17;
#line 41
  goto ldv_52065;
  case 83: 
#line 41
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 41
  arg->cong_extents = (int )tmp___18;
#line 41
  goto ldv_52065;
  case 60: 
#line 41
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 27: 
#line 41
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 28: 
#line 41
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 41: 
#line 41
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 61: 
#line 41
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 62: 
#line 41
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  case 70: 
#line 41
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 41
  goto ldv_52065;
  default: ;
#line 41
  if ((tag & 8192) != 0) {
#line 41
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 41
    return (0);
  } else {

  }
  }
  ldv_52065: 
#line 41
  tags = tags + (unsigned long )dlen;
  ldv_52133: 
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 41
  tag = (int )tmp___20;
#line 41
  if (tag != 0) {
#line 42
    goto ldv_52132;
  } else {

  }

#line 41
  return (1);
}
}
#line 77
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 77 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 75
  goto ldv_52150;
  ldv_52149: 
#line 75
  tmp = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 75
  dlen = (int )tmp___0;
#line 75
  switch (tag & 8191) {
  case 84: 
#line 75
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 75
  goto ldv_52147;
  default: ;
#line 75
  if ((tag & 8192) != 0) {
#line 75
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 75
    return (0);
  } else {

  }
  }
  ldv_52147: 
#line 75
  tags = tags + (unsigned long )dlen;
  ldv_52150: 
#line 75
  tmp___1 = tags;
#line 75
  tags = tags + 1;
#line 75
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 75
  tag = (int )tmp___2;
#line 75
  if (tag != 0) {
#line 76
    goto ldv_52149;
  } else {

  }

#line 75
  return (1);
}
}
#line 83
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 83 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 79
  goto ldv_52169;
  ldv_52168: 
#line 79
  tmp = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 79
  dlen = (int )tmp___0;
#line 79
  switch (tag & 8191) {
  case 29: 
#line 79
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 79
  goto ldv_52164;
  case 68: 
#line 79
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_52164;
  case 69: 
#line 79
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 79
  goto ldv_52164;
  default: ;
#line 79
  if ((tag & 8192) != 0) {
#line 79
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 79
    return (0);
  } else {

  }
  }
  ldv_52164: 
#line 79
  tags = tags + (unsigned long )dlen;
  ldv_52169: 
#line 79
  tmp___1 = tags;
#line 79
  tags = tags + 1;
#line 79
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 79
  tag = (int )tmp___2;
#line 79
  if (tag != 0) {
#line 80
    goto ldv_52168;
  } else {

  }

#line 79
  return (1);
}
}
#line 104
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 104 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 85
  goto ldv_52225;
  ldv_52224: 
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 85
  dlen = (int )tmp___0;
#line 85
  switch (tag & 8191) {
  case 30: 
#line 85
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->rate = (int )tmp___1;
#line 85
  goto ldv_52183;
  case 31: 
#line 85
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->after = (int )tmp___2;
#line 85
  goto ldv_52183;
  case 32: 
#line 85
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->al_extents = (int )tmp___3;
#line 85
  goto ldv_52183;
  case 52: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->verify_alg_len = dlen;
#line 85
  __min1 = (size_t )dlen;
#line 85
  __min2 = 64UL;
#line 85
  __len = __min1 < __min2 ? __min1 : __min2;
#line 85
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 85
  goto ldv_52183;
  case 51: ;
#line 85
  if (dlen > 32) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->cpu_mask_len = dlen;
#line 85
  __min1___0 = (size_t )dlen;
#line 85
  __min2___0 = 32UL;
#line 85
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 85
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 85
  goto ldv_52183;
  case 64: ;
#line 85
  if (dlen > 64) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 85
    return (0);
  } else {

  }
#line 85
  arg->csums_alg_len = dlen;
#line 85
  __min1___1 = (size_t )dlen;
#line 85
  __min2___1 = 64UL;
#line 85
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 85
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 85
  goto ldv_52183;
  case 65: 
#line 85
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 85
  goto ldv_52183;
  case 75: 
#line 85
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->on_no_data = (int )tmp___4;
#line 85
  goto ldv_52183;
  case 76: 
#line 85
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_plan_ahead = (int )tmp___5;
#line 85
  goto ldv_52183;
  case 77: 
#line 85
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_delay_target = (int )tmp___6;
#line 85
  goto ldv_52183;
  case 78: 
#line 85
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_fill_target = (int )tmp___7;
#line 85
  goto ldv_52183;
  case 79: 
#line 85
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_max_rate = (int )tmp___8;
#line 85
  goto ldv_52183;
  case 80: 
#line 85
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 85
  arg->c_min_rate = (int )tmp___9;
#line 85
  goto ldv_52183;
  default: ;
#line 85
  if ((tag & 8192) != 0) {
#line 85
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 85
    return (0);
  } else {

  }
  }
  ldv_52183: 
#line 85
  tags = tags + (unsigned long )dlen;
  ldv_52225: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 85
  tag = (int )tmp___11;
#line 85
  if (tag != 0) {
#line 86
    goto ldv_52224;
  } else {

  }

#line 85
  return (1);
}
}
#line 149
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 146
  goto ldv_52525;
  ldv_52524: 
#line 146
  tmp = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 146
  dlen = (int )tmp___0;
#line 146
  switch (tag & 8191) {
  case 66: 
#line 146
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_52521;
  case 90: 
#line 146
  arg->stop_sector = get_unaligned_le64((void const   *)tags);
#line 146
  goto ldv_52521;
  default: ;
#line 146
  if ((tag & 8192) != 0) {
#line 146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 146
    return (0);
  } else {

  }
  }
  ldv_52521: 
#line 146
  tags = tags + (unsigned long )dlen;
  ldv_52525: 
#line 146
  tmp___1 = tags;
#line 146
  tags = tags + 1;
#line 146
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 146
  tag = (int )tmp___2;
#line 146
  if (tag != 0) {
#line 147
    goto ldv_52524;
  } else {

  }

#line 146
  return (1);
}
}
#line 153
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 153 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 151
  goto ldv_52542;
  ldv_52541: 
#line 151
  tmp = tags;
#line 151
  tags = tags + 1;
#line 151
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 151
  dlen = (int )tmp___0;
#line 151
  switch (tag & 8191) {
  case 63: 
#line 151
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 151
  goto ldv_52539;
  default: ;
#line 151
  if ((tag & 8192) != 0) {
#line 151
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 151
    return (0);
  } else {

  }
  }
  ldv_52539: 
#line 151
  tags = tags + (unsigned long )dlen;
  ldv_52542: 
#line 151
  tmp___1 = tags;
#line 151
  tags = tags + 1;
#line 151
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 151
  tag = (int )tmp___2;
#line 151
  if (tag != 0) {
#line 152
    goto ldv_52541;
  } else {

  }

#line 151
  return (1);
}
}
#line 35
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 35 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;
  void *__gu_p___28 ;
  unsigned short *tmp___23 ;
  void *__gu_p___29 ;
  unsigned short *tmp___24 ;
  void *__gu_p___30 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_52587;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_52587;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_52587;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_52587;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52587;
  }
  ldv_52587: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_52594;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_52594;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_52594;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_52594;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52594;
  }
  ldv_52594: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_52601;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_52601;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_52601;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_52601;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52601;
  }
  ldv_52601: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_52608;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_52608;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_52608;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_52608;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52608;
  }
  ldv_52608: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_52615;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_52615;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_52615;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_52615;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52615;
  }
  ldv_52615: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_52625;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_52625;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_52625;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_52625;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52625;
  }
  ldv_52625: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_52632;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_52632;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_52632;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_52632;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52632;
  }
  ldv_52632: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_52642;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_52642;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_52642;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_52642;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52642;
  }
  ldv_52642: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_52649;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_52649;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_52649;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_52649;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52649;
  }
  ldv_52649: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_52656;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_52656;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_52656;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_52656;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52656;
  }
  ldv_52656: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_52663;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_52663;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_52663;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_52663;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52663;
  }
  ldv_52663: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_52670;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_52670;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_52670;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_52670;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52670;
  }
  ldv_52670: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_52677;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_52677;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_52677;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_52677;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52677;
  }
  ldv_52677: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_52684;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_52684;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_52684;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_52684;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52684;
  }
  ldv_52684: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_52691;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_52691;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_52691;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_52691;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52691;
  }
  ldv_52691: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_52698;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_52698;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_52698;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_52698;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52698;
  }
  ldv_52698: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_52705;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_52705;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_52705;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_52705;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52705;
  }
  ldv_52705: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_52712;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_52712;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_52712;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_52712;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52712;
  }
  ldv_52712: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_52719;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_52719;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_52719;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_52719;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52719;
  }
  ldv_52719: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_52726;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_52726;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_52726;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_52726;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52726;
  }
  ldv_52726: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_52733;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_52733;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_52733;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_52733;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52733;
  }
  ldv_52733: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_52740;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_52740;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_52740;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_52740;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52740;
  }
  ldv_52740: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_52747;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_52747;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_52747;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_52747;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52747;
  }
  ldv_52747: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_52754;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_52754;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_52754;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_52754;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52754;
  }
  ldv_52754: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_52761;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_52761;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_52761;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_52761;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52761;
  }
  ldv_52761: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_52768;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_52768;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_52768;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_52768;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52768;
  }
  ldv_52768: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_52775;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_52775;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_52775;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_52775;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52775;
  }
  ldv_52775: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_52782;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_52782;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_52782;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_52782;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52782;
  }
  ldv_52782: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_52789;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_52789;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_52789;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_52789;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52789;
  }
  ldv_52789: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  tmp___23 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___28 = (void *)tmp___23;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___28) = 89U;
#line 20
  goto ldv_52796;
  case 2UL: 
#line 20
  put_unaligned_le16(89, __gu_p___28);
#line 20
  goto ldv_52796;
  case 4UL: 
#line 20
  put_unaligned_le32(89U, __gu_p___28);
#line 20
  goto ldv_52796;
  case 8UL: 
#line 20
  put_unaligned_le64(89ULL, __gu_p___28);
#line 20
  goto ldv_52796;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52796;
  }
  ldv_52796: 
#line 20
  tmp___24 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___29 = (void *)tmp___24;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___29) = 4U;
#line 20
  goto ldv_52803;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___29);
#line 20
  goto ldv_52803;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___29);
#line 20
  goto ldv_52803;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___29);
#line 20
  goto ldv_52803;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52803;
  }
  ldv_52803: 
#line 20
  __gu_p___30 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___30) = (unsigned char )arg->disk_timeout;
#line 20
  goto ldv_52810;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_timeout), __gu_p___30);
#line 20
  goto ldv_52810;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_52810;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->disk_timeout, __gu_p___30);
#line 20
  goto ldv_52810;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_52810;
  }
  ldv_52810: 
#line 20
  tags = tags + 4U;
#line 20
  return (tags);
}
}
#line 73
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 73 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 41
  tmp = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p = (void *)tmp;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p) = 8U;
#line 41
  goto ldv_52849;
  case 2UL: 
#line 41
  put_unaligned_le16(57352, __gu_p);
#line 41
  goto ldv_52849;
  case 4UL: 
#line 41
  put_unaligned_le32(57352U, __gu_p);
#line 41
  goto ldv_52849;
  case 8UL: 
#line 41
  put_unaligned_le64(57352ULL, __gu_p);
#line 41
  goto ldv_52849;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52849;
  }
  ldv_52849: 
#line 41
  tmp___0 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___0 = (void *)tmp___0;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 41
  goto ldv_52856;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 41
  goto ldv_52856;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_52856;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 41
  goto ldv_52856;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52856;
  }
  ldv_52856: 
#line 41
  __len = (size_t )arg->my_addr_len;
#line 41
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 41
  tags = tags + (unsigned long )arg->my_addr_len;
#line 41
  tmp___1 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___1 = (void *)tmp___1;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___1) = 9U;
#line 41
  goto ldv_52866;
  case 2UL: 
#line 41
  put_unaligned_le16(57353, __gu_p___1);
#line 41
  goto ldv_52866;
  case 4UL: 
#line 41
  put_unaligned_le32(57353U, __gu_p___1);
#line 41
  goto ldv_52866;
  case 8UL: 
#line 41
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 41
  goto ldv_52866;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52866;
  }
  ldv_52866: 
#line 41
  tmp___2 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___2 = (void *)tmp___2;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 41
  goto ldv_52873;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 41
  goto ldv_52873;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_52873;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 41
  goto ldv_52873;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52873;
  }
  ldv_52873: 
#line 41
  __len___0 = (size_t )arg->peer_addr_len;
#line 41
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 41
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 41
  tmp___3 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___3 = (void *)tmp___3;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___3) = 10U;
#line 41
  goto ldv_52883;
  case 2UL: 
#line 41
  put_unaligned_le16(49162, __gu_p___3);
#line 41
  goto ldv_52883;
  case 4UL: 
#line 41
  put_unaligned_le32(49162U, __gu_p___3);
#line 41
  goto ldv_52883;
  case 8UL: 
#line 41
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 41
  goto ldv_52883;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52883;
  }
  ldv_52883: 
#line 41
  tmp___4 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___4 = (void *)tmp___4;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 41
  goto ldv_52890;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 41
  goto ldv_52890;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_52890;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 41
  goto ldv_52890;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52890;
  }
  ldv_52890: 
#line 41
  __len___1 = (size_t )arg->shared_secret_len;
#line 41
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 41
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 41
  tmp___5 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___5 = (void *)tmp___5;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___5) = 11U;
#line 41
  goto ldv_52900;
  case 2UL: 
#line 41
  put_unaligned_le16(49163, __gu_p___5);
#line 41
  goto ldv_52900;
  case 4UL: 
#line 41
  put_unaligned_le32(49163U, __gu_p___5);
#line 41
  goto ldv_52900;
  case 8UL: 
#line 41
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 41
  goto ldv_52900;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52900;
  }
  ldv_52900: 
#line 41
  tmp___6 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___6 = (void *)tmp___6;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 41
  goto ldv_52907;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 41
  goto ldv_52907;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_52907;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 41
  goto ldv_52907;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52907;
  }
  ldv_52907: 
#line 41
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 41
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 41
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 41
  tmp___7 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___7 = (void *)tmp___7;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___7) = 44U;
#line 41
  goto ldv_52917;
  case 2UL: 
#line 41
  put_unaligned_le16(49196, __gu_p___7);
#line 41
  goto ldv_52917;
  case 4UL: 
#line 41
  put_unaligned_le32(49196U, __gu_p___7);
#line 41
  goto ldv_52917;
  case 8UL: 
#line 41
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 41
  goto ldv_52917;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52917;
  }
  ldv_52917: 
#line 41
  tmp___8 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___8 = (void *)tmp___8;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 41
  goto ldv_52924;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 41
  goto ldv_52924;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_52924;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 41
  goto ldv_52924;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52924;
  }
  ldv_52924: 
#line 41
  __len___3 = (size_t )arg->integrity_alg_len;
#line 41
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 41
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 41
  tmp___9 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___9 = (void *)tmp___9;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___9) = 14U;
#line 41
  goto ldv_52934;
  case 2UL: 
#line 41
  put_unaligned_le16(14, __gu_p___9);
#line 41
  goto ldv_52934;
  case 4UL: 
#line 41
  put_unaligned_le32(14U, __gu_p___9);
#line 41
  goto ldv_52934;
  case 8UL: 
#line 41
  put_unaligned_le64(14ULL, __gu_p___9);
#line 41
  goto ldv_52934;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52934;
  }
  ldv_52934: 
#line 41
  tmp___10 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___10 = (void *)tmp___10;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___10) = 4U;
#line 41
  goto ldv_52941;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___10);
#line 41
  goto ldv_52941;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___10);
#line 41
  goto ldv_52941;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___10);
#line 41
  goto ldv_52941;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52941;
  }
  ldv_52941: 
#line 41
  __gu_p___11 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 41
  goto ldv_52948;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 41
  goto ldv_52948;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 41
  goto ldv_52948;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 41
  goto ldv_52948;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52948;
  }
  ldv_52948: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___11 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___12 = (void *)tmp___11;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___12) = 15U;
#line 41
  goto ldv_52955;
  case 2UL: 
#line 41
  put_unaligned_le16(8207, __gu_p___12);
#line 41
  goto ldv_52955;
  case 4UL: 
#line 41
  put_unaligned_le32(8207U, __gu_p___12);
#line 41
  goto ldv_52955;
  case 8UL: 
#line 41
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 41
  goto ldv_52955;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52955;
  }
  ldv_52955: 
#line 41
  tmp___12 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___13 = (void *)tmp___12;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___13) = 4U;
#line 41
  goto ldv_52962;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___13);
#line 41
  goto ldv_52962;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___13);
#line 41
  goto ldv_52962;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___13);
#line 41
  goto ldv_52962;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52962;
  }
  ldv_52962: 
#line 41
  __gu_p___14 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 41
  goto ldv_52969;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 41
  goto ldv_52969;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_52969;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 41
  goto ldv_52969;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52969;
  }
  ldv_52969: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___13 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___15 = (void *)tmp___13;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___15) = 16U;
#line 41
  goto ldv_52976;
  case 2UL: 
#line 41
  put_unaligned_le16(16, __gu_p___15);
#line 41
  goto ldv_52976;
  case 4UL: 
#line 41
  put_unaligned_le32(16U, __gu_p___15);
#line 41
  goto ldv_52976;
  case 8UL: 
#line 41
  put_unaligned_le64(16ULL, __gu_p___15);
#line 41
  goto ldv_52976;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52976;
  }
  ldv_52976: 
#line 41
  tmp___14 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___16 = (void *)tmp___14;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___16) = 4U;
#line 41
  goto ldv_52983;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___16);
#line 41
  goto ldv_52983;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___16);
#line 41
  goto ldv_52983;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___16);
#line 41
  goto ldv_52983;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52983;
  }
  ldv_52983: 
#line 41
  __gu_p___17 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 41
  goto ldv_52990;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 41
  goto ldv_52990;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_52990;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 41
  goto ldv_52990;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52990;
  }
  ldv_52990: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___15 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___18 = (void *)tmp___15;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___18) = 17U;
#line 41
  goto ldv_52997;
  case 2UL: 
#line 41
  put_unaligned_le16(17, __gu_p___18);
#line 41
  goto ldv_52997;
  case 4UL: 
#line 41
  put_unaligned_le32(17U, __gu_p___18);
#line 41
  goto ldv_52997;
  case 8UL: 
#line 41
  put_unaligned_le64(17ULL, __gu_p___18);
#line 41
  goto ldv_52997;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_52997;
  }
  ldv_52997: 
#line 41
  tmp___16 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___19 = (void *)tmp___16;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___19) = 4U;
#line 41
  goto ldv_53004;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___19);
#line 41
  goto ldv_53004;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___19);
#line 41
  goto ldv_53004;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___19);
#line 41
  goto ldv_53004;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53004;
  }
  ldv_53004: 
#line 41
  __gu_p___20 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 41
  goto ldv_53011;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 41
  goto ldv_53011;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_53011;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 41
  goto ldv_53011;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53011;
  }
  ldv_53011: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___17 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___21 = (void *)tmp___17;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___21) = 18U;
#line 41
  goto ldv_53018;
  case 2UL: 
#line 41
  put_unaligned_le16(18, __gu_p___21);
#line 41
  goto ldv_53018;
  case 4UL: 
#line 41
  put_unaligned_le32(18U, __gu_p___21);
#line 41
  goto ldv_53018;
  case 8UL: 
#line 41
  put_unaligned_le64(18ULL, __gu_p___21);
#line 41
  goto ldv_53018;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53018;
  }
  ldv_53018: 
#line 41
  tmp___18 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___22 = (void *)tmp___18;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___22) = 4U;
#line 41
  goto ldv_53025;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___22);
#line 41
  goto ldv_53025;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___22);
#line 41
  goto ldv_53025;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___22);
#line 41
  goto ldv_53025;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53025;
  }
  ldv_53025: 
#line 41
  __gu_p___23 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 41
  goto ldv_53032;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 41
  goto ldv_53032;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_53032;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 41
  goto ldv_53032;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53032;
  }
  ldv_53032: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___19 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___24 = (void *)tmp___19;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___24) = 19U;
#line 41
  goto ldv_53039;
  case 2UL: 
#line 41
  put_unaligned_le16(19, __gu_p___24);
#line 41
  goto ldv_53039;
  case 4UL: 
#line 41
  put_unaligned_le32(19U, __gu_p___24);
#line 41
  goto ldv_53039;
  case 8UL: 
#line 41
  put_unaligned_le64(19ULL, __gu_p___24);
#line 41
  goto ldv_53039;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53039;
  }
  ldv_53039: 
#line 41
  tmp___20 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___25 = (void *)tmp___20;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___25) = 4U;
#line 41
  goto ldv_53046;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___25);
#line 41
  goto ldv_53046;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___25);
#line 41
  goto ldv_53046;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___25);
#line 41
  goto ldv_53046;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53046;
  }
  ldv_53046: 
#line 41
  __gu_p___26 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 41
  goto ldv_53053;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 41
  goto ldv_53053;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_53053;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 41
  goto ldv_53053;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53053;
  }
  ldv_53053: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___21 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___27 = (void *)tmp___21;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___27) = 20U;
#line 41
  goto ldv_53060;
  case 2UL: 
#line 41
  put_unaligned_le16(20, __gu_p___27);
#line 41
  goto ldv_53060;
  case 4UL: 
#line 41
  put_unaligned_le32(20U, __gu_p___27);
#line 41
  goto ldv_53060;
  case 8UL: 
#line 41
  put_unaligned_le64(20ULL, __gu_p___27);
#line 41
  goto ldv_53060;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53060;
  }
  ldv_53060: 
#line 41
  tmp___22 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___28 = (void *)tmp___22;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___28) = 4U;
#line 41
  goto ldv_53067;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___28);
#line 41
  goto ldv_53067;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___28);
#line 41
  goto ldv_53067;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___28);
#line 41
  goto ldv_53067;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53067;
  }
  ldv_53067: 
#line 41
  __gu_p___29 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 41
  goto ldv_53074;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 41
  goto ldv_53074;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_53074;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 41
  goto ldv_53074;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53074;
  }
  ldv_53074: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___23 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___30 = (void *)tmp___23;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___30) = 21U;
#line 41
  goto ldv_53081;
  case 2UL: 
#line 41
  put_unaligned_le16(21, __gu_p___30);
#line 41
  goto ldv_53081;
  case 4UL: 
#line 41
  put_unaligned_le32(21U, __gu_p___30);
#line 41
  goto ldv_53081;
  case 8UL: 
#line 41
  put_unaligned_le64(21ULL, __gu_p___30);
#line 41
  goto ldv_53081;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53081;
  }
  ldv_53081: 
#line 41
  tmp___24 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___31 = (void *)tmp___24;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___31) = 4U;
#line 41
  goto ldv_53088;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___31);
#line 41
  goto ldv_53088;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___31);
#line 41
  goto ldv_53088;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___31);
#line 41
  goto ldv_53088;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53088;
  }
  ldv_53088: 
#line 41
  __gu_p___32 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 41
  goto ldv_53095;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 41
  goto ldv_53095;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_53095;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 41
  goto ldv_53095;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53095;
  }
  ldv_53095: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___25 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___33 = (void *)tmp___25;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___33) = 22U;
#line 41
  goto ldv_53102;
  case 2UL: 
#line 41
  put_unaligned_le16(22, __gu_p___33);
#line 41
  goto ldv_53102;
  case 4UL: 
#line 41
  put_unaligned_le32(22U, __gu_p___33);
#line 41
  goto ldv_53102;
  case 8UL: 
#line 41
  put_unaligned_le64(22ULL, __gu_p___33);
#line 41
  goto ldv_53102;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53102;
  }
  ldv_53102: 
#line 41
  tmp___26 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___34 = (void *)tmp___26;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___34) = 4U;
#line 41
  goto ldv_53109;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___34);
#line 41
  goto ldv_53109;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___34);
#line 41
  goto ldv_53109;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___34);
#line 41
  goto ldv_53109;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53109;
  }
  ldv_53109: 
#line 41
  __gu_p___35 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 41
  goto ldv_53116;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 41
  goto ldv_53116;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_53116;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 41
  goto ldv_53116;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53116;
  }
  ldv_53116: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___27 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___36 = (void *)tmp___27;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___36) = 24U;
#line 41
  goto ldv_53123;
  case 2UL: 
#line 41
  put_unaligned_le16(24, __gu_p___36);
#line 41
  goto ldv_53123;
  case 4UL: 
#line 41
  put_unaligned_le32(24U, __gu_p___36);
#line 41
  goto ldv_53123;
  case 8UL: 
#line 41
  put_unaligned_le64(24ULL, __gu_p___36);
#line 41
  goto ldv_53123;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53123;
  }
  ldv_53123: 
#line 41
  tmp___28 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___37 = (void *)tmp___28;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___37) = 4U;
#line 41
  goto ldv_53130;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___37);
#line 41
  goto ldv_53130;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___37);
#line 41
  goto ldv_53130;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___37);
#line 41
  goto ldv_53130;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53130;
  }
  ldv_53130: 
#line 41
  __gu_p___38 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 41
  goto ldv_53137;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 41
  goto ldv_53137;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_53137;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 41
  goto ldv_53137;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53137;
  }
  ldv_53137: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___29 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___39 = (void *)tmp___29;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___39) = 25U;
#line 41
  goto ldv_53144;
  case 2UL: 
#line 41
  put_unaligned_le16(25, __gu_p___39);
#line 41
  goto ldv_53144;
  case 4UL: 
#line 41
  put_unaligned_le32(25U, __gu_p___39);
#line 41
  goto ldv_53144;
  case 8UL: 
#line 41
  put_unaligned_le64(25ULL, __gu_p___39);
#line 41
  goto ldv_53144;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53144;
  }
  ldv_53144: 
#line 41
  tmp___30 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___40 = (void *)tmp___30;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___40) = 4U;
#line 41
  goto ldv_53151;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___40);
#line 41
  goto ldv_53151;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___40);
#line 41
  goto ldv_53151;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___40);
#line 41
  goto ldv_53151;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53151;
  }
  ldv_53151: 
#line 41
  __gu_p___41 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 41
  goto ldv_53158;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 41
  goto ldv_53158;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_53158;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 41
  goto ldv_53158;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53158;
  }
  ldv_53158: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___31 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___42 = (void *)tmp___31;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___42) = 26U;
#line 41
  goto ldv_53165;
  case 2UL: 
#line 41
  put_unaligned_le16(26, __gu_p___42);
#line 41
  goto ldv_53165;
  case 4UL: 
#line 41
  put_unaligned_le32(26U, __gu_p___42);
#line 41
  goto ldv_53165;
  case 8UL: 
#line 41
  put_unaligned_le64(26ULL, __gu_p___42);
#line 41
  goto ldv_53165;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53165;
  }
  ldv_53165: 
#line 41
  tmp___32 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___43 = (void *)tmp___32;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___43) = 4U;
#line 41
  goto ldv_53172;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___43);
#line 41
  goto ldv_53172;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___43);
#line 41
  goto ldv_53172;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___43);
#line 41
  goto ldv_53172;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53172;
  }
  ldv_53172: 
#line 41
  __gu_p___44 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 41
  goto ldv_53179;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 41
  goto ldv_53179;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_53179;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 41
  goto ldv_53179;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53179;
  }
  ldv_53179: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___33 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___45 = (void *)tmp___33;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___45) = 39U;
#line 41
  goto ldv_53186;
  case 2UL: 
#line 41
  put_unaligned_le16(39, __gu_p___45);
#line 41
  goto ldv_53186;
  case 4UL: 
#line 41
  put_unaligned_le32(39U, __gu_p___45);
#line 41
  goto ldv_53186;
  case 8UL: 
#line 41
  put_unaligned_le64(39ULL, __gu_p___45);
#line 41
  goto ldv_53186;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53186;
  }
  ldv_53186: 
#line 41
  tmp___34 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___46 = (void *)tmp___34;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___46) = 4U;
#line 41
  goto ldv_53193;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___46);
#line 41
  goto ldv_53193;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___46);
#line 41
  goto ldv_53193;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___46);
#line 41
  goto ldv_53193;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53193;
  }
  ldv_53193: 
#line 41
  __gu_p___47 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 41
  goto ldv_53200;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 41
  goto ldv_53200;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_53200;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 41
  goto ldv_53200;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53200;
  }
  ldv_53200: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___35 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___48 = (void *)tmp___35;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___48) = 40U;
#line 41
  goto ldv_53207;
  case 2UL: 
#line 41
  put_unaligned_le16(40, __gu_p___48);
#line 41
  goto ldv_53207;
  case 4UL: 
#line 41
  put_unaligned_le32(40U, __gu_p___48);
#line 41
  goto ldv_53207;
  case 8UL: 
#line 41
  put_unaligned_le64(40ULL, __gu_p___48);
#line 41
  goto ldv_53207;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53207;
  }
  ldv_53207: 
#line 41
  tmp___36 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___49 = (void *)tmp___36;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___49) = 4U;
#line 41
  goto ldv_53214;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___49);
#line 41
  goto ldv_53214;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___49);
#line 41
  goto ldv_53214;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___49);
#line 41
  goto ldv_53214;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53214;
  }
  ldv_53214: 
#line 41
  __gu_p___50 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 41
  goto ldv_53221;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 41
  goto ldv_53221;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_53221;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 41
  goto ldv_53221;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53221;
  }
  ldv_53221: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___37 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___51 = (void *)tmp___37;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___51) = 67U;
#line 41
  goto ldv_53228;
  case 2UL: 
#line 41
  put_unaligned_le16(67, __gu_p___51);
#line 41
  goto ldv_53228;
  case 4UL: 
#line 41
  put_unaligned_le32(67U, __gu_p___51);
#line 41
  goto ldv_53228;
  case 8UL: 
#line 41
  put_unaligned_le64(67ULL, __gu_p___51);
#line 41
  goto ldv_53228;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53228;
  }
  ldv_53228: 
#line 41
  tmp___38 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___52 = (void *)tmp___38;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___52) = 4U;
#line 41
  goto ldv_53235;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___52);
#line 41
  goto ldv_53235;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___52);
#line 41
  goto ldv_53235;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___52);
#line 41
  goto ldv_53235;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53235;
  }
  ldv_53235: 
#line 41
  __gu_p___53 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 41
  goto ldv_53242;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 41
  goto ldv_53242;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_53242;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 41
  goto ldv_53242;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53242;
  }
  ldv_53242: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___39 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___54 = (void *)tmp___39;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___54) = 81U;
#line 41
  goto ldv_53249;
  case 2UL: 
#line 41
  put_unaligned_le16(81, __gu_p___54);
#line 41
  goto ldv_53249;
  case 4UL: 
#line 41
  put_unaligned_le32(81U, __gu_p___54);
#line 41
  goto ldv_53249;
  case 8UL: 
#line 41
  put_unaligned_le64(81ULL, __gu_p___54);
#line 41
  goto ldv_53249;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53249;
  }
  ldv_53249: 
#line 41
  tmp___40 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___55 = (void *)tmp___40;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___55) = 4U;
#line 41
  goto ldv_53256;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___55);
#line 41
  goto ldv_53256;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___55);
#line 41
  goto ldv_53256;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___55);
#line 41
  goto ldv_53256;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53256;
  }
  ldv_53256: 
#line 41
  __gu_p___56 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 41
  goto ldv_53263;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 41
  goto ldv_53263;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_53263;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 41
  goto ldv_53263;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53263;
  }
  ldv_53263: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___41 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___57 = (void *)tmp___41;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___57) = 82U;
#line 41
  goto ldv_53270;
  case 2UL: 
#line 41
  put_unaligned_le16(82, __gu_p___57);
#line 41
  goto ldv_53270;
  case 4UL: 
#line 41
  put_unaligned_le32(82U, __gu_p___57);
#line 41
  goto ldv_53270;
  case 8UL: 
#line 41
  put_unaligned_le64(82ULL, __gu_p___57);
#line 41
  goto ldv_53270;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53270;
  }
  ldv_53270: 
#line 41
  tmp___42 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___58 = (void *)tmp___42;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___58) = 4U;
#line 41
  goto ldv_53277;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___58);
#line 41
  goto ldv_53277;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___58);
#line 41
  goto ldv_53277;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___58);
#line 41
  goto ldv_53277;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53277;
  }
  ldv_53277: 
#line 41
  __gu_p___59 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 41
  goto ldv_53284;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 41
  goto ldv_53284;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_53284;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 41
  goto ldv_53284;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53284;
  }
  ldv_53284: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___43 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___60 = (void *)tmp___43;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___60) = 83U;
#line 41
  goto ldv_53291;
  case 2UL: 
#line 41
  put_unaligned_le16(83, __gu_p___60);
#line 41
  goto ldv_53291;
  case 4UL: 
#line 41
  put_unaligned_le32(83U, __gu_p___60);
#line 41
  goto ldv_53291;
  case 8UL: 
#line 41
  put_unaligned_le64(83ULL, __gu_p___60);
#line 41
  goto ldv_53291;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53291;
  }
  ldv_53291: 
#line 41
  tmp___44 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___61 = (void *)tmp___44;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___61) = 4U;
#line 41
  goto ldv_53298;
  case 2UL: 
#line 41
  put_unaligned_le16(4, __gu_p___61);
#line 41
  goto ldv_53298;
  case 4UL: 
#line 41
  put_unaligned_le32(4U, __gu_p___61);
#line 41
  goto ldv_53298;
  case 8UL: 
#line 41
  put_unaligned_le64(4ULL, __gu_p___61);
#line 41
  goto ldv_53298;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53298;
  }
  ldv_53298: 
#line 41
  __gu_p___62 = (void *)tags;
#line 41
  switch (4UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 41
  goto ldv_53305;
  case 2UL: 
#line 41
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 41
  goto ldv_53305;
  case 4UL: 
#line 41
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_53305;
  case 8UL: 
#line 41
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 41
  goto ldv_53305;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53305;
  }
  ldv_53305: 
#line 41
  tags = tags + 4U;
#line 41
  tmp___45 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___63 = (void *)tmp___45;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___63) = 60U;
#line 41
  goto ldv_53312;
  case 2UL: 
#line 41
  put_unaligned_le16(41020, __gu_p___63);
#line 41
  goto ldv_53312;
  case 4UL: 
#line 41
  put_unaligned_le32(41020U, __gu_p___63);
#line 41
  goto ldv_53312;
  case 8UL: 
#line 41
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 41
  goto ldv_53312;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53312;
  }
  ldv_53312: 
#line 41
  tmp___46 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___64 = (void *)tmp___46;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___64) = 1U;
#line 41
  goto ldv_53319;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___64);
#line 41
  goto ldv_53319;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___64);
#line 41
  goto ldv_53319;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___64);
#line 41
  goto ldv_53319;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53319;
  }
  ldv_53319: 
#line 41
  *((char *)tags) = (char )arg->mind_af;
#line 41
  tags = tags + 1U;
#line 41
  tmp___47 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___65 = (void *)tmp___47;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___65) = 27U;
#line 41
  goto ldv_53326;
  case 2UL: 
#line 41
  put_unaligned_le16(32795, __gu_p___65);
#line 41
  goto ldv_53326;
  case 4UL: 
#line 41
  put_unaligned_le32(32795U, __gu_p___65);
#line 41
  goto ldv_53326;
  case 8UL: 
#line 41
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 41
  goto ldv_53326;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53326;
  }
  ldv_53326: 
#line 41
  tmp___48 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___66 = (void *)tmp___48;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___66) = 1U;
#line 41
  goto ldv_53333;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___66);
#line 41
  goto ldv_53333;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___66);
#line 41
  goto ldv_53333;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___66);
#line 41
  goto ldv_53333;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53333;
  }
  ldv_53333: 
#line 41
  *((char *)tags) = (char )arg->want_lose;
#line 41
  tags = tags + 1U;
#line 41
  tmp___49 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___67 = (void *)tmp___49;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___67) = 28U;
#line 41
  goto ldv_53340;
  case 2UL: 
#line 41
  put_unaligned_le16(32796, __gu_p___67);
#line 41
  goto ldv_53340;
  case 4UL: 
#line 41
  put_unaligned_le32(32796U, __gu_p___67);
#line 41
  goto ldv_53340;
  case 8UL: 
#line 41
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 41
  goto ldv_53340;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53340;
  }
  ldv_53340: 
#line 41
  tmp___50 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___68 = (void *)tmp___50;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___68) = 1U;
#line 41
  goto ldv_53347;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___68);
#line 41
  goto ldv_53347;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___68);
#line 41
  goto ldv_53347;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___68);
#line 41
  goto ldv_53347;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53347;
  }
  ldv_53347: 
#line 41
  *((char *)tags) = (char )arg->two_primaries;
#line 41
  tags = tags + 1U;
#line 41
  tmp___51 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___69 = (void *)tmp___51;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___69) = 41U;
#line 41
  goto ldv_53354;
  case 2UL: 
#line 41
  put_unaligned_le16(32809, __gu_p___69);
#line 41
  goto ldv_53354;
  case 4UL: 
#line 41
  put_unaligned_le32(32809U, __gu_p___69);
#line 41
  goto ldv_53354;
  case 8UL: 
#line 41
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 41
  goto ldv_53354;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53354;
  }
  ldv_53354: 
#line 41
  tmp___52 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___70 = (void *)tmp___52;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___70) = 1U;
#line 41
  goto ldv_53361;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___70);
#line 41
  goto ldv_53361;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___70);
#line 41
  goto ldv_53361;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___70);
#line 41
  goto ldv_53361;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53361;
  }
  ldv_53361: 
#line 41
  *((char *)tags) = (char )arg->always_asbp;
#line 41
  tags = tags + 1U;
#line 41
  tmp___53 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___71 = (void *)tmp___53;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___71) = 61U;
#line 41
  goto ldv_53368;
  case 2UL: 
#line 41
  put_unaligned_le16(32829, __gu_p___71);
#line 41
  goto ldv_53368;
  case 4UL: 
#line 41
  put_unaligned_le32(32829U, __gu_p___71);
#line 41
  goto ldv_53368;
  case 8UL: 
#line 41
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 41
  goto ldv_53368;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53368;
  }
  ldv_53368: 
#line 41
  tmp___54 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___72 = (void *)tmp___54;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___72) = 1U;
#line 41
  goto ldv_53375;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___72);
#line 41
  goto ldv_53375;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___72);
#line 41
  goto ldv_53375;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___72);
#line 41
  goto ldv_53375;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53375;
  }
  ldv_53375: 
#line 41
  *((char *)tags) = (char )arg->no_cork;
#line 41
  tags = tags + 1U;
#line 41
  tmp___55 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___73 = (void *)tmp___55;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___73) = 62U;
#line 41
  goto ldv_53382;
  case 2UL: 
#line 41
  put_unaligned_le16(41022, __gu_p___73);
#line 41
  goto ldv_53382;
  case 4UL: 
#line 41
  put_unaligned_le32(41022U, __gu_p___73);
#line 41
  goto ldv_53382;
  case 8UL: 
#line 41
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 41
  goto ldv_53382;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53382;
  }
  ldv_53382: 
#line 41
  tmp___56 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___74 = (void *)tmp___56;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___74) = 1U;
#line 41
  goto ldv_53389;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___74);
#line 41
  goto ldv_53389;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___74);
#line 41
  goto ldv_53389;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___74);
#line 41
  goto ldv_53389;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53389;
  }
  ldv_53389: 
#line 41
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 41
  tags = tags + 1U;
#line 41
  tmp___57 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___75 = (void *)tmp___57;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___75) = 70U;
#line 41
  goto ldv_53396;
  case 2UL: 
#line 41
  put_unaligned_le16(41030, __gu_p___75);
#line 41
  goto ldv_53396;
  case 4UL: 
#line 41
  put_unaligned_le32(41030U, __gu_p___75);
#line 41
  goto ldv_53396;
  case 8UL: 
#line 41
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 41
  goto ldv_53396;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53396;
  }
  ldv_53396: 
#line 41
  tmp___58 = tags;
#line 41
  tags = tags + 1;
#line 41
  __gu_p___76 = (void *)tmp___58;
#line 41
  switch (2UL) {
  case 1UL: 
#line 41
  *((u8 *)__gu_p___76) = 1U;
#line 41
  goto ldv_53403;
  case 2UL: 
#line 41
  put_unaligned_le16(1, __gu_p___76);
#line 41
  goto ldv_53403;
  case 4UL: 
#line 41
  put_unaligned_le32(1U, __gu_p___76);
#line 41
  goto ldv_53403;
  case 8UL: 
#line 41
  put_unaligned_le64(1ULL, __gu_p___76);
#line 41
  goto ldv_53403;
  default: 
#line 41
  __bad_unaligned_access_size();
#line 41
  goto ldv_53403;
  }
  ldv_53403: 
#line 41
  *((char *)tags) = (char )arg->dry_run;
#line 41
  tags = tags + 1U;
#line 41
  return (tags);
}
}
#line 104
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 104 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 85
  tmp = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p = (void *)tmp;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p) = 30U;
#line 85
  goto ldv_53500;
  case 2UL: 
#line 85
  put_unaligned_le16(30, __gu_p);
#line 85
  goto ldv_53500;
  case 4UL: 
#line 85
  put_unaligned_le32(30U, __gu_p);
#line 85
  goto ldv_53500;
  case 8UL: 
#line 85
  put_unaligned_le64(30ULL, __gu_p);
#line 85
  goto ldv_53500;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53500;
  }
  ldv_53500: 
#line 85
  tmp___0 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___0 = (void *)tmp___0;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___0) = 4U;
#line 85
  goto ldv_53507;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___0);
#line 85
  goto ldv_53507;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___0);
#line 85
  goto ldv_53507;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___0);
#line 85
  goto ldv_53507;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53507;
  }
  ldv_53507: 
#line 85
  __gu_p___1 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 85
  goto ldv_53514;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 85
  goto ldv_53514;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 85
  goto ldv_53514;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 85
  goto ldv_53514;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53514;
  }
  ldv_53514: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___1 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___2 = (void *)tmp___1;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___2) = 31U;
#line 85
  goto ldv_53521;
  case 2UL: 
#line 85
  put_unaligned_le16(31, __gu_p___2);
#line 85
  goto ldv_53521;
  case 4UL: 
#line 85
  put_unaligned_le32(31U, __gu_p___2);
#line 85
  goto ldv_53521;
  case 8UL: 
#line 85
  put_unaligned_le64(31ULL, __gu_p___2);
#line 85
  goto ldv_53521;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53521;
  }
  ldv_53521: 
#line 85
  tmp___2 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___3 = (void *)tmp___2;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___3) = 4U;
#line 85
  goto ldv_53528;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___3);
#line 85
  goto ldv_53528;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___3);
#line 85
  goto ldv_53528;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___3);
#line 85
  goto ldv_53528;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53528;
  }
  ldv_53528: 
#line 85
  __gu_p___4 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 85
  goto ldv_53535;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 85
  goto ldv_53535;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 85
  goto ldv_53535;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 85
  goto ldv_53535;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53535;
  }
  ldv_53535: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___3 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___5 = (void *)tmp___3;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___5) = 32U;
#line 85
  goto ldv_53542;
  case 2UL: 
#line 85
  put_unaligned_le16(32, __gu_p___5);
#line 85
  goto ldv_53542;
  case 4UL: 
#line 85
  put_unaligned_le32(32U, __gu_p___5);
#line 85
  goto ldv_53542;
  case 8UL: 
#line 85
  put_unaligned_le64(32ULL, __gu_p___5);
#line 85
  goto ldv_53542;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53542;
  }
  ldv_53542: 
#line 85
  tmp___4 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___6 = (void *)tmp___4;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___6) = 4U;
#line 85
  goto ldv_53549;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___6);
#line 85
  goto ldv_53549;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___6);
#line 85
  goto ldv_53549;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___6);
#line 85
  goto ldv_53549;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53549;
  }
  ldv_53549: 
#line 85
  __gu_p___7 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 85
  goto ldv_53556;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 85
  goto ldv_53556;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_53556;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 85
  goto ldv_53556;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53556;
  }
  ldv_53556: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___5 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___8 = (void *)tmp___5;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___8) = 52U;
#line 85
  goto ldv_53563;
  case 2UL: 
#line 85
  put_unaligned_le16(49204, __gu_p___8);
#line 85
  goto ldv_53563;
  case 4UL: 
#line 85
  put_unaligned_le32(49204U, __gu_p___8);
#line 85
  goto ldv_53563;
  case 8UL: 
#line 85
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 85
  goto ldv_53563;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53563;
  }
  ldv_53563: 
#line 85
  tmp___6 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___9 = (void *)tmp___6;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 85
  goto ldv_53570;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 85
  goto ldv_53570;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_53570;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 85
  goto ldv_53570;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53570;
  }
  ldv_53570: 
#line 85
  __len = (size_t )arg->verify_alg_len;
#line 85
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 85
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 85
  tmp___7 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___10 = (void *)tmp___7;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___10) = 51U;
#line 85
  goto ldv_53580;
  case 2UL: 
#line 85
  put_unaligned_le16(49203, __gu_p___10);
#line 85
  goto ldv_53580;
  case 4UL: 
#line 85
  put_unaligned_le32(49203U, __gu_p___10);
#line 85
  goto ldv_53580;
  case 8UL: 
#line 85
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 85
  goto ldv_53580;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53580;
  }
  ldv_53580: 
#line 85
  tmp___8 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___11 = (void *)tmp___8;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 85
  goto ldv_53587;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 85
  goto ldv_53587;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_53587;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 85
  goto ldv_53587;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53587;
  }
  ldv_53587: 
#line 85
  __len___0 = (size_t )arg->cpu_mask_len;
#line 85
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 85
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 85
  tmp___9 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___12 = (void *)tmp___9;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___12) = 64U;
#line 85
  goto ldv_53597;
  case 2UL: 
#line 85
  put_unaligned_le16(49216, __gu_p___12);
#line 85
  goto ldv_53597;
  case 4UL: 
#line 85
  put_unaligned_le32(49216U, __gu_p___12);
#line 85
  goto ldv_53597;
  case 8UL: 
#line 85
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 85
  goto ldv_53597;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53597;
  }
  ldv_53597: 
#line 85
  tmp___10 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___13 = (void *)tmp___10;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 85
  goto ldv_53604;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 85
  goto ldv_53604;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_53604;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 85
  goto ldv_53604;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53604;
  }
  ldv_53604: 
#line 85
  __len___1 = (size_t )arg->csums_alg_len;
#line 85
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 85
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 85
  tmp___11 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___14 = (void *)tmp___11;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___14) = 65U;
#line 85
  goto ldv_53614;
  case 2UL: 
#line 85
  put_unaligned_le16(32833, __gu_p___14);
#line 85
  goto ldv_53614;
  case 4UL: 
#line 85
  put_unaligned_le32(32833U, __gu_p___14);
#line 85
  goto ldv_53614;
  case 8UL: 
#line 85
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 85
  goto ldv_53614;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53614;
  }
  ldv_53614: 
#line 85
  tmp___12 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___15 = (void *)tmp___12;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___15) = 1U;
#line 85
  goto ldv_53621;
  case 2UL: 
#line 85
  put_unaligned_le16(1, __gu_p___15);
#line 85
  goto ldv_53621;
  case 4UL: 
#line 85
  put_unaligned_le32(1U, __gu_p___15);
#line 85
  goto ldv_53621;
  case 8UL: 
#line 85
  put_unaligned_le64(1ULL, __gu_p___15);
#line 85
  goto ldv_53621;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53621;
  }
  ldv_53621: 
#line 85
  *((char *)tags) = (char )arg->use_rle;
#line 85
  tags = tags + 1U;
#line 85
  tmp___13 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___16 = (void *)tmp___13;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___16) = 75U;
#line 85
  goto ldv_53628;
  case 2UL: 
#line 85
  put_unaligned_le16(75, __gu_p___16);
#line 85
  goto ldv_53628;
  case 4UL: 
#line 85
  put_unaligned_le32(75U, __gu_p___16);
#line 85
  goto ldv_53628;
  case 8UL: 
#line 85
  put_unaligned_le64(75ULL, __gu_p___16);
#line 85
  goto ldv_53628;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53628;
  }
  ldv_53628: 
#line 85
  tmp___14 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___17 = (void *)tmp___14;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___17) = 4U;
#line 85
  goto ldv_53635;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___17);
#line 85
  goto ldv_53635;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___17);
#line 85
  goto ldv_53635;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___17);
#line 85
  goto ldv_53635;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53635;
  }
  ldv_53635: 
#line 85
  __gu_p___18 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 85
  goto ldv_53642;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 85
  goto ldv_53642;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_53642;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 85
  goto ldv_53642;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53642;
  }
  ldv_53642: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___15 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___19 = (void *)tmp___15;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___19) = 76U;
#line 85
  goto ldv_53649;
  case 2UL: 
#line 85
  put_unaligned_le16(76, __gu_p___19);
#line 85
  goto ldv_53649;
  case 4UL: 
#line 85
  put_unaligned_le32(76U, __gu_p___19);
#line 85
  goto ldv_53649;
  case 8UL: 
#line 85
  put_unaligned_le64(76ULL, __gu_p___19);
#line 85
  goto ldv_53649;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53649;
  }
  ldv_53649: 
#line 85
  tmp___16 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___20 = (void *)tmp___16;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___20) = 4U;
#line 85
  goto ldv_53656;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___20);
#line 85
  goto ldv_53656;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___20);
#line 85
  goto ldv_53656;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___20);
#line 85
  goto ldv_53656;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53656;
  }
  ldv_53656: 
#line 85
  __gu_p___21 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 85
  goto ldv_53663;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 85
  goto ldv_53663;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_53663;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 85
  goto ldv_53663;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53663;
  }
  ldv_53663: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___17 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___22 = (void *)tmp___17;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___22) = 77U;
#line 85
  goto ldv_53670;
  case 2UL: 
#line 85
  put_unaligned_le16(77, __gu_p___22);
#line 85
  goto ldv_53670;
  case 4UL: 
#line 85
  put_unaligned_le32(77U, __gu_p___22);
#line 85
  goto ldv_53670;
  case 8UL: 
#line 85
  put_unaligned_le64(77ULL, __gu_p___22);
#line 85
  goto ldv_53670;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53670;
  }
  ldv_53670: 
#line 85
  tmp___18 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___23 = (void *)tmp___18;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___23) = 4U;
#line 85
  goto ldv_53677;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___23);
#line 85
  goto ldv_53677;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___23);
#line 85
  goto ldv_53677;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___23);
#line 85
  goto ldv_53677;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53677;
  }
  ldv_53677: 
#line 85
  __gu_p___24 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 85
  goto ldv_53684;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 85
  goto ldv_53684;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_53684;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 85
  goto ldv_53684;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53684;
  }
  ldv_53684: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___19 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___25 = (void *)tmp___19;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___25) = 78U;
#line 85
  goto ldv_53691;
  case 2UL: 
#line 85
  put_unaligned_le16(78, __gu_p___25);
#line 85
  goto ldv_53691;
  case 4UL: 
#line 85
  put_unaligned_le32(78U, __gu_p___25);
#line 85
  goto ldv_53691;
  case 8UL: 
#line 85
  put_unaligned_le64(78ULL, __gu_p___25);
#line 85
  goto ldv_53691;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53691;
  }
  ldv_53691: 
#line 85
  tmp___20 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___26 = (void *)tmp___20;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___26) = 4U;
#line 85
  goto ldv_53698;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___26);
#line 85
  goto ldv_53698;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___26);
#line 85
  goto ldv_53698;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___26);
#line 85
  goto ldv_53698;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53698;
  }
  ldv_53698: 
#line 85
  __gu_p___27 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 85
  goto ldv_53705;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 85
  goto ldv_53705;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_53705;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 85
  goto ldv_53705;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53705;
  }
  ldv_53705: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___21 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___28 = (void *)tmp___21;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___28) = 79U;
#line 85
  goto ldv_53712;
  case 2UL: 
#line 85
  put_unaligned_le16(79, __gu_p___28);
#line 85
  goto ldv_53712;
  case 4UL: 
#line 85
  put_unaligned_le32(79U, __gu_p___28);
#line 85
  goto ldv_53712;
  case 8UL: 
#line 85
  put_unaligned_le64(79ULL, __gu_p___28);
#line 85
  goto ldv_53712;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53712;
  }
  ldv_53712: 
#line 85
  tmp___22 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___29 = (void *)tmp___22;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___29) = 4U;
#line 85
  goto ldv_53719;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___29);
#line 85
  goto ldv_53719;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___29);
#line 85
  goto ldv_53719;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___29);
#line 85
  goto ldv_53719;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53719;
  }
  ldv_53719: 
#line 85
  __gu_p___30 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 85
  goto ldv_53726;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 85
  goto ldv_53726;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_53726;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 85
  goto ldv_53726;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53726;
  }
  ldv_53726: 
#line 85
  tags = tags + 4U;
#line 85
  tmp___23 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___31 = (void *)tmp___23;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___31) = 80U;
#line 85
  goto ldv_53733;
  case 2UL: 
#line 85
  put_unaligned_le16(80, __gu_p___31);
#line 85
  goto ldv_53733;
  case 4UL: 
#line 85
  put_unaligned_le32(80U, __gu_p___31);
#line 85
  goto ldv_53733;
  case 8UL: 
#line 85
  put_unaligned_le64(80ULL, __gu_p___31);
#line 85
  goto ldv_53733;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53733;
  }
  ldv_53733: 
#line 85
  tmp___24 = tags;
#line 85
  tags = tags + 1;
#line 85
  __gu_p___32 = (void *)tmp___24;
#line 85
  switch (2UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___32) = 4U;
#line 85
  goto ldv_53740;
  case 2UL: 
#line 85
  put_unaligned_le16(4, __gu_p___32);
#line 85
  goto ldv_53740;
  case 4UL: 
#line 85
  put_unaligned_le32(4U, __gu_p___32);
#line 85
  goto ldv_53740;
  case 8UL: 
#line 85
  put_unaligned_le64(4ULL, __gu_p___32);
#line 85
  goto ldv_53740;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53740;
  }
  ldv_53740: 
#line 85
  __gu_p___33 = (void *)tags;
#line 85
  switch (4UL) {
  case 1UL: 
#line 85
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 85
  goto ldv_53747;
  case 2UL: 
#line 85
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 85
  goto ldv_53747;
  case 4UL: 
#line 85
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_53747;
  case 8UL: 
#line 85
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 85
  goto ldv_53747;
  default: 
#line 85
  __bad_unaligned_access_size();
#line 85
  goto ldv_53747;
  }
  ldv_53747: 
#line 85
  tags = tags + 4U;
#line 85
  return (tags);
}
}
#line 116
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 116 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 114
  tmp = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p = (void *)tmp;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p) = 33U;
#line 114
  goto ldv_53835;
  case 2UL: 
#line 114
  put_unaligned_le16(33, __gu_p);
#line 114
  goto ldv_53835;
  case 4UL: 
#line 114
  put_unaligned_le32(33U, __gu_p);
#line 114
  goto ldv_53835;
  case 8UL: 
#line 114
  put_unaligned_le64(33ULL, __gu_p);
#line 114
  goto ldv_53835;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53835;
  }
  ldv_53835: 
#line 114
  tmp___0 = tags;
#line 114
  tags = tags + 1;
#line 114
  __gu_p___0 = (void *)tmp___0;
#line 114
  switch (2UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___0) = 4U;
#line 114
  goto ldv_53842;
  case 2UL: 
#line 114
  put_unaligned_le16(4, __gu_p___0);
#line 114
  goto ldv_53842;
  case 4UL: 
#line 114
  put_unaligned_le32(4U, __gu_p___0);
#line 114
  goto ldv_53842;
  case 8UL: 
#line 114
  put_unaligned_le64(4ULL, __gu_p___0);
#line 114
  goto ldv_53842;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53842;
  }
  ldv_53842: 
#line 114
  __gu_p___1 = (void *)tags;
#line 114
  switch (4UL) {
  case 1UL: 
#line 114
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 114
  goto ldv_53849;
  case 2UL: 
#line 114
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 114
  goto ldv_53849;
  case 4UL: 
#line 114
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 114
  goto ldv_53849;
  case 8UL: 
#line 114
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 114
  goto ldv_53849;
  default: 
#line 114
  __bad_unaligned_access_size();
#line 114
  goto ldv_53849;
  }
  ldv_53849: 
#line 114
  tags = tags + 4U;
#line 114
  return (tags);
}
}
#line 206 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 207
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  struct task_struct *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 211
  envp[0] = (char *)"HOME=/";
#line 211
  envp[1] = (char *)"TERM=linux";
#line 211
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 211
  envp[3] = 0;
#line 211
  envp[4] = 0;
#line 211
  envp[5] = 0;
#line 219
  argv[0] = (char *)(& usermode_helper);
#line 219
  argv[1] = cmd;
#line 219
  argv[2] = (char *)(& mb);
#line 219
  argv[3] = 0;
#line 222
  tmp = get_current();
#line 222
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 223
    drbd_set_flag(mdev, CALLBACK_PENDING);
  } else {

  }
#line 225
  tmp___0 = mdev_to_minor(mdev);
#line 225
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp___0);
#line 227
  tmp___1 = get_net_conf(mdev);
#line 227
  if (tmp___1 != 0) {
#line 228
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 230
    afs = (char *)"ipv6";
#line 231
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 233
    goto ldv_54191;
    case 2: 
#line 235
    afs = (char *)"ipv4";
#line 236
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 238
    goto ldv_54191;
    default: 
#line 240
    afs = (char *)"ssocks";
#line 241
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_54191: 
#line 244
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 245
    envp[3] = (char *)(& af);
#line 246
    envp[4] = (char *)(& ad);
#line 247
    put_net_conf(mdev);
  } else {

  }
#line 252
  drbd_md_sync(mdev);
#line 254
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 256
  drbd_bcast_ev_helper(mdev, cmd);
#line 257
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            2);
#line 258
  if (ret != 0) {
#line 259
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 263
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 267
  tmp___2 = get_current();
#line 267
  if ((unsigned long )tmp___2 == (unsigned long )mdev->worker.task) {
#line 268
    drbd_clear_flag(mdev, CALLBACK_PENDING);
  } else {

  }
#line 270
  if (ret < 0) {
#line 271
    ret = 0;
  } else {

  }
#line 273
  return (ret);
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 283
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 283
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            283);
  } else {

  }
#line 285
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 285
  if (tmp != 0) {
#line 286
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 287
    put_ldev(mdev);
  } else {
#line 289
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 290
    nps = (enum drbd_disk_state )mdev->state.ldv_39979.pdsk;
#line 291
    goto out;
  }
#line 294
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 296
  switch ((r >> 8) & 255) {
  case 3: 
#line 298
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 299
  nps = D_INCONSISTENT;
#line 300
  goto ldv_54203;
  case 4: 
#line 302
  ex_to_string = (char *)"peer was fenced";
#line 303
  nps = D_OUTDATED;
#line 304
  goto ldv_54203;
  case 5: ;
#line 306
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 308
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 309
    nps = D_OUTDATED;
  } else {
#line 311
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 312
    nps = (enum drbd_disk_state )mdev->state.ldv_39979.pdsk;
  }
#line 314
  goto ldv_54203;
  case 6: 
#line 318
  ex_to_string = (char *)"peer is active";
#line 319
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 320
  nps = D_UNKNOWN;
#line 321
  val.i = 0U;
#line 321
  val.ldv_39979.disk = 5U;
#line 321
  mask.i = 0U;
#line 321
  mask.ldv_39979.disk = 15U;
#line 321
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 322
  goto ldv_54203;
  case 7: ;
#line 324
  if ((unsigned int )fp != 2U) {
#line 325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 326
  ex_to_string = (char *)"peer was stonithed";
#line 327
  nps = D_OUTDATED;
#line 328
  goto ldv_54203;
  default: 
#line 331
  nps = D_UNKNOWN;
#line 332
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 333
  return (nps);
  }
  ldv_54203: 
#line 336
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 340
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 343
    val___0.i = 0U;
#line 343
    val___0.ldv_39979.susp_fen = 0U;
#line 343
    mask___0.i = 0U;
#line 343
    mask___0.ldv_39979.susp_fen = 1U;
#line 343
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 346
  return (nps);
}
}
#line 349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;
  int tmp ;

  {
#line 351
  mdev = (struct drbd_conf *)data;
#line 355
  nps = drbd_try_outdate_peer(mdev);
#line 368
  spin_lock_irq(& mdev->req_lock);
#line 369
  ns = mdev->state;
#line 370
  if ((int )ns.ldv_39979.conn <= 8) {
#line 370
    tmp = drbd_test_flag(mdev, STATE_SENT);
#line 370
    if (tmp == 0) {
#line 371
      ns.ldv_39979.pdsk = (unsigned char )nps;
#line 372
      _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
    } else {

    }
  } else {

  }
#line 374
  spin_unlock_irq(& mdev->req_lock);
#line 376
  return (0);
}
}
#line 379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 383
  tmp = mdev_to_minor(mdev);
#line 383
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 383
  __k = tmp___0;
#line 383
  tmp___1 = IS_ERR((void const   *)__k);
#line 383
  if (tmp___1 == 0L) {
#line 383
    wake_up_process(__k);
  } else {

  }
#line 383
  opa = __k;
#line 384
  tmp___2 = IS_ERR((void const   *)opa);
#line 384
  if (tmp___2 != 0L) {
#line 385
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 386
  return;
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 391
  max_tries = 4;
#line 392
  rv = 0;
#line 393
  try = 0;
#line 394
  forced = 0;
#line 398
  if ((unsigned int )new_role == 1U) {
#line 399
    request_ping(mdev);
  } else {

  }
#line 401
  ldv_mutex_lock_301(& mdev->state_mutex);
#line 403
  mask.i = 0U;
#line 403
  mask.ldv_39979.role = 3U;
#line 404
  val.i = 0U;
#line 404
  val.ldv_39979.role = (unsigned char )new_role;
#line 406
  goto ldv_54241;
  ldv_54244: 
#line 407
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 411
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 412
    val.ldv_39979.pdsk = 0U;
#line 413
    mask.ldv_39979.pdsk = 0U;
#line 414
    goto ldv_54241;
  } else {

  }
#line 417
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_39979.disk <= 7 && (int )mdev->state.ldv_39979.disk > 3)) {
#line 420
    mask.ldv_39979.disk = 15U;
#line 421
    val.ldv_39979.disk = 8U;
#line 422
    forced = 1;
#line 423
    goto ldv_54241;
  } else {

  }
#line 426
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 428
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 428
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
              428);
    } else {

    }
#line 429
    nps = drbd_try_outdate_peer(mdev);
#line 431
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 432
      val.ldv_39979.disk = 8U;
#line 433
      mask.ldv_39979.disk = 15U;
    } else {

    }
#line 436
    val.ldv_39979.pdsk = (unsigned char )nps;
#line 437
    mask.ldv_39979.pdsk = 15U;
#line 439
    goto ldv_54241;
  } else {

  }
#line 442
  if ((int )rv == 2) {
#line 443
    goto fail;
  } else {

  }
#line 444
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 445
    nps = drbd_try_outdate_peer(mdev);
#line 447
    if (force != 0 && (unsigned int )nps > 5U) {
#line 448
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 449
      nps = D_OUTDATED;
    } else {

    }
#line 452
    mask.ldv_39979.pdsk = 15U;
#line 453
    val.ldv_39979.pdsk = (unsigned char )nps;
#line 455
    goto ldv_54241;
  } else {

  }
#line 457
  if ((int )rv == -1) {
#line 460
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 461
    if (try < max_tries) {
#line 462
      try = max_tries + -1;
    } else {

    }
#line 463
    goto ldv_54241;
  } else {

  }
#line 465
  if ((int )rv <= 0) {
#line 466
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 468
    if ((int )rv <= 0) {
#line 469
      goto fail;
    } else {

    }
  } else {

  }
#line 471
  goto ldv_54243;
  ldv_54241: 
#line 406
  tmp = try;
#line 406
  try = try + 1;
#line 406
  if (tmp < max_tries) {
#line 407
    goto ldv_54244;
  } else {

  }
  ldv_54243: ;
#line 474
  if ((int )rv <= 0) {
#line 475
    goto fail;
  } else {

  }
#line 477
  if (forced != 0) {
#line 478
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 481
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 481
  if (tmp___0 == 0) {
#line 481
    goto ldv_54245;
  } else {

  }
#line 481
  tmp___1 = get_current();
#line 481
  __wait.flags = 0U;
#line 481
  __wait.private = (void *)tmp___1;
#line 481
  __wait.func = & autoremove_wake_function;
#line 481
  __wait.task_list.next = & __wait.task_list;
#line 481
  __wait.task_list.prev = & __wait.task_list;
  ldv_54248: 
#line 481
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 481
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 481
  if (tmp___2 == 0) {
#line 481
    goto ldv_54247;
  } else {

  }
#line 481
  schedule();
#line 481
  goto ldv_54248;
  ldv_54247: 
#line 481
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54245: ;
#line 483
  if ((unsigned int )new_role == 2U) {
#line 484
    set_disk_ro(mdev->vdisk, 1);
#line 485
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 485
    if (tmp___3 != 0) {
#line 486
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 487
      put_ldev(mdev);
    } else {

    }
  } else {
#line 490
    tmp___4 = get_net_conf(mdev);
#line 490
    if (tmp___4 != 0) {
#line 491
      (mdev->net_conf)->want_lose = 0U;
#line 492
      put_net_conf(mdev);
    } else {

    }
#line 494
    set_disk_ro(mdev->vdisk, 0);
#line 495
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 495
    if (tmp___5 != 0) {
#line 496
      if ((((int )mdev->state.ldv_39979.conn <= 9 || (int )mdev->state.ldv_39979.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 499
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 501
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 502
      put_ldev(mdev);
    } else {

    }
  }
#line 509
  if ((int )mdev->state.ldv_39979.conn > 8) {
#line 511
    if (forced != 0) {
#line 512
      drbd_send_uuids(mdev);
    } else {

    }
#line 513
    drbd_send_current_state(mdev);
  } else {

  }
#line 516
  drbd_md_sync(mdev);
#line 518
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 520
  ldv_mutex_unlock_302(& mdev->state_mutex);
#line 521
  return (rv);
}
}
#line 524 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 528
  if ((unsigned int )minor >= minor_count) {
#line 529
    return (0);
  } else {

  }
#line 531
  mdev = minor_to_mdev((unsigned int )minor);
#line 533
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 534
    disk = 0;
#line 535
    mdev = drbd_new_device((unsigned int )minor);
#line 537
    spin_lock_irq(& drbd_pp_lock);
#line 538
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 539
      *(minor_table + (unsigned long )minor) = mdev;
#line 540
      disk = mdev->vdisk;
#line 541
      mdev = 0;
    } else {

    }
#line 543
    spin_unlock_irq(& drbd_pp_lock);
#line 545
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 548
      add_disk(disk);
    } else {
#line 550
      drbd_free_mdev(mdev);
    }
#line 552
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 555
  return (mdev);
}
}
#line 558 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 563
  memset((void *)(& primary_args), 0, 4UL);
#line 564
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 564
  if (tmp == 0) {
#line 565
    reply->ret_code = 126;
#line 566
    return (0);
  } else {

  }
#line 569
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 569
  reply->ret_code = (int )tmp___0;
#line 572
  return (0);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 578
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 578
  reply->ret_code = (int )tmp;
#line 580
  return (0);
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 588
  md_size_sect = 0UL;
#line 589
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 592
  bdev->md.md_size_sect = 262144U;
#line 593
  tmp = drbd_md_ss__(mdev, bdev);
#line 593
  bdev->md.md_offset = (u64 )tmp;
#line 594
  bdev->md.al_offset = 8;
#line 595
  bdev->md.bm_offset = 72;
#line 596
  goto ldv_54272;
  case -2: 
#line 599
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 599
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 600
  bdev->md.md_offset = 0ULL;
#line 601
  bdev->md.al_offset = 8;
#line 602
  bdev->md.bm_offset = 72;
#line 603
  goto ldv_54272;
  case -1: ;
  case -3: 
#line 606
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 606
  bdev->md.md_offset = (u64 )tmp___1;
#line 608
  bdev->md.al_offset = -64;
#line 610
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 611
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 612
  md_size_sect = md_size_sect >> 15;
#line 613
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 617
  md_size_sect = md_size_sect + 72UL;
#line 619
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 621
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 622
  goto ldv_54272;
  }
  ldv_54272: ;
#line 625
  return;
}
}
#line 627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 631
  units[0] = 75;
#line 631
  units[1] = 77;
#line 631
  units[2] = 71;
#line 631
  units[3] = 84;
#line 631
  units[4] = 80;
#line 631
  units[5] = 69;
#line 632
  base = 0;
#line 633
  goto ldv_54283;
  ldv_54282: 
#line 635
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 636
  base = base + 1;
  ldv_54283: ;
#line 633
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 634
    goto ldv_54282;
  } else {

  }
#line 638
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 640
  return (buf);
}
}
#line 656 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 658
  drbd_set_flag(mdev, SUSPEND_IO);
#line 659
  tmp = is_susp(mdev->state);
#line 659
  if (tmp != 0) {
#line 660
    return;
  } else {

  }
#line 661
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 661
  if (tmp___0 == 0) {
#line 661
    goto ldv_54288;
  } else {

  }
#line 661
  tmp___1 = get_current();
#line 661
  __wait.flags = 0U;
#line 661
  __wait.private = (void *)tmp___1;
#line 661
  __wait.func = & autoremove_wake_function;
#line 661
  __wait.task_list.next = & __wait.task_list;
#line 661
  __wait.task_list.prev = & __wait.task_list;
  ldv_54291: 
#line 661
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 661
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 661
  if (tmp___2 == 0) {
#line 661
    goto ldv_54290;
  } else {

  }
#line 661
  schedule();
#line 661
  goto ldv_54291;
  ldv_54290: 
#line 661
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54288: ;
#line 664
  return;
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 666
  drbd_clear_flag(mdev, SUSPEND_IO);
#line 667
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 668
  return;
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 685
  rv = 0;
#line 696
  drbd_suspend_io(mdev);
#line 699
  tmp = lc_try_lock(mdev->act_log);
#line 699
  if (tmp != 0) {
#line 699
    goto ldv_54307;
  } else {

  }
#line 699
  tmp___0 = get_current();
#line 699
  __wait.flags = 0U;
#line 699
  __wait.private = (void *)tmp___0;
#line 699
  __wait.func = & autoremove_wake_function;
#line 699
  __wait.task_list.next = & __wait.task_list;
#line 699
  __wait.task_list.prev = & __wait.task_list;
  ldv_54310: 
#line 699
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 699
  tmp___1 = lc_try_lock(mdev->act_log);
#line 699
  if (tmp___1 != 0) {
#line 699
    goto ldv_54309;
  } else {

  }
#line 699
  schedule();
#line 699
  goto ldv_54310;
  ldv_54309: 
#line 699
  finish_wait(& mdev->al_wait, & __wait);
  ldv_54307: 
#line 701
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 702
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 703
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 706
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 708
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 710
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 710
  if (tmp___5 != size) {
#line 710
    goto _L;
  } else {
#line 710
    tmp___6 = drbd_bm_capacity(mdev);
#line 710
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 713
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 714
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 714
      if (tmp___3 != 0L) {
#line 716
        tmp___2 = drbd_bm_capacity(mdev);
#line 716
        size = tmp___2 >> 1;
#line 717
        if (size == 0UL) {
#line 718
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 721
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 725
        rv = dev_size_error;
      } else {

      }
#line 728
      drbd_set_my_capacity(mdev, size);
#line 729
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 730
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 730
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 733
  if ((int )rv == -1) {
#line 734
    goto out;
  } else {

  }
#line 736
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 738
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 738
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 741
  if (la_size_changed != 0 || md_moved != 0) {
#line 744
    drbd_al_shrink(mdev);
#line 745
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 749
    err___0 = drbd_bitmap_io(mdev, md_moved != 0 ? & drbd_bm_write_all : & drbd_bm_write,
                             (char *)"size changed", BM_LOCKED_MASK);
#line 751
    if (err___0 != 0) {
#line 752
      rv = dev_size_error;
#line 753
      goto out;
    } else {

    }
#line 755
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 758
  if (size > la_size) {
#line 759
    rv = grew;
  } else {

  }
#line 760
  if (size < la_size) {
#line 761
    rv = shrunk;
  } else {

  }
  out: 
#line 763
  lc_unlock(mdev->act_log);
#line 764
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 765
  drbd_resume_io(mdev);
#line 767
  return (rv);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 773
  p_size = mdev->p_size;
#line 774
  la_size = (sector_t )bdev->md.la_size_sect;
#line 776
  u_size = (sector_t )bdev->dc.disk_size;
#line 777
  size = 0UL;
#line 779
  m_size = drbd_get_max_capacity___1(bdev);
#line 781
  if ((int )mdev->state.ldv_39979.conn <= 9 && assume_peer_has_space != 0) {
#line 782
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 783
    p_size = m_size;
  } else {

  }
#line 786
  if (p_size != 0UL && m_size != 0UL) {
#line 787
    __min1 = p_size;
#line 787
    __min2 = m_size;
#line 787
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 789
  if (la_size != 0UL) {
#line 790
    size = la_size;
#line 791
    if (m_size != 0UL && m_size < size) {
#line 792
      size = m_size;
    } else {

    }
#line 793
    if (p_size != 0UL && p_size < size) {
#line 794
      size = p_size;
    } else {

    }
  } else {
#line 796
    if (m_size != 0UL) {
#line 797
      size = m_size;
    } else {

    }
#line 798
    if (p_size != 0UL) {
#line 799
      size = p_size;
    } else {

    }
  }
#line 803
  if (size == 0UL) {
#line 804
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 806
  if (u_size != 0UL) {
#line 807
    if (u_size > size) {
#line 808
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 811
      size = u_size;
    }
  } else {

  }
#line 814
  return (size);
}
}
#line 825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 832
  _b = mdev->sync_conf.al_extents <= 6;
#line 832
  if (_b != 0) {
#line 832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            832);
  } else {

  }
#line 832
  if (_b != 0) {
#line 833
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 835
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 837
    return (0);
  } else {

  }
#line 839
  in_use = 0U;
#line 840
  t = mdev->act_log;
#line 841
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 844
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 845
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 846
    return (-12);
  } else {

  }
#line 848
  spin_lock_irq(& mdev->al_lock);
#line 849
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 850
    i = 0;
#line 850
    goto ldv_54339;
    ldv_54338: 
#line 851
    e = lc_element_by_index(t, (unsigned int )i);
#line 852
    if (e->refcnt != 0U) {
#line 853
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 855
    in_use = e->refcnt + in_use;
#line 850
    i = i + 1;
    ldv_54339: ;
#line 850
    if ((unsigned int )i < t->nr_elements) {
#line 851
      goto ldv_54338;
    } else {

    }

  } else {

  }
#line 858
  if (in_use == 0U) {
#line 859
    mdev->act_log = n;
  } else {

  }
#line 860
  spin_unlock_irq(& mdev->al_lock);
#line 861
  if (in_use != 0U) {
#line 862
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 863
    lc_destroy(n);
#line 864
    return (-16);
  } else
#line 866
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 867
    lc_destroy(t);
  } else {

  }
#line 869
  drbd_md_mark_dirty(mdev);
#line 870
  return (0);
}
}
#line 873 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  unsigned int max_hw_sectors ;
  unsigned int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 875
  q = mdev->rq_queue;
#line 876
  max_hw_sectors = max_bio_size >> 9;
#line 877
  max_segments = 0U;
#line 879
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 879
  if (tmp___0 != 0) {
#line 880
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 882
    tmp = queue_max_hw_sectors(b);
#line 882
    _min1 = tmp;
#line 882
    _min2 = max_bio_size >> 9;
#line 882
    max_hw_sectors = _min1 < _min2 ? _min1 : _min2;
#line 883
    max_segments = (unsigned int )(mdev->ldev)->dc.max_bio_bvecs;
#line 884
    put_ldev(mdev);
  } else {

  }
#line 887
  blk_queue_logical_block_size(q, 512);
#line 888
  blk_queue_max_hw_sectors(q, max_hw_sectors);
#line 890
  blk_queue_max_segments(q, max_segments != 0U ? (int )((unsigned short )max_segments) : 128);
#line 891
  blk_queue_segment_boundary(q, 4095UL);
#line 893
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 893
  if (tmp___1 != 0) {
#line 894
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 896
    blk_queue_stack_limits(q, b___0);
#line 898
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 899
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 902
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 904
    put_ldev(mdev);
  } else {

  }
#line 906
  return;
}
}
#line 908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  unsigned int now ;
  unsigned int new ;
  unsigned int local ;
  unsigned int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  unsigned int _min1 ;
  unsigned int _min2 ;
  unsigned int _min1___0 ;
  unsigned int _min2___0 ;
  unsigned int _min1___1 ;
  unsigned int _min2___1 ;

  {
#line 912
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 912
  now = tmp << 9;
#line 913
  local = mdev->local_max_bio_size;
#line 914
  peer = mdev->peer_max_bio_size;
#line 916
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 916
  if (tmp___1 != 0) {
#line 917
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 917
    local = tmp___0 << 9;
#line 918
    mdev->local_max_bio_size = local;
#line 919
    put_ldev(mdev);
  } else {

  }
#line 921
  _min1 = local;
#line 921
  _min2 = 131072U;
#line 921
  local = _min1 < _min2 ? _min1 : _min2;
#line 926
  if ((int )mdev->state.ldv_39979.conn > 9) {
#line 927
    if (mdev->agreed_pro_version <= 93) {
#line 928
      _min1___0 = mdev->peer_max_bio_size;
#line 928
      _min2___0 = 32768U;
#line 928
      peer = _min1___0 < _min2___0 ? _min1___0 : _min2___0;
    } else
#line 930
    if (mdev->agreed_pro_version == 94) {
#line 931
      peer = 32768U;
    } else {
#line 933
      peer = 131072U;
    }
  } else {

  }
#line 936
  _min1___1 = local;
#line 936
  _min2___1 = peer;
#line 936
  new = _min1___1 < _min2___1 ? _min1___1 : _min2___1;
#line 938
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 939
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%u < %u)\n",
            new, now);
  } else {

  }
#line 941
  if (new != now) {
#line 942
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 944
  drbd_setup_queue_param(mdev, new);
#line 945
  return;
}
}
#line 954 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 956
  tmp = drbd_test_and_set_flag(mdev, CONFIG_PENDING);
#line 956
  if (tmp == 0) {
#line 956
    goto ldv_54372;
  } else {

  }
#line 956
  tmp___0 = get_current();
#line 956
  __wait.flags = 0U;
#line 956
  __wait.private = (void *)tmp___0;
#line 956
  __wait.func = & autoremove_wake_function;
#line 956
  __wait.task_list.next = & __wait.task_list;
#line 956
  __wait.task_list.prev = & __wait.task_list;
  ldv_54375: 
#line 956
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 956
  tmp___1 = drbd_test_and_set_flag(mdev, CONFIG_PENDING);
#line 956
  if (tmp___1 == 0) {
#line 956
    goto ldv_54374;
  } else {

  }
#line 956
  schedule();
#line 956
  goto ldv_54375;
  ldv_54374: 
#line 956
  finish_wait(& mdev->state_wait, & __wait);
  ldv_54372: 
#line 957
  tmp___2 = drbd_test_flag(mdev, DEVICE_DYING);
#line 957
  if (tmp___2 == 0) {
#line 957
    goto ldv_54376;
  } else {

  }
#line 957
  tmp___3 = get_current();
#line 957
  __wait___0.flags = 0U;
#line 957
  __wait___0.private = (void *)tmp___3;
#line 957
  __wait___0.func = & autoremove_wake_function;
#line 957
  __wait___0.task_list.next = & __wait___0.task_list;
#line 957
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_54379: 
#line 957
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 957
  tmp___4 = drbd_test_flag(mdev, DEVICE_DYING);
#line 957
  if (tmp___4 == 0) {
#line 957
    goto ldv_54378;
  } else {

  }
#line 957
  schedule();
#line 957
  goto ldv_54379;
  ldv_54378: 
#line 957
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_54376: 
#line 958
  drbd_thread_start(& mdev->worker);
#line 959
  drbd_flush_workqueue(mdev);
#line 960
  return;
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 967
  spin_lock_irq(& mdev->req_lock);
#line 968
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 971
    drbd_set_flag(mdev, DEVICE_DYING);
#line 972
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 974
    drbd_clear_flag(mdev, CONFIG_PENDING);
  }
#line 975
  spin_unlock_irq(& mdev->req_lock);
#line 976
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 977
  return;
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 982
  s = 0;
#line 984
  tmp = lc_try_lock(mdev->act_log);
#line 984
  if (tmp != 0) {
#line 985
    drbd_al_shrink(mdev);
#line 986
    lc_unlock(mdev->act_log);
  } else {
#line 988
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 989
    return;
  }
#line 992
  spin_lock_irq(& mdev->req_lock);
#line 993
  if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 994
    tmp___0 = drbd_test_and_set_flag(mdev, AL_SUSPENDED);
#line 994
    s = tmp___0 == 0;
  } else {

  }
#line 996
  spin_unlock_irq(& mdev->req_lock);
#line 998
  if (s != 0) {
#line 999
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 1000
  return;
}
}
#line 1004 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  struct lock_class_key __key ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1011
  nbc = 0;
#line 1013
  resync_lru = 0;
#line 1016
  cp_discovered = 0;
#line 1019
  drbd_reconfig_start(mdev);
#line 1022
  if ((int )mdev->state.ldv_39979.disk > 0) {
#line 1023
    retcode = ERR_DISK_CONFIGURED;
#line 1024
    goto fail;
  } else {

  }
#line 1030
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1030
  if (tmp == 0) {
#line 1030
    goto ldv_54405;
  } else {

  }
#line 1030
  tmp___0 = get_current();
#line 1030
  __wait.flags = 0U;
#line 1030
  __wait.private = (void *)tmp___0;
#line 1030
  __wait.func = & autoremove_wake_function;
#line 1030
  __wait.task_list.next = & __wait.task_list;
#line 1030
  __wait.task_list.prev = & __wait.task_list;
  ldv_54408: 
#line 1030
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1030
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1030
  if (tmp___1 == 0) {
#line 1030
    goto ldv_54407;
  } else {

  }
#line 1030
  schedule();
#line 1030
  goto ldv_54408;
  ldv_54407: 
#line 1030
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54405: 
#line 1033
  drbd_clear_flag(mdev, FORCE_DETACH);
#line 1034
  drbd_clear_flag(mdev, WAS_IO_ERROR);
#line 1035
  drbd_clear_flag(mdev, WAS_READ_ERROR);
#line 1038
  mdev->rs_total = 0UL;
#line 1039
  mdev->rs_failed = 0UL;
#line 1040
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 1043
  tmp___2 = kzalloc(472UL, 208U);
#line 1043
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 1044
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1045
    retcode = ERR_NOMEM;
#line 1046
    goto fail;
  } else {

  }
#line 1049
  nbc->dc.disk_size = 0ULL;
#line 1050
  nbc->dc.on_io_error = 0;
#line 1051
  nbc->dc.fencing = 0;
#line 1052
  nbc->dc.max_bio_bvecs = 0;
#line 1054
  spinlock_check(& nbc->md.uuid_lock);
#line 1054
  __raw_spin_lock_init(& nbc->md.uuid_lock.ldv_5957.rlock, "&(&nbc->md.uuid_lock)->rlock",
                       & __key);
#line 1056
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 1056
  if (tmp___3 == 0) {
#line 1057
    retcode = ERR_MANDATORY_TAG;
#line 1058
    goto fail;
  } else {

  }
#line 1061
  if (nbc->dc.meta_dev_idx < -3) {
#line 1062
    retcode = ERR_MD_IDX_INVALID;
#line 1063
    goto fail;
  } else {

  }
#line 1066
  tmp___4 = get_net_conf(mdev);
#line 1066
  if (tmp___4 != 0) {
#line 1067
    prot = (mdev->net_conf)->wire_protocol;
#line 1068
    put_net_conf(mdev);
#line 1069
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 1070
      retcode = ERR_STONITH_AND_PROT_A;
#line 1071
      goto fail;
    } else {

    }
  } else {

  }
#line 1075
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 1077
  tmp___6 = IS_ERR((void const   *)bdev);
#line 1077
  if (tmp___6 != 0L) {
#line 1078
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 1080
    retcode = ERR_OPEN_DISK;
#line 1081
    goto fail;
  } else {

  }
#line 1083
  nbc->backing_bdev = bdev;
#line 1093
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1097
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1097
  if (tmp___8 != 0L) {
#line 1098
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1098
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1100
    retcode = ERR_OPEN_MD_DISK;
#line 1101
    goto fail;
  } else {

  }
#line 1103
  nbc->md_bdev = bdev;
#line 1105
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1108
    retcode = ERR_MD_IDX_INVALID;
#line 1109
    goto fail;
  } else {

  }
#line 1112
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1115
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1116
    retcode = ERR_NOMEM;
#line 1117
    goto fail;
  } else {

  }
#line 1121
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1123
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1123
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1124
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1127
    retcode = ERR_DISK_TOO_SMALL;
#line 1128
    goto fail;
  } else {

  }
#line 1131
  if (nbc->dc.meta_dev_idx < 0) {
#line 1132
    max_possible_sectors = 2251799813685248UL;
#line 1134
    min_md_device_sectors = 2048UL;
  } else {
#line 1136
    max_possible_sectors = 8587575296UL;
#line 1137
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1140
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1140
  if (tmp___11 < min_md_device_sectors) {
#line 1141
    retcode = ERR_MD_DISK_TOO_SMALL;
#line 1142
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1145
    goto fail;
  } else {

  }
#line 1150
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1150
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1150
  if (tmp___12 < tmp___13) {
#line 1152
    retcode = ERR_DISK_TOO_SMALL;
#line 1153
    goto fail;
  } else {

  }
#line 1156
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1158
  if (nbc->known_size > max_possible_sectors) {
#line 1159
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1162
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1163
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1167
  drbd_suspend_io(mdev);
#line 1169
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1169
  if (tmp___14 == 0) {
#line 1169
    goto ldv_54411;
  } else {
#line 1169
    tmp___15 = is_susp(mdev->state);
#line 1169
    if (tmp___15 != 0) {
#line 1169
      goto ldv_54411;
    } else {

    }
  }
#line 1169
  tmp___16 = get_current();
#line 1169
  __wait___0.flags = 0U;
#line 1169
  __wait___0.private = (void *)tmp___16;
#line 1169
  __wait___0.func = & autoremove_wake_function;
#line 1169
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1169
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_54414: 
#line 1169
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1169
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1169
  if (tmp___17 == 0) {
#line 1169
    goto ldv_54413;
  } else {
#line 1169
    tmp___18 = is_susp(mdev->state);
#line 1169
    if (tmp___18 != 0) {
#line 1169
      goto ldv_54413;
    } else {

    }
  }
#line 1169
  schedule();
#line 1169
  goto ldv_54414;
  ldv_54413: 
#line 1169
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_54411: 
#line 1171
  drbd_flush_workqueue(mdev);
#line 1173
  val.i = 0U;
#line 1173
  val.ldv_39979.disk = 1U;
#line 1173
  mask.i = 0U;
#line 1173
  mask.ldv_39979.disk = 15U;
#line 1173
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1174
  retcode = (enum drbd_ret_code )rv;
#line 1175
  drbd_resume_io(mdev);
#line 1176
  if ((int )rv <= 0) {
#line 1177
    goto fail;
  } else {

  }
#line 1179
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1179
  if (tmp___19 == 0) {
#line 1180
    goto force_diskless;
  } else {

  }
#line 1182
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1185
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1185
  logical_block_size = (int )tmp___20;
#line 1186
  if (logical_block_size == 0) {
#line 1187
    logical_block_size = 512;
  } else {

  }
#line 1189
  if (logical_block_size != 512) {
#line 1190
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1191
      tmp___21 = alloc_pages(16U, 0U);
#line 1191
      page = tmp___21;
#line 1192
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1193
        goto force_diskless_dec;
      } else {

      }
#line 1195
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1197
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1199
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1203
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1204
    tmp___22 = drbd_bm_init(mdev);
#line 1204
    if (tmp___22 != 0) {
#line 1205
      retcode = ERR_NOMEM;
#line 1206
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1210
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1210
  retcode = (enum drbd_ret_code )tmp___23;
#line 1211
  if ((unsigned int )retcode != 101U) {
#line 1212
    goto force_diskless_dec;
  } else {

  }
#line 1214
  if (((int )mdev->state.ldv_39979.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1217
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1219
    retcode = ERR_DATA_NOT_CURRENT;
#line 1220
    goto force_diskless_dec;
  } else {

  }
#line 1224
  tmp___24 = drbd_check_al_size(mdev);
#line 1224
  if (tmp___24 != 0) {
#line 1225
    retcode = ERR_NOMEM;
#line 1226
    goto force_diskless_dec;
  } else {

  }
#line 1230
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1230
  if (tmp___25 != 0) {
#line 1230
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1230
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1232
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1233
      retcode = ERR_DISK_TOO_SMALL;
#line 1234
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1237
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1237
  if (tmp___27 == 0) {
#line 1238
    retcode = ERR_IO_MD_DISK;
#line 1239
    goto force_diskless_dec;
  } else {

  }
#line 1244
  if ((unsigned int )*((unsigned char *)nbc + 444UL) != 0U) {
#line 1245
    drbd_set_flag(mdev, MD_NO_FUA);
  } else {
#line 1247
    drbd_clear_flag(mdev, MD_NO_FUA);
  }
#line 1253
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1253
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1253);
  } else {

  }
#line 1254
  mdev->ldev = nbc;
#line 1255
  mdev->resync = resync_lru;
#line 1256
  nbc = 0;
#line 1257
  resync_lru = 0;
#line 1259
  mdev->write_ordering = WO_bdev_flush;
#line 1260
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1262
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1262
  if (tmp___28 != 0) {
#line 1263
    drbd_set_flag(mdev, CRASHED_PRIMARY);
  } else {
#line 1265
    drbd_clear_flag(mdev, CRASHED_PRIMARY);
  }
#line 1267
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1267
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1269
    drbd_set_flag(mdev, CRASHED_PRIMARY);
#line 1270
    cp_discovered = 1;
  } else {

  }
#line 1273
  mdev->send_cnt = 0U;
#line 1274
  mdev->recv_cnt = 0U;
#line 1275
  mdev->read_cnt = 0U;
#line 1276
  mdev->writ_cnt = 0U;
#line 1278
  drbd_reconsider_max_bio_size(mdev);
#line 1294
  drbd_clear_flag(mdev, USE_DEGR_WFC_T);
#line 1295
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1295
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1295
    if (tmp___30 != 0) {
#line 1295
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1295
      if (tmp___31 == 0) {
#line 1298
        drbd_set_flag(mdev, USE_DEGR_WFC_T);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1300
  dd = drbd_determine_dev_size(mdev, 0);
#line 1301
  if ((int )dd == -1) {
#line 1302
    retcode = ERR_NOMEM_BITMAP;
#line 1303
    goto force_diskless_dec;
  } else
#line 1304
  if ((int )dd == 2) {
#line 1305
    drbd_set_flag(mdev, RESYNC_AFTER_NEG);
  } else {

  }
#line 1307
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1307
  if (tmp___34 != 0) {
#line 1308
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1310
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1310
    if (tmp___32 != 0) {
#line 1312
      retcode = ERR_IO_MD_DISK;
#line 1313
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1316
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1316
    if (tmp___33 < 0) {
#line 1318
      retcode = ERR_IO_MD_DISK;
#line 1319
      goto force_diskless_dec;
    } else {

    }
  }
#line 1323
  if (cp_discovered != 0) {
#line 1324
    drbd_al_apply_to_bm(mdev);
#line 1325
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1325
    if (tmp___35 != 0) {
#line 1327
      retcode = ERR_IO_MD_DISK;
#line 1328
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1332
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1332
  tmp___37 = drbd_bm_bits(mdev);
#line 1332
  if (tmp___36 == tmp___37) {
#line 1333
    drbd_suspend_al(mdev);
  } else {

  }
#line 1335
  spin_lock_irq(& mdev->req_lock);
#line 1336
  os = mdev->state;
#line 1337
  ns.i = os.i;
#line 1343
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1343
  if (tmp___39 != 0) {
#line 1344
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1344
    if (tmp___38 != 0) {
#line 1345
      ns.ldv_39979.disk = 7U;
    } else {
#line 1347
      ns.ldv_39979.disk = 5U;
    }
  } else {
#line 1349
    ns.ldv_39979.disk = 4U;
  }
#line 1352
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1352
  if (tmp___40 != 0) {
#line 1353
    ns.ldv_39979.pdsk = 5U;
  } else {

  }
#line 1355
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1357
    ns.ldv_39979.disk = 8U;
  } else {

  }
#line 1366
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1367
    mdev->new_state_tmp.i = ns.i;
#line 1368
    ns.i = os.i;
#line 1369
    ns.ldv_39979.disk = 3U;
#line 1374
    kfree((void const   *)mdev->p_uuid);
#line 1375
    mdev->p_uuid = 0;
  } else {

  }
#line 1378
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1379
  ns = mdev->state;
#line 1380
  spin_unlock_irq(& mdev->req_lock);
#line 1382
  if ((int )rv <= 0) {
#line 1383
    goto force_diskless_dec;
  } else {

  }
#line 1385
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1386
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1388
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1390
  drbd_md_mark_dirty(mdev);
#line 1391
  drbd_md_sync(mdev);
#line 1393
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1394
  put_ldev(mdev);
#line 1395
  reply->ret_code = (int )retcode;
#line 1396
  drbd_reconfig_done(mdev);
#line 1397
  return (0);
  force_diskless_dec: 
#line 1400
  put_ldev(mdev);
  force_diskless: 
#line 1402
  val___0.i = 0U;
#line 1402
  val___0.ldv_39979.disk = 2U;
#line 1402
  mask___0.i = 0U;
#line 1402
  mask___0.ldv_39979.disk = 15U;
#line 1402
  drbd_force_state(mdev, mask___0, val___0);
#line 1403
  drbd_md_sync(mdev);
  fail: ;
#line 1405
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1406
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1407
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1409
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1410
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1412
    kfree((void const   *)nbc);
  } else {

  }
#line 1414
  lc_destroy(resync_lru);
#line 1416
  reply->ret_code = (int )retcode;
#line 1417
  drbd_reconfig_done(mdev);
#line 1418
  return (0);
}
}
#line 1426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  struct detach dt ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___0 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1431
  dt.detach_force = (unsigned char)0;
#line 1433
  tmp = detach_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dt);
#line 1433
  if (tmp == 0) {
#line 1434
    reply->ret_code = 126;
#line 1435
    goto out;
  } else {

  }
#line 1438
  if ((unsigned int )*((unsigned char *)(& dt) + 0UL) != 0U) {
#line 1439
    drbd_set_flag(mdev, FORCE_DETACH);
#line 1440
    val.i = 0U;
#line 1440
    val.ldv_39979.disk = 2U;
#line 1440
    mask.i = 0U;
#line 1440
    mask.ldv_39979.disk = 15U;
#line 1440
    drbd_force_state(mdev, mask, val);
#line 1441
    reply->ret_code = 1;
#line 1442
    goto out;
  } else {

  }
#line 1445
  drbd_suspend_io(mdev);
#line 1446
  drbd_md_get_buffer(mdev);
#line 1447
  val___0.i = 0U;
#line 1447
  val___0.ldv_39979.disk = 2U;
#line 1447
  mask___0.i = 0U;
#line 1447
  mask___0.ldv_39979.disk = 15U;
#line 1447
  tmp___0 = drbd_request_state(mdev, mask___0, val___0);
#line 1447
  retcode = (enum drbd_ret_code )tmp___0;
#line 1448
  drbd_md_put_buffer(mdev);
#line 1450
  __ret = 0;
#line 1450
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1450
    tmp___1 = get_current();
#line 1450
    __wait.flags = 0U;
#line 1450
    __wait.private = (void *)tmp___1;
#line 1450
    __wait.func = & autoremove_wake_function;
#line 1450
    __wait.task_list.next = & __wait.task_list;
#line 1450
    __wait.task_list.prev = & __wait.task_list;
    ldv_54447: 
#line 1450
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1450
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1450
      goto ldv_54445;
    } else {

    }
#line 1450
    tmp___2 = get_current();
#line 1450
    tmp___3 = signal_pending(tmp___2);
#line 1450
    if (tmp___3 == 0) {
#line 1450
      schedule();
#line 1450
      goto ldv_54446;
    } else {

    }
#line 1450
    __ret = -512;
#line 1450
    goto ldv_54445;
    ldv_54446: ;
#line 1450
    goto ldv_54447;
    ldv_54445: 
#line 1450
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1450
  ret = __ret;
#line 1452
  drbd_resume_io(mdev);
#line 1454
  if ((long )retcode == 4294967285L) {
#line 1455
    retcode = 2;
  } else {

  }
#line 1456
  if (ret != 0) {
#line 1457
    retcode = ERR_INTR;
  } else {

  }
#line 1458
  reply->ret_code = (int )retcode;
  out: ;
#line 1460
  return (0);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1468
  new_conf = 0;
#line 1469
  tfm = 0;
#line 1470
  integrity_w_tfm = 0;
#line 1471
  integrity_r_tfm = 0;
#line 1472
  new_tl_hash = 0;
#line 1473
  new_ee_hash = 0;
#line 1476
  int_dig_out = 0;
#line 1477
  int_dig_in = 0;
#line 1478
  int_dig_vv = 0;
#line 1481
  drbd_reconfig_start(mdev);
#line 1483
  if ((int )mdev->state.ldv_39979.conn > 0) {
#line 1484
    retcode = ERR_NET_CONFIGURED;
#line 1485
    goto fail;
  } else {

  }
#line 1489
  tmp = kzalloc(544UL, 208U);
#line 1489
  new_conf = (struct net_conf *)tmp;
#line 1490
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1491
    retcode = ERR_NOMEM;
#line 1492
    goto fail;
  } else {

  }
#line 1495
  new_conf->timeout = 60;
#line 1496
  new_conf->try_connect_int = 10;
#line 1497
  new_conf->ping_int = 10;
#line 1498
  new_conf->max_epoch_size = 2048;
#line 1499
  new_conf->max_buffers = 2048;
#line 1500
  new_conf->unplug_watermark = 128;
#line 1501
  new_conf->sndbuf_size = 0;
#line 1502
  new_conf->rcvbuf_size = 0;
#line 1503
  new_conf->ko_count = 0;
#line 1504
  new_conf->after_sb_0p = 0;
#line 1505
  new_conf->after_sb_1p = 0;
#line 1506
  new_conf->after_sb_2p = 0;
#line 1507
  new_conf->want_lose = 0U;
#line 1508
  new_conf->two_primaries = 0U;
#line 1509
  new_conf->wire_protocol = 3;
#line 1510
  new_conf->ping_timeo = 5;
#line 1511
  new_conf->rr_conflict = 0;
#line 1512
  new_conf->on_congestion = 0;
#line 1513
  new_conf->cong_extents = 127;
#line 1515
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1515
  if (tmp___0 == 0) {
#line 1516
    retcode = ERR_MANDATORY_TAG;
#line 1517
    goto fail;
  } else {

  }
#line 1520
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1522
    retcode = ERR_NOT_PROTO_C;
#line 1523
    goto fail;
  } else {

  }
#line 1526
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1526
  if (tmp___1 != 0) {
#line 1527
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1528
    put_ldev(mdev);
#line 1529
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1530
      retcode = ERR_STONITH_AND_PROT_A;
#line 1531
      goto fail;
    } else {

    }
  } else {

  }
#line 1535
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1536
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1537
    goto fail;
  } else {

  }
#line 1540
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1541
    retcode = ERR_DISCARD;
#line 1542
    goto fail;
  } else {

  }
#line 1545
  retcode = NO_ERROR;
#line 1547
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1548
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1549
  i = 0;
#line 1549
  goto ldv_54475;
  ldv_54474: 
#line 1550
  odev = minor_to_mdev((unsigned int )i);
#line 1551
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1552
    goto ldv_54473;
  } else {

  }
#line 1553
  tmp___4 = get_net_conf(odev);
#line 1553
  if (tmp___4 != 0) {
#line 1554
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1555
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1555
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1555
      if (tmp___2 == 0) {
#line 1557
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1559
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1560
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1560
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1560
      if (tmp___3 == 0) {
#line 1562
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1564
    put_net_conf(odev);
#line 1565
    if ((unsigned int )retcode != 101U) {
#line 1566
      goto fail;
    } else {

    }
  } else {

  }
  ldv_54473: 
#line 1549
  i = i + 1;
  ldv_54475: ;
#line 1549
  if ((unsigned int )i < minor_count) {
#line 1550
    goto ldv_54474;
  } else {

  }

#line 1570
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1571
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1573
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1574
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1574
    if (tmp___5 != 0L) {
#line 1575
      tfm = 0;
#line 1576
      retcode = ERR_AUTH_ALG;
#line 1577
      goto fail;
    } else {

    }
#line 1580
    tmp___6 = crypto_hash_tfm(tfm);
#line 1580
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1580
    if (tmp___7 == 0) {
#line 1581
      retcode = ERR_AUTH_ALG_ND;
#line 1582
      goto fail;
    } else {

    }
  } else {

  }
#line 1586
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1587
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1588
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1588
    if (tmp___8 != 0L) {
#line 1589
      integrity_w_tfm = 0;
#line 1590
      retcode = ERR_INTEGRITY_ALG;
#line 1591
      goto fail;
    } else {

    }
#line 1594
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1594
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1594
    if (tmp___10 == 0) {
#line 1595
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1596
      goto fail;
    } else {

    }
#line 1599
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1600
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1600
    if (tmp___11 != 0L) {
#line 1601
      integrity_r_tfm = 0;
#line 1602
      retcode = ERR_INTEGRITY_ALG;
#line 1603
      goto fail;
    } else {

    }
  } else {

  }
#line 1607
  ns = new_conf->max_epoch_size / 8;
#line 1608
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1609
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1609
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1610
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1611
      retcode = ERR_NOMEM;
#line 1612
      goto fail;
    } else {

    }
  } else {

  }
#line 1616
  ns = new_conf->max_buffers / 8;
#line 1617
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1618
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1618
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1619
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1620
      retcode = ERR_NOMEM;
#line 1621
      goto fail;
    } else {

    }
  } else {

  }
#line 1625
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1627
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1628
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1628
    i = (int )tmp___14;
#line 1629
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1630
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1631
      retcode = ERR_NOMEM;
#line 1632
      goto fail;
    } else {

    }
#line 1634
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1635
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1636
      retcode = ERR_NOMEM;
#line 1637
      goto fail;
    } else {

    }
#line 1639
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1640
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1641
      retcode = ERR_NOMEM;
#line 1642
      goto fail;
    } else {

    }
  } else {

  }
#line 1646
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1647
    tmp___15 = drbd_bm_init(mdev);
#line 1647
    if (tmp___15 != 0) {
#line 1648
      retcode = ERR_NOMEM;
#line 1649
      goto fail;
    } else {

    }
  } else {

  }
#line 1653
  drbd_flush_workqueue(mdev);
#line 1654
  spin_lock_irq(& mdev->req_lock);
#line 1655
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1656
    retcode = ERR_NET_CONFIGURED;
#line 1657
    spin_unlock_irq(& mdev->req_lock);
#line 1658
    goto fail;
  } else {

  }
#line 1660
  mdev->net_conf = new_conf;
#line 1662
  mdev->send_cnt = 0U;
#line 1663
  mdev->recv_cnt = 0U;
#line 1665
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1666
    kfree((void const   *)mdev->tl_hash);
#line 1667
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1668
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1671
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1672
    kfree((void const   *)mdev->ee_hash);
#line 1673
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1674
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1677
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1678
  mdev->cram_hmac_tfm = tfm;
#line 1680
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1681
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1683
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1684
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1686
  kfree((void const   *)mdev->int_dig_out);
#line 1687
  kfree((void const   *)mdev->int_dig_in);
#line 1688
  kfree((void const   *)mdev->int_dig_vv);
#line 1689
  mdev->int_dig_out = int_dig_out;
#line 1690
  mdev->int_dig_in = int_dig_in;
#line 1691
  mdev->int_dig_vv = int_dig_vv;
#line 1692
  __ns.i = mdev->state.i;
#line 1692
  __ns.ldv_39979.conn = 2U;
#line 1692
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1692
  retcode = (enum drbd_ret_code )tmp___16;
#line 1693
  spin_unlock_irq(& mdev->req_lock);
#line 1695
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1696
  reply->ret_code = (int )retcode;
#line 1697
  drbd_reconfig_done(mdev);
#line 1698
  return (0);
  fail: 
#line 1701
  kfree((void const   *)int_dig_out);
#line 1702
  kfree((void const   *)int_dig_in);
#line 1703
  kfree((void const   *)int_dig_vv);
#line 1704
  crypto_free_hash(tfm);
#line 1705
  crypto_free_hash(integrity_w_tfm);
#line 1706
  crypto_free_hash(integrity_r_tfm);
#line 1707
  kfree((void const   *)new_tl_hash);
#line 1708
  kfree((void const   *)new_ee_hash);
#line 1709
  kfree((void const   *)new_conf);
#line 1711
  reply->ret_code = (int )retcode;
#line 1712
  drbd_reconfig_done(mdev);
#line 1713
  return (0);
}
}
#line 1716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1722
  memset((void *)(& dc), 0, 4UL);
#line 1723
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1723
  if (tmp == 0) {
#line 1724
    retcode = 126;
#line 1725
    goto fail;
  } else {

  }
#line 1728
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1729
    spin_lock_irq(& mdev->req_lock);
#line 1730
    if ((int )mdev->state.ldv_39979.conn > 7) {
#line 1731
      __ns.i = mdev->state.i;
#line 1731
      __ns.ldv_39979.conn = 1U;
#line 1731
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1732
    spin_unlock_irq(& mdev->req_lock);
#line 1733
    goto done;
  } else {

  }
#line 1736
  val.i = 0U;
#line 1736
  val.ldv_39979.conn = 1U;
#line 1736
  mask.i = 0U;
#line 1736
  mask.ldv_39979.conn = 31U;
#line 1736
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1736
  retcode = (int )tmp___0;
#line 1738
  if (retcode == 2) {
#line 1739
    goto done;
  } else
#line 1740
  if (retcode == -9) {
#line 1741
    goto done;
  } else
#line 1742
  if (retcode == -7) {
#line 1745
    val___0.i = 0U;
#line 1745
    val___0.ldv_39979.conn = 1U;
#line 1745
    val___0.ldv_39979.pdsk = 5U;
#line 1744
    mask___0.i = 0U;
#line 1744
    mask___0.ldv_39979.conn = 31U;
#line 1745
    mask___0.ldv_39979.pdsk = 15U;
#line 1745
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1746
  if (retcode == -10) {
#line 1749
    val___1.i = 0U;
#line 1749
    val___1.ldv_39979.conn = 1U;
#line 1749
    val___1.ldv_39979.disk = 5U;
#line 1748
    mask___1.i = 0U;
#line 1748
    mask___1.ldv_39979.conn = 31U;
#line 1749
    mask___1.ldv_39979.disk = 15U;
#line 1749
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1749
    retcode = (int )tmp___1;
#line 1751
    if (retcode == -11 || retcode == -16) {
#line 1752
      val___2.i = 0U;
#line 1752
      val___2.ldv_39979.conn = 1U;
#line 1752
      mask___2.i = 0U;
#line 1752
      mask___2.ldv_39979.conn = 31U;
#line 1752
      drbd_force_state(mdev, mask___2, val___2);
#line 1753
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1757
  if (retcode <= 0) {
#line 1758
    goto fail;
  } else {

  }
#line 1760
  __ret = 0;
#line 1760
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1760
    tmp___2 = get_current();
#line 1760
    __wait.flags = 0U;
#line 1760
    __wait.private = (void *)tmp___2;
#line 1760
    __wait.func = & autoremove_wake_function;
#line 1760
    __wait.task_list.next = & __wait.task_list;
#line 1760
    __wait.task_list.prev = & __wait.task_list;
    ldv_54510: 
#line 1760
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1760
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1760
      goto ldv_54508;
    } else {

    }
#line 1760
    tmp___3 = get_current();
#line 1760
    tmp___4 = signal_pending(tmp___3);
#line 1760
    if (tmp___4 == 0) {
#line 1760
      schedule();
#line 1760
      goto ldv_54509;
    } else {

    }
#line 1760
    __ret = -512;
#line 1760
    goto ldv_54508;
    ldv_54509: ;
#line 1760
    goto ldv_54510;
    ldv_54508: 
#line 1760
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1760
  if (__ret != 0) {
#line 1764
    retcode = 129;
#line 1765
    goto fail;
  } else {

  }
  done: 
#line 1769
  retcode = 101;
  fail: 
#line 1771
  drbd_md_sync(mdev);
#line 1772
  reply->ret_code = retcode;
#line 1773
  return (0);
}
}
#line 1776 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1780
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1781
  if ((int )mdev->state.ldv_39979.role != (int )mdev->state.ldv_39979.peer) {
#line 1782
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1784
    iass = drbd_test_flag(mdev, DISCARD_CONCURRENT);
  }
#line 1786
  if (iass != 0) {
#line 1787
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1789
    val.i = 0U;
#line 1789
    val.ldv_39979.conn = 15U;
#line 1789
    mask.i = 0U;
#line 1789
    mask.ldv_39979.conn = 31U;
#line 1789
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1791
  return;
}
}
#line 1792 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1796
  retcode = 101;
#line 1800
  memset((void *)(& rs), 0, 16UL);
#line 1801
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1801
  if (tmp == 0) {
#line 1802
    retcode = 126;
#line 1803
    goto fail;
  } else {

  }
#line 1806
  if ((int )mdev->state.ldv_39979.conn > 10) {
#line 1807
    retcode = 130;
#line 1808
    goto fail;
  } else {

  }
#line 1811
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1813
    retcode = 131;
#line 1814
    goto fail;
  } else {

  }
#line 1817
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1817
  if (tmp___0 == 0) {
#line 1818
    retcode = 138;
#line 1819
    goto fail;
  } else {

  }
#line 1822
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1823
    retcode = 153;
#line 1824
    goto fail_ldev;
  } else {

  }
#line 1827
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1827
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1828
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1830
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1831
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1832
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1833
  drbd_md_sync(mdev);
#line 1834
  put_ldev(mdev);
#line 1835
  if ((int )dd == -1) {
#line 1836
    retcode = 140;
#line 1837
    goto fail;
  } else {

  }
#line 1840
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1841
    if ((int )dd == 2) {
#line 1842
      drbd_set_flag(mdev, RESIZE_PENDING);
    } else {

    }
#line 1844
    drbd_send_uuids(mdev);
#line 1845
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1849
  reply->ret_code = retcode;
#line 1850
  return (0);
  fail_ldev: 
#line 1853
  put_ldev(mdev);
#line 1854
  goto fail;
}
}
#line 1857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1860
  retcode = 101;
#line 1864
  verify_tfm = 0;
#line 1865
  csums_tfm = 0;
#line 1868
  rs_plan_s = 0;
#line 1871
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1871
  if (tmp) {
#line 1871
    tmp___0 = 0;
  } else {
#line 1871
    tmp___0 = 1;
  }
#line 1871
  if (tmp___0) {
#line 1872
    retcode = 122;
#line 1873
    goto fail;
  } else {

  }
#line 1876
  if ((nlp->flags & 2) != 0) {
#line 1877
    memset((void *)(& sc), 0, 212UL);
#line 1878
    sc.rate = 250;
#line 1879
    sc.after = -1;
#line 1880
    sc.al_extents = 127;
#line 1881
    sc.on_no_data = 0;
#line 1882
    sc.c_plan_ahead = 0;
#line 1883
    sc.c_delay_target = 10;
#line 1884
    sc.c_fill_target = 0;
#line 1885
    sc.c_max_rate = 102400;
#line 1886
    sc.c_min_rate = 4096;
  } else {
#line 1888
    __len = 212UL;
#line 1888
    if (__len > 63UL) {
#line 1888
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1888
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1890
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1890
  if (tmp___1 == 0) {
#line 1891
    retcode = 126;
#line 1892
    goto fail;
  } else {

  }
#line 1896
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1901
  if (rsr != 0) {
#line 1901
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1901
    if (tmp___2 != 0) {
#line 1902
      retcode = 148;
#line 1903
      goto fail;
    } else {

    }
  } else {

  }
#line 1906
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1907
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1908
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1908
    if (tmp___3 != 0L) {
#line 1909
      csums_tfm = 0;
#line 1910
      retcode = 144;
#line 1911
      goto fail;
    } else {

    }
#line 1914
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1914
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1914
    if (tmp___5 == 0) {
#line 1915
      retcode = 145;
#line 1916
      goto fail;
    } else {

    }
  } else {

  }
#line 1921
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1923
  if (ovr != 0) {
#line 1924
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1924
    if (tmp___6 != 0) {
#line 1925
      retcode = 149;
#line 1926
      goto fail;
    } else {

    }
  } else {

  }
#line 1930
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1931
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1932
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1932
    if (tmp___7 != 0L) {
#line 1933
      verify_tfm = 0;
#line 1934
      retcode = 146;
#line 1935
      goto fail;
    } else {

    }
#line 1938
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1938
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1938
    if (tmp___9 == 0) {
#line 1939
      retcode = 147;
#line 1940
      goto fail;
    } else {

    }
  } else {

  }
#line 1945
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1946
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1948
    if (err != 0) {
#line 1949
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1950
      retcode = 143;
#line 1951
      goto fail;
    } else {

    }
  } else {

  }
#line 1955
  _b = sc.rate <= 0;
#line 1955
  if (_b != 0) {
#line 1955
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1955);
  } else {

  }
#line 1955
  if (_b != 0) {
#line 1955
    sc.rate = 1;
  } else {

  }
#line 1956
  _b___0 = sc.al_extents <= 6;
#line 1956
  if (_b___0 != 0) {
#line 1956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared",
            1956);
  } else {

  }
#line 1956
  if (_b___0 != 0) {
#line 1956
    sc.al_extents = 127;
  } else {

  }
#line 1958
  if (sc.al_extents > 3843) {
#line 1959
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1960
    sc.al_extents = 3843;
  } else {

  }
#line 1967
  if (sc.after >= 0) {
#line 1968
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1973
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1974
  if (retcode != 101) {
#line 1975
    goto fail;
  } else {

  }
#line 1977
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1978
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1979
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1979
    rs_plan_s = (int *)tmp___10;
#line 1980
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1981
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1982
      retcode = 122;
#line 1983
      goto fail;
    } else {

    }
  } else {

  }
#line 1989
  spin_lock(& mdev->peer_seq_lock);
#line 1990
  mdev->sync_conf = sc;
#line 1992
  if (rsr == 0) {
#line 1993
    crypto_free_hash(mdev->csums_tfm);
#line 1994
    mdev->csums_tfm = csums_tfm;
#line 1995
    csums_tfm = 0;
  } else {

  }
#line 1998
  if (ovr == 0) {
#line 1999
    crypto_free_hash(mdev->verify_tfm);
#line 2000
    mdev->verify_tfm = verify_tfm;
#line 2001
    verify_tfm = 0;
  } else {

  }
#line 2004
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2005
    kfree((void const   *)mdev->rs_plan_s.values);
#line 2006
    mdev->rs_plan_s.values = rs_plan_s;
#line 2007
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2008
    mdev->rs_planed = 0;
#line 2009
    rs_plan_s = 0;
  } else {

  }
#line 2012
  spin_unlock(& mdev->peer_seq_lock);
#line 2014
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2014
  if (tmp___14 != 0) {
#line 2015
    tmp___11 = lc_try_lock(mdev->act_log);
#line 2015
    if (tmp___11 != 0) {
#line 2015
      goto ldv_54555;
    } else {

    }
#line 2015
    tmp___12 = get_current();
#line 2015
    __wait.flags = 0U;
#line 2015
    __wait.private = (void *)tmp___12;
#line 2015
    __wait.func = & autoremove_wake_function;
#line 2015
    __wait.task_list.next = & __wait.task_list;
#line 2015
    __wait.task_list.prev = & __wait.task_list;
    ldv_54558: 
#line 2015
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 2015
    tmp___13 = lc_try_lock(mdev->act_log);
#line 2015
    if (tmp___13 != 0) {
#line 2015
      goto ldv_54557;
    } else {

    }
#line 2015
    schedule();
#line 2015
    goto ldv_54558;
    ldv_54557: 
#line 2015
    finish_wait(& mdev->al_wait, & __wait);
    ldv_54555: 
#line 2016
    drbd_al_shrink(mdev);
#line 2017
    err = drbd_check_al_size(mdev);
#line 2018
    lc_unlock(mdev->act_log);
#line 2019
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 2021
    put_ldev(mdev);
#line 2022
    drbd_md_sync(mdev);
#line 2024
    if (err != 0) {
#line 2025
      retcode = 122;
#line 2026
      goto fail;
    } else {

    }
  } else {

  }
#line 2030
  if ((int )mdev->state.ldv_39979.conn > 9) {
#line 2031
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 2033
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2033
  if (tmp___15) {
#line 2033
    tmp___16 = 0;
  } else {
#line 2033
    tmp___16 = 1;
  }
#line 2033
  if (tmp___16) {
#line 2034
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 2035
    drbd_calc_cpu_mask(mdev);
#line 2036
    mdev->receiver.reset_cpu_mask = 1;
#line 2037
    mdev->asender.reset_cpu_mask = 1;
#line 2038
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 2041
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 2043
  kfree((void const   *)rs_plan_s);
#line 2044
  free_cpumask_var(new_cpu_mask);
#line 2045
  crypto_free_hash(csums_tfm);
#line 2046
  crypto_free_hash(verify_tfm);
#line 2047
  reply->ret_code = retcode;
#line 2048
  return (0);
}
}
#line 2051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2059
  drbd_suspend_io(mdev);
#line 2060
  tmp = drbd_test_flag(mdev, BITMAP_IO);
#line 2060
  if (tmp == 0) {
#line 2060
    goto ldv_54565;
  } else {

  }
#line 2060
  tmp___0 = get_current();
#line 2060
  __wait.flags = 0U;
#line 2060
  __wait.private = (void *)tmp___0;
#line 2060
  __wait.func = & autoremove_wake_function;
#line 2060
  __wait.task_list.next = & __wait.task_list;
#line 2060
  __wait.task_list.prev = & __wait.task_list;
  ldv_54568: 
#line 2060
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2060
  tmp___1 = drbd_test_flag(mdev, BITMAP_IO);
#line 2060
  if (tmp___1 == 0) {
#line 2060
    goto ldv_54567;
  } else {

  }
#line 2060
  schedule();
#line 2060
  goto ldv_54568;
  ldv_54567: 
#line 2060
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54565: 
#line 2061
  drbd_flush_workqueue(mdev);
#line 2063
  val.i = 0U;
#line 2063
  val.ldv_39979.conn = 12U;
#line 2063
  mask.i = 0U;
#line 2063
  mask.ldv_39979.conn = 31U;
#line 2063
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2063
  retcode = (int )tmp___2;
#line 2065
  if (retcode <= 0 && retcode != -15) {
#line 2066
    val___0.i = 0U;
#line 2066
    val___0.ldv_39979.conn = 12U;
#line 2066
    mask___0.i = 0U;
#line 2066
    mask___0.ldv_39979.conn = 31U;
#line 2066
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 2068
  goto ldv_54585;
  ldv_54584: 
#line 2069
  spin_lock_irq(& mdev->req_lock);
#line 2070
  if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 2071
    __ns.i = mdev->state.i;
#line 2071
    __ns.ldv_39979.disk = 4U;
#line 2071
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2071
    retcode = (int )tmp___3;
  } else {

  }
#line 2072
  spin_unlock_irq(& mdev->req_lock);
#line 2074
  if (retcode != -15) {
#line 2075
    goto ldv_54579;
  } else {

  }
#line 2077
  val___1.i = 0U;
#line 2077
  val___1.ldv_39979.conn = 12U;
#line 2077
  mask___1.i = 0U;
#line 2077
  mask___1.ldv_39979.conn = 31U;
#line 2077
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_54585: ;
#line 2068
  if (retcode == -15) {
#line 2069
    goto ldv_54584;
  } else {

  }
  ldv_54579: 
#line 2079
  drbd_resume_io(mdev);
#line 2081
  reply->ret_code = retcode;
#line 2082
  return (0);
}
}
#line 2085 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 2089
  rv = drbd_bmio_set_n_write(mdev);
#line 2090
  drbd_suspend_al(mdev);
#line 2091
  return (rv);
}
}
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 2102
  drbd_suspend_io(mdev);
#line 2103
  tmp = drbd_test_flag(mdev, BITMAP_IO);
#line 2103
  if (tmp == 0) {
#line 2103
    goto ldv_54596;
  } else {

  }
#line 2103
  tmp___0 = get_current();
#line 2103
  __wait.flags = 0U;
#line 2103
  __wait.private = (void *)tmp___0;
#line 2103
  __wait.func = & autoremove_wake_function;
#line 2103
  __wait.task_list.next = & __wait.task_list;
#line 2103
  __wait.task_list.prev = & __wait.task_list;
  ldv_54599: 
#line 2103
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2103
  tmp___1 = drbd_test_flag(mdev, BITMAP_IO);
#line 2103
  if (tmp___1 == 0) {
#line 2103
    goto ldv_54598;
  } else {

  }
#line 2103
  schedule();
#line 2103
  goto ldv_54599;
  ldv_54598: 
#line 2103
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54596: 
#line 2104
  drbd_flush_workqueue(mdev);
#line 2106
  val.i = 0U;
#line 2106
  val.ldv_39979.conn = 11U;
#line 2106
  mask.i = 0U;
#line 2106
  mask.ldv_39979.conn = 31U;
#line 2106
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 2106
  retcode = (int )tmp___2;
#line 2108
  if (retcode <= 0) {
#line 2109
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2112
      val___0.i = 0U;
#line 2112
      val___0.ldv_39979.pdsk = 4U;
#line 2112
      mask___0.i = 0U;
#line 2112
      mask___0.ldv_39979.pdsk = 15U;
#line 2112
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 2113
      if (retcode > 0) {
#line 2114
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_LOCKED_SET_ALLOWED);
#line 2114
        if (tmp___3 != 0) {
#line 2117
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2120
      val___1.i = 0U;
#line 2120
      val___1.ldv_39979.conn = 11U;
#line 2120
      mask___1.i = 0U;
#line 2120
      mask___1.ldv_39979.conn = 31U;
#line 2120
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2122
  drbd_resume_io(mdev);
#line 2124
  reply->ret_code = retcode;
#line 2125
  return (0);
}
}
#line 2128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2131
  retcode = 101;
#line 2133
  val.i = 0U;
#line 2133
  val.ldv_39979.user_isp = 1U;
#line 2133
  mask.i = 0U;
#line 2133
  mask.ldv_39979.user_isp = 1U;
#line 2133
  tmp = drbd_request_state(mdev, mask, val);
#line 2133
  if (tmp == 2) {
#line 2134
    retcode = 134;
  } else {

  }
#line 2136
  reply->ret_code = retcode;
#line 2137
  return (0);
}
}
#line 2140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2143
  retcode = 101;
#line 2146
  val.i = 0U;
#line 2146
  val.ldv_39979.user_isp = 0U;
#line 2146
  mask.i = 0U;
#line 2146
  mask.ldv_39979.user_isp = 1U;
#line 2146
  tmp = drbd_request_state(mdev, mask, val);
#line 2146
  if (tmp == 2) {
#line 2147
    s = mdev->state;
#line 2148
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2149
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2152
      retcode = 135;
    }
  } else {

  }
#line 2156
  reply->ret_code = retcode;
#line 2157
  return (0);
}
}
#line 2160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2163
  val.i = 0U;
#line 2163
  val.ldv_39979.susp = 1U;
#line 2163
  mask.i = 0U;
#line 2163
  mask.ldv_39979.susp = 1U;
#line 2163
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2165
  return (0);
}
}
#line 2168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2171
  tmp = drbd_test_flag(mdev, NEW_CUR_UUID);
#line 2171
  if (tmp != 0) {
#line 2172
    drbd_uuid_new_current(mdev);
#line 2173
    drbd_clear_flag(mdev, NEW_CUR_UUID);
  } else {

  }
#line 2175
  drbd_suspend_io(mdev);
#line 2176
  val.i = 0U;
#line 2176
  val.ldv_39979.susp = 0U;
#line 2176
  val.ldv_39979.susp_nod = 0U;
#line 2176
  val.ldv_39979.susp_fen = 0U;
#line 2176
  mask.i = 0U;
#line 2176
  mask.ldv_39979.susp = 1U;
#line 2176
  mask.ldv_39979.susp_nod = 1U;
#line 2176
  mask.ldv_39979.susp_fen = 1U;
#line 2176
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2177
  if (reply->ret_code == 1) {
#line 2178
    if ((int )mdev->state.ldv_39979.conn <= 9) {
#line 2179
      tl_clear(mdev);
    } else {

    }
#line 2180
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2181
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2183
  drbd_resume_io(mdev);
#line 2185
  return (0);
}
}
#line 2188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2191
  val.i = 0U;
#line 2191
  val.ldv_39979.disk = 5U;
#line 2191
  mask.i = 0U;
#line 2191
  mask.ldv_39979.disk = 15U;
#line 2191
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2192
  return (0);
}
}
#line 2195 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2200
  tl = (unsigned short *)(& reply->tag_list);
#line 2202
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2202
  if (tmp != 0) {
#line 2203
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2204
    put_ldev(mdev);
  } else {

  }
#line 2207
  tmp___0 = get_net_conf(mdev);
#line 2207
  if (tmp___0 != 0) {
#line 2208
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2209
    put_net_conf(mdev);
  } else {

  }
#line 2211
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2213
  tmp___1 = tl;
#line 2213
  tl = tl + 1;
#line 2213
  __gu_p = (void *)tmp___1;
#line 2213
  switch (2UL) {
  case 1UL: 
#line 2213
  *((u8 *)__gu_p) = 0U;
#line 2213
  goto ldv_54668;
  case 2UL: 
#line 2213
  put_unaligned_le16(0, __gu_p);
#line 2213
  goto ldv_54668;
  case 4UL: 
#line 2213
  put_unaligned_le32(0U, __gu_p);
#line 2213
  goto ldv_54668;
  case 8UL: 
#line 2213
  put_unaligned_le64(0ULL, __gu_p);
#line 2213
  goto ldv_54668;
  default: 
#line 2213
  __bad_unaligned_access_size();
#line 2213
  goto ldv_54668;
  }
  ldv_54668: ;
#line 2215
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2221
  tl = (unsigned short *)(& reply->tag_list);
#line 2222
  s = mdev->state;
#line 2226
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2229
  if ((int )s.ldv_39979.conn > 15 && (int )s.ldv_39979.conn <= 21) {
#line 2230
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2230
    if (tmp != 0) {
#line 2231
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2232
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2233
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2236
  tmp___0 = tl;
#line 2236
  tl = tl + 1;
#line 2236
  __gu_p = (void *)tmp___0;
#line 2236
  switch (2UL) {
  case 1UL: 
#line 2236
  *((u8 *)__gu_p) = 0U;
#line 2236
  goto ldv_54684;
  case 2UL: 
#line 2236
  put_unaligned_le16(0, __gu_p);
#line 2236
  goto ldv_54684;
  case 4UL: 
#line 2236
  put_unaligned_le32(0U, __gu_p);
#line 2236
  goto ldv_54684;
  case 8UL: 
#line 2236
  put_unaligned_le64(0ULL, __gu_p);
#line 2236
  goto ldv_54684;
  default: 
#line 2236
  __bad_unaligned_access_size();
#line 2236
  goto ldv_54684;
  }
  ldv_54684: ;
#line 2238
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2246
  tl = (unsigned short *)(& reply->tag_list);
#line 2248
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2248
  if (tmp___0 != 0) {
#line 2250
    tmp = spinlock_check(& (mdev->ldev)->md.uuid_lock);
#line 2250
    flags = _raw_spin_lock_irqsave(tmp);
#line 2251
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2252
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2253
    spin_unlock_irqrestore(& (mdev->ldev)->md.uuid_lock, flags);
#line 2254
    put_ldev(mdev);
  } else {

  }
#line 2256
  tmp___1 = tl;
#line 2256
  tl = tl + 1;
#line 2256
  __gu_p = (void *)tmp___1;
#line 2256
  switch (2UL) {
  case 1UL: 
#line 2256
  *((u8 *)__gu_p) = 0U;
#line 2256
  goto ldv_54701;
  case 2UL: 
#line 2256
  put_unaligned_le16(0, __gu_p);
#line 2256
  goto ldv_54701;
  case 4UL: 
#line 2256
  put_unaligned_le32(0U, __gu_p);
#line 2256
  goto ldv_54701;
  case 8UL: 
#line 2256
  put_unaligned_le64(0ULL, __gu_p);
#line 2256
  goto ldv_54701;
  default: 
#line 2256
  __bad_unaligned_access_size();
#line 2256
  goto ldv_54701;
  }
  ldv_54701: ;
#line 2258
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2273
  tl = (unsigned short *)(& reply->tag_list);
#line 2275
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2275
    tmp = drbd_test_flag(mdev, USE_DEGR_WFC_T);
#line 2275
    rv = tmp != 0;
  } else {
#line 2275
    rv = 2;
  }
#line 2278
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2279
  tmp___0 = tl;
#line 2279
  tl = tl + 1;
#line 2279
  __gu_p = (void *)tmp___0;
#line 2279
  switch (2UL) {
  case 1UL: 
#line 2279
  *((u8 *)__gu_p) = 0U;
#line 2279
  goto ldv_54715;
  case 2UL: 
#line 2279
  put_unaligned_le16(0, __gu_p);
#line 2279
  goto ldv_54715;
  case 4UL: 
#line 2279
  put_unaligned_le32(0U, __gu_p);
#line 2279
  goto ldv_54715;
  case 8UL: 
#line 2279
  put_unaligned_le64(0ULL, __gu_p);
#line 2279
  goto ldv_54715;
  default: 
#line 2279
  __bad_unaligned_access_size();
#line 2279
  goto ldv_54715;
  }
  ldv_54715: ;
#line 2281
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2288
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2288
  args.stop_sector = 0xffffffffffffffffULL;
#line 2293
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2293
  if (tmp == 0) {
#line 2294
    reply->ret_code = 126;
#line 2295
    return (0);
  } else {

  }
#line 2300
  drbd_suspend_io(mdev);
#line 2301
  tmp___0 = drbd_test_flag(mdev, BITMAP_IO);
#line 2301
  if (tmp___0 == 0) {
#line 2301
    goto ldv_54726;
  } else {

  }
#line 2301
  tmp___1 = get_current();
#line 2301
  __wait.flags = 0U;
#line 2301
  __wait.private = (void *)tmp___1;
#line 2301
  __wait.func = & autoremove_wake_function;
#line 2301
  __wait.task_list.next = & __wait.task_list;
#line 2301
  __wait.task_list.prev = & __wait.task_list;
  ldv_54729: 
#line 2301
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2301
  tmp___2 = drbd_test_flag(mdev, BITMAP_IO);
#line 2301
  if (tmp___2 == 0) {
#line 2301
    goto ldv_54728;
  } else {

  }
#line 2301
  schedule();
#line 2301
  goto ldv_54729;
  ldv_54728: 
#line 2301
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_54726: 
#line 2304
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff8UL;
#line 2305
  mdev->ov_stop_sector = (sector_t )args.stop_sector;
#line 2306
  val.i = 0U;
#line 2306
  val.ldv_39979.conn = 18U;
#line 2306
  mask.i = 0U;
#line 2306
  mask.ldv_39979.conn = 31U;
#line 2306
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2307
  drbd_resume_io(mdev);
#line 2308
  return (0);
}
}
#line 2312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2315
  retcode = 101;
#line 2316
  skip_initial_sync = 0;
#line 2321
  memset((void *)(& args), 0, 4UL);
#line 2322
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2322
  if (tmp == 0) {
#line 2323
    reply->ret_code = 126;
#line 2324
    return (0);
  } else {

  }
#line 2327
  ldv_mutex_lock_303(& mdev->state_mutex);
#line 2329
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2329
  if (tmp___0 == 0) {
#line 2330
    retcode = 138;
#line 2331
    goto out;
  } else {

  }
#line 2335
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2337
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2338
    skip_initial_sync = 1;
  } else
#line 2339
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2340
    retcode = 151;
#line 2341
    goto out_dec;
  } else {

  }
#line 2344
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2345
  drbd_uuid_new_current(mdev);
#line 2347
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2348
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2350
    if (err != 0) {
#line 2351
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2352
      retcode = 118;
    } else {

    }
#line 2354
    if (skip_initial_sync != 0) {
#line 2355
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2356
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2357
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2358
      spin_lock_irq(& mdev->req_lock);
#line 2359
      __ns.i = mdev->state.i;
#line 2359
      __ns.ldv_39979.disk = 8U;
#line 2359
      __ns.ldv_39979.pdsk = 8U;
#line 2359
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2361
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2365
  drbd_md_sync(mdev);
  out_dec: 
#line 2367
  put_ldev(mdev);
  out: 
#line 2369
  ldv_mutex_unlock_304(& mdev->state_mutex);
#line 2371
  reply->ret_code = retcode;
#line 2372
  return (0);
}
}
#line 2382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2382
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1320}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  bool tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;

  {
#line 2415
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2421
  reply_size = 34;
#line 2425
  tmp = try_module_get(& __this_module);
#line 2425
  if (tmp) {
#line 2425
    tmp___0 = 0;
  } else {
#line 2425
    tmp___0 = 1;
  }
#line 2425
  if (tmp___0) {
#line 2426
    printk("\vdrbd: try_module_get() failed!\n");
#line 2427
    return;
  } else {

  }
#line 2430
  tmp___1 = capable(21);
#line 2430
  if (tmp___1) {
#line 2430
    tmp___2 = 0;
  } else {
#line 2430
    tmp___2 = 1;
  }
#line 2430
  if (tmp___2) {
#line 2431
    retcode = 152;
#line 2432
    goto fail;
  } else {

  }
#line 2435
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2437
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2438
    retcode = 127;
#line 2439
    goto fail;
  } else {

  }
#line 2442
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2444
    retcode = 137;
#line 2445
    goto fail;
  } else {

  }
#line 2448
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2451
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2452
    retcode = 137;
#line 2453
    goto fail;
  } else {

  }
#line 2456
  reply_size = cm->reply_body_size + reply_size;
#line 2459
  tmp___3 = kzalloc((size_t )reply_size, 208U);
#line 2459
  cn_reply = (struct cn_msg *)tmp___3;
#line 2460
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2461
    retcode = 122;
#line 2462
    goto fail;
  } else {

  }
#line 2464
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2466
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2468
  reply->minor = nlp->drbd_minor;
#line 2469
  reply->ret_code = 101;
#line 2472
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2474
  cn_reply->id = req->id;
#line 2475
  cn_reply->seq = req->seq;
#line 2476
  cn_reply->ack = req->ack + 1U;
#line 2477
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2478
  cn_reply->flags = 0U;
#line 2480
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2481
  if (rr != 0 && rr != -3) {
#line 2482
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2484
  kfree((void const   *)cn_reply);
#line 2485
  module_put(& __this_module);
#line 2486
  return;
  fail: 
#line 2488
  drbd_nl_send_reply(req, retcode);
#line 2489
  module_put(& __this_module);
#line 2490
  return;
}
}
#line 2492 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2498
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2499
  len = (int )len < (int )l ? len : l;
#line 2500
  tmp = tl;
#line 2500
  tl = tl + 1;
#line 2500
  __gu_p = (void *)tmp;
#line 2500
  switch (2UL) {
  case 1UL: 
#line 2500
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2500
  goto ldv_54778;
  case 2UL: 
#line 2500
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2500
  goto ldv_54778;
  case 4UL: 
#line 2500
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2500
  goto ldv_54778;
  case 8UL: 
#line 2500
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2500
  goto ldv_54778;
  default: 
#line 2500
  __bad_unaligned_access_size();
#line 2500
  goto ldv_54778;
  }
  ldv_54778: 
#line 2501
  tmp___0 = tl;
#line 2501
  tl = tl + 1;
#line 2501
  __gu_p___0 = (void *)tmp___0;
#line 2501
  switch (2UL) {
  case 1UL: 
#line 2501
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2501
  goto ldv_54785;
  case 2UL: 
#line 2501
  put_unaligned_le16((int )len, __gu_p___0);
#line 2501
  goto ldv_54785;
  case 4UL: 
#line 2501
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2501
  goto ldv_54785;
  case 8UL: 
#line 2501
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2501
  goto ldv_54785;
  default: 
#line 2501
  __bad_unaligned_access_size();
#line 2501
  goto ldv_54785;
  }
  ldv_54785: 
#line 2502
  __len = (size_t )len;
#line 2502
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2503
  tl = tl + (unsigned long )len;
#line 2504
  if (nul_terminated != 0) {
#line 2505
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2506
  return (tl);
}
}
#line 2510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2512
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2512
  return (tmp);
}
}
#line 2516 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2518
  tmp = strlen(str);
#line 2518
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2518
  return (tmp___0);
}
}
#line 2522 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2524
  tmp = tl;
#line 2524
  tl = tl + 1;
#line 2524
  __gu_p = (void *)tmp;
#line 2524
  switch (2UL) {
  case 1UL: 
#line 2524
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2524
  goto ldv_54811;
  case 2UL: 
#line 2524
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2524
  goto ldv_54811;
  case 4UL: 
#line 2524
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2524
  goto ldv_54811;
  case 8UL: 
#line 2524
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2524
  goto ldv_54811;
  default: 
#line 2524
  __bad_unaligned_access_size();
#line 2524
  goto ldv_54811;
  }
  ldv_54811: ;
#line 2525
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2527
  tmp___0 = tl;
#line 2527
  tl = tl + 1;
#line 2527
  __gu_p___0 = (void *)tmp___0;
#line 2527
  switch (2UL) {
  case 1UL: 
#line 2527
  *((u8 *)__gu_p___0) = 4U;
#line 2527
  goto ldv_54819;
  case 2UL: 
#line 2527
  put_unaligned_le16(4, __gu_p___0);
#line 2527
  goto ldv_54819;
  case 4UL: 
#line 2527
  put_unaligned_le32(4U, __gu_p___0);
#line 2527
  goto ldv_54819;
  case 8UL: 
#line 2527
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2527
  goto ldv_54819;
  default: 
#line 2527
  __bad_unaligned_access_size();
#line 2527
  goto ldv_54819;
  }
  ldv_54819: 
#line 2528
  __gu_p___1 = (void *)tl;
#line 2528
  switch (4UL) {
  case 1UL: 
#line 2528
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2528
  goto ldv_54826;
  case 2UL: 
#line 2528
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2528
  goto ldv_54826;
  case 4UL: 
#line 2528
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2528
  goto ldv_54826;
  case 8UL: 
#line 2528
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2528
  goto ldv_54826;
  default: 
#line 2528
  __bad_unaligned_access_size();
#line 2528
  goto ldv_54826;
  }
  ldv_54826: 
#line 2529
  tl = tl + 4U;
#line 2530
  goto ldv_54831;
  case 16384U: 
#line 2532
  tmp___1 = tl;
#line 2532
  tl = tl + 1;
#line 2532
  __gu_p___2 = (void *)tmp___1;
#line 2532
  switch (2UL) {
  case 1UL: 
#line 2532
  *((u8 *)__gu_p___2) = 8U;
#line 2532
  goto ldv_54835;
  case 2UL: 
#line 2532
  put_unaligned_le16(8, __gu_p___2);
#line 2532
  goto ldv_54835;
  case 4UL: 
#line 2532
  put_unaligned_le32(8U, __gu_p___2);
#line 2532
  goto ldv_54835;
  case 8UL: 
#line 2532
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2532
  goto ldv_54835;
  default: 
#line 2532
  __bad_unaligned_access_size();
#line 2532
  goto ldv_54835;
  }
  ldv_54835: 
#line 2533
  __gu_p___3 = (void *)tl;
#line 2533
  switch (8UL) {
  case 1UL: 
#line 2533
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2533
  goto ldv_54842;
  case 2UL: 
#line 2533
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2533
  goto ldv_54842;
  case 4UL: 
#line 2533
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2533
  goto ldv_54842;
  case 8UL: 
#line 2533
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2533
  goto ldv_54842;
  default: 
#line 2533
  __bad_unaligned_access_size();
#line 2533
  goto ldv_54842;
  }
  ldv_54842: 
#line 2534
  tl = tl + 8U;
#line 2535
  goto ldv_54831;
  default: ;
  }
  ldv_54831: ;
#line 2540
  return (tl);
}
}
#line 2543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2549
  cn_reply = (struct cn_msg *)(& buffer);
#line 2550
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2552
  tl = (unsigned short *)(& reply->tag_list);
#line 2556
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2558
  tmp = tl;
#line 2558
  tl = tl + 1;
#line 2558
  __gu_p = (void *)tmp;
#line 2558
  switch (2UL) {
  case 1UL: 
#line 2558
  *((u8 *)__gu_p) = 0U;
#line 2558
  goto ldv_54858;
  case 2UL: 
#line 2558
  put_unaligned_le16(0, __gu_p);
#line 2558
  goto ldv_54858;
  case 4UL: 
#line 2558
  put_unaligned_le32(0U, __gu_p);
#line 2558
  goto ldv_54858;
  case 8UL: 
#line 2558
  put_unaligned_le64(0ULL, __gu_p);
#line 2558
  goto ldv_54858;
  default: 
#line 2558
  __bad_unaligned_access_size();
#line 2558
  goto ldv_54858;
  }
  ldv_54858: 
#line 2560
  cn_reply->id.idx = 8U;
#line 2561
  cn_reply->id.val = 1U;
#line 2563
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2563
  cn_reply->seq = (__u32 )tmp___0;
#line 2564
  cn_reply->ack = 0U;
#line 2565
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2567
  cn_reply->flags = 0U;
#line 2569
  reply->packet_type = 17;
#line 2570
  reply->minor = mdev_to_minor(mdev);
#line 2571
  reply->ret_code = 101;
#line 2573
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2574
  return;
}
}
#line 2576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2582
  cn_reply = (struct cn_msg *)(& buffer);
#line 2583
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2585
  tl = (unsigned short *)(& reply->tag_list);
#line 2589
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2590
  tmp = tl;
#line 2590
  tl = tl + 1;
#line 2590
  __gu_p = (void *)tmp;
#line 2590
  switch (2UL) {
  case 1UL: 
#line 2590
  *((u8 *)__gu_p) = 0U;
#line 2590
  goto ldv_54873;
  case 2UL: 
#line 2590
  put_unaligned_le16(0, __gu_p);
#line 2590
  goto ldv_54873;
  case 4UL: 
#line 2590
  put_unaligned_le32(0U, __gu_p);
#line 2590
  goto ldv_54873;
  case 8UL: 
#line 2590
  put_unaligned_le64(0ULL, __gu_p);
#line 2590
  goto ldv_54873;
  default: 
#line 2590
  __bad_unaligned_access_size();
#line 2590
  goto ldv_54873;
  }
  ldv_54873: 
#line 2592
  cn_reply->id.idx = 8U;
#line 2593
  cn_reply->id.val = 1U;
#line 2595
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2595
  cn_reply->seq = (__u32 )tmp___0;
#line 2596
  cn_reply->ack = 0U;
#line 2597
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2599
  cn_reply->flags = 0U;
#line 2601
  reply->packet_type = 20;
#line 2602
  reply->minor = mdev_to_minor(mdev);
#line 2603
  reply->ret_code = 101;
#line 2605
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2606
  return;
}
}
#line 2608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2619
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2620
    return;
  } else {

  }
#line 2621
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2622
    return;
  } else {

  }
#line 2630
  tmp = kzalloc(33026UL, 16U);
#line 2630
  cn_reply = (struct cn_msg *)tmp;
#line 2637
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2640
    return;
  } else {

  }
#line 2643
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2644
  tl = (unsigned short *)(& reply->tag_list);
#line 2646
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2647
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2648
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2649
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2650
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_49189.block_id));
#line 2653
  __min1 = e->size;
#line 2653
  __min2 = 32768U;
#line 2653
  len = __min1 < __min2 ? __min1 : __min2;
#line 2654
  tmp___0 = tl;
#line 2654
  tl = tl + 1;
#line 2654
  __gu_p = (void *)tmp___0;
#line 2654
  switch (2UL) {
  case 1UL: 
#line 2654
  *((u8 *)__gu_p) = 50U;
#line 2654
  goto ldv_54896;
  case 2UL: 
#line 2654
  put_unaligned_le16(49202, __gu_p);
#line 2654
  goto ldv_54896;
  case 4UL: 
#line 2654
  put_unaligned_le32(49202U, __gu_p);
#line 2654
  goto ldv_54896;
  case 8UL: 
#line 2654
  put_unaligned_le64(49202ULL, __gu_p);
#line 2654
  goto ldv_54896;
  default: 
#line 2654
  __bad_unaligned_access_size();
#line 2654
  goto ldv_54896;
  }
  ldv_54896: 
#line 2655
  tmp___1 = tl;
#line 2655
  tl = tl + 1;
#line 2655
  __gu_p___0 = (void *)tmp___1;
#line 2655
  switch (2UL) {
  case 1UL: 
#line 2655
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2655
  goto ldv_54903;
  case 2UL: 
#line 2655
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2655
  goto ldv_54903;
  case 4UL: 
#line 2655
  put_unaligned_le32(len, __gu_p___0);
#line 2655
  goto ldv_54903;
  case 8UL: 
#line 2655
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2655
  goto ldv_54903;
  default: 
#line 2655
  __bad_unaligned_access_size();
#line 2655
  goto ldv_54903;
  }
  ldv_54903: 
#line 2657
  page = e->pages;
#line 2658
  goto ldv_54919;
  ldv_54918: 
#line 2659
  tmp___2 = kmap_atomic___0(page);
#line 2659
  d = tmp___2;
#line 2660
  __min1___0 = len;
#line 2660
  __min2___0 = 4096U;
#line 2660
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2661
  __len = (size_t )l;
#line 2661
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2662
  __kunmap_atomic___0(d);
#line 2663
  tl = tl + (unsigned long )l;
#line 2664
  len = len - l;
#line 2665
  if (len == 0U) {
#line 2666
    goto ldv_54917;
  } else {

  }
#line 2658
  page = page_chain_next(page);
  ldv_54919: ;
#line 2658
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2658
    tmp___3 = page_chain_next(page);
#line 2658
    __builtin_prefetch((void const   *)tmp___3);
#line 2658
    if (1 != 0) {
#line 2659
      goto ldv_54918;
    } else {
#line 2661
      goto ldv_54917;
    }
  } else {

  }
  ldv_54917: 
#line 2668
  tmp___4 = tl;
#line 2668
  tl = tl + 1;
#line 2668
  __gu_p___1 = (void *)tmp___4;
#line 2668
  switch (2UL) {
  case 1UL: 
#line 2668
  *((u8 *)__gu_p___1) = 0U;
#line 2668
  goto ldv_54922;
  case 2UL: 
#line 2668
  put_unaligned_le16(0, __gu_p___1);
#line 2668
  goto ldv_54922;
  case 4UL: 
#line 2668
  put_unaligned_le32(0U, __gu_p___1);
#line 2668
  goto ldv_54922;
  case 8UL: 
#line 2668
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2668
  goto ldv_54922;
  default: 
#line 2668
  __bad_unaligned_access_size();
#line 2668
  goto ldv_54922;
  }
  ldv_54922: 
#line 2670
  cn_reply->id.idx = 8U;
#line 2671
  cn_reply->id.val = 1U;
#line 2673
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2673
  cn_reply->seq = (__u32 )tmp___5;
#line 2674
  cn_reply->ack = 0U;
#line 2675
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2677
  cn_reply->flags = 0U;
#line 2679
  reply->packet_type = 24;
#line 2680
  reply->minor = mdev_to_minor(mdev);
#line 2681
  reply->ret_code = 101;
#line 2683
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2684
  kfree((void const   *)cn_reply);
#line 2685
  return;
}
}
#line 2687 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2693
  cn_reply = (struct cn_msg *)(& buffer);
#line 2694
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2696
  tl = (unsigned short *)(& reply->tag_list);
#line 2701
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2701
  if (tmp == 0) {
#line 2702
    return;
  } else {

  }
#line 2703
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2704
  put_ldev(mdev);
#line 2706
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2707
  tmp___0 = tl;
#line 2707
  tl = tl + 1;
#line 2707
  __gu_p = (void *)tmp___0;
#line 2707
  switch (2UL) {
  case 1UL: 
#line 2707
  *((u8 *)__gu_p) = 0U;
#line 2707
  goto ldv_54938;
  case 2UL: 
#line 2707
  put_unaligned_le16(0, __gu_p);
#line 2707
  goto ldv_54938;
  case 4UL: 
#line 2707
  put_unaligned_le32(0U, __gu_p);
#line 2707
  goto ldv_54938;
  case 8UL: 
#line 2707
  put_unaligned_le64(0ULL, __gu_p);
#line 2707
  goto ldv_54938;
  default: 
#line 2707
  __bad_unaligned_access_size();
#line 2707
  goto ldv_54938;
  }
  ldv_54938: 
#line 2709
  cn_reply->id.idx = 8U;
#line 2710
  cn_reply->id.val = 1U;
#line 2712
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2712
  cn_reply->seq = (__u32 )tmp___1;
#line 2713
  cn_reply->ack = 0U;
#line 2714
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2716
  cn_reply->flags = 0U;
#line 2718
  reply->packet_type = 23;
#line 2719
  reply->minor = mdev_to_minor(mdev);
#line 2720
  reply->ret_code = 101;
#line 2722
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2723
  return;
}
}
#line 2725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2728
  try = 10;
#line 2730
  cn_id_drbd.val = 1U;
  ldv_54950: 
#line 2732
  cn_id_drbd.idx = cn_idx;
#line 2733
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2734
  if (err == 0) {
#line 2735
    goto ldv_54949;
  } else {

  }
#line 2736
  cn_idx = cn_idx + 6977U;
#line 2737
  tmp = try;
#line 2737
  try = try - 1;
#line 2737
  if (tmp != 0) {
#line 2738
    goto ldv_54950;
  } else {

  }
  ldv_54949: ;
#line 2739
  if (err != 0) {
#line 2740
    printk("\vdrbd: cn_drbd failed to register\n");
#line 2741
    return (err);
  } else {

  }
#line 2744
  return (0);
}
}
#line 2747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2751
  cn_id_drbd.idx = cn_idx;
#line 2752
  cn_id_drbd.val = 1U;
#line 2754
  cn_del_callback(& cn_id_drbd);
#line 2755
  return;
}
}
#line 2757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2760
  cn_reply = (struct cn_msg *)(& buffer);
#line 2761
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2765
  memset((void *)(& buffer), 0, 32UL);
#line 2766
  cn_reply->id = req->id;
#line 2768
  cn_reply->seq = req->seq;
#line 2769
  cn_reply->ack = req->ack + 1U;
#line 2770
  cn_reply->len = 12U;
#line 2771
  cn_reply->flags = 0U;
#line 2773
  reply->packet_type = 27;
#line 2774
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2775
  reply->ret_code = ret_code;
#line 2777
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2778
  if (rr != 0 && rr != -3) {
#line 2779
    printk("\016drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2780
  return;
}
}
#line 2820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_main8_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2832
  LDV_IN_INTERRUPT = 1;
#line 2841
  ldv_initialize();
#line 2843
  goto ldv_54982;
  ldv_54981: 
#line 2846
  tmp = nondet_int();
#line 2846
  switch (tmp) {
  default: ;
#line 2848
  goto ldv_54980;
  }
  ldv_54980: ;
  ldv_54982: 
#line 2843
  tmp___0 = nondet_int();
#line 2843
  if (tmp___0 != 0) {
#line 2844
    goto ldv_54981;
  } else {

  }


#line 2857
  ldv_check_final_state();
#line 2860
  return;
}
}
#line 2864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_287(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2869
  ldv_mutex_lock_lock(ldv_func_arg1);
#line 2871
  mutex_lock(ldv_func_arg1);
#line 2872
  return;
}
}
#line 2874 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_288(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2879
  ldv_mutex_unlock_lock(ldv_func_arg1);
#line 2881
  mutex_unlock(ldv_func_arg1);
#line 2882
  return;
}
}
#line 2884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_289(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2889
  ldv_mutex_lock_mutex_of_device(ldv_func_arg1);
#line 2891
  mutex_lock(ldv_func_arg1);
#line 2892
  return;
}
}
#line 2894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
int ldv_mutex_trylock_290(struct mutex *ldv_func_arg1 ) 
{ 
  ldv_func_ret_type___2 ldv_func_res ;
  int tmp ;
  int tmp___0 ;

  {
#line 2899
  tmp = mutex_trylock(ldv_func_arg1);
#line 2899
  ldv_func_res = tmp;
#line 2901
  tmp___0 = ldv_mutex_trylock_mutex_of_device(ldv_func_arg1);
#line 2901
  return (tmp___0);
#line 2903
  return (ldv_func_res);
}
}
#line 2906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_291(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2911
  ldv_mutex_unlock_mutex_of_device(ldv_func_arg1);
#line 2913
  mutex_unlock(ldv_func_arg1);
#line 2914
  return;
}
}
#line 2916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_292(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2921
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2923
  mutex_lock(ldv_func_arg1);
#line 2924
  return;
}
}
#line 2926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_293(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2931
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2933
  mutex_unlock(ldv_func_arg1);
#line 2934
  return;
}
}
#line 2936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_294(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2941
  ldv_mutex_lock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2943
  mutex_lock(ldv_func_arg1);
#line 2944
  return;
}
}
#line 2946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_295(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2951
  ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(ldv_func_arg1);
#line 2953
  mutex_unlock(ldv_func_arg1);
#line 2954
  return;
}
}
#line 2956 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_296(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2961
  ldv_mutex_lock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2963
  mutex_lock(ldv_func_arg1);
#line 2964
  return;
}
}
#line 2966 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_297(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2971
  ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(ldv_func_arg1);
#line 2973
  mutex_unlock(ldv_func_arg1);
#line 2974
  return;
}
}
#line 2976 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_298(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2981
  ldv_mutex_lock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2983
  mutex_lock(ldv_func_arg1);
#line 2984
  return;
}
}
#line 2986 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_299(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 2991
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 2993
  mutex_unlock(ldv_func_arg1);
#line 2994
  return;
}
}
#line 2996 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_300(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3001
  ldv_mutex_unlock_mutex_of_drbd_socket(ldv_func_arg1);
#line 3003
  mutex_unlock(ldv_func_arg1);
#line 3004
  return;
}
}
#line 3006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_301(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3011
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 3013
  mutex_lock(ldv_func_arg1);
#line 3014
  return;
}
}
#line 3016 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_302(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3021
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 3023
  mutex_unlock(ldv_func_arg1);
#line 3024
  return;
}
}
#line 3026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_lock_303(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3031
  ldv_mutex_lock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 3033
  mutex_lock(ldv_func_arg1);
#line 3034
  return;
}
}
#line 3036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/dscv/ri/32_7a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_mutex_unlock_304(struct mutex *ldv_func_arg1 ) 
{ 


  {
#line 3041
  ldv_mutex_unlock_state_mutex_of_drbd_conf(ldv_func_arg1);
#line 3043
  mutex_unlock(ldv_func_arg1);
#line 3044
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_bm_change_of_drbd_bitmap  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 16
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 16
    ldv_error();
  }
#line 19
  nondetermined = ldv_undef_int();
#line 22
  if (nondetermined) {
#line 25
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 27
    return (0);
  } else {
#line 32
    return (-4);
  }
}
}
#line 37 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 42
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 42
    ldv_error();
  }
#line 45
  nondetermined = ldv_undef_int();
#line 48
  if (nondetermined) {
#line 51
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 53
    return (0);
  } else {
#line 58
    return (-4);
  }
}
}
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 66
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 66
    ldv_error();
  }
#line 68
  ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 69
  return;
}
}
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 77
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 77
    ldv_error();
  }
#line 80
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 83
  if (is_mutex_held_by_another_thread) {
#line 86
    return (0);
  } else {
#line 91
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 93
    return (1);
  }
}
}
#line 98 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_bm_change_of_drbd_bitmap(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 103
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 103
    ldv_error();
  }
#line 106
  atomic_value_after_dec = ldv_undef_int();
#line 109
  if (atomic_value_after_dec == 0) {
#line 112
    ldv_mutex_bm_change_of_drbd_bitmap = 2;
#line 114
    return (1);
  } else {

  }
#line 118
  return (0);
}
}
#line 123 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 127
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {
#line 130
    nondetermined = ldv_undef_int();
#line 133
    if (nondetermined) {
#line 136
      return (0);
    } else {
#line 141
      return (1);
    }
  } else {
#line 147
    return (1);
  }
}
}
#line 152 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_bm_change_of_drbd_bitmap(struct mutex *lock ) 
{ 


  {
#line 155
  if (ldv_mutex_bm_change_of_drbd_bitmap == 2) {

  } else {
#line 155
    ldv_error();
  }
#line 157
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 158
  return;
}
}
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_cred_guard_mutex_of_signal_struct  ;
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 168
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 168
    ldv_error();
  }
#line 171
  nondetermined = ldv_undef_int();
#line 174
  if (nondetermined) {
#line 177
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 179
    return (0);
  } else {
#line 184
    return (-4);
  }
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 194
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 194
    ldv_error();
  }
#line 197
  nondetermined = ldv_undef_int();
#line 200
  if (nondetermined) {
#line 203
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 205
    return (0);
  } else {
#line 210
    return (-4);
  }
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 218
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 218
    ldv_error();
  }
#line 220
  ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 221
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 229
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 229
    ldv_error();
  }
#line 232
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 235
  if (is_mutex_held_by_another_thread) {
#line 238
    return (0);
  } else {
#line 243
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 245
    return (1);
  }
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_cred_guard_mutex_of_signal_struct(atomic_t *cnt ,
                                                                    struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 255
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 255
    ldv_error();
  }
#line 258
  atomic_value_after_dec = ldv_undef_int();
#line 261
  if (atomic_value_after_dec == 0) {
#line 264
    ldv_mutex_cred_guard_mutex_of_signal_struct = 2;
#line 266
    return (1);
  } else {

  }
#line 270
  return (0);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 279
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {
#line 282
    nondetermined = ldv_undef_int();
#line 285
    if (nondetermined) {
#line 288
      return (0);
    } else {
#line 293
      return (1);
    }
  } else {
#line 299
    return (1);
  }
}
}
#line 304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_cred_guard_mutex_of_signal_struct(struct mutex *lock ) 
{ 


  {
#line 307
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 2) {

  } else {
#line 307
    ldv_error();
  }
#line 309
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 310
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_drbd_main_mutex  ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 320
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 320
    ldv_error();
  }
#line 323
  nondetermined = ldv_undef_int();
#line 326
  if (nondetermined) {
#line 329
    ldv_mutex_drbd_main_mutex = 2;
#line 331
    return (0);
  } else {
#line 336
    return (-4);
  }
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 346
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 346
    ldv_error();
  }
#line 349
  nondetermined = ldv_undef_int();
#line 352
  if (nondetermined) {
#line 355
    ldv_mutex_drbd_main_mutex = 2;
#line 357
    return (0);
  } else {
#line 362
    return (-4);
  }
}
}
#line 367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 370
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 370
    ldv_error();
  }
#line 372
  ldv_mutex_drbd_main_mutex = 2;
#line 373
  return;
}
}
#line 376 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_drbd_main_mutex(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 381
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 381
    ldv_error();
  }
#line 384
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 387
  if (is_mutex_held_by_another_thread) {
#line 390
    return (0);
  } else {
#line 395
    ldv_mutex_drbd_main_mutex = 2;
#line 397
    return (1);
  }
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_drbd_main_mutex(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 407
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 407
    ldv_error();
  }
#line 410
  atomic_value_after_dec = ldv_undef_int();
#line 413
  if (atomic_value_after_dec == 0) {
#line 416
    ldv_mutex_drbd_main_mutex = 2;
#line 418
    return (1);
  } else {

  }
#line 422
  return (0);
}
}
#line 427 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_drbd_main_mutex(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 431
  if (ldv_mutex_drbd_main_mutex == 1) {
#line 434
    nondetermined = ldv_undef_int();
#line 437
    if (nondetermined) {
#line 440
      return (0);
    } else {
#line 445
      return (1);
    }
  } else {
#line 451
    return (1);
  }
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_drbd_main_mutex(struct mutex *lock ) 
{ 


  {
#line 459
  if (ldv_mutex_drbd_main_mutex == 2) {

  } else {
#line 459
    ldv_error();
  }
#line 461
  ldv_mutex_drbd_main_mutex = 1;
#line 462
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_lock  ;
#line 467 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 472
  if (ldv_mutex_lock == 1) {

  } else {
#line 472
    ldv_error();
  }
#line 475
  nondetermined = ldv_undef_int();
#line 478
  if (nondetermined) {
#line 481
    ldv_mutex_lock = 2;
#line 483
    return (0);
  } else {
#line 488
    return (-4);
  }
}
}
#line 493 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 498
  if (ldv_mutex_lock == 1) {

  } else {
#line 498
    ldv_error();
  }
#line 501
  nondetermined = ldv_undef_int();
#line 504
  if (nondetermined) {
#line 507
    ldv_mutex_lock = 2;
#line 509
    return (0);
  } else {
#line 514
    return (-4);
  }
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_lock(struct mutex *lock ) 
{ 


  {
#line 522
  if (ldv_mutex_lock == 1) {

  } else {
#line 522
    ldv_error();
  }
#line 524
  ldv_mutex_lock = 2;
#line 525
  return;
}
}
#line 528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_lock(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 533
  if (ldv_mutex_lock == 1) {

  } else {
#line 533
    ldv_error();
  }
#line 536
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 539
  if (is_mutex_held_by_another_thread) {
#line 542
    return (0);
  } else {
#line 547
    ldv_mutex_lock = 2;
#line 549
    return (1);
  }
}
}
#line 554 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 559
  if (ldv_mutex_lock == 1) {

  } else {
#line 559
    ldv_error();
  }
#line 562
  atomic_value_after_dec = ldv_undef_int();
#line 565
  if (atomic_value_after_dec == 0) {
#line 568
    ldv_mutex_lock = 2;
#line 570
    return (1);
  } else {

  }
#line 574
  return (0);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_lock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 583
  if (ldv_mutex_lock == 1) {
#line 586
    nondetermined = ldv_undef_int();
#line 589
    if (nondetermined) {
#line 592
      return (0);
    } else {
#line 597
      return (1);
    }
  } else {
#line 603
    return (1);
  }
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_lock(struct mutex *lock ) 
{ 


  {
#line 611
  if (ldv_mutex_lock == 2) {

  } else {
#line 611
    ldv_error();
  }
#line 613
  ldv_mutex_lock = 1;
#line 614
  return;
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mtx_of_percpu_rw_semaphore  ;
#line 619 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 624
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 624
    ldv_error();
  }
#line 627
  nondetermined = ldv_undef_int();
#line 630
  if (nondetermined) {
#line 633
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 635
    return (0);
  } else {
#line 640
    return (-4);
  }
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 650
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 650
    ldv_error();
  }
#line 653
  nondetermined = ldv_undef_int();
#line 656
  if (nondetermined) {
#line 659
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 661
    return (0);
  } else {
#line 666
    return (-4);
  }
}
}
#line 671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 


  {
#line 674
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 674
    ldv_error();
  }
#line 676
  ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 685
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 685
    ldv_error();
  }
#line 688
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 691
  if (is_mutex_held_by_another_thread) {
#line 694
    return (0);
  } else {
#line 699
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 701
    return (1);
  }
}
}
#line 706 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mtx_of_percpu_rw_semaphore(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 711
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 711
    ldv_error();
  }
#line 714
  atomic_value_after_dec = ldv_undef_int();
#line 717
  if (atomic_value_after_dec == 0) {
#line 720
    ldv_mutex_mtx_of_percpu_rw_semaphore = 2;
#line 722
    return (1);
  } else {

  }
#line 726
  return (0);
}
}
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 735
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {
#line 738
    nondetermined = ldv_undef_int();
#line 741
    if (nondetermined) {
#line 744
      return (0);
    } else {
#line 749
      return (1);
    }
  } else {
#line 755
    return (1);
  }
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mtx_of_percpu_rw_semaphore(struct mutex *lock ) 
{ 


  {
#line 763
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 2) {

  } else {
#line 763
    ldv_error();
  }
#line 765
  ldv_mutex_mtx_of_percpu_rw_semaphore = 1;
#line 766
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_device  ;
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 776
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 776
    ldv_error();
  }
#line 779
  nondetermined = ldv_undef_int();
#line 782
  if (nondetermined) {
#line 785
    ldv_mutex_mutex_of_device = 2;
#line 787
    return (0);
  } else {
#line 792
    return (-4);
  }
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 802
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 802
    ldv_error();
  }
#line 805
  nondetermined = ldv_undef_int();
#line 808
  if (nondetermined) {
#line 811
    ldv_mutex_mutex_of_device = 2;
#line 813
    return (0);
  } else {
#line 818
    return (-4);
  }
}
}
#line 823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 826
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 826
    ldv_error();
  }
#line 828
  ldv_mutex_mutex_of_device = 2;
#line 829
  return;
}
}
#line 832 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_device(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 837
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 837
    ldv_error();
  }
#line 840
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 843
  if (is_mutex_held_by_another_thread) {
#line 846
    return (0);
  } else {
#line 851
    ldv_mutex_mutex_of_device = 2;
#line 853
    return (1);
  }
}
}
#line 858 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_device(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 863
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 863
    ldv_error();
  }
#line 866
  atomic_value_after_dec = ldv_undef_int();
#line 869
  if (atomic_value_after_dec == 0) {
#line 872
    ldv_mutex_mutex_of_device = 2;
#line 874
    return (1);
  } else {

  }
#line 878
  return (0);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_device(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 887
  if (ldv_mutex_mutex_of_device == 1) {
#line 890
    nondetermined = ldv_undef_int();
#line 893
    if (nondetermined) {
#line 896
      return (0);
    } else {
#line 901
      return (1);
    }
  } else {
#line 907
    return (1);
  }
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_device(struct mutex *lock ) 
{ 


  {
#line 915
  if (ldv_mutex_mutex_of_device == 2) {

  } else {
#line 915
    ldv_error();
  }
#line 917
  ldv_mutex_mutex_of_device = 1;
#line 918
  return;
}
}
#line 920 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_mutex_of_drbd_socket  ;
#line 923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 928
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 928
    ldv_error();
  }
#line 931
  nondetermined = ldv_undef_int();
#line 934
  if (nondetermined) {
#line 937
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 939
    return (0);
  } else {
#line 944
    return (-4);
  }
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 954
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 954
    ldv_error();
  }
#line 957
  nondetermined = ldv_undef_int();
#line 960
  if (nondetermined) {
#line 963
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 965
    return (0);
  } else {
#line 970
    return (-4);
  }
}
}
#line 975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 978
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 978
    ldv_error();
  }
#line 980
  ldv_mutex_mutex_of_drbd_socket = 2;
#line 981
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 989
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 989
    ldv_error();
  }
#line 992
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 995
  if (is_mutex_held_by_another_thread) {
#line 998
    return (0);
  } else {
#line 1003
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 1005
    return (1);
  }
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_mutex_of_drbd_socket(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 1015
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 1015
    ldv_error();
  }
#line 1018
  atomic_value_after_dec = ldv_undef_int();
#line 1021
  if (atomic_value_after_dec == 0) {
#line 1024
    ldv_mutex_mutex_of_drbd_socket = 2;
#line 1026
    return (1);
  } else {

  }
#line 1030
  return (0);
}
}
#line 1035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_mutex_of_drbd_socket(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1039
  if (ldv_mutex_mutex_of_drbd_socket == 1) {
#line 1042
    nondetermined = ldv_undef_int();
#line 1045
    if (nondetermined) {
#line 1048
      return (0);
    } else {
#line 1053
      return (1);
    }
  } else {
#line 1059
    return (1);
  }
}
}
#line 1064 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_mutex_of_drbd_socket(struct mutex *lock ) 
{ 


  {
#line 1067
  if (ldv_mutex_mutex_of_drbd_socket == 2) {

  } else {
#line 1067
    ldv_error();
  }
#line 1069
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 1070
  return;
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
static int ldv_mutex_state_mutex_of_drbd_conf  ;
#line 1075 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_interruptible_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1080
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1080
    ldv_error();
  }
#line 1083
  nondetermined = ldv_undef_int();
#line 1086
  if (nondetermined) {
#line 1089
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1091
    return (0);
  } else {
#line 1096
    return (-4);
  }
}
}
#line 1101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_lock_killable_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1106
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1106
    ldv_error();
  }
#line 1109
  nondetermined = ldv_undef_int();
#line 1112
  if (nondetermined) {
#line 1115
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1117
    return (0);
  } else {
#line 1122
    return (-4);
  }
}
}
#line 1127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_lock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 1130
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1130
    ldv_error();
  }
#line 1132
  ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1133
  return;
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_trylock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int is_mutex_held_by_another_thread ;

  {
#line 1141
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1141
    ldv_error();
  }
#line 1144
  is_mutex_held_by_another_thread = ldv_undef_int();
#line 1147
  if (is_mutex_held_by_another_thread) {
#line 1150
    return (0);
  } else {
#line 1155
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1157
    return (1);
  }
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_mutex_lock_state_mutex_of_drbd_conf(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 1167
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1167
    ldv_error();
  }
#line 1170
  atomic_value_after_dec = ldv_undef_int();
#line 1173
  if (atomic_value_after_dec == 0) {
#line 1176
    ldv_mutex_state_mutex_of_drbd_conf = 2;
#line 1178
    return (1);
  } else {

  }
#line 1182
  return (0);
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
int ldv_mutex_is_locked_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 1191
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {
#line 1194
    nondetermined = ldv_undef_int();
#line 1197
    if (nondetermined) {
#line 1200
      return (0);
    } else {
#line 1205
      return (1);
    }
  } else {
#line 1211
    return (1);
  }
}
}
#line 1216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_mutex_unlock_state_mutex_of_drbd_conf(struct mutex *lock ) 
{ 


  {
#line 1219
  if (ldv_mutex_state_mutex_of_drbd_conf == 2) {

  } else {
#line 1219
    ldv_error();
  }
#line 1221
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1222
  return;
}
}
#line 1226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 1229
  ldv_mutex_bm_change_of_drbd_bitmap = 1;
#line 1231
  ldv_mutex_cred_guard_mutex_of_signal_struct = 1;
#line 1233
  ldv_mutex_drbd_main_mutex = 1;
#line 1235
  ldv_mutex_lock = 1;
#line 1237
  ldv_mutex_mtx_of_percpu_rw_semaphore = 1;
#line 1239
  ldv_mutex_mutex_of_device = 1;
#line 1241
  ldv_mutex_mutex_of_drbd_socket = 1;
#line 1243
  ldv_mutex_state_mutex_of_drbd_conf = 1;
#line 1244
  return;
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--32_7a--X--cpachecker/linux/csd_deg_dscv/20/dscv_tempdir/rule-instrumentor/32_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 1250
  if (ldv_mutex_bm_change_of_drbd_bitmap == 1) {

  } else {
#line 1250
    ldv_error();
  }
#line 1252
  if (ldv_mutex_cred_guard_mutex_of_signal_struct == 1) {

  } else {
#line 1252
    ldv_error();
  }
#line 1254
  if (ldv_mutex_drbd_main_mutex == 1) {

  } else {
#line 1254
    ldv_error();
  }
#line 1256
  if (ldv_mutex_lock == 1) {

  } else {
#line 1256
    ldv_error();
  }
#line 1258
  if (ldv_mutex_mtx_of_percpu_rw_semaphore == 1) {

  } else {
#line 1258
    ldv_error();
  }
#line 1260
  if (ldv_mutex_mutex_of_device == 1) {

  } else {
#line 1260
    ldv_error();
  }
#line 1262
  if (ldv_mutex_mutex_of_drbd_socket == 1) {

  } else {
#line 1262
    ldv_error();
  }
#line 1264
  if (ldv_mutex_state_mutex_of_drbd_conf == 1) {

  } else {
#line 1264
    ldv_error();
  }
#line 1265
  return;
}
}
