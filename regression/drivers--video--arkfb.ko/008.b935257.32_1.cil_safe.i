/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 46 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 90 "include/linux/types.h"
typedef unsigned int u_int;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 183 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 188 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 190 "include/linux/types.h"
struct __anonstruct_atomic_t_7 {
   int volatile   counter ;
};
#line 190 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_7 atomic_t;
#line 195 "include/linux/types.h"
struct __anonstruct_atomic64_t_8 {
   long volatile   counter ;
};
#line 195 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_8 atomic64_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct task_struct;
#line 8
struct mm_struct;
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 141 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
union __anonunion____missing_field_name_9 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion____missing_field_name_9 __annonCompField4 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 16 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   char primary_hash ;
   char secondary_hash ;
   unsigned int lineno : 24 ;
   unsigned int flags : 8 ;
} __attribute__((__aligned__(8))) ;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 114 "include/linux/kernel.h"
struct completion;
#line 208
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_13 {
   pgdval_t pgd ;
};
#line 184 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_13 pgd_t;
#line 272
struct page;
#line 285
struct file;
#line 302
struct seq_file;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_18 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_19 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
union __anonunion____missing_field_name_17 {
   struct __anonstruct____missing_field_name_18 __annonCompField6 ;
   struct __anonstruct____missing_field_name_19 __annonCompField7 ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_17 __annonCompField8 ;
} __attribute__((__packed__)) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned int ist : 3 ;
   unsigned int zero0 : 5 ;
   unsigned int type : 5 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
} __attribute__((__packed__)) ;
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct64 gate_desc;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__)) ;
#line 144 "include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[((4096UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 144 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct thread_struct;
#line 56
struct tss_struct;
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
};
#line 115 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int regno ) ;
   void (*set_debugreg)(int regno , unsigned long value ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   *desc , unsigned int entries ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *t , unsigned int cpu ) ;
   void (*load_gs_index)(unsigned int idx ) ;
   void (*write_ldt_entry)(struct desc_struct *ldt , int entrynum , void const   *desc ) ;
   void (*write_gdt_entry)(struct desc_struct * , int entrynum , void const   *desc ,
                           int size ) ;
   void (*write_idt_entry)(gate_desc * , int entrynum , gate_desc const   *gate ) ;
   void (*alloc_ldt)(struct desc_struct *ldt , unsigned int entries ) ;
   void (*free_ldt)(struct desc_struct *ldt , unsigned int entries ) ;
   void (*load_sp0)(struct tss_struct *tss , struct thread_struct *t ) ;
   void (*set_iopl_mask)(unsigned int mask ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int *eax , unsigned int *ebx , unsigned int *ecx , unsigned int *edx ) ;
   u64 (*read_msr_amd)(unsigned int msr , int *err ) ;
   u64 (*read_msr)(unsigned int msr , int *err ) ;
   int (*write_msr)(unsigned int msr , unsigned int low , unsigned int high ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int counter ) ;
   unsigned long long (*read_tscp)(unsigned int *aux ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   struct pv_lazy_ops lazy_mode ;
};
#line 353
struct raw_spinlock;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct ds_context;
#line 36
struct bts_tracer;
#line 10 "include/linux/personality.h"
struct exec_domain;
#line 88
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
} __attribute__((__packed__, __aligned__((1) <<  (6) ))) ;
#line 252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[(unsigned long )(65536 / 8) / sizeof(long ) + 1UL] ;
   unsigned long stack[64] ;
} __attribute__((__aligned__((1) <<  (6) ))) ;
#line 284 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_28 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct____missing_field_name_29 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_27 {
   struct __anonstruct____missing_field_name_28 __annonCompField9 ;
   struct __anonstruct____missing_field_name_29 __annonCompField10 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion____missing_field_name_30 {
   u32 padding1[12] ;
   u32 sw_reserved[12] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_27 __annonCompField11 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[12] ;
   union __anonunion____missing_field_name_30 __annonCompField12 ;
} __attribute__((__aligned__(16))) ;
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2] ;
   u64 reserved2[5] ;
} __attribute__((__packed__)) ;
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
} __attribute__((__packed__, __aligned__(64))) ;
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 405
struct kmem_cache;
#line 410 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
   unsigned int bts_ovfl_signal ;
};
#line 612 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_32 {
   unsigned long seg ;
};
#line 612 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_32 mm_segment_t;
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 540
struct hlist_node;
#line 540 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 544 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_34 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_35 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_36 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18
struct pollfd;
#line 18 "include/linux/thread_info.h"
struct __anonstruct_poll_37 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_33 {
   struct __anonstruct____missing_field_name_34 __annonCompField14 ;
   struct __anonstruct_futex_35 futex ;
   struct __anonstruct_nanosleep_36 nanosleep ;
   struct __anonstruct_poll_37 poll ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_33 __annonCompField15 ;
};
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_38 {
   unsigned int lock ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_38 raw_rwlock_t;
#line 337 "include/linux/lockdep.h"
struct lock_class_key {

};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_39 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_39 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_40 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_40 rwlock_t;
#line 14 "include/linux/time.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_42 {
   unsigned long bits[(((unsigned long )(1 << 9) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_42 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
};
#line 69 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
};
#line 50 "include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 37 "include/linux/pm.h"
struct device;
#line 39 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 39 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 170 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *dev ) ;
   void (*complete)(struct device *dev ) ;
   int (*suspend)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   int (*freeze)(struct device *dev ) ;
   int (*thaw)(struct device *dev ) ;
   int (*poweroff)(struct device *dev ) ;
   int (*restore)(struct device *dev ) ;
   int (*suspend_noirq)(struct device *dev ) ;
   int (*resume_noirq)(struct device *dev ) ;
   int (*freeze_noirq)(struct device *dev ) ;
   int (*thaw_noirq)(struct device *dev ) ;
   int (*poweroff_noirq)(struct device *dev ) ;
   int (*restore_noirq)(struct device *dev ) ;
};
#line 308
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 318 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_91 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_91 mm_context_t;
#line 255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 40 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 28 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 65 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                   size_t  ) ;
   ssize_t (*write)(struct kobject * , struct bin_attribute * , char * , loff_t  ,
                    size_t  ) ;
   int (*mmap)(struct kobject * , struct bin_attribute *attr , struct vm_area_struct *vma ) ;
};
#line 77 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 82
struct sysfs_dirent;
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 59 "include/linux/kobject.h"
struct kset;
#line 59
struct kobj_type;
#line 59 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 113 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 120 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 154 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 32 "include/linux/moduleparam.h"
struct kernel_param;
#line 39
struct kparam_string;
#line 39
struct kparam_array;
#line 39 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_101 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 39 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_101 __annonCompField16 ;
};
#line 52 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 58 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 19 "include/linux/marker.h"
struct marker;
#line 33 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 36 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 41 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private  , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
   char const   *tp_name ;
   void *tp_cb ;
} __attribute__((__aligned__(8))) ;
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 10 "include/linux/timer.h"
struct tvec_base;
#line 12 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 238
struct hrtimer;
#line 239
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 35 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 62 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 69 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 9] ;
   struct kmem_cache_cpu *cpu_slab[4096] ;
};
#line 25 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 50 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 21 "include/linux/tracepoint.h"
struct tracepoint;
#line 23 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void **funcs ;
} __attribute__((__aligned__(32))) ;
#line 5 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/module.h"
struct mod_arch_specific {

};
#line 34 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 71
struct exception_table_entry;
#line 222
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 229
struct module_sect_attrs;
#line 229
struct module_notes_attrs;
#line 229 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
};
#line 594
struct device_driver;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 23 "include/linux/mm_types.h"
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_104 {
   u16 inuse ;
   u16 objects ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_103 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_104 __annonCompField17 ;
};
#line 40 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_106 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_105 {
   struct __anonstruct____missing_field_name_106 __annonCompField19 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 40 "include/linux/mm_types.h"
union __anonunion____missing_field_name_107 {
   unsigned long index ;
   void *freelist ;
};
#line 40 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_103 __annonCompField18 ;
   union __anonunion____missing_field_name_105 __annonCompField20 ;
   union __anonunion____missing_field_name_107 __annonCompField21 ;
   struct list_head lru ;
};
#line 123 "include/linux/mm_types.h"
struct __anonstruct_vm_set_109 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 123 "include/linux/mm_types.h"
union __anonunion_shared_108 {
   struct __anonstruct_vm_set_109 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 123
struct anon_vma;
#line 123
struct vm_operations_struct;
#line 123
struct mempolicy;
#line 123 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_108 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 183 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 188 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 194
struct mmu_notifier_mm;
#line 194 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + 19) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 19 "include/linux/mm.h"
struct file_ra_state;
#line 20
struct user_struct;
#line 21
struct writeback_control;
#line 167 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 184 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *area ) ;
   void (*close)(struct vm_area_struct *area ) ;
   int (*fault)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*page_mkwrite)(struct vm_area_struct *vma , struct vm_fault *vmf ) ;
   int (*access)(struct vm_area_struct *vma , unsigned long addr , void *buf , int len ,
                 int write ) ;
   int (*set_policy)(struct vm_area_struct *vma , struct mempolicy *new ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *vma , unsigned long addr ) ;
   int (*migrate)(struct vm_area_struct *vma , nodemask_t const   *from , nodemask_t const   *to ,
                  unsigned long flags ) ;
};
#line 226
struct inode;
#line 11 "include/linux/dcache.h"
struct nameidata;
#line 12
struct path;
#line 13
struct vfsmount;
#line 33 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 89 "include/linux/dcache.h"
union __anonunion_d_u_110 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 89
struct dentry_operations;
#line 89
struct super_block;
#line 89 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_110 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32] ;
};
#line 134 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 99 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 99 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 14 "include/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3] ;
};
#line 317 "include/linux/fs.h"
struct export_operations;
#line 319
struct iovec;
#line 321
struct kiocb;
#line 322
struct pipe_inode_info;
#line 323
struct poll_table_struct;
#line 324
struct kstatfs;
#line 327
struct cred;
#line 379 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 106 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 127 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 17 "include/linux/dqblk_qtree.h"
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 197 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 212
struct quota_format_type;
#line 214 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 284 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 295 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 321 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 335 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 379 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 487 "include/linux/fs.h"
union __anonunion_arg_117 {
   char *buf ;
   void *data ;
};
#line 487 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_116 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_117 arg ;
   int error ;
};
#line 487 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_116 read_descriptor_t;
#line 500 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
};
#line 549
struct backing_dev_info;
#line 550 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 574
struct hd_struct;
#line 574
struct gendisk;
#line 574 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 650
struct inode_operations;
#line 650
struct file_operations;
#line 650
struct file_lock;
#line 650
struct cdev;
#line 650 "include/linux/fs.h"
union __anonunion____missing_field_name_118 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 650
struct dnotify_struct;
#line 650 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_118 __annonCompField22 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 805 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 816 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 839 "include/linux/fs.h"
union __anonunion_f_u_119 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 839 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_119 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 958
struct files_struct;
#line 958 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 960 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 965 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 987 "include/linux/fs.h"
struct fasync_struct;
#line 987 "include/linux/fs.h"
struct __anonstruct_afs_121 {
   struct list_head link ;
   int state ;
};
#line 987 "include/linux/fs.h"
union __anonunion_fl_u_120 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_121 afs ;
};
#line 987 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_120 fl_u ;
};
#line 1211 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1246
struct file_system_type;
#line 1246
struct super_operations;
#line 1246
struct xattr_handler;
#line 1246
struct mtd_info;
#line 1246 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
   struct list_head s_async_list ;
};
#line 1372 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1424 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1453 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64 start , u64 len ) ;
};
#line 1496 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1679 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2101
struct bio;
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
typedef unsigned int tcflag_t;
#line 31 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/termios.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 95 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 9 "include/linux/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5] ;
   __u16 x_sflag ;
};
#line 12 "include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 223 "include/linux/tty_driver.h"
struct tty_struct;
#line 224
struct tty_driver;
#line 226 "include/linux/tty_driver.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver *driver , struct inode *inode ,
                                int idx ) ;
   int (*install)(struct tty_driver *driver , struct tty_struct *tty ) ;
   void (*remove)(struct tty_driver *driver , struct tty_struct *tty ) ;
   int (*open)(struct tty_struct *tty , struct file *filp ) ;
   void (*close)(struct tty_struct *tty , struct file *filp ) ;
   void (*shutdown)(struct tty_struct *tty ) ;
   int (*write)(struct tty_struct *tty , unsigned char const   *buf , int count ) ;
   int (*put_char)(struct tty_struct *tty , unsigned char ch ) ;
   void (*flush_chars)(struct tty_struct *tty ) ;
   int (*write_room)(struct tty_struct *tty ) ;
   int (*chars_in_buffer)(struct tty_struct *tty ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   void (*throttle)(struct tty_struct *tty ) ;
   void (*unthrottle)(struct tty_struct *tty ) ;
   void (*stop)(struct tty_struct *tty ) ;
   void (*start)(struct tty_struct *tty ) ;
   void (*hangup)(struct tty_struct *tty ) ;
   int (*break_ctl)(struct tty_struct *tty , int state ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   void (*set_ldisc)(struct tty_struct *tty ) ;
   void (*wait_until_sent)(struct tty_struct *tty , int timeout ) ;
   void (*send_xchar)(struct tty_struct *tty , char ch ) ;
   int (*tiocmget)(struct tty_struct *tty , struct file *file ) ;
   int (*tiocmset)(struct tty_struct *tty , struct file *file , unsigned int set ,
                   unsigned int clear ) ;
   int (*resize)(struct tty_struct *tty , struct winsize *ws ) ;
   int (*set_termiox)(struct tty_struct *tty , struct termiox *tnew ) ;
   int (*poll_init)(struct tty_driver *driver , int line , char *options ) ;
   int (*poll_get_char)(struct tty_driver *driver , int line ) ;
   void (*poll_put_char)(struct tty_driver *driver , int line , char ch ) ;
   struct file_operations  const  *proc_fops ;
};
#line 268
struct proc_dir_entry;
#line 268 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev cdev ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   int minor_num ;
   int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   int flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct ktermios **termios ;
   struct ktermios **termios_locked ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 107 "include/linux/tty_ldisc.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct *tty ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct *tty ) ;
   ssize_t (*read)(struct tty_struct *tty , struct file *file , unsigned char *buf ,
                   size_t nr ) ;
   ssize_t (*write)(struct tty_struct *tty , struct file *file , unsigned char const   *buf ,
                    size_t nr ) ;
   int (*ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd , unsigned long arg ) ;
   long (*compat_ioctl)(struct tty_struct *tty , struct file *file , unsigned int cmd ,
                        unsigned long arg ) ;
   void (*set_termios)(struct tty_struct *tty , struct ktermios *old ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct *tty ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   *cp , char *fp ,
                       int count ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   struct module *owner ;
   int refcount ;
};
#line 145 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   int refcount ;
};
#line 57 "include/linux/tty.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0] ;
};
#line 69 "include/linux/tty.h"
struct tty_bufhead {
   struct delayed_work work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 170
struct signal_struct;
#line 183
struct tty_port;
#line 185 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port *port ) ;
   void (*raise_dtr_rts)(struct tty_port *port ) ;
};
#line 191 "include/linux/tty.h"
struct tty_port {
   struct tty_struct *tty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   unsigned long flags ;
   struct mutex mutex ;
   unsigned char *xmit_buf ;
   int close_delay ;
   int closing_wait ;
};
#line 220 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct tty_ldisc ldisc ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios *termios ;
   struct ktermios *termios_locked ;
   struct termiox *termiox ;
   char name[64] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   struct tty_bufhead buf ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned int column ;
   unsigned char lnext : 1 ;
   unsigned char erasing : 1 ;
   unsigned char raw : 1 ;
   unsigned char real_raw : 1 ;
   unsigned char icanon : 1 ;
   unsigned char closing : 1 ;
   unsigned char echo_overrun : 1 ;
   unsigned short minimum_to_wake ;
   unsigned long overrun_time ;
   int num_overrun ;
   unsigned long process_char_map[256UL / (8UL * sizeof(unsigned long ))] ;
   char *read_buf ;
   int read_head ;
   int read_tail ;
   int read_cnt ;
   unsigned long read_flags[4096UL / (8UL * sizeof(unsigned long ))] ;
   unsigned char *echo_buf ;
   unsigned int echo_pos ;
   unsigned int echo_cnt ;
   int canon_data ;
   unsigned long canon_head ;
   unsigned int canon_column ;
   struct mutex atomic_read_lock ;
   struct mutex atomic_write_lock ;
   struct mutex output_lock ;
   struct mutex echo_lock ;
   unsigned char *write_buf ;
   int write_cnt ;
   spinlock_t read_lock ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 333
struct class;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 17 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 18 "include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 26
struct pci_dev;
#line 19 "include/linux/klist.h"
struct klist_node;
#line 39 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dma_map_ops;
#line 4 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 31 "include/linux/device.h"
struct device_private;
#line 33
struct driver_private;
#line 35
struct class_private;
#line 36
struct bus_type;
#line 37
struct bus_type_private;
#line 39 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 52
struct device_attribute;
#line 52
struct driver_attribute;
#line 52 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct bus_type_private *p ;
};
#line 123 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct dev_pm_ops *pm ;
   struct driver_private *p ;
};
#line 156 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
   struct class_private *p ;
};
#line 208
struct device_type;
#line 241 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 288 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct dev_pm_ops *pm ;
};
#line 301 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 361 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 370
struct dma_coherent_mem;
#line 370 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 117 "include/linux/sem.h"
struct sem_undo_list;
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct siginfo;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_125 {
   unsigned long sig[64 / 64] ;
};
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_125 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 167 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 174 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_127 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_128 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(__kernel_uid32_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_129 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_130 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_131 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_132 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_126 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_127 _kill ;
   struct __anonstruct__timer_128 _timer ;
   struct __anonstruct__rt_129 _rt ;
   struct __anonstruct__sigchld_130 _sigchld ;
   struct __anonstruct__sigfault_131 _sigfault ;
   struct __anonstruct__sigpoll_132 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_126 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_135 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_135 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 88 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 26 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 27
struct hrtimer_cpu_base;
#line 40
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 100 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   struct list_head cb_entry ;
   int start_pid ;
   void *start_site ;
   char start_comm[16] ;
};
#line 139 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 168 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 11 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 18 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 948 "include/linux/sysctl.h"
struct nsproxy;
#line 28 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 31 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 78
struct key_type;
#line 80
struct keyring_list;
#line 123
struct key_user;
#line 123 "include/linux/key.h"
union __anonunion_type_data_190 {
   struct list_head link ;
   unsigned long x[2] ;
   void *p[2] ;
};
#line 123 "include/linux/key.h"
union __anonunion_payload_191 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 123 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   time_t expiry ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_190 type_data ;
   union __anonunion_payload_191 payload ;
};
#line 29 "include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32] ;
   gid_t *blocks[0] ;
};
#line 81 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 114 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 96 "include/linux/sched.h"
struct futex_pi_state;
#line 97
struct robust_list_head;
#line 141
struct cfs_rq;
#line 142
struct task_group;
#line 339
struct user_namespace;
#line 58 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 15 "include/linux/aio.h"
struct kioctx;
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_193 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_193 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 435 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 442 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 461 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 488 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 501 "include/linux/sched.h"
union __anonunion____missing_field_name_194 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 501 "include/linux/sched.h"
union __anonunion____missing_field_name_195 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 501
struct taskstats;
#line 501
struct tty_audit_buf;
#line 501 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   union __anonunion____missing_field_name_194 __annonCompField23 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_195 __annonCompField24 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 650 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 696
struct reclaim_state;
#line 699 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 715 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 760
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 836 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
   unsigned long cpumask[] ;
};
#line 859
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 877 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[] ;
};
#line 969
struct io_context;
#line 978
struct audit_context;
#line 983
struct rq;
#line 986 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p , int sync ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   int (*needs_post_schedule)(struct rq *this_rq ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_cpus_allowed)(struct task_struct *p , struct cpumask  const  *newmask ) ;
   void (*rq_online)(struct rq *rq ) ;
   void (*rq_offline)(struct rq *rq ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 1037 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1051 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 nr_migrations ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1111
struct rt_rq;
#line 1111 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1127
struct linux_binfmt;
#line 1127
struct css_set;
#line 1127
struct compat_robust_list_head;
#line 1127 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   unsigned int in_execve : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_tracer *bts ;
   void *bts_buffer ;
   size_t bts_size ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_exec_mutex ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   unsigned long trace ;
};
#line 153 "include/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 reserved[3] ;
};
#line 179 "include/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 232 "include/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 reserved[5] ;
};
#line 271 "include/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 292
enum __anonenum_196 {
    FB_BLANK_UNBLANK = 0,
    FB_BLANK_NORMAL = 0 + 1,
    FB_BLANK_VSYNC_SUSPEND = 1 + 1,
    FB_BLANK_HSYNC_SUSPEND = 2 + 1,
    FB_BLANK_POWERDOWN = 3 + 1
} ;
#line 331 "include/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 340 "include/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 349 "include/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 373 "include/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 377 "include/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 30 "include/linux/backlight.h"
struct backlight_device;
#line 31
struct fb_info;
#line 33 "include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct fb_info * ) ;
};
#line 49 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   unsigned int state ;
};
#line 73 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 433 "include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 444
struct fb_videomode;
#line 444 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4] ;
   __u8 monitor[14] ;
   __u8 serial_no[14] ;
   __u8 ascii[14] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 547 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 570 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
   void (*readio)(struct fb_info *info , void *dst , void *src , unsigned int size ) ;
};
#line 588 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*deferred_io)(struct fb_info *info , struct list_head *pagelist ) ;
};
#line 606 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *info , int user ) ;
   int (*fb_release)(struct fb_info *info , int user ) ;
   ssize_t (*fb_read)(struct fb_info *info , char *buf , size_t count , loff_t *ppos ) ;
   ssize_t (*fb_write)(struct fb_info *info , char const   *buf , size_t count , loff_t *ppos ) ;
   int (*fb_check_var)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   int (*fb_set_par)(struct fb_info *info ) ;
   int (*fb_setcolreg)(unsigned int regno , unsigned int red , unsigned int green ,
                       unsigned int blue , unsigned int transp , struct fb_info *info ) ;
   int (*fb_setcmap)(struct fb_cmap *cmap , struct fb_info *info ) ;
   int (*fb_blank)(int blank , struct fb_info *info ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *var , struct fb_info *info ) ;
   void (*fb_fillrect)(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
   void (*fb_copyarea)(struct fb_info *info , struct fb_copyarea  const  *region ) ;
   void (*fb_imageblit)(struct fb_info *info , struct fb_image  const  *image ) ;
   int (*fb_cursor)(struct fb_info *info , struct fb_cursor *cursor ) ;
   void (*fb_rotate)(struct fb_info *info , int angle ) ;
   int (*fb_sync)(struct fb_info *info ) ;
   int (*fb_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_compat_ioctl)(struct fb_info *info , unsigned int cmd , unsigned long arg ) ;
   int (*fb_mmap)(struct fb_info *info , struct vm_area_struct *vma ) ;
   void (*fb_save_state)(struct fb_info *info ) ;
   void (*fb_restore_state)(struct fb_info *info ) ;
   void (*fb_get_caps)(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
};
#line 686 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 695 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 706 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 715 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 726 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 735 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *info , struct fb_tilemap *map ) ;
   void (*fb_tilecopy)(struct fb_info *info , struct fb_tilearea *area ) ;
   void (*fb_tilefill)(struct fb_info *info , struct fb_tilerect *rect ) ;
   void (*fb_tileblit)(struct fb_info *info , struct fb_tileblit *blit ) ;
   void (*fb_tilecursor)(struct fb_info *info , struct fb_tilecursor *cursor ) ;
   int (*fb_get_tilemax)(struct fb_info *info ) ;
};
#line 809 "include/linux/fb.h"
struct fb_info {
   int node ;
   int flags ;
   struct mutex lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
};
#line 1083 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 60 "include/linux/pci.h"
struct hotplug_slot;
#line 60 "include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 88
enum __anonenum_197 {
    PCI_STD_RESOURCES = 0,
    PCI_STD_RESOURCE_END = 5,
    PCI_ROM_RESOURCE = 6,
    PCI_BRIDGE_RESOURCES = 7,
    PCI_BRIDGE_RESOURCE_END = (PCI_BRIDGE_RESOURCES + 4) - 1,
    PCI_NUM_RESOURCES = 11,
    DEVICE_COUNT_RESOURCE = 12
} ;
#line 110 "include/linux/pci.h"
typedef int pci_power_t;
#line 128 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 130
enum pci_channel_state {
    pci_channel_io_normal = (pci_channel_state_t )1,
    pci_channel_io_frozen = (pci_channel_state_t )2,
    pci_channel_io_perm_failure = (pci_channel_state_t )3
} ;
#line 154 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 169 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 181
struct pcie_link_state;
#line 182
struct pci_vpd;
#line 187
struct pci_driver;
#line 187 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_type ;
   u8 rom_base_reg ;
   u8 pin ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[DEVICE_COUNT_RESOURCE] ;
   unsigned int transparent : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_added : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int block_ucfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int is_pcie : 1 ;
   unsigned int state_saved : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE] ;
   struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE] ;
   struct list_head msi_list ;
   struct pci_vpd *vpd ;
};
#line 311
struct pci_ops;
#line 311 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[16] ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char secondary ;
   unsigned char subordinate ;
   char name[48] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 366 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus *bus , unsigned int devfn , int where , int size , u32 *val ) ;
   int (*write)(struct pci_bus *bus , unsigned int devfn , int where , int size ,
                u32 val ) ;
};
#line 385 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 397 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 417 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *dev , enum pci_channel_state error ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *dev ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *dev ) ;
   void (*resume)(struct pci_dev *dev ) ;
};
#line 438 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev *dev , struct pci_device_id  const  *id ) ;
   void (*remove)(struct pci_dev *dev ) ;
   int (*suspend)(struct pci_dev *dev , pm_message_t state ) ;
   int (*suspend_late)(struct pci_dev *dev , pm_message_t state ) ;
   int (*resume_early)(struct pci_dev *dev ) ;
   int (*resume)(struct pci_dev *dev ) ;
   void (*shutdown)(struct pci_dev *dev ) ;
   struct pci_error_handlers *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/scatterlist.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 13 "include/linux/dma-attrs.h"
enum dma_attr {
    DMA_ATTR_WRITE_BARRIER = 0,
    DMA_ATTR_WEAK_ORDERING = 1,
    DMA_ATTR_MAX = 2
} ;
#line 25 "include/linux/dma-attrs.h"
struct dma_attrs {
   unsigned long flags[(((unsigned long )DMA_ATTR_MAX + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 11 "include/linux/dma-mapping.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 18 "include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device *dev , size_t size , dma_addr_t *dma_handle ,
                           gfp_t gfp ) ;
   void (*free_coherent)(struct device *dev , size_t size , void *vaddr , dma_addr_t dma_handle ) ;
   dma_addr_t (*map_page)(struct device *dev , struct page *page , unsigned long offset ,
                          size_t size , enum dma_data_direction dir , struct dma_attrs *attrs ) ;
   void (*unmap_page)(struct device *dev , dma_addr_t dma_handle , size_t size , enum dma_data_direction dir ,
                      struct dma_attrs *attrs ) ;
   int (*map_sg)(struct device *dev , struct scatterlist *sg , int nents , enum dma_data_direction dir ,
                 struct dma_attrs *attrs ) ;
   void (*unmap_sg)(struct device *dev , struct scatterlist *sg , int nents , enum dma_data_direction dir ,
                    struct dma_attrs *attrs ) ;
   void (*sync_single_for_cpu)(struct device *dev , dma_addr_t dma_handle , size_t size ,
                               enum dma_data_direction dir ) ;
   void (*sync_single_for_device)(struct device *dev , dma_addr_t dma_handle , size_t size ,
                                  enum dma_data_direction dir ) ;
   void (*sync_single_range_for_cpu)(struct device *dev , dma_addr_t dma_handle ,
                                     unsigned long offset , size_t size , enum dma_data_direction dir ) ;
   void (*sync_single_range_for_device)(struct device *dev , dma_addr_t dma_handle ,
                                        unsigned long offset , size_t size , enum dma_data_direction dir ) ;
   void (*sync_sg_for_cpu)(struct device *dev , struct scatterlist *sg , int nents ,
                           enum dma_data_direction dir ) ;
   void (*sync_sg_for_device)(struct device *dev , struct scatterlist *sg , int nents ,
                              enum dma_data_direction dir ) ;
   int (*mapping_error)(struct device *dev , dma_addr_t dma_addr ) ;
   int (*dma_supported)(struct device *dev , u64 mask ) ;
   int is_phys ;
};
#line 204 "include/video/vga.h"
struct vgastate {
   void *vgabase ;
   unsigned long membase ;
   __u32 memsize ;
   __u32 flags ;
   __u32 depth ;
   __u32 num_attr ;
   __u32 num_crtc ;
   __u32 num_gfx ;
   __u32 num_seq ;
   void *vidstate ;
};
#line 12 "include/linux/svga.h"
struct vga_regset {
   u8 regnum ;
   u8 lowbit ;
   u8 highbit ;
};
#line 23 "include/linux/svga.h"
struct svga_fb_format {
   u32 bits_per_pixel ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   u32 nonstd ;
   u32 type ;
   u32 type_aux ;
   u32 visual ;
   u32 xpanstep ;
   u32 xresstep ;
};
#line 39 "include/linux/svga.h"
struct svga_timing_regs {
   struct vga_regset  const  *h_total_regs ;
   struct vga_regset  const  *h_display_regs ;
   struct vga_regset  const  *h_blank_start_regs ;
   struct vga_regset  const  *h_blank_end_regs ;
   struct vga_regset  const  *h_sync_start_regs ;
   struct vga_regset  const  *h_sync_end_regs ;
   struct vga_regset  const  *v_total_regs ;
   struct vga_regset  const  *v_display_regs ;
   struct vga_regset  const  *v_blank_start_regs ;
   struct vga_regset  const  *v_blank_end_regs ;
   struct vga_regset  const  *v_sync_start_regs ;
   struct vga_regset  const  *v_sync_end_regs ;
};
#line 55 "include/linux/svga.h"
struct svga_pll {
   u16 m_min ;
   u16 m_max ;
   u16 n_min ;
   u16 n_max ;
   u16 r_min ;
   u16 r_max ;
   u32 f_vco_min ;
   u32 f_vco_max ;
   u32 f_base ;
};
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 36 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 157 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 161 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
struct dac_info;
#line 34 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
struct arkfb_info {
   int mclk_freq ;
   int mtrr_reg ;
   struct dac_info *dac ;
   struct vgastate state ;
   struct mutex open_lock ;
   unsigned int ref_count ;
   u32 pseudo_palette[16] ;
};
#line 294
enum __anonenum_201 {
    DAC_PSEUDO8_8 = 0,
    DAC_RGB1555_8 = 1,
    DAC_RGB0565_8 = 2,
    DAC_RGB0888_8 = 3,
    DAC_RGB8888_8 = 4,
    DAC_PSEUDO8_16 = 5,
    DAC_RGB1555_16 = 6,
    DAC_RGB0565_16 = 7,
    DAC_RGB0888_16 = 8,
    DAC_RGB8888_16 = 9,
    DAC_MAX = 10
} ;
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
struct dac_ops {
   int (*dac_get_mode)(struct dac_info *info ) ;
   int (*dac_set_mode)(struct dac_info *info , int mode ) ;
   int (*dac_get_freq)(struct dac_info *info , int channel ) ;
   int (*dac_set_freq)(struct dac_info *info , int channel , u32 freq ) ;
   void (*dac_release)(struct dac_info *info ) ;
};
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
struct dac_info {
   struct dac_ops *dacops ;
   void (*dac_read_regs)(void *data , u8 *code , int count ) ;
   void (*dac_write_regs)(void *data , u8 *code , int count ) ;
   void *data ;
};
#line 373 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
struct ics5342_info {
   struct dac_info dac ;
   u8 mode ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 8 "include/linux/dynamic_debug.h"
extern long long dynamic_debug_enabled ;
#line 9
extern long long dynamic_debug_enabled2 ;
#line 238 "include/linux/kernel.h"
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void *s , int c , size_t n ) ;
#line 54
extern char *strcpy(char *dest , char const   *src ) ;
#line 379 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
extern struct pv_cpu_ops pv_cpu_ops ;
#line 1003 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static void slow_down_io(void) 
{ 


  {
#line 1005
  (*(pv_cpu_ops.io_delay))();
#line 1011
  return;
}
}
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock , char const   *name , struct lock_class_key *key ) ;
#line 136
void mutex_lock(struct mutex *lock ) ;
#line 152
void mutex_unlock(struct mutex *lock ) ;
#line 27 "include/linux/kref.h"
extern void kref_get(struct kref *kref ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return (kobj->name);
}
}
#line 159 "include/linux/moduleparam.h"
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
#line 160
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
#line 175
extern int param_set_charp(char const   *val , struct kernel_param *kp ) ;
#line 176
extern int param_get_charp(char *buffer , struct kernel_param *kp ) ;
#line 129 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 218 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 225 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 240
  tmp___2 = __kmalloc(size, flags);
#line 240
  return (tmp___2);
}
}
#line 304 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 306
  tmp = kmalloc(size, flags | 32768U);
#line 306
  return (tmp);
}
}
#line 67 "include/linux/module.h"
int init_module(void) ;
#line 68
void cleanup_module(void) ;
#line 86
extern struct module __this_module ;
#line 312 "include/linux/tty_driver.h"
__inline extern struct tty_driver *tty_driver_kref_get(struct tty_driver *d ) 
{ 


  {
#line 314
  kref_get(& d->kref);
#line 315
  return (d);
}
}
#line 430 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 432
  tmp = kobject_name(& dev->kobj);
#line 432
  return (tmp);
}
}
#line 457 "include/linux/device.h"
__inline static void *dev_get_drvdata(struct device  const  *dev ) 
{ 


  {
#line 459
  return (dev->driver_data);
}
}
#line 462 "include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev , void *data ) 
{ 


  {
#line 464
  dev->driver_data = data;
#line 465
  return;
}
}
#line 562
extern char const   *dev_driver_string(struct device  const  *dev ) ;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 20
  __asm__  volatile   ("mov"
                       "b"
                       " %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 20
  return (ret);
}
}
#line 28 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 28
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 28
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val , void volatile   *addr ) 
{ 


  {
#line 29
  __asm__  volatile   ("mov"
                       "w"
                       " %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
#line 29
  return;
}
}
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 32
  __asm__  volatile   ("mov"
                       "b"
                       " %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)));
#line 32
  return;
}
}
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 34
  __asm__  volatile   ("mov"
                       "l"
                       " %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)));
#line 34
  return;
}
}
#line 118 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static unsigned char inb_p(unsigned short port ) 
{ 
  unsigned char _v ;

  {
#line 118
  __asm__  volatile   ("in"
                       "b"
                       " %"
                       "w"
                       "1,%"
                       ""
                       "0": "=a" (_v): "Nd" (port));
#line 118
  slow_down_io();
#line 118
  return (_v);
}
}
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outb(unsigned char value , unsigned short port ) 
{ 


  {
#line 127
  __asm__  volatile   ("out"
                       "b"
                       " %"
                       "b"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
#line 127
  return;
}
}
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outb_p(unsigned char value , unsigned short port ) 
{ 


  {
#line 127
  __asm__  volatile   ("out"
                       "b"
                       " %"
                       "b"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
#line 127
  slow_down_io();
#line 127
  return;
}
}
#line 128 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
__inline static void outw(unsigned short value , unsigned short port ) 
{ 


  {
#line 128
  __asm__  volatile   ("out"
                       "w"
                       " %"
                       "w"
                       "0,%"
                       "w"
                       "1": : "a" (value), "Nd" (port));
#line 128
  return;
}
}
#line 69 "include/asm-generic/iomap.h"
extern void *pci_iomap(struct pci_dev *dev , int bar , unsigned long max ) ;
#line 70
extern void pci_iounmap(struct pci_dev *dev , void * ) ;
#line 160 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io_64.h"
extern void memset_io(void volatile   *a , int b , size_t c ) ;
#line 931 "include/linux/fb.h"
extern void cfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) ;
#line 932
extern void cfb_copyarea(struct fb_info *info , struct fb_copyarea  const  *area ) ;
#line 933
extern void cfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) ;
#line 946
extern int register_framebuffer(struct fb_info *fb_info ) ;
#line 947
extern int unregister_framebuffer(struct fb_info *fb_info ) ;
#line 954
extern void fb_set_suspend(struct fb_info *info , int state ) ;
#line 1015
extern struct fb_info *framebuffer_alloc(size_t size , struct device *dev ) ;
#line 1016
extern void framebuffer_release(struct fb_info *info ) ;
#line 1074
extern int fb_alloc_cmap(struct fb_cmap *cmap , int len , int transp ) ;
#line 1075
extern void fb_dealloc_cmap(struct fb_cmap *cmap ) ;
#line 1108
extern int fb_find_mode(struct fb_var_screeninfo *var , struct fb_info *info , char const   *mode_option ,
                        struct fb_videomode  const  *db , unsigned int dbsize , struct fb_videomode  const  *default_mode ,
                        unsigned int default_bpp ) ;
#line 607 "include/linux/pci.h"
extern int pci_bus_read_config_word(struct pci_bus *bus , unsigned int devfn , int where ,
                                    u16 *val ) ;
#line 622 "include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev *dev , int where , u16 *val ) 
{ 
  int tmp ;

  {
#line 624
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
#line 624
  return (tmp);
}
}
#line 645
extern int ( __attribute__((__warn_unused_result__)) pci_enable_device)(struct pci_dev *dev ) ;
#line 657
extern void pci_disable_device(struct pci_dev *dev ) ;
#line 658
extern void pci_set_master(struct pci_dev *dev ) ;
#line 690
extern int pci_save_state(struct pci_dev *dev ) ;
#line 691
extern int pci_restore_state(struct pci_dev *dev ) ;
#line 693
extern int pci_set_power_state(struct pci_dev *dev , pci_power_t state ) ;
#line 694
extern pci_power_t pci_choose_state(struct pci_dev *dev , pm_message_t state ) ;
#line 722
extern int ( __attribute__((__warn_unused_result__)) pci_request_regions)(struct pci_dev * ,
                                                                          char const   * ) ;
#line 724
extern void pci_release_regions(struct pci_dev * ) ;
#line 743
extern int ( __attribute__((__warn_unused_result__)) __pci_register_driver)(struct pci_driver * ,
                                                                            struct module * ,
                                                                            char const   *mod_name ) ;
#line 752
extern void pci_unregister_driver(struct pci_driver *dev ) ;
#line 1077 "include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
#line 1079
  tmp = dev_get_drvdata(& pdev->dev);
#line 1079
  return (tmp);
}
}
#line 1082 "include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
#line 1084
  dev_set_drvdata(& pdev->dev, data);
#line 1085
  return;
}
}
#line 1090 "include/linux/pci.h"
__inline static char const   *pci_name(struct pci_dev *pdev ) 
{ 
  char const   *tmp ;

  {
#line 1092
  tmp = dev_name(& pdev->dev);
#line 1092
  return (tmp);
}
}
#line 217 "include/video/vga.h"
extern int save_vga(struct vgastate *state ) ;
#line 218
extern int restore_vga(struct vgastate *state ) ;
#line 224 "include/video/vga.h"
__inline static unsigned char vga_io_r(unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 226
  tmp = inb_p(port);
#line 226
  return (tmp);
}
}
#line 229 "include/video/vga.h"
__inline static void vga_io_w(unsigned short port , unsigned char val ) 
{ 


  {
#line 231
  outb_p(val, port);
#line 232
  return;
}
}
#line 234 "include/video/vga.h"
__inline static void vga_io_w_fast(unsigned short port , unsigned char reg , unsigned char val ) 
{ 


  {
#line 237
  outw(((int )val << 8) | (int )reg, port);
#line 238
  return;
}
}
#line 240 "include/video/vga.h"
__inline static unsigned char vga_mm_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 242
  tmp = readb(regbase + (int )port);
#line 242
  return (tmp);
}
}
#line 245 "include/video/vga.h"
__inline static void vga_mm_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
#line 247
  writeb(val, regbase + (int )port);
#line 248
  return;
}
}
#line 250 "include/video/vga.h"
__inline static void vga_mm_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                   unsigned char val ) 
{ 


  {
#line 253
  writew(((int )val << 8) | (int )reg, regbase + (int )port);
#line 254
  return;
}
}
#line 256 "include/video/vga.h"
__inline static unsigned char vga_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 258
  if (regbase) {
#line 259
    tmp = vga_mm_r(regbase, port);
#line 259
    return (tmp);
  } else {
#line 261
    tmp___0 = vga_io_r(port);
#line 261
    return (tmp___0);
  }
}
}
#line 264 "include/video/vga.h"
__inline static void vga_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
#line 266
  if (regbase) {
#line 267
    vga_mm_w(regbase, port, val);
  } else {
#line 269
    vga_io_w(port, val);
  }
#line 270
  return;
}
}
#line 273 "include/video/vga.h"
__inline static void vga_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                unsigned char val ) 
{ 


  {
#line 276
  if (regbase) {
#line 277
    vga_mm_w_fast(regbase, port, reg, val);
  } else {
#line 279
    vga_io_w_fast(port, reg, val);
  }
#line 280
  return;
}
}
#line 287 "include/video/vga.h"
__inline static unsigned char vga_rcrt(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 289
  vga_w(regbase, 980, reg);
#line 290
  tmp = vga_r(regbase, 981);
#line 290
  return (tmp);
}
}
#line 293 "include/video/vga.h"
__inline static void vga_wcrt(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 296
  vga_w_fast(regbase, 980, reg, val);
#line 301
  return;
}
}
#line 340 "include/video/vga.h"
__inline static unsigned char vga_rseq(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 342
  vga_w(regbase, 964, reg);
#line 343
  tmp = vga_r(regbase, 965);
#line 343
  return (tmp);
}
}
#line 346 "include/video/vga.h"
__inline static void vga_wseq(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 349
  vga_w_fast(regbase, 964, reg, val);
#line 354
  return;
}
}
#line 398 "include/video/vga.h"
__inline static void vga_wgfx(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 401
  vga_w_fast(regbase, 974, reg, val);
#line 406
  return;
}
}
#line 79 "include/linux/svga.h"
__inline static void svga_wseq_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 81
  tmp = vga_rseq((void *)0, index);
#line 81
  vga_wseq((void *)0, index, ((int )data & (int )mask) | ((int )tmp & ~ ((int )mask)));
#line 82
  return;
}
}
#line 86 "include/linux/svga.h"
__inline static void svga_wcrt_mask(u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 88
  tmp = vga_rcrt((void *)0, index);
#line 88
  vga_wcrt((void *)0, index, ((int )data & (int )mask) | ((int )tmp & ~ ((int )mask)));
#line 89
  return;
}
}
#line 91 "include/linux/svga.h"
__inline static int svga_primary_device(struct pci_dev *dev ) 
{ 
  u16 flags ;

  {
#line 94
  pci_read_config_word(dev, 4, & flags);
#line 95
  return ((int )flags & 1);
}
}
#line 99
extern void svga_wcrt_multi(struct vga_regset  const  *regset , u32 value ) ;
#line 102
extern void svga_set_default_gfx_regs(void) ;
#line 103
extern void svga_set_default_atc_regs(void) ;
#line 104
extern void svga_set_default_seq_regs(void) ;
#line 105
extern void svga_set_default_crt_regs(void) ;
#line 106
extern void svga_set_textmode_vga_regs(void) ;
#line 109
extern void svga_tilecopy(struct fb_info *info , struct fb_tilearea *area ) ;
#line 110
extern void svga_tilefill(struct fb_info *info , struct fb_tilerect *rect ) ;
#line 111
extern void svga_tileblit(struct fb_info *info , struct fb_tileblit *blit ) ;
#line 112
extern void svga_tilecursor(struct fb_info *info , struct fb_tilecursor *cursor ) ;
#line 113
extern int svga_get_tilemax(struct fb_info *info ) ;
#line 114
extern void svga_get_caps(struct fb_info *info , struct fb_blit_caps *caps , struct fb_var_screeninfo *var ) ;
#line 117
extern int svga_compute_pll(struct svga_pll  const  *pll , u32 f_wanted , u16 *m ,
                            u16 *n , u16 *r , int node ) ;
#line 118
extern int svga_check_timings(struct svga_timing_regs  const  *tm , struct fb_var_screeninfo *var ,
                              int node ) ;
#line 119
extern void svga_set_timings(struct svga_timing_regs  const  *tm , struct fb_var_screeninfo *var ,
                             u32 hmul , u32 hdiv , u32 vmul , u32 vdiv , u32 hborder ,
                             int node ) ;
#line 121
extern int svga_match_format(struct svga_fb_format  const  *frm , struct fb_var_screeninfo *var ,
                             struct fb_fix_screeninfo *fix ) ;
#line 118 "include/linux/console.h"
extern void acquire_console_sem(void) ;
#line 120
extern void release_console_sem(void) ;
#line 115 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
extern int mtrr_add(unsigned long base , unsigned long size , unsigned int type ,
                    bool increment ) ;
#line 119
extern int mtrr_del(int reg , unsigned long base , unsigned long size ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct svga_fb_format  const  arkfb_formats[9]  = 
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
  {      {0, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 3, 9, 3, 8, 8}, 
        {4, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 0, 0, 3, 8, 16}, 
        {4, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 1, 2, 1, 3, 8, 16}, 
        {8, {0, 6, 0}, {0, 6, 0}, {0, 6, 0}, {0, 0, 0}, 0, 0, 0, 3, 8, 8}, 
        {16, {10, 5, 0}, {5, 5, 0}, {0, 5, 0}, {0, 0, 0}, 0, 0, 0, 2, 4, 4}, 
        {16, {11, 5, 0}, {5, 6, 0}, {0, 5, 0}, {0, 0, 0}, 0, 0, 0, 2, 4, 4}, 
        {24, {16, 8, 0}, {8, 8, 0}, {0, 8, 0}, {0, 0, 0}, 0, 0, 0, 2, 8, 8}, 
        {32, {16, 8, 0}, {8, 8, 0}, {0, 8, 0}, {0, 0, 0}, 0, 0, 0, 2, 2, 2}, 
        {65535, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, {0, 0, 0}, 0, 0, 0, 0, 0, 0}};
#line 72 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_total_regs[3]  = {      {0, 0, 7}, 
        {65, 7, 7}, 
        {255, 0, 0}};
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_display_regs[3]  = {      {1, 0, 7}, 
        {65, 6, 6}, 
        {255, 0, 0}};
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_blank_start_regs[3]  = {      {2, 0, 7}, 
        {65, 5, 5}, 
        {255, 0, 0}};
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_blank_end_regs[3]  = {      {3, 0, 4}, 
        {5, 7, 7}, 
        {255, 0, 0}};
#line 76 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_sync_start_regs[3]  = {      {4, 0, 7}, 
        {65, 4, 4}, 
        {255, 0, 0}};
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_h_sync_end_regs[2]  = {      {5, 0, 4}, 
        {255, 0, 0}};
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_total_regs[5]  = {      {6, 0, 7}, 
        {7, 0, 0}, 
        {7, 5, 5}, 
        {64, 7, 7}, 
        {255, 0, 0}};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_display_regs[5]  = {      {18, 0, 7}, 
        {7, 1, 1}, 
        {7, 6, 6}, 
        {64, 6, 6}, 
        {255, 0, 0}};
#line 81 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_blank_start_regs[5]  = {      {21, 0, 7}, 
        {7, 3, 3}, 
        {9, 5, 5}, 
        {64, 5, 5}, 
        {255, 0, 0}};
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_blank_end_regs[2]  = {      {22, 0, 7}, 
        {255, 0, 0}};
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_sync_start_regs[5]  = {      {16, 0, 7}, 
        {7, 2, 2}, 
        {7, 7, 7}, 
        {64, 4, 4}, 
        {255, 0, 0}};
#line 85 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_v_sync_end_regs[2]  = {      {17, 0, 3}, 
        {255, 0, 0}};
#line 87 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_line_compare_regs[4]  = {      {24, 0, 7}, 
        {7, 4, 4}, 
        {9, 6, 6}, 
        {255, 0, 0}};
#line 88 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_start_address_regs[4]  = {      {13, 0, 7}, 
        {12, 0, 7}, 
        {64, 0, 2}, 
        {255, 0, 0}};
#line 89 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct vga_regset  const  ark_offset_regs[3]  = {      {19, 0, 7}, 
        {65, 3, 3}, 
        {255, 0, 0}};
#line 91 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct svga_timing_regs  const  ark_timing_regs  = 
#line 91
     {ark_h_total_regs, ark_h_display_regs, ark_h_blank_start_regs, ark_h_blank_end_regs,
    ark_h_sync_start_regs, ark_h_sync_end_regs, ark_v_total_regs, ark_v_display_regs,
    ark_v_blank_start_regs, ark_v_blank_end_regs, ark_v_sync_start_regs, ark_v_sync_end_regs};
#line 104 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char *mode_option  __attribute__((__section__(".devinit.data")))  =    "640x480-8@60";
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int mtrr  =    1;
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_author110[56]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 110
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      '(', 
        'c',      ')',      ' ',      '2', 
        '0',      '0',      '7',      ' ', 
        'O',      'n',      'd',      'r', 
        'e',      'j',      ' ',      'Z', 
        'a',      'j',      'i',      'c', 
        'e',      'k',      ' ',      '<', 
        's',      'a',      'n',      't', 
        'i',      'a',      'g',      'o', 
        '@',      'c',      'r',      'f', 
        'r',      'e',      'e',      'n', 
        'e',      't',      '.',      'o', 
        'r',      'g',      '>',      '\000'};
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_license111[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 111
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_description112[40]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 112
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'f',      'b',      'd',      'e', 
        'v',      ' ',      'd',      'r', 
        'i',      'v',      'e',      'r', 
        ' ',      'f',      'o',      'r', 
        ' ',      'A',      'R',      'K', 
        ' ',      '2',      '0',      '0', 
        '0',      'P',      'V',      '\000'};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __param_str_mode_option[12]  = 
#line 114
  {      'm',      'o',      'd',      'e', 
        '_',      'o',      'p',      't', 
        'i',      'o',      'n',      '\000'};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct kernel_param  const  __param_mode_option  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mode_option, 292, & param_set_charp, & param_get_charp, {& mode_option}};
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_mode_optiontype114[27]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 114
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      'o',      'd', 
        'e',      '_',      'o',      'p', 
        't',      'i',      'o',      'n', 
        ':',      'c',      'h',      'a', 
        'r',      'p',      '\000'};
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_mode_option115[58]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 115
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      'o',      'd', 
        'e',      '_',      'o',      'p', 
        't',      'i',      'o',      'n', 
        ':',      'D',      'e',      'f', 
        'a',      'u',      'l',      't', 
        ' ',      'v',      'i',      'd', 
        'e',      'o',      ' ',      'm', 
        'o',      'd',      'e',      ' ', 
        '(',      '\'',      '6',      '4', 
        '0',      'x',      '4',      '8', 
        '0',      '-',      '8',      '@', 
        '6',      '0',      '\'',      ',', 
        ' ',      'e',      't',      'c', 
        ')',      '\000'};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __param_str_mode[5]  = {      'm',      'o',      'd',      'e', 
        '\000'};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct kernel_param  const  __param_mode  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mode, 292, & param_set_charp, & param_get_charp, {& mode_option}};
#line 116 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_modetype116[20]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 116
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      'o',      'd', 
        'e',      ':',      'c',      'h', 
        'a',      'r',      'p',      '\000'};
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_mode117[64]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 117
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      'o',      'd', 
        'e',      ':',      'D',      'e', 
        'f',      'a',      'u',      'l', 
        't',      ' ',      'v',      'i', 
        'd',      'e',      'o',      ' ', 
        'm',      'o',      'd',      'e', 
        ' ',      '(',      '\'',      '6', 
        '4',      '0',      'x',      '4', 
        '8',      '0',      '-',      '8', 
        '@',      '6',      '0',      '\'', 
        ',',      ' ',      'e',      't', 
        'c',      ')',      ' ',      '(', 
        'd',      'e',      'p',      'r', 
        'e',      'c',      'a',      't', 
        'e',      'd',      ')',      '\000'};
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __param_str_mtrr[5]  = {      'm',      't',      'r',      'r', 
        '\000'};
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct kernel_param  const  __param_mtrr  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_mtrr, 292, & param_set_int, & param_get_int, {& mtrr}};
#line 120 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_mtrrtype120[18]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 120
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'm',      't',      'r', 
        'r',      ':',      'i',      'n', 
        't',      '\000'};
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_mtrr121[76]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 121
  {      'p',      'a',      'r',      'm', 
        '=',      'm',      't',      'r', 
        'r',      ':',      'E',      'n', 
        'a',      'b',      'l',      'e', 
        ' ',      'w',      'r',      'i', 
        't',      'e',      '-',      'c', 
        'o',      'm',      'b',      'i', 
        'n',      'i',      'n',      'g', 
        ' ',      'w',      'i',      't', 
        'h',      ' ',      'M',      'T', 
        'R',      'R',      ' ',      '(', 
        '1',      '=',      'e',      'n', 
        'a',      'b',      'l',      'e', 
        ',',      ' ',      '0',      '=', 
        'd',      'i',      's',      'a', 
        'b',      'l',      'e',      ',', 
        ' ',      'd',      'e',      'f', 
        'a',      'u',      'l',      't', 
        '=',      '1',      ')',      '\000'};
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int threshold  =    4;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __param_str_threshold[10]  = 
#line 126
  {      't',      'h',      'r',      'e', 
        's',      'h',      'o',      'l', 
        'd',      '\000'};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct kernel_param  const  __param_threshold  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_threshold, 420, & param_set_int, & param_get_int, {& threshold}};
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_thresholdtype126[23]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 126
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      't',      'h',      'r', 
        'e',      's',      'h',      'o', 
        'l',      'd',      ':',      'i', 
        'n',      't',      '\000'};
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static char const   __mod_threshold127[30]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 127
  {      'p',      'a',      'r',      'm', 
        '=',      't',      'h',      'r', 
        'e',      's',      'h',      'o', 
        'l',      'd',      ':',      'F', 
        'I',      'F',      'O',      ' ', 
        't',      'h',      'r',      'e', 
        's',      'h',      'o',      'l', 
        'd',      '\000'};
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_settile(struct fb_info *info , struct fb_tilemap *map ) 
{ 
  u8 const   *font ;
  u8 *fb ;
  int i ;
  int c ;

  {
#line 135
  font = map->data;
#line 136
  fb = (u8 *)info->screen_base;
#line 139
  if (((map->width != (__u32 )8 || map->height != (__u32 )16) || map->depth != (__u32 )1) || map->length != (__u32 )256) {
#line 141
    printk("<3>fb%d: unsupported font parameters: width %d, height %d, depth %d, length %d\n",
           info->node, map->width, map->height, map->depth, map->length);
#line 144
    return;
  } else {

  }
#line 147
  fb = fb + 2;
#line 148
  c = 0;
#line 148
  while (1) {
#line 148
    if ((__u32 )c < map->length) {

    } else {
#line 148
      break;
    }
#line 149
    i = 0;
#line 149
    while (1) {
#line 149
      if ((__u32 )i < map->height) {

      } else {
#line 149
        break;
      }
#line 150
      __writeb(*(font + i), fb + i * 4);
#line 151
      __writeb(*(font + i), fb + (i * 4 + 128 * 8));
#line 149
      i = i + 1;
    }
#line 153
    fb = fb + 128;
#line 155
    if (c % 8 == 7) {
#line 156
      fb = fb + 128 * 8;
    } else {

    }
#line 158
    font = font + map->height;
#line 148
    c = c + 1;
  }
#line 160
  return;
}
}
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct fb_tile_ops arkfb_tile_ops  =    {& arkfb_settile, & svga_tilecopy, & svga_tilefill, & svga_tileblit, & svga_tilecursor,
    & svga_get_tilemax};
#line 176 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static u32 expand_color(u32 c ) 
{ 


  {
#line 178
  return (((((c & 1U) | ((c & 2U) << 7)) | ((c & 4U) << 14)) | ((c & 8U) << 21)) * 255U);
}
}
#line 182 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_iplan_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 tmp ;
  u32 bg ;
  u32 tmp___0 ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp___1 ;
  u32 *tmp___2 ;

  {
#line 184
  tmp = expand_color(image->fg_color);
#line 184
  fg = tmp;
#line 185
  tmp___0 = expand_color(image->bg_color);
#line 185
  bg = tmp___0;
#line 192
  src1 = image->data;
#line 193
  dst1 = (info->screen_base + image->dy * (__u32 const   )info->fix.line_length) + (image->dx / (__u32 const   )8) * (__u32 const   )4;
#line 196
  y = 0;
#line 196
  while (1) {
#line 196
    if ((__u32 const   )y < image->height) {

    } else {
#line 196
      break;
    }
#line 197
    src = src1;
#line 198
    dst = (u32 *)dst1;
#line 199
    x = 0;
#line 199
    while (1) {
#line 199
      if ((__u32 const   )x < image->width) {

      } else {
#line 199
        break;
      }
#line 200
      tmp___1 = src;
#line 200
      src = src + 1;
#line 200
      val = (int const   )*tmp___1 * (int const   )16843009;
#line 201
      val = (val & fg) | (~ val & bg);
#line 202
      tmp___2 = dst;
#line 202
      dst = dst + 1;
#line 202
      __writel(val, tmp___2);
#line 199
      x = x + 8;
    }
#line 204
    src1 = src1 + image->width / (__u32 const   )8;
#line 205
    dst1 = dst1 + info->fix.line_length;
#line 196
    y = y + 1;
  }
#line 208
  return;
}
}
#line 211 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_iplan_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 
  u32 fg ;
  u32 tmp ;
  u8 *dst1 ;
  u32 *dst ;
  int x ;
  int y ;
  u32 *tmp___0 ;

  {
#line 213
  tmp = expand_color(rect->color);
#line 213
  fg = tmp;
#line 218
  dst1 = (info->screen_base + rect->dy * (__u32 const   )info->fix.line_length) + (rect->dx / (__u32 const   )8) * (__u32 const   )4;
#line 221
  y = 0;
#line 221
  while (1) {
#line 221
    if ((__u32 const   )y < rect->height) {

    } else {
#line 221
      break;
    }
#line 222
    dst = (u32 *)dst1;
#line 223
    x = 0;
#line 223
    while (1) {
#line 223
      if ((__u32 const   )x < rect->width) {

      } else {
#line 223
        break;
      }
#line 224
      tmp___0 = dst;
#line 224
      dst = dst + 1;
#line 224
      __writel(fg, tmp___0);
#line 223
      x = x + 8;
    }
#line 226
    dst1 = dst1 + info->fix.line_length;
#line 221
    y = y + 1;
  }
#line 229
  return;
}
}
#line 233 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static u32 expand_pixel(u32 c ) 
{ 


  {
#line 235
  return ((((((((((c & 1U) << 24) | ((c & 2U) << 27)) | ((c & 4U) << 14)) | ((c & 8U) << 17)) | ((c & 16U) << 4)) | ((c & 32U) << 7)) | ((c & 64U) >> 6)) | ((c & 128U) >> 3)) * 15U);
}
}
#line 240 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_cfb4_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 bg ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp ;
  u32 *tmp___0 ;

  {
#line 242
  fg = image->fg_color * (__u32 const   )286331153;
#line 243
  bg = image->bg_color * (__u32 const   )286331153;
#line 250
  src1 = image->data;
#line 251
  dst1 = (info->screen_base + image->dy * (__u32 const   )info->fix.line_length) + (image->dx / (__u32 const   )8) * (__u32 const   )4;
#line 254
  y = 0;
#line 254
  while (1) {
#line 254
    if ((__u32 const   )y < image->height) {

    } else {
#line 254
      break;
    }
#line 255
    src = src1;
#line 256
    dst = (u32 *)dst1;
#line 257
    x = 0;
#line 257
    while (1) {
#line 257
      if ((__u32 const   )x < image->width) {

      } else {
#line 257
        break;
      }
#line 258
      tmp = src;
#line 258
      src = src + 1;
#line 258
      val = expand_pixel(*tmp);
#line 259
      val = (val & fg) | (~ val & bg);
#line 260
      tmp___0 = dst;
#line 260
      dst = dst + 1;
#line 260
      __writel(val, tmp___0);
#line 257
      x = x + 8;
    }
#line 262
    src1 = src1 + image->width / (__u32 const   )8;
#line 263
    dst1 = dst1 + info->fix.line_length;
#line 254
    y = y + 1;
  }
#line 266
  return;
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 


  {
#line 270
  if (((info->var.bits_per_pixel == (__u32 )4 && (int const   )image->depth == (int const   )1) && image->width % (unsigned int const   )8 == (unsigned int const   )0) && image->dx % (unsigned int const   )8 == (unsigned int const   )0) {
#line 272
    if (info->fix.type == (__u32 )2) {
#line 273
      arkfb_iplan_imageblit(info, image);
    } else {
#line 275
      arkfb_cfb4_imageblit(info, image);
    }
  } else {
#line 277
    cfb_imageblit(info, image);
  }
#line 278
  return;
}
}
#line 280 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 


  {
#line 282
  if (((info->var.bits_per_pixel == (__u32 )4 && rect->width % (unsigned int const   )8 == (unsigned int const   )0) && rect->dx % (unsigned int const   )8 == (unsigned int const   )0) && info->fix.type == (__u32 )2) {
#line 285
    arkfb_iplan_fillrect(info, rect);
  } else {
#line 287
    cfb_fillrect(info, rect);
  }
#line 288
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static void dac_write_reg(struct dac_info *info , u8 reg , u8 val ) 
{ 
  u8 code[2] ;

  {
#line 343
  code[0] = reg;
#line 343
  code[1] = val;
#line 344
  (*(info->dac_write_regs))(info->data, code, 1);
#line 345
  return;
}
}
#line 347 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static void dac_write_regs(struct dac_info *info , u8 *code , int count ) 
{ 


  {
#line 349
  (*(info->dac_write_regs))(info->data, code, count);
#line 350
  return;
}
}
#line 352 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static int dac_set_mode(struct dac_info *info , int mode ) 
{ 
  int tmp ;

  {
#line 354
  tmp = (*((info->dacops)->dac_set_mode))(info, mode);
#line 354
  return (tmp);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static int dac_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  int tmp ;

  {
#line 359
  tmp = (*((info->dacops)->dac_set_freq))(info, channel, freq);
#line 359
  return (tmp);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
__inline static void dac_release(struct dac_info *info ) 
{ 


  {
#line 364
  (*((info->dacops)->dac_release))(info);
#line 365
  return;
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static u8 const   ics5342_mode_table[DAC_MAX]  = 
#line 382
  {      1,      33,      97,      65, 
        (unsigned char)0,      17,      49,      81, 
        145,      113};
#line 388 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int ics5342_set_mode(struct dac_info *info , int mode ) 
{ 
  u8 code ;

  {
#line 392
  if (mode >= DAC_MAX) {
#line 393
    return (-22);
  } else {

  }
#line 395
  code = ics5342_mode_table[mode];
#line 397
  if (! code) {
#line 398
    return (-22);
  } else {

  }
#line 400
  dac_write_reg(info, 6, (int )code & 240);
#line 401
  ((struct ics5342_info *)info)->mode = mode;
#line 403
  return (0);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct svga_pll  const  ics5342_pll  = 
#line 406
     {3, 129, 3, 33, 0, 3, 60000, 250000, 14318};
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct svga_pll  const  ics5342_pll_pd4  = 
#line 410
     {3, 129, 3, 33, 2, 2, 60000, 335000, 14318};
#line 416 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int ics5342_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  u16 m ;
  u16 n ;
  u16 r ;
  int rv ;
  int tmp ;
  u8 code[6] ;

  {
#line 421
  tmp = svga_compute_pll((int )((struct ics5342_info *)info)->mode == DAC_PSEUDO8_16 ? & ics5342_pll_pd4 : & ics5342_pll,
                         freq, & m, & n, & r, 0);
#line 421
  rv = tmp;
#line 425
  if (rv < 0) {
#line 426
    return (-22);
  } else {
#line 428
    code[0] = 4;
#line 428
    code[1] = 3;
#line 428
    code[2] = 5;
#line 428
    code[3] = (int )m - 2;
#line 428
    code[4] = 5;
#line 428
    code[5] = ((int )n - 2) | ((int )r << 5);
#line 429
    dac_write_regs(info, code, 3);
#line 430
    return (0);
  }
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void ics5342_release(struct dac_info *info ) 
{ 


  {
#line 436
  ics5342_set_mode(info, DAC_PSEUDO8_8);
#line 437
  kfree(info);
#line 438
  return;
}
}
#line 440 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct dac_ops ics5342_ops  =    {0, & ics5342_set_mode, 0, & ics5342_set_freq, & ics5342_release};
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct dac_info *ics5342_init(void (*drr)(void *data , u8 *code , int count ) ,
                                     void (*dwr)(void *data , u8 *code , int count ) ,
                                     void *data ) 
{ 
  struct dac_info *info ;
  void *tmp ;

  {
#line 449
  tmp = kzalloc(sizeof(struct ics5342_info ), (16U | 64U) | 128U);
#line 449
  info = tmp;
#line 451
  if (! info) {
#line 452
    return ((void *)0);
  } else {

  }
#line 454
  info->dacops = & ics5342_ops;
#line 455
  info->dac_read_regs = drr;
#line 456
  info->dac_write_regs = dwr;
#line 457
  info->data = data;
#line 458
  ((struct ics5342_info *)info)->mode = DAC_PSEUDO8_8;
#line 459
  return (info);
}
}
#line 466 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static unsigned short dac_regs[4]  = {      968,      969,      966,      967};
#line 468 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void ark_dac_read_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
#line 470
  tmp = vga_rseq((void *)0, 28);
#line 470
  regval = tmp;
#line 472
  while (1) {
#line 472
    if (count != 0) {

    } else {
#line 472
      break;
    }
#line 474
    vga_wseq((void *)0, 28, (int )regval | ((int )*(code + 0) & 4 ? 128 : 0));
#line 475
    *(code + 1) = vga_r((void *)0, dac_regs[(int )*(code + 0) & 3]);
#line 476
    count = count - 1;
#line 477
    code = code + 2;
  }
#line 480
  vga_wseq((void *)0, 28, regval);
#line 481
  return;
}
}
#line 483 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void ark_dac_write_regs(void *data , u8 *code , int count ) 
{ 
  u8 regval ;
  unsigned char tmp ;

  {
#line 485
  tmp = vga_rseq((void *)0, 28);
#line 485
  regval = tmp;
#line 487
  while (1) {
#line 487
    if (count != 0) {

    } else {
#line 487
      break;
    }
#line 489
    vga_wseq((void *)0, 28, (int )regval | ((int )*(code + 0) & 4 ? 128 : 0));
#line 490
    vga_w((void *)0, dac_regs[(int )*(code + 0) & 3], *(code + 1));
#line 491
    count = count - 1;
#line 492
    code = code + 2;
  }
#line 495
  vga_wseq((void *)0, 28, regval);
#line 496
  return;
}
}
#line 499 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void ark_set_pixclock(struct fb_info *info , u32 pixclock ) 
{ 
  struct arkfb_info *par ;
  u8 regval ;
  int rv ;
  int tmp ;

  {
#line 501
  par = info->par;
#line 504
  tmp = dac_set_freq(par->dac, 0, (u32 )1000000000 / pixclock);
#line 504
  rv = tmp;
#line 505
  if (rv < 0) {
#line 506
    printk("<3>fb%d: cannot set requested pixclock, keeping old value\n", info->node);
#line 507
    return;
  } else {

  }
#line 511
  regval = vga_r((void *)0, 972);
#line 512
  vga_w((void *)0, 962, (int )regval | (4 | 8));
#line 513
  return;
}
}
#line 518 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_open(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;

  {
#line 520
  par = info->par;
#line 522
  mutex_lock(& par->open_lock);
#line 523
  if (par->ref_count == 0U) {
#line 524
    memset(& par->state, 0, sizeof(struct vgastate ));
#line 525
    par->state.flags = (8 | 7) | 16;
#line 526
    par->state.num_crtc = 96;
#line 527
    par->state.num_seq = 48;
#line 528
    save_vga(& par->state);
  } else {

  }
#line 531
  par->ref_count = par->ref_count + 1U;
#line 532
  mutex_unlock(& par->open_lock);
#line 534
  return (0);
}
}
#line 539 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_release(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;

  {
#line 541
  par = info->par;
#line 543
  mutex_lock(& par->open_lock);
#line 544
  if (par->ref_count == 0U) {
#line 545
    mutex_unlock(& par->open_lock);
#line 546
    return (-22);
  } else {

  }
#line 549
  if (par->ref_count == 1U) {
#line 550
    restore_vga(& par->state);
#line 551
    dac_set_mode(par->dac, DAC_PSEUDO8_8);
  } else {

  }
#line 554
  par->ref_count = par->ref_count - 1U;
#line 555
  mutex_unlock(& par->open_lock);
#line 557
  return (0);
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  int rv ;
  int mem ;
  int step ;

  {
#line 567
  rv = svga_match_format(arkfb_formats, var, (void *)0);
#line 568
  if (rv < 0) {
#line 570
    printk("<3>fb%d: unsupported mode requested\n", info->node);
#line 571
    return (rv);
  } else {

  }
#line 575
  if (var->xres > var->xres_virtual) {
#line 576
    var->xres_virtual = var->xres;
  } else {

  }
#line 578
  if (var->yres > var->yres_virtual) {
#line 579
    var->yres_virtual = var->yres;
  } else {

  }
#line 582
  step = arkfb_formats[rv].xresstep - (u32 const   )1;
#line 583
  var->xres_virtual = (var->xres_virtual + (__u32 )step) & (unsigned int )(~ step);
#line 587
  mem = (var->bits_per_pixel * var->xres_virtual >> 3) * var->yres_virtual;
#line 588
  if ((unsigned long )mem > info->screen_size) {
#line 590
    printk("<3>fb%d: not enough framebuffer memory (%d kB requested , %d kB available)\n",
           info->node, mem >> 10, (unsigned int )(info->screen_size >> 10));
#line 591
    return (-22);
  } else {

  }
#line 594
  rv = svga_check_timings(& ark_timing_regs, var, info->node);
#line 595
  if (rv < 0) {
#line 597
    printk("<3>fb%d: invalid timings requested\n", info->node);
#line 598
    return (rv);
  } else {

  }
#line 602
  if (var->vmode & 1U) {
#line 603
    return (-22);
  } else {

  }
#line 605
  return (0);
}
}
#line 679
static int arkfb_set_par(struct fb_info *info ) ;
#line 679 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 679
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: offset register       : %d\n", 16, 32, 679, 0};
#line 702 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___0  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 702
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: text mode\n", 16, 32, 702, 0};
#line 711 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___1  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 711
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 4 bit pseudocolor\n", 16, 32, 711, 0};
#line 719 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___2  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 719
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 4 bit pseudocolor, planar\n", 16, 32, 719, 0};
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___3  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 726
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 8 bit pseudocolor\n", 16, 32, 726, 0};
#line 731 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___4  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 731
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: not using multiplex\n", 16, 32, 731, 0};
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___5  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 735
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: using multiplex\n", 16, 32, 735, 0};
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___6  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 742
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 5/5/5 truecolor\n", 16, 32, 742, 0};
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___7  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 749
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 5/6/5 truecolor\n", 16, 32, 749, 0};
#line 756 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___8  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 756
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 8/8/8 truecolor\n", 16, 32, 756, 0};
#line 765 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___9  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 765
     {"arkfb", "arkfb_set_par", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: 8/8/8/8 truecolor\n", 16, 32, 765, 0};
#line 610 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_set_par(struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  u32 value ;
  u32 mode ;
  u32 hmul ;
  u32 hdiv ;
  u32 offset_value ;
  u32 screen_size ;
  u32 bpp ;
  u8 regval ;
  int __ret ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int __ret___0 ;
  long tmp___2 ;
  long tmp___3 ;
  int __ret___1 ;
  long tmp___4 ;
  long tmp___5 ;
  int __ret___2 ;
  long tmp___6 ;
  long tmp___7 ;
  int __ret___3 ;
  long tmp___8 ;
  long tmp___9 ;
  int __ret___4 ;
  long tmp___10 ;
  long tmp___11 ;
  int __ret___5 ;
  long tmp___12 ;
  long tmp___13 ;
  int __ret___6 ;
  long tmp___14 ;
  long tmp___15 ;
  int __ret___7 ;
  long tmp___16 ;
  long tmp___17 ;
  int __ret___8 ;
  long tmp___18 ;
  long tmp___19 ;
  int __ret___9 ;
  long tmp___20 ;
  long tmp___21 ;

  {
#line 612
  par = info->par;
#line 614
  bpp = info->var.bits_per_pixel;
#line 617
  if (bpp != (u32 )0) {
#line 618
    info->fix.ypanstep = 1;
#line 619
    info->fix.line_length = (info->var.xres_virtual * bpp) / (__u32 )8;
#line 621
    info->flags = info->flags & ~ 131072;
#line 622
    info->tileops = (void *)0;
#line 625
    info->pixmap.blit_x = bpp == (u32 )4 ? 1 << (8 - 1) : ~ ((u32 )0);
#line 626
    info->pixmap.blit_y = ~ ((u32 )0);
#line 628
    offset_value = (info->var.xres_virtual * bpp) / (__u32 )64;
#line 629
    screen_size = info->var.yres_virtual * info->fix.line_length;
  } else {
#line 631
    info->fix.ypanstep = 16;
#line 632
    info->fix.line_length = 0;
#line 634
    info->flags = info->flags | 131072;
#line 635
    info->tileops = & arkfb_tile_ops;
#line 638
    info->pixmap.blit_x = 1 << (8 - 1);
#line 639
    info->pixmap.blit_y = 1 << (16 - 1);
#line 641
    offset_value = info->var.xres_virtual / (__u32 )16;
#line 642
    screen_size = (info->var.xres_virtual * info->var.yres_virtual) / (__u32 )64;
  }
#line 645
  info->var.xoffset = 0;
#line 646
  info->var.yoffset = 0;
#line 647
  info->var.activate = 0;
#line 650
  svga_wcrt_mask(17, 0, 128);
#line 653
  svga_wseq_mask(1, 32, 32);
#line 654
  svga_wcrt_mask(23, 0, 128);
#line 657
  svga_set_default_gfx_regs();
#line 658
  svga_set_default_atc_regs();
#line 659
  svga_set_default_seq_regs();
#line 660
  svga_set_default_crt_regs();
#line 661
  svga_wcrt_multi(ark_line_compare_regs, 4294967295U);
#line 662
  svga_wcrt_multi(ark_start_address_regs, 0);
#line 665
  svga_wseq_mask(16, 31, 31);
#line 666
  svga_wseq_mask(18, 3, 3);
#line 668
  vga_wseq((void *)0, 19, info->fix.smem_start >> 16);
#line 669
  vga_wseq((void *)0, 20, info->fix.smem_start >> 24);
#line 670
  vga_wseq((void *)0, 21, 0);
#line 671
  vga_wseq((void *)0, 22, 0);
#line 675
  regval = ((16 | ((threshold & 14) >> 1)) | ((threshold & 1) << 7)) | ((threshold & 16) << 1);
#line 676
  vga_wseq((void *)0, 24, regval);
#line 679
  while (1) {
#line 679
    while (1) {
#line 679
      __ret = 0;
#line 679
      tmp___0 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 679
      if (tmp___0) {
#line 679
        tmp = __builtin_expect(! (! descriptor.flags), 0);
#line 679
        if (tmp) {
#line 679
          __ret = 1;
        } else {

        }
      } else {

      }
#line 679
      if (__ret) {
#line 679
        printk("<7>arkfb:fb%d: offset register       : %d\n", info->node, offset_value);
      } else {

      }
#line 679
      break;
    }
#line 679
    break;
  }
#line 680
  svga_wcrt_multi(ark_offset_regs, offset_value);
#line 683
  svga_wcrt_mask(64, 8, 8);
#line 685
  if (info->var.vmode & 2U) {
#line 686
    svga_wcrt_mask(9, 128, 128);
  } else {
#line 688
    svga_wcrt_mask(9, 0, 128);
  }
#line 690
  if (info->var.vmode & 1U) {
#line 691
    svga_wcrt_mask(68, 4, 4);
  } else {
#line 693
    svga_wcrt_mask(68, 0, 4);
  }
#line 695
  hmul = 1;
#line 696
  hdiv = 1;
#line 697
  tmp___1 = svga_match_format(arkfb_formats, & info->var, & info->fix);
#line 697
  mode = tmp___1;
#line 700
  switch (mode) {
  case (u32 )0: 
#line 702
  while (1) {
#line 702
    while (1) {
#line 702
      __ret___0 = 0;
#line 702
      tmp___3 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 702
      if (tmp___3) {
#line 702
        tmp___2 = __builtin_expect(! (! descriptor___0.flags), 0);
#line 702
        if (tmp___2) {
#line 702
          __ret___0 = 1;
        } else {

        }
      } else {

      }
#line 702
      if (__ret___0) {
#line 702
        printk("<7>arkfb:fb%d: text mode\n", info->node);
      } else {

      }
#line 702
      break;
    }
#line 702
    break;
  }
#line 703
  svga_set_textmode_vga_regs();
#line 705
  vga_wseq((void *)0, 17, 16);
#line 706
  svga_wcrt_mask(70, 0, 4);
#line 707
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
#line 709
  break;
  case (u32 )1: 
#line 711
  while (1) {
#line 711
    while (1) {
#line 711
      __ret___1 = 0;
#line 711
      tmp___5 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 711
      if (tmp___5) {
#line 711
        tmp___4 = __builtin_expect(! (! descriptor___1.flags), 0);
#line 711
        if (tmp___4) {
#line 711
          __ret___1 = 1;
        } else {

        }
      } else {

      }
#line 711
      if (__ret___1) {
#line 711
        printk("<7>arkfb:fb%d: 4 bit pseudocolor\n", info->node);
      } else {

      }
#line 711
      break;
    }
#line 711
    break;
  }
#line 712
  vga_wgfx((void *)0, 5, 64);
#line 714
  vga_wseq((void *)0, 17, 16);
#line 715
  svga_wcrt_mask(70, 0, 4);
#line 716
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
#line 717
  break;
  case (u32 )2: 
#line 719
  while (1) {
#line 719
    while (1) {
#line 719
      __ret___2 = 0;
#line 719
      tmp___7 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 719
      if (tmp___7) {
#line 719
        tmp___6 = __builtin_expect(! (! descriptor___2.flags), 0);
#line 719
        if (tmp___6) {
#line 719
          __ret___2 = 1;
        } else {

        }
      } else {

      }
#line 719
      if (__ret___2) {
#line 719
        printk("<7>arkfb:fb%d: 4 bit pseudocolor, planar\n", info->node);
      } else {

      }
#line 719
      break;
    }
#line 719
    break;
  }
#line 721
  vga_wseq((void *)0, 17, 16);
#line 722
  svga_wcrt_mask(70, 0, 4);
#line 723
  dac_set_mode(par->dac, DAC_PSEUDO8_8);
#line 724
  break;
  case (u32 )3: 
#line 726
  while (1) {
#line 726
    while (1) {
#line 726
      __ret___3 = 0;
#line 726
      tmp___9 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 726
      if (tmp___9) {
#line 726
        tmp___8 = __builtin_expect(! (! descriptor___3.flags), 0);
#line 726
        if (tmp___8) {
#line 726
          __ret___3 = 1;
        } else {

        }
      } else {

      }
#line 726
      if (__ret___3) {
#line 726
        printk("<7>arkfb:fb%d: 8 bit pseudocolor\n", info->node);
      } else {

      }
#line 726
      break;
    }
#line 726
    break;
  }
#line 728
  vga_wseq((void *)0, 17, 22);
#line 730
  if (info->var.pixclock > (__u32 )20000) {
#line 731
    while (1) {
#line 731
      while (1) {
#line 731
        __ret___4 = 0;
#line 731
        tmp___11 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                    0);
#line 731
        if (tmp___11) {
#line 731
          tmp___10 = __builtin_expect(! (! descriptor___4.flags), 0);
#line 731
          if (tmp___10) {
#line 731
            __ret___4 = 1;
          } else {

          }
        } else {

        }
#line 731
        if (__ret___4) {
#line 731
          printk("<7>arkfb:fb%d: not using multiplex\n", info->node);
        } else {

        }
#line 731
        break;
      }
#line 731
      break;
    }
#line 732
    svga_wcrt_mask(70, 0, 4);
#line 733
    dac_set_mode(par->dac, DAC_PSEUDO8_8);
  } else {
#line 735
    while (1) {
#line 735
      while (1) {
#line 735
        __ret___5 = 0;
#line 735
        tmp___13 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                    0);
#line 735
        if (tmp___13) {
#line 735
          tmp___12 = __builtin_expect(! (! descriptor___5.flags), 0);
#line 735
          if (tmp___12) {
#line 735
            __ret___5 = 1;
          } else {

          }
        } else {

        }
#line 735
        if (__ret___5) {
#line 735
          printk("<7>arkfb:fb%d: using multiplex\n", info->node);
        } else {

        }
#line 735
        break;
      }
#line 735
      break;
    }
#line 736
    svga_wcrt_mask(70, 4, 4);
#line 737
    dac_set_mode(par->dac, DAC_PSEUDO8_16);
#line 738
    hdiv = 2;
  }
#line 740
  break;
  case (u32 )4: 
#line 742
  while (1) {
#line 742
    while (1) {
#line 742
      __ret___6 = 0;
#line 742
      tmp___15 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                  0);
#line 742
      if (tmp___15) {
#line 742
        tmp___14 = __builtin_expect(! (! descriptor___6.flags), 0);
#line 742
        if (tmp___14) {
#line 742
          __ret___6 = 1;
        } else {

        }
      } else {

      }
#line 742
      if (__ret___6) {
#line 742
        printk("<7>arkfb:fb%d: 5/5/5 truecolor\n", info->node);
      } else {

      }
#line 742
      break;
    }
#line 742
    break;
  }
#line 744
  vga_wseq((void *)0, 17, 26);
#line 745
  svga_wcrt_mask(70, 4, 4);
#line 746
  dac_set_mode(par->dac, DAC_RGB1555_16);
#line 747
  break;
  case (u32 )5: 
#line 749
  while (1) {
#line 749
    while (1) {
#line 749
      __ret___7 = 0;
#line 749
      tmp___17 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                  0);
#line 749
      if (tmp___17) {
#line 749
        tmp___16 = __builtin_expect(! (! descriptor___7.flags), 0);
#line 749
        if (tmp___16) {
#line 749
          __ret___7 = 1;
        } else {

        }
      } else {

      }
#line 749
      if (__ret___7) {
#line 749
        printk("<7>arkfb:fb%d: 5/6/5 truecolor\n", info->node);
      } else {

      }
#line 749
      break;
    }
#line 749
    break;
  }
#line 751
  vga_wseq((void *)0, 17, 26);
#line 752
  svga_wcrt_mask(70, 4, 4);
#line 753
  dac_set_mode(par->dac, DAC_RGB0565_16);
#line 754
  break;
  case (u32 )6: 
#line 756
  while (1) {
#line 756
    while (1) {
#line 756
      __ret___8 = 0;
#line 756
      tmp___19 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                  0);
#line 756
      if (tmp___19) {
#line 756
        tmp___18 = __builtin_expect(! (! descriptor___8.flags), 0);
#line 756
        if (tmp___18) {
#line 756
          __ret___8 = 1;
        } else {

        }
      } else {

      }
#line 756
      if (__ret___8) {
#line 756
        printk("<7>arkfb:fb%d: 8/8/8 truecolor\n", info->node);
      } else {

      }
#line 756
      break;
    }
#line 756
    break;
  }
#line 758
  vga_wseq((void *)0, 17, 22);
#line 759
  svga_wcrt_mask(70, 4, 4);
#line 760
  dac_set_mode(par->dac, DAC_RGB0888_16);
#line 761
  hmul = 3;
#line 762
  hdiv = 2;
#line 763
  break;
  case (u32 )7: 
#line 765
  while (1) {
#line 765
    while (1) {
#line 765
      __ret___9 = 0;
#line 765
      tmp___21 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                  0);
#line 765
      if (tmp___21) {
#line 765
        tmp___20 = __builtin_expect(! (! descriptor___9.flags), 0);
#line 765
        if (tmp___20) {
#line 765
          __ret___9 = 1;
        } else {

        }
      } else {

      }
#line 765
      if (__ret___9) {
#line 765
        printk("<7>arkfb:fb%d: 8/8/8/8 truecolor\n", info->node);
      } else {

      }
#line 765
      break;
    }
#line 765
    break;
  }
#line 767
  vga_wseq((void *)0, 17, 30);
#line 768
  svga_wcrt_mask(70, 4, 4);
#line 769
  dac_set_mode(par->dac, DAC_RGB8888_16);
#line 770
  hmul = 2;
#line 771
  break;
  default: 
#line 773
  printk("<3>fb%d: unsupported mode - bug\n", info->node);
#line 774
  return (-22);
  }
#line 777
  ark_set_pixclock(info, (hdiv * info->var.pixclock) / hmul);
#line 778
  svga_set_timings(& ark_timing_regs, & info->var, hmul, hdiv, info->var.vmode & 2U ? 2 : 1,
                   info->var.vmode & 1U ? 2 : 1, hmul, info->node);
#line 784
  value = ((info->var.xres + info->var.left_margin) + info->var.right_margin) + info->var.hsync_len;
#line 785
  value = ((value * hmul) / hdiv) / (u32 )8 - (u32 )5;
#line 786
  vga_wcrt((void *)0, 66, (value + (u32 )1) / (u32 )2);
#line 788
  memset_io(info->screen_base, 0, screen_size);
#line 790
  svga_wcrt_mask(23, 128, 128);
#line 791
  svga_wseq_mask(1, 0, 32);
#line 793
  return (0);
}
}
#line 798 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_setcolreg(u_int regno , u_int red , u_int green , u_int blue , u_int transp ,
                           struct fb_info *fb ) 
{ 


  {
#line 801
  switch (fb->var.bits_per_pixel) {
  case (__u32 )4: 
  case (__u32 )0: 
#line 804
  if (regno >= (u_int )16) {
#line 805
    return (-22);
  } else {

  }
#line 807
  if (fb->var.bits_per_pixel == (__u32 )4 && fb->var.nonstd == (__u32 )0) {
#line 809
    outb(240, 966);
#line 810
    outb(regno * (u_int )16, 968);
  } else {
#line 812
    outb(15, 966);
#line 813
    outb(regno, 968);
  }
#line 815
  outb(red >> 10, 969);
#line 816
  outb(green >> 10, 969);
#line 817
  outb(blue >> 10, 969);
#line 818
  break;
  case (__u32 )8: 
#line 820
  if (regno >= (u_int )256) {
#line 821
    return (-22);
  } else {

  }
#line 823
  outb(255, 966);
#line 824
  outb(regno, 968);
#line 825
  outb(red >> 10, 969);
#line 826
  outb(green >> 10, 969);
#line 827
  outb(blue >> 10, 969);
#line 828
  break;
  case (__u32 )16: 
#line 830
  if (regno >= (u_int )16) {
#line 831
    return (0);
  } else {

  }
#line 833
  if (fb->var.green.length == (__u32 )5) {
#line 834
    *((u32 *)fb->pseudo_palette + regno) = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
  } else
#line 836
  if (fb->var.green.length == (__u32 )6) {
#line 837
    *((u32 *)fb->pseudo_palette + regno) = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
  } else {
#line 840
    return (-22);
  }
#line 841
  break;
  case (__u32 )32: 
  case (__u32 )24: 
#line 844
  if (regno >= (u_int )16) {
#line 845
    return (0);
  } else {

  }
#line 847
  *((u32 *)fb->pseudo_palette + regno) = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
#line 849
  break;
  default: 
#line 851
  return (-22);
  }
#line 854
  return (0);
}
}
#line 863
static int arkfb_blank(int blank_mode , struct fb_info *info ) ;
#line 863 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___10  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 863
     {"arkfb", "arkfb_blank", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: unblank\n", 16, 32, 863, 0};
#line 868 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___11  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 868
     {"arkfb", "arkfb_blank", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: blank\n", 16, 32, 868, 0};
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___12  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 875
     {"arkfb", "arkfb_blank", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "fb%d: sync down\n", 16, 32, 875, 0};
#line 859 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_blank(int blank_mode , struct fb_info *info ) 
{ 
  int __ret ;
  long tmp ;
  long tmp___0 ;
  int __ret___0 ;
  long tmp___1 ;
  long tmp___2 ;
  int __ret___1 ;
  long tmp___3 ;
  long tmp___4 ;

  {
#line 861
  switch (blank_mode) {
  case FB_BLANK_UNBLANK: 
#line 863
  while (1) {
#line 863
    while (1) {
#line 863
      __ret = 0;
#line 863
      tmp___0 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 863
      if (tmp___0) {
#line 863
        tmp = __builtin_expect(! (! descriptor___10.flags), 0);
#line 863
        if (tmp) {
#line 863
          __ret = 1;
        } else {

        }
      } else {

      }
#line 863
      if (__ret) {
#line 863
        printk("<7>arkfb:fb%d: unblank\n", info->node);
      } else {

      }
#line 863
      break;
    }
#line 863
    break;
  }
#line 864
  svga_wseq_mask(1, 0, 32);
#line 865
  svga_wcrt_mask(23, 128, 128);
#line 866
  break;
  case FB_BLANK_NORMAL: 
#line 868
  while (1) {
#line 868
    while (1) {
#line 868
      __ret___0 = 0;
#line 868
      tmp___2 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 868
      if (tmp___2) {
#line 868
        tmp___1 = __builtin_expect(! (! descriptor___11.flags), 0);
#line 868
        if (tmp___1) {
#line 868
          __ret___0 = 1;
        } else {

        }
      } else {

      }
#line 868
      if (__ret___0) {
#line 868
        printk("<7>arkfb:fb%d: blank\n", info->node);
      } else {

      }
#line 868
      break;
    }
#line 868
    break;
  }
#line 869
  svga_wseq_mask(1, 32, 32);
#line 870
  svga_wcrt_mask(23, 128, 128);
#line 871
  break;
  case FB_BLANK_VSYNC_SUSPEND: 
  case FB_BLANK_HSYNC_SUSPEND: 
  case FB_BLANK_POWERDOWN: 
#line 875
  while (1) {
#line 875
    while (1) {
#line 875
      __ret___1 = 0;
#line 875
      tmp___4 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 875
      if (tmp___4) {
#line 875
        tmp___3 = __builtin_expect(! (! descriptor___12.flags), 0);
#line 875
        if (tmp___3) {
#line 875
          __ret___1 = 1;
        } else {

        }
      } else {

      }
#line 875
      if (__ret___1) {
#line 875
        printk("<7>arkfb:fb%d: sync down\n", info->node);
      } else {

      }
#line 875
      break;
    }
#line 875
    break;
  }
#line 876
  svga_wseq_mask(1, 32, 32);
#line 877
  svga_wcrt_mask(23, 0, 128);
#line 878
  break;
  }
#line 880
  return (0);
}
}
#line 886 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  unsigned int offset ;

  {
#line 891
  if (var->bits_per_pixel == (__u32 )0) {
#line 892
    offset = (var->yoffset / (__u32 )16) * (var->xres_virtual / (__u32 )2) + var->xoffset / (__u32 )2;
#line 893
    offset = offset >> 2;
  } else {
#line 895
    offset = var->yoffset * info->fix.line_length + (var->xoffset * var->bits_per_pixel) / (__u32 )8;
#line 897
    offset = offset >> (var->bits_per_pixel == (__u32 )4 ? 2 : 3);
  }
#line 901
  svga_wcrt_multi(ark_start_address_regs, offset);
#line 903
  return (0);
}
}
#line 912 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct fb_ops arkfb_ops  = 
#line 912
     {& __this_module, & arkfb_open, & arkfb_release, 0, 0, & arkfb_check_var, & arkfb_set_par,
    & arkfb_setcolreg, 0, & arkfb_blank, & arkfb_pan_display, & arkfb_fillrect, & cfb_copyarea,
    & arkfb_imageblit, 0, 0, 0, 0, 0, 0, 0, 0, & svga_get_caps};
#line 953 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct lock_class_key __key___2  ;
#line 932
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id )  __attribute__((__section__(".devinit.text"))) ;
#line 932 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) 
{ 
  struct fb_info *info ;
  struct arkfb_info *par ;
  int rc ;
  u8 regval ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;

  {
#line 940
  tmp___1 = svga_primary_device(dev);
#line 940
  if (tmp___1) {

  } else {
#line 941
    tmp = dev_name(& dev->dev);
#line 941
    tmp___0 = dev_driver_string(& dev->dev);
#line 941
    printk("<6>%s %s: ignoring secondary device\n", tmp___0, tmp);
#line 942
    return (-19);
  }
#line 946
  info = framebuffer_alloc(sizeof(struct arkfb_info ), & dev->dev);
#line 947
  if (! info) {
#line 948
    tmp___2 = dev_name(& dev->dev);
#line 948
    tmp___3 = dev_driver_string(& dev->dev);
#line 948
    printk("<3>%s %s: cannot allocate memory\n", tmp___3, tmp___2);
#line 949
    return (-12);
  } else {

  }
#line 952
  par = info->par;
#line 953
  while (1) {
#line 953
    __mutex_init(& par->open_lock, "&par->open_lock", & __key___2);
#line 953
    break;
  }
#line 955
  info->flags = 64 | 8192;
#line 956
  info->fbops = & arkfb_ops;
#line 959
  rc = pci_enable_device(dev);
#line 960
  if (rc < 0) {
#line 961
    tmp___4 = dev_name(info->device);
#line 961
    tmp___5 = dev_driver_string(info->device);
#line 961
    printk("<3>%s %s: cannot enable PCI device\n", tmp___5, tmp___4);
#line 962
    goto err_request_regions;
  } else {

  }
#line 965
  rc = pci_request_regions(dev, "arkfb");
#line 966
  if (rc < 0) {
#line 967
    tmp___6 = dev_name(info->device);
#line 967
    tmp___7 = dev_driver_string(info->device);
#line 967
    printk("<3>%s %s: cannot reserve framebuffer region\n", tmp___7, tmp___6);
#line 968
    goto err_request_regions;
  } else {

  }
#line 971
  par->dac = ics5342_init(& ark_dac_read_regs, & ark_dac_write_regs, info);
#line 972
  if (! par->dac) {
#line 973
    rc = -12;
#line 974
    tmp___8 = dev_name(info->device);
#line 974
    tmp___9 = dev_driver_string(info->device);
#line 974
    printk("<3>%s %s: RAMDAC initialization failed\n", tmp___9, tmp___8);
#line 975
    goto err_dac;
  } else {

  }
#line 978
  info->fix.smem_start = dev->resource[0].start;
#line 979
  info->fix.smem_len = dev->resource[0].start == (resource_size_t )0 && dev->resource[0].end == dev->resource[0].start ? 0 : (dev->resource[0].end - dev->resource[0].start) + (resource_size_t )1;
#line 982
  tmp___10 = pci_iomap(dev, 0, 0);
#line 982
  info->screen_base = tmp___10;
#line 983
  if (! info->screen_base) {
#line 984
    rc = -12;
#line 985
    tmp___11 = dev_name(info->device);
#line 985
    tmp___12 = dev_driver_string(info->device);
#line 985
    printk("<3>%s %s: iomap for framebuffer failed\n", tmp___12, tmp___11);
#line 986
    goto err_iomap;
  } else {

  }
#line 990
  regval = vga_rseq((void *)0, 16);
#line 991
  info->screen_size = (1 << ((int )regval >> 6)) << 20;
#line 992
  info->fix.smem_len = info->screen_size;
#line 994
  strcpy(info->fix.id, "ARK 2000PV");
#line 995
  info->fix.mmio_start = 0;
#line 996
  info->fix.mmio_len = 0;
#line 997
  info->fix.type = 0;
#line 998
  info->fix.visual = 3;
#line 999
  info->fix.ypanstep = 0;
#line 1000
  info->fix.accel = 0;
#line 1001
  info->pseudo_palette = (void *)(par->pseudo_palette);
#line 1004
  rc = fb_find_mode(& info->var, info, mode_option, (void *)0, 0, (void *)0, 8);
#line 1005
  if (! (rc == 1 || rc == 2)) {
#line 1006
    rc = -22;
#line 1007
    tmp___13 = dev_name(info->device);
#line 1007
    tmp___14 = dev_driver_string(info->device);
#line 1007
    printk("<3>%s %s: mode %s not found\n", tmp___14, tmp___13, mode_option);
#line 1008
    goto err_alloc_cmap;
  } else {

  }
#line 1011
  rc = fb_alloc_cmap(& info->cmap, 256, 0);
#line 1012
  if (rc < 0) {
#line 1013
    tmp___15 = dev_name(info->device);
#line 1013
    tmp___16 = dev_driver_string(info->device);
#line 1013
    printk("<3>%s %s: cannot allocate colormap\n", tmp___16, tmp___15);
#line 1014
    goto err_alloc_cmap;
  } else {

  }
#line 1017
  rc = register_framebuffer(info);
#line 1018
  if (rc < 0) {
#line 1019
    tmp___17 = dev_name(info->device);
#line 1019
    tmp___18 = dev_driver_string(info->device);
#line 1019
    printk("<3>%s %s: cannot register framebugger\n", tmp___18, tmp___17);
#line 1020
    goto err_reg_fb;
  } else {

  }
#line 1023
  tmp___19 = pci_name(dev);
#line 1023
  printk("<6>fb%d: %s on %s, %d MB RAM\n", info->node, info->fix.id, tmp___19, info->fix.smem_len >> 20);
#line 1027
  pci_set_drvdata(dev, info);
#line 1030
  if (mtrr) {
#line 1031
    par->mtrr_reg = -1;
#line 1032
    par->mtrr_reg = mtrr_add(info->fix.smem_start, info->fix.smem_len, 1, 1);
  } else {

  }
#line 1036
  return (0);
  err_reg_fb: 
#line 1040
  fb_dealloc_cmap(& info->cmap);
  err_alloc_cmap: 
#line 1043
  pci_iounmap(dev, info->screen_base);
  err_iomap: 
#line 1045
  dac_release(par->dac);
  err_dac: 
#line 1047
  pci_release_regions(dev);
  err_request_regions: 
#line 1051
  framebuffer_release(info);
#line 1052
  return (rc);
}
}
#line 1057
static void ark_pci_remove(struct pci_dev *dev )  __attribute__((__section__(".devexit.text"))) ;
#line 1057 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void ark_pci_remove(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;

  {
#line 1059
  tmp = pci_get_drvdata(dev);
#line 1059
  info = tmp;
#line 1061
  if (info) {
#line 1062
    par = info->par;
#line 1065
    if (par->mtrr_reg >= 0) {
#line 1066
      mtrr_del(par->mtrr_reg, 0, 0);
#line 1067
      par->mtrr_reg = -1;
    } else {

    }
#line 1071
    dac_release(par->dac);
#line 1072
    unregister_framebuffer(info);
#line 1073
    fb_dealloc_cmap(& info->cmap);
#line 1075
    pci_iounmap(dev, info->screen_base);
#line 1076
    pci_release_regions(dev);
#line 1079
    pci_set_drvdata(dev, (void *)0);
#line 1080
    framebuffer_release(info);
  } else {

  }
#line 1082
  return;
}
}
#line 1088 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int ark_pci_suspend(struct pci_dev *dev , pm_message_t state ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  pci_power_t tmp___2 ;

  {
#line 1090
  tmp = pci_get_drvdata(dev);
#line 1090
  info = tmp;
#line 1091
  par = info->par;
#line 1093
  tmp___0 = dev_name(info->device);
#line 1093
  tmp___1 = dev_driver_string(info->device);
#line 1093
  printk("<6>%s %s: suspend\n", tmp___1, tmp___0);
#line 1095
  acquire_console_sem();
#line 1096
  mutex_lock(& par->open_lock);
#line 1098
  if (state.event == 1 || par->ref_count == 0U) {
#line 1099
    mutex_unlock(& par->open_lock);
#line 1100
    release_console_sem();
#line 1101
    return (0);
  } else {

  }
#line 1104
  fb_set_suspend(info, 1);
#line 1106
  pci_save_state(dev);
#line 1107
  pci_disable_device(dev);
#line 1108
  tmp___2 = pci_choose_state(dev, state);
#line 1108
  pci_set_power_state(dev, tmp___2);
#line 1110
  mutex_unlock(& par->open_lock);
#line 1111
  release_console_sem();
#line 1113
  return (0);
}
}
#line 1119 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int ark_pci_resume(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1121
  tmp = pci_get_drvdata(dev);
#line 1121
  info = tmp;
#line 1122
  par = info->par;
#line 1124
  tmp___0 = dev_name(info->device);
#line 1124
  tmp___1 = dev_driver_string(info->device);
#line 1124
  printk("<6>%s %s: resume\n", tmp___1, tmp___0);
#line 1126
  acquire_console_sem();
#line 1127
  mutex_lock(& par->open_lock);
#line 1129
  if (par->ref_count == 0U) {
#line 1130
    goto fail;
  } else {

  }
#line 1132
  pci_set_power_state(dev, 0);
#line 1133
  pci_restore_state(dev);
#line 1135
  tmp___2 = pci_enable_device(dev);
#line 1135
  if (tmp___2) {
#line 1136
    goto fail;
  } else {

  }
#line 1138
  pci_set_master(dev);
#line 1140
  arkfb_set_par(info);
#line 1141
  fb_set_suspend(info, 0);
  fail: 
#line 1144
  mutex_unlock(& par->open_lock);
#line 1145
  release_console_sem();
#line 1146
  return (0);
}
}
#line 1155 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct pci_device_id ark_devices[2]  __attribute__((__section__(".devinit.data")))  = {      {60888,
      41113, ~ 0, ~ 0, 0U, 0U, 0UL}, 
        {0, 0, 0, 0, 0, 0, 0}};
#line 1161
extern struct pci_device_id  const  __mod_pci_device_table  __attribute__((__unused__,
__alias__("ark_devices"))) ;
#line 1163 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct pci_driver arkfb_pci_driver  = 
#line 1163
     {{0, 0}, "arkfb", ark_devices, & ark_pci_probe, & ark_pci_remove, & ark_pci_suspend,
    0, 0, & ark_pci_resume, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {{{0U}, 0U,
                                                                          0U, 0},
                                                                         {0, 0}}};
#line 1176
static void arkfb_cleanup(void)  __attribute__((__section__(".exit.text"))) ;
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___13  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 1176
     {"arkfb", "arkfb_cleanup", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "arkfb: cleaning up\n", 16, 32, 1176, 0};
#line 1174
static void arkfb_cleanup(void)  __attribute__((__section__(".exit.text"))) ;
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static void arkfb_cleanup(void) 
{ 
  int __ret ;
  long tmp ;
  long tmp___0 ;

  {
#line 1176
  while (1) {
#line 1176
    while (1) {
#line 1176
      __ret = 0;
#line 1176
      tmp___0 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 1176
      if (tmp___0) {
#line 1176
        tmp = __builtin_expect(! (! descriptor___13.flags), 0);
#line 1176
        if (tmp) {
#line 1176
          __ret = 1;
        } else {

        }
      } else {

      }
#line 1176
      if (__ret) {
#line 1176
        printk("<7>arkfb:arkfb: cleaning up\n");
      } else {

      }
#line 1176
      break;
    }
#line 1176
    break;
  }
#line 1177
  pci_unregister_driver(& arkfb_pci_driver);
#line 1178
  return;
}
}
#line 1195
static int arkfb_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 1195 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static struct _ddebug descriptor___14  __attribute__((__used__, __section__("__verbose"),
__aligned__(8)))  = 
#line 1195
     {"arkfb", "arkfb_init", "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c",
    "arkfb: initializing\n", 16, 32, 1195, 0};
#line 1182
static int arkfb_init(void)  __attribute__((__section__(".init.text"), __no_instrument_function__)) ;
#line 1182 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int arkfb_init(void) 
{ 
  int __ret ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
#line 1195
  while (1) {
#line 1195
    while (1) {
#line 1195
      __ret = 0;
#line 1195
      tmp___0 = __builtin_expect(! (! (dynamic_debug_enabled & (1LL << 16) && dynamic_debug_enabled2 & (1LL << 32))),
                                 0);
#line 1195
      if (tmp___0) {
#line 1195
        tmp = __builtin_expect(! (! descriptor___14.flags), 0);
#line 1195
        if (tmp) {
#line 1195
          __ret = 1;
        } else {

        }
      } else {

      }
#line 1195
      if (__ret) {
#line 1195
        printk("<7>arkfb:arkfb: initializing\n");
      } else {

      }
#line 1195
      break;
    }
#line 1195
    break;
  }
#line 1196
  tmp___1 = __pci_register_driver(& arkfb_pci_driver, & __this_module, "arkfb");
#line 1196
  return (tmp___1);
}
}
#line 1199 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 1199
  tmp = arkfb_init();
#line 1199
  return (tmp);
}
}
#line 1200 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
void cleanup_module(void) 
{ 


  {
#line 1200
  arkfb_cleanup();
#line 1200
  return;
}
}
#line 1218
void ldv_check_final_state(void) ;
#line 1221
extern void ldv_check_return_value(int res ) ;
#line 1224
extern void ldv_check_return_value_probe(int res ) ;
#line 1227
extern void ldv_initialize(void) ;
#line 1230
extern void ldv_handler_precall(void) ;
#line 1233
extern int nondet_int(void) ;
#line 1236 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
int LDV_IN_INTERRUPT  ;
#line 1602 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
static int res_ark_pci_probe_29  ;
#line 1239 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/32_1/drivers/video/arkfb.c"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct fb_info *var_group1 ;
  struct fb_tilemap *var_group2 ;
  struct dac_info *var_group3 ;
  int var_ics5342_set_mode_15_p1 ;
  int var_ics5342_set_freq_16_p1 ;
  u32 var_ics5342_set_freq_16_p2 ;
  int var_arkfb_open_22_p1 ;
  int var_arkfb_release_23_p1 ;
  struct fb_var_screeninfo *var_group4 ;
  u_int var_arkfb_setcolreg_26_p0 ;
  u_int var_arkfb_setcolreg_26_p1 ;
  u_int var_arkfb_setcolreg_26_p2 ;
  u_int var_arkfb_setcolreg_26_p3 ;
  u_int var_arkfb_setcolreg_26_p4 ;
  struct fb_info *var_arkfb_setcolreg_26_p5 ;
  int var_arkfb_blank_27_p0 ;
  struct fb_fillrect  const  *var_arkfb_fillrect_7_p1 ;
  struct fb_image  const  *var_arkfb_imageblit_6_p1 ;
  struct pci_dev *var_group5 ;
  struct pci_device_id  const  *var_ark_pci_probe_29_p1 ;
  struct pci_dev *var_group6 ;
  pm_message_t var_ark_pci_suspend_31_p1 ;
  int tmp ;
  int ldv_s_arkfb_pci_driver_pci_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1692
  LDV_IN_INTERRUPT = 1;
#line 1701
  ldv_initialize();
#line 1724
  ldv_handler_precall();
#line 1725
  tmp = arkfb_init();
#line 1725
  if (tmp) {
#line 1726
    goto ldv_final;
  } else {

  }
#line 1733
  ldv_s_arkfb_pci_driver_pci_driver = 0;
#line 1737
  while (1) {
#line 1737
    tmp___1 = nondet_int();
#line 1737
    if (tmp___1 || ! (ldv_s_arkfb_pci_driver_pci_driver == 0)) {

    } else {
#line 1737
      break;
    }
#line 1741
    tmp___0 = nondet_int();
#line 1741
    switch (tmp___0) {
    case 0: 
#line 1758
    ldv_handler_precall();
#line 1759
    arkfb_settile(var_group1, var_group2);
#line 1780
    break;
    case 1: 
#line 1797
    ldv_handler_precall();
#line 1798
    ics5342_set_mode(var_group3, var_ics5342_set_mode_15_p1);
#line 1818
    break;
    case 2: 
#line 1835
    ldv_handler_precall();
#line 1836
    ics5342_set_freq(var_group3, var_ics5342_set_freq_16_p1, var_ics5342_set_freq_16_p2);
#line 1856
    break;
    case 3: 
#line 1873
    ldv_handler_precall();
#line 1874
    ics5342_release(var_group3);
#line 1894
    break;
    case 4: 
#line 1911
    ldv_handler_precall();
#line 1912
    arkfb_open(var_group1, var_arkfb_open_22_p1);
#line 1932
    break;
    case 5: 
#line 1949
    ldv_handler_precall();
#line 1950
    arkfb_release(var_group1, var_arkfb_release_23_p1);
#line 1970
    break;
    case 6: 
#line 1987
    ldv_handler_precall();
#line 1988
    arkfb_check_var(var_group4, var_group1);
#line 2008
    break;
    case 7: 
#line 2025
    ldv_handler_precall();
#line 2026
    arkfb_set_par(var_group1);
#line 2046
    break;
    case 8: 
#line 2063
    ldv_handler_precall();
#line 2064
    arkfb_setcolreg(var_arkfb_setcolreg_26_p0, var_arkfb_setcolreg_26_p1, var_arkfb_setcolreg_26_p2,
                    var_arkfb_setcolreg_26_p3, var_arkfb_setcolreg_26_p4, var_arkfb_setcolreg_26_p5);
#line 2084
    break;
    case 9: 
#line 2101
    ldv_handler_precall();
#line 2102
    arkfb_blank(var_arkfb_blank_27_p0, var_group1);
#line 2122
    break;
    case 10: 
#line 2139
    ldv_handler_precall();
#line 2140
    arkfb_pan_display(var_group4, var_group1);
#line 2160
    break;
    case 11: 
#line 2176
    ldv_handler_precall();
#line 2177
    arkfb_fillrect(var_group1, var_arkfb_fillrect_7_p1);
#line 2198
    break;
    case 12: 
#line 2214
    ldv_handler_precall();
#line 2215
    arkfb_imageblit(var_group1, var_arkfb_imageblit_6_p1);
#line 2236
    break;
    case 13: 
#line 2240
    if (ldv_s_arkfb_pci_driver_pci_driver == 0) {
#line 2253
      res_ark_pci_probe_29 = ark_pci_probe(var_group5, var_ark_pci_probe_29_p1);
#line 2254
      ldv_check_return_value(res_ark_pci_probe_29);
#line 2255
      ldv_check_return_value_probe(res_ark_pci_probe_29);
#line 2256
      if (res_ark_pci_probe_29) {
#line 2257
        goto ldv_module_exit;
      } else {

      }
#line 2269
      ldv_s_arkfb_pci_driver_pci_driver = ldv_s_arkfb_pci_driver_pci_driver + 1;
    } else {

    }
#line 2275
    break;
    case 14: 
#line 2279
    if (ldv_s_arkfb_pci_driver_pci_driver == 1) {
#line 2294
      ldv_handler_precall();
#line 2295
      ark_pci_remove(var_group5);
#line 2305
      ldv_s_arkfb_pci_driver_pci_driver = 0;
    } else {

    }
#line 2311
    break;
    case 15: 
#line 2333
    ldv_handler_precall();
#line 2334
    ark_pci_suspend(var_group6, var_ark_pci_suspend_31_p1);
#line 2349
    break;
    case 16: 
#line 2371
    ldv_handler_precall();
#line 2372
    ark_pci_resume(var_group6);
#line 2387
    break;
    default: 
#line 2388
    break;
    }
  }
  ldv_module_exit: 
#line 2417
  ldv_handler_precall();
#line 2418
  arkfb_cleanup();
  ldv_final: 
#line 2425
  ldv_check_final_state();
#line 2428
  return;
}
}
#line 137 "include/linux/mutex.h"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) ;
#line 138
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) ;
#line 151
int mutex_trylock(struct mutex *lock ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 15 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ldv_mutex  =    1;
#line 18 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_interruptible)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 25
  if (ldv_mutex == 1) {

  } else {
#line 25
    ldv_error();
  }
#line 28
  nondetermined = ldv_undef_int();
#line 31
  if (nondetermined) {
#line 34
    ldv_mutex = 2;
#line 36
    return (0);
  } else {
#line 41
    return (-4);
  }
}
}
#line 46 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int ( __attribute__((__warn_unused_result__)) mutex_lock_killable)(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 53
  if (ldv_mutex == 1) {

  } else {
#line 53
    ldv_error();
  }
#line 56
  nondetermined = ldv_undef_int();
#line 59
  if (nondetermined) {
#line 62
    ldv_mutex = 2;
#line 64
    return (0);
  } else {
#line 69
    return (-4);
  }
}
}
#line 74 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int atomic_dec_and_mutex_lock(atomic_t *cnt , struct mutex *lock ) 
{ 
  int atomic_value_after_dec ;

  {
#line 79
  if (ldv_mutex == 1) {

  } else {
#line 79
    ldv_error();
  }
#line 82
  atomic_value_after_dec = ldv_undef_int();
#line 85
  if (atomic_value_after_dec == 0) {
#line 88
    ldv_mutex = 2;
#line 90
    return (1);
  } else {

  }
#line 94
  return (0);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_lock(struct mutex *lock ) 
{ 


  {
#line 104
  if (ldv_mutex == 1) {

  } else {
#line 104
    ldv_error();
  }
#line 106
  ldv_mutex = 2;
#line 107
  return;
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
int mutex_trylock(struct mutex *lock ) 
{ 
  int nondetermined ;

  {
#line 117
  if (ldv_mutex == 1) {

  } else {
#line 117
    ldv_error();
  }
#line 120
  nondetermined = ldv_undef_int();
#line 123
  if (nondetermined) {
#line 126
    ldv_mutex = 2;
#line 128
    return (1);
  } else {
#line 133
    return (0);
  }
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void mutex_unlock(struct mutex *lock ) 
{ 


  {
#line 143
  if (ldv_mutex == 2) {

  } else {
#line 143
    ldv_error();
  }
#line 145
  ldv_mutex = 1;
#line 146
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--32_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/32_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 152
  if (ldv_mutex == 1) {

  } else {
#line 152
    ldv_error();
  }
#line 153
  return;
}
}
