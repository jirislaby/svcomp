/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/uapi/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 16 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 18 "include/asm-generic/int-ll64.h"
typedef short s16;
#line 19 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 21 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 22 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 24 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 25 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 49 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 87 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;
#line 89 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 90 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 12 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 15 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 18 "include/linux/types.h"
typedef unsigned short umode_t;
#line 21 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 26 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29 "include/linux/types.h"
typedef _Bool bool;
#line 31 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 32 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 45 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 54 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 59 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 69 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 85 "include/linux/types.h"
typedef unsigned int u_int;
#line 102 "include/linux/types.h"
typedef __s32 int32_t;
#line 108 "include/linux/types.h"
typedef __u32 uint32_t;
#line 133 "include/linux/types.h"
typedef unsigned long sector_t;
#line 134 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 146 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 157 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 158 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 159 "include/linux/types.h"
typedef unsigned int oom_flags_t;
#line 162 "include/linux/types.h"
typedef u64 phys_addr_t;
#line 167 "include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 177 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 177 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 182 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 182 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 183 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 188
struct hlist_node;
#line 188 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 192 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 203 "include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 153 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 310 "include/linux/printk.h"
struct file_operations;
#line 325 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 48 "include/linux/dynamic_debug.h"
struct device;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/sysinfo.h"
struct completion;
#line 24
struct pt_regs;
#line 386 "include/linux/kernel.h"
struct pid;
#line 735 "include/linux/kernel.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 97 "include/linux/bug.h"
struct timespec;
#line 58 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 28
struct mm_struct;
#line 270 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2024_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2039_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2040_12 {
   struct __anonstruct_ldv_2024_13 ldv_2024 ;
   struct __anonstruct_ldv_2039_14 ldv_2039 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2040_12 ldv_2040 ;
};
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct gate_struct64 {
   u16 offset_low ;
   u16 segment ;
   unsigned char ist : 3 ;
   unsigned char zero0 : 5 ;
   unsigned char type : 5 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 zero1 ;
};
#line 81 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct64 gate_desc;
#line 84 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 302 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 310
struct file;
#line 325
struct seq_file;
#line 355
struct thread_struct;
#line 356
struct tss_struct;
#line 357
struct cpumask;
#line 101 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   unsigned long (*get_debugreg)(int  ) ;
   void (*set_debugreg)(int  , unsigned long  ) ;
   void (*clts)(void) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long  ) ;
   unsigned long (*read_cr4_safe)(void) ;
   unsigned long (*read_cr4)(void) ;
   void (*write_cr4)(unsigned long  ) ;
   unsigned long (*read_cr8)(void) ;
   void (*write_cr8)(unsigned long  ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr  const  * ) ;
   void (*load_idt)(struct desc_ptr  const  * ) ;
   void (*store_gdt)(struct desc_ptr * ) ;
   void (*store_idt)(struct desc_ptr * ) ;
   void (*set_ldt)(void const   * , unsigned int  ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct * , unsigned int  ) ;
   void (*load_gs_index)(unsigned int  ) ;
   void (*write_ldt_entry)(struct desc_struct * , int  , void const   * ) ;
   void (*write_gdt_entry)(struct desc_struct * , int  , void const   * , int  ) ;
   void (*write_idt_entry)(gate_desc * , int  , gate_desc const   * ) ;
   void (*alloc_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*free_ldt)(struct desc_struct * , unsigned int  ) ;
   void (*load_sp0)(struct tss_struct * , struct thread_struct * ) ;
   void (*set_iopl_mask)(unsigned int  ) ;
   void (*wbinvd)(void) ;
   void (*io_delay)(void) ;
   void (*cpuid)(unsigned int * , unsigned int * , unsigned int * , unsigned int * ) ;
   u64 (*read_msr)(unsigned int  , int * ) ;
   int (*write_msr)(unsigned int  , unsigned int  , unsigned int  ) ;
   u64 (*read_tsc)(void) ;
   u64 (*read_pmc)(int  ) ;
   unsigned long long (*read_tscp)(unsigned int * ) ;
   void (*irq_enable_sysexit)(void) ;
   void (*usergs_sysret64)(void) ;
   void (*usergs_sysret32)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct * ) ;
   void (*end_context_switch)(struct task_struct * ) ;
};
#line 326
struct arch_spinlock;
#line 127 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 79 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2695_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 79 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2695_19 ldv_2695 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 14 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 648 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 210 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct x86_hw_tss {
   u32 reserved1 ;
   u64 sp0 ;
   u64 sp1 ;
   u64 sp2 ;
   u64 reserved2 ;
   u64 ist[7U] ;
   u32 reserved3 ;
   u32 reserved4 ;
   u16 reserved5 ;
   u16 io_bitmap_base ;
};
#line 257 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct tss_struct {
   struct x86_hw_tss x86_tss ;
   unsigned long io_bitmap[1025U] ;
   unsigned long stack[64U] ;
};
#line 298 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5002_24 {
   u64 rip ;
   u64 rdp ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5008_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5009_23 {
   struct __anonstruct_ldv_5002_24 ldv_5002 ;
   struct __anonstruct_ldv_5008_25 ldv_5008 ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5018_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 316 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5009_23 ldv_5009 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5018_26 ldv_5018 ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 371 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 382 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 396 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 443
struct kmem_cache;
#line 444
struct perf_event;
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5869_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5869_29 ldv_5869 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5876_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5876_31 ldv_5876 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 205 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 574 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6092_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6093_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6092_33 ldv_6092 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6093_32 ldv_6093 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 254 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 83 "include/linux/highuid.h"
struct user_namespace;
#line 46 "include/linux/uidgid.h"
typedef uid_t kuid_t;
#line 47 "include/linux/uidgid.h"
typedef gid_t kgid_t;
#line 197 "include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 32 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 37 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 752 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 128 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 214 "include/linux/rcupdate.h"
struct notifier_block;
#line 314 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 353
struct tvec_base;
#line 354 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 254 "include/linux/timer.h"
struct hrtimer;
#line 255
enum hrtimer_restart;
#line 267
struct work_struct;
#line 50 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 96 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   int cpu ;
};
#line 303 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const   *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   bool early_init ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   bool syscore ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   struct dev_pm_qos *qos ;
};
#line 557 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 398 "include/linux/gfp.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 40 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 835 "include/uapi/linux/sysctl.h"
struct nsproxy;
#line 37 "include/linux/kmod.h"
struct cred;
#line 15 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 16 "include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 20 "include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 21 "include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 190 "include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 198 "include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 44 "include/linux/elf.h"
struct sock;
#line 45
struct kobject;
#line 46
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 52 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   bool ignore_lockdep ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 34 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 63 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 110 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 129
struct sysfs_dirent;
#line 194 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 214
struct kernel_param;
#line 215 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 47 "include/linux/moduleparam.h"
struct kparam_string;
#line 47
struct kparam_array;
#line 47 "include/linux/moduleparam.h"
union __anonunion_ldv_13934_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 47 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   s16 level ;
   union __anonunion_ldv_13934_134 ldv_13934 ;
};
#line 59 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 65 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 457 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 210 "include/linux/jump_label.h"
struct tracepoint;
#line 211 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 37 "include/linux/module.h"
struct module_param_attrs;
#line 37 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 72
struct exception_table_entry;
#line 201
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 207 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 222
struct module_sect_attrs;
#line 222
struct module_notes_attrs;
#line 222
struct ftrace_event_call;
#line 222 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 653
struct inode;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 48 "include/linux/uprobes.h"
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
} ;
#line 55
struct uprobe;
#line 55 "include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   struct arch_uprobe_task autask ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   unsigned long vaddr ;
};
#line 69 "include/linux/uprobes.h"
struct xol_area {
   wait_queue_head_t wq ;
   atomic_t slot_count ;
   unsigned long *bitmap ;
   struct page *page ;
   unsigned long vaddr ;
};
#line 88 "include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 112
struct address_space;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14531_136 {
   unsigned long index ;
   void *freelist ;
   bool pfmemalloc ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14541_140 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14543_139 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_14541_140 ldv_14541 ;
   int units ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14545_138 {
   union __anonunion_ldv_14543_139 ldv_14543 ;
   atomic_t _count ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14546_137 {
   unsigned long counters ;
   struct __anonstruct_ldv_14545_138 ldv_14545 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14547_135 {
   union __anonunion_ldv_14531_136 ldv_14531 ;
   union __anonunion_ldv_14546_137 ldv_14546 ;
};
#line 113 "include/linux/uprobes.h"
struct __anonstruct_ldv_14554_142 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 113
struct slab;
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14558_141 {
   struct list_head lru ;
   struct __anonstruct_ldv_14554_142 ldv_14554 ;
   struct list_head list ;
   struct slab *slab_page ;
};
#line 113 "include/linux/uprobes.h"
union __anonunion_ldv_14563_143 {
   unsigned long private ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};
#line 113 "include/linux/uprobes.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_14547_135 ldv_14547 ;
   union __anonunion_ldv_14558_141 ldv_14558 ;
   union __anonunion_ldv_14563_143 ldv_14563 ;
   unsigned long debug_flags ;
   int _last_nid ;
};
#line 179 "include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 219 "include/linux/mm_types.h"
struct __anonstruct_linear_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 219 "include/linux/mm_types.h"
union __anonunion_shared_144 {
   struct __anonstruct_linear_145 linear ;
   struct list_head nonlinear ;
};
#line 219
struct anon_vma;
#line 219
struct vm_operations_struct;
#line 219
struct mempolicy;
#line 219 "include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   union __anonunion_shared_144 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 291 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 297 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 310 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 323
struct linux_binfmt;
#line 323
struct mmu_notifier_mm;
#line 323 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_next_reset ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   int first_nid ;
   struct uprobes_state uprobes_state ;
};
#line 93 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 181 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
   int (*remap_pages)(struct vm_area_struct * , unsigned long  , unsigned long  ,
                      unsigned long  ) ;
};
#line 440 "include/linux/rculist.h"
struct hlist_bl_node;
#line 440 "include/linux/rculist.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct __anonstruct_ldv_17455_147 {
   u32 hash ;
   u32 len ;
};
#line 117 "include/linux/rculist_bl.h"
union __anonunion_ldv_17457_146 {
   struct __anonstruct_ldv_17455_147 ldv_17455 ;
   u64 hash_len ;
};
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   union __anonunion_ldv_17457_146 ldv_17457 ;
   unsigned char const   *name ;
};
#line 87 "include/linux/dcache.h"
struct dentry_operations;
#line 87
struct super_block;
#line 87 "include/linux/dcache.h"
union __anonunion_d_u_148 {
   struct list_head d_child ;
   struct callback_head d_rcu ;
};
#line 87 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_148 d_u ;
   struct list_head d_subdirs ;
   struct hlist_node d_alias ;
};
#line 138 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , unsigned int  ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 411 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 58 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 58 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 380
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 387
struct pid_namespace;
#line 387 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 22 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 25 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 30 "include/linux/percpu-rwsem.h"
struct block_device;
#line 31
struct io_context;
#line 56 "include/uapi/linux/fs.h"
struct export_operations;
#line 58
struct iovec;
#line 59
struct kiocb;
#line 60
struct pipe_inode_info;
#line 61
struct poll_table_struct;
#line 62
struct kstatfs;
#line 63
struct swap_info_struct;
#line 65 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 241 "include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 19 "include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 36 "include/linux/projid.h"
typedef projid_t kprojid_t;
#line 119 "include/uapi/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
} ;
#line 60 "include/linux/quota.h"
typedef long long qsize_t;
#line 61 "include/linux/quota.h"
union __anonunion_ldv_18463_150 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 61 "include/linux/quota.h"
struct kqid {
   union __anonunion_ldv_18463_150 ldv_18463 ;
   enum quota_type type ;
};
#line 178 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 200
struct quota_format_type;
#line 201 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 264 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 291 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 302 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 316 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , struct kqid  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 332 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 340 "include/linux/fs.h"
union __anonunion_arg_152 {
   char *buf ;
   void *data ;
};
#line 340 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_151 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_152 arg ;
   int error ;
};
#line 340 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_151 read_descriptor_t;
#line 343 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
   int (*swap_activate)(struct swap_info_struct * , struct file * , sector_t * ) ;
   void (*swap_deactivate)(struct file * ) ;
};
#line 402
struct backing_dev_info;
#line 403 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct rb_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};
#line 424
struct request_queue;
#line 425
struct hd_struct;
#line 425
struct gendisk;
#line 425 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 497
struct posix_acl;
#line 498
struct inode_operations;
#line 498 "include/linux/fs.h"
union __anonunion_ldv_18897_153 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 498 "include/linux/fs.h"
union __anonunion_ldv_18917_154 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 498
struct file_lock;
#line 498
struct cdev;
#line 498 "include/linux/fs.h"
union __anonunion_ldv_18933_155 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 498 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_18897_153 ldv_18897 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_18917_154 ldv_18917 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_18933_155 ldv_18933 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 726 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 734 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 757 "include/linux/fs.h"
union __anonunion_f_u_156 {
   struct list_head fu_list ;
   struct callback_head fu_rcuhead ;
};
#line 757 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_156 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 900
struct files_struct;
#line 900 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 901 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 906 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 923
struct nlm_lockowner;
#line 924 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19
struct fasync_struct;
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_158 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_157 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_158 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_157 fl_u ;
};
#line 1010 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1216 "include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};
#line 1232
struct file_system_type;
#line 1232
struct super_operations;
#line 1232
struct xattr_handler;
#line 1232
struct mtd_info;
#line 1232 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1469 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1508 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
   int (*show_fdinfo)(struct seq_file * , struct file * ) ;
};
#line 1545 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , unsigned int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , bool  ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
   int (*update_time)(struct inode * , struct timespec * , int  ) ;
   int (*atomic_open)(struct inode * , struct dentry * , struct file * , unsigned int  ,
                      umode_t  , int * ) ;
};
#line 1588 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1801 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 72 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smap.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};
#line 6 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned char cc_t;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int speed_t;
#line 8 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
typedef unsigned int tcflag_t;
#line 30 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct ktermios {
   tcflag_t c_iflag ;
   tcflag_t c_oflag ;
   tcflag_t c_cflag ;
   tcflag_t c_lflag ;
   cc_t c_line ;
   cc_t c_cc[19U] ;
   speed_t c_ispeed ;
   speed_t c_ospeed ;
};
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/termbits.h"
struct winsize {
   unsigned short ws_row ;
   unsigned short ws_col ;
   unsigned short ws_xpixel ;
   unsigned short ws_ypixel ;
};
#line 93 "include/asm-generic/termios.h"
struct termiox {
   __u16 x_hflag ;
   __u16 x_cflag ;
   __u16 x_rflag[5U] ;
   __u16 x_sflag ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/termios.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations  const  *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};
#line 34 "include/linux/cdev.h"
struct tty_struct;
#line 35
struct tty_driver;
#line 36
struct serial_icounter_struct;
#line 37 "include/linux/cdev.h"
struct tty_operations {
   struct tty_struct *(*lookup)(struct tty_driver * , struct inode * , int  ) ;
   int (*install)(struct tty_driver * , struct tty_struct * ) ;
   void (*remove)(struct tty_driver * , struct tty_struct * ) ;
   int (*open)(struct tty_struct * , struct file * ) ;
   void (*close)(struct tty_struct * , struct file * ) ;
   void (*shutdown)(struct tty_struct * ) ;
   void (*cleanup)(struct tty_struct * ) ;
   int (*write)(struct tty_struct * , unsigned char const   * , int  ) ;
   int (*put_char)(struct tty_struct * , unsigned char  ) ;
   void (*flush_chars)(struct tty_struct * ) ;
   int (*write_room)(struct tty_struct * ) ;
   int (*chars_in_buffer)(struct tty_struct * ) ;
   int (*ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   void (*throttle)(struct tty_struct * ) ;
   void (*unthrottle)(struct tty_struct * ) ;
   void (*stop)(struct tty_struct * ) ;
   void (*start)(struct tty_struct * ) ;
   void (*hangup)(struct tty_struct * ) ;
   int (*break_ctl)(struct tty_struct * , int  ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   void (*set_ldisc)(struct tty_struct * ) ;
   void (*wait_until_sent)(struct tty_struct * , int  ) ;
   void (*send_xchar)(struct tty_struct * , char  ) ;
   int (*tiocmget)(struct tty_struct * ) ;
   int (*tiocmset)(struct tty_struct * , unsigned int  , unsigned int  ) ;
   int (*resize)(struct tty_struct * , struct winsize * ) ;
   int (*set_termiox)(struct tty_struct * , struct termiox * ) ;
   int (*get_icount)(struct tty_struct * , struct serial_icounter_struct * ) ;
   int (*poll_init)(struct tty_driver * , int  , char * ) ;
   int (*poll_get_char)(struct tty_driver * , int  ) ;
   void (*poll_put_char)(struct tty_driver * , int  , char  ) ;
   struct file_operations  const  *proc_fops ;
};
#line 288 "include/linux/tty_driver.h"
struct proc_dir_entry;
#line 288
struct tty_port;
#line 288 "include/linux/tty_driver.h"
struct tty_driver {
   int magic ;
   struct kref kref ;
   struct cdev *cdevs ;
   struct module *owner ;
   char const   *driver_name ;
   char const   *name ;
   int name_base ;
   int major ;
   int minor_start ;
   unsigned int num ;
   short type ;
   short subtype ;
   struct ktermios init_termios ;
   unsigned long flags ;
   struct proc_dir_entry *proc_entry ;
   struct tty_driver *other ;
   struct tty_struct **ttys ;
   struct tty_port **ports ;
   struct ktermios **termios ;
   void *driver_state ;
   struct tty_operations  const  *ops ;
   struct list_head tty_drivers ;
};
#line 122 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/pps.h"
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 42 "include/linux/ratelimit.h"
struct dma_map_ops;
#line 42 "include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 15
struct device_driver;
#line 16
struct driver_private;
#line 17
struct class;
#line 18
struct subsys_private;
#line 19
struct bus_type;
#line 20
struct device_node;
#line 21
struct iommu_ops;
#line 22
struct iommu_group;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 53 "include/linux/device.h"
struct device_attribute;
#line 53
struct driver_attribute;
#line 53 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 127
struct device_type;
#line 184
struct of_device_id;
#line 184
struct acpi_device_id;
#line 184 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   struct acpi_device_id  const  *acpi_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 249 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 303
struct class_attribute;
#line 303 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 398 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 451 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 478 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 577 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 587 "include/linux/device.h"
struct acpi_dev_node {
   void *handle ;
};
#line 592
struct dma_coherent_mem;
#line 592 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct acpi_dev_node acpi_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
   struct iommu_group *iommu_group ;
};
#line 720 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool active ;
   bool autosleep_enabled ;
};
#line 48 "include/linux/pps_kernel.h"
struct pps_event_time {
   struct timespec ts_real ;
};
#line 124 "include/linux/pps_kernel.h"
struct tty_ldisc_ops {
   int magic ;
   char *name ;
   int num ;
   int flags ;
   int (*open)(struct tty_struct * ) ;
   void (*close)(struct tty_struct * ) ;
   void (*flush_buffer)(struct tty_struct * ) ;
   ssize_t (*chars_in_buffer)(struct tty_struct * ) ;
   ssize_t (*read)(struct tty_struct * , struct file * , unsigned char * , size_t  ) ;
   ssize_t (*write)(struct tty_struct * , struct file * , unsigned char const   * ,
                    size_t  ) ;
   int (*ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct tty_struct * , struct file * , unsigned int  , unsigned long  ) ;
   void (*set_termios)(struct tty_struct * , struct ktermios * ) ;
   unsigned int (*poll)(struct tty_struct * , struct file * , struct poll_table_struct * ) ;
   int (*hangup)(struct tty_struct * ) ;
   void (*receive_buf)(struct tty_struct * , unsigned char const   * , char * , int  ) ;
   void (*write_wakeup)(struct tty_struct * ) ;
   void (*dcd_change)(struct tty_struct * , unsigned int  , struct pps_event_time * ) ;
   struct module *owner ;
   int refcount ;
};
#line 154 "include/linux/tty_ldisc.h"
struct tty_ldisc {
   struct tty_ldisc_ops *ops ;
   atomic_t users ;
   wait_queue_head_t wq_idle ;
};
#line 160 "include/linux/tty_ldisc.h"
struct tty_buffer {
   struct tty_buffer *next ;
   char *char_buf_ptr ;
   unsigned char *flag_buf_ptr ;
   int used ;
   int size ;
   int commit ;
   int read ;
   unsigned long data[0U] ;
};
#line 42 "include/linux/tty.h"
struct tty_bufhead {
   struct work_struct work ;
   spinlock_t lock ;
   struct tty_buffer *head ;
   struct tty_buffer *tail ;
   struct tty_buffer *free ;
   int memory_used ;
};
#line 62
struct signal_struct;
#line 63 "include/linux/tty.h"
struct tty_port_operations {
   int (*carrier_raised)(struct tty_port * ) ;
   void (*dtr_rts)(struct tty_port * , int  ) ;
   void (*shutdown)(struct tty_port * ) ;
   void (*drop)(struct tty_port * ) ;
   int (*activate)(struct tty_port * , struct tty_struct * ) ;
   void (*destruct)(struct tty_port * ) ;
};
#line 189 "include/linux/tty.h"
struct tty_port {
   struct tty_bufhead buf ;
   struct tty_struct *tty ;
   struct tty_struct *itty ;
   struct tty_port_operations  const  *ops ;
   spinlock_t lock ;
   int blocked_open ;
   int count ;
   wait_queue_head_t open_wait ;
   wait_queue_head_t close_wait ;
   wait_queue_head_t delta_msr_wait ;
   unsigned long flags ;
   unsigned long iflags ;
   unsigned char console : 1 ;
   struct mutex mutex ;
   struct mutex buf_mutex ;
   unsigned char *xmit_buf ;
   unsigned int close_delay ;
   unsigned int closing_wait ;
   int drain_delay ;
   struct kref kref ;
};
#line 216 "include/linux/tty.h"
struct tty_struct {
   int magic ;
   struct kref kref ;
   struct device *dev ;
   struct tty_driver *driver ;
   struct tty_operations  const  *ops ;
   int index ;
   struct mutex ldisc_mutex ;
   struct tty_ldisc *ldisc ;
   struct mutex atomic_write_lock ;
   struct mutex legacy_mutex ;
   struct mutex termios_mutex ;
   spinlock_t ctrl_lock ;
   struct ktermios termios ;
   struct ktermios termios_locked ;
   struct termiox *termiox ;
   char name[64U] ;
   struct pid *pgrp ;
   struct pid *session ;
   unsigned long flags ;
   int count ;
   struct winsize winsize ;
   unsigned char stopped : 1 ;
   unsigned char hw_stopped : 1 ;
   unsigned char flow_stopped : 1 ;
   unsigned char packet : 1 ;
   unsigned char low_latency : 1 ;
   unsigned char warned : 1 ;
   unsigned char ctrl_status ;
   unsigned int receive_room ;
   struct tty_struct *link ;
   struct fasync_struct *fasync ;
   int alt_speed ;
   wait_queue_head_t write_wait ;
   wait_queue_head_t read_wait ;
   struct work_struct hangup_work ;
   void *disc_data ;
   void *driver_data ;
   struct list_head tty_files ;
   unsigned char closing : 1 ;
   unsigned short minimum_to_wake ;
   unsigned char *write_buf ;
   int write_cnt ;
   struct work_struct SAK_work ;
   struct tty_port *port ;
};
#line 597
struct mem_cgroup;
#line 137 "include/linux/slab.h"
struct __anonstruct_ldv_22853_160 {
   struct mem_cgroup *memcg ;
   struct list_head list ;
   struct kmem_cache *root_cache ;
   bool dead ;
   atomic_t nr_pages ;
   struct work_struct destroy ;
};
#line 137 "include/linux/slab.h"
union __anonunion_ldv_22854_159 {
   struct kmem_cache *memcg_caches[0U] ;
   struct __anonstruct_ldv_22853_160 ldv_22853 ;
};
#line 137 "include/linux/slab.h"
struct memcg_cache_params {
   bool is_root_cache ;
   union __anonunion_ldv_22854_159 ldv_22854 ;
};
#line 88 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   unsigned int stat[26U] ;
};
#line 54 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 65 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 75 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int object_size ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   struct memcg_cache_params *memcg_params ;
   int max_attr_size ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 180 "include/linux/hardirq.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int active_bases ;
   unsigned int clock_was_set ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo_list;
#line 23 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_162 {
   unsigned long sig[1U] ;
};
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_162 sigset_t;
#line 25
struct siginfo;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/asm-generic/signal-defs.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 124 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/uapi/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_164 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_165 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_167 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_168 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_169 {
   long _band ;
   int _fd ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_170 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_163 {
   int _pad[28U] ;
   struct __anonstruct__kill_164 _kill ;
   struct __anonstruct__timer_165 _timer ;
   struct __anonstruct__rt_166 _rt ;
   struct __anonstruct__sigchld_167 _sigchld ;
   struct __anonstruct__sigfault_168 _sigfault ;
   struct __anonstruct__sigpoll_169 _sigpoll ;
   struct __anonstruct__sigsys_170 _sigsys ;
};
#line 11 "include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_163 _sifields ;
};
#line 109 "include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 21 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 46 "include/uapi/linux/seccomp.h"
struct seccomp_filter;
#line 47 "include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 80 "include/linux/seccomp.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/seccomp.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/uapi/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 11 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 30 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 33 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 34
struct key;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 116 "include/linux/key.h"
union __anonunion_ldv_25349_173 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 116
struct key_user;
#line 116 "include/linux/key.h"
union __anonunion_ldv_25358_174 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 116 "include/linux/key.h"
union __anonunion_type_data_175 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 116 "include/linux/key.h"
union __anonunion_payload_176 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 116 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_ldv_25349_173 ldv_25349 ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_25358_174 ldv_25358 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_175 type_data ;
   union __anonunion_payload_176 payload ;
};
#line 323
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};
#line 78 "include/linux/cred.h"
struct thread_group_cred;
#line 78 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};
#line 345
struct llist_node;
#line 64 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 185
struct futex_pi_state;
#line 186
struct robust_list_head;
#line 187
struct bio_list;
#line 188
struct fs_struct;
#line 189
struct perf_event_context;
#line 190
struct blk_plug;
#line 121 "include/linux/sched.h"
struct cfs_rq;
#line 122
struct task_group;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/include/uapi/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 38 "include/linux/uio.h"
struct kioctx;
#line 39 "include/linux/uio.h"
union __anonunion_ki_obj_177 {
   void *user ;
   struct task_struct *tsk ;
};
#line 39
struct eventfd_ctx;
#line 39 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_177 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 181 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct callback_head callback_head ;
};
#line 378 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 430 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 438 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 445 "include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};
#line 457 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 477 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 513
struct autogroup;
#line 514
struct taskstats;
#line 514
struct tty_audit_buf;
#line 514 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 690 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};
#line 734
struct reclaim_state;
#line 735 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 750 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1051
struct rq;
#line 1052 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*migrate_task_rq)(struct task_struct * , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1119 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1124 "include/linux/sched.h"
struct sched_avg {
   u32 runnable_avg_sum ;
   u32 runnable_avg_period ;
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
};
#line 1136 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1171 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 1206
struct rt_rq;
#line 1206 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1229 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1600
struct css_set;
#line 1600
struct compat_robust_list_head;
#line 1600 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char no_new_privs : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   int numa_migrate_seq ;
   unsigned int numa_scan_period ;
   u64 node_stamp ;
   struct callback_head numa_work ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   unsigned int memcg_kmem_skip_account ;
   atomic_t ptrace_bp_refcnt ;
   struct uprobe_task *utask ;
};
#line 91 "include/uapi/linux/serial.h"
struct serial_icounter_struct {
   int cts ;
   int dsr ;
   int rng ;
   int dcd ;
   int rx ;
   int tx ;
   int frame ;
   int overrun ;
   int parity ;
   int brk ;
   int buf_overrun ;
   int reserved[9U] ;
};
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 13 "include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 191 "include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[16U] ;
   kernel_ulong_t driver_data ;
};
#line 225 "include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const   *data ;
};
#line 30 "include/linux/of.h"
typedef u32 phandle;
#line 32 "include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
};
#line 41 "include/linux/of.h"
struct device_node {
   char const   *name ;
   char const   *type ;
   phandle phandle ;
   char const   *full_name ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct device_node *next ;
   struct device_node *allnext ;
   struct proc_dir_entry *pde ;
   struct kref kref ;
   unsigned long _flags ;
   void *data ;
};
#line 509 "include/linux/i2c.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 176 "include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 192 "include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 279 "include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 335 "include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 348 "include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 357 "include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char const   *data ;
   struct fb_cmap cmap ;
};
#line 369 "include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 385 "include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char const   *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 399
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
} ;
#line 406
struct backlight_device;
#line 407
struct fb_info;
#line 408 "include/uapi/linux/fb.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device * ) ;
   int (*get_brightness)(struct backlight_device * ) ;
   int (*check_fb)(struct backlight_device * , struct fb_info * ) ;
};
#line 59 "include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
};
#line 78 "include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops  const  *ops ;
   struct notifier_block fb_notif ;
   struct device dev ;
};
#line 145 "include/linux/backlight.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 58 "include/linux/fb.h"
struct fb_videomode;
#line 58 "include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   unsigned char gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 167 "include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 178 "include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info * , void * , void * , unsigned int  ) ;
   void (*readio)(struct fb_info * , void * , void * , unsigned int  ) ;
};
#line 207 "include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info * ) ;
   void (*deferred_io)(struct fb_info * , struct list_head * ) ;
};
#line 218 "include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info * , int  ) ;
   int (*fb_release)(struct fb_info * , int  ) ;
   ssize_t (*fb_read)(struct fb_info * , char * , size_t  , loff_t * ) ;
   ssize_t (*fb_write)(struct fb_info * , char const   * , size_t  , loff_t * ) ;
   int (*fb_check_var)(struct fb_var_screeninfo * , struct fb_info * ) ;
   int (*fb_set_par)(struct fb_info * ) ;
   int (*fb_setcolreg)(unsigned int  , unsigned int  , unsigned int  , unsigned int  ,
                       unsigned int  , struct fb_info * ) ;
   int (*fb_setcmap)(struct fb_cmap * , struct fb_info * ) ;
   int (*fb_blank)(int  , struct fb_info * ) ;
   int (*fb_pan_display)(struct fb_var_screeninfo * , struct fb_info * ) ;
   void (*fb_fillrect)(struct fb_info * , struct fb_fillrect  const  * ) ;
   void (*fb_copyarea)(struct fb_info * , struct fb_copyarea  const  * ) ;
   void (*fb_imageblit)(struct fb_info * , struct fb_image  const  * ) ;
   int (*fb_cursor)(struct fb_info * , struct fb_cursor * ) ;
   void (*fb_rotate)(struct fb_info * , int  ) ;
   int (*fb_sync)(struct fb_info * ) ;
   int (*fb_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_compat_ioctl)(struct fb_info * , unsigned int  , unsigned long  ) ;
   int (*fb_mmap)(struct fb_info * , struct vm_area_struct * ) ;
   void (*fb_get_caps)(struct fb_info * , struct fb_blit_caps * , struct fb_var_screeninfo * ) ;
   void (*fb_destroy)(struct fb_info * ) ;
   int (*fb_debug_enter)(struct fb_info * ) ;
   int (*fb_debug_leave)(struct fb_info * ) ;
};
#line 306 "include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 const   *data ;
};
#line 322 "include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 334 "include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 343 "include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 354 "include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 363 "include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info * , struct fb_tilemap * ) ;
   void (*fb_tilecopy)(struct fb_info * , struct fb_tilearea * ) ;
   void (*fb_tilefill)(struct fb_info * , struct fb_tilerect * ) ;
   void (*fb_tileblit)(struct fb_info * , struct fb_tileblit * ) ;
   void (*fb_tilecursor)(struct fb_info * , struct fb_tilecursor * ) ;
   int (*fb_get_tilemax)(struct fb_info * ) ;
};
#line 382 "include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 501 "include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 502 "include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   char *screen_base ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
};
#line 751 "include/linux/fb.h"
struct fb_videomode {
   char const   *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 69 "include/linux/io.h"
struct hotplug_slot;
#line 69 "include/linux/io.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 95 "include/linux/pci.h"
typedef int pci_power_t;
#line 122 "include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 123
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
} ;
#line 148 "include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 165 "include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 208
struct pcie_link_state;
#line 209
struct pci_vpd;
#line 210
struct pci_sriov;
#line 211
struct pci_ats;
#line 212
struct pci_driver;
#line 212 "include/linux/pci.h"
union __anonunion_ldv_29555_180 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 212 "include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   unsigned char pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   int pm_cap ;
   unsigned char pme_support : 5 ;
   unsigned char pme_interrupt : 1 ;
   unsigned char pme_poll : 1 ;
   unsigned char d1_support : 1 ;
   unsigned char d2_support : 1 ;
   unsigned char no_d1d2 : 1 ;
   unsigned char no_d3cold : 1 ;
   unsigned char d3cold_allowed : 1 ;
   unsigned char mmio_always_on : 1 ;
   unsigned char wakeup_prepared : 1 ;
   unsigned char runtime_d3cold : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   unsigned char transparent : 1 ;
   unsigned char multifunction : 1 ;
   unsigned char is_added : 1 ;
   unsigned char is_busmaster : 1 ;
   unsigned char no_msi : 1 ;
   unsigned char block_cfg_access : 1 ;
   unsigned char broken_parity_status : 1 ;
   unsigned char irq_reroute_variant : 2 ;
   unsigned char msi_enabled : 1 ;
   unsigned char msix_enabled : 1 ;
   unsigned char ari_enabled : 1 ;
   unsigned char is_managed : 1 ;
   unsigned char is_pcie : 1 ;
   unsigned char needs_freset : 1 ;
   unsigned char state_saved : 1 ;
   unsigned char is_physfn : 1 ;
   unsigned char is_virtfn : 1 ;
   unsigned char reset_fn : 1 ;
   unsigned char is_hotplug_bridge : 1 ;
   unsigned char __aer_firmware_first_valid : 1 ;
   unsigned char __aer_firmware_first : 1 ;
   unsigned char broken_intx_masking : 1 ;
   unsigned char io_window_1k : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct kset *msi_kset ;
   struct pci_vpd *vpd ;
   union __anonunion_ldv_29555_180 ldv_29555 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
};
#line 401
struct pci_ops;
#line 401 "include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned char is_added : 1 ;
};
#line 492 "include/linux/pci.h"
struct pci_ops {
   int (*read)(struct pci_bus * , unsigned int  , int  , int  , u32 * ) ;
   int (*write)(struct pci_bus * , unsigned int  , int  , int  , u32  ) ;
};
#line 507 "include/linux/pci.h"
struct pci_bus_region {
   resource_size_t start ;
   resource_size_t end ;
};
#line 513 "include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 526 "include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 536 "include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev * , enum pci_channel_state  ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev * ) ;
   pci_ers_result_t (*link_reset)(struct pci_dev * ) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev * ) ;
   void (*resume)(struct pci_dev * ) ;
};
#line 566 "include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const   *name ;
   struct pci_device_id  const  *id_table ;
   int (*probe)(struct pci_dev * , struct pci_device_id  const  * ) ;
   void (*remove)(struct pci_dev * ) ;
   int (*suspend)(struct pci_dev * , pm_message_t  ) ;
   int (*suspend_late)(struct pci_dev * , pm_message_t  ) ;
   int (*resume_early)(struct pci_dev * ) ;
   int (*resume)(struct pci_dev * ) ;
   void (*shutdown)(struct pci_dev * ) ;
   int (*sriov_configure)(struct pci_dev * , int  ) ;
   struct pci_error_handlers  const  *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1070 "include/linux/pci.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 70 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 77 "include/linux/dma-attrs.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc)(struct device * , size_t  , dma_addr_t * , gfp_t  , struct dma_attrs * ) ;
   void (*free)(struct device * , size_t  , void * , dma_addr_t  , struct dma_attrs * ) ;
   int (*mmap)(struct device * , struct vm_area_struct * , void * , dma_addr_t  ,
               size_t  , struct dma_attrs * ) ;
   int (*get_sgtable)(struct device * , struct sg_table * , void * , dma_addr_t  ,
                      size_t  , struct dma_attrs * ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 1843 "include/linux/pci.h"
struct vgastate {
   void *vgabase ;
   unsigned long membase ;
   __u32 memsize ;
   __u32 flags ;
   __u32 depth ;
   __u32 num_attr ;
   __u32 num_crtc ;
   __u32 num_gfx ;
   __u32 num_seq ;
   void *vidstate ;
};
#line 458 "include/video/vga.h"
struct vga_regset {
   u8 regnum ;
   u8 lowbit ;
   u8 highbit ;
};
#line 17 "include/linux/svga.h"
struct svga_fb_format {
   u32 bits_per_pixel ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   u32 nonstd ;
   u32 type ;
   u32 type_aux ;
   u32 visual ;
   u32 xpanstep ;
   u32 xresstep ;
};
#line 38 "include/linux/svga.h"
struct svga_timing_regs {
   struct vga_regset  const  *h_total_regs ;
   struct vga_regset  const  *h_display_regs ;
   struct vga_regset  const  *h_blank_start_regs ;
   struct vga_regset  const  *h_blank_end_regs ;
   struct vga_regset  const  *h_sync_start_regs ;
   struct vga_regset  const  *h_sync_end_regs ;
   struct vga_regset  const  *v_total_regs ;
   struct vga_regset  const  *v_display_regs ;
   struct vga_regset  const  *v_blank_start_regs ;
   struct vga_regset  const  *v_blank_end_regs ;
   struct vga_regset  const  *v_sync_start_regs ;
   struct vga_regset  const  *v_sync_end_regs ;
};
#line 54 "include/linux/svga.h"
struct svga_pll {
   u16 m_min ;
   u16 m_max ;
   u16 n_min ;
   u16 n_max ;
   u16 r_min ;
   u16 r_max ;
   u32 f_vco_min ;
   u32 f_vco_max ;
   u32 f_base ;
};
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 44 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 275 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 279 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct dac_info;
#line 106 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
struct arkfb_info {
   int mclk_freq ;
   int mtrr_reg ;
   struct dac_info *dac ;
   struct vgastate state ;
   struct mutex open_lock ;
   unsigned int ref_count ;
   u32 pseudo_palette[16U] ;
};
#line 369 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
struct dac_ops {
   int (*dac_get_mode)(struct dac_info * ) ;
   int (*dac_set_mode)(struct dac_info * , int  ) ;
   int (*dac_get_freq)(struct dac_info * , int  ) ;
   int (*dac_set_freq)(struct dac_info * , int  , u32  ) ;
   void (*dac_release)(struct dac_info * ) ;
};
#line 385 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
struct dac_info {
   struct dac_ops *dacops ;
   void (*dac_read_regs)(void * , u8 * , int  ) ;
   void (*dac_write_regs)(void * , u8 * , int  ) ;
   void *data ;
};
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
struct ics5342_info {
   struct dac_info dac ;
   u8 mode ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 119 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 45 "include/linux/dynamic_debug.h"
extern int __dynamic_pr_debug(struct _ddebug * , char const   *  , ...) ;
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
extern struct pv_cpu_ops pv_cpu_ops ;
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 312 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
__inline static void slow_down_io(void) 
{ 


  {
#line 314
  (*(pv_cpu_ops.io_delay))();
#line 315
  return;
}
}
#line 5 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
extern void __ldv_spin_lock(spinlock_t * ) ;
#line 8
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) ;
#line 12
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) ;
#line 52
void ldv_spin_lock_node_size_lock_of_pglist_data(void) ;
#line 60
void ldv_spin_lock_siglock_of_sighand_struct(void) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 169
extern void mutex_unlock(struct mutex * ) ;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char readb(void const volatile   *addr ) 
{ 
  unsigned char ret ;

  {
#line 53
  __asm__  volatile   ("movb %1,%0": "=q" (ret): "m" (*((unsigned char volatile   *)addr)): "memory");
#line 53
  return (ret);
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 61
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)): "memory");
#line 62
  return;
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val , void volatile   *addr ) 
{ 


  {
#line 62
  __asm__  volatile   ("movw %0,%1": : "r" (val), "m" (*((unsigned short volatile   *)addr)): "memory");
#line 63
  return;
}
}
#line 65 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writeb(unsigned char val , void volatile   *addr ) 
{ 


  {
#line 65
  __asm__  volatile   ("movb %0,%1": : "q" (val), "m" (*((unsigned char volatile   *)addr)));
#line 66
  return;
}
}
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val , void volatile   *addr ) 
{ 


  {
#line 67
  __asm__  volatile   ("movl %0,%1": : "r" (val), "m" (*((unsigned int volatile   *)addr)));
#line 68
  return;
}
}
#line 72 "include/asm-generic/iomap.h"
extern void pci_iounmap(struct pci_dev * , void * ) ;
#line 17 "include/asm-generic/pci_iomap.h"
extern void *pci_iomap(struct pci_dev * , int  , unsigned long  ) ;
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void memset_io(void volatile   *addr , unsigned char val , size_t count ) 
{ 


  {
#line 205
  memset((void *)addr, (int )val, count);
#line 206
  return;
}
}
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outb(unsigned char value , int port ) 
{ 


  {
#line 308
  __asm__  volatile   ("outb %b0, %w1": : "a" (value), "Nd" (port));
#line 309
  return;
}
}
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char inb(int port ) 
{ 
  unsigned char value ;

  {
#line 308
  __asm__  volatile   ("inb %w1, %b0": "=a" (value): "Nd" (port));
#line 308
  return (value);
}
}
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outb_p(unsigned char value , int port ) 
{ 


  {
#line 308
  outb((int )value, port);
#line 308
  slow_down_io();
#line 309
  return;
}
}
#line 308 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static unsigned char inb_p(int port ) 
{ 
  unsigned char value ;
  unsigned char tmp ;

  {
#line 308
  tmp = inb(port);
#line 308
  value = tmp;
#line 308
  slow_down_io();
#line 308
  return (value);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
__inline static void outw(unsigned short value , int port ) 
{ 


  {
#line 309
  __asm__  volatile   ("outw %w0, %w1": : "a" (value), "Nd" (port));
#line 310
  return;
}
}
#line 80 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 82
  return ((char const   *)kobj->name);
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 731 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 734
  if ((unsigned long )dev->init_name != (unsigned long )((char const   */* const  */)0)) {
#line 735
    return ((char const   *)dev->init_name);
  } else {

  }
#line 737
  tmp = kobject_name(& dev->kobj);
#line 737
  return (tmp);
}
}
#line 845
extern void *dev_get_drvdata(struct device  const  * ) ;
#line 846
extern int dev_set_drvdata(struct device * , void * ) ;
#line 946
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 952
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 232 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 224 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 274 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 289
  tmp___2 = __kmalloc(size, flags);
#line 289
  return (tmp___2);
}
}
#line 422 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 424
  tmp = kmalloc(size, flags | 32768U);
#line 424
  return (tmp);
}
}
#line 594 "include/linux/fb.h"
extern void cfb_fillrect(struct fb_info * , struct fb_fillrect  const  * ) ;
#line 595
extern void cfb_copyarea(struct fb_info * , struct fb_copyarea  const  * ) ;
#line 596
extern void cfb_imageblit(struct fb_info * , struct fb_image  const  * ) ;
#line 609
extern int register_framebuffer(struct fb_info * ) ;
#line 610
extern int unregister_framebuffer(struct fb_info * ) ;
#line 620
extern void fb_set_suspend(struct fb_info * , int  ) ;
#line 681
extern struct fb_info *framebuffer_alloc(size_t  , struct device * ) ;
#line 682
extern void framebuffer_release(struct fb_info * ) ;
#line 742
extern int fb_alloc_cmap(struct fb_cmap * , int  , int  ) ;
#line 744
extern void fb_dealloc_cmap(struct fb_cmap * ) ;
#line 778
extern int fb_find_mode(struct fb_var_screeninfo * , struct fb_info * , char const   * ,
                        struct fb_videomode  const  * , unsigned int  , struct fb_videomode  const  * ,
                        unsigned int  ) ;
#line 695 "include/linux/pci.h"
extern void pcibios_bus_to_resource(struct pci_dev * , struct resource * , struct pci_bus_region * ) ;
#line 778
extern int pci_bus_read_config_word(struct pci_bus * , unsigned int  , int  , u16 * ) ;
#line 794 "include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev  const  *dev , int where ,
                                         u16 *val ) 
{ 
  int tmp ;

  {
#line 796
  tmp = pci_bus_read_config_word(dev->bus, dev->devfn, where, val);
#line 796
  return (tmp);
}
}
#line 858
extern int pci_enable_device(struct pci_dev * ) ;
#line 875
extern void pci_disable_device(struct pci_dev * ) ;
#line 878
extern void pci_set_master(struct pci_dev * ) ;
#line 917
extern int pci_save_state(struct pci_dev * ) ;
#line 918
extern void pci_restore_state(struct pci_dev * ) ;
#line 924
extern int pci_set_power_state(struct pci_dev * , pci_power_t  ) ;
#line 925
extern pci_power_t pci_choose_state(struct pci_dev * , pm_message_t  ) ;
#line 987
extern int pci_request_regions(struct pci_dev * , char const   * ) ;
#line 989
extern void pci_release_regions(struct pci_dev * ) ;
#line 1023
extern int __pci_register_driver(struct pci_driver * , struct module * , char const   * ) ;
#line 1032
extern void pci_unregister_driver(struct pci_driver * ) ;
#line 1445 "include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev ) 
{ 
  void *tmp ;

  {
#line 1447
  tmp = dev_get_drvdata((struct device  const  *)(& pdev->dev));
#line 1447
  return (tmp);
}
}
#line 1450 "include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev , void *data ) 
{ 


  {
#line 1452
  dev_set_drvdata(& pdev->dev, data);
#line 1453
  return;
}
}
#line 1458 "include/linux/pci.h"
__inline static char const   *pci_name(struct pci_dev  const  *pdev ) 
{ 
  char const   *tmp ;

  {
#line 1460
  tmp = dev_name(& pdev->dev);
#line 1460
  return (tmp);
}
}
#line 195 "include/video/vga.h"
extern int save_vga(struct vgastate * ) ;
#line 196
extern int restore_vga(struct vgastate * ) ;
#line 202 "include/video/vga.h"
__inline static unsigned char vga_io_r(unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 204
  tmp = inb_p((int )port);
#line 204
  return (tmp);
}
}
#line 207 "include/video/vga.h"
__inline static void vga_io_w(unsigned short port , unsigned char val ) 
{ 


  {
#line 209
  outb_p((int )val, (int )port);
#line 210
  return;
}
}
#line 212 "include/video/vga.h"
__inline static void vga_io_w_fast(unsigned short port , unsigned char reg , unsigned char val ) 
{ 


  {
#line 215
  outw((int )((unsigned short )((int )((short )((int )val << 8)) | (int )((short )reg))),
       (int )port);
#line 216
  return;
}
}
#line 218 "include/video/vga.h"
__inline static unsigned char vga_mm_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;

  {
#line 220
  tmp = readb((void const volatile   *)regbase + (unsigned long )port);
#line 220
  return (tmp);
}
}
#line 223 "include/video/vga.h"
__inline static void vga_mm_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
#line 225
  writeb((int )val, (void volatile   *)regbase + (unsigned long )port);
#line 226
  return;
}
}
#line 228 "include/video/vga.h"
__inline static void vga_mm_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                   unsigned char val ) 
{ 


  {
#line 231
  writew((int )((unsigned short )((int )((short )((int )val << 8)) | (int )((short )reg))),
         (void volatile   *)regbase + (unsigned long )port);
#line 232
  return;
}
}
#line 234 "include/video/vga.h"
__inline static unsigned char vga_r(void *regbase , unsigned short port ) 
{ 
  unsigned char tmp ;
  unsigned char tmp___0 ;

  {
#line 236
  if ((unsigned long )regbase != (unsigned long )((void *)0)) {
#line 237
    tmp = vga_mm_r(regbase, (int )port);
#line 237
    return (tmp);
  } else {
#line 239
    tmp___0 = vga_io_r((int )port);
#line 239
    return (tmp___0);
  }
}
}
#line 242 "include/video/vga.h"
__inline static void vga_w(void *regbase , unsigned short port , unsigned char val ) 
{ 


  {
#line 244
  if ((unsigned long )regbase != (unsigned long )((void *)0)) {
#line 245
    vga_mm_w(regbase, (int )port, (int )val);
  } else {
#line 247
    vga_io_w((int )port, (int )val);
  }
#line 248
  return;
}
}
#line 251 "include/video/vga.h"
__inline static void vga_w_fast(void *regbase , unsigned short port , unsigned char reg ,
                                unsigned char val ) 
{ 


  {
#line 254
  if ((unsigned long )regbase != (unsigned long )((void *)0)) {
#line 255
    vga_mm_w_fast(regbase, (int )port, (int )reg, (int )val);
  } else {
#line 257
    vga_io_w_fast((int )port, (int )reg, (int )val);
  }
#line 258
  return;
}
}
#line 265 "include/video/vga.h"
__inline static unsigned char vga_rcrt(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 267
  vga_w(regbase, 980, (int )reg);
#line 268
  tmp = vga_r(regbase, 981);
#line 268
  return (tmp);
}
}
#line 271 "include/video/vga.h"
__inline static void vga_wcrt(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 274
  vga_w_fast(regbase, 980, (int )reg, (int )val);
#line 275
  return;
}
}
#line 318 "include/video/vga.h"
__inline static unsigned char vga_rseq(void *regbase , unsigned char reg ) 
{ 
  unsigned char tmp ;

  {
#line 320
  vga_w(regbase, 964, (int )reg);
#line 321
  tmp = vga_r(regbase, 965);
#line 321
  return (tmp);
}
}
#line 324 "include/video/vga.h"
__inline static void vga_wseq(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 327
  vga_w_fast(regbase, 964, (int )reg, (int )val);
#line 328
  return;
}
}
#line 376 "include/video/vga.h"
__inline static void vga_wgfx(void *regbase , unsigned char reg , unsigned char val ) 
{ 


  {
#line 379
  vga_w_fast(regbase, 974, (int )reg, (int )val);
#line 380
  return;
}
}
#line 79 "include/linux/svga.h"
__inline static void svga_wseq_mask(void *regbase , u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 81
  tmp = vga_rseq(regbase, (int )index);
#line 81
  vga_wseq(regbase, (int )index, (int )((unsigned char )((int )((signed char )((int )data & (int )mask)) | ((int )((signed char )tmp) & ~ ((int )((signed char )mask))))));
#line 82
  return;
}
}
#line 86 "include/linux/svga.h"
__inline static void svga_wcrt_mask(void *regbase , u8 index , u8 data , u8 mask ) 
{ 
  unsigned char tmp ;

  {
#line 88
  tmp = vga_rcrt(regbase, (int )index);
#line 88
  vga_wcrt(regbase, (int )index, (int )((unsigned char )((int )((signed char )((int )data & (int )mask)) | ((int )((signed char )tmp) & ~ ((int )((signed char )mask))))));
#line 89
  return;
}
}
#line 91 "include/linux/svga.h"
__inline static int svga_primary_device(struct pci_dev *dev ) 
{ 
  u16 flags ;

  {
#line 94
  pci_read_config_word((struct pci_dev  const  *)dev, 4, & flags);
#line 95
  return ((int )flags & 1);
}
}
#line 99
extern void svga_wcrt_multi(void * , struct vga_regset  const  * , u32  ) ;
#line 102
extern void svga_set_default_gfx_regs(void * ) ;
#line 103
extern void svga_set_default_atc_regs(void * ) ;
#line 104
extern void svga_set_default_seq_regs(void * ) ;
#line 105
extern void svga_set_default_crt_regs(void * ) ;
#line 106
extern void svga_set_textmode_vga_regs(void * ) ;
#line 109
extern void svga_tilecopy(struct fb_info * , struct fb_tilearea * ) ;
#line 110
extern void svga_tilefill(struct fb_info * , struct fb_tilerect * ) ;
#line 111
extern void svga_tileblit(struct fb_info * , struct fb_tileblit * ) ;
#line 112
extern void svga_tilecursor(void * , struct fb_info * , struct fb_tilecursor * ) ;
#line 113
extern int svga_get_tilemax(struct fb_info * ) ;
#line 114
extern void svga_get_caps(struct fb_info * , struct fb_blit_caps * , struct fb_var_screeninfo * ) ;
#line 117
extern int svga_compute_pll(struct svga_pll  const  * , u32  , u16 * , u16 * , u16 * ,
                            int  ) ;
#line 118
extern int svga_check_timings(struct svga_timing_regs  const  * , struct fb_var_screeninfo * ,
                              int  ) ;
#line 119
extern void svga_set_timings(void * , struct svga_timing_regs  const  * , struct fb_var_screeninfo * ,
                             u32  , u32  , u32  , u32  , u32  , int  ) ;
#line 121
extern int svga_match_format(struct svga_fb_format  const  * , struct fb_var_screeninfo * ,
                             struct fb_fix_screeninfo * ) ;
#line 148 "include/linux/console.h"
extern void console_lock(void) ;
#line 150
extern void console_unlock(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mtrr.h"
extern int mtrr_add(unsigned long  , unsigned long  , unsigned int  , bool  ) ;
#line 38
extern int mtrr_del(int  , unsigned long  , unsigned long  ) ;
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct svga_fb_format  const  arkfb_formats[9U]  = 
#line 108 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
  {      {0U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 3U, 9U, 3U,
      8U, 8U}, 
        {4U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 3U,
      8U, 16U}, 
        {4U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 1U, 2U, 1U, 3U,
      8U, 16U}, 
        {8U, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 6U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 3U,
      8U, 8U}, 
        {16U, {10U, 5U, 0U}, {5U, 5U, 0U}, {0U, 5U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      4U, 4U}, 
        {16U, {11U, 5U, 0U}, {5U, 6U, 0U}, {0U, 5U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      4U, 4U}, 
        {24U, {16U, 8U, 0U}, {8U, 8U, 0U}, {0U, 8U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      8U, 8U}, 
        {32U, {16U, 8U, 0U}, {8U, 8U, 0U}, {0U, 8U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U, 2U,
      2U, 2U}, 
        {65535U, {0U, 0U, 0U}, {0U, 0U, 0U}, {0U, 0U, 0U}, {0U, 0U, 0U}, 0U, 0U, 0U,
      0U, 0U, 0U}};
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_total_regs[3U]  = {      {0U, 0U, 7U}, 
        {65U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_display_regs[3U]  = {      {1U, 0U, 7U}, 
        {65U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_blank_start_regs[3U]  = {      {2U, 0U, 7U}, 
        {65U, 5U, 5U}, 
        {255U, 0U, 0U}};
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_blank_end_regs[3U]  = {      {3U, 0U, 4U}, 
        {5U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_sync_start_regs[3U]  = {      {4U, 0U, 7U}, 
        {65U, 4U, 4U}, 
        {255U, 0U, 0U}};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_h_sync_end_regs[2U]  = {      {5U, 0U, 4U}, 
        {255U, 0U, 0U}};
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_total_regs[5U]  = {      {6U, 0U, 7U}, 
        {7U, 0U, 0U}, 
        {7U, 5U, 5U}, 
        {64U, 7U, 7U}, 
        {255U, 0U, 0U}};
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_display_regs[5U]  = {      {18U, 0U, 7U}, 
        {7U, 1U, 1U}, 
        {7U, 6U, 6U}, 
        {64U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_blank_start_regs[5U]  = {      {21U, 0U, 7U}, 
        {7U, 3U, 3U}, 
        {9U, 5U, 5U}, 
        {64U, 5U, 5U}, 
        {255U, 0U, 0U}};
#line 142 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_blank_end_regs[2U]  = {      {22U, 0U, 7U}, 
        {255U, 0U, 0U}};
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_sync_start_regs[5U]  = {      {16U, 0U, 7U}, 
        {7U, 2U, 2U}, 
        {7U, 7U, 7U}, 
        {64U, 4U, 4U}, 
        {255U, 0U, 0U}};
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_v_sync_end_regs[2U]  = {      {17U, 0U, 3U}, 
        {255U, 0U, 0U}};
#line 146 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_line_compare_regs[4U]  = {      {24U, 0U, 7U}, 
        {7U, 4U, 4U}, 
        {9U, 6U, 6U}, 
        {255U, 0U, 0U}};
#line 147 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_start_address_regs[4U]  = {      {13U, 0U, 7U}, 
        {12U, 0U, 7U}, 
        {64U, 0U, 2U}, 
        {255U, 0U, 0U}};
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct vga_regset  const  ark_offset_regs[3U]  = {      {19U, 0U, 7U}, 
        {65U, 3U, 3U}, 
        {255U, 0U, 0U}};
#line 150 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct svga_timing_regs  const  ark_timing_regs  = 
#line 150
     {(struct vga_regset  const  *)(& ark_h_total_regs), (struct vga_regset  const  *)(& ark_h_display_regs),
    (struct vga_regset  const  *)(& ark_h_blank_start_regs), (struct vga_regset  const  *)(& ark_h_blank_end_regs),
    (struct vga_regset  const  *)(& ark_h_sync_start_regs), (struct vga_regset  const  *)(& ark_h_sync_end_regs),
    (struct vga_regset  const  *)(& ark_v_total_regs), (struct vga_regset  const  *)(& ark_v_display_regs),
    (struct vga_regset  const  *)(& ark_v_blank_start_regs), (struct vga_regset  const  *)(& ark_v_blank_end_regs),
    (struct vga_regset  const  *)(& ark_v_sync_start_regs), (struct vga_regset  const  *)(& ark_v_sync_end_regs)};
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static char *mode_option  =    (char *)"640x480-8@60";
#line 166 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int mtrr  =    1;
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int threshold  =    4;
#line 192 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_settile(struct fb_info *info , struct fb_tilemap *map ) 
{ 
  u8 const   *font ;
  u8 *fb ;
  int i ;
  int c ;

  {
#line 194
  font = map->data;
#line 195
  fb = (u8 *)info->screen_base;
#line 198
  if (((map->width != 8U || map->height != 16U) || map->depth != 1U) || map->length != 256U) {
#line 200
    printk("\vfb%d: unsupported font parameters: width %d, height %d, depth %d, length %d\n",
           info->node, map->width, map->height, map->depth, map->length);
#line 203
    return;
  } else {

  }
#line 206
  fb = fb + 2UL;
#line 207
  c = 0;
#line 207
  goto ldv_33531;
  ldv_33530: 
#line 208
  i = 0;
#line 208
  goto ldv_33528;
  ldv_33527: 
#line 209
  __writeb((int )*(font + (unsigned long )i), (void volatile   *)fb + (unsigned long )(i * 4));
#line 210
  __writeb((int )*(font + (unsigned long )i), (void volatile   *)(fb + ((unsigned long )(i * 4) + 1024UL)));
#line 208
  i = i + 1;
  ldv_33528: ;
#line 208
  if ((__u32 )i < map->height) {
#line 209
    goto ldv_33527;
  } else {

  }
#line 212
  fb = fb + 128UL;
#line 214
  if (c % 8 == 7) {
#line 215
    fb = fb + 1024UL;
  } else {

  }
#line 217
  font = font + (unsigned long )map->height;
#line 207
  c = c + 1;
  ldv_33531: ;
#line 207
  if ((__u32 )c < map->length) {
#line 208
    goto ldv_33530;
  } else {

  }

#line 212
  return;
}
}
#line 221 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_tilecursor(struct fb_info *info , struct fb_tilecursor *cursor ) 
{ 
  struct arkfb_info *par ;

  {
#line 223
  par = (struct arkfb_info *)info->par;
#line 225
  svga_tilecursor(par->state.vgabase, info, cursor);
#line 226
  return;
}
}
#line 228 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct fb_tile_ops arkfb_tile_ops  =    {& arkfb_settile, & svga_tilecopy, & svga_tilefill, & svga_tileblit, & arkfb_tilecursor,
    & svga_get_tilemax};
#line 242 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static u32 expand_color(u32 c ) 
{ 


  {
#line 244
  return (((((c & 1U) | ((c & 2U) << 7)) | ((c & 4U) << 14)) | ((c & 8U) << 21)) * 255U);
}
}
#line 248 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_iplan_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 tmp ;
  u32 bg ;
  u32 tmp___0 ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp___1 ;
  u32 *tmp___2 ;

  {
#line 250
  tmp = expand_color(image->fg_color);
#line 250
  fg = tmp;
#line 251
  tmp___0 = expand_color(image->bg_color);
#line 251
  bg = tmp___0;
#line 258
  src1 = (u8 const   *)image->data;
#line 259
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )image->dy * info->fix.line_length) + (unsigned long )(((unsigned int )image->dx / 8U) * 4U)));
#line 262
  y = 0;
#line 262
  goto ldv_33559;
  ldv_33558: 
#line 263
  src = src1;
#line 264
  dst = (u32 *)dst1;
#line 265
  x = 0;
#line 265
  goto ldv_33556;
  ldv_33555: 
#line 266
  tmp___1 = src;
#line 266
  src = src + 1;
#line 266
  val = (u32 )((int )*tmp___1 * 16843009);
#line 267
  val = (val & fg) | (~ val & bg);
#line 268
  tmp___2 = dst;
#line 268
  dst = dst + 1;
#line 268
  __writel(val, (void volatile   *)tmp___2);
#line 265
  x = x + 8;
  ldv_33556: ;
#line 265
  if ((unsigned int )x < (unsigned int )image->width) {
#line 266
    goto ldv_33555;
  } else {

  }
#line 270
  src1 = src1 + (unsigned long )((unsigned int )image->width / 8U);
#line 271
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 262
  y = y + 1;
  ldv_33559: ;
#line 262
  if ((unsigned int )y < (unsigned int )image->height) {
#line 263
    goto ldv_33558;
  } else {

  }

#line 267
  return;
}
}
#line 277 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_iplan_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 
  u32 fg ;
  u32 tmp ;
  u8 *dst1 ;
  u32 *dst ;
  int x ;
  int y ;
  u32 *tmp___0 ;

  {
#line 279
  tmp = expand_color(rect->color);
#line 279
  fg = tmp;
#line 284
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )rect->dy * info->fix.line_length) + (unsigned long )(((unsigned int )rect->dx / 8U) * 4U)));
#line 287
  y = 0;
#line 287
  goto ldv_33574;
  ldv_33573: 
#line 288
  dst = (u32 *)dst1;
#line 289
  x = 0;
#line 289
  goto ldv_33571;
  ldv_33570: 
#line 290
  tmp___0 = dst;
#line 290
  dst = dst + 1;
#line 290
  __writel(fg, (void volatile   *)tmp___0);
#line 289
  x = x + 8;
  ldv_33571: ;
#line 289
  if ((unsigned int )x < (unsigned int )rect->width) {
#line 290
    goto ldv_33570;
  } else {

  }
#line 292
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 287
  y = y + 1;
  ldv_33574: ;
#line 287
  if ((unsigned int )y < (unsigned int )rect->height) {
#line 288
    goto ldv_33573;
  } else {

  }

#line 292
  return;
}
}
#line 299 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static u32 expand_pixel(u32 c ) 
{ 


  {
#line 301
  return ((((((((((c & 1U) << 24) | ((c & 2U) << 27)) | ((c & 4U) << 14)) | ((c & 8U) << 17)) | ((c & 16U) << 4)) | ((c & 32U) << 7)) | ((c & 64U) >> 6)) | ((c & 128U) >> 3)) * 15U);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_cfb4_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 
  u32 fg ;
  u32 bg ;
  u8 const   *src1 ;
  u8 const   *src ;
  u8 *dst1 ;
  u32 *dst ;
  u32 val ;
  int x ;
  int y ;
  u8 const   *tmp ;
  u32 *tmp___0 ;

  {
#line 308
  fg = (unsigned int )image->fg_color * 286331153U;
#line 309
  bg = (unsigned int )image->bg_color * 286331153U;
#line 316
  src1 = (u8 const   *)image->data;
#line 317
  dst1 = (u8 *)(info->screen_base + ((unsigned long )((unsigned int )image->dy * info->fix.line_length) + (unsigned long )(((unsigned int )image->dx / 8U) * 4U)));
#line 320
  y = 0;
#line 320
  goto ldv_33596;
  ldv_33595: 
#line 321
  src = src1;
#line 322
  dst = (u32 *)dst1;
#line 323
  x = 0;
#line 323
  goto ldv_33593;
  ldv_33592: 
#line 324
  tmp = src;
#line 324
  src = src + 1;
#line 324
  val = expand_pixel((u32 )*tmp);
#line 325
  val = (val & fg) | (~ val & bg);
#line 326
  tmp___0 = dst;
#line 326
  dst = dst + 1;
#line 326
  __writel(val, (void volatile   *)tmp___0);
#line 323
  x = x + 8;
  ldv_33593: ;
#line 323
  if ((unsigned int )x < (unsigned int )image->width) {
#line 324
    goto ldv_33592;
  } else {

  }
#line 328
  src1 = src1 + (unsigned long )((unsigned int )image->width / 8U);
#line 329
  dst1 = dst1 + (unsigned long )info->fix.line_length;
#line 320
  y = y + 1;
  ldv_33596: ;
#line 320
  if ((unsigned int )y < (unsigned int )image->height) {
#line 321
    goto ldv_33595;
  } else {

  }

#line 325
  return;
}
}
#line 334 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_imageblit(struct fb_info *info , struct fb_image  const  *image ) 
{ 


  {
#line 336
  if (((info->var.bits_per_pixel == 4U && (unsigned int )((unsigned char )image->depth) == 1U) && ((unsigned int )image->width & 7U) == 0U) && ((unsigned int )image->dx & 7U) == 0U) {
#line 338
    if (info->fix.type == 2U) {
#line 339
      arkfb_iplan_imageblit(info, image);
    } else {
#line 341
      arkfb_cfb4_imageblit(info, image);
    }
  } else {
#line 343
    cfb_imageblit(info, image);
  }
#line 344
  return;
}
}
#line 346 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_fillrect(struct fb_info *info , struct fb_fillrect  const  *rect ) 
{ 


  {
#line 348
  if (((info->var.bits_per_pixel == 4U && ((unsigned int )rect->width & 7U) == 0U) && ((unsigned int )rect->dx & 7U) == 0U) && info->fix.type == 2U) {
#line 351
    arkfb_iplan_fillrect(info, rect);
  } else {
#line 353
    cfb_fillrect(info, rect);
  }
#line 354
  return;
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static void dac_write_reg(struct dac_info *info , u8 reg , u8 val ) 
{ 
  u8 code[2U] ;

  {
#line 409
  code[0] = reg;
#line 409
  code[1] = val;
#line 410
  (*(info->dac_write_regs))(info->data, (u8 *)(& code), 1);
#line 411
  return;
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static void dac_write_regs(struct dac_info *info , u8 *code , int count ) 
{ 


  {
#line 415
  (*(info->dac_write_regs))(info->data, code, count);
#line 416
  return;
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static int dac_set_mode(struct dac_info *info , int mode ) 
{ 
  int tmp ;

  {
#line 420
  tmp = (*((info->dacops)->dac_set_mode))(info, mode);
#line 420
  return (tmp);
}
}
#line 423 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static int dac_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  int tmp ;

  {
#line 425
  tmp = (*((info->dacops)->dac_set_freq))(info, channel, freq);
#line 425
  return (tmp);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
__inline static void dac_release(struct dac_info *info ) 
{ 


  {
#line 430
  (*((info->dacops)->dac_release))(info);
#line 431
  return;
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static u8 const   ics5342_mode_table[10U]  = 
#line 448
  {      1U,      33U,      97U,      65U, 
        (unsigned char)0,      17U,      49U,      81U, 
        145U,      113U};
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int ics5342_set_mode(struct dac_info *info , int mode ) 
{ 
  u8 code ;

  {
#line 458
  if (mode > 9) {
#line 459
    return (-22);
  } else {

  }
#line 461
  code = ics5342_mode_table[mode];
#line 463
  if ((unsigned int )code == 0U) {
#line 464
    return (-22);
  } else {

  }
#line 466
  dac_write_reg(info, 6, (int )code & 240);
#line 467
  ((struct ics5342_info *)info)->mode = (u8 )mode;
#line 469
  return (0);
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct svga_pll  const  ics5342_pll  = 
#line 472
     {3U, 129U, 3U, 33U, 0U, 3U, 60000U, 250000U, 14318U};
#line 476 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct svga_pll  const  ics5342_pll_pd4  = 
#line 476
     {3U, 129U, 3U, 33U, 2U, 2U, 60000U, 335000U, 14318U};
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int ics5342_set_freq(struct dac_info *info , int channel , u32 freq ) 
{ 
  u16 m ;
  u16 n ;
  u16 r ;
  int rv ;
  int tmp ;
  u8 code[6U] ;

  {
#line 487
  tmp = svga_compute_pll((unsigned int )((struct ics5342_info *)info)->mode == 5U ? & ics5342_pll_pd4 : & ics5342_pll,
                         freq, & m, & n, & r, 0);
#line 487
  rv = tmp;
#line 491
  if (rv < 0) {
#line 492
    return (-22);
  } else {
#line 494
    code[0] = 4U;
#line 494
    code[1] = 3U;
#line 494
    code[2] = 5U;
#line 494
    code[3] = (unsigned int )((unsigned char )m) + 254U;
#line 494
    code[4] = 5U;
#line 494
    code[5] = (unsigned char )((int )((signed char )((unsigned int )((unsigned char )n) + 254U)) | (int )((signed char )((int )r << 5)));
#line 495
    dac_write_regs(info, (u8 *)(& code), 3);
#line 496
    return (0);
  }
}
}
#line 500 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void ics5342_release(struct dac_info *info ) 
{ 


  {
#line 502
  ics5342_set_mode(info, 0);
#line 503
  kfree((void const   *)info);
#line 504
  return;
}
}
#line 506 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct dac_ops ics5342_ops  =    {0, & ics5342_set_mode, 0, & ics5342_set_freq, & ics5342_release};
#line 513 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct dac_info *ics5342_init(void (*drr)(void * , u8 * , int  ) , void (*dwr)(void * ,
                                                                                      u8 * ,
                                                                                      int  ) ,
                                     void *data ) 
{ 
  struct dac_info *info ;
  void *tmp ;

  {
#line 515
  tmp = kzalloc(40UL, 208U);
#line 515
  info = (struct dac_info *)tmp;
#line 517
  if ((unsigned long )info == (unsigned long )((struct dac_info *)0)) {
#line 518
    return (0);
  } else {

  }
#line 520
  info->dacops = & ics5342_ops;
#line 521
  info->dac_read_regs = drr;
#line 522
  info->dac_write_regs = dwr;
#line 523
  info->data = data;
#line 524
  ((struct ics5342_info *)info)->mode = 0U;
#line 525
  return (info);
}
}
#line 532 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static unsigned short dac_regs[4U]  = {      968U,      969U,      966U,      967U};
#line 534 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void ark_dac_read_regs(void *data , u8 *code , int count ) 
{ 
  struct fb_info *info ;
  struct arkfb_info *par ;
  u8 regval ;

  {
#line 536
  info = (struct fb_info *)data;
#line 540
  par = (struct arkfb_info *)info->par;
#line 541
  regval = vga_rseq(par->state.vgabase, 28);
#line 542
  goto ldv_33719;
  ldv_33718: 
#line 544
  vga_wseq(par->state.vgabase, 28, (int )((unsigned char )((((int )*code & 4) != 0 ? -128 : 0) | (int )((signed char )regval))));
#line 545
  *(code + 1UL) = vga_r(par->state.vgabase, (int )dac_regs[(int )*code & 3]);
#line 546
  count = count - 1;
#line 547
  code = code + 2UL;
  ldv_33719: ;
#line 542
  if (count != 0) {
#line 543
    goto ldv_33718;
  } else {

  }
#line 550
  vga_wseq(par->state.vgabase, 28, (int )regval);
#line 551
  return;
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void ark_dac_write_regs(void *data , u8 *code , int count ) 
{ 
  struct fb_info *info ;
  struct arkfb_info *par ;
  u8 regval ;

  {
#line 555
  info = (struct fb_info *)data;
#line 559
  par = (struct arkfb_info *)info->par;
#line 560
  regval = vga_rseq(par->state.vgabase, 28);
#line 561
  goto ldv_33730;
  ldv_33729: 
#line 563
  vga_wseq(par->state.vgabase, 28, (int )((unsigned char )((((int )*code & 4) != 0 ? -128 : 0) | (int )((signed char )regval))));
#line 564
  vga_w(par->state.vgabase, (int )dac_regs[(int )*code & 3], (int )*(code + 1UL));
#line 565
  count = count - 1;
#line 566
  code = code + 2UL;
  ldv_33730: ;
#line 561
  if (count != 0) {
#line 562
    goto ldv_33729;
  } else {

  }
#line 569
  vga_wseq(par->state.vgabase, 28, (int )regval);
#line 570
  return;
}
}
#line 573 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void ark_set_pixclock(struct fb_info *info , u32 pixclock ) 
{ 
  struct arkfb_info *par ;
  u8 regval ;
  int rv ;
  int tmp ;

  {
#line 575
  par = (struct arkfb_info *)info->par;
#line 578
  tmp = dac_set_freq(par->dac, 0, 1000000000U / pixclock);
#line 578
  rv = tmp;
#line 579
  if (rv < 0) {
#line 580
    printk("\vfb%d: cannot set requested pixclock, keeping old value\n", info->node);
#line 581
    return;
  } else {

  }
#line 585
  regval = vga_r(par->state.vgabase, 972);
#line 586
  vga_w(par->state.vgabase, 962, (int )((unsigned int )regval | 12U));
#line 587
  return;
}
}
#line 592 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_open(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;
  void *vgabase ;

  {
#line 594
  par = (struct arkfb_info *)info->par;
#line 596
  mutex_lock_nested(& par->open_lock, 0U);
#line 597
  if (par->ref_count == 0U) {
#line 598
    vgabase = par->state.vgabase;
#line 600
    memset((void *)(& par->state), 0, 56UL);
#line 601
    par->state.vgabase = vgabase;
#line 602
    par->state.flags = 31U;
#line 603
    par->state.num_crtc = 96U;
#line 604
    par->state.num_seq = 48U;
#line 605
    save_vga(& par->state);
  } else {

  }
#line 608
  par->ref_count = par->ref_count + 1U;
#line 609
  mutex_unlock(& par->open_lock);
#line 611
  return (0);
}
}
#line 616 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_release(struct fb_info *info , int user ) 
{ 
  struct arkfb_info *par ;

  {
#line 618
  par = (struct arkfb_info *)info->par;
#line 620
  mutex_lock_nested(& par->open_lock, 0U);
#line 621
  if (par->ref_count == 0U) {
#line 622
    mutex_unlock(& par->open_lock);
#line 623
    return (-22);
  } else {

  }
#line 626
  if (par->ref_count == 1U) {
#line 627
    restore_vga(& par->state);
#line 628
    dac_set_mode(par->dac, 0);
  } else {

  }
#line 631
  par->ref_count = par->ref_count - 1U;
#line 632
  mutex_unlock(& par->open_lock);
#line 634
  return (0);
}
}
#line 639 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_check_var(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  int rv ;
  int mem ;
  int step ;

  {
#line 644
  rv = svga_match_format((struct svga_fb_format  const  *)(& arkfb_formats), var,
                         0);
#line 645
  if (rv < 0) {
#line 647
    printk("\vfb%d: unsupported mode requested\n", info->node);
#line 648
    return (rv);
  } else {

  }
#line 652
  if (var->xres > var->xres_virtual) {
#line 653
    var->xres_virtual = var->xres;
  } else {

  }
#line 655
  if (var->yres > var->yres_virtual) {
#line 656
    var->yres_virtual = var->yres;
  } else {

  }
#line 659
  step = (int )((unsigned int )arkfb_formats[rv].xresstep - 1U);
#line 660
  var->xres_virtual = (var->xres_virtual + (__u32 )step) & (__u32 )(~ step);
#line 664
  mem = (int )((var->bits_per_pixel * var->xres_virtual >> 3) * var->yres_virtual);
#line 665
  if ((unsigned long )mem > info->screen_size) {
#line 667
    printk("\vfb%d: not enough framebuffer memory (%d kB requested , %d kB available)\n",
           info->node, mem >> 10, (unsigned int )(info->screen_size >> 10));
#line 668
    return (-22);
  } else {

  }
#line 671
  rv = svga_check_timings(& ark_timing_regs, var, info->node);
#line 672
  if (rv < 0) {
#line 674
    printk("\vfb%d: invalid timings requested\n", info->node);
#line 675
    return (rv);
  } else {

  }
#line 679
  if ((int )var->vmode & 1) {
#line 680
    return (-22);
  } else {

  }
#line 682
  return (0);
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_set_par(struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  u32 value ;
  u32 mode ;
  u32 hmul ;
  u32 hdiv ;
  u32 offset_value ;
  u32 screen_size ;
  u32 bpp ;
  u8 regval ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;
  struct _ddebug descriptor___0 ;
  long tmp___1 ;
  struct _ddebug descriptor___1 ;
  long tmp___2 ;
  struct _ddebug descriptor___2 ;
  long tmp___3 ;
  struct _ddebug descriptor___3 ;
  long tmp___4 ;
  struct _ddebug descriptor___4 ;
  long tmp___5 ;
  struct _ddebug descriptor___5 ;
  long tmp___6 ;
  struct _ddebug descriptor___6 ;
  long tmp___7 ;
  struct _ddebug descriptor___7 ;
  long tmp___8 ;
  struct _ddebug descriptor___8 ;
  long tmp___9 ;
  struct _ddebug descriptor___9 ;
  long tmp___10 ;

  {
#line 689
  par = (struct arkfb_info *)info->par;
#line 691
  bpp = info->var.bits_per_pixel;
#line 694
  if (bpp != 0U) {
#line 695
    info->fix.ypanstep = 1U;
#line 696
    info->fix.line_length = (info->var.xres_virtual * bpp) / 8U;
#line 698
    info->flags = info->flags & -131073;
#line 699
    info->tileops = 0;
#line 702
    info->pixmap.blit_x = bpp == 4U ? 128U : 4294967295U;
#line 703
    info->pixmap.blit_y = 4294967295U;
#line 705
    offset_value = (info->var.xres_virtual * bpp) / 64U;
#line 706
    screen_size = info->var.yres_virtual * info->fix.line_length;
  } else {
#line 708
    info->fix.ypanstep = 16U;
#line 709
    info->fix.line_length = 0U;
#line 711
    info->flags = info->flags | 131072;
#line 712
    info->tileops = & arkfb_tile_ops;
#line 715
    info->pixmap.blit_x = 128U;
#line 716
    info->pixmap.blit_y = 32768U;
#line 718
    offset_value = info->var.xres_virtual / 16U;
#line 719
    screen_size = (info->var.xres_virtual * info->var.yres_virtual) / 64U;
  }
#line 722
  info->var.xoffset = 0U;
#line 723
  info->var.yoffset = 0U;
#line 724
  info->var.activate = 0U;
#line 727
  svga_wcrt_mask(par->state.vgabase, 17, 0, 128);
#line 730
  svga_wseq_mask(par->state.vgabase, 1, 32, 32);
#line 731
  svga_wcrt_mask(par->state.vgabase, 23, 0, 128);
#line 734
  svga_set_default_gfx_regs(par->state.vgabase);
#line 735
  svga_set_default_atc_regs(par->state.vgabase);
#line 736
  svga_set_default_seq_regs(par->state.vgabase);
#line 737
  svga_set_default_crt_regs(par->state.vgabase);
#line 738
  svga_wcrt_multi(par->state.vgabase, (struct vga_regset  const  *)(& ark_line_compare_regs),
                  4294967295U);
#line 739
  svga_wcrt_multi(par->state.vgabase, (struct vga_regset  const  *)(& ark_start_address_regs),
                  0U);
#line 742
  svga_wseq_mask(par->state.vgabase, 16, 31, 31);
#line 743
  svga_wseq_mask(par->state.vgabase, 18, 3, 3);
#line 745
  vga_wseq(par->state.vgabase, 19, (int )((unsigned char )(info->fix.smem_start >> 16)));
#line 746
  vga_wseq(par->state.vgabase, 20, (int )((unsigned char )(info->fix.smem_start >> 24)));
#line 747
  vga_wseq(par->state.vgabase, 21, 0);
#line 748
  vga_wseq(par->state.vgabase, 22, 0);
#line 752
  regval = (u8 )((((int )((signed char )((threshold & 14) >> 1)) | 16) | (int )((signed char )(threshold << 7))) | (int )((signed char )((threshold & 16) << 1)));
#line 753
  vga_wseq(par->state.vgabase, 24, (int )regval);
#line 756
  descriptor.modname = "arkfb";
#line 756
  descriptor.function = "arkfb_set_par";
#line 756
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 756
  descriptor.format = "fb%d: offset register       : %d\n";
#line 756
  descriptor.lineno = 756U;
#line 756
  descriptor.flags = 0U;
#line 756
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 756
  if (tmp != 0L) {
#line 756
    __dynamic_pr_debug(& descriptor, "fb%d: offset register       : %d\n", info->node,
                       offset_value);
  } else {

  }
#line 757
  svga_wcrt_multi(par->state.vgabase, (struct vga_regset  const  *)(& ark_offset_regs),
                  offset_value);
#line 760
  svga_wcrt_mask(par->state.vgabase, 64, 8, 8);
#line 762
  if ((info->var.vmode & 2U) != 0U) {
#line 763
    svga_wcrt_mask(par->state.vgabase, 9, 128, 128);
  } else {
#line 765
    svga_wcrt_mask(par->state.vgabase, 9, 0, 128);
  }
#line 767
  if ((int )info->var.vmode & 1) {
#line 768
    svga_wcrt_mask(par->state.vgabase, 68, 4, 4);
  } else {
#line 770
    svga_wcrt_mask(par->state.vgabase, 68, 0, 4);
  }
#line 772
  hmul = 1U;
#line 773
  hdiv = 1U;
#line 774
  tmp___0 = svga_match_format((struct svga_fb_format  const  *)(& arkfb_formats),
                              & info->var, & info->fix);
#line 774
  mode = (u32 )tmp___0;
#line 777
  switch (mode) {
  case (u32 )0: 
#line 779
  descriptor___0.modname = "arkfb";
#line 779
  descriptor___0.function = "arkfb_set_par";
#line 779
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 779
  descriptor___0.format = "fb%d: text mode\n";
#line 779
  descriptor___0.lineno = 779U;
#line 779
  descriptor___0.flags = 0U;
#line 779
  tmp___1 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 779
  if (tmp___1 != 0L) {
#line 779
    __dynamic_pr_debug(& descriptor___0, "fb%d: text mode\n", info->node);
  } else {

  }
#line 780
  svga_set_textmode_vga_regs(par->state.vgabase);
#line 782
  vga_wseq(par->state.vgabase, 17, 16);
#line 783
  svga_wcrt_mask(par->state.vgabase, 70, 0, 4);
#line 784
  dac_set_mode(par->dac, 0);
#line 786
  goto ldv_33773;
  case (u32 )1: 
#line 788
  descriptor___1.modname = "arkfb";
#line 788
  descriptor___1.function = "arkfb_set_par";
#line 788
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 788
  descriptor___1.format = "fb%d: 4 bit pseudocolor\n";
#line 788
  descriptor___1.lineno = 788U;
#line 788
  descriptor___1.flags = 0U;
#line 788
  tmp___2 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 788
  if (tmp___2 != 0L) {
#line 788
    __dynamic_pr_debug(& descriptor___1, "fb%d: 4 bit pseudocolor\n", info->node);
  } else {

  }
#line 789
  vga_wgfx(par->state.vgabase, 5, 64);
#line 791
  vga_wseq(par->state.vgabase, 17, 16);
#line 792
  svga_wcrt_mask(par->state.vgabase, 70, 0, 4);
#line 793
  dac_set_mode(par->dac, 0);
#line 794
  goto ldv_33773;
  case (u32 )2: 
#line 796
  descriptor___2.modname = "arkfb";
#line 796
  descriptor___2.function = "arkfb_set_par";
#line 796
  descriptor___2.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 796
  descriptor___2.format = "fb%d: 4 bit pseudocolor, planar\n";
#line 796
  descriptor___2.lineno = 796U;
#line 796
  descriptor___2.flags = 0U;
#line 796
  tmp___3 = __builtin_expect((long )descriptor___2.flags & 1L, 0L);
#line 796
  if (tmp___3 != 0L) {
#line 796
    __dynamic_pr_debug(& descriptor___2, "fb%d: 4 bit pseudocolor, planar\n", info->node);
  } else {

  }
#line 798
  vga_wseq(par->state.vgabase, 17, 16);
#line 799
  svga_wcrt_mask(par->state.vgabase, 70, 0, 4);
#line 800
  dac_set_mode(par->dac, 0);
#line 801
  goto ldv_33773;
  case (u32 )3: 
#line 803
  descriptor___3.modname = "arkfb";
#line 803
  descriptor___3.function = "arkfb_set_par";
#line 803
  descriptor___3.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 803
  descriptor___3.format = "fb%d: 8 bit pseudocolor\n";
#line 803
  descriptor___3.lineno = 803U;
#line 803
  descriptor___3.flags = 0U;
#line 803
  tmp___4 = __builtin_expect((long )descriptor___3.flags & 1L, 0L);
#line 803
  if (tmp___4 != 0L) {
#line 803
    __dynamic_pr_debug(& descriptor___3, "fb%d: 8 bit pseudocolor\n", info->node);
  } else {

  }
#line 805
  vga_wseq(par->state.vgabase, 17, 22);
#line 807
  if (info->var.pixclock > 20000U) {
#line 808
    descriptor___4.modname = "arkfb";
#line 808
    descriptor___4.function = "arkfb_set_par";
#line 808
    descriptor___4.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 808
    descriptor___4.format = "fb%d: not using multiplex\n";
#line 808
    descriptor___4.lineno = 808U;
#line 808
    descriptor___4.flags = 0U;
#line 808
    tmp___5 = __builtin_expect((long )descriptor___4.flags & 1L, 0L);
#line 808
    if (tmp___5 != 0L) {
#line 808
      __dynamic_pr_debug(& descriptor___4, "fb%d: not using multiplex\n", info->node);
    } else {

    }
#line 809
    svga_wcrt_mask(par->state.vgabase, 70, 0, 4);
#line 810
    dac_set_mode(par->dac, 0);
  } else {
#line 812
    descriptor___5.modname = "arkfb";
#line 812
    descriptor___5.function = "arkfb_set_par";
#line 812
    descriptor___5.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 812
    descriptor___5.format = "fb%d: using multiplex\n";
#line 812
    descriptor___5.lineno = 812U;
#line 812
    descriptor___5.flags = 0U;
#line 812
    tmp___6 = __builtin_expect((long )descriptor___5.flags & 1L, 0L);
#line 812
    if (tmp___6 != 0L) {
#line 812
      __dynamic_pr_debug(& descriptor___5, "fb%d: using multiplex\n", info->node);
    } else {

    }
#line 813
    svga_wcrt_mask(par->state.vgabase, 70, 4, 4);
#line 814
    dac_set_mode(par->dac, 5);
#line 815
    hdiv = 2U;
  }
#line 817
  goto ldv_33773;
  case (u32 )4: 
#line 819
  descriptor___6.modname = "arkfb";
#line 819
  descriptor___6.function = "arkfb_set_par";
#line 819
  descriptor___6.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 819
  descriptor___6.format = "fb%d: 5/5/5 truecolor\n";
#line 819
  descriptor___6.lineno = 819U;
#line 819
  descriptor___6.flags = 0U;
#line 819
  tmp___7 = __builtin_expect((long )descriptor___6.flags & 1L, 0L);
#line 819
  if (tmp___7 != 0L) {
#line 819
    __dynamic_pr_debug(& descriptor___6, "fb%d: 5/5/5 truecolor\n", info->node);
  } else {

  }
#line 821
  vga_wseq(par->state.vgabase, 17, 26);
#line 822
  svga_wcrt_mask(par->state.vgabase, 70, 4, 4);
#line 823
  dac_set_mode(par->dac, 6);
#line 824
  goto ldv_33773;
  case (u32 )5: 
#line 826
  descriptor___7.modname = "arkfb";
#line 826
  descriptor___7.function = "arkfb_set_par";
#line 826
  descriptor___7.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 826
  descriptor___7.format = "fb%d: 5/6/5 truecolor\n";
#line 826
  descriptor___7.lineno = 826U;
#line 826
  descriptor___7.flags = 0U;
#line 826
  tmp___8 = __builtin_expect((long )descriptor___7.flags & 1L, 0L);
#line 826
  if (tmp___8 != 0L) {
#line 826
    __dynamic_pr_debug(& descriptor___7, "fb%d: 5/6/5 truecolor\n", info->node);
  } else {

  }
#line 828
  vga_wseq(par->state.vgabase, 17, 26);
#line 829
  svga_wcrt_mask(par->state.vgabase, 70, 4, 4);
#line 830
  dac_set_mode(par->dac, 7);
#line 831
  goto ldv_33773;
  case (u32 )6: 
#line 833
  descriptor___8.modname = "arkfb";
#line 833
  descriptor___8.function = "arkfb_set_par";
#line 833
  descriptor___8.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 833
  descriptor___8.format = "fb%d: 8/8/8 truecolor\n";
#line 833
  descriptor___8.lineno = 833U;
#line 833
  descriptor___8.flags = 0U;
#line 833
  tmp___9 = __builtin_expect((long )descriptor___8.flags & 1L, 0L);
#line 833
  if (tmp___9 != 0L) {
#line 833
    __dynamic_pr_debug(& descriptor___8, "fb%d: 8/8/8 truecolor\n", info->node);
  } else {

  }
#line 835
  vga_wseq(par->state.vgabase, 17, 22);
#line 836
  svga_wcrt_mask(par->state.vgabase, 70, 4, 4);
#line 837
  dac_set_mode(par->dac, 8);
#line 838
  hmul = 3U;
#line 839
  hdiv = 2U;
#line 840
  goto ldv_33773;
  case (u32 )7: 
#line 842
  descriptor___9.modname = "arkfb";
#line 842
  descriptor___9.function = "arkfb_set_par";
#line 842
  descriptor___9.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 842
  descriptor___9.format = "fb%d: 8/8/8/8 truecolor\n";
#line 842
  descriptor___9.lineno = 842U;
#line 842
  descriptor___9.flags = 0U;
#line 842
  tmp___10 = __builtin_expect((long )descriptor___9.flags & 1L, 0L);
#line 842
  if (tmp___10 != 0L) {
#line 842
    __dynamic_pr_debug(& descriptor___9, "fb%d: 8/8/8/8 truecolor\n", info->node);
  } else {

  }
#line 844
  vga_wseq(par->state.vgabase, 17, 30);
#line 845
  svga_wcrt_mask(par->state.vgabase, 70, 4, 4);
#line 846
  dac_set_mode(par->dac, 9);
#line 847
  hmul = 2U;
#line 848
  goto ldv_33773;
  default: 
#line 850
  printk("\vfb%d: unsupported mode - bug\n", info->node);
#line 851
  return (-22);
  }
  ldv_33773: 
#line 854
  ark_set_pixclock(info, (info->var.pixclock * hdiv) / hmul);
#line 855
  svga_set_timings(par->state.vgabase, & ark_timing_regs, & info->var, hmul, hdiv,
                   (info->var.vmode & 2U) != 0U ? 2U : 1U, (int )info->var.vmode & 1 ? 2U : 1U,
                   hmul, info->node);
#line 861
  value = ((info->var.xres + info->var.left_margin) + info->var.right_margin) + info->var.hsync_len;
#line 862
  value = ((value * hmul) / hdiv) / 8U - 5U;
#line 863
  vga_wcrt(par->state.vgabase, 66, (int )((unsigned char )((value + 1U) / 2U)));
#line 865
  memset_io((void volatile   *)info->screen_base, 0, (size_t )screen_size);
#line 867
  svga_wcrt_mask(par->state.vgabase, 23, 128, 128);
#line 868
  svga_wseq_mask(par->state.vgabase, 1, 0, 32);
#line 870
  return (0);
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_setcolreg(u_int regno , u_int red , u_int green , u_int blue , u_int transp ,
                           struct fb_info *fb ) 
{ 


  {
#line 878
  switch (fb->var.bits_per_pixel) {
  case (__u32 )0: ;
  case (__u32 )4: ;
#line 881
  if (regno > 15U) {
#line 882
    return (-22);
  } else {

  }
#line 884
  if (fb->var.bits_per_pixel == 4U && fb->var.nonstd == 0U) {
#line 886
    outb(240, 966);
#line 887
    outb((int )((unsigned int )((unsigned char )regno) * 16U), 968);
  } else {
#line 889
    outb(15, 966);
#line 890
    outb((int )((unsigned char )regno), 968);
  }
#line 892
  outb((int )((unsigned char )(red >> 10)), 969);
#line 893
  outb((int )((unsigned char )(green >> 10)), 969);
#line 894
  outb((int )((unsigned char )(blue >> 10)), 969);
#line 895
  goto ldv_33801;
  case (__u32 )8: ;
#line 897
  if (regno > 255U) {
#line 898
    return (-22);
  } else {

  }
#line 900
  outb(255, 966);
#line 901
  outb((int )((unsigned char )regno), 968);
#line 902
  outb((int )((unsigned char )(red >> 10)), 969);
#line 903
  outb((int )((unsigned char )(green >> 10)), 969);
#line 904
  outb((int )((unsigned char )(blue >> 10)), 969);
#line 905
  goto ldv_33801;
  case (__u32 )16: ;
#line 907
  if (regno > 15U) {
#line 908
    return (0);
  } else {

  }
#line 910
  if (fb->var.green.length == 5U) {
#line 911
    *((u32 *)fb->pseudo_palette + (unsigned long )regno) = (((red & 63488U) >> 1) | ((green & 63488U) >> 6)) | ((blue & 63488U) >> 11);
  } else
#line 913
  if (fb->var.green.length == 6U) {
#line 914
    *((u32 *)fb->pseudo_palette + (unsigned long )regno) = ((red & 63488U) | ((green & 64512U) >> 5)) | ((blue & 63488U) >> 11);
  } else {
#line 917
    return (-22);
  }
#line 918
  goto ldv_33801;
  case (__u32 )24: ;
  case (__u32 )32: ;
#line 921
  if (regno > 15U) {
#line 922
    return (0);
  } else {

  }
#line 924
  *((u32 *)fb->pseudo_palette + (unsigned long )regno) = (((red & 65280U) << 8) | (green & 65280U)) | ((blue & 65280U) >> 8);
#line 926
  goto ldv_33801;
  default: ;
#line 928
  return (-22);
  }
  ldv_33801: ;
#line 931
  return (0);
}
}
#line 936 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_blank(int blank_mode , struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  struct _ddebug descriptor ;
  long tmp ;
  struct _ddebug descriptor___0 ;
  long tmp___0 ;
  struct _ddebug descriptor___1 ;
  long tmp___1 ;

  {
#line 938
  par = (struct arkfb_info *)info->par;
#line 940
  switch (blank_mode) {
  case 0: 
#line 942
  descriptor.modname = "arkfb";
#line 942
  descriptor.function = "arkfb_blank";
#line 942
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 942
  descriptor.format = "fb%d: unblank\n";
#line 942
  descriptor.lineno = 942U;
#line 942
  descriptor.flags = 0U;
#line 942
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 942
  if (tmp != 0L) {
#line 942
    __dynamic_pr_debug(& descriptor, "fb%d: unblank\n", info->node);
  } else {

  }
#line 943
  svga_wseq_mask(par->state.vgabase, 1, 0, 32);
#line 944
  svga_wcrt_mask(par->state.vgabase, 23, 128, 128);
#line 945
  goto ldv_33815;
  case 1: 
#line 947
  descriptor___0.modname = "arkfb";
#line 947
  descriptor___0.function = "arkfb_blank";
#line 947
  descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 947
  descriptor___0.format = "fb%d: blank\n";
#line 947
  descriptor___0.lineno = 947U;
#line 947
  descriptor___0.flags = 0U;
#line 947
  tmp___0 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 947
  if (tmp___0 != 0L) {
#line 947
    __dynamic_pr_debug(& descriptor___0, "fb%d: blank\n", info->node);
  } else {

  }
#line 948
  svga_wseq_mask(par->state.vgabase, 1, 32, 32);
#line 949
  svga_wcrt_mask(par->state.vgabase, 23, 128, 128);
#line 950
  goto ldv_33815;
  case 4: ;
  case 3: ;
  case 2: 
#line 954
  descriptor___1.modname = "arkfb";
#line 954
  descriptor___1.function = "arkfb_blank";
#line 954
  descriptor___1.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 954
  descriptor___1.format = "fb%d: sync down\n";
#line 954
  descriptor___1.lineno = 954U;
#line 954
  descriptor___1.flags = 0U;
#line 954
  tmp___1 = __builtin_expect((long )descriptor___1.flags & 1L, 0L);
#line 954
  if (tmp___1 != 0L) {
#line 954
    __dynamic_pr_debug(& descriptor___1, "fb%d: sync down\n", info->node);
  } else {

  }
#line 955
  svga_wseq_mask(par->state.vgabase, 1, 32, 32);
#line 956
  svga_wcrt_mask(par->state.vgabase, 23, 0, 128);
#line 957
  goto ldv_33815;
  }
  ldv_33815: ;
#line 959
  return (0);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_pan_display(struct fb_var_screeninfo *var , struct fb_info *info ) 
{ 
  struct arkfb_info *par ;
  unsigned int offset ;

  {
#line 967
  par = (struct arkfb_info *)info->par;
#line 971
  if (info->var.bits_per_pixel == 0U) {
#line 972
    offset = (var->yoffset / 16U) * (info->var.xres_virtual / 2U) + var->xoffset / 2U;
#line 974
    offset = offset >> 2;
  } else {
#line 976
    offset = var->yoffset * info->fix.line_length + (var->xoffset * info->var.bits_per_pixel) / 8U;
#line 978
    offset = offset >> (info->var.bits_per_pixel == 4U ? 2 : 3);
  }
#line 982
  svga_wcrt_multi(par->state.vgabase, (struct vga_regset  const  *)(& ark_start_address_regs),
                  offset);
#line 984
  return (0);
}
}
#line 993 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct fb_ops arkfb_ops  = 
#line 993
     {& __this_module, & arkfb_open, & arkfb_release, 0, 0, & arkfb_check_var, & arkfb_set_par,
    & arkfb_setcolreg, 0, & arkfb_blank, & arkfb_pan_display, & arkfb_fillrect, & cfb_copyarea,
    & arkfb_imageblit, 0, 0, 0, 0, 0, 0, & svga_get_caps, 0, 0, 0};
#line 1013 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int ark_pci_probe(struct pci_dev *dev , struct pci_device_id  const  *id ) 
{ 
  struct pci_bus_region bus_reg ;
  struct resource vga_res ;
  struct fb_info *info ;
  struct arkfb_info *par ;
  int rc ;
  u8 regval ;
  int tmp ;
  struct lock_class_key __key ;
  void *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1023
  tmp = svga_primary_device(dev);
#line 1023
  if (tmp == 0) {
#line 1024
    _dev_info((struct device  const  *)(& dev->dev), "ignoring secondary device\n");
#line 1025
    return (-19);
  } else {

  }
#line 1029
  info = framebuffer_alloc(312UL, & dev->dev);
#line 1030
  if ((unsigned long )info == (unsigned long )((struct fb_info *)0)) {
#line 1031
    dev_err((struct device  const  *)(& dev->dev), "cannot allocate memory\n");
#line 1032
    return (-12);
  } else {

  }
#line 1035
  par = (struct arkfb_info *)info->par;
#line 1036
  __mutex_init(& par->open_lock, "&par->open_lock", & __key);
#line 1038
  info->flags = 8256;
#line 1039
  info->fbops = & arkfb_ops;
#line 1042
  rc = pci_enable_device(dev);
#line 1043
  if (rc < 0) {
#line 1044
    dev_err((struct device  const  *)info->device, "cannot enable PCI device\n");
#line 1045
    goto err_enable_device;
  } else {

  }
#line 1048
  rc = pci_request_regions(dev, "arkfb");
#line 1049
  if (rc < 0) {
#line 1050
    dev_err((struct device  const  *)info->device, "cannot reserve framebuffer region\n");
#line 1051
    goto err_request_regions;
  } else {

  }
#line 1054
  par->dac = ics5342_init(& ark_dac_read_regs, & ark_dac_write_regs, (void *)info);
#line 1055
  if ((unsigned long )par->dac == (unsigned long )((struct dac_info *)0)) {
#line 1056
    rc = -12;
#line 1057
    dev_err((struct device  const  *)info->device, "RAMDAC initialization failed\n");
#line 1058
    goto err_dac;
  } else {

  }
#line 1061
  info->fix.smem_start = (unsigned long )dev->resource[0].start;
#line 1062
  info->fix.smem_len = dev->resource[0].start != 0ULL || dev->resource[0].end != dev->resource[0].start ? ((__u32 )dev->resource[0].end - (__u32 )dev->resource[0].start) + 1U : 0U;
#line 1065
  tmp___0 = pci_iomap(dev, 0, 0UL);
#line 1065
  info->screen_base = (char *)tmp___0;
#line 1066
  if ((unsigned long )info->screen_base == (unsigned long )((char *)0)) {
#line 1067
    rc = -12;
#line 1068
    dev_err((struct device  const  *)info->device, "iomap for framebuffer failed\n");
#line 1069
    goto err_iomap;
  } else {

  }
#line 1072
  bus_reg.start = 0ULL;
#line 1073
  bus_reg.end = 65536ULL;
#line 1075
  vga_res.flags = 256UL;
#line 1077
  pcibios_bus_to_resource(dev, & vga_res, & bus_reg);
#line 1079
  par->state.vgabase = (void *)vga_res.start;
#line 1082
  regval = vga_rseq(par->state.vgabase, 16);
#line 1083
  info->screen_size = (unsigned long )((1 << ((int )regval >> 6)) << 20);
#line 1084
  info->fix.smem_len = (__u32 )info->screen_size;
#line 1086
  strcpy((char *)(& info->fix.id), "ARK 2000PV");
#line 1087
  info->fix.mmio_start = 0UL;
#line 1088
  info->fix.mmio_len = 0U;
#line 1089
  info->fix.type = 0U;
#line 1090
  info->fix.visual = 3U;
#line 1091
  info->fix.ypanstep = 0U;
#line 1092
  info->fix.accel = 0U;
#line 1093
  info->pseudo_palette = (void *)(& par->pseudo_palette);
#line 1096
  rc = fb_find_mode(& info->var, info, (char const   *)mode_option, 0, 0U, 0, 8U);
#line 1097
  if (rc != 1 && rc != 2) {
#line 1098
    rc = -22;
#line 1099
    dev_err((struct device  const  *)info->device, "mode %s not found\n", mode_option);
#line 1100
    goto err_find_mode;
  } else {

  }
#line 1103
  rc = fb_alloc_cmap(& info->cmap, 256, 0);
#line 1104
  if (rc < 0) {
#line 1105
    dev_err((struct device  const  *)info->device, "cannot allocate colormap\n");
#line 1106
    goto err_alloc_cmap;
  } else {

  }
#line 1109
  rc = register_framebuffer(info);
#line 1110
  if (rc < 0) {
#line 1111
    dev_err((struct device  const  *)info->device, "cannot register framebugger\n");
#line 1112
    goto err_reg_fb;
  } else {

  }
#line 1115
  tmp___1 = pci_name((struct pci_dev  const  *)dev);
#line 1115
  printk("\016fb%d: %s on %s, %d MB RAM\n", info->node, (char *)(& info->fix.id),
         tmp___1, info->fix.smem_len >> 20);
#line 1119
  pci_set_drvdata(dev, (void *)info);
#line 1122
  if (mtrr != 0) {
#line 1123
    par->mtrr_reg = -1;
#line 1124
    par->mtrr_reg = mtrr_add(info->fix.smem_start, (unsigned long )info->fix.smem_len,
                             1U, 1);
  } else {

  }
#line 1128
  return (0);
  err_reg_fb: 
#line 1132
  fb_dealloc_cmap(& info->cmap);
  err_alloc_cmap: ;
  err_find_mode: 
#line 1135
  pci_iounmap(dev, (void *)info->screen_base);
  err_iomap: 
#line 1137
  dac_release(par->dac);
  err_dac: 
#line 1139
  pci_release_regions(dev);
  err_request_regions: ;
  err_enable_device: 
#line 1143
  framebuffer_release(info);
#line 1144
  return (rc);
}
}
#line 1149 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void ark_pci_remove(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;

  {
#line 1151
  tmp = pci_get_drvdata(dev);
#line 1151
  info = (struct fb_info *)tmp;
#line 1153
  if ((unsigned long )info != (unsigned long )((struct fb_info *)0)) {
#line 1154
    par = (struct arkfb_info *)info->par;
#line 1157
    if (par->mtrr_reg >= 0) {
#line 1158
      mtrr_del(par->mtrr_reg, 0UL, 0UL);
#line 1159
      par->mtrr_reg = -1;
    } else {

    }
#line 1163
    dac_release(par->dac);
#line 1164
    unregister_framebuffer(info);
#line 1165
    fb_dealloc_cmap(& info->cmap);
#line 1167
    pci_iounmap(dev, (void *)info->screen_base);
#line 1168
    pci_release_regions(dev);
#line 1171
    pci_set_drvdata(dev, 0);
#line 1172
    framebuffer_release(info);
  } else {

  }
#line 1174
  return;
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int ark_pci_suspend(struct pci_dev *dev , pm_message_t state ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  pci_power_t tmp___0 ;

  {
#line 1182
  tmp = pci_get_drvdata(dev);
#line 1182
  info = (struct fb_info *)tmp;
#line 1183
  par = (struct arkfb_info *)info->par;
#line 1185
  _dev_info((struct device  const  *)info->device, "suspend\n");
#line 1187
  console_lock();
#line 1188
  mutex_lock_nested(& par->open_lock, 0U);
#line 1190
  if (state.event == 1 || par->ref_count == 0U) {
#line 1191
    mutex_unlock(& par->open_lock);
#line 1192
    console_unlock();
#line 1193
    return (0);
  } else {

  }
#line 1196
  fb_set_suspend(info, 1);
#line 1198
  pci_save_state(dev);
#line 1199
  pci_disable_device(dev);
#line 1200
  tmp___0 = pci_choose_state(dev, state);
#line 1200
  pci_set_power_state(dev, tmp___0);
#line 1202
  mutex_unlock(& par->open_lock);
#line 1203
  console_unlock();
#line 1205
  return (0);
}
}
#line 1211 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int ark_pci_resume(struct pci_dev *dev ) 
{ 
  struct fb_info *info ;
  void *tmp ;
  struct arkfb_info *par ;
  int tmp___0 ;

  {
#line 1213
  tmp = pci_get_drvdata(dev);
#line 1213
  info = (struct fb_info *)tmp;
#line 1214
  par = (struct arkfb_info *)info->par;
#line 1216
  _dev_info((struct device  const  *)info->device, "resume\n");
#line 1218
  console_lock();
#line 1219
  mutex_lock_nested(& par->open_lock, 0U);
#line 1221
  if (par->ref_count == 0U) {
#line 1222
    goto fail;
  } else {

  }
#line 1224
  pci_set_power_state(dev, 0);
#line 1225
  pci_restore_state(dev);
#line 1227
  tmp___0 = pci_enable_device(dev);
#line 1227
  if (tmp___0 != 0) {
#line 1228
    goto fail;
  } else {

  }
#line 1230
  pci_set_master(dev);
#line 1232
  arkfb_set_par(info);
#line 1233
  fb_set_suspend(info, 0);
  fail: 
#line 1236
  mutex_unlock(& par->open_lock);
#line 1237
  console_unlock();
#line 1238
  return (0);
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct pci_device_id ark_devices[2U]  = {      {60888U, 41113U, 4294967295U, 4294967295U, 0U, 0U, 0UL}, 
        {0U, 0U, 0U, 0U, 0U, 0U, 0UL}};
#line 1253 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
struct pci_device_id  const  __mod_pci_device_table  ;
#line 1255 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static struct pci_driver arkfb_pci_driver  = 
#line 1255
     {{0, 0}, "arkfb", (struct pci_device_id  const  *)(& ark_devices), & ark_pci_probe,
    & ark_pci_remove, & ark_pci_suspend, 0, 0, & ark_pci_resume, 0, 0, 0, {0, 0, 0,
                                                                           0, (_Bool)0,
                                                                           0, 0, 0,
                                                                           0, 0, 0,
                                                                           0, 0, 0,
                                                                           0}, {{{{{{0U}},
                                                                                   0U,
                                                                                   0U,
                                                                                   0,
                                                                                   {0,
                                                                                    {0,
                                                                                     0},
                                                                                    0,
                                                                                    0,
                                                                                    0UL}}}},
                                                                                {0,
                                                                                 0}}};
#line 1266 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static void arkfb_cleanup(void) 
{ 
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 1268
  descriptor.modname = "arkfb";
#line 1268
  descriptor.function = "arkfb_cleanup";
#line 1268
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 1268
  descriptor.format = "arkfb: cleaning up\n";
#line 1268
  descriptor.lineno = 1268U;
#line 1268
  descriptor.flags = 0U;
#line 1268
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1268
  if (tmp != 0L) {
#line 1268
    __dynamic_pr_debug(& descriptor, "arkfb: cleaning up\n");
  } else {

  }
#line 1269
  pci_unregister_driver(& arkfb_pci_driver);
#line 1270
  return;
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
static int arkfb_init(void) 
{ 
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 1287
  descriptor.modname = "arkfb";
#line 1287
  descriptor.function = "arkfb_init";
#line 1287
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared";
#line 1287
  descriptor.format = "arkfb: initializing\n";
#line 1287
  descriptor.lineno = 1287U;
#line 1287
  descriptor.flags = 0U;
#line 1287
  tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1287
  if (tmp != 0L) {
#line 1287
    __dynamic_pr_debug(& descriptor, "arkfb: initializing\n");
  } else {

  }
#line 1288
  tmp___0 = __pci_register_driver(& arkfb_pci_driver, & __this_module, "arkfb");
#line 1288
  return (tmp___0);
}
}
#line 1310
void ldv_check_final_state(void) ;
#line 1313
extern void ldv_check_return_value(int  ) ;
#line 1316
extern void ldv_check_return_value_probe(int  ) ;
#line 1319
void ldv_initialize(void) ;
#line 1322
extern void ldv_handler_precall(void) ;
#line 1325
extern int nondet_int(void) ;
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1331 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  struct fb_info *var_group1 ;
  struct fb_tilemap *var_group2 ;
  struct fb_tilecursor *var_group3 ;
  struct dac_info *var_group4 ;
  int var_ics5342_set_mode_16_p1 ;
  int var_ics5342_set_freq_17_p1 ;
  u32 var_ics5342_set_freq_17_p2 ;
  int var_arkfb_open_23_p1 ;
  int var_arkfb_release_24_p1 ;
  struct fb_var_screeninfo *var_group5 ;
  u_int var_arkfb_setcolreg_27_p0 ;
  u_int var_arkfb_setcolreg_27_p1 ;
  u_int var_arkfb_setcolreg_27_p2 ;
  u_int var_arkfb_setcolreg_27_p3 ;
  u_int var_arkfb_setcolreg_27_p4 ;
  struct fb_info *var_arkfb_setcolreg_27_p5 ;
  int var_arkfb_blank_28_p0 ;
  struct fb_fillrect  const  *var_arkfb_fillrect_8_p1 ;
  struct fb_image  const  *var_arkfb_imageblit_7_p1 ;
  struct pci_dev *var_group6 ;
  struct pci_device_id  const  *var_ark_pci_probe_30_p1 ;
  int res_ark_pci_probe_30 ;
  struct pci_dev *var_group7 ;
  pm_message_t var_ark_pci_suspend_32_p1 ;
  int ldv_s_arkfb_pci_driver_pci_driver ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1850
  ldv_s_arkfb_pci_driver_pci_driver = 0;
#line 1809
  LDV_IN_INTERRUPT = 1;
#line 1818
  ldv_initialize();
#line 1841
  ldv_handler_precall();
#line 1842
  tmp = arkfb_init();
#line 1842
  if (tmp != 0) {
#line 1843
    goto ldv_final;
  } else {

  }
#line 1854
  goto ldv_33951;
  ldv_33950: 
#line 1858
  tmp___0 = nondet_int();
#line 1858
  switch (tmp___0) {
  case 0: 
#line 1875
  ldv_handler_precall();
#line 1876
  arkfb_settile(var_group1, var_group2);
#line 1897
  goto ldv_33930;
  case 1: 
#line 1913
  ldv_handler_precall();
#line 1914
  arkfb_tilecursor(var_group1, var_group3);
#line 1935
  goto ldv_33930;
  case 2: 
#line 1952
  ldv_handler_precall();
#line 1953
  ics5342_set_mode(var_group4, var_ics5342_set_mode_16_p1);
#line 1973
  goto ldv_33930;
  case 3: 
#line 1990
  ldv_handler_precall();
#line 1991
  ics5342_set_freq(var_group4, var_ics5342_set_freq_17_p1, var_ics5342_set_freq_17_p2);
#line 2011
  goto ldv_33930;
  case 4: 
#line 2028
  ldv_handler_precall();
#line 2029
  ics5342_release(var_group4);
#line 2049
  goto ldv_33930;
  case 5: 
#line 2066
  ldv_handler_precall();
#line 2067
  arkfb_open(var_group1, var_arkfb_open_23_p1);
#line 2087
  goto ldv_33930;
  case 6: 
#line 2104
  ldv_handler_precall();
#line 2105
  arkfb_release(var_group1, var_arkfb_release_24_p1);
#line 2125
  goto ldv_33930;
  case 7: 
#line 2142
  ldv_handler_precall();
#line 2143
  arkfb_check_var(var_group5, var_group1);
#line 2163
  goto ldv_33930;
  case 8: 
#line 2180
  ldv_handler_precall();
#line 2181
  arkfb_set_par(var_group1);
#line 2201
  goto ldv_33930;
  case 9: 
#line 2218
  ldv_handler_precall();
#line 2219
  arkfb_setcolreg(var_arkfb_setcolreg_27_p0, var_arkfb_setcolreg_27_p1, var_arkfb_setcolreg_27_p2,
                  var_arkfb_setcolreg_27_p3, var_arkfb_setcolreg_27_p4, var_arkfb_setcolreg_27_p5);
#line 2239
  goto ldv_33930;
  case 10: 
#line 2256
  ldv_handler_precall();
#line 2257
  arkfb_blank(var_arkfb_blank_28_p0, var_group1);
#line 2277
  goto ldv_33930;
  case 11: 
#line 2294
  ldv_handler_precall();
#line 2295
  arkfb_pan_display(var_group5, var_group1);
#line 2315
  goto ldv_33930;
  case 12: 
#line 2331
  ldv_handler_precall();
#line 2332
  arkfb_fillrect(var_group1, var_arkfb_fillrect_8_p1);
#line 2353
  goto ldv_33930;
  case 13: 
#line 2369
  ldv_handler_precall();
#line 2370
  arkfb_imageblit(var_group1, var_arkfb_imageblit_7_p1);
#line 2391
  goto ldv_33930;
  case 14: ;
#line 2395
  if (ldv_s_arkfb_pci_driver_pci_driver == 0) {
#line 2408
    res_ark_pci_probe_30 = ark_pci_probe(var_group6, var_ark_pci_probe_30_p1);
#line 2409
    ldv_check_return_value(res_ark_pci_probe_30);
#line 2410
    ldv_check_return_value_probe(res_ark_pci_probe_30);
#line 2411
    if (res_ark_pci_probe_30 != 0) {
#line 2412
      goto ldv_module_exit;
    } else {

    }
#line 2424
    ldv_s_arkfb_pci_driver_pci_driver = ldv_s_arkfb_pci_driver_pci_driver + 1;
  } else {

  }
#line 2430
  goto ldv_33930;
  case 15: ;
#line 2434
  if (ldv_s_arkfb_pci_driver_pci_driver == 1) {
#line 2449
    ldv_handler_precall();
#line 2450
    ark_pci_remove(var_group6);
#line 2460
    ldv_s_arkfb_pci_driver_pci_driver = 0;
  } else {

  }
#line 2466
  goto ldv_33930;
  case 16: 
#line 2488
  ldv_handler_precall();
#line 2489
  ark_pci_suspend(var_group7, var_ark_pci_suspend_32_p1);
#line 2504
  goto ldv_33930;
  case 17: 
#line 2526
  ldv_handler_precall();
#line 2527
  ark_pci_resume(var_group7);
#line 2542
  goto ldv_33930;
  default: ;
#line 2543
  goto ldv_33930;
  }
  ldv_33930: ;
  ldv_33951: 
#line 1854
  tmp___1 = nondet_int();
#line 1854
  if (tmp___1 != 0 || ldv_s_arkfb_pci_driver_pci_driver != 0) {
#line 1856
    goto ldv_33950;
  } else {

  }

  ldv_module_exit: 
#line 2572
  ldv_handler_precall();
#line 2573
  arkfb_cleanup();
  ldv_final: 
#line 2580
  ldv_check_final_state();
#line 2583
  return;
}
}
#line 2619 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
void ldv___ldv_spin_lock_4(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2624
  ldv_spin_lock_node_size_lock_of_pglist_data();
#line 2626
  __ldv_spin_lock(ldv_func_arg1);
#line 2627
  return;
}
}
#line 2720 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/dscv/ri/39_7a/drivers/video/arkfb.c.prepared"
void ldv___ldv_spin_lock_14(spinlock_t *ldv_func_arg1 ) 
{ 


  {
#line 2725
  ldv_spin_lock_siglock_of_sighand_struct();
#line 2727
  __ldv_spin_lock(ldv_func_arg1);
#line 2728
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void)  __attribute__((__no_instrument_function__)) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_alloc_lock_of_task_struct  ;
#line 11 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 14
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 14
    ldv_error();
  }
#line 16
  ldv_spin_alloc_lock_of_task_struct = 2;
#line 17
  return;
}
}
#line 20 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_alloc_lock_of_task_struct(void) 
{ 


  {
#line 23
  if (ldv_spin_alloc_lock_of_task_struct == 2) {

  } else {
#line 23
    ldv_error();
  }
#line 25
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 26
  return;
}
}
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 34
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 34
    ldv_error();
  }
#line 37
  is_spin_held_by_another_thread = ldv_undef_int();
#line 40
  if (is_spin_held_by_another_thread) {
#line 43
    return (0);
  } else {
#line 48
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 50
    return (1);
  }
}
}
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_alloc_lock_of_task_struct(void) 
{ 


  {
#line 58
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 58
    ldv_error();
  }
#line 59
  return;
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 67
  is_spin_held_by_another_thread = ldv_undef_int();
#line 70
  if (ldv_spin_alloc_lock_of_task_struct == 1 && ! is_spin_held_by_another_thread) {
#line 73
    return (0);
  } else {
#line 78
    return (1);
  }
}
}
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_alloc_lock_of_task_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 86
  tmp = ldv_spin_is_locked_alloc_lock_of_task_struct();
#line 86
  if (tmp) {
#line 86
    tmp___0 = 0;
  } else {
#line 86
    tmp___0 = 1;
  }
#line 86
  return (tmp___0);
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_alloc_lock_of_task_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 95
  is_spin_contended = ldv_undef_int();
#line 98
  if (is_spin_contended) {
#line 101
    return (0);
  } else {
#line 106
    return (1);
  }
}
}
#line 111 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_alloc_lock_of_task_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 116
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 116
    ldv_error();
  }
#line 119
  atomic_value_after_dec = ldv_undef_int();
#line 122
  if (atomic_value_after_dec == 0) {
#line 125
    ldv_spin_alloc_lock_of_task_struct = 2;
#line 127
    return (1);
  } else {

  }
#line 131
  return (0);
}
}
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_d_lock_of_dentry  ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_d_lock_of_dentry(void) 
{ 


  {
#line 139
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 139
    ldv_error();
  }
#line 141
  ldv_spin_d_lock_of_dentry = 2;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_d_lock_of_dentry(void) 
{ 


  {
#line 148
  if (ldv_spin_d_lock_of_dentry == 2) {

  } else {
#line 148
    ldv_error();
  }
#line 150
  ldv_spin_d_lock_of_dentry = 1;
#line 151
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 159
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 159
    ldv_error();
  }
#line 162
  is_spin_held_by_another_thread = ldv_undef_int();
#line 165
  if (is_spin_held_by_another_thread) {
#line 168
    return (0);
  } else {
#line 173
    ldv_spin_d_lock_of_dentry = 2;
#line 175
    return (1);
  }
}
}
#line 180 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_d_lock_of_dentry(void) 
{ 


  {
#line 183
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 183
    ldv_error();
  }
#line 184
  return;
}
}
#line 187 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_d_lock_of_dentry(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 192
  is_spin_held_by_another_thread = ldv_undef_int();
#line 195
  if (ldv_spin_d_lock_of_dentry == 1 && ! is_spin_held_by_another_thread) {
#line 198
    return (0);
  } else {
#line 203
    return (1);
  }
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_d_lock_of_dentry(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 211
  tmp = ldv_spin_is_locked_d_lock_of_dentry();
#line 211
  if (tmp) {
#line 211
    tmp___0 = 0;
  } else {
#line 211
    tmp___0 = 1;
  }
#line 211
  return (tmp___0);
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_d_lock_of_dentry(void) 
{ 
  int is_spin_contended ;

  {
#line 220
  is_spin_contended = ldv_undef_int();
#line 223
  if (is_spin_contended) {
#line 226
    return (0);
  } else {
#line 231
    return (1);
  }
}
}
#line 236 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_d_lock_of_dentry(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 241
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 241
    ldv_error();
  }
#line 244
  atomic_value_after_dec = ldv_undef_int();
#line 247
  if (atomic_value_after_dec == 0) {
#line 250
    ldv_spin_d_lock_of_dentry = 2;
#line 252
    return (1);
  } else {

  }
#line 256
  return (0);
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_i_lock_of_inode  ;
#line 261 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_i_lock_of_inode(void) 
{ 


  {
#line 264
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 264
    ldv_error();
  }
#line 266
  ldv_spin_i_lock_of_inode = 2;
#line 267
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_i_lock_of_inode(void) 
{ 


  {
#line 273
  if (ldv_spin_i_lock_of_inode == 2) {

  } else {
#line 273
    ldv_error();
  }
#line 275
  ldv_spin_i_lock_of_inode = 1;
#line 276
  return;
}
}
#line 279 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 284
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 284
    ldv_error();
  }
#line 287
  is_spin_held_by_another_thread = ldv_undef_int();
#line 290
  if (is_spin_held_by_another_thread) {
#line 293
    return (0);
  } else {
#line 298
    ldv_spin_i_lock_of_inode = 2;
#line 300
    return (1);
  }
}
}
#line 305 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_i_lock_of_inode(void) 
{ 


  {
#line 308
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 308
    ldv_error();
  }
#line 309
  return;
}
}
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_i_lock_of_inode(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 317
  is_spin_held_by_another_thread = ldv_undef_int();
#line 320
  if (ldv_spin_i_lock_of_inode == 1 && ! is_spin_held_by_another_thread) {
#line 323
    return (0);
  } else {
#line 328
    return (1);
  }
}
}
#line 333 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_i_lock_of_inode(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 336
  tmp = ldv_spin_is_locked_i_lock_of_inode();
#line 336
  if (tmp) {
#line 336
    tmp___0 = 0;
  } else {
#line 336
    tmp___0 = 1;
  }
#line 336
  return (tmp___0);
}
}
#line 340 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_i_lock_of_inode(void) 
{ 
  int is_spin_contended ;

  {
#line 345
  is_spin_contended = ldv_undef_int();
#line 348
  if (is_spin_contended) {
#line 351
    return (0);
  } else {
#line 356
    return (1);
  }
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_i_lock_of_inode(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 366
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 366
    ldv_error();
  }
#line 369
  atomic_value_after_dec = ldv_undef_int();
#line 372
  if (atomic_value_after_dec == 0) {
#line 375
    ldv_spin_i_lock_of_inode = 2;
#line 377
    return (1);
  } else {

  }
#line 381
  return (0);
}
}
#line 383 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_lock_of_NOT_ARG_SIGN  ;
#line 386 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 389
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 389
    ldv_error();
  }
#line 391
  ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 392
  return;
}
}
#line 395 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 398
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 2) {

  } else {
#line 398
    ldv_error();
  }
#line 400
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 401
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 409
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 409
    ldv_error();
  }
#line 412
  is_spin_held_by_another_thread = ldv_undef_int();
#line 415
  if (is_spin_held_by_another_thread) {
#line 418
    return (0);
  } else {
#line 423
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 425
    return (1);
  }
}
}
#line 430 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_lock_of_NOT_ARG_SIGN(void) 
{ 


  {
#line 433
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 433
    ldv_error();
  }
#line 434
  return;
}
}
#line 437 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 442
  is_spin_held_by_another_thread = ldv_undef_int();
#line 445
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1 && ! is_spin_held_by_another_thread) {
#line 448
    return (0);
  } else {
#line 453
    return (1);
  }
}
}
#line 458 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 461
  tmp = ldv_spin_is_locked_lock_of_NOT_ARG_SIGN();
#line 461
  if (tmp) {
#line 461
    tmp___0 = 0;
  } else {
#line 461
    tmp___0 = 1;
  }
#line 461
  return (tmp___0);
}
}
#line 465 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_lock_of_NOT_ARG_SIGN(void) 
{ 
  int is_spin_contended ;

  {
#line 470
  is_spin_contended = ldv_undef_int();
#line 473
  if (is_spin_contended) {
#line 476
    return (0);
  } else {
#line 481
    return (1);
  }
}
}
#line 486 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_lock_of_NOT_ARG_SIGN(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 491
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 491
    ldv_error();
  }
#line 494
  atomic_value_after_dec = ldv_undef_int();
#line 497
  if (atomic_value_after_dec == 0) {
#line 500
    ldv_spin_lock_of_NOT_ARG_SIGN = 2;
#line 502
    return (1);
  } else {

  }
#line 506
  return (0);
}
}
#line 508 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_node_size_lock_of_pglist_data  ;
#line 511 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 514
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 514
    ldv_error();
  }
#line 516
  ldv_spin_node_size_lock_of_pglist_data = 2;
#line 517
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 523
  if (ldv_spin_node_size_lock_of_pglist_data == 2) {

  } else {
#line 523
    ldv_error();
  }
#line 525
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 526
  return;
}
}
#line 529 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 534
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 534
    ldv_error();
  }
#line 537
  is_spin_held_by_another_thread = ldv_undef_int();
#line 540
  if (is_spin_held_by_another_thread) {
#line 543
    return (0);
  } else {
#line 548
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 550
    return (1);
  }
}
}
#line 555 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_node_size_lock_of_pglist_data(void) 
{ 


  {
#line 558
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 558
    ldv_error();
  }
#line 559
  return;
}
}
#line 562 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 567
  is_spin_held_by_another_thread = ldv_undef_int();
#line 570
  if (ldv_spin_node_size_lock_of_pglist_data == 1 && ! is_spin_held_by_another_thread) {
#line 573
    return (0);
  } else {
#line 578
    return (1);
  }
}
}
#line 583 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_node_size_lock_of_pglist_data(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 586
  tmp = ldv_spin_is_locked_node_size_lock_of_pglist_data();
#line 586
  if (tmp) {
#line 586
    tmp___0 = 0;
  } else {
#line 586
    tmp___0 = 1;
  }
#line 586
  return (tmp___0);
}
}
#line 590 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_node_size_lock_of_pglist_data(void) 
{ 
  int is_spin_contended ;

  {
#line 595
  is_spin_contended = ldv_undef_int();
#line 598
  if (is_spin_contended) {
#line 601
    return (0);
  } else {
#line 606
    return (1);
  }
}
}
#line 611 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_node_size_lock_of_pglist_data(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 616
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 616
    ldv_error();
  }
#line 619
  atomic_value_after_dec = ldv_undef_int();
#line 622
  if (atomic_value_after_dec == 0) {
#line 625
    ldv_spin_node_size_lock_of_pglist_data = 2;
#line 627
    return (1);
  } else {

  }
#line 631
  return (0);
}
}
#line 633 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
static int ldv_spin_siglock_of_sighand_struct  ;
#line 636 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_lock_siglock_of_sighand_struct(void) 
{ 


  {
#line 639
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 639
    ldv_error();
  }
#line 641
  ldv_spin_siglock_of_sighand_struct = 2;
#line 642
  return;
}
}
#line 645 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_siglock_of_sighand_struct(void) 
{ 


  {
#line 648
  if (ldv_spin_siglock_of_sighand_struct == 2) {

  } else {
#line 648
    ldv_error();
  }
#line 650
  ldv_spin_siglock_of_sighand_struct = 1;
#line 651
  return;
}
}
#line 654 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_trylock_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 659
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 659
    ldv_error();
  }
#line 662
  is_spin_held_by_another_thread = ldv_undef_int();
#line 665
  if (is_spin_held_by_another_thread) {
#line 668
    return (0);
  } else {
#line 673
    ldv_spin_siglock_of_sighand_struct = 2;
#line 675
    return (1);
  }
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_spin_unlock_wait_siglock_of_sighand_struct(void) 
{ 


  {
#line 683
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 683
    ldv_error();
  }
#line 684
  return;
}
}
#line 687 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_locked_siglock_of_sighand_struct(void) 
{ 
  int is_spin_held_by_another_thread ;

  {
#line 692
  is_spin_held_by_another_thread = ldv_undef_int();
#line 695
  if (ldv_spin_siglock_of_sighand_struct == 1 && ! is_spin_held_by_another_thread) {
#line 698
    return (0);
  } else {
#line 703
    return (1);
  }
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_can_lock_siglock_of_sighand_struct(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 711
  tmp = ldv_spin_is_locked_siglock_of_sighand_struct();
#line 711
  if (tmp) {
#line 711
    tmp___0 = 0;
  } else {
#line 711
    tmp___0 = 1;
  }
#line 711
  return (tmp___0);
}
}
#line 715 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_spin_is_contended_siglock_of_sighand_struct(void) 
{ 
  int is_spin_contended ;

  {
#line 720
  is_spin_contended = ldv_undef_int();
#line 723
  if (is_spin_contended) {
#line 726
    return (0);
  } else {
#line 731
    return (1);
  }
}
}
#line 736 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
int ldv_atomic_dec_and_lock_siglock_of_sighand_struct(void) 
{ 
  int atomic_value_after_dec ;

  {
#line 741
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 741
    ldv_error();
  }
#line 744
  atomic_value_after_dec = ldv_undef_int();
#line 747
  if (atomic_value_after_dec == 0) {
#line 750
    ldv_spin_siglock_of_sighand_struct = 2;
#line 752
    return (1);
  } else {

  }
#line 756
  return (0);
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_initialize(void) 
{ 


  {
#line 763
  ldv_spin_alloc_lock_of_task_struct = 1;
#line 765
  ldv_spin_d_lock_of_dentry = 1;
#line 767
  ldv_spin_i_lock_of_inode = 1;
#line 769
  ldv_spin_lock_of_NOT_ARG_SIGN = 1;
#line 771
  ldv_spin_node_size_lock_of_pglist_data = 1;
#line 773
  ldv_spin_siglock_of_sighand_struct = 1;
#line 774
  return;
}
}
#line 777 "/work/ldvuser/novikov/work/current--X--drivers/video/arkfb.ko--X--defaultlinux--X--39_7a--X--cpachecker/linux/csd_deg_dscv/12/dscv_tempdir/rule-instrumentor/39_7a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 780
  if (ldv_spin_alloc_lock_of_task_struct == 1) {

  } else {
#line 780
    ldv_error();
  }
#line 782
  if (ldv_spin_d_lock_of_dentry == 1) {

  } else {
#line 782
    ldv_error();
  }
#line 784
  if (ldv_spin_i_lock_of_inode == 1) {

  } else {
#line 784
    ldv_error();
  }
#line 786
  if (ldv_spin_lock_of_NOT_ARG_SIGN == 1) {

  } else {
#line 786
    ldv_error();
  }
#line 788
  if (ldv_spin_node_size_lock_of_pglist_data == 1) {

  } else {
#line 788
    ldv_error();
  }
#line 790
  if (ldv_spin_siglock_of_sighand_struct == 1) {

  } else {
#line 790
    ldv_error();
  }
#line 791
  return;
}
}
