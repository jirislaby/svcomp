/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 42 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 27 "include/linux/types.h"
typedef unsigned short umode_t;
#line 28 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 29 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 30 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 35 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 38 "include/linux/types.h"
typedef _Bool bool;
#line 40 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 41 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 54 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 63 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 68 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 78 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 111 "include/linux/types.h"
typedef __s32 int32_t;
#line 115 "include/linux/types.h"
typedef __u8 uint8_t;
#line 117 "include/linux/types.h"
typedef __u32 uint32_t;
#line 120 "include/linux/types.h"
typedef __u64 uint64_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 143 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 155 "include/linux/types.h"
typedef u64 dma_addr_t;
#line 179 "include/linux/types.h"
typedef __u16 __be16;
#line 181 "include/linux/types.h"
typedef __u32 __be32;
#line 186 "include/linux/types.h"
typedef __u32 __wsum;
#line 202 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 203 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 215 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 215 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 220 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 220 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 221 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 226
struct hlist_node;
#line 226 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 230 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 241 "include/linux/types.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 146 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 305 "include/linux/printk.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 18 ;
   unsigned char flags ;
};
#line 46 "include/linux/dynamic_debug.h"
struct device;
#line 51
struct net_device;
#line 57 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 71 "include/asm-generic/bug.h"
struct completion;
#line 72
struct pt_regs;
#line 345 "include/linux/kernel.h"
struct pid;
#line 783
struct timespec;
#line 784
struct compat_timespec;
#line 785 "include/linux/kernel.h"
struct __anonstruct_futex_9 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 785 "include/linux/kernel.h"
struct __anonstruct_nanosleep_10 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 785
struct pollfd;
#line 785 "include/linux/kernel.h"
struct __anonstruct_poll_11 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 785 "include/linux/kernel.h"
union __anonunion_ldv_2080_8 {
   struct __anonstruct_futex_9 futex ;
   struct __anonstruct_nanosleep_10 nanosleep ;
   struct __anonstruct_poll_11 poll ;
};
#line 785 "include/linux/kernel.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_2080_8 ldv_2080 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct page;
#line 26 "include/asm-generic/getorder.h"
struct task_struct;
#line 27
struct exec_domain;
#line 28
struct mm_struct;
#line 215 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2212_13 {
   unsigned int a ;
   unsigned int b ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct __anonstruct_ldv_2227_14 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
union __anonunion_ldv_2228_12 {
   struct __anonstruct_ldv_2212_13 ldv_2212 ;
   struct __anonstruct_ldv_2227_14 ldv_2227 ;
};
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_ldv_2228_12 ldv_2228 ;
};
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 192 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_16 {
   pgdval_t pgd ;
};
#line 194 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_16 pgd_t;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 290
struct file;
#line 305
struct seq_file;
#line 337
struct thread_struct;
#line 339
struct cpumask;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_2860_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_2860_19 ldv_2860 ;
};
#line 306 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 636 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 233 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt.h"
struct static_key;
#line 91 "include/linux/personality.h"
struct map_segment;
#line 91 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5235_24 {
   u64 rip ;
   u64 rdp ;
};
#line 296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_5241_25 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5242_23 {
   struct __anonstruct_ldv_5235_24 ldv_5235 ;
   struct __anonstruct_ldv_5241_25 ldv_5241 ;
};
#line 296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_5251_26 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 296 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_5242_23 ldv_5242 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_5251_26 ldv_5251 ;
};
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 351 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 362 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned int has_fpu ;
   union thread_xstate *state ;
};
#line 424
struct kmem_cache;
#line 425
struct perf_event;
#line 426 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_28 {
   unsigned long seg ;
};
#line 625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_28 mm_segment_t;
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   unsigned char sig_on_uaccess_error : 1 ;
   unsigned char uaccess_err : 1 ;
};
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u16 __ticket_t;
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef u32 __ticketpair_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __raw_tickets {
   __ticket_t head ;
   __ticket_t tail ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
union __anonunion_ldv_5960_29 {
   __ticketpair_t head_tail ;
   struct __raw_tickets tickets ;
};
#line 26 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct arch_spinlock {
   union __anonunion_ldv_5960_29 ldv_5960 ;
};
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
struct __anonstruct_ldv_5967_31 {
   u32 read ;
   s32 write ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
union __anonunion_arch_rwlock_t_30 {
   s64 lock ;
   struct __anonstruct_ldv_5967_31 ldv_5967 ;
};
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwlock.h"
typedef union __anonunion_arch_rwlock_t_30 arch_rwlock_t;
#line 34
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 26 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 556 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_6175_33 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_6176_32 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_6175_33 ldv_6175 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_6176_32 ldv_6176 ;
};
#line 76 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_34 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_34 rwlock_t;
#line 36 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_35 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 36 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_35 seqlock_t;
#line 110 "include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
};
#line 121 "include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 233 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 286 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_36 {
   unsigned long bits[16U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_36 nodemask_t;
#line 670 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 171
struct rw_semaphore;
#line 172 "include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 129 "include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 187 "include/linux/rcupdate.h"
struct notifier_block;
#line 239 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 793 "include/linux/mmzone.h"
struct ctl_table;
#line 312 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 341
struct tvec_base;
#line 342 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};
#line 289 "include/linux/timer.h"
struct hrtimer;
#line 290
enum hrtimer_restart;
#line 302
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_late)(struct device * ) ;
   int (*resume_early)(struct device * ) ;
   int (*freeze_late)(struct device * ) ;
   int (*thaw_early)(struct device * ) ;
   int (*poweroff_late)(struct device * ) ;
   int (*restore_early)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 289
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 296
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 304
struct wakeup_source;
#line 494 "include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
};
#line 499
struct dev_pm_qos_request;
#line 499
struct pm_qos_constraints;
#line 499 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   bool is_prepared ;
   bool is_suspended ;
   bool ignore_children ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char irq_safe : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   ktime_t suspend_time ;
   s64 max_time_suspended_ns ;
   struct dev_pm_qos_request *pq_req ;
   struct pm_subsys_data *subsys_data ;
   struct pm_qos_constraints *constraints ;
};
#line 558 "include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_101 {
   void *ldt ;
   int size ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
};
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_101 mm_context_t;
#line 18 "include/asm-generic/pci_iomap.h"
struct vm_area_struct;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/xen/hypervisor.h"
struct bio_vec;
#line 18 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 948
struct ctl_table_header;
#line 966 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 986 "include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 1027 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};
#line 1049 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1057 "include/linux/sysctl.h"
struct __anonstruct_ldv_12521_129 {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
};
#line 1057 "include/linux/sysctl.h"
union __anonunion_ldv_12523_128 {
   struct __anonstruct_ldv_12521_129 ldv_12521 ;
   struct rcu_head rcu ;
};
#line 1057 "include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_ldv_12523_128 ldv_12523 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 37 "include/linux/kmod.h"
struct cred;
#line 18 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 19 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 23 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 24 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 193 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 201 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 445
struct sock;
#line 446
struct kobject;
#line 447
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 453 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void *(*grab_current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
   void (*drop_ns)(void * ) ;
};
#line 57 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   umode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   umode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 62 "include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                   loff_t  , size_t  ) ;
   ssize_t (*write)(struct file * , struct kobject * , struct bin_attribute * , char * ,
                    loff_t  , size_t  ) ;
   int (*mmap)(struct file * , struct kobject * , struct bin_attribute * , struct vm_area_struct * ) ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct kobject * , struct attribute  const  * ) ;
};
#line 117
struct sysfs_dirent;
#line 28 "include/linux/bug.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 215
struct kernel_param;
#line 216 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string;
#line 49
struct kparam_array;
#line 49 "include/linux/moduleparam.h"
union __anonunion_ldv_13293_134 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 49 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_13293_134 ldv_13293 ;
};
#line 64 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 70 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   void *elem ;
};
#line 430 "include/linux/moduleparam.h"
struct static_key {
   atomic_t enabled ;
};
#line 225 "include/linux/jump_label.h"
struct tracepoint;
#line 226 "include/linux/jump_label.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   struct static_key key ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 86 "include/linux/tracepoint.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 27 "include/linux/export.h"
struct mod_arch_specific {

};
#line 36 "include/linux/module.h"
struct module_param_attrs;
#line 36 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 45 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module_kobject * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module_kobject * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 71
struct exception_table_entry;
#line 200
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 206 "include/linux/module.h"
struct module_ref {
   unsigned long incs ;
   unsigned long decs ;
};
#line 221
struct module_sect_attrs;
#line 221
struct module_notes_attrs;
#line 221
struct ftrace_event_call;
#line 221 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const  *tracepoints_ptrs ;
   unsigned int num_trace_bprintk_fmt ;
   char const   **trace_bprintk_fmt_start ;
   struct ftrace_event_call **trace_events ;
   unsigned int num_trace_events ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 336 "include/linux/irq.h"
struct proc_dir_entry;
#line 337
struct timer_rand_state;
#line 41 "include/asm-generic/sections.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_node;
#line 189 "include/linux/hardirq.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 11 "include/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;
#line 18 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 40 "include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_136 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_136 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_137 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_137 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_138 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_138 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_139 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_139 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_140 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_140 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_141 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_141 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_142 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_142 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 148 "include/linux/if.h"
union __anonunion_ifs_ifsu_143 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 148 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_143 ifs_ifsu ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifrn_144 {
   char ifrn_name[16U] ;
};
#line 166 "include/linux/if.h"
union __anonunion_ifr_ifru_145 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 166 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_144 ifr_ifrn ;
   union __anonunion_ifr_ifru_145 ifr_ifru ;
};
#line 230 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 132 "include/linux/if_ether.h"
struct prio_tree_node;
#line 132 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 181
struct address_space;
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_15504_148 {
   unsigned long index ;
   void *freelist ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_15514_152 {
   unsigned short inuse ;
   unsigned short objects : 15 ;
   unsigned char frozen : 1 ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_15515_151 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_15514_152 ldv_15514 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_15517_150 {
   union __anonunion_ldv_15515_151 ldv_15515 ;
   atomic_t _count ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_15518_149 {
   unsigned long counters ;
   struct __anonstruct_ldv_15517_150 ldv_15517 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_15519_147 {
   union __anonunion_ldv_15504_148 ldv_15504 ;
   union __anonunion_ldv_15518_149 ldv_15518 ;
};
#line 182 "include/linux/rbtree.h"
struct __anonstruct_ldv_15526_154 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_15527_153 {
   struct list_head lru ;
   struct __anonstruct_ldv_15526_154 ldv_15526 ;
};
#line 182 "include/linux/rbtree.h"
union __anonunion_ldv_15532_155 {
   unsigned long private ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 182 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   struct address_space *mapping ;
   struct __anonstruct_ldv_15519_147 ldv_15519 ;
   union __anonunion_ldv_15527_153 ldv_15527 ;
   union __anonunion_ldv_15532_155 ldv_15532 ;
   unsigned long debug_flags ;
};
#line 192 "include/linux/mm_types.h"
struct __anonstruct_vm_set_157 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 192 "include/linux/mm_types.h"
union __anonunion_shared_156 {
   struct __anonstruct_vm_set_157 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 192
struct anon_vma;
#line 192
struct vm_operations_struct;
#line 192
struct mempolicy;
#line 192 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_156 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};
#line 255 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 261 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 274 "include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};
#line 287
struct linux_binfmt;
#line 287
struct mmu_notifier_mm;
#line 287 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   pgtable_t pmd_huge_pte ;
   struct cpumask cpumask_allocation ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_15379 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 53 "include/linux/net.h"
typedef enum ldv_15379 socket_state;
#line 174 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 175
struct pipe_inode_info;
#line 176
struct inode;
#line 177
struct net;
#line 194
struct fasync_struct;
#line 194 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 127 "include/linux/net.h"
struct proto_ops;
#line 127 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 153
struct kiocb;
#line 154 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
   void (*set_peek_off)(struct sock * , int  ) ;
};
#line 86 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   unsigned long tid ;
   struct page *page ;
   struct page *partial ;
   int node ;
   unsigned int stat[24U] ;
};
#line 52 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 63 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 73 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   unsigned long min_partial ;
   int size ;
   int objsize ;
   int offset ;
   int cpu_partial ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   int reserved ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct subsys_private;
#line 22
struct bus_type;
#line 23
struct device_node;
#line 24
struct iommu_ops;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   char const   *dev_name ;
   struct device *dev_root ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
};
#line 125
struct device_type;
#line 182
struct of_device_id;
#line 182 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   struct of_device_id  const  *of_match_table ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 245 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 299
struct class_attribute;
#line 299 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct bin_attribute *dev_bin_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct subsys_private *p ;
};
#line 394 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
   void const   *(*namespace)(struct class * , struct class_attribute  const  * ) ;
};
#line 447 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , umode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 474 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 557 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 567
struct dma_coherent_mem;
#line 567 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type  const  *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 681 "include/linux/device.h"
struct wakeup_source {
   char const   *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 991 "include/linux/device.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 92 "include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
};
#line 14 "include/linux/shrinker.h"
struct shrinker {
   int (*shrink)(struct shrinker * , struct shrink_control * ) ;
   int seeks ;
   long batch ;
   struct list_head list ;
   atomic_long_t nr_in_batch ;
};
#line 43
struct file_ra_state;
#line 44
struct user_struct;
#line 45
struct writeback_control;
#line 177 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 194 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 35 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 972 "include/linux/dmaengine.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 12 "include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};
#line 50
struct hrtimer_clock_base;
#line 51
struct hrtimer_cpu_base;
#line 60
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 65 "include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 132 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 162 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned long active_bases ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
   struct hrtimer_clock_base clock_base[3U] ;
};
#line 458 "include/linux/hrtimer.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 72 "include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 15 "include/linux/netdev_features.h"
typedef u64 netdev_features_t;
#line 56 "include/linux/netdev_features.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 115 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 125 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 316 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 317
struct sec_path;
#line 317 "include/linux/skbuff.h"
struct __anonstruct_ldv_21110_161 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 317 "include/linux/skbuff.h"
union __anonunion_ldv_21111_160 {
   __wsum csum ;
   struct __anonstruct_ldv_21110_161 ldv_21110 ;
};
#line 317 "include/linux/skbuff.h"
union __anonunion_ldv_21146_162 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 317 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_21111_160 ldv_21111 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u32 rxhash ;
   __u16 vlan_tci ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char ooo_okay : 1 ;
   unsigned char l4_rxhash : 1 ;
   unsigned char wifi_acked_valid : 1 ;
   unsigned char wifi_acked : 1 ;
   unsigned char no_fcs : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_21146_162 ldv_21146 ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 518
struct dst_entry;
#line 553
struct rtable;
#line 117 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 104
struct dentry;
#line 105
struct user_namespace;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 309 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
   __u32 spoofchk ;
};
#line 393 "include/linux/if_link.h"
struct plist_head {
   struct list_head node_list ;
};
#line 84 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 254
struct file_operations;
#line 71 "include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
};
#line 33 "include/linux/pm_qos.h"
struct dev_pm_qos_request {
   struct plist_node node ;
   struct device *dev ;
};
#line 38
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2
} ;
#line 44 "include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};
#line 427 "include/linux/rculist.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 98 "include/linux/sem.h"
struct sem_undo_list;
#line 98 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 108
struct bio;
#line 109
struct bio_integrity_payload;
#line 110
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_node;
#line 89 "include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 36 "include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 114 "include/linux/rculist_bl.h"
struct nameidata;
#line 115
struct path;
#line 116
struct vfsmount;
#line 117 "include/linux/rculist_bl.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 72 "include/linux/dcache.h"
struct dentry_operations;
#line 72
struct super_block;
#line 72 "include/linux/dcache.h"
union __anonunion_d_u_166 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 72 "include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   unsigned int d_count ;
   spinlock_t d_lock ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   union __anonunion_d_u_166 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
};
#line 123 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry  const  * , struct inode  const  * , struct qstr * ) ;
   int (*d_compare)(struct dentry  const  * , struct inode  const  * , struct dentry  const  * ,
                    struct inode  const  * , unsigned int  , char const   * , struct qstr  const  * ) ;
   int (*d_delete)(struct dentry  const  * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_prune)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
   struct vfsmount *(*d_automount)(struct path * ) ;
   int (*d_manage)(struct dentry * , bool  ) ;
};
#line 402 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 56 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 56 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 258
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 265
struct pid_namespace;
#line 265 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 175 "include/linux/pid.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
} ;
#line 44
struct export_operations;
#line 45
struct hd_geometry;
#line 46
struct kstatfs;
#line 430 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 176 "include/linux/percpu_counter.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 275 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 303 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 314 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 328 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , struct path * ) ;
   int (*quota_on_meta)(struct super_block * , int  , int  ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 344 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 390 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 580 "include/linux/fs.h"
union __anonunion_arg_168 {
   char *buf ;
   void *data ;
};
#line 580 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_167 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_168 arg ;
   int error ;
};
#line 580 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_167 read_descriptor_t;
#line 583 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   void (*freepage)(struct page * ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * , enum migrate_mode  ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 637
struct backing_dev_info;
#line 638 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   struct mutex i_mmap_mutex ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 659
struct request_queue;
#line 660
struct hd_struct;
#line 660
struct gendisk;
#line 660 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 732
struct posix_acl;
#line 733
struct inode_operations;
#line 733 "include/linux/fs.h"
union __anonunion_ldv_24315_169 {
   unsigned int const   i_nlink ;
   unsigned int __i_nlink ;
};
#line 733 "include/linux/fs.h"
union __anonunion_ldv_24334_170 {
   struct list_head i_dentry ;
   struct rcu_head i_rcu ;
};
#line 733
struct file_lock;
#line 733
struct cdev;
#line 733 "include/linux/fs.h"
union __anonunion_ldv_24351_171 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 733 "include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   uid_t i_uid ;
   gid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations  const  *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_ldv_24315_169 ldv_24315 ;
   dev_t i_rdev ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   blkcnt_t i_blocks ;
   loff_t i_size ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_ldv_24334_170 ldv_24334 ;
   atomic_t i_count ;
   unsigned int i_blkbits ;
   u64 i_version ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   struct file_operations  const  *i_fop ;
   struct file_lock *i_flock ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_24351_171 ldv_24351 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   atomic_t i_readcount ;
   void *i_private ;
};
#line 936 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 944 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 967 "include/linux/fs.h"
union __anonunion_f_u_172 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 967 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_172 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1106
struct files_struct;
#line 1106 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1107 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1112 "include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*lm_notify)(struct file_lock * ) ;
   int (*lm_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*lm_release_private)(struct file_lock * ) ;
   void (*lm_break)(struct file_lock * ) ;
   int (*lm_change)(struct file_lock ** , int  ) ;
};
#line 1129
struct nlm_lockowner;
#line 1130 "include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 14 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 15 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_174 {
   struct list_head link ;
   int state ;
};
#line 19 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_173 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_174 afs ;
};
#line 19 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_173 fl_u ;
};
#line 1215 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1407
struct file_system_type;
#line 1407
struct super_operations;
#line 1407
struct xattr_handler;
#line 1407
struct mtd_info;
#line 1407 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_mounts ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   spinlock_t s_inode_lru_lock ;
   struct list_head s_inode_lru ;
   int s_nr_inodes_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations  const  *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
};
#line 1553 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1591
struct block_device_operations;
#line 1592 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , loff_t  , loff_t  , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
   long (*fallocate)(struct file * , int  , loff_t  , loff_t  ) ;
};
#line 1627 "include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   int (*permission)(struct inode * , int  ) ;
   struct posix_acl *(*get_acl)(struct inode * , int  ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   int (*create)(struct inode * , struct dentry * , umode_t  , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , umode_t  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , umode_t  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   void (*truncate)(struct inode * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1672 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * , int  ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct dentry * ) ;
   int (*show_devname)(struct seq_file * , struct dentry * ) ;
   int (*show_path)(struct seq_file * , struct dentry * ) ;
   int (*show_stats)(struct seq_file * , struct dentry * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*nr_cached_objects)(struct super_block * ) ;
   void (*free_cached_objects)(struct super_block * , int  ) ;
};
#line 1824 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 15
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_175 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_175 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_177 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_178 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_179 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_180 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_181 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_182 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_176 {
   int _pad[28U] ;
   struct __anonstruct__kill_177 _kill ;
   struct __anonstruct__timer_178 _timer ;
   struct __anonstruct__rt_179 _rt ;
   struct __anonstruct__sigchld_180 _sigchld ;
   struct __anonstruct__sigfault_181 _sigfault ;
   struct __anonstruct__sigpoll_182 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_176 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   raw_spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_185 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_185 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 85 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct key;
#line 34
struct signal_struct;
#line 35
struct key_type;
#line 37
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26800_186 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_187 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_188 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26800_186 ldv_26800 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_187 type_data ;
   union __anonunion_payload_188 payload ;
};
#line 316
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 264
struct llist_node;
#line 65 "include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 186
struct futex_pi_state;
#line 187
struct robust_list_head;
#line 188
struct bio_list;
#line 189
struct fs_struct;
#line 190
struct perf_event_context;
#line 191
struct blk_plug;
#line 150 "include/linux/sched.h"
struct cfs_rq;
#line 386
struct kioctx;
#line 387 "include/linux/sched.h"
union __anonunion_ki_obj_189 {
   void *user ;
   struct task_struct *tsk ;
};
#line 387
struct eventfd_ctx;
#line 387 "include/linux/sched.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_189 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct list_head ki_batch ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 162 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 178 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 407 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 450 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 458 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 465 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 482 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   raw_spinlock_t lock ;
};
#line 518
struct autogroup;
#line 519
struct tty_struct;
#line 519
struct taskstats;
#line 519
struct tty_audit_buf;
#line 519 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned char is_child_subreaper : 1 ;
   unsigned char has_child_subreaper : 1 ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   int oom_adj ;
   int oom_score_adj ;
   int oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};
#line 700 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 745
struct reclaim_state;
#line 746 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 761 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1070
struct io_context;
#line 1099
struct rq;
#line 1100 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   bool (*yield_to_task)(struct rq * , struct task_struct * , bool  ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * ) ;
   void (*switched_to)(struct rq * , struct task_struct * ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1166 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1171 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1206 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1232
struct rt_rq;
#line 1232 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1256
struct mem_cgroup;
#line 1256 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long nr_pages ;
   unsigned long memsw_nr_pages ;
};
#line 1617
struct css_set;
#line 1617
struct compat_robust_list_head;
#line 1617
struct ftrace_ret_stack;
#line 1617 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   unsigned char brk_randomized : 1 ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int jobctl ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   unsigned char sched_contributes_to_load : 1 ;
   unsigned char irq_thread : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
   atomic_t ptrace_bp_refcnt ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;
#line 37 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};
#line 197 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;
#line 205 "include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 209 "include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 560 "include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 66 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 106 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 121 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 129 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 138 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 236 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 258 "include/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 286 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 337 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 359 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 380 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 413 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 429 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 449 "include/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[60U] ;
};
#line 460 "include/linux/ethtool.h"
struct ethtool_flow_ext {
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 466 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 491 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 649 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 657 "include/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 769
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
} ;
#line 803 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*set_phys_id)(struct net_device * , enum ethtool_phys_id_state  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , u32 * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   u32 (*get_rxfh_indir_size)(struct net_device * ) ;
   int (*get_rxfh_indir)(struct net_device * , u32 * ) ;
   int (*set_rxfh_indir)(struct net_device * , u32 const   * ) ;
   void (*get_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*set_channels)(struct net_device * , struct ethtool_channels * ) ;
   int (*get_dump_flag)(struct net_device * , struct ethtool_dump * ) ;
   int (*get_dump_data)(struct net_device * , struct ethtool_dump * , void * ) ;
   int (*set_dump)(struct net_device * , struct ethtool_dump * ) ;
};
#line 972
struct prot_inuse;
#line 973 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[27U] ;
};
#line 67 "include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 72 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 79 "include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[5U] ;
};
#line 83 "include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 89 "include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 93 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 100 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 106 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[83U] ;
};
#line 112 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 118 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[1U] ;
   struct ipstats_mib *ip_statistics[1U] ;
   struct linux_mib *net_statistics[1U] ;
   struct udp_mib *udp_statistics[1U] ;
   struct udp_mib *udplite_statistics[1U] ;
   struct icmp_mib *icmp_statistics[1U] ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[1U] ;
   struct udp_mib *udplite_stats_in6[1U] ;
   struct ipstats_mib *ipv6_statistics[1U] ;
   struct icmpv6_mib *icmpv6_statistics[1U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics[1U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   unsigned int sysctl_ping_group_range[2U] ;
   long sysctl_tcp_mem[3U] ;
   atomic_t rt_genid ;
   atomic_t dev_addr_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 71 "include/net/netns/ipv4.h"
struct neighbour;
#line 71 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   unsigned int (*default_advmss)(struct dst_entry  const  * ) ;
   unsigned int (*mtu)(struct dst_entry  const  * ) ;
   u32 *(*cow_metrics)(struct dst_entry * , unsigned long  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry  const  * , void const   * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 67 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 335 "include/linux/in.h"
union __anonunion_in6_u_198 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 335 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_198 in6_u ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   umode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
   spinlock_t pde_unload_lock ;
   u8 namelen ;
   char name[] ;
};
#line 392 "include/linux/netfilter.h"
struct ebt_table;
#line 393 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18
struct nf_ct_event_notifier;
#line 18
struct nf_exp_event_notifier;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   char *slabname ;
};
#line 484 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63
struct netns_ipvs;
#line 64 "include/net/netns/xfrm.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
};
#line 105 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   int poll_event ;
   void *private ;
};
#line 29 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 291 "include/net/net_namespace.h"
struct dsa_chip_data {
   struct device *mii_bus ;
   int sw_addr ;
   char *port_names[12U] ;
   s8 *rtable ;
};
#line 46 "include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};
#line 61
struct dsa_switch;
#line 61 "include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   __be16 tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};
#line 94
struct dsa_switch_driver;
#line 94
struct mii_bus;
#line 94 "include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct mii_bus *master_mii_bus ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};
#line 146 "include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   __be16 tag_protocol ;
   int priv_size ;
   char *(*probe)(struct mii_bus * , int  ) ;
   int (*setup)(struct dsa_switch * ) ;
   int (*set_addr)(struct dsa_switch * , u8 * ) ;
   int (*phy_read)(struct dsa_switch * , int  , int  ) ;
   int (*phy_write)(struct dsa_switch * , int  , int  , u16  ) ;
   void (*poll_link)(struct dsa_switch * ) ;
   void (*get_strings)(struct dsa_switch * , int  , uint8_t * ) ;
   void (*get_ethtool_stats)(struct dsa_switch * , int  , uint64_t * ) ;
   int (*get_sset_count)(struct dsa_switch * ) ;
};
#line 200 "include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 69 "include/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 89 "include/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 112 "include/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 127 "include/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 156 "include/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 41 "include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_setets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_setpfc)(struct net_device * , struct ieee_pfc * ) ;
   int (*ieee_getapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_setapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_delapp)(struct net_device * , struct dcb_app * ) ;
   int (*ieee_peer_getets)(struct net_device * , struct ieee_ets * ) ;
   int (*ieee_peer_getpfc)(struct net_device * , struct ieee_pfc * ) ;
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   int (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   int (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
   u8 (*getfeatcfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setfeatcfg)(struct net_device * , int  , u8  ) ;
   u8 (*getdcbx)(struct net_device * ) ;
   u8 (*setdcbx)(struct net_device * , u8  ) ;
   int (*peer_getappinfo)(struct net_device * , struct dcb_peer_app_info * , u16 * ) ;
   int (*peer_getapptable)(struct net_device * , struct dcb_app * ) ;
   int (*cee_peer_getpg)(struct net_device * , struct cee_pg * ) ;
   int (*cee_peer_getpfc)(struct net_device * , struct cee_pfc * ) ;
};
#line 101 "include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct idr_layer {
   unsigned long bitmap ;
   struct idr_layer *ary[64U] ;
   int count ;
   int layer ;
   struct rcu_head rcu_head ;
};
#line 58 "include/linux/idr.h"
struct idr {
   struct idr_layer *top ;
   struct idr_layer *id_free ;
   int layers ;
   int id_free_cnt ;
   spinlock_t lock ;
};
#line 154
struct cgroupfs_root;
#line 155
struct cgroup_subsys;
#line 156
struct cgroup;
#line 157
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 149 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 215 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 426
struct cgroup_taskset;
#line 436 "include/linux/cgroup.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*create)(struct cgroup * ) ;
   int (*pre_destroy)(struct cgroup * ) ;
   void (*destroy)(struct cgroup * ) ;
   int (*can_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*cancel_attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*attach)(struct cgroup * , struct cgroup_taskset * ) ;
   void (*fork)(struct task_struct * ) ;
   void (*exit)(struct cgroup * , struct cgroup * , struct task_struct * ) ;
   int (*populate)(struct cgroup_subsys * , struct cgroup * ) ;
   void (*post_clone)(struct cgroup * ) ;
   void (*bind)(struct cgroup * ) ;
   int subsys_id ;
   int active ;
   int disabled ;
   int early_init ;
   bool use_id ;
   char const   *name ;
   struct mutex hierarchy_mutex ;
   struct lock_class_key subsys_key ;
   struct cgroupfs_root *root ;
   struct list_head sibling ;
   struct idr idr ;
   spinlock_t id_lock ;
   struct module *module ;
};
#line 606 "include/linux/cgroup.h"
struct netprio_map {
   struct rcu_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 74 "include/net/netprio_cgroup.h"
struct netpoll_info;
#line 75
struct phy_device;
#line 76
struct wireless_dev;
#line 77
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 114 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 133 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 219
struct neigh_parms;
#line 239 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 244 "include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 273 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * , __be16  ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 367
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
} ;
#line 415 "include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 416 "include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff ** );
#line 524
struct Qdisc;
#line 524 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
};
#line 588 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 600 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 612 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 664 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};
#line 674 "include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct rcu_head rcu ;
   u16 queues[0U] ;
};
#line 687 "include/linux/netdevice.h"
struct xps_dev_maps {
   struct rcu_head rcu ;
   struct xps_map *cpu_map[0U] ;
};
#line 698 "include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 709 "include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 725 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device * , int  , bool  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_setup_tc)(struct net_device * , u8  ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device * , u16  , struct scatterlist * ,
                              unsigned int  ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device * , struct netdev_fcoe_hbainfo * ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
   int (*ndo_rx_flow_steer)(struct net_device * , struct sk_buff  const  * , u16  ,
                            u32  ) ;
   int (*ndo_add_slave)(struct net_device * , struct net_device * ) ;
   int (*ndo_del_slave)(struct net_device * , struct net_device * ) ;
   netdev_features_t (*ndo_fix_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_set_features)(struct net_device * , netdev_features_t  ) ;
   int (*ndo_neigh_construct)(struct neighbour * ) ;
   void (*ndo_neigh_destroy)(struct neighbour * ) ;
};
#line 1019
struct iw_handler_def;
#line 1019
struct iw_public_data;
#line 1019
struct vlan_info;
#line 1019
struct in_device;
#line 1019
struct dn_dev;
#line 1019
struct inet6_dev;
#line 1019
struct cpu_rmap;
#line 1019
struct pcpu_lstats;
#line 1019
struct pcpu_tstats;
#line 1019
struct pcpu_dstats;
#line 1019 "include/linux/netdevice.h"
union __anonunion_ldv_33245_205 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1019
struct garp_port;
#line 1019
struct rtnl_link_ops;
#line 1019 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char neigh_priv_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   bool uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct cpu_rmap *rx_cpu_rmap ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned char reg_state ;
   bool dismantle ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_33245_205 ldv_33245 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   int group ;
};
#line 99 "include/linux/security.h"
struct xfrm_policy;
#line 100
struct xfrm_state;
#line 120
struct request_sock;
#line 443 "include/linux/memcontrol.h"
struct res_counter {
   unsigned long long usage ;
   unsigned long long max_usage ;
   unsigned long long limit ;
   unsigned long long soft_limit ;
   unsigned long long failcnt ;
   spinlock_t lock ;
   struct res_counter *parent ;
};
#line 225 "include/linux/res_counter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 37 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   unsigned int (*bpf_func)(struct sk_buff  const  * , struct sock_filter  const  * ) ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long _key ;
};
#line 819 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 27 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 130
struct neigh_table;
#line 130 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len_bytes ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 119 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct neighbour * , struct sk_buff * ) ;
   int (*connected_output)(struct neighbour * , struct sk_buff * ) ;
};
#line 127 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 137 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct rcu_head rcu ;
};
#line 150 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32 * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 411
struct dn_route;
#line 411 "include/net/neighbour.h"
union __anonunion_ldv_37335_210 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 411 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct neighbour *_neighbour ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int flags ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_37335_210 ldv_37335 ;
};
#line 122 "include/net/sock.h"
struct __anonstruct_socket_lock_t_211 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 122 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_211 socket_lock_t;
#line 122
struct proto;
#line 123 "include/net/sock.h"
union __anonunion_ldv_37562_212 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 123 "include/net/sock.h"
union __anonunion_ldv_37570_213 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 123 "include/net/sock.h"
union __anonunion_ldv_37577_214 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 123 "include/net/sock.h"
struct sock_common {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
   union __anonunion_ldv_37562_212 ldv_37562 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_37570_213 ldv_37570 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_ldv_37577_214 ldv_37577 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};
#line 189
struct cg_proto;
#line 190 "include/net/sock.h"
struct __anonstruct_sk_backlog_215 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 190 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_215 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct sk_buff_head sk_async_wait_queue ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 786
struct request_sock_ops;
#line 787
struct timewait_sock_ops;
#line 788
struct inet_hashinfo;
#line 789
struct raw_hashinfo;
#line 790
struct udp_table;
#line 790 "include/net/sock.h"
union __anonunion_h_216 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 790 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_ioctl)(struct sock * , unsigned int  , unsigned long  ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   void (*clear_sk)(struct sock * , int  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_216 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct cgroup * , struct cgroup_subsys * ) ;
   void (*destroy_cgroup)(struct cgroup * ) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup * ) ;
};
#line 908 "include/net/sock.h"
struct cg_proto {
   void (*enter_memory_pressure)(struct sock * ) ;
   struct res_counter *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   struct mem_cgroup *memcg ;
};
#line 189 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 202 "include/linux/drbd.h"
struct __anonstruct_ldv_38894_217 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 202 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_38894_217 ldv_38894 ;
   unsigned int i ;
};
#line 274
enum drbd_state_rv {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 368
struct crypto_ablkcipher;
#line 369
struct crypto_async_request;
#line 370
struct crypto_aead;
#line 371
struct crypto_blkcipher;
#line 372
struct crypto_hash;
#line 373
struct crypto_rng;
#line 374
struct crypto_tfm;
#line 375
struct crypto_type;
#line 376
struct aead_givcrypt_request;
#line 377
struct skcipher_givcrypt_request;
#line 128 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 137 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 150 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 176 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 190 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 195 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 214 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 229 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 246 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 255 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 261 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 270 "include/linux/crypto.h"
union __anonunion_cra_u_218 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 270 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_218 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 324 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 344 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 359 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 368 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 376 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 388 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 395 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 403 "include/linux/crypto.h"
union __anonunion_crt_u_219 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 403 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_219 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 432 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 436 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 440 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 452 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 456 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 1283 "include/linux/crypto.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 169 "include/linux/jhash.h"
struct request_values {

};
#line 172 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 253 "include/net/inet_sock.h"
struct inet_peer;
#line 367 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
   void *(*twsk_getpeer)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct rcu_head rcu_head ;
};
#line 146 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 153
struct disk_events;
#line 154
struct blk_integrity;
#line 154 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , umode_t * ) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 11 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 54 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char tagged_writepages : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
};
#line 80
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 47 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   spinlock_t list_lock ;
};
#line 64 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct percpu_counter bdi_stat[4U] ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 79 "include/linux/mempool.h"
union __anonunion_ldv_42162_226 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 79 "include/linux/mempool.h"
union __anonunion_ldv_42166_227 {
   struct hlist_node ioc_node ;
   struct rcu_head __rcu_head ;
};
#line 79 "include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_ldv_42162_226 ldv_42162 ;
   union __anonunion_ldv_42166_227 ldv_42166 ;
   unsigned int flags ;
};
#line 96 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 90 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 365 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 86
struct bsg_job;
#line 39 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 40 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 52
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 64 "include/linux/blkdev.h"
union __anonunion_ldv_42589_228 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 64 "include/linux/blkdev.h"
struct __anonstruct_elv_230 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 64 "include/linux/blkdev.h"
struct __anonstruct_flush_231 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 64 "include/linux/blkdev.h"
union __anonunion_ldv_42600_229 {
   struct __anonstruct_elv_230 elv ;
   struct __anonstruct_flush_231 flush ;
};
#line 64 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_42589_228 ldv_42589 ;
   union __anonunion_ldv_42600_229 ldv_42600 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 10 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 15 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 17 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 19 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 22 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 24 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 27 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 29 "include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq * );
#line 30 "include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq * );
#line 31 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 32 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 33 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 34 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 36 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 37 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 38 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
};
#line 68 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 76 "include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};
#line 97 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 201 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 202 "include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue * , struct bio * );
#line 203 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 204 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 205 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 213 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 215 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 216 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 217 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 218 "include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job * );
#line 219
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 226 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 232 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 241 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
};
#line 269 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned char flush_not_queueable : 1 ;
   unsigned char flush_queue_delayed : 1 ;
   unsigned char flush_pending_idx : 1 ;
   unsigned char flush_running_idx : 1 ;
   unsigned long flush_pending_since ;
   struct list_head flush_queue[2U] ;
   struct list_head flush_data_in_flight ;
   struct request flush_rq ;
   struct mutex sysfs_lock ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
};
#line 879 "include/linux/blkdev.h"
struct blk_plug {
   unsigned long magic ;
   struct list_head list ;
   struct list_head cb_list ;
   unsigned int should_sort ;
};
#line 1211 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1232 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1233 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1234 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1235 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1236 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1295 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   unsigned int (*check_events)(struct gendisk * , unsigned int  ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 97 "include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 106 "include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 138 "include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   spinlock_t aca_lock ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};
#line 150 "include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6[1U] ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 161 "include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct neigh_parms *nd_parms ;
   struct inet6_dev *next ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   unsigned long tstamp ;
   struct rcu_head rcu ;
};
#line 666 "include/net/ipv6.h"
union __anonunion_ldv_45123_237 {
   __be32 a4 ;
   __be32 a6[4U] ;
};
#line 666 "include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_ldv_45123_237 ldv_45123 ;
};
#line 24 "include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};
#line 29 "include/net/inetpeer.h"
struct __anonstruct_ldv_45145_239 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 29 "include/net/inetpeer.h"
union __anonunion_ldv_45148_238 {
   struct __anonstruct_ldv_45145_239 ldv_45145 ;
   struct rcu_head rcu ;
   struct inet_peer *gc_next ;
};
#line 29 "include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[14U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   unsigned long pmtu_expires ;
   u32 pmtu_orig ;
   u32 pmtu_learned ;
   struct inetpeer_addr_base redirect_learned ;
   struct list_head gc_list ;
   union __anonunion_ldv_45148_238 ldv_45148 ;
   __u32 dtime ;
   atomic_t refcnt ;
};
#line 49 "include/linux/route.h"
struct fib_info;
#line 50 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   __be32 rt_key_dst ;
   __be32 rt_key_src ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_key_tos ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_route_iif ;
   int rt_iif ;
   int rt_oif ;
   __u32 rt_mark ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   u32 rt_peer_genid ;
   struct inet_peer *peer ;
   struct fib_info *fi ;
};
#line 323 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1577 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 342 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 388 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 404 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 413 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 436 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 443 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 465 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 481 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 500 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_bio_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 520 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 526 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_desc {
   struct p_header80 head ;
   u64 sector ;
   u32 blksize ;
   u32 pad ;
};
#line 576 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 621 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
   struct p_block_desc block_desc ;
};
#line 655
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 662 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 683
struct drbd_work;
#line 686 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 690
struct drbd_tl_epoch;
#line 718 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 726 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_47617_242 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 765 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node collision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_47617_242 ldv_47617 ;
};
#line 823
struct drbd_bitmap;
#line 824
enum bm_flag {
    BM_P_VMALLOCED = 65536,
    BM_LOCKED_MASK = 7,
    BM_DONT_CLEAR = 1,
    BM_DONT_SET = 2,
    BM_DONT_TEST = 4,
    BM_LOCKED_TEST_ALLOWED = 3,
    BM_LOCKED_SET_ALLOWED = 1
} ;
#line 834 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 895 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   int on_congestion ;
   int cong_fill ;
   int cong_extents ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 78 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 149 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   enum bm_flag flags ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 953
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 959 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 965 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct drbd_work start_resync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   struct timer_list start_resync_timer ;
   struct timer_list request_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
   atomic_t ap_in_flight ;
   int peer_max_bio_size ;
   int local_max_bio_size ;
};
#line 1173
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2463 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   wait_queue_head_t bm_io_wait ;
   enum bm_flag bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 893 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
struct bm_aio_ctx {
   struct drbd_conf *mdev ;
   atomic_t in_flight ;
   struct completion done ;
   unsigned int flags ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 241 "include/linux/proc_fs.h"
struct proc_ns_operations {
   char const   *name ;
   int type ;
   void *(*get)(struct task_struct * ) ;
   void (*put)(void * ) ;
   int (*install)(struct nsproxy * , void * ) ;
};
#line 254 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct dentry * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 260 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   void *ns ;
   struct proc_ns_operations  const  *ns_ops ;
   struct inode vfs_inode ;
};
#line 154 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 161
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_AHEAD = 22,
    C_BEHIND = 23,
    C_MASK = 31
} ;
#line 1301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 159 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_OUT_OF_SYNC = 40,
    P_RS_CANCEL = 41,
    P_MAX_CMD = 42,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 691 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node collision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    queue_for_send_oos = 5,
    send_canceled = 6,
    send_failed = 7,
    handed_over_to_network = 8,
    oos_handed_to_network = 9,
    connection_lost_while_pending = 10,
    read_retry_remote_canceled = 11,
    recv_acked_by_peer = 12,
    write_acked_by_peer = 13,
    write_acked_by_peer_and_sis = 14,
    conflict_discarded_by_peer = 15,
    neg_acked = 16,
    barrier_acked = 17,
    data_received = 18,
    read_completed_with_error = 19,
    read_ahead_completed_with_error = 20,
    write_completed_with_error = 21,
    completed_ok = 22,
    resend = 23,
    fail_frozen_disk_io = 24,
    restart_frozen_disk_io = 25,
    nothing = 26
} ;
#line 310 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 182 "include/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 281 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 555
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 559 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 747
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1181
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1520
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 186 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_243 {
   u32 pos ;
   u32 extent ;
};
#line 53 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_243 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 188 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 3634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 la_peer_max_bio_size ;
   u32 reserved_u32[3U] ;
};
#line 4115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 178 "include/linux/types.h"
typedef __u16 __le16;
#line 180 "include/linux/types.h"
typedef __u32 __le32;
#line 182 "include/linux/types.h"
typedef __u64 __le64;
#line 290 "include/linux/timer.h"
enum hrtimer_restart;
#line 38 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 44 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * , struct cred * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 65 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
};
#line 99 "include/linux/drbd.h"
enum drbd_ret_code {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    ERR_CONG_NOT_PROTO_A = 155,
    ERR_PIC_AFTER_DEP = 156,
    ERR_PIC_PEER_DEP = 157,
    AFTER_LAST_ERR_CODE = 158
} ;
#line 323 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 361 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 40 "include/linux/drbd_nl.h"
struct disconnect {
   unsigned char force : 1 ;
};
#line 74 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 108 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 136 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 145 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 35 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_on_congestion = 81,
    T_cong_fill = 82,
    T_cong_extents = 83,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_force = 32852,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 112 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 11 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 22
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n\t .long 661b - .\n\t .long 663f - .\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 11 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_zero_bit_le(void const   *addr , unsigned long size ,
                                                    unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 14
  tmp = find_next_zero_bit((unsigned long const   *)addr, size, offset);
#line 14
  return (tmp);
}
}
#line 17 "include/asm-generic/bitops/le.h"
__inline static unsigned long find_next_bit_le(void const   *addr , unsigned long size ,
                                               unsigned long offset ) 
{ 
  unsigned long tmp ;

  {
#line 20
  tmp = find_next_bit((unsigned long const   *)addr, size, offset);
#line 20
  return (tmp);
}
}
#line 52 "include/asm-generic/bitops/le.h"
__inline static int test_bit_le(int nr , void const   *addr ) 
{ 
  int tmp ;

  {
#line 54
  tmp = variable_test_bit(nr, (unsigned long const volatile   *)addr);
#line 54
  return (tmp);
}
}
#line 77 "include/asm-generic/bitops/le.h"
__inline static int __test_and_set_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 79
  tmp = __test_and_set_bit(nr, (unsigned long volatile   *)addr);
#line 79
  return (tmp);
}
}
#line 82 "include/asm-generic/bitops/le.h"
__inline static int __test_and_clear_bit_le(int nr , void *addr ) 
{ 
  int tmp ;

  {
#line 84
  tmp = __test_and_clear_bit(nr, (unsigned long volatile   *)addr);
#line 84
  return (tmp);
}
}
#line 64 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 66
  tmp = __arch_hweight64((__u64 )w);
#line 66
  return (tmp);
}
}
#line 101 "include/linux/printk.h"
extern int printk(char const   *  , ...) ;
#line 50 "include/linux/dynamic_debug.h"
extern int __dynamic_dev_dbg(struct _ddebug * , struct device  const  * , char const   * 
                             , ...) ;
#line 70 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 146 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 88 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2954;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2954;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2954;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_2954;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_2954: ;
#line 14
  return (pfo_ret__);
}
}
#line 15 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xadd_wrong_size(void) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 55
extern void *memset(void * , int  , size_t  ) ;
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __ret ;

  {
#line 182
  __ret = i;
#line 182
  switch (4UL) {
  case 1UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddb %b0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5594;
  case 2UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddw %w0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5594;
  case 4UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5594;
  case 8UL: 
#line 182
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddq %q0, %1\n": "+r" (__ret),
                       "+m" (v->counter): : "memory", "cc");
#line 182
  goto ldv_5594;
  default: 
#line 182
  __xadd_wrong_size();
  }
  ldv_5594: ;
#line 182
  return (__ret + i);
}
}
#line 201 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 203
  tmp = atomic_add_return(- i, v);
#line 203
  return (tmp);
}
}
#line 216 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 221
  switch (8UL) {
  case 1UL: 
#line 221
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_5889;
  case 2UL: 
#line 221
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_5889;
  case 4UL: 
#line 221
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_5889;
  case 8UL: 
#line 221
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 221
  goto ldv_5889;
  default: 
#line 221
  __bad_percpu_size();
  }
  ldv_5889: 
#line 221
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 223
  return (ti);
}
}
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_6176.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_6176.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_6176.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_6176.rlock, flags);
#line 341
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , char const   * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 585
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 587
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 590
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 168
extern int mutex_trylock(struct mutex * ) ;
#line 169
extern void mutex_unlock(struct mutex * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, "&x->wait", & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 91
extern void complete(struct completion * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 55 "include/linux/vmalloc.h"
extern void *vzalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 324 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 327 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 329
  tmp = alloc_pages_current(gfp_mask, order);
#line 329
  return (tmp);
}
}
#line 360
extern void __free_pages(struct page * , unsigned int  ) ;
#line 161 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 218 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 265 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 280
  tmp___2 = __kmalloc(size, flags);
#line 280
  return (tmp___2);
}
}
#line 338 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 340
  tmp = kmalloc(size, flags | 32768U);
#line 340
  return (tmp);
}
}
#line 888 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 892
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 894
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 898
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 449 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 736 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page  const  *page ) 
{ 


  {
#line 738
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 64L) << 12) + 0xffff880000000000UL));
}
}
#line 2358 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 363 "include/linux/sched.h"
extern void schedule(void) ;
#line 2627
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 58 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 60
  pagefault_disable();
#line 61
  tmp = lowmem_page_address((struct page  const  *)page);
#line 61
  return (tmp);
}
}
#line 65 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 67
  pagefault_enable();
#line 68
  return;
}
}
#line 214 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , unsigned int  ) ;
#line 217
extern void bio_put(struct bio * ) ;
#line 220
extern void bio_endio(struct bio * , int  ) ;
#line 229
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 956 "include/linux/blkdev.h"
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 135
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 138 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 140
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 140
    tmp = _drbd_insert_fault(mdev, type);
#line 140
    if (tmp != 0U) {
#line 140
      tmp___0 = 1;
    } else {
#line 140
      tmp___0 = 0;
    }
  } else {
#line 140
    tmp___0 = 0;
  }
#line 140
  return (tmp___0);
}
}
#line 158
struct ratelimit_state drbd_ratelimit_state ;
#line 1204
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) ;
#line 1299
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1300
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1443
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1444
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1445
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1446
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1447
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1449
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1451
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1453
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1457
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1459
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1460
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1461
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) ;
#line 1462
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1463
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1464
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1466
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1467
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1468
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1471
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1473
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1474
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1475
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1476
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1479
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1482
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1485
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) ;
#line 1486
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1501
rwlock_t global_state_lock ;
#line 1518
char *ppsize(char *buf , unsigned long long size ) ;
#line 1794 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_state_rv _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                                   enum chg_state_flags flags , struct completion *done ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 1799
  _raw_read_lock(& global_state_lock);
#line 1800
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1801
  _raw_read_unlock(& global_state_lock);
#line 1803
  return (rv);
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38894.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38894.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_48630;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38894.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38894.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_48630;
  }
  ldv_48630: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1892 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1894
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1897
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1900
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2157
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2157
  i = tmp;
#line 2163
  if (i < 0) {
#line 2163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2163);
  } else {

  }
#line 2164
  if (i == 0) {
#line 2165
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2167
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2168
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2170
      drbd_go_diskless(mdev);
    } else {

    }
#line 2171
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2173
  return;
}
}
#line 2176 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2181
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2182
    return (0);
  } else {

  }
#line 2184
  atomic_inc(& mdev->local_cnt);
#line 2185
  io_allowed = (unsigned int )mdev->state.ldv_38894.disk >= (unsigned int )mins;
#line 2186
  if (io_allowed == 0) {
#line 2187
    put_ldev(mdev);
  } else {

  }
#line 2188
  return (io_allowed);
}
}
#line 2450 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2454
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2454
  if (tmp != 0) {
#line 2455
    return;
  } else {

  }
#line 2457
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2458
  if (r != 0) {
#line 2459
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2462
  return;
}
}
#line 124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 126
  b = mdev->bitmap;
#line 127
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 127
  if (tmp == 0) {
#line 128
    return;
  } else {

  }
#line 129
  tmp___9 = get_current();
#line 129
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 129
    tmp___7 = get_current();
#line 129
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 129
      tmp___5 = get_current();
#line 129
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 129
        tmp___3 = get_current();
#line 129
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 129
        tmp___4 = (char *)"worker";
      }
#line 129
      tmp___6 = tmp___4;
    } else {
#line 129
      tmp___6 = (char *)"asender";
    }
#line 129
    tmp___8 = tmp___6;
  } else {
#line 129
    tmp___8 = (char *)"receiver";
  }
#line 129
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 135
  return;
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why , enum bm_flag flags ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 141
  b = mdev->bitmap;
#line 144
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 146
    return;
  } else {

  }
#line 149
  tmp = mutex_trylock(& b->bm_change);
#line 149
  trylock_failed = tmp == 0;
#line 151
  if (trylock_failed != 0) {
#line 152
    tmp___9 = get_current();
#line 152
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 152
      tmp___7 = get_current();
#line 152
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 152
        tmp___5 = get_current();
#line 152
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 152
          tmp___3 = get_current();
#line 152
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 152
          tmp___4 = (char *)"worker";
        }
#line 152
        tmp___6 = tmp___4;
      } else {
#line 152
        tmp___6 = (char *)"asender";
      }
#line 152
      tmp___8 = tmp___6;
    } else {
#line 152
      tmp___8 = (char *)"receiver";
    }
#line 152
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 160
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 162
  if (((unsigned int )b->bm_flags & 7U) != 0U) {
#line 163
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 164
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | ((unsigned int )flags & 7U));
#line 166
  b->bm_why = why;
#line 167
  b->bm_task = get_current();
#line 168
  return;
}
}
#line 170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;

  {
#line 172
  b = mdev->bitmap;
#line 173
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 174
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 175
    return;
  } else {

  }
#line 178
  if (((unsigned int )(mdev->bitmap)->bm_flags & 7U) == 0U) {
#line 179
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 181
  b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294967288U);
#line 182
  b->bm_why = 0;
#line 183
  b->bm_task = 0;
#line 184
  mutex_unlock(& b->bm_change);
#line 185
  return;
}
}
#line 213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_store_page_idx(struct page *page , unsigned long idx ) 
{ 
  long tmp ;

  {
#line 215
  tmp = __builtin_expect((idx & 0xffffffffff000000UL) != 0UL, 0L);
#line 215
  if (tmp != 0L) {
#line 215
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (215), "i" (12UL));
    ldv_48901: ;
#line 215
    goto ldv_48901;
  } else {

  }
#line 216
  page->ldv_15532.private = page->ldv_15532.private | idx;
#line 217
  return;
}
}
#line 219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_page_to_idx(struct page *page ) 
{ 


  {
#line 221
  return (page->ldv_15532.private & 16777215UL);
}
}
#line 227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_lock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 229
  b = mdev->bitmap;
#line 230
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_15532.private);
#line 231
  tmp = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 231
  if (tmp == 0) {
#line 231
    goto ldv_48911;
  } else {

  }
#line 231
  tmp___0 = get_current();
#line 231
  __wait.flags = 0U;
#line 231
  __wait.private = (void *)tmp___0;
#line 231
  __wait.func = & autoremove_wake_function;
#line 231
  __wait.task_list.next = & __wait.task_list;
#line 231
  __wait.task_list.prev = & __wait.task_list;
  ldv_48914: 
#line 231
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 231
  tmp___1 = test_and_set_bit(31, (unsigned long volatile   *)addr);
#line 231
  if (tmp___1 == 0) {
#line 231
    goto ldv_48913;
  } else {

  }
#line 231
  schedule();
#line 231
  goto ldv_48914;
  ldv_48913: 
#line 231
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_48911: ;
#line 234
  return;
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_unlock_io(struct drbd_conf *mdev , int page_nr ) 
{ 
  struct drbd_bitmap *b ;
  void *addr ;

  {
#line 236
  b = mdev->bitmap;
#line 237
  addr = (void *)(& (*(b->bm_pages + (unsigned long )page_nr))->ldv_15532.private);
#line 238
  clear_bit(31, (unsigned long volatile   *)addr);
#line 239
  __asm__  volatile   ("": : : "memory");
#line 240
  __wake_up(& (mdev->bitmap)->bm_io_wait, 3U, 1, 0);
#line 241
  return;
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_unchanged(struct page *page ) 
{ 


  {
#line 248
  clear_bit(29, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 249
  clear_bit(28, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 250
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_need_writeout(struct page *page ) 
{ 


  {
#line 254
  set_bit(29U, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 255
  return;
}
}
#line 257 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_unchanged(struct page *page ) 
{ 
  unsigned long const volatile   *addr ;

  {
#line 259
  addr = (unsigned long const volatile   *)(& page->ldv_15532.private);
#line 260
  return (((unsigned long )*addr & 805306368UL) == 0UL);
}
}
#line 263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_io_err(struct page *page ) 
{ 


  {
#line 265
  set_bit(30U, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 266
  return;
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_clear_page_io_err(struct page *page ) 
{ 


  {
#line 270
  clear_bit(30, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 271
  return;
}
}
#line 273 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_page_lazy_writeout(struct page *page ) 
{ 


  {
#line 275
  set_bit(28U, (unsigned long volatile   *)(& page->ldv_15532.private));
#line 276
  return;
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_test_page_lazy_writeout(struct page *page ) 
{ 
  int tmp ;

  {
#line 280
  tmp = constant_test_bit(28U, (unsigned long const volatile   *)(& page->ldv_15532.private));
#line 280
  return (tmp);
}
}
#line 284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_word_to_page_idx(struct drbd_bitmap *b , unsigned long long_nr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 287
  page_nr = (unsigned int )(long_nr >> 9);
#line 288
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 288
  if (tmp != 0L) {
#line 288
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (288), "i" (12UL));
    ldv_48948: ;
#line 288
    goto ldv_48948;
  } else {

  }
#line 289
  return (page_nr);
}
}
#line 292 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned int bm_bit_to_page_idx(struct drbd_bitmap *b , u64 bitnr ) 
{ 
  unsigned int page_nr ;
  long tmp ;

  {
#line 295
  page_nr = (unsigned int )(bitnr >> 15);
#line 296
  tmp = __builtin_expect((size_t )page_nr >= b->bm_number_of_pages, 0L);
#line 296
  if (tmp != 0L) {
#line 296
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (296), "i" (12UL));
    ldv_48954: ;
#line 296
    goto ldv_48954;
  } else {

  }
#line 297
  return (page_nr);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  struct page *page ;
  void *tmp ;

  {
#line 302
  page = *(b->bm_pages + (unsigned long )idx);
#line 303
  tmp = kmap_atomic(page);
#line 303
  return ((unsigned long *)tmp);
}
}
#line 306 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_pidx(struct drbd_bitmap *b , unsigned int idx ) 
{ 
  unsigned long *tmp ;

  {
#line 308
  tmp = __bm_map_pidx(b, idx);
#line 308
  return (tmp);
}
}
#line 311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 313
  __kunmap_atomic((void *)p_addr);
#line 314
  return;
}
}
#line 316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 318
  return;
}
}
#line 341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 344
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 345
    return;
  } else {

  }
#line 347
  i = 0UL;
#line 347
  goto ldv_48977;
  ldv_48976: ;
#line 348
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 349
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 352
    goto ldv_48975;
  } else {

  }
#line 354
  __free_pages(*(pages + i), 0U);
#line 355
  *(pages + i) = 0;
  ldv_48975: 
#line 347
  i = i + 1UL;
  ldv_48977: ;
#line 347
  if (i < number) {
#line 348
    goto ldv_48976;
  } else {

  }

#line 352
  return;
}
}
#line 359 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 361
  if (v != 0) {
#line 362
    vfree((void const   *)ptr);
  } else {
#line 364
    kfree((void const   *)ptr);
  }
#line 365
  return;
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 372
  old_pages = b->bm_pages;
#line 374
  vmalloced = 0U;
#line 375
  have = b->bm_number_of_pages;
#line 377
  tmp = __builtin_expect(have == 0UL, 0L);
#line 377
  if (tmp != 0L) {
#line 377
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 377
    if (tmp___0 != 0L) {
#line 377
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (377), "i" (12UL));
      ldv_48994: ;
#line 377
      goto ldv_48994;
    } else {

    }
  } else {

  }
#line 378
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 378
  if (tmp___1 != 0L) {
#line 378
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 378
    if (tmp___2 != 0L) {
#line 378
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (378), "i" (12UL));
      ldv_48995: ;
#line 378
      goto ldv_48995;
    } else {

    }
  } else {

  }
#line 380
  if (have == want) {
#line 381
    return (old_pages);
  } else {

  }
#line 388
  bytes = (unsigned int )want * 8U;
#line 389
  tmp___3 = kzalloc((size_t )bytes, 208U);
#line 389
  new_pages = (struct page **)tmp___3;
#line 390
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 391
    tmp___4 = vzalloc((unsigned long )bytes);
#line 391
    new_pages = (struct page **)tmp___4;
#line 392
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 393
      return (0);
    } else {

    }
#line 394
    vmalloced = 1U;
  } else {

  }
#line 397
  if (want >= have) {
#line 398
    i = 0U;
#line 398
    goto ldv_48997;
    ldv_48996: 
#line 399
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 398
    i = i + 1U;
    ldv_48997: ;
#line 398
    if ((unsigned long )i < have) {
#line 399
      goto ldv_48996;
    } else {

    }

#line 400
    goto ldv_49000;
    ldv_48999: 
#line 401
    page = alloc_pages(131282U, 0U);
#line 402
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 403
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 404
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 405
      return (0);
    } else {

    }
#line 409
    bm_store_page_idx(page, (unsigned long )i);
#line 410
    *(new_pages + (unsigned long )i) = page;
#line 400
    i = i + 1U;
    ldv_49000: ;
#line 400
    if ((unsigned long )i < want) {
#line 401
      goto ldv_48999;
    } else {

    }

  } else {
#line 413
    i = 0U;
#line 413
    goto ldv_49003;
    ldv_49002: 
#line 414
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 413
    i = i + 1U;
    ldv_49003: ;
#line 413
    if ((unsigned long )i < want) {
#line 414
      goto ldv_49002;
    } else {

    }

  }
#line 420
  if (vmalloced != 0U) {
#line 421
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags | 65536U);
  } else {
#line 423
    b->bm_flags = (enum bm_flag )((unsigned int )b->bm_flags & 4294901759U);
  }
#line 425
  return (new_pages);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 434
  b = mdev->bitmap;
#line 435
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 435
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 435
  if (tmp != 0L) {
#line 435
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       435);
  } else {

  }
#line 435
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 436
  tmp___0 = kzalloc(400UL, 208U);
#line 436
  b = (struct drbd_bitmap *)tmp___0;
#line 437
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 438
    return (-12);
  } else {

  }
#line 439
  spinlock_check(& b->bm_lock);
#line 439
  __raw_spin_lock_init(& b->bm_lock.ldv_6176.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 440
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 441
  __init_waitqueue_head(& b->bm_io_wait, "&b->bm_io_wait", & __key___1);
#line 443
  mdev->bitmap = b;
#line 445
  return (0);
}
}
#line 448 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 450
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 450
  if (_b != 0) {
#line 450
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            450);
  } else {

  }
#line 450
  if (_b != 0) {
#line 450
    return (0UL);
  } else {

  }
#line 451
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 456 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 458
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 458
  if (_b != 0) {
#line 458
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            458);
  } else {

  }
#line 458
  if (_b != 0) {
#line 458
    return;
  } else {

  }
#line 459
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 460
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, (int )(mdev->bitmap)->bm_flags & 65536);
#line 461
  kfree((void const   *)mdev->bitmap);
#line 462
  mdev->bitmap = 0;
#line 463
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;
  int cleared ;
  unsigned long tmp___0 ;

  {
#line 478
  cleared = 0;
#line 481
  tmp = (int )b->bm_bits & 32767;
#line 483
  mask = (1UL << (tmp & 63)) - 1UL;
#line 486
  mask = mask;
#line 488
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 489
  bm = p_addr + (unsigned long )(tmp / 64);
#line 490
  if (mask != 0UL) {
#line 495
    tmp___0 = hweight_long(*bm & ~ mask);
#line 495
    cleared = (int )tmp___0;
#line 496
    *bm = *bm & mask;
#line 497
    bm = bm + 1;
  } else {

  }
#line 506
  bm_unmap(p_addr);
#line 507
  return (cleared);
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int tmp ;

  {
#line 517
  tmp = (int )b->bm_bits & 32767;
#line 519
  mask = (1UL << (tmp & 63)) - 1UL;
#line 522
  mask = mask;
#line 524
  p_addr = bm_map_pidx(b, (unsigned int )b->bm_number_of_pages - 1U);
#line 525
  bm = p_addr + (unsigned long )(tmp / 64);
#line 526
  if (mask != 0UL) {
#line 531
    *bm = *bm | ~ mask;
#line 532
    bm = bm + 1;
  } else {

  }
#line 540
  bm_unmap(p_addr);
#line 541
  return;
}
}
#line 545 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long *p_addr ;
  unsigned long bits ;
  unsigned long mask ;
  int idx ;
  int i ;
  int last_word ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 548
  bits = 0UL;
#line 549
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 553
  idx = 0;
#line 553
  goto ldv_49055;
  ldv_49054: 
#line 554
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 555
  i = 0;
#line 555
  goto ldv_49051;
  ldv_49050: 
#line 556
  tmp = hweight_long(*(p_addr + (unsigned long )i));
#line 556
  bits = tmp + bits;
#line 555
  i = i + 1;
  ldv_49051: ;
#line 555
  if ((unsigned int )i <= 511U) {
#line 556
    goto ldv_49050;
  } else {

  }
#line 557
  __bm_unmap(p_addr);
#line 558
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                558, 0);
#line 558
  _cond_resched();
#line 553
  idx = idx + 1;
  ldv_49055: ;
#line 553
  if ((size_t )idx < b->bm_number_of_pages - 1UL) {
#line 554
    goto ldv_49054;
  } else {

  }
#line 561
  last_word = (int )(((b->bm_bits - 1UL) & 32767UL) >> 6);
#line 562
  p_addr = __bm_map_pidx(b, (unsigned int )idx);
#line 563
  i = 0;
#line 563
  goto ldv_49058;
  ldv_49057: 
#line 564
  tmp___0 = hweight_long(*(p_addr + (unsigned long )i));
#line 564
  bits = tmp___0 + bits;
#line 563
  i = i + 1;
  ldv_49058: ;
#line 563
  if (i < last_word) {
#line 564
    goto ldv_49057;
  } else {

  }
#line 565
  *(p_addr + (unsigned long )last_word) = (unsigned long )((unsigned long long )*(p_addr + (unsigned long )last_word) & (unsigned long long )mask);
#line 566
  tmp___1 = hweight_long(*(p_addr + (unsigned long )last_word));
#line 566
  bits = tmp___1 + bits;
#line 570
  __bm_unmap(p_addr);
#line 571
  return (bits);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned int idx ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 581
  end = offset + len;
#line 583
  if (b->bm_words < end) {
#line 584
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 585
    return;
  } else {

  }
#line 588
  goto ldv_49075;
  ldv_49074: 
#line 589
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 589
  __min2 = end;
#line 589
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 590
  idx = bm_word_to_page_idx(b, offset);
#line 591
  p_addr = bm_map_pidx(b, idx);
#line 592
  bm = p_addr + (offset & 511UL);
#line 593
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 594
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
  } else {
#line 597
    memset((void *)bm, c, do_now * 8UL);
  }
#line 598
  bm_unmap(p_addr);
#line 599
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
#line 600
  offset = offset + do_now;
  ldv_49075: ;
#line 588
  if (offset < end) {
#line 589
    goto ldv_49074;
  } else {

  }

#line 593
  return;
}
}
#line 612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  u64 bits_on_disk ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 614
  b = mdev->bitmap;
#line 617
  opages = 0;
#line 618
  err = 0;
#line 621
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 621
  if (_b != 0) {
#line 621
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            621);
  } else {

  }
#line 621
  if (_b != 0) {
#line 621
    return (-12);
  } else {

  }
#line 623
  drbd_bm_lock(mdev, (char *)"resize", BM_LOCKED_MASK);
#line 625
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 628
  if (b->bm_dev_capacity == capacity) {
#line 629
    goto out;
  } else {

  }
#line 631
  opages_vmalloced = (int )b->bm_flags & 65536;
#line 633
  if (capacity == 0UL) {
#line 634
    spin_lock_irq(& b->bm_lock);
#line 635
    opages = b->bm_pages;
#line 636
    onpages = b->bm_number_of_pages;
#line 637
    owords = b->bm_words;
#line 638
    b->bm_pages = 0;
#line 639
    tmp___2 = 0UL;
#line 639
    b->bm_dev_capacity = tmp___2;
#line 639
    tmp___1 = tmp___2;
#line 639
    b->bm_words = tmp___1;
#line 639
    tmp___0 = tmp___1;
#line 639
    b->bm_bits = tmp___0;
#line 639
    tmp = tmp___0;
#line 639
    b->bm_set = tmp;
#line 639
    b->bm_number_of_pages = tmp;
#line 644
    spin_unlock_irq(& b->bm_lock);
#line 645
    bm_free_pages(opages, onpages);
#line 646
    bm_vk_free((void *)opages, opages_vmalloced);
#line 647
    goto out;
  } else {

  }
#line 649
  bits = (capacity + 7UL) >> 3;
#line 656
  words = (bits + 63UL) >> 6;
#line 658
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 658
  if (tmp___3 != 0) {
#line 659
    bits_on_disk = ((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12;
#line 660
    put_ldev(mdev);
#line 661
    if ((unsigned long long )bits > bits_on_disk) {
#line 662
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits = %lu\n",
                bits);
#line 663
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bits_on_disk = %llu\n",
                bits_on_disk);
#line 664
      err = -28;
#line 665
      goto out;
    } else {

    }
  } else {

  }
#line 669
  want = (words * 8UL + 4095UL) >> 12;
#line 670
  have = b->bm_number_of_pages;
#line 671
  if (want == have) {
#line 672
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 672
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              672);
    } else {

    }
#line 673
    npages = b->bm_pages;
  } else {
#line 675
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 675
    if (tmp___4 != 0) {
#line 676
      npages = 0;
    } else {
#line 678
      npages = bm_realloc_pages(b, want);
    }
  }
#line 681
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 682
    err = -12;
#line 683
    goto out;
  } else {

  }
#line 686
  spin_lock_irq(& b->bm_lock);
#line 687
  opages = b->bm_pages;
#line 688
  owords = b->bm_words;
#line 689
  obits = b->bm_bits;
#line 691
  growing = bits > obits;
#line 692
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 693
    bm_set_surplus(b);
  } else {

  }
#line 695
  b->bm_pages = npages;
#line 696
  b->bm_number_of_pages = want;
#line 697
  b->bm_bits = bits;
#line 698
  b->bm_words = words;
#line 699
  b->bm_dev_capacity = capacity;
#line 701
  if (growing != 0) {
#line 702
    if (set_new_bits != 0) {
#line 703
      bm_memset(b, owords, 255, words - owords);
#line 704
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 706
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 710
  if (want < have) {
#line 712
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 715
  bm_clear_surplus(b);
#line 717
  spin_unlock_irq(& b->bm_lock);
#line 718
  if ((unsigned long )opages != (unsigned long )npages) {
#line 719
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 720
  if (growing == 0) {
#line 721
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 722
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu pages=%lu\n",
            bits, words, want);
  out: 
#line 725
  drbd_bm_unlock(mdev);
#line 726
  return (err);
}
}
#line 737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 739
  b = mdev->bitmap;
#line 743
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 743
  if (_b != 0) {
#line 743
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            743);
  } else {

  }
#line 743
  if (_b != 0) {
#line 743
    return (0UL);
  } else {

  }
#line 744
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 744
  if (_b___0 != 0) {
#line 744
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            744);
  } else {

  }
#line 744
  if (_b___0 != 0) {
#line 744
    return (0UL);
  } else {

  }
#line 746
  tmp = spinlock_check(& b->bm_lock);
#line 746
  flags = _raw_spin_lock_irqsave(tmp);
#line 747
  s = b->bm_set;
#line 748
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 750
  return (s);
}
}
#line 753 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 757
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 757
  if (tmp == 0) {
#line 758
    return (0UL);
  } else {

  }
#line 759
  s = _drbd_bm_total_weight(mdev);
#line 760
  put_ldev(mdev);
#line 761
  return (s);
}
}
#line 764 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 766
  b = mdev->bitmap;
#line 767
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 767
  if (_b != 0) {
#line 767
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            767);
  } else {

  }
#line 767
  if (_b != 0) {
#line 767
    return (0UL);
  } else {

  }
#line 768
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 768
  if (_b___0 != 0) {
#line 768
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            768);
  } else {

  }
#line 768
  if (_b___0 != 0) {
#line 768
    return (0UL);
  } else {

  }
#line 770
  return (b->bm_words);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 775
  b = mdev->bitmap;
#line 776
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 776
  if (_b != 0) {
#line 776
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            776);
  } else {

  }
#line 776
  if (_b != 0) {
#line 776
    return (0UL);
  } else {

  }
#line 778
  return (b->bm_bits);
}
}
#line 786 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  unsigned int idx ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 789
  b = mdev->bitmap;
#line 795
  end = offset + number;
#line 797
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 797
  if (_b != 0) {
#line 797
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            797);
  } else {

  }
#line 797
  if (_b != 0) {
#line 797
    return;
  } else {

  }
#line 798
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 798
  if (_b___0 != 0) {
#line 798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            798);
  } else {

  }
#line 798
  if (_b___0 != 0) {
#line 798
    return;
  } else {

  }
#line 799
  if (number == 0UL) {
#line 800
    return;
  } else {

  }
#line 801
  __ret_warn_on = b->bm_words <= offset;
#line 801
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 801
  if (tmp != 0L) {
#line 801
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       801);
  } else {

  }
#line 801
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 802
  __ret_warn_on___0 = b->bm_words < end;
#line 802
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 802
  if (tmp___0 != 0L) {
#line 802
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       802);
  } else {

  }
#line 802
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 804
  spin_lock_irq(& b->bm_lock);
#line 805
  goto ldv_49164;
  ldv_49163: 
#line 806
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 806
  __min2 = end;
#line 806
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 807
  idx = bm_word_to_page_idx(b, offset);
#line 808
  p_addr = bm_map_pidx(b, idx);
#line 809
  bm = p_addr + (offset & 511UL);
#line 810
  offset = offset + do_now;
#line 811
  goto ldv_49161;
  ldv_49160: 
#line 812
  bits = hweight_long(*bm);
#line 813
  tmp___1 = buffer;
#line 813
  buffer = buffer + 1;
#line 813
  word = *bm | *tmp___1;
#line 814
  tmp___2 = bm;
#line 814
  bm = bm + 1;
#line 814
  *tmp___2 = word;
#line 815
  tmp___3 = hweight_long(word);
#line 815
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_49161: 
#line 811
  tmp___4 = do_now;
#line 811
  do_now = do_now - (size_t )1;
#line 811
  if (tmp___4 != 0UL) {
#line 812
    goto ldv_49160;
  } else {

  }
#line 817
  bm_unmap(p_addr);
#line 818
  bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )idx));
  ldv_49164: ;
#line 805
  if (offset < end) {
#line 806
    goto ldv_49163;
  } else {

  }

#line 825
  if (b->bm_words == end) {
#line 826
    tmp___5 = bm_clear_surplus(b);
#line 826
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 827
  spin_unlock_irq(& b->bm_lock);
#line 828
  return;
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long *tmp___0 ;
  unsigned long *tmp___1 ;
  size_t tmp___2 ;

  {
#line 836
  b = mdev->bitmap;
#line 840
  end = offset + number;
#line 842
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 842
  if (_b != 0) {
#line 842
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            842);
  } else {

  }
#line 842
  if (_b != 0) {
#line 842
    return;
  } else {

  }
#line 843
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 843
  if (_b___0 != 0) {
#line 843
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            843);
  } else {

  }
#line 843
  if (_b___0 != 0) {
#line 843
    return;
  } else {

  }
#line 845
  spin_lock_irq(& b->bm_lock);
#line 846
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 854
    goto ldv_49189;
    ldv_49188: 
#line 855
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 855
    __min2 = end;
#line 855
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 856
    tmp = bm_word_to_page_idx(b, offset);
#line 856
    p_addr = bm_map_pidx(b, tmp);
#line 857
    bm = p_addr + (offset & 511UL);
#line 858
    offset = offset + do_now;
#line 859
    goto ldv_49186;
    ldv_49185: 
#line 860
    tmp___0 = buffer;
#line 860
    buffer = buffer + 1;
#line 860
    tmp___1 = bm;
#line 860
    bm = bm + 1;
#line 860
    *tmp___0 = *tmp___1;
    ldv_49186: 
#line 859
    tmp___2 = do_now;
#line 859
    do_now = do_now - (size_t )1;
#line 859
    if (tmp___2 != 0UL) {
#line 860
      goto ldv_49185;
    } else {

    }
#line 861
    bm_unmap(p_addr);
    ldv_49189: ;
#line 854
    if (offset < end) {
#line 855
      goto ldv_49188;
    } else {

    }

  }
#line 864
  spin_unlock_irq(& b->bm_lock);
#line 865
  return;
}
}
#line 868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 870
  b = mdev->bitmap;
#line 871
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 871
  if (_b != 0) {
#line 871
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            871);
  } else {

  }
#line 871
  if (_b != 0) {
#line 871
    return;
  } else {

  }
#line 872
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 872
  if (_b___0 != 0) {
#line 872
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            872);
  } else {

  }
#line 872
  if (_b___0 != 0) {
#line 872
    return;
  } else {

  }
#line 874
  spin_lock_irq(& b->bm_lock);
#line 875
  bm_memset(b, 0UL, 255, b->bm_words);
#line 876
  bm_clear_surplus(b);
#line 877
  b->bm_set = b->bm_bits;
#line 878
  spin_unlock_irq(& b->bm_lock);
#line 879
  return;
}
}
#line 882 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 884
  b = mdev->bitmap;
#line 885
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 885
  if (_b != 0) {
#line 885
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            885);
  } else {

  }
#line 885
  if (_b != 0) {
#line 885
    return;
  } else {

  }
#line 886
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 886
  if (_b___0 != 0) {
#line 886
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            886);
  } else {

  }
#line 886
  if (_b___0 != 0) {
#line 886
    return;
  } else {

  }
#line 888
  spin_lock_irq(& b->bm_lock);
#line 889
  bm_memset(b, 0UL, 0, b->bm_words);
#line 890
  b->bm_set = 0UL;
#line 891
  spin_unlock_irq(& b->bm_lock);
#line 892
  return;
}
}
#line 904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct bm_aio_ctx *ctx ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  unsigned int idx ;
  unsigned long tmp ;
  int uptodate ;
  int tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor ;
  long tmp___2 ;
  int tmp___3 ;

  {
#line 906
  ctx = (struct bm_aio_ctx *)bio->bi_private;
#line 907
  mdev = ctx->mdev;
#line 908
  b = mdev->bitmap;
#line 909
  tmp = bm_page_to_idx((bio->bi_io_vec)->bv_page);
#line 909
  idx = (unsigned int )tmp;
#line 910
  uptodate = (int )bio->bi_flags & 1;
#line 917
  if (error == 0 && uptodate == 0) {
#line 918
    error = -5;
  } else {

  }
#line 920
  if ((ctx->flags & 1U) == 0U) {
#line 920
    tmp___0 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )idx));
#line 920
    if (tmp___0 == 0) {
#line 922
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap page idx %u changed during IO!\n",
               idx);
    } else {

    }
  } else {

  }
#line 924
  if (error != 0) {
#line 927
    ctx->error = error;
#line 928
    bm_set_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 931
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "bm_async_io_complete");
#line 931
    if (tmp___1 != 0) {
#line 932
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR %d on bitmap page idx %u\n",
              error, idx);
    } else {

    }
  } else {
#line 935
    bm_clear_page_io_err(*(b->bm_pages + (unsigned long )idx));
#line 936
    descriptor.modname = "drbd";
#line 936
    descriptor.function = "bm_async_io_complete";
#line 936
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 936
    descriptor.format = "bitmap page idx %u completed\n";
#line 936
    descriptor.lineno = 936U;
#line 936
    descriptor.flags = 0U;
#line 936
    tmp___2 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 936
    if (tmp___2 != 0L) {
#line 936
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "bitmap page idx %u completed\n", idx);
    } else {

    }
  }
#line 939
  bm_page_unlock_io(mdev, (int )idx);
#line 942
  if ((int )ctx->flags & 1) {
#line 943
    put_page((bio->bi_io_vec)->bv_page);
  } else {

  }
#line 945
  bio_put(bio);
#line 947
  tmp___3 = atomic_dec_and_test(& ctx->in_flight);
#line 947
  if (tmp___3 != 0) {
#line 948
    complete(& ctx->done);
  } else {

  }
#line 949
  return;
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct bm_aio_ctx *ctx , int page_nr , int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  struct drbd_conf *mdev ;
  struct drbd_bitmap *b ;
  struct page *page ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  void *src ;
  void *dest ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;

  {
#line 954
  tmp = bio_alloc(208U, 1U);
#line 954
  bio = tmp;
#line 955
  mdev = ctx->mdev;
#line 956
  b = mdev->bitmap;
#line 960
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 962
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 967
  __min1 = 4096U;
#line 967
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 967
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 967
  len = __min1 < __min2 ? __min1 : __min2;
#line 971
  bm_page_lock_io(mdev, page_nr);
#line 974
  bm_set_page_unchanged(*(b->bm_pages + (unsigned long )page_nr));
#line 976
  if ((int )ctx->flags & 1) {
#line 980
    page = alloc_pages(18U, 0U);
#line 981
    dest = kmap_atomic(page);
#line 982
    src = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 983
    __len = 4096UL;
#line 983
    if (__len > 63UL) {
#line 983
      __ret = __memcpy(dest, (void const   *)src, __len);
    } else {
#line 983
      __ret = __builtin_memcpy(dest, (void const   *)src, __len);
    }
#line 984
    __kunmap_atomic(src);
#line 985
    __kunmap_atomic(dest);
#line 986
    bm_store_page_idx(page, (unsigned long )page_nr);
  } else {
#line 988
    page = *(b->bm_pages + (unsigned long )page_nr);
  }
#line 990
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 991
  bio->bi_sector = on_disk_sector;
#line 992
  bio_add_page(bio, page, len, 0U);
#line 993
  bio->bi_private = (void *)ctx;
#line 994
  bio->bi_end_io = & bm_async_io_complete;
#line 996
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 996
  if (tmp___1 != 0) {
#line 997
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 998
    bio_endio(bio, -5);
  } else {
#line 1000
    submit_bio(rw, bio);
#line 1003
    atomic_add((int )(len >> 9), & mdev->rs_sect_ev);
  }
#line 1005
  return;
}
}
#line 1010 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw , unsigned int lazy_writeout_upper_idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct drbd_bitmap *b ;
  int num_pages ;
  int i ;
  int count ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  long tmp ;
  struct _ddebug descriptor ;
  long tmp___0 ;
  int tmp___1 ;
  struct _ddebug descriptor___0 ;
  long tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char *tmp___5 ;

  {
#line 1015
  init_completion(& ctx.done);
#line 1015
  ctx.mdev = mdev;
#line 1015
  ctx.in_flight.counter = 1;
#line 1015
  ctx.done = ctx.done;
#line 1015
  ctx.flags = lazy_writeout_upper_idx != 0U;
#line 1015
  ctx.error = 0;
#line 1018
  b = mdev->bitmap;
#line 1019
  count = 0;
#line 1022
  err = 0;
#line 1032
  if (ctx.flags == 0U) {
#line 1033
    __ret_warn_on = ((unsigned int )b->bm_flags & 7U) == 0U;
#line 1033
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 1033
    if (tmp != 0L) {
#line 1033
      warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                         1033);
    } else {

    }
#line 1033
    __builtin_expect(__ret_warn_on != 0, 0L);
  } else {

  }
#line 1035
  num_pages = (int )b->bm_number_of_pages;
#line 1037
  now = jiffies;
#line 1040
  i = 0;
#line 1040
  goto ldv_49268;
  ldv_49267: ;
#line 1042
  if (lazy_writeout_upper_idx != 0U && (unsigned int )i == lazy_writeout_upper_idx) {
#line 1043
    goto ldv_49261;
  } else {

  }
#line 1044
  if (rw & 1) {
#line 1045
    tmp___1 = bm_test_page_unchanged(*(b->bm_pages + (unsigned long )i));
#line 1045
    if (tmp___1 != 0) {
#line 1046
      descriptor.modname = "drbd";
#line 1046
      descriptor.function = "bm_rw";
#line 1046
      descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1046
      descriptor.format = "skipped bm write for idx %u\n";
#line 1046
      descriptor.lineno = 1046U;
#line 1046
      descriptor.flags = 0U;
#line 1046
      tmp___0 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1046
      if (tmp___0 != 0L) {
#line 1046
        __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                          "skipped bm write for idx %u\n", i);
      } else {

      }
#line 1047
      goto ldv_49264;
    } else {

    }
#line 1051
    if (lazy_writeout_upper_idx != 0U) {
#line 1051
      tmp___3 = bm_test_page_lazy_writeout(*(b->bm_pages + (unsigned long )i));
#line 1051
      if (tmp___3 == 0) {
#line 1053
        descriptor___0.modname = "drbd";
#line 1053
        descriptor___0.function = "bm_rw";
#line 1053
        descriptor___0.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1053
        descriptor___0.format = "skipped bm lazy write for idx %u\n";
#line 1053
        descriptor___0.lineno = 1053U;
#line 1053
        descriptor___0.flags = 0U;
#line 1053
        tmp___2 = __builtin_expect((long )descriptor___0.flags & 1L, 0L);
#line 1053
        if (tmp___2 != 0L) {
#line 1053
          __dynamic_dev_dbg(& descriptor___0, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                            "skipped bm lazy write for idx %u\n", i);
        } else {

        }
#line 1054
        goto ldv_49264;
      } else {

      }
    } else {

    }
  } else {

  }
#line 1057
  atomic_inc(& ctx.in_flight);
#line 1058
  bm_page_io_async(& ctx, i, rw);
#line 1059
  count = count + 1;
#line 1060
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1060, 0);
#line 1060
  _cond_resched();
  ldv_49264: 
#line 1040
  i = i + 1;
  ldv_49268: ;
#line 1040
  if (i < num_pages) {
#line 1041
    goto ldv_49267;
  } else {

  }
  ldv_49261: 
#line 1068
  tmp___4 = atomic_dec_and_test(& ctx.in_flight);
#line 1068
  if (tmp___4 == 0) {
#line 1069
    wait_for_completion(& ctx.done);
  } else {

  }
#line 1070
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap %s of %u pages took %lu jiffies\n",
            rw == 1 ? (char *)"WRITE" : (char *)"READ", count, (unsigned long )jiffies - now);
#line 1074
  if (ctx.error != 0) {
#line 1075
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 1076
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 1077
    err = -5;
  } else {

  }
#line 1080
  now = jiffies;
#line 1081
  if (rw == 1) {
#line 1082
    drbd_md_flush(mdev);
  } else {
#line 1084
    b->bm_set = bm_count_bits(b);
#line 1085
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 1088
  now = b->bm_set;
#line 1090
  tmp___5 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 1090
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___5, now);
#line 1093
  return (err);
}
}
#line 1100 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1102
  tmp = bm_rw(mdev, 0, 0U);
#line 1102
  return (tmp);
}
}
#line 1111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1113
  tmp = bm_rw(mdev, 1, 0U);
#line 1113
  return (tmp);
}
}
#line 1121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_lazy(struct drbd_conf *mdev , unsigned int upper_idx ) 
{ 
  int tmp ;

  {
#line 1123
  tmp = bm_rw(mdev, 1, upper_idx);
#line 1123
  return (tmp);
}
}
#line 1139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_page(struct drbd_conf *mdev , unsigned int idx ) 
{ 
  struct bm_aio_ctx ctx ;
  struct _ddebug descriptor ;
  long tmp ;
  int tmp___0 ;

  {
#line 1144
  init_completion(& ctx.done);
#line 1144
  ctx.mdev = mdev;
#line 1144
  ctx.in_flight.counter = 1;
#line 1144
  ctx.done = ctx.done;
#line 1144
  ctx.flags = 1U;
#line 1144
  ctx.error = 0;
#line 1148
  tmp___0 = bm_test_page_unchanged(*((mdev->bitmap)->bm_pages + (unsigned long )idx));
#line 1148
  if (tmp___0 != 0) {
#line 1149
    descriptor.modname = "drbd";
#line 1149
    descriptor.function = "drbd_bm_write_page";
#line 1149
    descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared";
#line 1149
    descriptor.format = "skipped bm page write for idx %u\n";
#line 1149
    descriptor.lineno = 1149U;
#line 1149
    descriptor.flags = 0U;
#line 1149
    tmp = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 1149
    if (tmp != 0L) {
#line 1149
      __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                        "skipped bm page write for idx %u\n", idx);
    } else {

    }
#line 1150
    return (0);
  } else {

  }
#line 1153
  bm_page_io_async(& ctx, (int )idx, 529);
#line 1154
  wait_for_completion(& ctx.done);
#line 1156
  if (ctx.error != 0) {
#line 1157
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_page");
  } else {

  }
#line 1161
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 1162
  return (ctx.error);
}
}
#line 1173 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned int i ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 1176
  b = mdev->bitmap;
#line 1182
  if (b->bm_bits < bm_fo) {
#line 1183
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
#line 1184
    bm_fo = 0xffffffffffffffffUL;
  } else {
#line 1186
    goto ldv_49299;
    ldv_49298: 
#line 1188
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 1189
    tmp = bm_bit_to_page_idx(b, (u64 )bm_fo);
#line 1189
    p_addr = __bm_map_pidx(b, tmp);
#line 1191
    if ((int )find_zero_bit != 0) {
#line 1192
      tmp___0 = find_next_zero_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1192
      i = (unsigned int )tmp___0;
    } else {
#line 1195
      tmp___1 = find_next_bit_le((void const   *)p_addr, 32768UL, bm_fo & 32767UL);
#line 1195
      i = (unsigned int )tmp___1;
    }
#line 1198
    __bm_unmap(p_addr);
#line 1199
    if (i <= 32767U) {
#line 1200
      bm_fo = (unsigned long )i + bit_offset;
#line 1201
      if (b->bm_bits <= bm_fo) {
#line 1202
        goto ldv_49296;
      } else {

      }
#line 1203
      goto found;
    } else {

    }
#line 1205
    bm_fo = bit_offset + 32768UL;
    ldv_49299: ;
#line 1186
    if (b->bm_bits > bm_fo) {
#line 1187
      goto ldv_49298;
    } else {

    }
    ldv_49296: 
#line 1207
    bm_fo = 0xffffffffffffffffUL;
  }
  found: ;
#line 1210
  return (bm_fo);
}
}
#line 1213 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;

  {
#line 1216
  b = mdev->bitmap;
#line 1217
  i = 0xffffffffffffffffUL;
#line 1219
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1219
  if (_b != 0) {
#line 1219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1219);
  } else {

  }
#line 1219
  if (_b != 0) {
#line 1219
    return (i);
  } else {

  }
#line 1220
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1220
  if (_b___0 != 0) {
#line 1220
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1220);
  } else {

  }
#line 1220
  if (_b___0 != 0) {
#line 1220
    return (i);
  } else {

  }
#line 1222
  spin_lock_irq(& b->bm_lock);
#line 1223
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1224
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 1226
  i = __bm_find_next(mdev, bm_fo, find_zero_bit);
#line 1228
  spin_unlock_irq(& b->bm_lock);
#line 1229
  return (i);
}
}
#line 1232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1234
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1234
  return (tmp);
}
}
#line 1247 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1250
  tmp = __bm_find_next(mdev, bm_fo, 0);
#line 1250
  return (tmp);
}
}
#line 1253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1256
  tmp = __bm_find_next(mdev, bm_fo, 1);
#line 1256
  return (tmp);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int last_page_nr ;
  int c ;
  int changed_total ;
  unsigned int page_nr ;
  unsigned int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1268
  b = mdev->bitmap;
#line 1269
  p_addr = 0;
#line 1271
  last_page_nr = 4294967295U;
#line 1272
  c = 0;
#line 1273
  changed_total = 0;
#line 1275
  if (b->bm_bits <= e) {
#line 1276
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1278
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1280
  bitnr = s;
#line 1280
  goto ldv_49338;
  ldv_49337: 
#line 1281
  tmp = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1281
  page_nr = tmp;
#line 1282
  if (page_nr != last_page_nr) {
#line 1283
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1284
      __bm_unmap(p_addr);
    } else {

    }
#line 1285
    if (c < 0) {
#line 1286
      bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else
#line 1287
    if (c > 0) {
#line 1288
      bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
    } else {

    }
#line 1289
    changed_total = changed_total + c;
#line 1290
    c = 0;
#line 1291
    p_addr = __bm_map_pidx(b, page_nr);
#line 1292
    last_page_nr = page_nr;
  } else {

  }
#line 1294
  if (val != 0) {
#line 1295
    tmp___0 = __test_and_set_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1295
    c = (tmp___0 == 0) + c;
  } else {
#line 1297
    tmp___1 = __test_and_clear_bit_le((int )bitnr & 32767, (void *)p_addr);
#line 1297
    c = c - (tmp___1 != 0);
  }
#line 1280
  bitnr = bitnr + 1UL;
  ldv_49338: ;
#line 1280
  if (bitnr <= e) {
#line 1281
    goto ldv_49337;
  } else {

  }

#line 1299
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1300
    __bm_unmap(p_addr);
  } else {

  }
#line 1301
  if (c < 0) {
#line 1302
    bm_set_page_lazy_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else
#line 1303
  if (c > 0) {
#line 1304
    bm_set_page_need_writeout(*(b->bm_pages + (unsigned long )last_page_nr));
  } else {

  }
#line 1305
  changed_total = changed_total + c;
#line 1306
  b->bm_set = b->bm_set + (unsigned long )changed_total;
#line 1307
  return (changed_total);
}
}
#line 1314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 1318
  b = mdev->bitmap;
#line 1319
  c = 0;
#line 1321
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1321
  if (_b != 0) {
#line 1321
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1321);
  } else {

  }
#line 1321
  if (_b != 0) {
#line 1321
    return (1);
  } else {

  }
#line 1322
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1322
  if (_b___0 != 0) {
#line 1322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1322);
  } else {

  }
#line 1322
  if (_b___0 != 0) {
#line 1322
    return (0);
  } else {

  }
#line 1324
  tmp = spinlock_check(& b->bm_lock);
#line 1324
  flags = _raw_spin_lock_irqsave(tmp);
#line 1325
  if (((val != 0 ? 2U : 1U) & (unsigned int )b->bm_flags) != 0U) {
#line 1326
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1328
  c = __bm_change_bits_to(mdev, s, e, val);
#line 1330
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1331
  return (c);
}
}
#line 1335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1337
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1337
  return (tmp);
}
}
#line 1341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1343
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1343
  return (- tmp);
}
}
#line 1348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1353
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1353
  paddr = (unsigned long *)tmp;
#line 1354
  i = first_word;
#line 1354
  goto ldv_49377;
  ldv_49376: 
#line 1355
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1355
  bits = (int )tmp___0;
#line 1356
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1357
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1354
  i = i + 1;
  ldv_49377: ;
#line 1354
  if (i < last_word) {
#line 1355
    goto ldv_49376;
  } else {

  }
#line 1359
  __kunmap_atomic((void *)paddr);
#line 1360
  return;
}
}
#line 1367 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1377
  b = mdev->bitmap;
#line 1378
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1379
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1386
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1388
    spin_lock_irq(& b->bm_lock);
#line 1389
    __bm_change_bits_to(mdev, s, e, 1);
#line 1390
    spin_unlock_irq(& b->bm_lock);
#line 1391
    return;
  } else {

  }
#line 1396
  spin_lock_irq(& b->bm_lock);
#line 1399
  if (sl != 0UL) {
#line 1400
    __bm_change_bits_to(mdev, s, sl - 1UL, 1);
  } else {

  }
#line 1402
  first_page = (int )(sl >> 15);
#line 1403
  last_page = (int )(el >> 15);
#line 1407
  first_word = (int )(sl >> 6) & 511;
#line 1408
  last_word = 512;
#line 1411
  page_nr = first_page;
#line 1411
  goto ldv_49394;
  ldv_49393: 
#line 1412
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1413
  spin_unlock_irq(& b->bm_lock);
#line 1414
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1414, 0);
#line 1414
  _cond_resched();
#line 1415
  first_word = 0;
#line 1416
  spin_lock_irq(& b->bm_lock);
#line 1411
  page_nr = page_nr + 1;
  ldv_49394: ;
#line 1411
  if (page_nr < last_page) {
#line 1412
    goto ldv_49393;
  } else {

  }
#line 1420
  last_word = (int )(el >> 6) & 511;
#line 1421
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1428
  if (el <= (unsigned long )e) {
#line 1429
    __bm_change_bits_to(mdev, el, e, 1);
  } else {

  }
#line 1430
  spin_unlock_irq(& b->bm_lock);
#line 1431
  return;
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;

  {
#line 1443
  b = mdev->bitmap;
#line 1447
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1447
  if (_b != 0) {
#line 1447
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1447);
  } else {

  }
#line 1447
  if (_b != 0) {
#line 1447
    return (0);
  } else {

  }
#line 1448
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1448
  if (_b___0 != 0) {
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1448);
  } else {

  }
#line 1448
  if (_b___0 != 0) {
#line 1448
    return (0);
  } else {

  }
#line 1450
  tmp = spinlock_check(& b->bm_lock);
#line 1450
  flags = _raw_spin_lock_irqsave(tmp);
#line 1451
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1452
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1453
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1454
    tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1454
    p_addr = bm_map_pidx(b, tmp___0);
#line 1455
    tmp___1 = test_bit_le((int )bitnr & 32767, (void const   *)p_addr);
#line 1455
    i = tmp___1 != 0;
#line 1456
    bm_unmap(p_addr);
  } else
#line 1457
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1458
    i = -1;
  } else {
#line 1460
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1461
    i = 0;
  }
#line 1464
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1465
  return (i);
}
}
#line 1469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned int page_nr ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned int idx ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1472
  b = mdev->bitmap;
#line 1473
  p_addr = 0;
#line 1475
  page_nr = 4294967295U;
#line 1476
  c = 0;
#line 1482
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1482
  if (_b != 0) {
#line 1482
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1482);
  } else {

  }
#line 1482
  if (_b != 0) {
#line 1482
    return (1);
  } else {

  }
#line 1483
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1483
  if (_b___0 != 0) {
#line 1483
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1483);
  } else {

  }
#line 1483
  if (_b___0 != 0) {
#line 1483
    return (1);
  } else {

  }
#line 1485
  tmp = spinlock_check(& b->bm_lock);
#line 1485
  flags = _raw_spin_lock_irqsave(tmp);
#line 1486
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1487
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1488
  bitnr = s;
#line 1488
  goto ldv_49435;
  ldv_49434: 
#line 1489
  tmp___0 = bm_bit_to_page_idx(b, (u64 )bitnr);
#line 1489
  idx = tmp___0;
#line 1490
  if (page_nr != idx) {
#line 1491
    page_nr = idx;
#line 1492
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1493
      bm_unmap(p_addr);
    } else {

    }
#line 1494
    p_addr = bm_map_pidx(b, idx);
  } else {

  }
#line 1496
  _b___1 = b->bm_bits <= bitnr;
#line 1496
  if (_b___1 != 0) {
#line 1496
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1496);
  } else {

  }
#line 1496
  if (_b___1 != 0) {
#line 1497
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1499
    tmp___1 = test_bit_le((int )((unsigned int )bitnr - (page_nr << 15)), (void const   *)p_addr);
#line 1499
    c = (tmp___1 != 0) + c;
  }
#line 1488
  bitnr = bitnr + 1UL;
  ldv_49435: ;
#line 1488
  if (bitnr <= (unsigned long )e) {
#line 1489
    goto ldv_49434;
  } else {

  }

#line 1502
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1503
    bm_unmap(p_addr);
  } else {

  }
#line 1504
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1505
  return (c);
}
}
#line 1523 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned int tmp___0 ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1525
  b = mdev->bitmap;
#line 1530
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1530
  if (_b != 0) {
#line 1530
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1530);
  } else {

  }
#line 1530
  if (_b != 0) {
#line 1530
    return (0);
  } else {

  }
#line 1531
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1531
  if (_b___0 != 0) {
#line 1531
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1531);
  } else {

  }
#line 1531
  if (_b___0 != 0) {
#line 1531
    return (0);
  } else {

  }
#line 1533
  tmp = spinlock_check(& b->bm_lock);
#line 1533
  flags = _raw_spin_lock_irqsave(tmp);
#line 1534
  if (((unsigned int )b->bm_flags & 4U) != 0U) {
#line 1535
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1537
  s = (int )(enr << 6);
#line 1538
  _min1 = (enr + 1UL) << 6;
#line 1538
  _min2 = b->bm_words;
#line 1538
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1539
  count = 0;
#line 1540
  if ((size_t )s < b->bm_words) {
#line 1541
    n = e - s;
#line 1542
    tmp___0 = bm_word_to_page_idx(b, (unsigned long )s);
#line 1542
    p_addr = bm_map_pidx(b, tmp___0);
#line 1543
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1544
    goto ldv_49461;
    ldv_49460: 
#line 1545
    tmp___1 = bm;
#line 1545
    bm = bm + 1;
#line 1545
    tmp___2 = hweight_long(*tmp___1);
#line 1545
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_49461: 
#line 1544
    tmp___3 = n;
#line 1544
    n = n - 1;
#line 1544
    if (tmp___3 != 0) {
#line 1545
      goto ldv_49460;
    } else {

    }
#line 1546
    bm_unmap(p_addr);
  } else {
#line 1548
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1550
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1551
  return (count);
}
}
#line 1556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  unsigned long s ;
  unsigned long e ;
  int count ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1558
  b = mdev->bitmap;
#line 1563
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1563
  if (_b != 0) {
#line 1563
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1563);
  } else {

  }
#line 1563
  if (_b != 0) {
#line 1563
    return (0UL);
  } else {

  }
#line 1564
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1564
  if (_b___0 != 0) {
#line 1564
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1564);
  } else {

  }
#line 1564
  if (_b___0 != 0) {
#line 1564
    return (0UL);
  } else {

  }
#line 1566
  spin_lock_irq(& b->bm_lock);
#line 1567
  if (((unsigned int )b->bm_flags & 2U) != 0U) {
#line 1568
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1569
  weight = b->bm_set;
#line 1571
  s = al_enr * 16UL;
#line 1572
  __min1 = s + 16UL;
#line 1572
  __min2 = b->bm_words;
#line 1572
  e = __min1 < __min2 ? __min1 : __min2;
#line 1574
  if ((e - 1UL) >> 9 != s >> 9) {
#line 1574
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1575);
  } else {

  }
#line 1576
  count = 0;
#line 1577
  if (b->bm_words > s) {
#line 1578
    do_now = (int )((unsigned int )e - (unsigned int )s);
#line 1578
    i = do_now;
#line 1579
    tmp = bm_word_to_page_idx(b, s);
#line 1579
    p_addr = bm_map_pidx(b, tmp);
#line 1580
    bm = p_addr + (s & 511UL);
#line 1581
    goto ldv_49485;
    ldv_49484: 
#line 1582
    tmp___0 = hweight_long(*bm);
#line 1582
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1583
    *bm = 0xffffffffffffffffUL;
#line 1584
    bm = bm + 1;
    ldv_49485: 
#line 1581
    tmp___1 = i;
#line 1581
    i = i - 1;
#line 1581
    if (tmp___1 != 0) {
#line 1582
      goto ldv_49484;
    } else {

    }
#line 1586
    bm_unmap(p_addr);
#line 1587
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1588
    if (b->bm_words == e) {
#line 1589
      tmp___2 = bm_clear_surplus(b);
#line 1589
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1591
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%lu) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1593
  weight = b->bm_set - weight;
#line 1594
  spin_unlock_irq(& b->bm_lock);
#line 1595
  return (weight);
}
}
#line 1614
void ldv_check_final_state(void) ;
#line 1623
extern void ldv_initialize(void) ;
#line 1629
extern int nondet_int(void) ;
#line 1632 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void ldv_main0_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 1647
  LDV_IN_INTERRUPT = 1;
#line 1656
  ldv_initialize();
#line 1658
  goto ldv_49506;
  ldv_49505: 
#line 1661
  tmp = nondet_int();
#line 1661
  switch (tmp) {
  default: ;
#line 1663
  goto ldv_49504;
  }
  ldv_49504: ;
  ldv_49506: 
#line 1658
  tmp___0 = nondet_int();
#line 1658
  if (tmp___0 != 0) {
#line 1659
    goto ldv_49505;
  } else {

  }


#line 1672
  ldv_check_final_state();
#line 1675
  return;
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 26 "include/linux/export.h"
extern struct module __this_module ;
#line 484 "include/linux/module.h"
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 490
void ldv_module_put_2(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 278 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 280
  __mptr = inode;
#line 280
  return ((struct proc_inode *)__mptr + 0xffffffffffffffc0UL);
}
}
#line 283 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 285
  tmp = PROC_I(inode);
#line 285
  return (tmp->pde);
}
}
#line 79 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 80
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 87
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 303
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 304
char const   *drbd_role_str(enum drbd_role s ) ;
#line 305
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 157
struct drbd_conf **minor_table ;
#line 1135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1139
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1141
  return (mdev);
}
}
#line 1506
int proc_details ;
#line 1649 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1650
struct file_operations  const  drbd_proc_fops ;
#line 2195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned int shift ;
  unsigned long left ;
  unsigned long total ;
  unsigned long tmp___1 ;

  {
#line 2206
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 2207
    *bits_left = mdev->ov_left;
  } else {
#line 2209
    tmp = drbd_bm_total_weight(mdev);
#line 2209
    *bits_left = tmp - mdev->rs_failed;
  }
#line 2212
  if (*bits_left > mdev->rs_total) {
#line 2218
    __asm__  volatile   ("": : : "memory");
#line 2219
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38894.conn);
#line 2219
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2222
    *per_mil_done = 0U;
  } else {
#line 2233
    shift = (unsigned long long )mdev->rs_total > 4294967295ULL ? 16U : 10U;
#line 2234
    left = *bits_left >> (int )shift;
#line 2235
    total = (mdev->rs_total >> (int )shift) + 1UL;
#line 2236
    tmp___1 = 1000UL - (left * 1000UL) / total;
#line 2237
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2239
  return;
}
}
#line 2325 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2327
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 45
static int drbd_proc_release(struct inode *inode , struct file *file ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 49
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & drbd_proc_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void seq_printf_with_thousands_grouping(struct seq_file *seq , long v ) 
{ 
  long tmp ;
  long tmp___0 ;

  {
#line 60
  tmp___0 = __builtin_expect(v > 999999L, 0L);
#line 60
  if (tmp___0 != 0L) {
#line 62
    seq_printf(seq, "%ld,", v / 1000000L);
#line 63
    v = v / 1000000L;
#line 64
    seq_printf(seq, "%03ld,%03ld", v / 1000L, v % 1000L);
  } else {
#line 65
    tmp = __builtin_expect(v > 999L, 1L);
#line 65
    if (tmp != 0L) {
#line 66
      seq_printf(seq, "%ld,%03ld", v / 1000L, v % 1000L);
    } else {
#line 68
      seq_printf(seq, "%ld", v);
    }
  }
#line 69
  return;
}
}
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;
  unsigned long bm_bits ;
  unsigned long tmp ;
  unsigned long bit_pos ;

  {
#line 82
  stalled = 0;
#line 84
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 86
  x = (int )(res / 50U);
#line 87
  y = 20 - x;
#line 88
  seq_printf(seq, "\t[");
#line 89
  i = 1;
#line 89
  goto ldv_48939;
  ldv_48938: 
#line 90
  seq_printf(seq, "=");
#line 89
  i = i + 1;
  ldv_48939: ;
#line 89
  if (i < x) {
#line 90
    goto ldv_48938;
  } else {

  }
#line 91
  seq_printf(seq, ">");
#line 92
  i = 0;
#line 92
  goto ldv_48942;
  ldv_48941: 
#line 93
  seq_printf(seq, ".");
#line 92
  i = i + 1;
  ldv_48942: ;
#line 92
  if (i < y) {
#line 93
    goto ldv_48941;
  } else {

  }
#line 94
  seq_printf(seq, "] ");
#line 96
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 97
    seq_printf(seq, "verified:");
  } else {
#line 99
    seq_printf(seq, "sync\'ed:");
  }
#line 100
  seq_printf(seq, "%3u.%u%% ", res / 10U, res % 10U);
#line 103
  if (mdev->rs_total > 1048576UL) {
#line 104
    seq_printf(seq, "(%lu/%lu)M", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 108
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 125
  i = (mdev->rs_last_mark + 2) % 8;
#line 126
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 127
  if (dt > 6000UL) {
#line 128
    stalled = 1;
  } else {

  }
#line 130
  if (dt == 0UL) {
#line 131
    dt = dt + 1UL;
  } else {

  }
#line 132
  db = mdev->rs_mark_left[i] - rs_left;
#line 133
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 135
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 138
  dbdt = db / dt << 2;
#line 139
  seq_printf(seq, " speed: ");
#line 140
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 141
  seq_printf(seq, " (");
#line 143
  if (proc_details > 0) {
#line 145
    i = (mdev->rs_last_mark + 7) % 8;
#line 146
    dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 147
    if (dt == 0UL) {
#line 148
      dt = dt + 1UL;
    } else {

    }
#line 149
    db = mdev->rs_mark_left[i] - rs_left;
#line 150
    dbdt = db / dt << 2;
#line 151
    seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 152
    seq_printf(seq, " -- ");
  } else {

  }
#line 158
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 159
  if (dt == 0UL) {
#line 160
    dt = 1UL;
  } else {

  }
#line 161
  db = mdev->rs_total - rs_left;
#line 162
  dbdt = db / dt << 2;
#line 163
  seq_printf_with_thousands_grouping(seq, (long )dbdt);
#line 164
  seq_printf(seq, ")");
#line 166
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 272U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) {
#line 168
    seq_printf(seq, " want: ");
#line 169
    seq_printf_with_thousands_grouping(seq, (long )mdev->c_sync_rate);
  } else {

  }
#line 171
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 173
  if (proc_details > 0) {
#line 176
    tmp = drbd_bm_bits(mdev);
#line 176
    bm_bits = tmp;
#line 178
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 180
      bit_pos = bm_bits - mdev->ov_left;
    } else {
#line 182
      bit_pos = mdev->bm_resync_fo;
    }
#line 185
    seq_printf(seq, "\t%3d%% sector pos: %llu/%llu\n", (int )(bit_pos / (bm_bits / 100UL + 1UL)),
               (unsigned long long )bit_pos * 8ULL, (unsigned long long )bm_bits * 8ULL);
  } else {

  }
#line 191
  return;
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 195
  __mptr = (struct lc_element  const  *)e;
#line 195
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 197
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 200
  return;
}
}
#line 203 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 205
  hole = 0;
#line 209
  write_ordering_chars[0] = 110;
#line 209
  write_ordering_chars[1] = 100;
#line 209
  write_ordering_chars[2] = 102;
#line 215
  tmp = drbd_buildtag();
#line 215
  seq_printf(seq, "version: 8.3.11 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 96, tmp);
#line 238
  i = 0;
#line 238
  goto ldv_48964;
  ldv_48963: 
#line 239
  mdev = minor_to_mdev((unsigned int )i);
#line 240
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 241
    hole = 1;
#line 242
    goto ldv_48962;
  } else {

  }
#line 244
  if (hole != 0) {
#line 245
    hole = 0;
#line 246
    seq_printf(seq, "\n");
  } else {

  }
#line 249
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38894.conn);
#line 251
  if (((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 254
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 256
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 256
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 256
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 256
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 256
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 256
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 256
    tmp___6 = is_susp(mdev->state);
#line 256
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.pdsk);
#line 256
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.disk);
#line 256
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_38894.peer);
#line 256
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_38894.role);
#line 256
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2278UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 287
    tmp___11 = drbd_bm_total_weight(mdev);
#line 287
    seq_printf(seq, " oos:%llu\n", (unsigned long long )tmp___11 << 2);
  }
#line 291
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 295
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 297
  if (proc_details > 0) {
#line 297
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 297
    if (tmp___12 != 0) {
#line 298
      lc_seq_printf_stats(seq, mdev->resync);
#line 299
      lc_seq_printf_stats(seq, mdev->act_log);
#line 300
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 303
  if (proc_details > 1) {
#line 304
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 305
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_48962: 
#line 238
  i = i + 1;
  ldv_48964: ;
#line 238
  if ((unsigned int )i < minor_count) {
#line 239
    goto ldv_48963;
  } else {

  }

#line 311
  return (0);
}
}
#line 314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 316
  tmp___1 = ldv_try_module_get_1(& __this_module);
#line 316
  if (tmp___1 != 0) {
#line 317
    tmp = PDE((struct inode  const  *)inode);
#line 317
    tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 317
    return (tmp___0);
  } else {

  }
#line 318
  return (-19);
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_release(struct inode *inode , struct file *file ) 
{ 
  int tmp ;

  {
#line 323
  ldv_module_put_2(& __this_module);
#line 324
  tmp = single_release(inode, file);
#line 324
  return (tmp);
}
}
#line 348
extern void ldv_check_return_value(int  ) ;
#line 357
extern void ldv_handler_precall(void) ;
#line 366 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void main(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_4 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 400
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 390
  LDV_IN_INTERRUPT = 1;
#line 399
  ldv_initialize();
#line 403
  goto ldv_49000;
  ldv_48999: 
#line 407
  tmp = nondet_int();
#line 407
  switch (tmp) {
  case 0: ;
#line 412
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 417
    ldv_handler_precall();
#line 418
    res_drbd_proc_open_4 = drbd_proc_open(var_group1, var_group2);
#line 419
    ldv_check_return_value(res_drbd_proc_open_4);
#line 420
    if (res_drbd_proc_open_4 != 0) {
#line 421
      goto ldv_module_exit;
    } else {

    }
#line 422
    ldv_s_drbd_proc_fops_file_operations = ldv_s_drbd_proc_fops_file_operations + 1;
  } else {

  }
#line 428
  goto ldv_48996;
  case 1: ;
#line 432
  if (ldv_s_drbd_proc_fops_file_operations == 1) {
#line 437
    ldv_handler_precall();
#line 438
    drbd_proc_release(var_group1, var_group2);
#line 439
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 445
  goto ldv_48996;
  default: ;
#line 446
  goto ldv_48996;
  }
  ldv_48996: ;
  ldv_49000: 
#line 403
  tmp___0 = nondet_int();
#line 403
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 405
    goto ldv_48999;
  } else {

  }

  ldv_module_exit: ;
#line 455
  ldv_check_final_state();
#line 458
  return;
}
}
#line 462 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
__inline static int ldv_try_module_get_1(struct module *module ) 
{ 
  int tmp ;

  {
#line 467
  tmp = ldv_try_module_get(module);
#line 467
  return (tmp);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_module_put_2(struct module *ldv_func_arg1 ) 
{ 


  {
#line 475
  ldv_module_put(ldv_func_arg1);
#line 476
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 111
extern void __list_del_entry(struct list_head * ) ;
#line 112
extern void list_del(struct list_head * ) ;
#line 142 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 144
  __list_del_entry(entry);
#line 145
  INIT_LIST_HEAD(entry);
#line 146
  return;
}
}
#line 186 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 188
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 273 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 277
  first = list->next;
#line 278
  last = list->prev;
#line 280
  first->prev = prev;
#line 281
  prev->next = first;
#line 283
  last->next = next;
#line 284
  next->prev = last;
#line 285
  return;
}
}
#line 318 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 321
  tmp = list_empty((struct list_head  const  *)list);
#line 321
  if (tmp == 0) {
#line 322
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 323
    INIT_LIST_HEAD(list);
  } else {

  }
#line 325
  return;
}
}
#line 317 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __ret ;

  {
#line 216
  __ret = new;
#line 216
  switch (4UL) {
  case 1UL: 
#line 216
  __asm__  volatile   ("xchgb %b0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5629;
  case 2UL: 
#line 216
  __asm__  volatile   ("xchgw %w0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5629;
  case 4UL: 
#line 216
  __asm__  volatile   ("xchgl %0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5629;
  case 8UL: 
#line 216
  __asm__  volatile   ("xchgq %q0, %1\n": "+r" (__ret), "+m" (v->counter): : "memory",
                       "cc");
#line 216
  goto ldv_5629;
  default: 
#line 216
  __xchg_wrong_size();
  }
  ldv_5629: ;
#line 216
  return (__ret);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_6176.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_6176.rlock);
#line 326
  return;
}
}
#line 211 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 275
extern void add_timer(struct timer_list * ) ;
#line 341 "include/linux/page-flags.h"
__inline static int PageTail(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 341
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 341
  return (tmp);
}
}
#line 353 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 355
  tmp = PageTail((struct page  const  *)page);
#line 355
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 355
  if (tmp___0 != 0L) {
#line 356
    return (page->ldv_15532.first_page);
  } else {

  }
#line 357
  return (page);
}
}
#line 375 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 377
  tmp = compound_head(page);
#line 377
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->ldv_15519.ldv_15518.ldv_15517._count));
#line 377
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_19630: ;
#line 63
    goto ldv_19630;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19631: ;
#line 65
    goto ldv_19631;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_19632: ;
#line 66
    goto ldv_19632;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.ldv_5960.head_tail = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 882 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 901
  return ((loff_t )inode->i_size);
}
}
#line 360 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 2206
extern void flush_signals(struct task_struct * ) ;
#line 2240
extern void force_sig(int  , struct task_struct * ) ;
#line 1394 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1133 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1135
  return (& tfm->base);
}
}
#line 1153 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1155
  tmp = crypto_hash_tfm(tfm);
#line 1155
  return (& tmp->crt_u.hash);
}
}
#line 1168 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1170
  tmp = crypto_hash_crt(tfm);
#line 1170
  return (tmp->digestsize);
}
}
#line 1188 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1190
  tmp = crypto_hash_crt(desc->tfm);
#line 1190
  tmp___0 = (*(tmp->init))(desc);
#line 1190
  return (tmp___0);
}
}
#line 1193 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1197
  tmp = crypto_hash_crt(desc->tfm);
#line 1197
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1197
  return (tmp___0);
}
}
#line 1200 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1202
  tmp = crypto_hash_crt(desc->tfm);
#line 1202
  tmp___0 = (*(tmp->final))(desc, out);
#line 1202
  return (tmp___0);
}
}
#line 225 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 669 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1004 "include/linux/blkdev.h"
__inline static unsigned int queue_max_hw_sectors(struct request_queue *q ) 
{ 


  {
#line 1006
  return (q->limits.max_hw_sectors);
}
}
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 680
  __asm__  volatile   ("": : : "memory");
#line 681
  return (thi->t_state);
}
}
#line 1144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1146
  return (mdev->minor);
}
}
#line 1157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1159
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1162
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1162
  if (tmp != 0L) {
#line 1163
    mutex_unlock(& mdev->data.mutex);
#line 1164
    return (0);
  } else {

  }
#line 1166
  return (1);
}
}
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1171
  mutex_unlock(& mdev->data.mutex);
#line 1172
  return;
}
}
#line 1198
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1210
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1212
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1229
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) ;
#line 1233
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1238
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1246
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1252
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1254
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1255
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1257
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1258
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1260
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1264
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1270
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1271
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) ;
#line 1273
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1275
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1276
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1279
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1499
wait_queue_head_t drbd_pp_wait ;
#line 1501 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1529
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1532
int drbd_worker(struct drbd_thread *thi ) ;
#line 1533
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1534
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1535
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1536
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1537
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1541
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1542
void drbd_rs_controller_reset(struct drbd_conf *mdev ) ;
#line 1544 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1546
  if (mdev->ov_last_oos_size != 0UL) {
#line 1547
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1551
  mdev->ov_last_oos_size = 0UL;
#line 1552
  return;
}
}
#line 1555
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1556
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1559
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1560
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1561
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1562
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1563
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1564
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1565
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1566
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1568
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1569
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1570
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1571
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1572
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1574
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1575
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1576
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1578
void resync_timer_fn(unsigned long data ) ;
#line 1579
void start_resync_timer_fn(unsigned long data ) ;
#line 1582
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) ;
#line 1583
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1586
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1591
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1606 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1610
  if (level == 1) {
#line 1611
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1613
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1615
  return (err);
}
}
#line 1618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1620
  val = 1;
#line 1621
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1623
  return;
}
}
#line 1625 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1627
  val = 0;
#line 1628
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1630
  return;
}
}
#line 1655
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1656
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1657
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1659
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1660
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1661
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1662
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1665
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) ;
#line 1666
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1670
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) ;
#line 1747 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1749
  return ((struct page *)page->ldv_15532.private);
}
}
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_48622;
  ldv_48621: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_48622: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_48621;
    } else {
#line 1776
      goto ldv_48623;
    }
  } else {

  }
  ldv_48623: ;
#line 1777
  return (0);
}
}
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_48627;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_48630: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_48629;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_48630;
  ldv_48629: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48627: ;
#line 1786
  return;
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1789
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1790
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1791
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38894.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38894.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_48655;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38894.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38894.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_48655;
  }
  ldv_48655: ;
#line 1847
  return;
}
}
#line 1905 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1908
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1908
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1908
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1908
    tmp___0 = 0UL;
  }
#line 1908
  return (tmp___0);
}
}
#line 1987 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1990
  tmp = spinlock_check(& q->q_lock);
#line 1990
  flags = _raw_spin_lock_irqsave(tmp);
#line 1991
  list_add_tail(& w->list, & q->q);
#line 1992
  up(& q->s);
#line 1994
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1995
  return;
}
}
#line 1997 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1999
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1999
  if (tmp != 0) {
#line 2000
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 2001
  return;
}
}
#line 2003 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 2005
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 2006
  wake_asender(mdev);
#line 2007
  return;
}
}
#line 2009 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2013
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 2013
  return (tmp);
}
}
#line 2028 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 2030
  _drbd_thread_stop(thi, 0, 1);
#line 2031
  return;
}
}
#line 2088 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2090
  atomic_inc(& mdev->rs_pending_cnt);
#line 2091
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 268 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 271
  bio = bio_clone(bio_src, 16U);
#line 273
  req->private_bio = bio;
#line 275
  bio->bi_private = (void *)req;
#line 276
  bio->bi_end_io = & drbd_endio_pri;
#line 277
  bio->bi_next = 0;
#line 278
  return;
}
}
#line 321
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 323
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 332
  mdev = req->mdev;
#line 337
  rv = __req_mod(req, what, & m);
#line 338
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 339
    complete_master_bio(mdev, & m);
  } else {

  }
#line 341
  return (rv);
}
}
#line 348 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 352
  mdev = req->mdev;
#line 356
  tmp = spinlock_check(& mdev->req_lock);
#line 356
  flags = _raw_spin_lock_irqsave(tmp);
#line 357
  rv = __req_mod(req, what, & m);
#line 358
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 360
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 361
    complete_master_bio(mdev, & m);
  } else {

  }
#line 363
  return (rv);
}
}
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 49
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 77 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 81
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 82
  md_io->error = error;
#line 84
  complete(& md_io->event);
#line 85
  return;
}
}
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 92
  flags = 0UL;
#line 93
  mdev = e->mdev;
#line 95
  if (e->ldv_47617.block_id == 0ULL) {
#line 95
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            95);
  } else {

  }
#line 97
  tmp = spinlock_check(& mdev->req_lock);
#line 97
  flags = _raw_spin_lock_irqsave(tmp);
#line 98
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 99
  list_del(& e->w.list);
#line 100
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 100
  if (tmp___0 != 0) {
#line 101
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 102
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 102
  if (tmp___1 != 0) {
#line 103
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 104
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 106
  drbd_queue_work(& mdev->data.work, & e->w);
#line 107
  put_ldev(mdev);
#line 108
  return;
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 114
  flags = 0UL;
#line 115
  mdev = e->mdev;
#line 121
  if (e->ldv_47617.block_id == 0ULL) {
#line 121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            121);
  } else {

  }
#line 127
  e_sector = e->sector;
#line 128
  do_al_complete_io = (int )e->flags & 1;
#line 129
  is_syncer_req = e->ldv_47617.block_id == 0xffffffffffffffffULL;
#line 131
  tmp = spinlock_check(& mdev->req_lock);
#line 131
  flags = _raw_spin_lock_irqsave(tmp);
#line 132
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 133
  list_del(& e->w.list);
#line 134
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 141
  if (is_syncer_req != 0) {
#line 141
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 141
    do_wake = tmp___0;
  } else {
#line 141
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 141
    do_wake = tmp___1;
  }
#line 145
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 145
  if (tmp___2 != 0) {
#line 146
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 147
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 149
  if (is_syncer_req != 0) {
#line 150
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 152
  if (do_wake != 0) {
#line 153
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 155
  if (do_al_complete_io != 0) {
#line 156
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 158
  wake_asender(mdev);
#line 159
  put_ldev(mdev);
#line 160
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 167
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 168
  mdev = e->mdev;
#line 169
  uptodate = (int )bio->bi_flags & 1;
#line 170
  is_write = (int )bio->bi_rw & 1;
#line 172
  if (error != 0) {
#line 172
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 172
    if (tmp != 0) {
#line 173
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
    } else {

    }
  } else {

  }
#line 176
  if (error == 0 && uptodate == 0) {
#line 177
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_endio_sec");
#line 177
    if (tmp___0 != 0) {
#line 178
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
               is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
    } else {

    }
#line 184
    error = -5;
  } else {

  }
#line 187
  if (error != 0) {
#line 188
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 190
  bio_put(bio);
#line 191
  tmp___1 = atomic_dec_and_test(& e->pending_bios);
#line 191
  if (tmp___1 != 0) {
#line 192
    if (is_write != 0) {
#line 193
      drbd_endio_write_sec_final(e);
    } else {
#line 195
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 196
  return;
}
}
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;
  raw_spinlock_t *tmp___1 ;

  {
#line 204
  req = (struct drbd_request *)bio->bi_private;
#line 205
  mdev = req->mdev;
#line 208
  uptodate = (int )bio->bi_flags & 1;
#line 210
  if (error == 0 && uptodate == 0) {
#line 211
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 216
    error = -5;
  } else {

  }
#line 220
  tmp = __builtin_expect(error != 0, 0L);
#line 220
  if (tmp != 0L) {
#line 221
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 4097UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 227
    what = completed_ok;
  }
#line 229
  bio_put(req->private_bio);
#line 230
  tmp___0 = ERR_PTR((long )error);
#line 230
  req->private_bio = (struct bio *)tmp___0;
#line 233
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 233
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 234
  __req_mod(req, what, & m);
#line 235
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 237
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 238
    complete_master_bio(mdev, & m);
  } else {

  }
#line 239
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 243
  __mptr = (struct drbd_work  const  *)w;
#line 243
  req = (struct drbd_request *)__mptr;
#line 249
  spin_lock_irq(& mdev->req_lock);
#line 250
  if (cancel != 0 || *((unsigned int *)mdev + 569UL) != 65536U) {
#line 251
    _req_mod(req, read_retry_remote_canceled);
#line 252
    spin_unlock_irq(& mdev->req_lock);
#line 253
    return (1);
  } else {

  }
#line 255
  spin_unlock_irq(& mdev->req_lock);
#line 257
  tmp = w_send_read_req(mdev, w, 0);
#line 257
  return (tmp);
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 264
  page = e->pages;
#line 268
  desc.tfm = tfm;
#line 269
  desc.flags = 0U;
#line 271
  sg_init_table(& sg, 1U);
#line 272
  crypto_hash_init(& desc);
#line 274
  goto ldv_49133;
  ldv_49132: 
#line 276
  sg_set_page(& sg, page, 4096U, 0U);
#line 277
  crypto_hash_update(& desc, & sg, sg.length);
#line 278
  page = tmp;
  ldv_49133: 
#line 274
  tmp = page_chain_next(page);
#line 274
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 275
    goto ldv_49132;
  } else {

  }
#line 281
  len = e->size & 4095U;
#line 282
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 283
  crypto_hash_update(& desc, & sg, sg.length);
#line 284
  crypto_hash_final(& desc, (u8 *)digest);
#line 285
  return;
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 294
  desc.tfm = tfm;
#line 295
  desc.flags = 0U;
#line 297
  sg_init_table(& sg, 1U);
#line 298
  crypto_hash_init(& desc);
#line 300
  bvec = bio->bi_io_vec;
#line 300
  i = 0;
#line 300
  goto ldv_49146;
  ldv_49145: 
#line 301
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 302
  crypto_hash_update(& desc, & sg, sg.length);
#line 300
  bvec = bvec + 1;
#line 300
  i = i + 1;
  ldv_49146: ;
#line 300
  if ((int )bio->bi_vcnt > i) {
#line 301
    goto ldv_49145;
  } else {

  }
#line 304
  crypto_hash_final(& desc, (u8 *)digest);
#line 305
  return;
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  sector_t sector ;
  unsigned int size ;
  long tmp___2 ;

  {
#line 310
  __mptr = (struct drbd_work  const  *)w;
#line 310
  e = (struct drbd_epoch_entry *)__mptr;
#line 313
  ok = 1;
#line 315
  if (e->ldv_47617.block_id != 2205466966ULL) {
#line 315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            315);
  } else {

  }
#line 317
  tmp = __builtin_expect(cancel != 0, 0L);
#line 317
  if (tmp != 0L) {
#line 318
    goto out;
  } else {

  }
#line 320
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 1L);
#line 320
  if (tmp___0 != 0L) {
#line 321
    goto out;
  } else {

  }
#line 323
  tmp___1 = crypto_hash_digestsize(mdev->csums_tfm);
#line 323
  digest_size = (int )tmp___1;
#line 324
  digest = kmalloc((size_t )digest_size, 16U);
#line 325
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 326
    sector = e->sector;
#line 327
    size = e->size;
#line 328
    drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 334
    drbd_free_some_ee(mdev, e, 0);
#line 335
    e = 0;
#line 336
    inc_rs_pending(mdev);
#line 337
    ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_CSUM_RS_REQUEST);
#line 340
    kfree((void const   *)digest);
  } else {
#line 342
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 343
    ok = 0;
  }
  out: ;
#line 347
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 348
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 350
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 350
  if (tmp___2 != 0L) {
#line 351
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 352
  return (ok);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 361
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 361
  if (tmp == 0) {
#line 362
    return (-5);
  } else {

  }
#line 364
  tmp___0 = drbd_rs_should_slow_down(mdev, sector);
#line 364
  if (tmp___0 != 0) {
#line 365
    goto defer;
  } else {

  }
#line 369
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 370
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 371
    goto defer;
  } else {

  }
#line 373
  e->w.cb = & w_e_send_csum;
#line 374
  spin_lock_irq(& mdev->req_lock);
#line 375
  list_add(& e->w.list, & mdev->read_ee);
#line 376
  spin_unlock_irq(& mdev->req_lock);
#line 378
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 379
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 379
  if (tmp___1 == 0) {
#line 380
    return (0);
  } else {

  }
#line 386
  spin_lock_irq(& mdev->req_lock);
#line 387
  list_del(& e->w.list);
#line 388
  spin_unlock_irq(& mdev->req_lock);
#line 390
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 392
  put_ldev(mdev);
#line 393
  return (-11);
}
}
#line 396 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_timer(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 398
  switch ((int )mdev->state.ldv_38894.conn) {
  case 18: 
#line 400
  w_make_ov_request(mdev, w, cancel);
#line 401
  goto ldv_49175;
  case 17: 
#line 403
  w_make_resync_request(mdev, w, cancel);
#line 404
  goto ldv_49175;
  }
  ldv_49175: ;
#line 407
  return (1);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 412
  mdev = (struct drbd_conf *)data;
#line 414
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 414
  if (tmp != 0) {
#line 415
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 416
  return;
}
}
#line 418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 422
  i = 0;
#line 422
  goto ldv_49187;
  ldv_49186: 
#line 423
  *(fb->values + (unsigned long )i) = value;
#line 422
  i = i + 1;
  ldv_49187: ;
#line 422
  if ((unsigned int )i < fb->size) {
#line 423
    goto ldv_49186;
  } else {

  }

#line 427
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 430
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 431
  tmp = fb->head_index;
#line 431
  fb->head_index = fb->head_index + 1U;
#line 431
  *(fb->values + (unsigned long )tmp) = value;
#line 433
  if (fb->head_index >= fb->size) {
#line 434
    fb->head_index = 0U;
  } else {

  }
#line 436
  return (ov);
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 443
  i = 0;
#line 443
  goto ldv_49200;
  ldv_49199: 
#line 444
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 443
  i = i + 1;
  ldv_49200: ;
#line 443
  if ((unsigned int )i < fb->size) {
#line 444
    goto ldv_49199;
  } else {

  }

#line 448
  return;
}
}
#line 447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 458
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 458
  sect_in = (unsigned int )tmp;
#line 459
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 461
  spin_lock(& mdev->peer_seq_lock);
#line 463
  steps = (int )mdev->rs_plan_s.size;
#line 465
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 466
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 468
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 472
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 475
  cps = correction / steps;
#line 476
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 477
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 480
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 481
  spin_unlock(& mdev->peer_seq_lock);
#line 482
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 484
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 485
  if (req_sect < 0) {
#line 486
    req_sect = 0;
  } else {

  }
#line 488
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 489
  if (req_sect > max_sect) {
#line 490
    req_sect = max_sect;
  } else {

  }
#line 498
  return (req_sect);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int drbd_rs_number_requests(struct drbd_conf *mdev ) 
{ 
  int number ;
  int tmp ;

  {
#line 504
  if (mdev->rs_plan_s.size != 0U) {
#line 505
    tmp = drbd_rs_controller(mdev);
#line 505
    number = tmp >> 3;
#line 506
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 508
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 509
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 514
  return (number);
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_bio_size ;
  int number ;
  int rollback_i ;
  int size ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long tmp___12 ;

  {
#line 522
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 522
  capacity = tmp;
#line 526
  i = 0;
#line 528
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 528
  if (tmp___0 != 0L) {
#line 529
    return (1);
  } else {

  }
#line 531
  if (mdev->rs_total == 0UL) {
#line 533
    drbd_resync_finished(mdev);
#line 534
    return (1);
  } else {

  }
#line 537
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 537
  if (tmp___1 == 0) {
#line 542
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 543
    return (1);
  } else {

  }
#line 546
  tmp___2 = queue_max_hw_sectors(mdev->rq_queue);
#line 546
  max_bio_size = (int )(tmp___2 << 9);
#line 547
  number = drbd_rs_number_requests(mdev);
#line 548
  if (number == 0) {
#line 549
    goto requeue;
  } else {

  }
#line 551
  i = 0;
#line 551
  goto ldv_49248;
  ldv_49247: 
#line 553
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 554
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 555
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 556
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 558
    queued = 1;
#line 559
    sndbuf = 0;
  }
#line 561
  mutex_unlock(& mdev->data.mutex);
#line 562
  if (sndbuf / 2 < queued) {
#line 563
    goto requeue;
  } else {

  }
  next_sector: 
#line 566
  size = 4096;
#line 567
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 569
  if (bit == 0xffffffffffffffffUL) {
#line 570
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 571
    put_ldev(mdev);
#line 572
    return (1);
  } else {

  }
#line 575
  sector = bit << 3;
#line 577
  tmp___3 = drbd_rs_should_slow_down(mdev, sector);
#line 577
  if (tmp___3 != 0) {
#line 579
    mdev->bm_resync_fo = bit;
#line 580
    goto requeue;
  } else {
#line 577
    tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 577
    if (tmp___4 != 0) {
#line 579
      mdev->bm_resync_fo = bit;
#line 580
      goto requeue;
    } else {

    }
  }
#line 582
  mdev->bm_resync_fo = bit + 1UL;
#line 584
  tmp___5 = drbd_bm_test_bit(mdev, bit);
#line 584
  tmp___6 = __builtin_expect(tmp___5 == 0, 0L);
#line 584
  if (tmp___6 != 0L) {
#line 585
    drbd_rs_complete_io(mdev, sector);
#line 586
    goto next_sector;
  } else {

  }
#line 596
  align = 1;
#line 597
  rollback_i = i;
  ldv_49236: ;
#line 599
  if (size + 4096 > max_bio_size) {
#line 600
    goto ldv_49235;
  } else {

  }
#line 603
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 604
    goto ldv_49235;
  } else {

  }
#line 607
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 608
    goto ldv_49235;
  } else {

  }
#line 614
  tmp___7 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 614
  if (tmp___7 != 1) {
#line 615
    goto ldv_49235;
  } else {

  }
#line 616
  bit = bit + 1UL;
#line 617
  size = size + 4096;
#line 618
  if (4096 << align <= size) {
#line 619
    align = align + 1;
  } else {

  }
#line 620
  i = i + 1;
#line 621
  goto ldv_49236;
  ldv_49235: ;
#line 624
  if (size > 4096) {
#line 625
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 629
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 630
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 631
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 632
    tmp___8 = read_for_csum(mdev, sector, size);
#line 632
    switch (tmp___8) {
    case -5: 
#line 634
    put_ldev(mdev);
#line 635
    return (0);
    case -11: 
#line 637
    drbd_rs_complete_io(mdev, sector);
#line 638
    mdev->bm_resync_fo = sector >> 3;
#line 639
    i = rollback_i;
#line 640
    goto requeue;
    case 0: ;
#line 643
    goto ldv_49240;
    default: 
#line 645
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (645), "i" (12UL));
    ldv_49242: ;
#line 645
    goto ldv_49242;
    }
    ldv_49240: ;
  } else {
#line 648
    inc_rs_pending(mdev);
#line 649
    tmp___11 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 649
    if (tmp___11 == 0) {
#line 651
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 652
      atomic_dec(& mdev->rs_pending_cnt);
#line 652
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 652
      if (tmp___10 < 0) {
#line 652
        tmp___9 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 652
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 652, tmp___9);
      } else {

      }
#line 653
      put_ldev(mdev);
#line 654
      return (0);
    } else {

    }
  }
#line 551
  i = i + 1;
  ldv_49248: ;
#line 551
  if (i < number) {
#line 552
    goto ldv_49247;
  } else {

  }
#line 659
  tmp___12 = drbd_bm_bits(mdev);
#line 659
  if (mdev->bm_resync_fo >= tmp___12) {
#line 666
    put_ldev(mdev);
#line 667
    return (1);
  } else {

  }
  requeue: 
#line 671
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 672
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 673
  put_ldev(mdev);
#line 674
  return (1);
}
}
#line 677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 681
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 681
  capacity = tmp;
#line 683
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 683
  if (tmp___0 != 0L) {
#line 684
    return (1);
  } else {

  }
#line 686
  number = drbd_rs_number_requests(mdev);
#line 688
  sector = mdev->ov_position;
#line 689
  i = 0;
#line 689
  goto ldv_49266;
  ldv_49265: ;
#line 690
  if (sector >= capacity) {
#line 691
    return (1);
  } else {

  }
#line 694
  size = 4096;
#line 696
  tmp___1 = drbd_rs_should_slow_down(mdev, sector);
#line 696
  if (tmp___1 != 0) {
#line 698
    mdev->ov_position = sector;
#line 699
    goto requeue;
  } else {
#line 696
    tmp___2 = drbd_try_rs_begin_io(mdev, sector);
#line 696
    if (tmp___2 != 0) {
#line 698
      mdev->ov_position = sector;
#line 699
      goto requeue;
    } else {

    }
  }
#line 702
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 703
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 705
  inc_rs_pending(mdev);
#line 706
  tmp___5 = drbd_send_ov_request(mdev, sector, size);
#line 706
  if (tmp___5 == 0) {
#line 707
    atomic_dec(& mdev->rs_pending_cnt);
#line 707
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 707
    if (tmp___4 < 0) {
#line 707
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 707
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 707, tmp___3);
    } else {

    }
#line 708
    return (0);
  } else {

  }
#line 710
  sector = sector + 8UL;
#line 689
  i = i + 1;
  ldv_49266: ;
#line 689
  if (i < number) {
#line 690
    goto ldv_49265;
  } else {

  }
#line 712
  mdev->ov_position = sector;
  requeue: 
#line 715
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 716
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 717
  return (1);
}
}
#line 721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void start_resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 723
  mdev = (struct drbd_conf *)data;
#line 725
  drbd_queue_work(& mdev->data.work, & mdev->start_resync_work);
#line 726
  return;
}
}
#line 728 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_start_resync(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 730
  tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 730
  if (tmp != 0) {
#line 731
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 732
    mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 733
    add_timer(& mdev->start_resync_timer);
#line 734
    return (1);
  } else {
#line 730
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 730
    if (tmp___0 != 0) {
#line 731
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "w_start_resync later...\n");
#line 732
      mdev->start_resync_timer.expires = (unsigned long )jiffies + 25UL;
#line 733
      add_timer(& mdev->start_resync_timer);
#line 734
      return (1);
    } else {

    }
  }
#line 737
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 738
  clear_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 739
  return (1);
}
}
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 744
  kfree((void const   *)w);
#line 745
  ov_oos_print(mdev);
#line 746
  drbd_resync_finished(mdev);
#line 748
  return (1);
}
}
#line 751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 753
  kfree((void const   *)w);
#line 755
  drbd_resync_finished(mdev);
#line 757
  return (1);
}
}
#line 760 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 762
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 763
  request_ping(mdev);
#line 764
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 764
  if (tmp != 0 || (int )mdev->state.ldv_38894.conn <= 9) {
#line 764
    goto ldv_49290;
  } else {

  }
#line 764
  tmp___0 = get_current();
#line 764
  __wait.flags = 0U;
#line 764
  __wait.private = (void *)tmp___0;
#line 764
  __wait.func = & autoremove_wake_function;
#line 764
  __wait.task_list.next = & __wait.task_list;
#line 764
  __wait.task_list.prev = & __wait.task_list;
  ldv_49293: 
#line 764
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 764
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 764
  if (tmp___1 != 0 || (int )mdev->state.ldv_38894.conn <= 9) {
#line 764
    goto ldv_49292;
  } else {

  }
#line 764
  schedule();
#line 764
  goto ldv_49293;
  ldv_49292: 
#line 764
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_49290: ;
#line 767
  return;
}
}
#line 768 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  int verify_done ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;

  {
#line 774
  khelper_cmd = 0;
#line 775
  verify_done = 0;
#line 780
  tmp___0 = drbd_rs_del_all(mdev);
#line 780
  if (tmp___0 != 0) {
#line 786
    schedule_timeout_interruptible(25L);
#line 787
    tmp = kmalloc(24UL, 32U);
#line 787
    w = (struct drbd_work *)tmp;
#line 788
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 789
      w->cb = & w_resync_finished;
#line 790
      drbd_queue_work(& mdev->data.work, w);
#line 791
      return (1);
    } else {

    }
#line 793
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 796
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 797
  if (dt == 0UL) {
#line 798
    dt = 1UL;
  } else {

  }
#line 799
  db = mdev->rs_total;
#line 800
  dbdt = db / dt << 2;
#line 801
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 803
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 803
  if (tmp___1 == 0) {
#line 804
    goto out;
  } else {

  }
#line 806
  ping_peer(mdev);
#line 808
  spin_lock_irq(& mdev->req_lock);
#line 809
  os = mdev->state;
#line 811
  verify_done = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U;
#line 815
  if ((int )os.ldv_38894.conn <= 10) {
#line 816
    goto out_unlock;
  } else {

  }
#line 818
  ns = os;
#line 819
  ns.ldv_38894.conn = 10U;
#line 821
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            verify_done != 0 ? (char *)"Online verify " : (char *)"Resync", mdev->rs_paused + dt,
            mdev->rs_paused, dbdt);
#line 825
  n_oos = drbd_bm_total_weight(mdev);
#line 827
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 828
    if (n_oos != 0UL) {
#line 829
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 831
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 834
      if (mdev->rs_failed != n_oos) {
#line 834
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                834);
      } else {

      }
#line 836
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 837
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 839
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 840
        s = mdev->rs_same_csum;
#line 841
        t = mdev->rs_total;
#line 842
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 845
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal checksums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 854
  if (mdev->rs_failed != 0UL) {
#line 855
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 857
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 858
      ns.ldv_38894.disk = 4U;
#line 859
      ns.ldv_38894.pdsk = 8U;
    } else {
#line 861
      ns.ldv_38894.disk = 8U;
#line 862
      ns.ldv_38894.pdsk = 4U;
    }
  } else {
#line 865
    ns.ldv_38894.disk = 8U;
#line 866
    ns.ldv_38894.pdsk = 8U;
#line 868
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 869
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 871
        i = 1;
#line 871
        goto ldv_49313;
        ldv_49312: 
#line 872
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 871
        i = i + 1;
        ldv_49313: ;
#line 871
        if (i <= 3) {
#line 872
          goto ldv_49312;
        } else {

        }
#line 873
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 874
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 876
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 880
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 288U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 304U) {
#line 883
      drbd_uuid_set_bm(mdev, 0ULL);
#line 884
      drbd_print_uuids(mdev, "updated UUIDs");
#line 885
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 889
        i___0 = 0;
#line 889
        goto ldv_49317;
        ldv_49316: 
#line 890
        *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 889
        i___0 = i___0 + 1;
        ldv_49317: ;
#line 889
        if (i___0 <= 3) {
#line 890
          goto ldv_49316;
        } else {

        }

      } else {

      }
    } else {

    }
  }
#line 895
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 897
  spin_unlock_irq(& mdev->req_lock);
#line 898
  put_ldev(mdev);
  out: 
#line 900
  mdev->rs_total = 0UL;
#line 901
  mdev->rs_failed = 0UL;
#line 902
  mdev->rs_paused = 0UL;
#line 903
  if (verify_done != 0) {
#line 904
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 906
  drbd_md_sync(mdev);
#line 908
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 909
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 911
  return (1);
}
}
#line 915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 917
  tmp = drbd_ee_has_active_page(e);
#line 917
  if (tmp != 0) {
#line 919
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 920
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 921
    atomic_sub(i, & mdev->pp_in_use);
#line 922
    spin_lock_irq(& mdev->req_lock);
#line 923
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 924
    spin_unlock_irq(& mdev->req_lock);
#line 925
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 927
    drbd_free_some_ee(mdev, e, 0);
  }
#line 928
  return;
}
}
#line 936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 938
  __mptr = (struct drbd_work  const  *)w;
#line 938
  e = (struct drbd_epoch_entry *)__mptr;
#line 941
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 941
  if (tmp___1 != 0L) {
#line 942
    drbd_free_some_ee(mdev, e, 0);
#line 943
    atomic_dec(& mdev->unacked_cnt);
#line 943
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 943
    if (tmp___0 < 0) {
#line 943
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 943
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 943, tmp);
    } else {

    }
#line 944
    return (1);
  } else {

  }
#line 947
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 947
  if (tmp___3 != 0L) {
#line 948
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 950
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 950
    if (tmp___2 != 0) {
#line 951
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 954
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 957
  atomic_dec(& mdev->unacked_cnt);
#line 957
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 957
  if (tmp___5 < 0) {
#line 957
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 957, tmp___4);
  } else {

  }
#line 959
  move_to_net_ee_or_free(mdev, e);
#line 961
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 961
  if (tmp___6 != 0L) {
#line 962
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 963
  return (ok);
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 974
  __mptr = (struct drbd_work  const  *)w;
#line 974
  e = (struct drbd_epoch_entry *)__mptr;
#line 977
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 977
  if (tmp___1 != 0L) {
#line 978
    drbd_free_some_ee(mdev, e, 0);
#line 979
    atomic_dec(& mdev->unacked_cnt);
#line 979
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 979
    if (tmp___0 < 0) {
#line 979
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 979
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 979, tmp);
    } else {

    }
#line 980
    return (1);
  } else {

  }
#line 983
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 983
  if (tmp___2 != 0) {
#line 984
    drbd_rs_complete_io(mdev, e->sector);
#line 985
    put_ldev(mdev);
  } else {

  }
#line 988
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 989
    ok = drbd_send_ack(mdev, P_RS_CANCEL, e);
  } else {
#line 990
    tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 990
    if (tmp___6 != 0L) {
#line 991
      tmp___4 = __builtin_expect((int )mdev->state.ldv_38894.pdsk > 3, 1L);
#line 991
      if (tmp___4 != 0L) {
#line 992
        inc_rs_pending(mdev);
#line 993
        ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
      } else {
#line 995
        tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 995
        if (tmp___3 != 0) {
#line 996
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
        } else {

        }
#line 998
        ok = 1;
      }
    } else {
#line 1001
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1001
      if (tmp___5 != 0) {
#line 1002
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
                (unsigned long long )e->sector);
      } else {

      }
#line 1005
      ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1008
      drbd_rs_failed_io(mdev, e->sector, (int )e->size);
    }
  }
#line 1011
  atomic_dec(& mdev->unacked_cnt);
#line 1011
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
  if (tmp___8 < 0) {
#line 1011
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1011
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1011, tmp___7);
  } else {

  }
#line 1013
  move_to_net_ee_or_free(mdev, e);
#line 1015
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1015
  if (tmp___9 != 0L) {
#line 1016
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1017
  return (ok);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1022
  __mptr = (struct drbd_work  const  *)w;
#line 1022
  e = (struct drbd_epoch_entry *)__mptr;
#line 1025
  digest = 0;
#line 1026
  eq = 0;
#line 1028
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1028
  if (tmp___1 != 0L) {
#line 1029
    drbd_free_some_ee(mdev, e, 0);
#line 1030
    atomic_dec(& mdev->unacked_cnt);
#line 1030
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1030
    if (tmp___0 < 0) {
#line 1030
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1030
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1030, tmp);
    } else {

    }
#line 1031
    return (1);
  } else {

  }
#line 1034
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1034
  if (tmp___2 != 0) {
#line 1035
    drbd_rs_complete_io(mdev, e->sector);
#line 1036
    put_ldev(mdev);
  } else {

  }
#line 1039
  di = e->ldv_47617.digest;
#line 1041
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1041
  if (tmp___6 != 0L) {
#line 1045
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1046
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1046
      digest_size = (int )tmp___3;
#line 1047
      if (di->digest_size != digest_size) {
#line 1047
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1047);
      } else {

      }
#line 1048
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 1050
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1051
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1052
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1052
      eq = tmp___4 == 0;
#line 1053
      kfree((void const   *)digest);
    } else {

    }
#line 1056
    if (eq != 0) {
#line 1057
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1057U);
#line 1059
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1060
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1062
      inc_rs_pending(mdev);
#line 1063
      e->ldv_47617.block_id = 0xffffffffffffffffULL;
#line 1064
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1065
      kfree((void const   *)di);
#line 1066
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1069
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1070
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1070
    if (tmp___5 != 0) {
#line 1071
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1074
  atomic_dec(& mdev->unacked_cnt);
#line 1074
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
  if (tmp___8 < 0) {
#line 1074
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1074
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1074, tmp___7);
  } else {

  }
#line 1075
  move_to_net_ee_or_free(mdev, e);
#line 1077
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1077
  if (tmp___9 != 0L) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1079
  return (ok);
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1085
  __mptr = (struct drbd_work  const  *)w;
#line 1085
  e = (struct drbd_epoch_entry *)__mptr;
#line 1086
  sector = e->sector;
#line 1087
  size = e->size;
#line 1090
  ok = 1;
#line 1092
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1092
  if (tmp != 0L) {
#line 1093
    goto out;
  } else {

  }
#line 1095
  tmp___0 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1095
  digest_size = (int )tmp___0;
#line 1096
  digest = kmalloc((size_t )digest_size, 16U);
#line 1097
  if ((unsigned long )digest == (unsigned long )((void *)0)) {
#line 1098
    ok = 0;
#line 1099
    goto out;
  } else {

  }
#line 1102
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1102
  if (tmp___1 != 0L) {
#line 1103
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
  } else {
#line 1105
    memset(digest, 0, (size_t )digest_size);
  }
#line 1112
  drbd_free_some_ee(mdev, e, 0);
#line 1113
  e = 0;
#line 1114
  inc_rs_pending(mdev);
#line 1115
  ok = drbd_send_drequest_csum(mdev, sector, (int )size, digest, digest_size, P_OV_REPLY);
#line 1118
  if (ok == 0) {
#line 1119
    atomic_dec(& mdev->rs_pending_cnt);
#line 1119
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1119
    if (tmp___3 < 0) {
#line 1119
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1119
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_e_end_ov_req", 1119, tmp___2);
    } else {

    }
  } else {

  }
#line 1120
  kfree((void const   *)digest);
  out: ;
#line 1123
  if ((unsigned long )e != (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1124
    drbd_free_some_ee(mdev, e, 0);
  } else {

  }
#line 1125
  atomic_dec(& mdev->unacked_cnt);
#line 1125
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1125
  if (tmp___5 < 0) {
#line 1125
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1125
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1125, tmp___4);
  } else {

  }
#line 1126
  return (ok);
}
}
#line 1129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1131
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1132
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1134
    mdev->ov_last_oos_start = sector;
#line 1135
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1137
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1137U);
#line 1138
  return;
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  void *digest ;
  sector_t sector ;
  unsigned int size ;
  int digest_size ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1142
  __mptr = (struct drbd_work  const  *)w;
#line 1142
  e = (struct drbd_epoch_entry *)__mptr;
#line 1145
  sector = e->sector;
#line 1146
  size = e->size;
#line 1148
  eq = 0;
#line 1150
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1150
  if (tmp___1 != 0L) {
#line 1151
    drbd_free_some_ee(mdev, e, 0);
#line 1152
    atomic_dec(& mdev->unacked_cnt);
#line 1152
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1152
    if (tmp___0 < 0) {
#line 1152
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1152
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1152, tmp);
    } else {

    }
#line 1153
    return (1);
  } else {

  }
#line 1158
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1158
  if (tmp___2 != 0) {
#line 1159
    drbd_rs_complete_io(mdev, e->sector);
#line 1160
    put_ldev(mdev);
  } else {

  }
#line 1163
  di = e->ldv_47617.digest;
#line 1165
  tmp___5 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1165
  if (tmp___5 != 0L) {
#line 1166
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1166
    digest_size = (int )tmp___3;
#line 1167
    digest = kmalloc((size_t )digest_size, 16U);
#line 1168
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1169
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1171
      if (di->digest_size != digest_size) {
#line 1171
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1171);
      } else {

      }
#line 1172
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1172
      eq = tmp___4 == 0;
#line 1173
      kfree((void const   *)digest);
    } else {

    }
  } else {

  }
#line 1182
  drbd_free_some_ee(mdev, e, 0);
#line 1183
  if (eq == 0) {
#line 1184
    drbd_ov_oos_found(mdev, sector, (int )size);
  } else {
#line 1186
    ov_oos_print(mdev);
  }
#line 1188
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, sector, (int )size, eq != 0 ? 4711ULL : 4712ULL);
#line 1191
  atomic_dec(& mdev->unacked_cnt);
#line 1191
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1191
  if (tmp___7 < 0) {
#line 1191
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1191
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1191, tmp___6);
  } else {

  }
#line 1193
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1196
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 1197
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 1199
  if (mdev->ov_left == 0UL) {
#line 1200
    ov_oos_print(mdev);
#line 1201
    drbd_resync_finished(mdev);
  } else {

  }
#line 1204
  return (ok);
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1209
  __mptr = (struct drbd_work  const  *)w;
#line 1209
  b = (struct drbd_wq_barrier *)__mptr;
#line 1210
  complete(& b->done);
#line 1211
  return (1);
}
}
#line 1214 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1216
  __mptr = (struct drbd_work  const  *)w;
#line 1216
  b = (struct drbd_tl_epoch *)__mptr;
#line 1217
  p = & mdev->data.sbuf.barrier;
#line 1218
  ok = 1;
#line 1225
  spin_lock_irq(& mdev->req_lock);
#line 1226
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_38894.conn <= 9) {
#line 1227
    cancel = 1;
  } else {

  }
#line 1228
  spin_unlock_irq(& mdev->req_lock);
#line 1229
  if (cancel != 0) {
#line 1230
    return (1);
  } else {

  }
#line 1232
  tmp = drbd_get_data_sock(mdev);
#line 1232
  if (tmp == 0) {
#line 1233
    return (0);
  } else {

  }
#line 1234
  p->barrier = b->br_number;
#line 1238
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1240
  drbd_put_data_sock(mdev);
#line 1242
  return (ok);
}
}
#line 1245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1247
  if (cancel != 0) {
#line 1248
    return (1);
  } else {

  }
#line 1249
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1249
  return (tmp);
}
}
#line 1252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_oos(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1254
  __mptr = (struct drbd_work  const  *)w;
#line 1254
  req = (struct drbd_request *)__mptr;
#line 1257
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1257
  if (tmp != 0L) {
#line 1258
    req_mod(req, send_canceled);
#line 1259
    return (1);
  } else {

  }
#line 1262
  ok = drbd_send_oos(mdev, req);
#line 1263
  req_mod(req, oos_handed_to_network);
#line 1265
  return (ok);
}
}
#line 1274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1276
  __mptr = (struct drbd_work  const  *)w;
#line 1276
  req = (struct drbd_request *)__mptr;
#line 1279
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1279
  if (tmp != 0L) {
#line 1280
    req_mod(req, send_canceled);
#line 1281
    return (1);
  } else {

  }
#line 1284
  ok = drbd_send_dblock(mdev, req);
#line 1285
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1287
  return (ok);
}
}
#line 1296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1298
  __mptr = (struct drbd_work  const  *)w;
#line 1298
  req = (struct drbd_request *)__mptr;
#line 1301
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1301
  if (tmp != 0L) {
#line 1302
    req_mod(req, send_canceled);
#line 1303
    return (1);
  } else {

  }
#line 1306
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1309
  if (ok == 0) {
#line 1312
    if ((int )mdev->state.ldv_38894.conn > 9) {
#line 1313
      val.i = 0U;
#line 1313
      val.ldv_38894.conn = 5U;
#line 1313
      mask.i = 0U;
#line 1313
      mask.ldv_38894.conn = 31U;
#line 1313
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1315
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1317
  return (ok);
}
}
#line 1320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1322
  __mptr = (struct drbd_work  const  *)w;
#line 1322
  req = (struct drbd_request *)__mptr;
#line 1324
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1325
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1331
  drbd_req_make_private_bio(req, req->master_bio);
#line 1332
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1333
  generic_make_request(req->private_bio);
#line 1335
  return (1);
}
}
#line 1338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1340
  odev = mdev;
  ldv_49493: ;
#line 1343
  if (odev->sync_conf.after == -1) {
#line 1344
    return (1);
  } else {

  }
#line 1345
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1346
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1346
  if (_b != 0) {
#line 1346
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1346);
  } else {

  }
#line 1346
  if (_b != 0) {
#line 1346
    return (1);
  } else {

  }
#line 1347
  if (((((int )odev->state.ldv_38894.conn > 15 && (int )odev->state.ldv_38894.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1351
    return (0);
  } else {

  }
#line 1352
  goto ldv_49493;
}
}
#line 1361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1364
  rv = 0;
#line 1366
  i = 0;
#line 1366
  goto ldv_49504;
  ldv_49503: 
#line 1367
  odev = minor_to_mdev((unsigned int )i);
#line 1368
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1369
    goto ldv_49500;
  } else {

  }
#line 1370
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1371
    goto ldv_49500;
  } else {

  }
#line 1372
  tmp___0 = _drbd_may_sync_now(odev);
#line 1372
  if (tmp___0 == 0) {
#line 1373
    __ns.i = odev->state.i;
#line 1373
    __ns.ldv_38894.aftr_isp = 1U;
#line 1373
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1373
    rv = ((int )tmp != 2) | rv;
  } else {

  }
  ldv_49500: 
#line 1366
  i = i + 1;
  ldv_49504: ;
#line 1366
  if ((unsigned int )i < minor_count) {
#line 1367
    goto ldv_49503;
  } else {

  }

#line 1377
  return (rv);
}
}
#line 1386 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp ;
  int tmp___0 ;

  {
#line 1389
  rv = 0;
#line 1391
  i = 0;
#line 1391
  goto ldv_49516;
  ldv_49515: 
#line 1392
  odev = minor_to_mdev((unsigned int )i);
#line 1393
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1394
    goto ldv_49512;
  } else {

  }
#line 1395
  if ((unsigned int )*((unsigned short *)odev + 1138UL) == 0U && (unsigned int )*((unsigned char *)odev + 2277UL) == 0U) {
#line 1396
    goto ldv_49512;
  } else {

  }
#line 1397
  if ((unsigned int )*((unsigned char *)odev + 2278UL) != 0U) {
#line 1398
    tmp___0 = _drbd_may_sync_now(odev);
#line 1398
    if (tmp___0 != 0) {
#line 1399
      __ns.i = odev->state.i;
#line 1399
      __ns.ldv_38894.aftr_isp = 0U;
#line 1399
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1399
      rv = ((int )tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_49512: 
#line 1391
  i = i + 1;
  ldv_49516: ;
#line 1391
  if ((unsigned int )i < minor_count) {
#line 1392
    goto ldv_49515;
  } else {

  }

#line 1404
  return (rv);
}
}
#line 1407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1409
  _raw_write_lock_irq(& global_state_lock);
#line 1410
  _drbd_resume_next(mdev);
#line 1411
  _raw_write_unlock_irq(& global_state_lock);
#line 1412
  return;
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1416
  _raw_write_lock_irq(& global_state_lock);
#line 1417
  _drbd_pause_after(mdev);
#line 1418
  _raw_write_unlock_irq(& global_state_lock);
#line 1419
  return;
}
}
#line 1421 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1425
  if (o_minor == -1) {
#line 1426
    return (101);
  } else {

  }
#line 1427
  if (o_minor < -1) {
#line 1428
    return (132);
  } else {
#line 1427
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1427
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1428
      return (132);
    } else {

    }
  }
#line 1431
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_49529: ;
#line 1433
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1434
    return (133);
  } else {

  }
#line 1437
  if (odev->sync_conf.after == -1) {
#line 1438
    return (101);
  } else {

  }
#line 1441
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1442
  goto ldv_49529;
}
}
#line 1445 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1450
  _raw_write_lock_irq(& global_state_lock);
#line 1451
  retcode = sync_after_error(mdev, na);
#line 1452
  if (retcode == 101) {
#line 1453
    mdev->sync_conf.after = na;
    ldv_49536: 
#line 1455
    changes = _drbd_pause_after(mdev);
#line 1456
    tmp = _drbd_resume_next(mdev);
#line 1456
    changes = tmp | changes;
#line 1457
    if (changes != 0) {
#line 1458
      goto ldv_49536;
    } else {

    }

  } else {

  }
#line 1459
  _raw_write_unlock_irq(& global_state_lock);
#line 1460
  return (retcode);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_rs_controller_reset(struct drbd_conf *mdev ) 
{ 


  {
#line 1465
  atomic_set(& mdev->rs_sect_in, 0);
#line 1466
  atomic_set(& mdev->rs_sect_ev, 0);
#line 1467
  mdev->rs_in_flight = 0;
#line 1468
  mdev->rs_planed = 0;
#line 1469
  spin_lock(& mdev->peer_seq_lock);
#line 1470
  fifo_set(& mdev->rs_plan_s, 0);
#line 1471
  spin_unlock(& mdev->peer_seq_lock);
#line 1472
  return;
}
}
#line 1482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  unsigned long now ;
  int i ;
  char const   *tmp___3 ;

  {
#line 1487
  if ((int )mdev->state.ldv_38894.conn > 15 && (int )mdev->state.ldv_38894.conn <= 21) {
#line 1488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1489
    return;
  } else {

  }
#line 1492
  if ((int )mdev->state.ldv_38894.conn <= 21) {
#line 1494
    drbd_rs_cancel_all(mdev);
  } else {

  }
#line 1500
  if ((unsigned int )side == 17U) {
#line 1504
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1505
    r = (r >> 8) & 255;
#line 1506
    if (r > 0) {
#line 1507
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1509
      val.i = 0U;
#line 1509
      val.ldv_38894.conn = 1U;
#line 1509
      mask.i = 0U;
#line 1509
      mask.ldv_38894.conn = 31U;
#line 1509
      drbd_force_state(mdev, mask, val);
#line 1510
      return;
    } else {

    }
  } else {
#line 1513
    r = drbd_khelper(mdev, (char *)"before-resync-source");
#line 1514
    r = (r >> 8) & 255;
#line 1515
    if (r > 0) {
#line 1516
      if (r == 3) {
#line 1517
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, ignoring. Old userland tools?",
                  r);
      } else {
#line 1520
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-source handler returned %d, dropping connection.\n",
                  r);
#line 1522
        val___0.i = 0U;
#line 1522
        val___0.ldv_38894.conn = 1U;
#line 1522
        mask___0.i = 0U;
#line 1522
        mask___0.ldv_38894.conn = 31U;
#line 1522
        drbd_force_state(mdev, mask___0, val___0);
#line 1523
        return;
      }
    } else {

    }
  }
#line 1528
  drbd_state_lock(mdev);
#line 1530
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1530
  if (tmp == 0) {
#line 1531
    drbd_state_unlock(mdev);
#line 1532
    return;
  } else {

  }
#line 1535
  _raw_write_lock_irq(& global_state_lock);
#line 1536
  ns = mdev->state;
#line 1538
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1538
  ns.ldv_38894.aftr_isp = tmp___0 == 0;
#line 1540
  ns.ldv_38894.conn = (unsigned char )side;
#line 1542
  if ((unsigned int )side == 17U) {
#line 1543
    ns.ldv_38894.disk = 4U;
  } else {
#line 1545
    ns.ldv_38894.pdsk = 4U;
  }
#line 1547
  tmp___1 = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1547
  r = (int )tmp___1;
#line 1548
  ns = mdev->state;
#line 1550
  if ((int )ns.ldv_38894.conn <= 9) {
#line 1551
    r = 0;
  } else {

  }
#line 1553
  if (r == 1) {
#line 1554
    tmp___2 = drbd_bm_total_weight(mdev);
#line 1554
    tw = tmp___2;
#line 1555
    now = jiffies;
#line 1558
    mdev->rs_failed = 0UL;
#line 1559
    mdev->rs_paused = 0UL;
#line 1560
    mdev->rs_same_csum = 0UL;
#line 1561
    mdev->rs_last_events = 0;
#line 1562
    mdev->rs_last_sect_ev = 0;
#line 1563
    mdev->rs_total = tw;
#line 1564
    mdev->rs_start = now;
#line 1565
    i = 0;
#line 1565
    goto ldv_49559;
    ldv_49558: 
#line 1566
    mdev->rs_mark_left[i] = tw;
#line 1567
    mdev->rs_mark_time[i] = now;
#line 1565
    i = i + 1;
    ldv_49559: ;
#line 1565
    if (i <= 7) {
#line 1566
      goto ldv_49558;
    } else {

    }
#line 1569
    _drbd_pause_after(mdev);
  } else {

  }
#line 1571
  _raw_write_unlock_irq(& global_state_lock);
#line 1573
  if (r == 1) {
#line 1574
    tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_38894.conn);
#line 1574
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___3, mdev->rs_total << 2, mdev->rs_total);
#line 1578
    if ((unsigned int )side == 17U) {
#line 1579
      mdev->bm_resync_fo = 0UL;
    } else {

    }
#line 1588
    if ((unsigned int )side == 16U && mdev->agreed_pro_version <= 95) {
#line 1589
      drbd_gen_and_send_sync_uuid(mdev);
    } else {

    }
#line 1591
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1602
      if ((unsigned int )side == 16U) {
#line 1603
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1606
      drbd_resync_finished(mdev);
    } else {

    }
#line 1609
    drbd_rs_controller_reset(mdev);
#line 1614
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1615
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1617
    drbd_md_sync(mdev);
  } else {

  }
#line 1619
  put_ldev(mdev);
#line 1620
  drbd_state_unlock(mdev);
#line 1621
  return;
}
}
#line 1623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1625
  mdev = thi->mdev;
#line 1626
  w = 0;
#line 1627
  work_list.next = & work_list;
#line 1627
  work_list.prev = & work_list;
#line 1628
  intr = 0;
#line 1630
  tmp = mdev_to_minor(mdev);
#line 1630
  tmp___0 = get_current();
#line 1630
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1632
  goto ldv_49572;
  ldv_49582: 
#line 1633
  drbd_thread_current_set_cpu(mdev);
#line 1635
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1635
  if (tmp___1 != 0) {
#line 1636
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1637
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1638
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1639
    mutex_unlock(& mdev->data.mutex);
#line 1641
    intr = down_interruptible(& mdev->data.work.s);
#line 1643
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1644
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1645
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1646
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1649
  if (intr != 0) {
#line 1650
    if (intr != -4) {
#line 1650
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1650);
    } else {

    }
#line 1651
    tmp___2 = get_current();
#line 1651
    flush_signals(tmp___2);
#line 1652
    tmp___3 = get_t_state(thi);
#line 1652
    _b = (unsigned int )tmp___3 == 1U;
#line 1652
    if (_b != 0) {
#line 1652
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1652);
    } else {

    }
#line 1652
    if (_b != 0) {
#line 1653
      goto ldv_49572;
    } else {

    }
#line 1654
    goto ldv_49573;
  } else {

  }
#line 1657
  tmp___4 = get_t_state(thi);
#line 1657
  if ((unsigned int )tmp___4 != 1U) {
#line 1658
    goto ldv_49573;
  } else {

  }
#line 1663
  w = 0;
#line 1664
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1665
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1665
  _b___0 = tmp___5 != 0;
#line 1665
  if (_b___0 != 0) {
#line 1665
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1665);
  } else {

  }
#line 1665
  if (_b___0 != 0) {
#line 1677
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1678
    goto ldv_49572;
  } else {

  }
#line 1680
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1680
  w = (struct drbd_work *)__mptr;
#line 1681
  list_del_init(& w->list);
#line 1682
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1684
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_38894.conn <= 9);
#line 1684
  if (tmp___6 == 0) {
#line 1686
    if ((int )mdev->state.ldv_38894.conn > 9) {
#line 1688
      val.i = 0U;
#line 1688
      val.ldv_38894.conn = 5U;
#line 1688
      mask.i = 0U;
#line 1688
      mask.ldv_38894.conn = 31U;
#line 1688
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_49572: 
#line 1632
  tmp___7 = get_t_state(thi);
#line 1632
  if ((unsigned int )tmp___7 == 1U) {
#line 1633
    goto ldv_49582;
  } else {

  }
  ldv_49573: 
#line 1691
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1691
  if (tmp___8 == 0) {
#line 1691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1691);
  } else {

  }
#line 1692
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1692
  if (tmp___9 == 0) {
#line 1692
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1692);
  } else {

  }
#line 1694
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1695
  i = 0;
#line 1696
  goto ldv_49589;
  ldv_49588: 
#line 1697
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1698
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1700
  goto ldv_49586;
  ldv_49585: 
#line 1701
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1701
  w = (struct drbd_work *)__mptr___0;
#line 1702
  list_del_init(& w->list);
#line 1703
  (*(w->cb))(mdev, w, 1);
#line 1704
  i = i + 1;
  ldv_49586: 
#line 1700
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1700
  if (tmp___10 == 0) {
#line 1701
    goto ldv_49585;
  } else {

  }
#line 1707
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_49589: 
#line 1696
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1696
  if (tmp___11 == 0) {
#line 1697
    goto ldv_49588;
  } else {

  }
#line 1709
  sema_init(& mdev->data.work.s, 0);
#line 1715
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1717
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 1717
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1717);
  } else {

  }
#line 1720
  drbd_thread_stop(& mdev->receiver);
#line 1721
  drbd_mdev_cleanup(mdev);
#line 1723
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1725
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1726
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1727
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1729
  return (0);
}
}
#line 153 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 155
  __list_del_entry(list);
#line 156
  list_add(list, head);
#line 157
  return;
}
}
#line 570 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 572
  h->next = 0;
#line 573
  h->pprev = 0;
#line 574
  return;
}
}
#line 576 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 578
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 586 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 588
  next = n->next;
#line 589
  pprev = n->pprev;
#line 590
  *pprev = next;
#line 591
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 592
    next->pprev = pprev;
  } else {

  }
#line 593
  return;
}
}
#line 602 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 604
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 604
  if (tmp == 0) {
#line 605
    __hlist_del(n);
#line 606
    INIT_HLIST_NODE(n);
  } else {

  }
#line 608
  return;
}
}
#line 610 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 612
  first = h->first;
#line 613
  n->next = first;
#line 614
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 615
    first->pprev = & n->next;
  } else {

  }
#line 616
  h->first = n;
#line 617
  n->pprev = & h->first;
#line 618
  return;
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 159 "include/linux/printk.h"
extern void dump_stack(void) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 82 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 84
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 84
  return (tmp);
}
}
#line 136 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 210 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 280
extern int del_timer_sync(struct timer_list * ) ;
#line 346 "include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 361
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 67
extern u32 random32(void) ;
#line 239 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 241
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 243
extern void sock_release(struct socket * ) ;
#line 246
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_19620: ;
#line 63
    goto ldv_19620;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_19621: ;
#line 65
    goto ldv_19621;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_19622: ;
#line 66
    goto ldv_19622;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 302 "include/linux/sched.h"
extern void io_schedule(void) ;
#line 359
extern long schedule_timeout(long  ) ;
#line 362
extern long schedule_timeout_uninterruptible(long  ) ;
#line 2564 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2566
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2566
  return (tmp);
}
}
#line 2590 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2592
  tmp = test_tsk_thread_flag(p, 2);
#line 2592
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2592
  return ((int )tmp___0);
}
}
#line 306 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) ;
#line 491 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 494 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 496
  return;
}
}
#line 519 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 521
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1110 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1112
  return ((struct crypto_hash *)tfm);
}
}
#line 1122 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1125
  type = type & 4294967280U;
#line 1126
  mask = mask & 4294967280U;
#line 1127
  type = type | 8U;
#line 1128
  mask = mask | 14U;
#line 1130
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1130
  tmp___0 = __crypto_hash_cast(tmp);
#line 1130
  return (tmp___0);
}
}
#line 1138 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1140
  tmp = crypto_hash_tfm(tfm);
#line 1140
  crypto_free_tfm(tmp);
#line 1141
  return;
}
}
#line 1205 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(desc->tfm);
#line 1209
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1209
  return (tmp___0);
}
}
#line 1212 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1215
  tmp = crypto_hash_crt(hash);
#line 1215
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1215
  return (tmp___0);
}
}
#line 440 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 442
  disk->part0.nr_sects = size;
#line 443
  return;
}
}
#line 48 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 50
  __might_sleep("include/linux/highmem.h", 50, 0);
#line 51
  tmp = lowmem_page_address((struct page  const  *)page);
#line 51
  return (tmp);
}
}
#line 54 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 56
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 249 "include/linux/lru_cache.h"
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 223 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[43U] ;

  {
#line 228
  cmdnames[0] = "Data";
#line 228
  cmdnames[1] = "DataReply";
#line 228
  cmdnames[2] = "RSDataReply";
#line 228
  cmdnames[3] = "Barrier";
#line 228
  cmdnames[4] = "ReportBitMap";
#line 228
  cmdnames[5] = "BecomeSyncTarget";
#line 228
  cmdnames[6] = "BecomeSyncSource";
#line 228
  cmdnames[7] = "UnplugRemote";
#line 228
  cmdnames[8] = "DataRequest";
#line 228
  cmdnames[9] = "RSDataRequest";
#line 228
  cmdnames[10] = "SyncParam";
#line 228
  cmdnames[11] = "ReportProtocol";
#line 228
  cmdnames[12] = "ReportUUIDs";
#line 228
  cmdnames[13] = "ReportSizes";
#line 228
  cmdnames[14] = "ReportState";
#line 228
  cmdnames[15] = "ReportSyncUUID";
#line 228
  cmdnames[16] = "AuthChallenge";
#line 228
  cmdnames[17] = "AuthResponse";
#line 228
  cmdnames[18] = "StateChgRequest";
#line 228
  cmdnames[19] = "Ping";
#line 228
  cmdnames[20] = "PingAck";
#line 228
  cmdnames[21] = "RecvAck";
#line 228
  cmdnames[22] = "WriteAck";
#line 228
  cmdnames[23] = "RSWriteAck";
#line 228
  cmdnames[24] = "DiscardAck";
#line 228
  cmdnames[25] = "NegAck";
#line 228
  cmdnames[26] = "NegDReply";
#line 228
  cmdnames[27] = "NegRSDReply";
#line 228
  cmdnames[28] = "BarrierAck";
#line 228
  cmdnames[29] = "StateChgReply";
#line 228
  cmdnames[30] = "OVRequest";
#line 228
  cmdnames[31] = "OVReply";
#line 228
  cmdnames[32] = "OVResult";
#line 228
  cmdnames[33] = "CsumRSRequest";
#line 228
  cmdnames[34] = "CsumRSIsInSync";
#line 228
  cmdnames[35] = "SyncParam89";
#line 228
  cmdnames[36] = "CBitmap";
#line 228
  cmdnames[37] = 0;
#line 228
  cmdnames[38] = 0;
#line 228
  cmdnames[39] = "DelayProbe";
#line 228
  cmdnames[40] = "OutOfSync";
#line 228
  cmdnames[41] = 0;
#line 228
  cmdnames[42] = 0;
#line 271
  if ((unsigned int )cmd == 65521U) {
#line 272
    return ("HandShakeM");
  } else {

  }
#line 273
  if ((unsigned int )cmd == 65522U) {
#line 274
    return ("HandShakeS");
  } else {

  }
#line 275
  if ((unsigned int )cmd == 65534U) {
#line 276
    return ("HandShake");
  } else {

  }
#line 277
  if ((unsigned int )cmd > 41U) {
#line 278
    return ("Unknown");
  } else {

  }
#line 279
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 300
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 303 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 313
  c->word_offset = c->bit_offset >> 6;
#line 314
  return;
}
}
#line 585 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 587
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 600
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 610 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 612
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1194
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) ;
#line 1200
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) ;
#line 1209
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1219
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1221
void tl_clear(struct drbd_conf *mdev ) ;
#line 1223
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1226
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1227
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1230
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1232
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1241
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1243
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1244
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1248
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1250
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1266
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1268
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) ;
#line 1277
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1294
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) ;
#line 1297
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1298
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1494
mempool_t *drbd_ee_mempool ;
#line 1496
struct page *drbd_pp_pool ;
#line 1497
spinlock_t drbd_pp_lock ;
#line 1498
int drbd_pp_vacant ;
#line 1519
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1521
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1522
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1523
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) ;
#line 1524
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) ;
#line 1528
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1585
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1595
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1597
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1601
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1602
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1632 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1634
  val = 1;
#line 1635
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1637
  return;
}
}
#line 1639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1641
  val = 2;
#line 1642
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1644
  return;
}
}
#line 1646
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1658
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1684
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1770 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1772
  page = e->pages;
#line 1773
  goto ldv_49006;
  ldv_49005: 
#line 1774
  tmp = page_count(page);
#line 1774
  if (tmp > 1) {
#line 1775
    return (1);
  } else {

  }
#line 1773
  page = page_chain_next(page);
  ldv_49006: ;
#line 1773
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1773
    tmp___0 = page_chain_next(page);
#line 1773
    __builtin_prefetch((void const   *)tmp___0);
#line 1773
    if (1 != 0) {
#line 1774
      goto ldv_49005;
    } else {
#line 1776
      goto ldv_49007;
    }
  } else {

  }
  ldv_49007: ;
#line 1777
  return (0);
}
}
#line 1816 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 1820
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1820
  return ((int )tmp);
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1878
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1881
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1884
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_49080;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_49080;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_49080: ;
#line 1942
  return (s);
}
}
#line 1976 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1979
  tmp = spinlock_check(& q->q_lock);
#line 1979
  flags = _raw_spin_lock_irqsave(tmp);
#line 1980
  list_add(& w->list, & q->q);
#line 1981
  up(& q->s);
#line 1983
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1984
  return;
}
}
#line 2016 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2019
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 2019
  return (tmp);
}
}
#line 2022 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 2025
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 2025
  return (tmp);
}
}
#line 2107 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2109
  atomic_inc(& mdev->unacked_cnt);
#line 2110
  return;
}
}
#line 2123 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2125
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2125
  if (tmp != 0) {
#line 2126
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2127
  return;
}
}
#line 2135 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2139
  atomic_inc(& mdev->net_cnt);
#line 2140
  have_net_conf = (int )mdev->state.ldv_38894.conn > 1;
#line 2141
  if (have_net_conf == 0) {
#line 2142
    put_net_conf(mdev);
  } else {

  }
#line 2143
  return (have_net_conf);
}
}
#line 2399 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  int changed ;

  {
#line 2401
  changed = mdev->ed_uuid != val;
#line 2402
  mdev->ed_uuid = val;
#line 2403
  return (changed);
}
}
#line 2406 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2413
  return ((int )a - (int )b);
}
}
#line 2422 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2425
  spin_lock(& mdev->peer_seq_lock);
#line 2426
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2426
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2427
  mdev->peer_seq = m;
#line 2428
  spin_unlock(& mdev->peer_seq_lock);
#line 2429
  if (m == new_seq) {
#line 2430
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2431
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 50
  tmp = crypto_tfm_alg_type(tfm);
#line 50
  return ((tmp & 14U) == 8U);
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_49354: ;
#line 229
    goto ldv_49354;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_49359: ;
#line 238
    goto ldv_49359;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 252 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 255
  tmp = ar_hash_slot(mdev, sector);
#line 255
  slot = tmp;
#line 259
  n = slot->first;
#line 259
  goto ldv_49376;
  ldv_49375: ;
#line 260
  if ((unsigned long )req == (unsigned long )id) {
#line 261
    if (req->sector != sector) {
#line 261
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              261);
    } else {

    }
#line 262
    return (req);
  } else {

  }
#line 259
  n = n->next;
  ldv_49376: ;
#line 259
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 259
    __mptr = (struct hlist_node  const  *)n;
#line 259
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 259
    if (1 != 0) {
#line 260
      goto ldv_49375;
    } else {
#line 262
      goto ldv_49377;
    }
  } else {

  }
  ldv_49377: ;
#line 265
  return (0);
}
}
#line 306 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 308
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_49444: ;
#line 162
  goto ldv_49444;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 65 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 66
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 68
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 69
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 83 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 88
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 88
  if (tmp___0 != 0L) {
#line 88
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (88), "i" (12UL));
    ldv_49524: ;
#line 88
    goto ldv_49524;
  } else {

  }
#line 89
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 89
  if (tmp___1 != 0L) {
#line 89
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (89), "i" (12UL));
    ldv_49525: ;
#line 89
    goto ldv_49525;
  } else {

  }
#line 91
  page = *head;
#line 93
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 94
    return (0);
  } else {

  }
#line 96
  goto ldv_49528;
  ldv_49527: 
#line 97
  tmp = page_chain_next(page);
#line 98
  n = n - 1;
#line 98
  if (n == 0) {
#line 99
    goto ldv_49526;
  } else {

  }
#line 100
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 102
    return (0);
  } else {

  }
#line 103
  page = tmp;
  ldv_49528: ;
#line 96
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 97
    goto ldv_49527;
  } else {

  }
  ldv_49526: 
#line 107
  page->ldv_15532.private = 0UL;
#line 109
  page = *head;
#line 110
  *head = tmp;
#line 111
  return (page);
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 120
  i = 1;
#line 121
  goto ldv_49536;
  ldv_49535: 
#line 122
  i = i + 1;
#line 122
  page = tmp;
  ldv_49536: 
#line 121
  tmp = page_chain_next(page);
#line 121
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 122
    goto ldv_49535;
  } else {

  }

#line 123
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 124
    *len = i;
  } else {

  }
#line 125
  return (page);
}
}
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 131
  i = 0;
#line 132
  goto ldv_49545;
  ldv_49544: 
#line 133
  put_page(page);
#line 134
  i = i + 1;
#line 132
  page = tmp;
  ldv_49545: ;
#line 132
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 132
    tmp = page_chain_next(page);
#line 132
    if (1 != 0) {
#line 133
      goto ldv_49544;
    } else {
#line 135
      goto ldv_49546;
    }
  } else {

  }
  ldv_49546: ;
#line 136
  return (i);
}
}
#line 139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 144
  tmp = page_chain_tail(chain_first, 0);
#line 145
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 145
  if (tmp___0 != 0L) {
#line 145
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (145), "i" (12UL));
    ldv_49553: ;
#line 145
    goto ldv_49553;
  } else {

  }
#line 149
  chain_last->ldv_15532.private = (unsigned long )*head;
#line 150
  *head = chain_first;
#line 151
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 155
  page = 0;
#line 156
  tmp = 0;
#line 157
  i = 0;
#line 161
  if (drbd_pp_vacant >= number) {
#line 162
    spin_lock(& drbd_pp_lock);
#line 163
    page = page_chain_del(& drbd_pp_pool, number);
#line 164
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 165
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 166
    spin_unlock(& drbd_pp_lock);
#line 167
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 168
      return (page);
    } else {

    }
  } else {

  }
#line 174
  i = 0;
#line 174
  goto ldv_49563;
  ldv_49562: 
#line 175
  tmp = alloc_pages(514U, 0U);
#line 176
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 177
    goto ldv_49561;
  } else {

  }
#line 178
  tmp->ldv_15532.private = (unsigned long )page;
#line 179
  page = tmp;
#line 174
  i = i + 1;
  ldv_49563: ;
#line 174
  if (i < number) {
#line 175
    goto ldv_49562;
  } else {

  }
  ldv_49561: ;
#line 182
  if (i == number) {
#line 183
    return (page);
  } else {

  }
#line 188
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 189
    tmp = page_chain_tail(page, 0);
#line 190
    spin_lock(& drbd_pp_lock);
#line 191
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 192
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 193
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 195
  return (0);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 208
  le = mdev->net_ee.next;
#line 208
  tle = le->next;
#line 208
  goto ldv_49575;
  ldv_49574: 
#line 209
  __mptr = (struct list_head  const  *)le;
#line 209
  e = (struct drbd_epoch_entry *)__mptr;
#line 210
  tmp = drbd_ee_has_active_page___0(e);
#line 210
  if (tmp != 0) {
#line 211
    goto ldv_49573;
  } else {

  }
#line 212
  list_move(le, to_be_freed);
#line 208
  le = tle;
#line 208
  tle = le->next;
  ldv_49575: ;
#line 208
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 209
    goto ldv_49574;
  } else {

  }
  ldv_49573: ;
#line 213
  return;
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 218
  reclaimed.next = & reclaimed;
#line 218
  reclaimed.prev = & reclaimed;
#line 221
  spin_lock_irq(& mdev->req_lock);
#line 222
  reclaim_net_ee(mdev, & reclaimed);
#line 223
  spin_unlock_irq(& mdev->req_lock);
#line 225
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 225
  e = (struct drbd_epoch_entry *)__mptr;
#line 225
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 225
  goto ldv_49589;
  ldv_49588: 
#line 226
  drbd_free_some_ee(mdev, e, 1);
#line 225
  e = t;
#line 225
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 225
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_49589: ;
#line 225
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 226
    goto ldv_49588;
  } else {

  }

#line 230
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 243
  page = 0;
#line 244
  tmp = get_current();
#line 244
  wait.flags = 0U;
#line 244
  wait.private = (void *)tmp;
#line 244
  wait.func = & autoremove_wake_function;
#line 244
  wait.task_list.next = & wait.task_list;
#line 244
  wait.task_list.prev = & wait.task_list;
#line 248
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 248
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 249
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 251
  goto ldv_49600;
  ldv_49599: 
#line 252
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 254
  drbd_kick_lo_and_reclaim_net(mdev);
#line 256
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 256
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 257
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 258
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 259
      goto ldv_49598;
    } else {

    }
  } else {

  }
#line 262
  if (! retry) {
#line 263
    goto ldv_49598;
  } else {

  }
#line 265
  tmp___2 = get_current();
#line 265
  tmp___3 = signal_pending(tmp___2);
#line 265
  if (tmp___3 != 0) {
#line 266
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 267
    goto ldv_49598;
  } else {

  }
#line 270
  schedule();
  ldv_49600: ;
#line 251
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 252
    goto ldv_49599;
  } else {

  }
  ldv_49598: 
#line 272
  finish_wait(& drbd_pp_wait, & wait);
#line 274
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 275
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 276
  return (page);
}
}
#line 283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 285
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 288
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 289
    i = page_chain_free(page);
  } else {
#line 292
    tmp = page_chain_tail(page, & i);
#line 293
    spin_lock(& drbd_pp_lock);
#line 294
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 295
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 296
    spin_unlock(& drbd_pp_lock);
  }
#line 298
  i = atomic_sub_return(i, a);
#line 299
  if (i < 0) {
#line 300
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 302
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 303
  return;
}
}
#line 320 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 328
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 330
  tmp = drbd_insert_fault(mdev, 8U);
#line 330
  if (tmp != 0) {
#line 331
    return (0);
  } else {

  }
#line 333
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 333
  e = (struct drbd_epoch_entry *)tmp___0;
#line 334
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 335
    if ((gfp_mask & 512U) == 0U) {
#line 336
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 337
    return (0);
  } else {

  }
#line 340
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 341
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 342
    goto fail;
  } else {

  }
#line 344
  INIT_HLIST_NODE(& e->collision);
#line 345
  e->epoch = 0;
#line 346
  e->mdev = mdev;
#line 347
  e->pages = page;
#line 348
  atomic_set(& e->pending_bios, 0);
#line 349
  e->size = data_size;
#line 350
  e->flags = 0UL;
#line 351
  e->sector = sector;
#line 352
  e->ldv_47617.block_id = id;
#line 354
  return (e);
  fail: 
#line 357
  mempool_free((void *)e, drbd_ee_mempool);
#line 358
  return (0);
}
}
#line 361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 363
  if ((e->flags & 16UL) != 0UL) {
#line 364
    kfree((void const   *)e->ldv_47617.digest);
  } else {

  }
#line 365
  drbd_pp_free(mdev, e->pages, is_net);
#line 366
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 366
  if (tmp != 0) {
#line 366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            366);
  } else {

  }
#line 367
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 367
  if (tmp___0 == 0) {
#line 367
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            367);
  } else {

  }
#line 368
  mempool_free((void *)e, drbd_ee_mempool);
#line 369
  return;
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 373
  work_list.next = & work_list;
#line 373
  work_list.prev = & work_list;
#line 375
  count = 0;
#line 376
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 378
  spin_lock_irq(& mdev->req_lock);
#line 379
  list_splice_init(list, & work_list);
#line 380
  spin_unlock_irq(& mdev->req_lock);
#line 382
  __mptr = (struct list_head  const  *)work_list.next;
#line 382
  e = (struct drbd_epoch_entry *)__mptr;
#line 382
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 382
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 382
  goto ldv_49641;
  ldv_49640: 
#line 383
  drbd_free_some_ee(mdev, e, is_net);
#line 384
  count = count + 1;
#line 382
  e = t;
#line 382
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 382
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_49641: ;
#line 382
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 383
    goto ldv_49640;
  } else {

  }

#line 386
  return (count);
}
}
#line 399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 401
  work_list.next = & work_list;
#line 401
  work_list.prev = & work_list;
#line 402
  reclaimed.next = & reclaimed;
#line 402
  reclaimed.prev = & reclaimed;
#line 404
  ok = (int )mdev->state.ldv_38894.conn > 8;
#line 406
  spin_lock_irq(& mdev->req_lock);
#line 407
  reclaim_net_ee(mdev, & reclaimed);
#line 408
  list_splice_init(& mdev->done_ee, & work_list);
#line 409
  spin_unlock_irq(& mdev->req_lock);
#line 411
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 411
  e = (struct drbd_epoch_entry *)__mptr;
#line 411
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 411
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 411
  goto ldv_49658;
  ldv_49657: 
#line 412
  drbd_free_some_ee(mdev, e, 1);
#line 411
  e = t;
#line 411
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 411
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_49658: ;
#line 411
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 412
    goto ldv_49657;
  } else {

  }
#line 418
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 418
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 418
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 418
  goto ldv_49667;
  ldv_49666: 
#line 420
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 420
  ok = tmp != 0 && ok != 0;
#line 421
  drbd_free_some_ee(mdev, e, 0);
#line 418
  e = t;
#line 418
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 418
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_49667: ;
#line 418
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 419
    goto ldv_49666;
  } else {

  }
#line 423
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 425
  return (ok);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 430
  tmp = get_current();
#line 430
  wait.flags = 0U;
#line 430
  wait.private = (void *)tmp;
#line 430
  wait.func = & autoremove_wake_function;
#line 430
  wait.task_list.next = & wait.task_list;
#line 430
  wait.task_list.prev = & wait.task_list;
#line 434
  goto ldv_49675;
  ldv_49674: 
#line 435
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 436
  spin_unlock_irq(& mdev->req_lock);
#line 437
  io_schedule();
#line 438
  finish_wait(& mdev->ee_wait, & wait);
#line 439
  spin_lock_irq(& mdev->req_lock);
  ldv_49675: 
#line 434
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 434
  if (tmp___0 == 0) {
#line 435
    goto ldv_49674;
  } else {

  }

#line 439
  return;
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 445
  spin_lock_irq(& mdev->req_lock);
#line 446
  _drbd_wait_ee_list_empty(mdev, head);
#line 447
  spin_unlock_irq(& mdev->req_lock);
#line 448
  return;
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 455
  sk = sock->sk;
#line 456
  err = 0;
#line 458
  *what = "listen";
#line 459
  err = (*((sock->ops)->listen))(sock, 5);
#line 460
  if (err < 0) {
#line 461
    goto out;
  } else {

  }
#line 463
  *what = "sock_create_lite";
#line 464
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 466
  if (err < 0) {
#line 467
    goto out;
  } else {

  }
#line 469
  *what = "accept";
#line 470
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 471
  if (err < 0) {
#line 472
    sock_release(*newsock);
#line 473
    *newsock = 0;
#line 474
    goto out;
  } else {

  }
#line 476
  (*newsock)->ops = sock->ops;
  out: ;
#line 479
  return (err);
}
}
#line 482 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 486
  iov.iov_base = buf;
#line 486
  iov.iov_len = size;
#line 490
  msg.msg_name = 0;
#line 490
  msg.msg_namelen = 0;
#line 490
  msg.msg_iov = (struct iovec *)(& iov);
#line 490
  msg.msg_iovlen = 1UL;
#line 490
  msg.msg_control = 0;
#line 490
  msg.msg_controllen = 0UL;
#line 490
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 497
  tmp = current_thread_info();
#line 497
  oldfs = tmp->addr_limit;
#line 498
  tmp___0 = current_thread_info();
#line 498
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 498
  tmp___0->addr_limit = __constr_expr_0;
#line 499
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 500
  tmp___1 = current_thread_info();
#line 500
  tmp___1->addr_limit = oldfs;
#line 502
  return (rv);
}
}
#line 505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 508
  iov.iov_base = buf;
#line 508
  iov.iov_len = size;
#line 512
  msg.msg_name = 0;
#line 512
  msg.msg_namelen = 0;
#line 512
  msg.msg_iov = (struct iovec *)(& iov);
#line 512
  msg.msg_iovlen = 1UL;
#line 512
  msg.msg_control = 0;
#line 512
  msg.msg_controllen = 0UL;
#line 512
  msg.msg_flags = 16640U;
#line 519
  tmp = current_thread_info();
#line 519
  oldfs = tmp->addr_limit;
#line 520
  tmp___0 = current_thread_info();
#line 520
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 520
  tmp___0->addr_limit = __constr_expr_0;
  ldv_49713: 
#line 523
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 524
  if ((size_t )rv == size) {
#line 525
    goto ldv_49712;
  } else {

  }
#line 532
  if (rv < 0) {
#line 533
    if (rv == -104) {
#line 534
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 535
    if (rv != -512) {
#line 536
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 537
    goto ldv_49712;
  } else
#line 538
  if (rv == 0) {
#line 539
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 540
    goto ldv_49712;
  } else {
#line 546
    goto ldv_49712;
  }
#line 548
  goto ldv_49713;
  ldv_49712: 
#line 550
  tmp___1 = current_thread_info();
#line 550
  tmp___1->addr_limit = oldfs;
#line 552
  if ((size_t )rv != size) {
#line 553
    val.i = 0U;
#line 553
    val.ldv_38894.conn = 4U;
#line 553
    mask.i = 0U;
#line 553
    mask.ldv_38894.conn = 31U;
#line 553
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 555
  return (rv);
}
}
#line 563 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 567
  if (snd != 0U) {
#line 568
    (sock->sk)->sk_sndbuf = (int )snd;
#line 569
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 571
  if (rcv != 0U) {
#line 572
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 573
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 575
  return;
}
}
#line 577 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 583
  disconnect_on_error = 1;
#line 585
  tmp = get_net_conf(mdev);
#line 585
  if (tmp == 0) {
#line 586
    return (0);
  } else {

  }
#line 588
  what = "sock_create_kern";
#line 589
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 591
  if (err < 0) {
#line 592
    sock = 0;
#line 593
    goto out;
  } else {

  }
#line 596
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 596
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 596
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 598
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 608
  __min1 = (mdev->net_conf)->my_addr_len;
#line 608
  __min2 = 28;
#line 608
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 608
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 610
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 611
    src_in6.sin6_port = 0U;
  } else {
#line 613
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 615
  what = "bind before connect";
#line 616
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 619
  if (err < 0) {
#line 620
    goto out;
  } else {

  }
#line 624
  disconnect_on_error = 0;
#line 625
  what = "connect";
#line 626
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 631
  if (err < 0) {
#line 632
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 633
      sock_release(sock);
#line 634
      sock = 0;
    } else {

    }
#line 636
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 643
    disconnect_on_error = 0;
#line 644
    goto ldv_49750;
    default: 
#line 646
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_49750: ;
#line 648
    if (disconnect_on_error != 0) {
#line 649
      val.i = 0U;
#line 649
      val.ldv_38894.conn = 1U;
#line 649
      mask.i = 0U;
#line 649
      mask.ldv_38894.conn = 31U;
#line 649
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 651
  put_net_conf(mdev);
#line 652
  return (sock);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 658
  s_estab = 0;
#line 661
  tmp = get_net_conf(mdev);
#line 661
  if (tmp == 0) {
#line 662
    return (0);
  } else {

  }
#line 664
  what = "sock_create_kern";
#line 665
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 667
  if (err != 0) {
#line 668
    s_listen = 0;
#line 669
    goto out;
  } else {

  }
#line 672
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 673
  tmp___0 = random32();
#line 673
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 675
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 676
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 677
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 678
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 681
  what = "bind before listen";
#line 682
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 685
  if (err < 0) {
#line 686
    goto out;
  } else {

  }
#line 688
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 691
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 692
    sock_release(s_listen);
  } else {

  }
#line 693
  if (err < 0) {
#line 694
    if ((err != -11 && err != -4) && err != -512) {
#line 695
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 696
      val.i = 0U;
#line 696
      val.ldv_38894.conn = 1U;
#line 696
      mask.i = 0U;
#line 696
      mask.ldv_38894.conn = 31U;
#line 696
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 699
  put_net_conf(mdev);
#line 701
  return (s_estab);
}
}
#line 704 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 707
  h = & mdev->data.sbuf.header.h80;
#line 709
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 709
  return (tmp);
}
}
#line 712 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 714
  h = & mdev->data.rbuf.header.h80;
#line 717
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 719
  if (rr == 8 && h->magic == 1728214147U) {
#line 720
    tmp = __fswab16((int )h->command);
#line 720
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 722
  return (65535);
}
}
#line 730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 735
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 736
    return (0);
  } else {

  }
#line 738
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 740
  if (rr > 0 || rr == -11) {
#line 741
    return (1);
  } else {
#line 743
    sock_release(*sock);
#line 744
    *sock = 0;
#line 745
    return (0);
  }
}
}
#line 757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int tmp___0 ;
  enum drbd_packets tmp___1 ;
  u32 tmp___2 ;
  struct task_struct *tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 762
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            762);
  } else {

  }
#line 764
  val.i = 0U;
#line 764
  val.ldv_38894.conn = 8U;
#line 764
  mask.i = 0U;
#line 764
  mask.ldv_38894.conn = 31U;
#line 764
  tmp = drbd_request_state(mdev, mask, val);
#line 764
  if (tmp <= 0) {
#line 765
    return (-2);
  } else {

  }
#line 767
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 769
  sock = 0;
#line 770
  msock = 0;
  ldv_49809: 
#line 773
  try = 0;
  ldv_49801: 
#line 775
  s = drbd_try_connect(mdev);
#line 776
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 777
    goto ldv_49800;
  } else {
#line 776
    try = try + 1;
#line 776
    if (try > 2) {
#line 777
      goto ldv_49800;
    } else {

    }
  }
#line 779
  schedule_timeout_interruptible(25L);
#line 780
  goto ldv_49801;
  ldv_49800: ;
#line 782
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 783
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 784
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 785
      sock = s;
#line 786
      s = 0;
    } else
#line 787
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 788
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 789
      msock = s;
#line 790
      s = 0;
    } else {
#line 792
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 793
      goto out_release_sockets;
    }
  } else {

  }
#line 797
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 798
    schedule_timeout_interruptible((long )(((mdev->net_conf)->ping_timeo * 250) / 10));
#line 799
    ok = drbd_socket_okay(mdev, & sock);
#line 800
    tmp___0 = drbd_socket_okay(mdev, & msock);
#line 800
    ok = tmp___0 != 0 && ok != 0;
#line 801
    if (ok != 0) {
#line 802
      goto ldv_49803;
    } else {

    }
  } else {

  }
  retry: 
#line 806
  s = drbd_wait_for_connect(mdev);
#line 807
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 808
    tmp___1 = drbd_recv_fp(mdev, s);
#line 808
    try = (int )tmp___1;
#line 809
    drbd_socket_okay(mdev, & sock);
#line 810
    drbd_socket_okay(mdev, & msock);
#line 811
    switch (try) {
    case 65522: ;
#line 813
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 814
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 815
      sock_release(sock);
    } else {

    }
#line 817
    sock = s;
#line 818
    goto ldv_49806;
    case 65521: ;
#line 820
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 821
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 822
      sock_release(msock);
    } else {

    }
#line 824
    msock = s;
#line 825
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 826
    goto ldv_49806;
    default: 
#line 828
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 829
    sock_release(s);
#line 830
    tmp___2 = random32();
#line 830
    if ((int )tmp___2 & 1) {
#line 831
      goto retry;
    } else {

    }
    }
    ldv_49806: ;
  } else {

  }
#line 835
  if ((int )mdev->state.ldv_38894.conn <= 1) {
#line 836
    goto out_release_sockets;
  } else {

  }
#line 837
  tmp___5 = get_current();
#line 837
  tmp___6 = signal_pending(tmp___5);
#line 837
  if (tmp___6 != 0) {
#line 838
    tmp___3 = get_current();
#line 838
    flush_signals(tmp___3);
#line 839
    __asm__  volatile   ("": : : "memory");
#line 840
    tmp___4 = get_t_state(& mdev->receiver);
#line 840
    if ((unsigned int )tmp___4 == 2U) {
#line 841
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 844
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 845
    ok = drbd_socket_okay(mdev, & sock);
#line 846
    tmp___7 = drbd_socket_okay(mdev, & msock);
#line 846
    ok = tmp___7 != 0 && ok != 0;
#line 847
    if (ok != 0) {
#line 848
      goto ldv_49803;
    } else {

    }
  } else {

  }
#line 850
  goto ldv_49809;
  ldv_49803: 
#line 852
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 853
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 855
  (sock->sk)->sk_allocation = 16U;
#line 856
  (msock->sk)->sk_allocation = 16U;
#line 858
  (sock->sk)->sk_priority = 4U;
#line 859
  (msock->sk)->sk_priority = 6U;
#line 866
  tmp___8 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 866
  (sock->sk)->sk_rcvtimeo = tmp___8;
#line 866
  (sock->sk)->sk_sndtimeo = tmp___8;
#line 869
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 870
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 874
  drbd_tcp_nodelay(sock);
#line 875
  drbd_tcp_nodelay(msock);
#line 877
  mdev->data.socket = sock;
#line 878
  mdev->meta.socket = msock;
#line 879
  mdev->last_received = jiffies;
#line 881
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 881
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            881);
  } else {

  }
#line 883
  h = drbd_do_handshake(mdev);
#line 884
  if (h <= 0) {
#line 885
    return (h);
  } else {

  }
#line 887
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 889
    tmp___9 = drbd_do_auth(mdev);
#line 889
    switch (tmp___9) {
    case -1: 
#line 891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 892
    return (-1);
    case 0: 
#line 894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 895
    return (0);
    }
  } else {

  }
#line 899
  val___0.i = 0U;
#line 899
  val___0.ldv_38894.conn = 9U;
#line 899
  mask___0.i = 0U;
#line 899
  mask___0.ldv_38894.conn = 31U;
#line 899
  tmp___10 = drbd_request_state(mdev, mask___0, val___0);
#line 899
  if (tmp___10 <= 0) {
#line 900
    return (0);
  } else {

  }
#line 902
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 903
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 905
  atomic_set(& mdev->packet_seq, 0);
#line 906
  mdev->peer_seq = 0U;
#line 908
  drbd_thread_start(& mdev->asender);
#line 910
  tmp___11 = drbd_send_protocol(mdev);
#line 910
  if (tmp___11 == -1) {
#line 911
    return (-1);
  } else {

  }
#line 912
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 913
  drbd_send_sizes(mdev, 0, 0);
#line 914
  drbd_send_uuids(mdev);
#line 915
  drbd_send_state(mdev);
#line 916
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 917
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 918
  mod_timer(& mdev->request_timer, (unsigned long )jiffies + 250UL);
#line 920
  return (1);
  out_release_sockets: ;
#line 923
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 924
    sock_release(sock);
  } else {

  }
#line 925
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 926
    sock_release(msock);
  } else {

  }
#line 927
  return (-1);
}
}
#line 930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  struct task_struct *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  __u32 tmp___5 ;
  __u16 tmp___6 ;
  __u16 tmp___7 ;
  __u32 tmp___8 ;
  long tmp___9 ;

  {
#line 932
  h = & mdev->data.rbuf.header;
#line 935
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 936
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 936
  if (tmp___1 != 0L) {
#line 937
    tmp = get_current();
#line 937
    tmp___0 = signal_pending(tmp);
#line 937
    if (tmp___0 == 0) {
#line 938
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
               r);
    } else {

    }
#line 939
    return (0);
  } else {

  }
#line 942
  tmp___9 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 942
  if (tmp___9 != 0L) {
#line 943
    tmp___2 = __fswab16((int )h->h80.command);
#line 943
    *cmd = (enum drbd_packets )tmp___2;
#line 944
    tmp___3 = __fswab16((int )h->h80.length);
#line 944
    *packet_size = (unsigned int )tmp___3;
  } else
#line 945
  if ((unsigned int )h->h95.magic == 23171U) {
#line 946
    tmp___4 = __fswab16((int )h->h95.command);
#line 946
    *cmd = (enum drbd_packets )tmp___4;
#line 947
    tmp___5 = __fswab32(h->h95.length);
#line 947
    *packet_size = tmp___5;
  } else {
#line 949
    tmp___6 = __fswab16((int )h->h80.length);
#line 949
    tmp___7 = __fswab16((int )h->h80.command);
#line 949
    tmp___8 = __fswab32(h->h80.magic);
#line 949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___8, (int )tmp___7, (int )tmp___6);
#line 953
    return (0);
  }
#line 955
  mdev->last_received = jiffies;
#line 957
  return (1);
}
}
#line 960 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 964
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 964
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 964
    if (tmp != 0) {
#line 965
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 967
      if (rv != 0) {
#line 968
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 972
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 974
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 976
  return;
}
}
#line 984 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 990
  rv = FE_STILL_LIVE;
#line 992
  spin_lock(& mdev->epoch_lock);
  ldv_49846: 
#line 994
  next_epoch = 0;
#line 996
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 998
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1000
  atomic_dec(& epoch->active);
#line 1001
  goto ldv_49836;
  case 1U: 
#line 1003
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1004
  goto ldv_49836;
  case 2U: ;
#line 1007
  goto ldv_49836;
  }
  ldv_49836: ;
#line 1010
  if (epoch_size != 0) {
#line 1010
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1010
    if (tmp___1 == 0) {
#line 1010
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1010
      if (tmp___2 != 0) {
#line 1013
        if (((unsigned int )ev & 32U) == 0U) {
#line 1014
          spin_unlock(& mdev->epoch_lock);
#line 1015
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1016
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1018
        atomic_dec(& mdev->unacked_cnt);
#line 1018
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
        if (tmp___0 < 0) {
#line 1018
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1018
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1018, tmp);
        } else {

        }
#line 1020
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1021
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1021
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1022
          list_del(& epoch->list);
#line 1023
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1024
          mdev->epochs = mdev->epochs - 1U;
#line 1025
          kfree((void const   *)epoch);
#line 1027
          if ((unsigned int )rv == 0U) {
#line 1028
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1030
          epoch->flags = 0UL;
#line 1031
          atomic_set(& epoch->epoch_size, 0);
#line 1033
          if ((unsigned int )rv == 0U) {
#line 1034
            rv = FE_RECYCLED;
          } else {

          }
#line 1035
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1039
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1040
    goto ldv_49845;
  } else {

  }
#line 1042
  epoch = next_epoch;
#line 1043
  goto ldv_49846;
  ldv_49845: 
#line 1045
  spin_unlock(& mdev->epoch_lock);
#line 1047
  return (rv);
}
}
#line 1055 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1058
  write_ordering_str[0] = (char *)"none";
#line 1058
  write_ordering_str[1] = (char *)"drain";
#line 1058
  write_ordering_str[2] = (char *)"flush";
#line 1064
  pwo = mdev->write_ordering;
#line 1065
  _min1 = pwo;
#line 1065
  _min2 = wo;
#line 1065
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1066
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 372UL) != 0U) {
#line 1067
    wo = WO_drain_io;
  } else {

  }
#line 1068
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 380UL) != 0U) {
#line 1069
    wo = WO_none;
  } else {

  }
#line 1070
  mdev->write_ordering = wo;
#line 1071
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1072
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1073
  return;
}
}
#line 1092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  int err ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1095
  bios = 0;
#line 1097
  page = e->pages;
#line 1098
  sector = e->sector;
#line 1099
  ds = e->size;
#line 1100
  n_bios = 0U;
#line 1101
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
#line 1102
  err = -12;
  next_bio: 
#line 1109
  bio = bio_alloc(16U, nr_pages);
#line 1110
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1112
    goto fail;
  } else {

  }
#line 1115
  bio->bi_sector = sector;
#line 1116
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1117
  bio->bi_rw = (unsigned long )rw;
#line 1118
  bio->bi_private = (void *)e;
#line 1119
  bio->bi_end_io = & drbd_endio_sec;
#line 1121
  bio->bi_next = bios;
#line 1122
  bios = bio;
#line 1123
  n_bios = n_bios + 1U;
#line 1125
  goto ldv_49878;
  ldv_49877: 
#line 1126
  __min1 = ds;
#line 1126
  __min2 = 4096U;
#line 1126
  len = __min1 < __min2 ? __min1 : __min2;
#line 1127
  tmp = bio_add_page(bio, page, len, 0U);
#line 1127
  if (tmp == 0) {
#line 1131
    if ((unsigned int )bio->bi_vcnt == 0U) {
#line 1132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio_add_page failed for len=%u, bi_vcnt=0 (bi_sector=%llu)\n",
              len, (unsigned long long )bio->bi_sector);
#line 1136
      err = -28;
#line 1137
      goto fail;
    } else {

    }
#line 1139
    goto next_bio;
  } else {

  }
#line 1141
  ds = ds - len;
#line 1142
  sector = (sector_t )(len >> 9) + sector;
#line 1143
  nr_pages = nr_pages - 1U;
#line 1125
  page = page_chain_next(page);
  ldv_49878: ;
#line 1125
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1125
    tmp___0 = page_chain_next(page);
#line 1125
    __builtin_prefetch((void const   *)tmp___0);
#line 1125
    if (1 != 0) {
#line 1126
      goto ldv_49877;
    } else {
#line 1128
      goto ldv_49879;
    }
  } else {

  }
  ldv_49879: ;
#line 1145
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1145);
  } else {

  }
#line 1146
  if (ds != 0U) {
#line 1146
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1146);
  } else {

  }
#line 1148
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_49880: 
#line 1150
  bio = bios;
#line 1151
  bios = bios->bi_next;
#line 1152
  bio->bi_next = 0;
#line 1154
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1155
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1156
    goto ldv_49880;
  } else {

  }

#line 1156
  return (0);
  fail: ;
#line 1159
  goto ldv_49883;
  ldv_49882: 
#line 1160
  bio = bios;
#line 1161
  bios = bios->bi_next;
#line 1162
  bio_put(bio);
  ldv_49883: ;
#line 1159
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1160
    goto ldv_49882;
  } else {

  }

#line 1164
  return (err);
}
}
#line 1167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1170
  p = & mdev->data.rbuf.barrier;
#line 1173
  inc_unacked(mdev);
#line 1175
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1176
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1176
  rv = (int )tmp;
#line 1183
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1185
  if (rv == 2) {
#line 1186
    return (1);
  } else {

  }
#line 1190
  tmp___0 = kmalloc(40UL, 16U);
#line 1190
  epoch = (struct drbd_epoch *)tmp___0;
#line 1191
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1192
    goto ldv_49894;
  } else {
#line 1194
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1199
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1200
  drbd_flush(mdev);
#line 1202
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1202
  if (tmp___2 != 0) {
#line 1203
    tmp___1 = kmalloc(40UL, 16U);
#line 1203
    epoch = (struct drbd_epoch *)tmp___1;
#line 1204
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1205
      goto ldv_49894;
    } else {

    }
  } else {

  }
#line 1208
  epoch = mdev->current_epoch;
#line 1209
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1209
  if (tmp___3 == 0) {
#line 1209
    goto ldv_49897;
  } else {

  }
#line 1209
  tmp___4 = get_current();
#line 1209
  __wait.flags = 0U;
#line 1209
  __wait.private = (void *)tmp___4;
#line 1209
  __wait.func = & autoremove_wake_function;
#line 1209
  __wait.task_list.next = & __wait.task_list;
#line 1209
  __wait.task_list.prev = & __wait.task_list;
  ldv_49900: 
#line 1209
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1209
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1209
  if (tmp___5 == 0) {
#line 1209
    goto ldv_49899;
  } else {

  }
#line 1209
  schedule();
#line 1209
  goto ldv_49900;
  ldv_49899: 
#line 1209
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_49897: 
#line 1211
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1211
  if (tmp___6 != 0) {
#line 1211
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1211);
  } else {

  }
#line 1212
  if (epoch->flags != 0UL) {
#line 1212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1212);
  } else {

  }
#line 1214
  return (1);
  default: 
#line 1216
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1217
  return (0);
  }
  ldv_49894: 
#line 1220
  epoch->flags = 0UL;
#line 1221
  atomic_set(& epoch->epoch_size, 0);
#line 1222
  atomic_set(& epoch->active, 0);
#line 1224
  spin_lock(& mdev->epoch_lock);
#line 1225
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1225
  if (tmp___7 != 0) {
#line 1226
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1227
    mdev->current_epoch = epoch;
#line 1228
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1231
    kfree((void const   *)epoch);
  }
#line 1233
  spin_unlock(& mdev->epoch_lock);
#line 1235
  return (1);
}
}
#line 1241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int _b ;
  int _b___0 ;
  int _b___1 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  struct page *tmp___7 ;
  int tmp___8 ;

  {
#line 1243
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1243
  capacity = tmp;
#line 1247
  dig_in = mdev->int_dig_in;
#line 1248
  dig_vv = mdev->int_dig_vv;
#line 1251
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1251
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1251
    dgs = (int )tmp___0;
  } else {
#line 1251
    dgs = 0;
  }
#line 1254
  if (dgs != 0) {
#line 1255
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1256
    if (rr != dgs) {
#line 1257
      tmp___1 = get_current();
#line 1257
      tmp___2 = signal_pending(tmp___1);
#line 1257
      if (tmp___2 == 0) {
#line 1258
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1261
      return (0);
    } else {

    }
  } else {

  }
#line 1265
  data_size = data_size - dgs;
#line 1267
  _b = data_size == 0;
#line 1267
  if (_b != 0) {
#line 1267
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1267);
  } else {

  }
#line 1267
  if (_b != 0) {
#line 1267
    return (0);
  } else {

  }
#line 1268
  _b___0 = (data_size & 511) != 0;
#line 1268
  if (_b___0 != 0) {
#line 1268
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1268);
  } else {

  }
#line 1268
  if (_b___0 != 0) {
#line 1268
    return (0);
  } else {

  }
#line 1269
  _b___1 = (unsigned int )data_size > 131072U;
#line 1269
  if (_b___1 != 0) {
#line 1269
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_BIO_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1269);
  } else {

  }
#line 1269
  if (_b___1 != 0) {
#line 1269
    return (0);
  } else {

  }
#line 1273
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1274
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "request from peer beyond end of local disk: capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1278
    return (0);
  } else {

  }
#line 1284
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1285
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1286
    return (0);
  } else {

  }
#line 1288
  ds = data_size;
#line 1289
  page = e->pages;
#line 1290
  goto ldv_49930;
  ldv_49929: 
#line 1291
  __min1 = ds;
#line 1291
  __min2 = 4096;
#line 1291
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1292
  tmp___3 = kmap(page);
#line 1292
  data = (unsigned long *)tmp___3;
#line 1293
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1294
  tmp___4 = drbd_insert_fault(mdev, 9U);
#line 1294
  if (tmp___4 != 0) {
#line 1295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1296
    *data = ~ *data;
  } else {

  }
#line 1298
  kunmap(page);
#line 1299
  if ((unsigned int )rr != len) {
#line 1300
    drbd_free_some_ee(mdev, e, 0);
#line 1301
    tmp___5 = get_current();
#line 1301
    tmp___6 = signal_pending(tmp___5);
#line 1301
    if (tmp___6 == 0) {
#line 1302
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, len);
    } else {

    }
#line 1304
    return (0);
  } else {

  }
#line 1306
  ds = ds - rr;
#line 1290
  page = page_chain_next(page);
  ldv_49930: ;
#line 1290
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1290
    tmp___7 = page_chain_next(page);
#line 1290
    __builtin_prefetch((void const   *)tmp___7);
#line 1290
    if (1 != 0) {
#line 1291
      goto ldv_49929;
    } else {
#line 1293
      goto ldv_49931;
    }
  } else {

  }
  ldv_49931: ;
#line 1309
  if (dgs != 0) {
#line 1310
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1311
    tmp___8 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1311
    if (tmp___8 != 0) {
#line 1312
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED: %llus +%u\n",
              (unsigned long long )sector, data_size);
#line 1314
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1316
      drbd_free_some_ee(mdev, e, 0);
#line 1317
      return (0);
    } else {

    }
  } else {

  }
#line 1320
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1321
  return (e);
}
}
#line 1327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1330
  rv = 1;
#line 1333
  if (data_size == 0) {
#line 1334
    return (1);
  } else {

  }
#line 1336
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1338
  data = kmap(page);
#line 1339
  goto ldv_49951;
  ldv_49950: 
#line 1340
  __min1 = data_size;
#line 1340
  __min2 = 4096;
#line 1340
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1341
  __min1___1 = data_size;
#line 1341
  __min2___1 = 4096;
#line 1341
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1342
    rv = 0;
#line 1343
    tmp = get_current();
#line 1343
    tmp___0 = signal_pending(tmp);
#line 1343
    if (tmp___0 == 0) {
#line 1346
      __min1___0 = data_size;
#line 1346
      __min2___0 = 4096;
#line 1346
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
               rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
    } else {

    }
#line 1347
    goto ldv_49949;
  } else {

  }
#line 1349
  data_size = data_size - rr;
  ldv_49951: ;
#line 1339
  if (data_size != 0) {
#line 1340
    goto ldv_49950;
  } else {

  }
  ldv_49949: 
#line 1351
  kunmap(page);
#line 1352
  drbd_pp_free(mdev, page, 0);
#line 1353
  return (rv);
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;
  void *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1362
  dig_in = mdev->int_dig_in;
#line 1363
  dig_vv = mdev->int_dig_vv;
#line 1365
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1365
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1365
    dgs = (int )tmp;
  } else {
#line 1365
    dgs = 0;
  }
#line 1368
  if (dgs != 0) {
#line 1369
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1370
    if (rr != dgs) {
#line 1371
      tmp___0 = get_current();
#line 1371
      tmp___1 = signal_pending(tmp___0);
#line 1371
      if (tmp___1 == 0) {
#line 1372
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
                 rr, dgs);
      } else {

      }
#line 1375
      return (0);
    } else {

    }
  } else {

  }
#line 1379
  data_size = data_size - dgs;
#line 1383
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1385
  bio = req->master_bio;
#line 1386
  if (bio->bi_sector != sector) {
#line 1386
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1386);
  } else {

  }
#line 1388
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1388
  i = (int )bio->bi_idx;
#line 1388
  goto ldv_49970;
  ldv_49969: 
#line 1389
  __min1 = data_size;
#line 1389
  __min2 = (int )bvec->bv_len;
#line 1389
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1390
  tmp___2 = kmap(bvec->bv_page);
#line 1390
  rr = drbd_recv(mdev, tmp___2 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1393
  kunmap(bvec->bv_page);
#line 1394
  if (rr != expect) {
#line 1395
    tmp___3 = get_current();
#line 1395
    tmp___4 = signal_pending(tmp___3);
#line 1395
    if (tmp___4 == 0) {
#line 1396
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
               rr, expect);
    } else {

    }
#line 1399
    return (0);
  } else {

  }
#line 1401
  data_size = data_size - rr;
#line 1388
  bvec = bvec + 1;
#line 1388
  i = i + 1;
  ldv_49970: ;
#line 1388
  if ((int )bio->bi_vcnt > i) {
#line 1389
    goto ldv_49969;
  } else {

  }

#line 1404
  if (dgs != 0) {
#line 1405
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1406
    tmp___5 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1406
    if (tmp___5 != 0) {
#line 1407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1408
      return (0);
    } else {

    }
  } else {

  }
#line 1412
  if (data_size != 0) {
#line 1412
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1412);
  } else {

  }
#line 1413
  return (1);
}
}
#line 1418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1420
  e = (struct drbd_epoch_entry *)w;
#line 1421
  sector = e->sector;
#line 1424
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1424
  if (tmp == 0) {
#line 1424
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1424);
  } else {

  }
#line 1426
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1426
  if (tmp___0 != 0L) {
#line 1427
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1427U);
#line 1428
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1431
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1433
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1435
  atomic_dec(& mdev->unacked_cnt);
#line 1435
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
  if (tmp___2 < 0) {
#line 1435
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1435
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1435, tmp___1);
  } else {

  }
#line 1437
  return (ok);
}
}
#line 1440 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1444
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1445
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1446
    goto fail;
  } else {

  }
#line 1448
  atomic_dec(& mdev->rs_pending_cnt);
#line 1448
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1448
  if (tmp___0 < 0) {
#line 1448
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1448, tmp);
  } else {

  }
#line 1450
  inc_unacked(mdev);
#line 1454
  e->w.cb = & e_end_resync_block;
#line 1456
  spin_lock_irq(& mdev->req_lock);
#line 1457
  list_add(& e->w.list, & mdev->sync_ee);
#line 1458
  spin_unlock_irq(& mdev->req_lock);
#line 1460
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1461
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1461
  if (tmp___1 == 0) {
#line 1462
    return (1);
  } else {

  }
#line 1465
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1466
  spin_lock_irq(& mdev->req_lock);
#line 1467
  list_del(& e->w.list);
#line 1468
  spin_unlock_irq(& mdev->req_lock);
#line 1470
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1472
  put_ldev(mdev);
#line 1473
  return (0);
}
}
#line 1476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1481
  p = & mdev->data.rbuf.data;
#line 1483
  tmp = __fswab64(p->sector);
#line 1483
  sector = (sector_t )tmp;
#line 1485
  spin_lock_irq(& mdev->req_lock);
#line 1486
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1487
  spin_unlock_irq(& mdev->req_lock);
#line 1488
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1488
  if (tmp___0 != 0L) {
#line 1489
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1490
    return (0);
  } else {

  }
#line 1496
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1498
  if (ok != 0) {
#line 1499
    req_mod(req, data_received);
  } else {

  }
#line 1504
  return (ok);
}
}
#line 1507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1511
  p = & mdev->data.rbuf.data;
#line 1513
  tmp = __fswab64(p->sector);
#line 1513
  sector = (sector_t )tmp;
#line 1514
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1514
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1514);
  } else {

  }
#line 1516
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1516
  if (tmp___1 != 0) {
#line 1520
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1522
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1522
    if (tmp___0 != 0) {
#line 1523
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1525
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1527
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1530
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1532
  return (ok);
}
}
#line 1538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1540
  e = (struct drbd_epoch_entry *)w;
#line 1541
  sector = e->sector;
#line 1542
  ok = 1;
#line 1544
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1545
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1545
    if (tmp___0 != 0L) {
#line 1546
      pcmd = ((int )mdev->state.ldv_38894.conn > 15 && (int )mdev->state.ldv_38894.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1550
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1550
      ok = tmp & ok;
#line 1551
      if (pcmd == 23) {
#line 1552
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1552U);
      } else {

      }
    } else {
#line 1554
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1558
    atomic_dec(& mdev->unacked_cnt);
#line 1558
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1558
    if (tmp___2 < 0) {
#line 1558
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1558
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1558, tmp___1);
    } else {

    }
  } else {

  }
#line 1562
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1563
    spin_lock_irq(& mdev->req_lock);
#line 1564
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1564
    if (tmp___3 != 0) {
#line 1564
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1564);
    } else {

    }
#line 1565
    hlist_del_init(& e->collision);
#line 1566
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1568
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1568
    if (tmp___4 == 0) {
#line 1568
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->collision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1568);
    } else {

    }
  }
#line 1571
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1573
  return (ok);
}
}
#line 1576 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1578
  e = (struct drbd_epoch_entry *)w;
#line 1579
  ok = 1;
#line 1581
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1581
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1581);
  } else {

  }
#line 1582
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1584
  spin_lock_irq(& mdev->req_lock);
#line 1585
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->collision));
#line 1585
  if (tmp != 0) {
#line 1585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1585);
  } else {

  }
#line 1586
  hlist_del_init(& e->collision);
#line 1587
  spin_unlock_irq(& mdev->req_lock);
#line 1589
  atomic_dec(& mdev->unacked_cnt);
#line 1589
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1589
  if (tmp___1 < 0) {
#line 1589
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1589
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1589, tmp___0);
  } else {

  }
#line 1591
  return (ok);
}
}
#line 1615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1617
  tmp = get_current();
#line 1617
  wait.flags = 0U;
#line 1617
  wait.private = (void *)tmp;
#line 1617
  wait.func = & autoremove_wake_function;
#line 1617
  wait.task_list.next = & wait.task_list;
#line 1617
  wait.task_list.prev = & wait.task_list;
#line 1620
  ret = 0;
#line 1621
  spin_lock(& mdev->peer_seq_lock);
  ldv_50046: 
#line 1623
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1624
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1624
  if (tmp___0 <= 0) {
#line 1625
    goto ldv_50045;
  } else {

  }
#line 1626
  tmp___1 = get_current();
#line 1626
  tmp___2 = signal_pending(tmp___1);
#line 1626
  if (tmp___2 != 0) {
#line 1627
    ret = -512;
#line 1628
    goto ldv_50045;
  } else {

  }
#line 1630
  p_seq = mdev->peer_seq;
#line 1631
  spin_unlock(& mdev->peer_seq_lock);
#line 1632
  timeout = schedule_timeout(7500L);
#line 1633
  spin_lock(& mdev->peer_seq_lock);
#line 1634
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1635
    ret = -110;
#line 1636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1637
    goto ldv_50045;
  } else {

  }
#line 1639
  goto ldv_50046;
  ldv_50045: 
#line 1640
  finish_wait(& mdev->seq_wait, & wait);
#line 1641
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1642
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1643
  spin_unlock(& mdev->peer_seq_lock);
#line 1644
  return (ret);
}
}
#line 1650 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long wire_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1652
  return ((unsigned long )(((((dpf & 2U) != 0U ? 16 : 0) | ((dpf & 16U) != 0U ? 1024 : 0)) | ((dpf & 32U) != 0U ? 2048 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
}
}
#line 1659 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u32 tmp___3 ;
  unsigned long tmp___4 ;
  int size ;
  int discard ;
  int tmp___5 ;
  wait_queue_t wait ;
  struct task_struct *tmp___6 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___7 ;
  long tmp___8 ;
  __u32 tmp___9 ;
  int tmp___10 ;
  struct hlist_head *tmp___11 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;

  {
#line 1663
  p = & mdev->data.rbuf.data;
#line 1664
  rw = 1;
#line 1667
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1667
  if (tmp___1 == 0) {
#line 1668
    spin_lock(& mdev->peer_seq_lock);
#line 1669
    tmp = __fswab32(p->seq_num);
#line 1669
    if (mdev->peer_seq + 1U == tmp) {
#line 1670
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1671
    spin_unlock(& mdev->peer_seq_lock);
#line 1673
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1674
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1675
    tmp___0 = drbd_drain_block(mdev, (int )data_size);
#line 1675
    return (tmp___0);
  } else {

  }
#line 1683
  tmp___2 = __fswab64(p->sector);
#line 1683
  sector = (sector_t )tmp___2;
#line 1684
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1685
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1686
    put_ldev(mdev);
#line 1687
    return (0);
  } else {

  }
#line 1690
  e->w.cb = & e_end_block;
#line 1692
  tmp___3 = __fswab32(p->dp_flags);
#line 1692
  dp_flags = tmp___3;
#line 1693
  tmp___4 = wire_flags_to_bio(mdev, dp_flags);
#line 1693
  rw = (int )((unsigned int )tmp___4 | (unsigned int )rw);
#line 1695
  if ((dp_flags & 4U) != 0U) {
#line 1696
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1698
  spin_lock(& mdev->epoch_lock);
#line 1699
  e->epoch = mdev->current_epoch;
#line 1700
  atomic_inc(& (e->epoch)->epoch_size);
#line 1701
  atomic_inc(& (e->epoch)->active);
#line 1702
  spin_unlock(& mdev->epoch_lock);
#line 1705
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 1706
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1710
    size = (int const   )e->size;
#line 1711
    tmp___5 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1711
    discard = tmp___5;
#line 1712
    tmp___6 = get_current();
#line 1712
    wait.flags = 0U;
#line 1712
    wait.private = (void *)tmp___6;
#line 1712
    wait.func = & autoremove_wake_function;
#line 1712
    wait.task_list.next = & wait.task_list;
#line 1712
    wait.task_list.prev = & wait.task_list;
#line 1718
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1718
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1718);
    } else {

    }
#line 1719
    tmp___7 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1719
    if (tmp___7 != 0L) {
#line 1719
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1719), "i" (12UL));
      ldv_50068: ;
#line 1719
      goto ldv_50068;
    } else {

    }
#line 1720
    tmp___8 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1720
    if (tmp___8 != 0L) {
#line 1720
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1720), "i" (12UL));
      ldv_50069: ;
#line 1720
      goto ldv_50069;
    } else {

    }
#line 1756
    tmp___9 = __fswab32(p->seq_num);
#line 1756
    tmp___10 = drbd_wait_peer_seq(mdev, tmp___9);
#line 1756
    if (tmp___10 != 0) {
#line 1757
      goto out_interrupted;
    } else {

    }
#line 1759
    spin_lock_irq(& mdev->req_lock);
#line 1761
    tmp___11 = ee_hash_slot(mdev, sector);
#line 1761
    hlist_add_head(& e->collision, tmp___11);
#line 1764
    slot = tl_hash_slot(mdev, sector);
#line 1765
    first = 1;
    ldv_50080: 
#line 1767
    have_unacked = 0;
#line 1768
    have_conflict = 0;
#line 1769
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1771
    n = slot->first;
#line 1771
    goto ldv_50077;
    ldv_50076: 
#line 1772
    tmp___14 = overlaps(i->sector, (int )i->size, sector, size);
#line 1772
    if (tmp___14 != 0) {
#line 1775
      if (first != 0) {
#line 1776
        tmp___12 = get_current();
#line 1776
        tmp___13 = get_current();
#line 1776
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1781
      if ((i->rq_state & 8UL) != 0UL) {
#line 1782
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1783
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1771
    n = n->next;
    ldv_50077: ;
#line 1771
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1771
      __mptr = (struct hlist_node  const  *)n;
#line 1771
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1771
      if (1 != 0) {
#line 1772
        goto ldv_50076;
      } else {
#line 1774
        goto ldv_50078;
      }
    } else {

    }
    ldv_50078: ;
#line 1787
    if (have_conflict == 0) {
#line 1788
      goto ldv_50079;
    } else {

    }
#line 1791
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1792
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1794
      inc_unacked(mdev);
#line 1795
      e->w.cb = & e_send_discard_ack;
#line 1796
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1798
      spin_unlock_irq(& mdev->req_lock);
#line 1803
      put_ldev(mdev);
#line 1804
      wake_asender(mdev);
#line 1805
      finish_wait(& mdev->misc_wait, & wait);
#line 1806
      return (1);
    } else {

    }
#line 1809
    tmp___15 = get_current();
#line 1809
    tmp___16 = signal_pending(tmp___15);
#line 1809
    if (tmp___16 != 0) {
#line 1810
      hlist_del_init(& e->collision);
#line 1812
      spin_unlock_irq(& mdev->req_lock);
#line 1814
      finish_wait(& mdev->misc_wait, & wait);
#line 1815
      goto out_interrupted;
    } else {

    }
#line 1818
    spin_unlock_irq(& mdev->req_lock);
#line 1819
    if (first != 0) {
#line 1820
      first = 0;
#line 1821
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1823
    if (discard != 0) {
#line 1826
      if (have_unacked != 0) {
#line 1826
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1826);
      } else {

      }
    } else {

    }
#line 1828
    schedule();
#line 1829
    spin_lock_irq(& mdev->req_lock);
#line 1830
    goto ldv_50080;
    ldv_50079: 
#line 1831
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1834
  list_add(& e->w.list, & mdev->active_ee);
#line 1835
  spin_unlock_irq(& mdev->req_lock);
#line 1837
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1839
  inc_unacked(mdev);
#line 1842
  goto ldv_50082;
  case 2: 
#line 1846
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1847
  goto ldv_50082;
  case 1: ;
#line 1850
  goto ldv_50082;
  }
  ldv_50082: ;
#line 1853
  if ((int )mdev->state.ldv_38894.pdsk <= 3) {
#line 1855
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1855U);
#line 1856
    e->flags = e->flags | 1UL;
#line 1857
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1858
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1861
  tmp___17 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1861
  if (tmp___17 == 0) {
#line 1862
    return (1);
  } else {

  }
#line 1865
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 1866
  spin_lock_irq(& mdev->req_lock);
#line 1867
  list_del(& e->w.list);
#line 1868
  hlist_del_init(& e->collision);
#line 1869
  spin_unlock_irq(& mdev->req_lock);
#line 1870
  if ((int )e->flags & 1) {
#line 1871
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1874
  drbd_may_finish_epoch(mdev, e->epoch, EV_CLEANUP);
#line 1875
  put_ldev(mdev);
#line 1876
  drbd_free_some_ee(mdev, e, 0);
#line 1877
  return (0);
}
}
#line 1891 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev , sector_t sector ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  struct lc_element *tmp ;
  int curr_events ;
  int throttle ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp___1 ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___2 ;

  {
#line 1893
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1897
  throttle = 0;
#line 1900
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1901
    return (0);
  } else {

  }
#line 1903
  spin_lock_irq(& mdev->al_lock);
#line 1904
  tmp = lc_find(mdev->resync, (unsigned int )(sector >> 15));
#line 1905
  if ((unsigned long )tmp != (unsigned long )((struct lc_element *)0)) {
#line 1906
    __mptr = (struct lc_element  const  *)tmp;
#line 1906
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1907
    tmp___0 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1907
    if (tmp___0 != 0) {
#line 1908
      spin_unlock_irq(& mdev->al_lock);
#line 1909
      return (0);
    } else {

    }
  } else {

  }
#line 1913
  spin_unlock_irq(& mdev->al_lock);
#line 1915
  res = 0UL;
#line 1915
  _cpu = 4294967295U;
#line 1915
  goto ldv_50106;
  ldv_50105: 
#line 1915
  __vpp_verify = 0;
#line 1915
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1915
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_50106: 
#line 1915
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1915
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1916
    goto ldv_50105;
  } else {

  }
#line 1916
  res___0 = 0UL;
#line 1916
  _cpu___0 = 4294967295U;
#line 1916
  goto ldv_50116;
  ldv_50115: 
#line 1916
  __vpp_verify___0 = 0;
#line 1916
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1916
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_50116: 
#line 1916
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1916
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1917
    goto ldv_50115;
  } else {

  }
#line 1916
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1916
  curr_events = ((int )res + (int )res___0) - tmp___1;
#line 1919
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1923
    mdev->rs_last_events = curr_events;
#line 1927
    i = (mdev->rs_last_mark + 7) % 8;
#line 1929
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U) {
#line 1930
      rs_left = mdev->ov_left;
    } else {
#line 1932
      tmp___2 = drbd_bm_total_weight(mdev);
#line 1932
      rs_left = tmp___2 - mdev->rs_failed;
    }
#line 1934
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1935
    if (dt == 0UL) {
#line 1936
      dt = dt + 1UL;
    } else {

    }
#line 1937
    db = mdev->rs_mark_left[i] - rs_left;
#line 1938
    dbdt = db / dt << 2;
#line 1940
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1941
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1943
  return (throttle);
}
}
#line 1947 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  unsigned long now ;
  int i ;
  unsigned long tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 1950
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1950
  capacity = tmp;
#line 1952
  di = 0;
#line 1955
  p = & mdev->data.rbuf.block_req;
#line 1957
  tmp___0 = __fswab64(p->sector);
#line 1957
  sector = (sector_t )tmp___0;
#line 1958
  tmp___1 = __fswab32(p->blksize);
#line 1958
  size = (int )tmp___1;
#line 1960
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1961
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1961, (unsigned long long )sector, size);
#line 1963
    return (0);
  } else {

  }
#line 1965
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1966, (unsigned long long )sector, size);
#line 1968
    return (0);
  } else {

  }
#line 1971
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1971
  if (tmp___7 == 0) {
#line 1972
    verb = 1;
#line 1973
    switch ((unsigned int )cmd) {
    case 8U: 
#line 1975
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 1976
    goto ldv_50135;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 1980
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 1981
    goto ldv_50135;
    case 31U: 
#line 1983
    verb = 0;
#line 1984
    atomic_dec(& mdev->rs_pending_cnt);
#line 1984
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1984
    if (tmp___3 < 0) {
#line 1984
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1984
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 1984, tmp___2);
    } else {

    }
#line 1985
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 1986
    goto ldv_50135;
    default: 
#line 1988
    tmp___4 = cmdname(cmd);
#line 1988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_50135: ;
#line 1991
    if (verb != 0) {
#line 1991
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1991
      if (tmp___5 != 0) {
#line 1992
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 1996
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 1996
    return (tmp___6);
  } else {

  }
#line 2002
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 2003
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 2004
    put_ldev(mdev);
#line 2005
    return (0);
  } else {

  }
#line 2008
  switch ((unsigned int )cmd) {
  case 8U: 
#line 2010
  e->w.cb = & w_e_end_data_req;
#line 2011
  fault_type = 5U;
#line 2013
  goto submit;
  case 9U: 
#line 2016
  e->w.cb = & w_e_end_rsdata_req;
#line 2017
  fault_type = 3U;
#line 2019
  mdev->bm_resync_fo = sector >> 3;
#line 2020
  goto ldv_50148;
  case 31U: ;
  case 33U: 
#line 2024
  fault_type = 3U;
#line 2025
  tmp___8 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 2025
  di = (struct digest_info *)tmp___8;
#line 2026
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2027
    goto out_free_e;
  } else {

  }
#line 2029
  di->digest_size = (int )digest_size;
#line 2030
  di->digest = (void *)di + 16U;
#line 2032
  e->ldv_47617.digest = di;
#line 2033
  e->flags = e->flags | 16UL;
#line 2035
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2035
  if ((unsigned int )tmp___9 != digest_size) {
#line 2036
    goto out_free_e;
  } else {

  }
#line 2038
  if ((unsigned int )cmd == 33U) {
#line 2039
    if (mdev->agreed_pro_version <= 88) {
#line 2039
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2039);
    } else {

    }
#line 2040
    e->w.cb = & w_e_end_csum_rs_req;
#line 2042
    mdev->bm_resync_fo = sector >> 3;
  } else
#line 2043
  if ((unsigned int )cmd == 31U) {
#line 2045
    atomic_add(size >> 9, & mdev->rs_sect_in);
#line 2046
    e->w.cb = & w_e_end_ov_reply;
#line 2047
    atomic_dec(& mdev->rs_pending_cnt);
#line 2047
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2047
    if (tmp___11 < 0) {
#line 2047
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2047
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2047, tmp___10);
    } else {

    }
#line 2050
    goto submit_for_resync;
  } else {

  }
#line 2052
  goto ldv_50148;
  case 30U: ;
#line 2055
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2057
    now = jiffies;
#line 2059
    mdev->ov_start_sector = sector;
#line 2060
    mdev->ov_position = sector;
#line 2061
    tmp___12 = drbd_bm_bits(mdev);
#line 2061
    mdev->ov_left = tmp___12 - (sector >> 3);
#line 2062
    mdev->rs_total = mdev->ov_left;
#line 2063
    i = 0;
#line 2063
    goto ldv_50160;
    ldv_50159: 
#line 2064
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 2065
    mdev->rs_mark_time[i] = now;
#line 2063
    i = i + 1;
    ldv_50160: ;
#line 2063
    if (i <= 7) {
#line 2064
      goto ldv_50159;
    } else {

    }
#line 2067
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2070
  e->w.cb = & w_e_end_ov_req;
#line 2071
  fault_type = 3U;
#line 2072
  goto ldv_50148;
  default: 
#line 2075
  tmp___13 = cmdname(cmd);
#line 2075
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___13);
#line 2077
  fault_type = 10U;
#line 2078
  goto out_free_e;
  }
  ldv_50148: ;
#line 2103
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 4U) {
#line 2103
    tmp___14 = drbd_rs_should_slow_down(mdev, sector);
#line 2103
    if (tmp___14 != 0) {
#line 2104
      schedule_timeout_uninterruptible(25L);
    } else {

    }
  } else {

  }
#line 2105
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 2105
  if (tmp___15 != 0) {
#line 2106
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2109
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2112
  inc_unacked(mdev);
#line 2113
  spin_lock_irq(& mdev->req_lock);
#line 2114
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2115
  spin_unlock_irq(& mdev->req_lock);
#line 2117
  tmp___16 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2117
  if (tmp___16 == 0) {
#line 2118
    return (1);
  } else {

  }
#line 2121
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit failed, triggering re-connect\n");
#line 2122
  spin_lock_irq(& mdev->req_lock);
#line 2123
  list_del(& e->w.list);
#line 2124
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2128
  put_ldev(mdev);
#line 2129
  drbd_free_some_ee(mdev, e, 0);
#line 2130
  return (0);
}
}
#line 2133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2135
  rv = -100;
#line 2138
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2139
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2141
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2142
  ch_self = mdev->comm_bm_set;
#line 2144
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2148
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2149
  goto ldv_50174;
  case 0: ;
#line 2151
  goto ldv_50174;
  case 1: ;
#line 2153
  if (self == 0 && peer == 1) {
#line 2154
    rv = -1;
#line 2155
    goto ldv_50174;
  } else {

  }
#line 2157
  if (self == 1 && peer == 0) {
#line 2158
    rv = 1;
#line 2159
    goto ldv_50174;
  } else {

  }
  case 2: ;
#line 2163
  if (self == 0 && peer == 1) {
#line 2164
    rv = 1;
#line 2165
    goto ldv_50174;
  } else {

  }
#line 2167
  if (self == 1 && peer == 0) {
#line 2168
    rv = -1;
#line 2169
    goto ldv_50174;
  } else {

  }
#line 2172
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2175
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2176
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2176
    rv = tmp != 0 ? -1 : 1;
#line 2178
    goto ldv_50174;
  } else {
#line 2180
    if (ch_peer == 0UL) {
#line 2180
      rv = 1;
#line 2180
      goto ldv_50174;
    } else {

    }
#line 2181
    if (ch_self == 0UL) {
#line 2181
      rv = -1;
#line 2181
      goto ldv_50174;
    } else {

    }
  }
#line 2183
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2184
    goto ldv_50174;
  } else {

  }
  case 4: ;
#line 2186
  if (ch_self < ch_peer) {
#line 2187
    rv = -1;
  } else
#line 2188
  if (ch_self > ch_peer) {
#line 2189
    rv = 1;
  } else {
#line 2192
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2192
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2194
  goto ldv_50174;
  case 5: 
#line 2196
  rv = -1;
#line 2197
  goto ldv_50174;
  case 6: 
#line 2199
  rv = 1;
  }
  ldv_50174: ;
#line 2202
  return (rv);
}
}
#line 2205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2207
  rv = -100;
#line 2209
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2215
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2216
  goto ldv_50192;
  case 0: ;
#line 2218
  goto ldv_50192;
  case 7: 
#line 2220
  hg = drbd_asb_recover_0p(mdev);
#line 2221
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 2222
    rv = hg;
  } else {

  }
#line 2223
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2224
    rv = hg;
  } else {

  }
#line 2225
  goto ldv_50192;
  case 10: 
#line 2227
  rv = drbd_asb_recover_0p(mdev);
#line 2228
  goto ldv_50192;
  case 8: ;
#line 2230
  return ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U ? 1 : -1);
  case 9: 
#line 2232
  hg = drbd_asb_recover_0p(mdev);
#line 2233
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 2236
    drbd_set_role(mdev, R_SECONDARY, 0);
#line 2240
    val.i = 0U;
#line 2240
    val.ldv_38894.role = 2U;
#line 2240
    mask.i = 0U;
#line 2240
    mask.ldv_38894.role = 3U;
#line 2240
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2241
    if ((int )rv2 != 1) {
#line 2242
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2244
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2245
      rv = hg;
    }
  } else {
#line 2248
    rv = hg;
  }
  }
  ldv_50192: ;
#line 2251
  return (rv);
}
}
#line 2254 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int hg ;
  int rv ;
  enum drbd_state_rv rv2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2256
  rv = -100;
#line 2258
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2266
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2267
  goto ldv_50215;
  case 10: 
#line 2269
  rv = drbd_asb_recover_0p(mdev);
#line 2270
  goto ldv_50215;
  case 0: ;
#line 2272
  goto ldv_50215;
  case 9: 
#line 2274
  hg = drbd_asb_recover_0p(mdev);
#line 2275
  if (hg == -1) {
#line 2281
    val.i = 0U;
#line 2281
    val.ldv_38894.role = 2U;
#line 2281
    mask.i = 0U;
#line 2281
    mask.ldv_38894.role = 3U;
#line 2281
    rv2 = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2282
    if ((int )rv2 != 1) {
#line 2283
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2285
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2286
      rv = hg;
    }
  } else {
#line 2289
    rv = hg;
  }
  }
  ldv_50215: ;
#line 2292
  return (rv);
}
}
#line 2295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2298
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2299
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2300
    return;
  } else {

  }
#line 2302
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2303
  return;
}
}
#line 2324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2329
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2330
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2332
  *rule_nr = 10;
#line 2333
  if (self == 4ULL && peer == 4ULL) {
#line 2334
    return (0);
  } else {

  }
#line 2336
  *rule_nr = 20;
#line 2337
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2339
    return (-2);
  } else {

  }
#line 2341
  *rule_nr = 30;
#line 2342
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2344
    return (2);
  } else {

  }
#line 2346
  if (self == peer) {
#line 2349
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2351
      if (mdev->agreed_pro_version <= 90) {
#line 2352
        return (-1091);
      } else {

      }
#line 2354
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2356
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2357
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2359
        if ((int )mdev->state.ldv_38894.disk > 2) {
#line 2359
          tmp = drbd_bm_total_weight(mdev);
#line 2359
          tmp___0 = (u64 )tmp;
        } else {
#line 2359
          tmp___0 = 0ULL;
        }
#line 2359
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2361
        *rule_nr = 34;
      } else {
#line 2363
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2364
        *rule_nr = 36;
      }
#line 2367
      return (1);
    } else {

    }
#line 2370
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2372
      if (mdev->agreed_pro_version <= 90) {
#line 2373
        return (-1091);
      } else {

      }
#line 2375
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2377
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2379
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2380
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2381
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2383
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2384
        *rule_nr = 35;
      } else {
#line 2386
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2387
        *rule_nr = 37;
      }
#line 2390
      return (-1);
    } else {

    }
#line 2394
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2394
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2398
    *rule_nr = 40;
#line 2400
    switch (rct) {
    case 0: ;
#line 2401
    return (0);
    case 1: ;
#line 2402
    return (1);
    case 2: ;
#line 2403
    return (-1);
    case 3: 
#line 2405
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2406
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2410
  *rule_nr = 50;
#line 2411
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2412
  if (self == peer) {
#line 2413
    return (-1);
  } else {

  }
#line 2415
  *rule_nr = 51;
#line 2416
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2417
  if (self == peer) {
#line 2418
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL : peer + 281474976710656ULL == (*(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL)) {
#line 2425
      if (mdev->agreed_pro_version <= 90) {
#line 2426
        return (-1091);
      } else {

      }
#line 2428
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2429
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2431
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Did not got last syncUUID packet, corrected:\n");
#line 2432
      drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2434
      return (-1);
    } else {

    }
  } else {

  }
#line 2438
  *rule_nr = 60;
#line 2439
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2440
  i = 2;
#line 2440
  goto ldv_50246;
  ldv_50245: 
#line 2441
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2442
  if (self == peer) {
#line 2443
    return (-2);
  } else {

  }
#line 2440
  i = i + 1;
  ldv_50246: ;
#line 2440
  if (i <= 3) {
#line 2441
    goto ldv_50245;
  } else {

  }
#line 2446
  *rule_nr = 70;
#line 2447
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2448
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2449
  if (self == peer) {
#line 2450
    return (1);
  } else {

  }
#line 2452
  *rule_nr = 71;
#line 2453
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2454
  if (self == peer) {
#line 2455
    if (mdev->agreed_pro_version <= 95 ? (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL : self + 281474976710656ULL == ((mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL)) {
#line 2462
      if (mdev->agreed_pro_version <= 90) {
#line 2463
        return (-1091);
      } else {

      }
#line 2465
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2466
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2468
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Last syncUUID did not get through, corrected:\n");
#line 2469
      if ((int )mdev->state.ldv_38894.disk > 2) {
#line 2469
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2469
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2469
        tmp___3 = 0ULL;
      }
#line 2469
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2472
      return (1);
    } else {

    }
  } else {

  }
#line 2477
  *rule_nr = 80;
#line 2478
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2479
  i = 2;
#line 2479
  goto ldv_50249;
  ldv_50248: 
#line 2480
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2481
  if (self == peer) {
#line 2482
    return (2);
  } else {

  }
#line 2479
  i = i + 1;
  ldv_50249: ;
#line 2479
  if (i <= 3) {
#line 2480
    goto ldv_50248;
  } else {

  }
#line 2485
  *rule_nr = 90;
#line 2486
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2487
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2488
  if (self == peer && self != 0ULL) {
#line 2489
    return (100);
  } else {

  }
#line 2491
  *rule_nr = 100;
#line 2492
  i = 2;
#line 2492
  goto ldv_50255;
  ldv_50254: 
#line 2493
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2494
  j = 2;
#line 2494
  goto ldv_50252;
  ldv_50251: 
#line 2495
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2496
  if (self == peer) {
#line 2497
    return (-100);
  } else {

  }
#line 2494
  j = j + 1;
  ldv_50252: ;
#line 2494
  if (j <= 3) {
#line 2495
    goto ldv_50251;
  } else {

  }
#line 2492
  i = i + 1;
  ldv_50255: ;
#line 2492
  if (i <= 3) {
#line 2493
    goto ldv_50254;
  } else {

  }

#line 2501
  return (-1000);
}
}
#line 2507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long ret ;
  int __x___0 ;
  int tmp ;
  long ret___0 ;
  int __x___2 ;
  int pcount ;
  int forced ;
  long ret___1 ;
  int __x___4 ;
  long ret___2 ;
  int __x___6 ;
  long ret___3 ;
  int __x___8 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long ret___4 ;
  int __x___10 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2511
  rv = C_MASK;
#line 2514
  mydisk = (enum drbd_disk_state )mdev->state.ldv_38894.disk;
#line 2515
  if ((unsigned int )mydisk == 3U) {
#line 2516
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_38894.disk;
  } else {

  }
#line 2518
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2519
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2520
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2523
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2525
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2527
  if (hg == -1000) {
#line 2528
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2529
    return (C_MASK);
  } else {

  }
#line 2531
  if (hg < -1000) {
#line 2532
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol %d\n",
              -1000 - hg);
#line 2533
    return (C_MASK);
  } else {

  }
#line 2536
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2538
    if (hg == -100) {
#line 2538
      tmp = 1;
    } else {
#line 2538
      __x___0 = hg;
#line 2538
      ret = (long )(__x___0 < 0 ? - __x___0 : __x___0);
#line 2538
      if (ret == 2L) {
#line 2538
        tmp = 1;
      } else {
#line 2538
        tmp = 0;
      }
    }
#line 2538
    f = tmp;
#line 2539
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2540
    if (f != 0) {
#line 2541
      hg = hg * 2;
    } else {

    }
#line 2542
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2546
  __x___2 = hg;
#line 2546
  ret___0 = (long )(__x___2 < 0 ? - __x___2 : __x___2);
#line 2546
  if (ret___0 == 100L) {
#line 2547
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2549
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U)) {
#line 2550
    pcount = ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2552
    forced = hg == -100;
#line 2554
    switch (pcount) {
    case 0: 
#line 2556
    hg = drbd_asb_recover_0p(mdev);
#line 2557
    goto ldv_50278;
    case 1: 
#line 2559
    hg = drbd_asb_recover_1p(mdev);
#line 2560
    goto ldv_50278;
    case 2: 
#line 2562
    hg = drbd_asb_recover_2p(mdev);
#line 2563
    goto ldv_50278;
    }
    ldv_50278: 
#line 2565
    __x___4 = hg;
#line 2565
    ret___1 = (long )(__x___4 < 0 ? - __x___4 : __x___4);
#line 2565
    if (ret___1 <= 99L) {
#line 2566
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2569
      if (forced != 0) {
#line 2570
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2572
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2577
  if (hg == -100) {
#line 2578
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2579
      hg = -1;
    } else {

    }
#line 2580
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2581
      hg = 1;
    } else {

    }
#line 2583
    __x___6 = hg;
#line 2583
    ret___2 = (long )(__x___6 < 0 ? - __x___6 : __x___6);
#line 2583
    if (ret___2 <= 99L) {
#line 2584
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2589
  if (hg == -100) {
#line 2594
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2595
    drbd_khelper(mdev, (char *)"split-brain");
#line 2596
    return (C_MASK);
  } else {

  }
#line 2599
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2600
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2601
    return (C_MASK);
  } else {

  }
#line 2604
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && (int )mdev->state.ldv_38894.disk > 6) {
#line 2606
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2608
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2611
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2612
    return (C_MASK);
    case 10: 
#line 2614
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2619
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2619
    goto _L;
  } else {
#line 2619
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2619
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2620
      if (hg == 0) {
#line 2621
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2623
        __x___8 = hg;
#line 2623
        ret___3 = (long )(__x___8 < 0 ? - __x___8 : __x___8);
#line 2623
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2623
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, ret___3 > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2626
      return (C_MASK);
    } else {

    }
  }
#line 2629
  __x___10 = hg;
#line 2629
  ret___4 = (long )(__x___10 < 0 ? - __x___10 : __x___10);
#line 2629
  if (ret___4 > 1L) {
#line 2630
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2631
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake",
                             BM_DONT_CLEAR);
#line 2631
    if (tmp___2 != 0) {
#line 2633
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2636
  if (hg > 0) {
#line 2637
    rv = C_WF_BITMAP_S;
  } else
#line 2638
  if (hg < 0) {
#line 2639
    rv = C_WF_BITMAP_T;
  } else {
#line 2641
    rv = C_CONNECTED;
#line 2642
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2642
    if (tmp___4 != 0UL) {
#line 2643
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2643
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2648
  return (rv);
}
}
#line 2652 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2655
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2657
    return (0);
  } else {

  }
#line 2660
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2662
    return (1);
  } else {

  }
#line 2665
  if ((unsigned int )peer == (unsigned int )self) {
#line 2666
    return (0);
  } else {

  }
#line 2669
  return (1);
}
}
#line 2672 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2674
  p = & mdev->data.rbuf.protocol;
#line 2677
  p_integrity_alg[0] = '\000';
#line 2677
  tmp = 1U;
#line 2677
  while (1) {
#line 2677
    if (tmp >= 64U) {
#line 2677
      break;
    } else {

    }
#line 2677
    p_integrity_alg[tmp] = (char)0;
#line 2677
    tmp = tmp + 1U;
  }
#line 2679
  tmp___0 = __fswab32(p->protocol);
#line 2679
  p_proto = (int )tmp___0;
#line 2680
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2680
  p_after_sb_0p = (int )tmp___1;
#line 2681
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2681
  p_after_sb_1p = (int )tmp___2;
#line 2682
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2682
  p_after_sb_2p = (int )tmp___3;
#line 2683
  tmp___4 = __fswab32(p->two_primaries);
#line 2683
  p_two_primaries = (int )tmp___4;
#line 2684
  tmp___5 = __fswab32(p->conn_flags);
#line 2684
  cf = (int )tmp___5;
#line 2685
  p_want_lose = cf & 1;
#line 2687
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2689
  if ((cf & 2) != 0) {
#line 2690
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2692
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2693
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2694
    goto disconnect;
  } else {

  }
#line 2697
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2697
  if (tmp___6 != 0) {
#line 2698
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2699
    goto disconnect;
  } else {

  }
#line 2702
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2702
  if (tmp___7 != 0) {
#line 2703
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2704
    goto disconnect;
  } else {

  }
#line 2707
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2707
  if (tmp___8 != 0) {
#line 2708
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2709
    goto disconnect;
  } else {

  }
#line 2712
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 2713
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2714
    goto disconnect;
  } else {

  }
#line 2717
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2719
    goto disconnect;
  } else {

  }
#line 2722
  if (mdev->agreed_pro_version > 86) {
#line 2723
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2725
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2725
    if ((unsigned int )tmp___9 != data_size) {
#line 2726
      return (0);
    } else {

    }
#line 2728
    p_integrity_alg[63] = 0;
#line 2729
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2729
    if (tmp___10 != 0) {
#line 2730
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2731
      goto disconnect;
    } else {

    }
#line 2733
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2737
  return (1);
  disconnect: 
#line 2740
  val.i = 0U;
#line 2740
  val.ldv_38894.conn = 1U;
#line 2740
  mask.i = 0U;
#line 2740
  mask.ldv_38894.conn = 31U;
#line 2740
  drbd_force_state(mdev, mask, val);
#line 2741
  return (0);
}
}
#line 2749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2754
  if ((int )((signed char )*alg) == 0) {
#line 2755
    return (0);
  } else {

  }
#line 2757
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2758
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2758
  if (tmp___0 != 0L) {
#line 2759
    tmp = PTR_ERR((void const   *)tfm);
#line 2759
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2761
    return (tfm);
  } else {

  }
#line 2763
  tmp___2 = crypto_hash_tfm(tfm);
#line 2763
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2763
  if (tmp___3 == 0) {
#line 2764
    crypto_free_hash(tfm);
#line 2765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2766
    tmp___1 = ERR_PTR(-22L);
#line 2766
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2768
  return (tfm);
}
}
#line 2771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2773
  ok = 1;
#line 2774
  p = & mdev->data.rbuf.rs_param_95;
#line 2776
  verify_tfm = 0;
#line 2777
  csums_tfm = 0;
#line 2778
  apv = mdev->agreed_pro_version;
#line 2779
  rs_plan_s = 0;
#line 2780
  fifo_size = 0;
#line 2782
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2788
  if (packet_size > exp_max_sz) {
#line 2789
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2791
    return (0);
  } else {

  }
#line 2794
  if (apv <= 88) {
#line 2795
    header_size = 4U;
#line 2796
    data_size = packet_size - header_size;
  } else
#line 2797
  if (apv <= 94) {
#line 2798
    header_size = 132U;
#line 2799
    data_size = packet_size - header_size;
#line 2800
    if (data_size != 0U) {
#line 2800
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2800);
    } else {

    }
  } else {
#line 2802
    header_size = 148U;
#line 2803
    data_size = packet_size - header_size;
#line 2804
    if (data_size != 0U) {
#line 2804
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2804);
    } else {

    }
  }
#line 2808
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2810
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2810
  if ((unsigned int )tmp != header_size) {
#line 2811
    return (0);
  } else {

  }
#line 2813
  tmp___0 = __fswab32(p->rate);
#line 2813
  mdev->sync_conf.rate = (int )tmp___0;
#line 2815
  if (apv > 87) {
#line 2816
    if (apv == 88) {
#line 2817
      if (data_size > 64U) {
#line 2818
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2821
        return (0);
      } else {

      }
#line 2824
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2824
      if ((unsigned int )tmp___1 != data_size) {
#line 2825
        return (0);
      } else {

      }
#line 2829
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2829
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2829);
      } else {

      }
#line 2830
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2835
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2835
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2835);
      } else {

      }
#line 2836
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2836
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2836);
      } else {

      }
#line 2837
      p->verify_alg[63] = 0;
#line 2838
      p->csums_alg[63] = 0;
    }
#line 2841
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2841
    if (tmp___3 != 0) {
#line 2842
      if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2843
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2845
        goto disconnect;
      } else {

      }
#line 2847
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2849
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2849
      if (tmp___2 != 0L) {
#line 2850
        verify_tfm = 0;
#line 2851
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2855
    if (apv > 88) {
#line 2855
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2855
      if (tmp___5 != 0) {
#line 2856
        if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2857
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2859
          goto disconnect;
        } else {

        }
#line 2861
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2863
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2863
        if (tmp___4 != 0L) {
#line 2864
          csums_tfm = 0;
#line 2865
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2869
    if (apv > 94) {
#line 2870
      tmp___6 = __fswab32(p->rate);
#line 2870
      mdev->sync_conf.rate = (int )tmp___6;
#line 2871
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2871
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2872
      tmp___8 = __fswab32(p->c_delay_target);
#line 2872
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2873
      tmp___9 = __fswab32(p->c_fill_target);
#line 2873
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2874
      tmp___10 = __fswab32(p->c_max_rate);
#line 2874
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2876
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2877
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2878
        tmp___11 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 2878
        rs_plan_s = (int *)tmp___11;
#line 2879
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2880
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2881
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2886
    spin_lock(& mdev->peer_seq_lock);
#line 2888
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2889
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2890
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2890
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2891
      crypto_free_hash(mdev->verify_tfm);
#line 2892
      mdev->verify_tfm = verify_tfm;
#line 2893
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2895
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2896
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2897
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2897
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2898
      crypto_free_hash(mdev->csums_tfm);
#line 2899
      mdev->csums_tfm = csums_tfm;
#line 2900
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2902
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2903
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2904
      mdev->rs_plan_s.values = rs_plan_s;
#line 2905
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2906
      mdev->rs_planed = 0;
    } else {

    }
#line 2908
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2911
  return (ok);
  disconnect: 
#line 2915
  crypto_free_hash(csums_tfm);
#line 2917
  crypto_free_hash(verify_tfm);
#line 2918
  val.i = 0U;
#line 2918
  val.ldv_38894.conn = 1U;
#line 2918
  mask.i = 0U;
#line 2918
  mask.ldv_38894.conn = 31U;
#line 2918
  drbd_force_state(mdev, mask, val);
#line 2919
  return (0);
}
}
#line 2923 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2927
  if (a == 0UL || b == 0UL) {
#line 2928
    return;
  } else {

  }
#line 2929
  d = a > b ? a - b : b - a;
#line 2930
  if (a >> 3 < d || b >> 3 < d) {
#line 2931
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2933
  return;
}
}
#line 2935 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  __u32 tmp___9 ;
  sector_t tmp___10 ;
  int tmp___11 ;
  __u64 tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;

  {
#line 2937
  p = & mdev->data.rbuf.sizes;
#line 2938
  dd = 0;
#line 2940
  ldsc = 0;
#line 2943
  tmp = __fswab64(p->d_size);
#line 2943
  p_size = (sector_t )tmp;
#line 2944
  tmp___0 = __fswab64(p->u_size);
#line 2944
  p_usize = (sector_t )tmp___0;
#line 2946
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2277UL) == 0U) {
#line 2947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2948
    val.i = 0U;
#line 2948
    val.ldv_38894.conn = 1U;
#line 2948
    mask.i = 0U;
#line 2948
    mask.ldv_38894.conn = 31U;
#line 2948
    drbd_force_state(mdev, mask, val);
#line 2949
    return (0);
  } else {

  }
#line 2954
  mdev->p_size = p_size;
#line 2956
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2956
  if (tmp___6 != 0) {
#line 2957
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 2957
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 2959
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2964
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 144U) {
#line 2965
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2965
      __y = p_usize;
#line 2965
      if (__x != 0UL) {
#line 2965
        if (__y != 0UL) {
#line 2965
          _min1 = __x;
#line 2965
          _min2 = __y;
#line 2965
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 2965
          tmp___2 = __x;
        }
#line 2965
        tmp___3 = tmp___2;
      } else {
#line 2965
        tmp___3 = __y;
      }
#line 2965
      p_usize = tmp___3;
    } else {

    }
#line 2968
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2970
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2971
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2972
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2978
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2978
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 2978
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_38894.disk > 4) && (int )mdev->state.ldv_38894.conn <= 9) {
#line 2982
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 2983
      val___0.i = 0U;
#line 2983
      val___0.ldv_38894.conn = 1U;
#line 2983
      mask___0.i = 0U;
#line 2983
      mask___0.ldv_38894.conn = 31U;
#line 2983
      drbd_force_state(mdev, mask___0, val___0);
#line 2984
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2985
      put_ldev(mdev);
#line 2986
      return (0);
    } else {

    }
#line 2988
    put_ldev(mdev);
  } else {

  }
#line 2991
  tmp___7 = __fswab16((int )p->dds_flags);
#line 2991
  ddsf = (enum dds_flags )tmp___7;
#line 2992
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2992
  if (tmp___8 != 0) {
#line 2993
    dd = drbd_determine_dev_size(mdev, ddsf);
#line 2994
    put_ldev(mdev);
#line 2995
    if ((int )dd == -1) {
#line 2996
      return (0);
    } else {

    }
#line 2997
    drbd_md_sync(mdev);
  } else {
#line 3000
    drbd_set_my_capacity(mdev, p_size);
  }
#line 3003
  tmp___9 = __fswab32(p->max_bio_size);
#line 3003
  mdev->peer_max_bio_size = (int )tmp___9;
#line 3004
  drbd_reconsider_max_bio_size(mdev);
#line 3006
  tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3006
  if (tmp___11 != 0) {
#line 3007
    tmp___10 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3007
    if ((mdev->ldev)->known_size != tmp___10) {
#line 3008
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 3009
      ldsc = 1;
    } else {

    }
#line 3012
    put_ldev(mdev);
  } else {

  }
#line 3015
  if ((int )mdev->state.ldv_38894.conn > 9) {
#line 3016
    tmp___12 = __fswab64(p->c_size);
#line 3016
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3016
    if (tmp___12 != (unsigned long long )tmp___13 || ldsc != 0) {
#line 3020
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3022
    tmp___14 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3022
    if (tmp___14 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 160U)) {
#line 3024
      if ((int )mdev->state.ldv_38894.pdsk > 3 && (int )mdev->state.ldv_38894.disk > 3) {
#line 3026
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3027
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3029
          resync_after_online_grow(mdev);
        }
      } else {
#line 3031
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3035
  return (1);
}
}
#line 3038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int updated_uuids ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3040
  p = & mdev->data.rbuf.uuids;
#line 3042
  updated_uuids = 0;
#line 3044
  tmp = kmalloc(48UL, 16U);
#line 3044
  p_uuid = (u64 *)tmp;
#line 3046
  i = 0;
#line 3046
  goto ldv_50393;
  ldv_50392: 
#line 3047
  tmp___0 = __fswab64(p->uuid[i]);
#line 3047
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3046
  i = i + 1;
  ldv_50393: ;
#line 3046
  if (i <= 5) {
#line 3047
    goto ldv_50392;
  } else {

  }
#line 3049
  kfree((void const   *)mdev->p_uuid);
#line 3050
  mdev->p_uuid = p_uuid;
#line 3052
  if ((((int )mdev->state.ldv_38894.conn <= 9 && (int )mdev->state.ldv_38894.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3056
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3058
    val.i = 0U;
#line 3058
    val.ldv_38894.conn = 1U;
#line 3058
    mask.i = 0U;
#line 3058
    mask.ldv_38894.conn = 31U;
#line 3058
    drbd_force_state(mdev, mask, val);
#line 3059
    return (0);
  } else {

  }
#line 3062
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3062
  if (tmp___1 != 0) {
#line 3063
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3068
    if (skip_initial_sync != 0) {
#line 3069
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3070
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids",
                     BM_LOCKED_TEST_ALLOWED);
#line 3073
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3074
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3075
      __ns.i = mdev->state.i;
#line 3075
      __ns.ldv_38894.disk = 8U;
#line 3075
      __ns.ldv_38894.pdsk = 8U;
#line 3075
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3077
      drbd_md_sync(mdev);
#line 3078
      updated_uuids = 1;
    } else {

    }
#line 3080
    put_ldev(mdev);
  } else
#line 3081
  if ((int )mdev->state.ldv_38894.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3085
    updated_uuids = drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3092
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3092
  if (tmp___2 == 0) {
#line 3092
    goto ldv_50402;
  } else {

  }
#line 3092
  tmp___3 = get_current();
#line 3092
  __wait.flags = 0U;
#line 3092
  __wait.private = (void *)tmp___3;
#line 3092
  __wait.func = & autoremove_wake_function;
#line 3092
  __wait.task_list.next = & __wait.task_list;
#line 3092
  __wait.task_list.prev = & __wait.task_list;
  ldv_50405: 
#line 3092
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3092
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3092
  if (tmp___4 == 0) {
#line 3092
    goto ldv_50404;
  } else {

  }
#line 3092
  schedule();
#line 3092
  goto ldv_50405;
  ldv_50404: 
#line 3092
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50402: ;
#line 3093
  if ((int )mdev->state.ldv_38894.conn > 9 && (int )mdev->state.ldv_38894.disk <= 3) {
#line 3094
    tmp___5 = drbd_set_ed_uuid(mdev, *p_uuid);
#line 3094
    updated_uuids = tmp___5 | updated_uuids;
  } else {

  }
#line 3096
  if (updated_uuids != 0) {
#line 3097
    drbd_print_uuids(mdev, "receiver updated UUIDs to");
  } else {

  }
#line 3099
  return (1);
}
}
#line 3106 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3110
  c_tab[0] = 0;
#line 3110
  c_tab[1] = C_TEAR_DOWN;
#line 3110
  c_tab[2] = 0;
#line 3110
  c_tab[3] = 0;
#line 3110
  c_tab[4] = 0;
#line 3110
  c_tab[5] = 0;
#line 3110
  c_tab[6] = 0;
#line 3110
  c_tab[7] = 0;
#line 3110
  c_tab[8] = 0;
#line 3110
  c_tab[9] = 0;
#line 3110
  c_tab[10] = C_CONNECTED;
#line 3110
  c_tab[11] = C_STARTING_SYNC_T;
#line 3110
  c_tab[12] = C_STARTING_SYNC_S;
#line 3110
  c_tab[13] = 0;
#line 3110
  c_tab[14] = 0;
#line 3110
  c_tab[15] = 0;
#line 3110
  c_tab[16] = 0;
#line 3110
  c_tab[17] = 0;
#line 3110
  c_tab[18] = C_VERIFY_T;
#line 3110
  c_tab[19] = 0;
#line 3110
  c_tab[20] = 0;
#line 3110
  c_tab[21] = 0;
#line 3110
  c_tab[22] = 0;
#line 3110
  c_tab[23] = 0;
#line 3110
  c_tab[24] = 0;
#line 3110
  c_tab[25] = 0;
#line 3110
  c_tab[26] = 0;
#line 3110
  c_tab[27] = 0;
#line 3110
  c_tab[28] = 0;
#line 3110
  c_tab[29] = 0;
#line 3110
  c_tab[30] = 0;
#line 3110
  c_tab[31] = C_MASK;
#line 3120
  ms.i = ps.i;
#line 3122
  ms.ldv_38894.conn = (unsigned char )c_tab[(int )ps.ldv_38894.conn];
#line 3123
  ms.ldv_38894.peer = ps.ldv_38894.role;
#line 3124
  ms.ldv_38894.role = ps.ldv_38894.peer;
#line 3125
  ms.ldv_38894.pdsk = ps.ldv_38894.disk;
#line 3126
  ms.ldv_38894.disk = ps.ldv_38894.pdsk;
#line 3127
  ms.ldv_38894.peer_isp = (unsigned char )((int )ps.ldv_38894.aftr_isp | (int )ps.ldv_38894.user_isp);
#line 3129
  return (ms);
}
}
#line 3132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_state_rv rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3134
  p = & mdev->data.rbuf.req_state;
#line 3138
  tmp = __fswab32(p->mask);
#line 3138
  mask.i = tmp;
#line 3139
  tmp___0 = __fswab32(p->val);
#line 3139
  val.i = tmp___0;
#line 3141
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3141
  if (tmp___1 != 0) {
#line 3141
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3141
    if (tmp___2 != 0) {
#line 3143
      drbd_send_sr_reply(mdev, SS_CONCURRENT_ST_CHG);
#line 3144
      return (1);
    } else {

    }
  } else {

  }
#line 3147
  mask = convert_state(mask);
#line 3148
  val = convert_state(val);
#line 3150
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3152
  drbd_send_sr_reply(mdev, rv);
#line 3153
  drbd_md_sync(mdev);
#line 3155
  return (1);
}
}
#line 3158 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  enum drbd_state_rv tmp___8 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3160
  p = & mdev->data.rbuf.state;
#line 3166
  tmp = __fswab32(p->state);
#line 3166
  peer_state.i = tmp;
#line 3168
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_38894.disk;
#line 3169
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3170
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3171
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3171
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3174
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3176
  ns = mdev->state;
#line 3176
  os = ns;
#line 3177
  spin_unlock_irq(& mdev->req_lock);
#line 3181
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_38894.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3189
    if ((int )peer_state.ldv_38894.conn > 10 && (int )peer_state.ldv_38894.conn <= 15) {
#line 3191
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3196
    if ((int )os.ldv_38894.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3198
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3198
      if (tmp___1 <= mdev->rs_failed) {
#line 3199
        drbd_resync_finished(mdev);
      } else {

      }
#line 3200
      return (1);
    } else {

    }
  } else {

  }
#line 3209
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_38894.conn > 16) {
#line 3211
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3213
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3214
    ns.ldv_38894.conn = 10U;
  } else {

  }
#line 3216
  if ((unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 352U) {
#line 3217
    ns.ldv_38894.conn = 23U;
  } else {

  }
#line 3219
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_38894.disk > 2) {
#line 3219
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3219
    if (tmp___5 != 0) {
#line 3224
      cr = (int )os.ldv_38894.conn <= 9;
#line 3227
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3232
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3232
      cr = tmp___2 | cr;
#line 3235
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_38894.conn > 10 && (int )peer_state.ldv_38894.conn <= 14)) | cr;
#line 3239
      if (cr != 0) {
#line 3240
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_38894.role,
                                      real_peer_disk);
#line 3240
        ns.ldv_38894.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3242
      put_ldev(mdev);
#line 3243
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3244
        ns.ldv_38894.conn = 10U;
#line 3245
        if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 6U) {
#line 3246
          val.i = 0U;
#line 3246
          val.ldv_38894.disk = 2U;
#line 3246
          mask.i = 0U;
#line 3246
          mask.ldv_38894.disk = 15U;
#line 3246
          drbd_force_state(mdev, mask, val);
        } else
#line 3247
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3248
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3249
          peer_state.ldv_38894.disk = 0U;
#line 3250
          real_peer_disk = D_DISKLESS;
        } else {
#line 3252
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3252
          if (tmp___4 != 0) {
#line 3253
            return (0);
          } else {

          }
#line 3254
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3254
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3254);
          } else {

          }
#line 3255
          val___0.i = 0U;
#line 3255
          val___0.ldv_38894.conn = 1U;
#line 3255
          mask___0.i = 0U;
#line 3255
          mask___0.ldv_38894.conn = 31U;
#line 3255
          drbd_force_state(mdev, mask___0, val___0);
#line 3256
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3261
  spin_lock_irq(& mdev->req_lock);
#line 3262
  if (mdev->state.i != os.i) {
#line 3263
    goto retry;
  } else {

  }
#line 3264
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3265
  ns.ldv_38894.peer = peer_state.ldv_38894.role;
#line 3266
  ns.ldv_38894.pdsk = (unsigned char )real_peer_disk;
#line 3267
  ns.ldv_38894.peer_isp = (unsigned char )((int )peer_state.ldv_38894.aftr_isp | (int )peer_state.ldv_38894.user_isp);
#line 3268
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3269
    ns.ldv_38894.disk = mdev->new_state_tmp.ldv_38894.disk;
  } else {

  }
#line 3270
  cs_flags = (enum chg_state_flags )(((int )os.ldv_38894.conn > 9 || (int )ns.ldv_38894.conn <= 9) + 2);
#line 3271
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3271
    tmp___6 = is_susp(ns);
#line 3271
    if (tmp___6 != 0) {
#line 3271
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3271
        if ((int )os.ldv_38894.conn <= 9) {
#line 3271
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3271
          if (tmp___7 != 0) {
#line 3275
            spin_unlock_irq(& mdev->req_lock);
#line 3276
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3277
            tl_clear(mdev);
#line 3278
            drbd_uuid_new_current(mdev);
#line 3279
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3280
            val___1.i = 0U;
#line 3280
            val___1.ldv_38894.conn = 6U;
#line 3280
            val___1.ldv_38894.susp = 0U;
#line 3280
            mask___1.i = 0U;
#line 3280
            mask___1.ldv_38894.conn = 31U;
#line 3280
            mask___1.ldv_38894.susp = 1U;
#line 3280
            drbd_force_state(mdev, mask___1, val___1);
#line 3281
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3283
  tmp___8 = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3283
  rv = (int )tmp___8;
#line 3284
  ns = mdev->state;
#line 3285
  spin_unlock_irq(& mdev->req_lock);
#line 3287
  if (rv <= 0) {
#line 3288
    val___2.i = 0U;
#line 3288
    val___2.ldv_38894.conn = 1U;
#line 3288
    mask___2.i = 0U;
#line 3288
    mask___2.ldv_38894.conn = 31U;
#line 3288
    drbd_force_state(mdev, mask___2, val___2);
#line 3289
    return (0);
  } else {

  }
#line 3292
  if ((int )os.ldv_38894.conn > 9) {
#line 3293
    if (((int )ns.ldv_38894.conn > 10 && (int )peer_state.ldv_38894.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3298
      drbd_send_uuids(mdev);
#line 3299
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3303
  (mdev->net_conf)->want_lose = 0U;
#line 3305
  drbd_md_sync(mdev);
#line 3307
  return (1);
}
}
#line 3310 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3312
  p = & mdev->data.rbuf.rs_uuid;
#line 3314
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38894.conn <= 9) || (int )mdev->state.ldv_38894.disk <= 2) {
#line 3314
    goto ldv_50456;
  } else {

  }
#line 3314
  tmp = get_current();
#line 3314
  __wait.flags = 0U;
#line 3314
  __wait.private = (void *)tmp;
#line 3314
  __wait.func = & autoremove_wake_function;
#line 3314
  __wait.task_list.next = & __wait.task_list;
#line 3314
  __wait.task_list.prev = & __wait.task_list;
  ldv_50459: 
#line 3314
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3314
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 240U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 368U) || (int )mdev->state.ldv_38894.conn <= 9) || (int )mdev->state.ldv_38894.disk <= 2) {
#line 3314
    goto ldv_50458;
  } else {

  }
#line 3314
  schedule();
#line 3314
  goto ldv_50459;
  ldv_50458: 
#line 3314
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_50456: 
#line 3324
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3324
  if (tmp___1 != 0) {
#line 3325
    tmp___0 = __fswab64(p->uuid);
#line 3325
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3326
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3328
    drbd_print_uuids(mdev, "updated sync uuid");
#line 3329
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3331
    put_ldev(mdev);
  } else {
#line 3333
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3335
  return (1);
}
}
#line 3345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int err ;

  {
#line 3348
  __min1 = 511UL;
#line 3348
  __min2 = c->bm_words - c->word_offset;
#line 3348
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3349
  want = num_words * 8U;
#line 3352
  if (want != data_size) {
#line 3353
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3354
    return (-5);
  } else {

  }
#line 3356
  if (want == 0U) {
#line 3357
    return (0);
  } else {

  }
#line 3358
  err = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3359
  if ((unsigned int )err != want) {
#line 3360
    if (err >= 0) {
#line 3361
      err = -5;
    } else {

    }
#line 3362
    return (err);
  } else {

  }
#line 3365
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3367
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3368
  c->bit_offset = c->word_offset * 64UL;
#line 3369
  if (c->bit_offset > c->bm_bits) {
#line 3370
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3372
  return (1);
}
}
#line 3382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3390
  s = c->bit_offset;
#line 3392
  tmp___0 = __fswab16((int )p->head.length);
#line 3392
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3393
  tmp___1 = DCBP_get_start(p);
#line 3393
  toggle = tmp___1;
#line 3397
  tmp___2 = DCBP_get_pad_bits(p);
#line 3397
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3399
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3400
  if (bits < 0) {
#line 3401
    return (-5);
  } else {

  }
#line 3403
  have = bits;
#line 3403
  goto ldv_50489;
  ldv_50488: 
#line 3404
  bits = vli_decode_bits(& rl, look_ahead);
#line 3405
  if (bits <= 0) {
#line 3406
    return (-5);
  } else {

  }
#line 3408
  if (toggle != 0) {
#line 3409
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3410
    if (c->bm_bits <= e) {
#line 3411
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3412
      return (-5);
    } else {

    }
#line 3414
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3417
  if (have < bits) {
#line 3418
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3422
    return (-5);
  } else {

  }
#line 3424
  look_ahead = look_ahead >> bits;
#line 3425
  have = have - bits;
#line 3427
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3428
  if (bits < 0) {
#line 3429
    return (-5);
  } else {

  }
#line 3430
  look_ahead = (tmp << have) | look_ahead;
#line 3431
  have = have + bits;
#line 3403
  s = (unsigned long )((unsigned long long )s + rl);
#line 3403
  toggle = toggle == 0;
  ldv_50489: ;
#line 3403
  if (have > 0) {
#line 3404
    goto ldv_50488;
  } else {

  }
#line 3434
  c->bit_offset = s;
#line 3435
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3437
  return (c->bm_bits != s);
}
}
#line 3447 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  int tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3451
  tmp___0 = DCBP_get_code(p);
#line 3451
  if ((unsigned int )tmp___0 == 2U) {
#line 3452
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3452
    return (tmp);
  } else {

  }
#line 3458
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3459
  val.i = 0U;
#line 3459
  val.ldv_38894.conn = 6U;
#line 3459
  mask.i = 0U;
#line 3459
  mask.ldv_38894.conn = 31U;
#line 3459
  drbd_force_state(mdev, mask, val);
#line 3460
  return (-5);
}
}
#line 3463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3467
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3470
  total = c->bytes[0] + c->bytes[1];
#line 3474
  if (total == 0U) {
#line 3475
    return;
  } else {

  }
#line 3478
  if (total >= plain) {
#line 3479
    return;
  } else {

  }
#line 3482
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3485
  if (r > 1000U) {
#line 3486
    r = 1000U;
  } else {

  }
#line 3488
  r = 1000U - r;
#line 3489
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3490
  return;
}
}
#line 3505 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  int err ;
  int ok ;
  struct p_header80 *h ;
  unsigned long tmp ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_state_rv rv ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___5 ;

  {
#line 3510
  ok = 0;
#line 3511
  h = & mdev->data.rbuf.header.h80;
#line 3513
  drbd_bm_lock(mdev, (char *)"receive bitmap", BM_DONT_CLEAR);
#line 3519
  tmp = __get_free_pages(16U, 0U);
#line 3519
  buffer = (void *)tmp;
#line 3520
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3521
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3522
    goto out;
  } else {

  }
#line 3525
  tmp___0 = drbd_bm_bits(mdev);
#line 3525
  tmp___1 = drbd_bm_words(mdev);
#line 3525
  __constr_expr_0.bm_bits = tmp___0;
#line 3525
  __constr_expr_0.bm_words = tmp___1;
#line 3525
  __constr_expr_0.bit_offset = 0UL;
#line 3525
  __constr_expr_0.word_offset = 0UL;
#line 3525
  __constr_expr_0.packets[0] = 0U;
#line 3525
  __constr_expr_0.packets[1] = 0U;
#line 3525
  __constr_expr_0.bytes[0] = 0U;
#line 3525
  __constr_expr_0.bytes[1] = 0U;
#line 3525
  c = __constr_expr_0;
  ldv_50526: ;
#line 3531
  if ((unsigned int )cmd == 4U) {
#line 3532
    err = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3533
  if ((unsigned int )cmd == 36U) {
#line 3538
    if (data_size > 4088U) {
#line 3539
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3540
      goto out;
    } else {

    }
#line 3543
    p = (struct p_compressed_bm *)buffer;
#line 3544
    __len = 8UL;
#line 3544
    if (__len > 63UL) {
#line 3544
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3544
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3545
    tmp___2 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3545
    if ((unsigned int )tmp___2 != data_size) {
#line 3546
      goto out;
    } else {

    }
#line 3547
    if (data_size <= 1U) {
#line 3548
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3549
      goto out;
    } else {

    }
#line 3551
    err = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3553
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3554
    goto out;
  }
#line 3557
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3558
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3560
  if (err <= 0) {
#line 3561
    if (err < 0) {
#line 3562
      goto out;
    } else {

    }
#line 3563
    goto ldv_50525;
  } else {

  }
#line 3565
  tmp___3 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3565
  if (tmp___3 == 0) {
#line 3566
    goto out;
  } else {

  }
#line 3567
  goto ldv_50526;
  ldv_50525: 
#line 3569
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3571
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 224U) {
#line 3574
    tmp___4 = drbd_send_bitmap(mdev);
#line 3574
    ok = tmp___4 == 0;
#line 3575
    if (ok == 0) {
#line 3576
      goto out;
    } else {

    }
#line 3578
    val.i = 0U;
#line 3578
    val.ldv_38894.conn = 15U;
#line 3578
    mask.i = 0U;
#line 3578
    mask.ldv_38894.conn = 31U;
#line 3578
    rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3579
    if ((int )rv != 1) {
#line 3579
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3579);
    } else {

    }
  } else
#line 3580
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 208U) {
#line 3583
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38894.conn);
#line 3583
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___5);
  } else {

  }
#line 3587
  ok = 1;
  out: 
#line 3589
  drbd_bm_unlock(mdev);
#line 3590
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 3591
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3592
  free_pages((unsigned long )buffer, 0U);
#line 3593
  return (ok);
}
}
#line 3596 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3602
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3605
  size = (int )data_size;
#line 3606
  goto ldv_50549;
  ldv_50548: 
#line 3607
  __min1 = size;
#line 3607
  __min2 = 128;
#line 3607
  want = __min1 < __min2 ? __min1 : __min2;
#line 3608
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3609
  _b = r <= 0;
#line 3609
  if (_b != 0) {
#line 3609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3609);
  } else {

  }
#line 3609
  if (_b != 0) {
#line 3609
    goto ldv_50547;
  } else {

  }
#line 3610
  size = size - r;
  ldv_50549: ;
#line 3606
  if (size > 0) {
#line 3607
    goto ldv_50548;
  } else {

  }
  ldv_50547: ;
#line 3612
  return (size == 0);
}
}
#line 3615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3619
  drbd_tcp_quickack(mdev->data.socket);
#line 3621
  return (1);
}
}
#line 3624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_out_of_sync(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_block_desc *p ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;

  {
#line 3626
  p = & mdev->data.rbuf.block_desc;
#line 3628
  switch ((int )mdev->state.ldv_38894.conn) {
  case 15: ;
  case 14: ;
  case 23: ;
#line 3632
  goto ldv_50564;
  default: 
#line 3634
  tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_38894.conn);
#line 3634
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected: WFSyncUUID|WFBitMapT|Behind\n",
          tmp);
  }
  ldv_50564: 
#line 3638
  tmp___0 = __fswab32(p->blksize);
#line 3638
  tmp___1 = __fswab64(p->sector);
#line 3638
  __drbd_set_out_of_sync(mdev, (sector_t )tmp___1, (int )tmp___0, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                         3638U);
#line 3640
  return (1);
}
}
#line 3651 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[43U]  = 
#line 3651
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 24UL, & receive_out_of_sync}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}};
#line 3686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3688
  header = & mdev->data.rbuf.header;
#line 3694
  goto ldv_50585;
  ldv_50584: 
#line 3695
  drbd_thread_current_set_cpu(mdev);
#line 3696
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3696
  if (tmp == 0) {
#line 3697
    goto err_out;
  } else {

  }
#line 3699
  tmp___0 = __builtin_expect((unsigned int )cmd > 41U, 0L);
#line 3699
  if (tmp___0 != 0L) {
#line 3700
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3701
    goto err_out;
  } else {
#line 3699
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3699
    if (tmp___1 != 0L) {
#line 3700
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3701
      goto err_out;
    } else {

    }
  }
#line 3704
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3705
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3706
    tmp___2 = cmdname(cmd);
#line 3706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___2, packet_size);
#line 3707
    goto err_out;
  } else {

  }
#line 3710
  if (shs != 0UL) {
#line 3711
    rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3712
    tmp___5 = __builtin_expect((size_t )rv != shs, 0L);
#line 3712
    if (tmp___5 != 0L) {
#line 3713
      tmp___3 = get_current();
#line 3713
      tmp___4 = signal_pending(tmp___3);
#line 3713
      if (tmp___4 == 0) {
#line 3714
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
                 rv);
      } else {

      }
#line 3715
      goto err_out;
    } else {

    }
  } else {

  }
#line 3719
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3721
  tmp___7 = __builtin_expect(rv == 0, 0L);
#line 3721
  if (tmp___7 != 0L) {
#line 3722
    tmp___6 = cmdname(cmd);
#line 3722
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___6, packet_size);
#line 3724
    goto err_out;
  } else {

  }
  ldv_50585: 
#line 3694
  tmp___8 = get_t_state(& mdev->receiver);
#line 3694
  if ((unsigned int )tmp___8 == 1U) {
#line 3695
    goto ldv_50584;
  } else {

  }

#line 3728
  if (0) {
    err_out: 
#line 3730
    val.i = 0U;
#line 3730
    val.ldv_38894.conn = 6U;
#line 3730
    mask.i = 0U;
#line 3730
    mask.ldv_38894.conn = 31U;
#line 3730
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3734
  drbd_md_sync(mdev);
#line 3735
  return;
}
}
#line 3737 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3741
  barr.w.cb = & w_prev_work_done;
#line 3742
  init_completion(& barr.done);
#line 3743
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3744
  wait_for_completion(& barr.done);
#line 3745
  return;
}
}
#line 3747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3751
  spin_lock_irq(& mdev->req_lock);
#line 3753
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 3754
    spin_unlock_irq(& mdev->req_lock);
#line 3755
    return;
  } else {

  }
#line 3758
  h = mdev->ee_hash;
#line 3758
  goto ldv_50600;
  ldv_50599: ;
#line 3759
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3760
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3758
  h = h + 1;
  ldv_50600: ;
#line 3758
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3759
    goto ldv_50599;
  } else {

  }
#line 3762
  kfree((void const   *)mdev->ee_hash);
#line 3763
  mdev->ee_hash = 0;
#line 3764
  mdev->ee_hash_s = 0U;
#line 3767
  h = mdev->tl_hash;
#line 3767
  goto ldv_50603;
  ldv_50602: ;
#line 3768
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3769
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3767
  h = h + 1;
  ldv_50603: ;
#line 3767
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3768
    goto ldv_50602;
  } else {

  }
#line 3771
  kfree((void const   *)mdev->tl_hash);
#line 3772
  mdev->tl_hash = 0;
#line 3773
  mdev->tl_hash_s = 0U;
#line 3774
  spin_unlock_irq(& mdev->req_lock);
#line 3775
  return;
}
}
#line 3777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  int tmp ;
  int tmp___0 ;
  enum drbd_state_rv tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 3781
  rv = 0;
#line 3784
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) {
#line 3785
    return;
  } else {

  }
#line 3788
  drbd_thread_stop(& mdev->asender);
#line 3789
  drbd_free_sock(mdev);
#line 3792
  spin_lock_irq(& mdev->req_lock);
#line 3793
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3794
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3795
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3796
  spin_unlock_irq(& mdev->req_lock);
#line 3808
  drbd_rs_cancel_all(mdev);
#line 3809
  mdev->rs_total = 0UL;
#line 3810
  mdev->rs_failed = 0UL;
#line 3811
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3812
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3814
  del_timer(& mdev->request_timer);
#line 3817
  del_timer_sync(& mdev->resync_timer);
#line 3818
  resync_timer_fn((unsigned long )mdev);
#line 3823
  drbd_flush_workqueue(mdev);
#line 3827
  drbd_process_done_ee(mdev);
#line 3829
  kfree((void const   *)mdev->p_uuid);
#line 3830
  mdev->p_uuid = 0;
#line 3832
  tmp = is_susp(mdev->state);
#line 3832
  if (tmp == 0) {
#line 3833
    tl_clear(mdev);
  } else {

  }
#line 3835
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3837
  drbd_md_sync(mdev);
#line 3839
  fp = FP_DONT_CARE;
#line 3840
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3840
  if (tmp___0 != 0) {
#line 3841
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3842
    put_ldev(mdev);
  } else {

  }
#line 3845
  if (((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_38894.pdsk > 5) {
#line 3846
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3848
  spin_lock_irq(& mdev->req_lock);
#line 3849
  os = mdev->state;
#line 3850
  if ((int )os.ldv_38894.conn > 1) {
#line 3852
    ns = os;
#line 3853
    ns.ldv_38894.conn = 2U;
#line 3854
    tmp___1 = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 3854
    rv = (int )tmp___1;
  } else {

  }
#line 3856
  spin_unlock_irq(& mdev->req_lock);
#line 3858
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3859
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3859
    if (tmp___2 == 0) {
#line 3859
      goto ldv_50613;
    } else {

    }
#line 3859
    tmp___3 = get_current();
#line 3859
    __wait.flags = 0U;
#line 3859
    __wait.private = (void *)tmp___3;
#line 3859
    __wait.func = & autoremove_wake_function;
#line 3859
    __wait.task_list.next = & __wait.task_list;
#line 3859
    __wait.task_list.prev = & __wait.task_list;
    ldv_50616: 
#line 3859
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3859
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3859
    if (tmp___4 == 0) {
#line 3859
      goto ldv_50615;
    } else {

    }
#line 3859
    schedule();
#line 3859
    goto ldv_50616;
    ldv_50615: 
#line 3859
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_50613: 
#line 3861
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3862
    mdev->cram_hmac_tfm = 0;
#line 3864
    kfree((void const   *)mdev->net_conf);
#line 3865
    mdev->net_conf = 0;
#line 3866
    val.i = 0U;
#line 3866
    val.ldv_38894.conn = 0U;
#line 3866
    mask.i = 0U;
#line 3866
    mask.ldv_38894.conn = 31U;
#line 3866
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3871
  tmp___5 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3871
  if (tmp___5 == 0) {
#line 3871
    goto ldv_50621;
  } else {

  }
#line 3871
  tmp___6 = get_current();
#line 3871
  __wait___0.flags = 0U;
#line 3871
  __wait___0.private = (void *)tmp___6;
#line 3871
  __wait___0.func = & autoremove_wake_function;
#line 3871
  __wait___0.task_list.next = & __wait___0.task_list;
#line 3871
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_50624: 
#line 3871
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3871
  tmp___7 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3871
  if (tmp___7 == 0) {
#line 3871
    goto ldv_50623;
  } else {

  }
#line 3871
  schedule();
#line 3871
  goto ldv_50624;
  ldv_50623: 
#line 3871
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_50621: 
#line 3880
  tmp___8 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3880
  i = (unsigned int )tmp___8;
#line 3881
  if (i != 0U) {
#line 3882
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3883
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3883
  i = (unsigned int )tmp___9;
#line 3884
  if (i != 0U) {
#line 3885
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3886
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3886
  i = (unsigned int )tmp___10;
#line 3887
  if (i != 0U) {
#line 3888
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3890
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3890
  if (tmp___11 == 0) {
#line 3890
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3890);
  } else {

  }
#line 3891
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3891
  if (tmp___12 == 0) {
#line 3891
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3891);
  } else {

  }
#line 3892
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3892
  if (tmp___13 == 0) {
#line 3892
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3892);
  } else {

  }
#line 3893
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3893
  if (tmp___14 == 0) {
#line 3893
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3893);
  } else {

  }
#line 3896
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3897
  tmp___15 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3897
  if (tmp___15 == 0) {
#line 3897
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3897);
  } else {

  }
#line 3898
  return;
}
}
#line 3909 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3912
  p = & mdev->data.sbuf.handshake;
#line 3915
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3915
  if (tmp != 0) {
#line 3916
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3917
    return (0);
  } else {

  }
#line 3920
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3921
    mutex_unlock(& mdev->data.mutex);
#line 3922
    return (0);
  } else {

  }
#line 3925
  memset((void *)p, 0, 80UL);
#line 3926
  p->protocol_min = 1442840576U;
#line 3927
  p->protocol_max = 1610612736U;
#line 3928
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3930
  mutex_unlock(& mdev->data.mutex);
#line 3931
  return (ok);
}
}
#line 3941 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int __min1 ;
  int __min2 ;

  {
#line 3944
  p = & mdev->data.rbuf.handshake;
#line 3945
  expect = 72;
#line 3950
  rv = drbd_send_handshake(mdev);
#line 3951
  if (rv == 0) {
#line 3952
    return (0);
  } else {

  }
#line 3954
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 3955
  if (rv == 0) {
#line 3956
    return (0);
  } else {

  }
#line 3958
  if ((unsigned int )cmd != 65534U) {
#line 3959
    tmp = cmdname(cmd);
#line 3959
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 3961
    return (-1);
  } else {

  }
#line 3964
  if ((unsigned int )expect != length) {
#line 3965
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 3967
    return (-1);
  } else {

  }
#line 3970
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3972
  if (rv != expect) {
#line 3973
    tmp___0 = get_current();
#line 3973
    tmp___1 = signal_pending(tmp___0);
#line 3973
    if (tmp___1 == 0) {
#line 3974
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
               rv);
    } else {

    }
#line 3975
    return (0);
  } else {

  }
#line 3978
  tmp___2 = __fswab32(p->protocol_min);
#line 3978
  p->protocol_min = tmp___2;
#line 3979
  tmp___3 = __fswab32(p->protocol_max);
#line 3979
  p->protocol_max = tmp___3;
#line 3980
  if (p->protocol_max == 0U) {
#line 3981
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3983
  if (p->protocol_min > 96U || p->protocol_max <= 85U) {
#line 3985
    goto incompat;
  } else {

  }
#line 3987
  __min1 = 96;
#line 3987
  __min2 = (int )p->protocol_max;
#line 3987
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3989
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 3992
  return (1);
  incompat: 
#line 3995
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 96, p->protocol_min, p->protocol_max);
#line 3999
  return (-1);
}
}
#line 4018 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;

  {
#line 4022
  response = 0;
#line 4023
  right_response = 0;
#line 4024
  peers_ch = 0;
#line 4025
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 4025
  key_len = (unsigned int )tmp;
#line 4032
  desc.tfm = mdev->cram_hmac_tfm;
#line 4033
  desc.flags = 0U;
#line 4035
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 4037
  if (rv != 0) {
#line 4038
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 4039
    rv = -1;
#line 4040
    goto fail;
  } else {

  }
#line 4043
  get_random_bytes((void *)(& my_challenge), 64);
#line 4045
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 4046
  if (rv == 0) {
#line 4047
    goto fail;
  } else {

  }
#line 4049
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4050
  if (rv == 0) {
#line 4051
    goto fail;
  } else {

  }
#line 4053
  if ((unsigned int )cmd != 16U) {
#line 4054
    tmp___0 = cmdname(cmd);
#line 4054
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 4056
    rv = 0;
#line 4057
    goto fail;
  } else {

  }
#line 4060
  if (length > 128U) {
#line 4061
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 4062
    rv = -1;
#line 4063
    goto fail;
  } else {

  }
#line 4066
  tmp___1 = kmalloc((size_t )length, 16U);
#line 4066
  peers_ch = (char *)tmp___1;
#line 4067
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4068
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4069
    rv = -1;
#line 4070
    goto fail;
  } else {

  }
#line 4073
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4075
  if ((unsigned int )rv != length) {
#line 4076
    tmp___2 = get_current();
#line 4076
    tmp___3 = signal_pending(tmp___2);
#line 4076
    if (tmp___3 == 0) {
#line 4077
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
               rv);
    } else {

    }
#line 4078
    rv = 0;
#line 4079
    goto fail;
  } else {

  }
#line 4082
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4083
  tmp___4 = kmalloc((size_t )resp_size, 16U);
#line 4083
  response = (char *)tmp___4;
#line 4084
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4085
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4086
    rv = -1;
#line 4087
    goto fail;
  } else {

  }
#line 4090
  sg_init_table(& sg, 1U);
#line 4091
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4093
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4094
  if (rv != 0) {
#line 4095
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4096
    rv = -1;
#line 4097
    goto fail;
  } else {

  }
#line 4100
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4101
  if (rv == 0) {
#line 4102
    goto fail;
  } else {

  }
#line 4104
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4105
  if (rv == 0) {
#line 4106
    goto fail;
  } else {

  }
#line 4108
  if ((unsigned int )cmd != 17U) {
#line 4109
    tmp___5 = cmdname(cmd);
#line 4109
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___5, (unsigned int )cmd);
#line 4111
    rv = 0;
#line 4112
    goto fail;
  } else {

  }
#line 4115
  if (length != resp_size) {
#line 4116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4117
    rv = 0;
#line 4118
    goto fail;
  } else {

  }
#line 4121
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4123
  if ((unsigned int )rv != resp_size) {
#line 4124
    tmp___6 = get_current();
#line 4124
    tmp___7 = signal_pending(tmp___6);
#line 4124
    if (tmp___7 == 0) {
#line 4125
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
               rv);
    } else {

    }
#line 4126
    rv = 0;
#line 4127
    goto fail;
  } else {

  }
#line 4130
  tmp___8 = kmalloc((size_t )resp_size, 16U);
#line 4130
  right_response = (char *)tmp___8;
#line 4131
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4133
    rv = -1;
#line 4134
    goto fail;
  } else {

  }
#line 4137
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4139
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4140
  if (rv != 0) {
#line 4141
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4142
    rv = -1;
#line 4143
    goto fail;
  } else {

  }
#line 4146
  tmp___9 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4146
  rv = tmp___9 == 0;
#line 4148
  if (rv != 0) {
#line 4149
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4152
    rv = -1;
  }
  fail: 
#line 4155
  kfree((void const   *)peers_ch);
#line 4156
  kfree((void const   *)response);
#line 4157
  kfree((void const   *)right_response);
#line 4159
  return (rv);
}
}
#line 4163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___1 ;

  {
#line 4165
  mdev = thi->mdev;
#line 4166
  tmp = mdev_to_minor(mdev);
#line 4166
  minor = tmp;
#line 4169
  tmp___0 = get_current();
#line 4169
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4171
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_50667: 
#line 4174
  h = drbd_connect(mdev);
#line 4175
  if (h == 0) {
#line 4176
    drbd_disconnect(mdev);
#line 4177
    schedule_timeout_interruptible(250L);
  } else {

  }
#line 4179
  if (h == -1) {
#line 4180
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4181
    val.i = 0U;
#line 4181
    val.ldv_38894.conn = 1U;
#line 4181
    mask.i = 0U;
#line 4181
    mask.ldv_38894.conn = 31U;
#line 4181
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4183
  if (h == 0) {
#line 4184
    goto ldv_50667;
  } else {

  }

#line 4185
  if (h > 0) {
#line 4186
    tmp___1 = get_net_conf(mdev);
#line 4186
    if (tmp___1 != 0) {
#line 4187
      drbdd(mdev);
#line 4188
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4192
  drbd_disconnect(mdev);
#line 4194
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4195
  return (0);
}
}
#line 4200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4202
  p = (struct p_req_state_reply *)h;
#line 4204
  tmp = __fswab32(p->retcode);
#line 4204
  retcode = (int )tmp;
#line 4206
  if (retcode > 0) {
#line 4207
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4209
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4210
    tmp___0 = drbd_set_st_err_str((enum drbd_state_rv )retcode);
#line 4210
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4213
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4215
  return (1);
}
}
#line 4218 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4220
  tmp = drbd_send_ping_ack(mdev);
#line 4220
  return (tmp);
}
}
#line 4224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4227
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4228
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4228
  if (tmp == 0) {
#line 4229
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4231
  return (1);
}
}
#line 4234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4236
  p = (struct p_block_ack *)h;
#line 4237
  tmp = __fswab64(p->sector);
#line 4237
  sector = (sector_t )tmp;
#line 4238
  tmp___0 = __fswab32(p->blksize);
#line 4238
  blksize = (int )tmp___0;
#line 4240
  if (mdev->agreed_pro_version <= 88) {
#line 4240
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4240);
  } else {

  }
#line 4242
  tmp___1 = __fswab32(p->seq_num);
#line 4242
  update_peer_seq(mdev, tmp___1);
#line 4244
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4244
  if (tmp___2 != 0) {
#line 4245
    drbd_rs_complete_io(mdev, sector);
#line 4246
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4246U);
#line 4248
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4249
    put_ldev(mdev);
  } else {

  }
#line 4251
  atomic_dec(& mdev->rs_pending_cnt);
#line 4251
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4251
  if (tmp___4 < 0) {
#line 4251
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4251
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4251, tmp___3);
  } else {

  }
#line 4252
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4254
  return (1);
}
}
#line 4259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4262
  tmp = tl_hash_slot(mdev, sector);
#line 4262
  slot = tmp;
#line 4266
  n = slot->first;
#line 4266
  goto ldv_50707;
  ldv_50706: ;
#line 4267
  if ((unsigned long )req == (unsigned long )id) {
#line 4268
    if (req->sector != sector) {
#line 4269
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4273
      goto ldv_50705;
    } else {

    }
#line 4275
    return (req);
  } else {

  }
#line 4266
  n = n->next;
  ldv_50707: ;
#line 4266
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4266
    __mptr = (struct hlist_node  const  *)n;
#line 4266
    req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4266
    if (1 != 0) {
#line 4267
      goto ldv_50706;
    } else {
#line 4269
      goto ldv_50705;
    }
  } else {

  }
  ldv_50705: ;
#line 4278
  return (0);
}
}
#line 4284 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4291
  spin_lock_irq(& mdev->req_lock);
#line 4292
  req = (*validator)(mdev, id, sector);
#line 4293
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4293
  if (tmp != 0L) {
#line 4294
    spin_unlock_irq(& mdev->req_lock);
#line 4296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
            func, (void *)id, (unsigned long long )sector);
#line 4298
    return (0);
  } else {

  }
#line 4300
  __req_mod(req, what, & m);
#line 4301
  spin_unlock_irq(& mdev->req_lock);
#line 4303
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4304
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4305
  return (1);
}
}
#line 4308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4310
  p = (struct p_block_ack *)h;
#line 4311
  tmp = __fswab64(p->sector);
#line 4311
  sector = (sector_t )tmp;
#line 4312
  tmp___0 = __fswab32(p->blksize);
#line 4312
  blksize = (int )tmp___0;
#line 4315
  tmp___1 = __fswab32(p->seq_num);
#line 4315
  update_peer_seq(mdev, tmp___1);
#line 4317
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4318
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4318U);
#line 4319
    atomic_dec(& mdev->rs_pending_cnt);
#line 4319
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4319
    if (tmp___3 < 0) {
#line 4319
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4319
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4319, tmp___2);
    } else {

    }
#line 4320
    return (1);
  } else {

  }
#line 4322
  tmp___4 = __fswab16((int )h->command);
#line 4322
  switch ((int )tmp___4) {
  case 23: ;
#line 4324
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4324
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4324);
  } else {

  }
#line 4325
  what = write_acked_by_peer_and_sis;
#line 4326
  goto ldv_50735;
  case 22: ;
#line 4328
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4328
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4328);
  } else {

  }
#line 4329
  what = write_acked_by_peer;
#line 4330
  goto ldv_50735;
  case 21: ;
#line 4332
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4332
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4332);
  } else {

  }
#line 4333
  what = recv_acked_by_peer;
#line 4334
  goto ldv_50735;
  case 24: ;
#line 4336
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4336
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4336);
  } else {

  }
#line 4337
  what = conflict_discarded_by_peer;
#line 4338
  goto ldv_50735;
  default: 
#line 4340
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4340);
#line 4341
  return (0);
  }
  ldv_50735: 
#line 4344
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4344
  return (tmp___5);
}
}
#line 4348 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int size ;
  __u32 tmp___0 ;
  struct drbd_request *req ;
  struct bio_and_error m ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 4350
  p = (struct p_block_ack *)h;
#line 4351
  tmp = __fswab64(p->sector);
#line 4351
  sector = (sector_t )tmp;
#line 4352
  tmp___0 = __fswab32(p->blksize);
#line 4352
  size = (int )tmp___0;
#line 4356
  tmp___1 = __fswab32(p->seq_num);
#line 4356
  update_peer_seq(mdev, tmp___1);
#line 4358
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4359
    atomic_dec(& mdev->rs_pending_cnt);
#line 4359
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4359
    if (tmp___3 < 0) {
#line 4359
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4359
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4359, tmp___2);
    } else {

    }
#line 4360
    drbd_rs_failed_io(mdev, sector, size);
#line 4361
    return (1);
  } else {

  }
#line 4364
  spin_lock_irq(& mdev->req_lock);
#line 4365
  req = _ack_id_to_req(mdev, p->block_id, sector);
#line 4366
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 4367
    spin_unlock_irq(& mdev->req_lock);
#line 4368
    if ((mdev->net_conf)->wire_protocol == 1 || (mdev->net_conf)->wire_protocol == 2) {
#line 4376
      __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                             4376U);
#line 4377
      return (1);
    } else {
#line 4379
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: failed to find req %p, sector %llus\n",
              "got_NegAck", (void *)p->block_id, (unsigned long long )sector);
#line 4381
      return (0);
    }
  } else {

  }
#line 4384
  __req_mod(req, neg_acked, & m);
#line 4385
  spin_unlock_irq(& mdev->req_lock);
#line 4387
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4388
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4389
  return (1);
}
}
#line 4392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4394
  p = (struct p_block_ack *)h;
#line 4395
  tmp = __fswab64(p->sector);
#line 4395
  sector = (sector_t )tmp;
#line 4397
  tmp___0 = __fswab32(p->seq_num);
#line 4397
  update_peer_seq(mdev, tmp___0);
#line 4398
  tmp___1 = __fswab32(p->blksize);
#line 4398
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4401
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4401
  return (tmp___2);
}
}
#line 4405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4409
  p = (struct p_block_ack *)h;
#line 4411
  tmp = __fswab64(p->sector);
#line 4411
  sector = (sector_t )tmp;
#line 4412
  tmp___0 = __fswab32(p->blksize);
#line 4412
  size = (int )tmp___0;
#line 4414
  tmp___1 = __fswab32(p->seq_num);
#line 4414
  update_peer_seq(mdev, tmp___1);
#line 4416
  atomic_dec(& mdev->rs_pending_cnt);
#line 4416
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4416
  if (tmp___3 < 0) {
#line 4416
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4416
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4416, tmp___2);
  } else {

  }
#line 4418
  tmp___5 = _get_ldev_if_state(mdev, D_FAILED);
#line 4418
  if (tmp___5 != 0) {
#line 4419
    drbd_rs_complete_io(mdev, sector);
#line 4420
    tmp___4 = __fswab16((int )h->command);
#line 4420
    switch ((int )tmp___4) {
    case 27: 
#line 4422
    drbd_rs_failed_io(mdev, sector, size);
    case 41: ;
#line 4424
    goto ldv_50773;
    default: 
#line 4426
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4426);
#line 4427
    put_ldev(mdev);
#line 4428
    return (0);
    }
    ldv_50773: 
#line 4430
    put_ldev(mdev);
  } else {

  }
#line 4433
  return (1);
}
}
#line 4436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4438
  p = (struct p_barrier_ack *)h;
#line 4440
  tmp = __fswab32(p->set_size);
#line 4440
  tl_release(mdev, p->barrier, tmp);
#line 4442
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 352U) {
#line 4442
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 4442
    if (tmp___0 == 0) {
#line 4442
      tmp___1 = test_and_set_bit(29, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 4442
      if (tmp___1 == 0) {
#line 4445
        mdev->start_resync_timer.expires = (unsigned long )jiffies + 250UL;
#line 4446
        add_timer(& mdev->start_resync_timer);
      } else {

      }
    } else {

    }
  } else {

  }
#line 4449
  return (1);
}
}
#line 4452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4454
  p = (struct p_block_ack *)h;
#line 4459
  tmp = __fswab64(p->sector);
#line 4459
  sector = (sector_t )tmp;
#line 4460
  tmp___0 = __fswab32(p->blksize);
#line 4460
  size = (int )tmp___0;
#line 4462
  tmp___1 = __fswab32(p->seq_num);
#line 4462
  update_peer_seq(mdev, tmp___1);
#line 4464
  tmp___2 = __fswab64(p->block_id);
#line 4464
  if (tmp___2 == 4712ULL) {
#line 4465
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4467
    ov_oos_print(mdev);
  }
#line 4469
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4469
  if (tmp___3 == 0) {
#line 4470
    return (1);
  } else {

  }
#line 4472
  drbd_rs_complete_io(mdev, sector);
#line 4473
  atomic_dec(& mdev->rs_pending_cnt);
#line 4473
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4473
  if (tmp___5 < 0) {
#line 4473
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4473
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4473, tmp___4);
  } else {

  }
#line 4475
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4478
  if ((mdev->ov_left & 512UL) != 0UL) {
#line 4479
    drbd_advance_rs_marks(mdev, mdev->ov_left);
  } else {

  }
#line 4481
  if (mdev->ov_left == 0UL) {
#line 4482
    tmp___6 = kmalloc(24UL, 16U);
#line 4482
    w = (struct drbd_work *)tmp___6;
#line 4483
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4484
      w->cb = & w_ov_finished;
#line 4485
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4487
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4488
      ov_oos_print(mdev);
#line 4489
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4492
  put_ldev(mdev);
#line 4493
  return (1);
}
}
#line 4496 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4498
  return (1);
}
}
#line 4506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[43U] ;

  {
#line 4508
  asender_tbl[0].pkt_size = 0UL;
#line 4508
  asender_tbl[0].process = 0;
#line 4508
  asender_tbl[1].pkt_size = 0UL;
#line 4508
  asender_tbl[1].process = 0;
#line 4508
  asender_tbl[2].pkt_size = 0UL;
#line 4508
  asender_tbl[2].process = 0;
#line 4508
  asender_tbl[3].pkt_size = 0UL;
#line 4508
  asender_tbl[3].process = 0;
#line 4508
  asender_tbl[4].pkt_size = 0UL;
#line 4508
  asender_tbl[4].process = 0;
#line 4508
  asender_tbl[5].pkt_size = 0UL;
#line 4508
  asender_tbl[5].process = 0;
#line 4508
  asender_tbl[6].pkt_size = 0UL;
#line 4508
  asender_tbl[6].process = 0;
#line 4508
  asender_tbl[7].pkt_size = 0UL;
#line 4508
  asender_tbl[7].process = 0;
#line 4508
  asender_tbl[8].pkt_size = 0UL;
#line 4508
  asender_tbl[8].process = 0;
#line 4508
  asender_tbl[9].pkt_size = 0UL;
#line 4508
  asender_tbl[9].process = 0;
#line 4508
  asender_tbl[10].pkt_size = 0UL;
#line 4508
  asender_tbl[10].process = 0;
#line 4508
  asender_tbl[11].pkt_size = 0UL;
#line 4508
  asender_tbl[11].process = 0;
#line 4508
  asender_tbl[12].pkt_size = 0UL;
#line 4508
  asender_tbl[12].process = 0;
#line 4508
  asender_tbl[13].pkt_size = 0UL;
#line 4508
  asender_tbl[13].process = 0;
#line 4508
  asender_tbl[14].pkt_size = 0UL;
#line 4508
  asender_tbl[14].process = 0;
#line 4508
  asender_tbl[15].pkt_size = 0UL;
#line 4508
  asender_tbl[15].process = 0;
#line 4508
  asender_tbl[16].pkt_size = 0UL;
#line 4508
  asender_tbl[16].process = 0;
#line 4508
  asender_tbl[17].pkt_size = 0UL;
#line 4508
  asender_tbl[17].process = 0;
#line 4508
  asender_tbl[18].pkt_size = 0UL;
#line 4508
  asender_tbl[18].process = 0;
#line 4508
  asender_tbl[19].pkt_size = 8UL;
#line 4508
  asender_tbl[19].process = & got_Ping;
#line 4508
  asender_tbl[20].pkt_size = 8UL;
#line 4508
  asender_tbl[20].process = & got_PingAck;
#line 4508
  asender_tbl[21].pkt_size = 32UL;
#line 4508
  asender_tbl[21].process = & got_BlockAck;
#line 4508
  asender_tbl[22].pkt_size = 32UL;
#line 4508
  asender_tbl[22].process = & got_BlockAck;
#line 4508
  asender_tbl[23].pkt_size = 32UL;
#line 4508
  asender_tbl[23].process = & got_BlockAck;
#line 4508
  asender_tbl[24].pkt_size = 32UL;
#line 4508
  asender_tbl[24].process = & got_BlockAck;
#line 4508
  asender_tbl[25].pkt_size = 32UL;
#line 4508
  asender_tbl[25].process = & got_NegAck;
#line 4508
  asender_tbl[26].pkt_size = 32UL;
#line 4508
  asender_tbl[26].process = & got_NegDReply;
#line 4508
  asender_tbl[27].pkt_size = 32UL;
#line 4508
  asender_tbl[27].process = & got_NegRSDReply;
#line 4508
  asender_tbl[28].pkt_size = 16UL;
#line 4508
  asender_tbl[28].process = & got_BarrierAck;
#line 4508
  asender_tbl[29].pkt_size = 12UL;
#line 4508
  asender_tbl[29].process = & got_RqSReply;
#line 4508
  asender_tbl[30].pkt_size = 0UL;
#line 4508
  asender_tbl[30].process = 0;
#line 4508
  asender_tbl[31].pkt_size = 0UL;
#line 4508
  asender_tbl[31].process = 0;
#line 4508
  asender_tbl[32].pkt_size = 32UL;
#line 4508
  asender_tbl[32].process = & got_OVResult;
#line 4508
  asender_tbl[33].pkt_size = 0UL;
#line 4508
  asender_tbl[33].process = 0;
#line 4508
  asender_tbl[34].pkt_size = 32UL;
#line 4508
  asender_tbl[34].process = & got_IsInSync;
#line 4508
  asender_tbl[35].pkt_size = 0UL;
#line 4508
  asender_tbl[35].process = 0;
#line 4508
  asender_tbl[36].pkt_size = 0UL;
#line 4508
  asender_tbl[36].process = 0;
#line 4508
  asender_tbl[37].pkt_size = 0UL;
#line 4508
  asender_tbl[37].process = 0;
#line 4508
  asender_tbl[38].pkt_size = 0UL;
#line 4508
  asender_tbl[38].process = 0;
#line 4508
  asender_tbl[39].pkt_size = 16UL;
#line 4508
  asender_tbl[39].process = & got_skip;
#line 4508
  asender_tbl[40].pkt_size = 0UL;
#line 4508
  asender_tbl[40].process = 0;
#line 4508
  asender_tbl[41].pkt_size = 32UL;
#line 4508
  asender_tbl[41].process = & got_NegRSDReply;
#line 4508
  asender_tbl[42].pkt_size = 0UL;
#line 4508
  asender_tbl[42].process = 0;
#line 4529
  if (cmd > 42 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4530
    return (0);
  } else {

  }
#line 4531
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4534 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  int ping_timeout_active ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  struct asender_cmd *tmp___23 ;
  enum drbd_thread_state tmp___24 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4536
  mdev = thi->mdev;
#line 4537
  h = & mdev->meta.rbuf.header.h80;
#line 4538
  cmd = 0;
#line 4541
  buf = (void *)h;
#line 4542
  received = 0;
#line 4543
  expect = 8;
#line 4545
  ping_timeout_active = 0;
#line 4547
  tmp = mdev_to_minor(mdev);
#line 4547
  tmp___0 = get_current();
#line 4547
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4549
  tmp___1 = get_current();
#line 4549
  tmp___1->policy = 2U;
#line 4550
  tmp___2 = get_current();
#line 4550
  tmp___2->rt_priority = 2U;
#line 4552
  goto ldv_50824;
  ldv_50834: 
#line 4553
  drbd_thread_current_set_cpu(mdev);
#line 4554
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4554
  if (tmp___4 != 0) {
#line 4555
    tmp___3 = drbd_send_ping(mdev);
#line 4555
    _b = tmp___3 == 0;
#line 4555
    if (_b != 0) {
#line 4555
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4555);
    } else {

    }
#line 4555
    if (_b != 0) {
#line 4555
      goto reconnect;
    } else {

    }
#line 4556
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
#line 4558
    ping_timeout_active = 1;
  } else {

  }
#line 4563
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4563
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4563
    if (tmp___5 > 3) {
#line 4565
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_50823: 
#line 4567
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4568
  tmp___6 = get_current();
#line 4568
  flush_signals(tmp___6);
#line 4569
  tmp___7 = drbd_process_done_ee(mdev);
#line 4569
  if (tmp___7 == 0) {
#line 4570
    goto reconnect;
  } else {

  }
#line 4572
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4573
  spin_lock_irq(& mdev->req_lock);
#line 4574
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4575
  spin_unlock_irq(& mdev->req_lock);
#line 4579
  if (empty != 0) {
#line 4580
    goto ldv_50822;
  } else {

  }
#line 4581
  goto ldv_50823;
  ldv_50822: ;
#line 4583
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U) {
#line 4584
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4587
  tmp___8 = get_current();
#line 4587
  tmp___9 = signal_pending(tmp___8);
#line 4587
  if (tmp___9 != 0) {
#line 4588
    goto ldv_50824;
  } else {

  }
#line 4590
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4592
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4594
  tmp___10 = get_current();
#line 4594
  flush_signals(tmp___10);
#line 4606
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4606
  if (tmp___11 != 0L) {
#line 4607
    received = received + rv;
#line 4608
    buf = buf + (unsigned long )rv;
  } else
#line 4609
  if (rv == 0) {
#line 4610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4611
    goto reconnect;
  } else
#line 4612
  if (rv == -11) {
#line 4615
    if ((1 != 0 && 1 != 0) && (long )((unsigned long )jiffies - (unsigned long )((mdev->meta.socket)->sk)->sk_rcvtimeo) - (long )mdev->last_received < 0L) {
#line 4617
      goto ldv_50824;
    } else {

    }
#line 4618
    if (ping_timeout_active != 0) {
#line 4619
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4620
      goto reconnect;
    } else {

    }
#line 4622
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4623
    goto ldv_50824;
  } else
#line 4624
  if (rv == -4) {
#line 4625
    goto ldv_50824;
  } else {
#line 4627
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4628
    goto reconnect;
  }
#line 4631
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4632
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4632
    if (tmp___15 != 0L) {
#line 4633
      tmp___12 = __fswab16((int )h->length);
#line 4633
      tmp___13 = __fswab16((int )h->command);
#line 4633
      tmp___14 = __fswab32(h->magic);
#line 4633
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4637
      goto reconnect;
    } else {

    }
#line 4639
    tmp___16 = __fswab16((int )h->command);
#line 4639
    cmd = get_asender_cmd((int )tmp___16);
#line 4640
    tmp___17 = __fswab16((int )h->length);
#line 4640
    len = (int )tmp___17;
#line 4641
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4641
    if (tmp___21 != 0L) {
#line 4642
      tmp___18 = __fswab16((int )h->length);
#line 4642
      tmp___19 = __fswab16((int )h->command);
#line 4642
      tmp___20 = __fswab32(h->magic);
#line 4642
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4646
      goto disconnect;
    } else {

    }
#line 4648
    expect = (int )cmd->pkt_size;
#line 4649
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4649
    if (_b___0 != 0) {
#line 4649
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4649);
    } else {

    }
#line 4649
    if (_b___0 != 0) {
#line 4650
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4652
  if (received == expect) {
#line 4653
    mdev->last_received = jiffies;
#line 4654
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4654
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4654);
    } else {

    }
#line 4655
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4655
    if (tmp___22 == 0) {
#line 4656
      goto reconnect;
    } else {

    }
#line 4660
    tmp___23 = get_asender_cmd(20);
#line 4660
    if ((unsigned long )tmp___23 == (unsigned long )cmd) {
#line 4661
      ping_timeout_active = 0;
    } else {

    }
#line 4663
    buf = (void *)h;
#line 4664
    received = 0;
#line 4665
    expect = 8;
#line 4666
    cmd = 0;
  } else {

  }
  ldv_50824: 
#line 4552
  tmp___24 = get_t_state(thi);
#line 4552
  if ((unsigned int )tmp___24 == 1U) {
#line 4553
    goto ldv_50834;
  } else {

  }

#line 4670
  if (0) {
    reconnect: 
#line 4672
    val.i = 0U;
#line 4672
    val.ldv_38894.conn = 5U;
#line 4672
    mask.i = 0U;
#line 4672
    mask.ldv_38894.conn = 31U;
#line 4672
    drbd_force_state(mdev, mask, val);
#line 4673
    drbd_md_sync(mdev);
  } else {

  }
#line 4675
  if (0) {
    disconnect: 
#line 4677
    val___0.i = 0U;
#line 4677
    val___0.ldv_38894.conn = 1U;
#line 4677
    mask___0.i = 0U;
#line 4677
    mask___0.ldv_38894.conn = 31U;
#line 4677
    drbd_force_state(mdev, mask___0, val___0);
#line 4678
    drbd_md_sync(mdev);
  } else {

  }
#line 4680
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4682
  if ((int )mdev->state.ldv_38894.conn > 9) {
#line 4682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4682);
  } else {

  }
#line 4683
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4685
  return (0);
}
}
#line 4725 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4737
  LDV_IN_INTERRUPT = 1;
#line 4746
  ldv_initialize();
#line 4748
  goto ldv_50863;
  ldv_50862: 
#line 4751
  tmp = nondet_int();
#line 4751
  switch (tmp) {
  default: ;
#line 4753
  goto ldv_50861;
  }
  ldv_50861: ;
  ldv_50863: 
#line 4748
  tmp___0 = nondet_int();
#line 4748
  if (tmp___0 != 0) {
#line 4749
    goto ldv_50862;
  } else {

  }


#line 4762
  ldv_check_final_state();
#line 4765
  return;
}
}
#line 595 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 597
  __hlist_del(n);
#line 598
  n->next = 0xdead000000100100UL;
#line 599
  n->pprev = 0xdead000000200200UL;
#line 600
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 555
extern void lockdep_rcu_suspicious(char const   * , int const    , char const   * ) ;
#line 268 "include/linux/rcupdate.h"
extern int rcu_is_cpu_idle(void) ;
#line 276 "include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map ) 
{ 


  {
#line 278
  lock_acquire(map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 280
  return;
}
}
#line 281 "include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map ) 
{ 


  {
#line 283
  lock_release(map, 1, (unsigned long )((void *)0));
#line 285
  return;
}
}
#line 286
extern struct lockdep_map rcu_lock_map ;
#line 289
extern int debug_lockdep_rcu_enabled(void) ;
#line 722 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 724
  pagefault_disable();
#line 726
  rcu_lock_acquire(& rcu_lock_map);
#line 727
  tmp = debug_lockdep_rcu_enabled();
#line 727
  if (tmp != 0 && ! __warned) {
#line 727
    tmp___0 = rcu_is_cpu_idle();
#line 727
    if (tmp___0 != 0) {
#line 727
      __warned = 1;
#line 727
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 728, "rcu_read_lock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 730
  return;
}
}
#line 746 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 
  bool __warned ;
  int tmp ;
  int tmp___0 ;

  {
#line 748
  tmp = debug_lockdep_rcu_enabled();
#line 748
  if (tmp != 0 && ! __warned) {
#line 748
    tmp___0 = rcu_is_cpu_idle();
#line 748
    if (tmp___0 != 0) {
#line 748
      __warned = 1;
#line 748
      lockdep_rcu_suspicious("include/linux/rcupdate.h", 749, "rcu_read_unlock() used illegally while idle");
    } else {

    }
  } else {

  }
#line 750
  rcu_lock_release(& rcu_lock_map);
#line 752
  pagefault_enable();
#line 753
  return;
}
}
#line 39 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 196 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 198
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 198
  if (tmp != 0L) {
#line 199
    if (part->partno != 0) {
#line 200
      __mptr = (struct device  const  *)part->__dev.parent;
#line 200
      return ((struct gendisk *)__mptr + 0xffffffffffffff98UL);
    } else {
#line 202
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 202
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffff98UL);
    }
  } else {

  }
#line 204
  return (0);
}
}
#line 374 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 376
  atomic_inc((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 377
  if (part->partno != 0) {
#line 378
    tmp = part_to_disk(part);
#line 378
    atomic_inc((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 379
  return;
}
}
#line 381 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 383
  atomic_dec((atomic_t *)(& part->in_flight) + (unsigned long )rw);
#line 384
  if (part->partno != 0) {
#line 385
    tmp = part_to_disk(part);
#line 385
    atomic_dec((atomic_t *)(& tmp->part0.in_flight) + (unsigned long )rw);
  } else {

  }
#line 386
  return;
}
}
#line 407
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 208 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 209
extern void bio_pair_release(struct bio_pair * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos ;
#line 1222
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1493
mempool_t *drbd_request_mempool ;
#line 1509
void drbd_make_request(struct request_queue *q , struct bio *bio ) ;
#line 1511
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 2065 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2067
  atomic_inc(& mdev->ap_pending_cnt);
#line 2068
  return;
}
}
#line 2245 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2247
  mxb = 1000000;
#line 2248
  tmp = get_net_conf(mdev);
#line 2248
  if (tmp != 0) {
#line 2249
    mxb = (mdev->net_conf)->max_buffers;
#line 2250
    put_net_conf(mdev);
  } else {

  }
#line 2252
  return (mxb);
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_38894.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_48802;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_48802;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_48802: ;
#line 2303
  switch ((unsigned int )s.ldv_38894.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_48812;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_48812: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool inc_ap_bio_cond(struct drbd_conf *mdev , int count ) 
{ 
  bool rv ;

  {
#line 2358
  rv = 0;
#line 2360
  spin_lock_irq(& mdev->req_lock);
#line 2361
  rv = may_inc_ap_bio(mdev);
#line 2362
  if ((int )rv) {
#line 2363
    atomic_add(count, & mdev->ap_bio_cnt);
  } else {

  }
#line 2364
  spin_unlock_irq(& mdev->req_lock);
#line 2366
  return (rv);
}
}
#line 2369 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  bool tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  bool tmp___1 ;

  {
#line 2379
  tmp = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp) {
#line 2379
    goto ldv_48834;
  } else {

  }
#line 2379
  tmp___0 = get_current();
#line 2379
  __wait.flags = 0U;
#line 2379
  __wait.private = (void *)tmp___0;
#line 2379
  __wait.func = & autoremove_wake_function;
#line 2379
  __wait.task_list.next = & __wait.task_list;
#line 2379
  __wait.task_list.prev = & __wait.task_list;
  ldv_48837: 
#line 2379
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2379
  tmp___1 = inc_ap_bio_cond(mdev, count);
#line 2379
  if ((int )tmp___1) {
#line 2379
    goto ldv_48836;
  } else {

  }
#line 2379
  schedule();
#line 2379
  goto ldv_48837;
  ldv_48836: 
#line 2379
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48834: ;
#line 2382
  return;
}
}
#line 2382 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2384
  tmp = drbd_get_max_buffers(mdev);
#line 2384
  mxb = tmp;
#line 2385
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2385
  ap_bio = tmp___0;
#line 2387
  if (ap_bio < 0) {
#line 2387
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2387);
  } else {

  }
#line 2391
  if (ap_bio < mxb) {
#line 2392
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2393
  if (ap_bio == 0) {
#line 2393
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2393
    if (tmp___2 != 0) {
#line 2394
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2394
      if (tmp___1 == 0) {
#line 2395
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2396
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 229
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 229
  if (tmp != 0L) {
#line 229
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (229), "i" (12UL));
    ldv_48945: ;
#line 229
    goto ldv_48945;
  } else {

  }
#line 230
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 236 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 238
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 238
  if (tmp != 0L) {
#line 238
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (238), "i" (12UL));
    ldv_48950: ;
#line 238
    goto ldv_48950;
  } else {

  }
#line 239
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 244 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 246
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 280 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 283
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 283
  req = (struct drbd_request *)tmp;
#line 285
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 285
  if (tmp___0 != 0L) {
#line 286
    drbd_req_make_private_bio(req, bio_src);
#line 288
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 289
    req->mdev = mdev;
#line 290
    req->master_bio = bio_src;
#line 291
    req->epoch = 0U;
#line 292
    req->sector = bio_src->bi_sector;
#line 293
    req->size = bio_src->bi_size;
#line 294
    INIT_HLIST_NODE(& req->collision);
#line 295
    INIT_LIST_HEAD(& req->tl_requests);
#line 296
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 298
  return (req);
}
}
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 303
  mempool_free((void *)req, drbd_request_mempool);
#line 304
  return;
}
}
#line 319
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 325
void request_timer_fn(unsigned long data ) ;
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_do_remote(union drbd_state s ) 
{ 


  {
#line 368
  return ((bool )(*((unsigned int *)(& s) + 0UL) == 65536U || (((int )s.ldv_38894.pdsk > 3 && (int )s.ldv_38894.conn > 13) && (int )s.ldv_38894.conn <= 21)));
}
}
#line 376 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static bool drbd_should_send_oos(union drbd_state s ) 
{ 


  {
#line 378
  return ((bool )((unsigned int )*((unsigned short *)(& s) + 0UL) == 352U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 208U));
}
}
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  struct thread_info *tmp ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___1 ;
  struct thread_info *tmp___2 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  tmp = current_thread_info();
#line 46
  tmp->preempt_count = tmp->preempt_count + 1;
#line 46
  __asm__  volatile   ("": : : "memory");
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_49039;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_49039;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_49039;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_49039;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_49039: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___1 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___1->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  __asm__  volatile   ("": : : "memory");
#line 50
  tmp___2 = current_thread_info();
#line 50
  tmp___2->preempt_count = tmp___2->preempt_count + -1;
#line 50
  __asm__  volatile   ("": : : "memory");
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  struct thread_info *tmp ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp___0 ;
  struct thread_info *tmp___1 ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  tmp = current_thread_info();
#line 59
  tmp->preempt_count = tmp->preempt_count + 1;
#line 59
  __asm__  volatile   ("": : : "memory");
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_49072;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_49072;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_49072;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_49072;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_49072: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp___0->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  __asm__  volatile   ("": : : "memory");
#line 63
  tmp___1 = current_thread_info();
#line 63
  tmp___1->preempt_count = tmp___1->preempt_count + -1;
#line 63
  __asm__  volatile   ("": : : "memory");
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 68
  s = req->rq_state;
#line 76
  list_del(& req->tl_requests);
#line 81
  if ((int )rw == 1) {
#line 86
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 87
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             87U);
    } else {

    }
#line 89
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 90
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         90U);
    } else {

    }
#line 102
    if ((s & 7UL) != 0UL) {
#line 103
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 103
      if (tmp___0 != 0) {
#line 104
        if ((s & 2048UL) != 0UL) {
#line 105
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 106
        put_ldev(mdev);
      } else {
#line 107
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 107
        if (tmp != 0) {
#line 108
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 115
  drbd_req_free(req);
#line 116
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 127
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 127
  if (tmp != 0) {
#line 128
    return;
  } else {

  }
#line 130
  b = mdev->newest_tle;
#line 131
  b->w.cb = & w_send_barrier;
#line 136
  inc_ap_pending(mdev);
#line 137
  drbd_queue_work(& mdev->data.work, & b->w);
#line 138
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 139
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 144
  s = req->rq_state;
#line 156
  if (((int )mdev->state.ldv_38894.conn > 9 && (s & 32UL) != 0UL) && req->epoch == (mdev->newest_tle)->br_number) {
#line 159
    queue_barrier(mdev);
  } else {

  }
#line 164
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 165
    sector = req->sector;
#line 166
    size = (int const   )req->size;
#line 172
    slot = tl_hash_slot___0(mdev, sector);
#line 173
    n = slot->first;
#line 173
    goto ldv_49114;
    ldv_49113: 
#line 174
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 174
    if (tmp != 0) {
#line 175
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 173
    n = n->next;
    ldv_49114: ;
#line 173
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 173
      __mptr = (struct hlist_node  const  *)n;
#line 173
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 173
      if (1 != 0) {
#line 174
        goto ldv_49113;
      } else {
#line 176
        goto ldv_49115;
      }
    } else {

    }
    ldv_49115: 
#line 196
    slot = ee_hash_slot___0(mdev, req->sector);
#line 197
    n = slot->first;
#line 197
    goto ldv_49121;
    ldv_49120: 
#line 198
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 198
    if (tmp___0 != 0) {
#line 199
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 200
      goto ldv_49119;
    } else {

    }
#line 197
    n = n->next;
    ldv_49121: ;
#line 197
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 197
      __mptr___0 = (struct hlist_node  const  *)n;
#line 197
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 197
      if (1 != 0) {
#line 198
        goto ldv_49120;
      } else {
#line 200
        goto ldv_49119;
      }
    } else {

    }
    ldv_49119: ;
  } else {

  }
#line 203
  return;
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 210
  bio_endio(m->bio, m->error);
#line 211
  dec_ap_bio(mdev);
#line 212
  return;
}
}
#line 220 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 222
  s = req->rq_state;
#line 223
  mdev = req->mdev;
#line 225
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 236
  if ((s & 16UL) != 0UL) {
#line 237
    return;
  } else {

  }
#line 238
  if ((s & 8UL) != 0UL) {
#line 239
    return;
  } else {

  }
#line 240
  if ((int )s & 1) {
#line 241
    return;
  } else {

  }
#line 243
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 265
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 266
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 266
    error = (int )tmp;
#line 270
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 270
    if (tmp___0 == 0) {
#line 271
      hlist_del(& req->collision);
    } else
#line 273
    if ((s & 440UL) != 0UL) {
#line 273
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              273);
    } else {

    }
#line 276
    if (rw == 1) {
#line 277
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 280
    _drbd_end_io_acct(mdev, req);
#line 282
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 283
    m->bio = req->master_bio;
#line 284
    req->master_bio = 0;
  } else {

  }
#line 287
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 292
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 293
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 300
  mdev = req->mdev;
#line 302
  tmp = is_susp(mdev->state);
#line 302
  if (tmp == 0) {
#line 303
    _req_may_be_done(req, m);
  } else {

  }
#line 304
  return;
}
}
#line 329 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 331
  mdev = req->mdev;
#line 332
  sector = req->sector;
#line 333
  size = (int const   )req->size;
#line 339
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->collision));
#line 339
  if (tmp == 0) {
#line 339
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->collision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            339);
  } else {

  }
#line 341
  tmp___0 = get_net_conf(mdev);
#line 341
  if (tmp___0 == 0) {
#line 342
    return (0);
  } else {

  }
#line 345
  _b = mdev->tl_hash_s == 0U;
#line 345
  if (_b != 0) {
#line 345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            345);
  } else {

  }
#line 345
  if (_b != 0) {
#line 346
    goto out_no_conflict;
  } else {

  }
#line 347
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 347
  if (tmp___1 != 0L) {
#line 347
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (347), "i" (12UL));
    ldv_49154: ;
#line 347
    goto ldv_49154;
  } else {

  }
#line 350
  slot = tl_hash_slot___0(mdev, sector);
#line 351
  n = slot->first;
#line 351
  goto ldv_49160;
  ldv_49159: 
#line 352
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 352
  if (tmp___4 != 0) {
#line 353
    tmp___2 = get_current();
#line 353
    tmp___3 = get_current();
#line 353
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 359
    goto out_conflict;
  } else {

  }
#line 351
  n = n->next;
  ldv_49160: ;
#line 351
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 351
    __mptr = (struct hlist_node  const  *)n;
#line 351
    i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 351
    if (1 != 0) {
#line 352
      goto ldv_49159;
    } else {
#line 354
      goto ldv_49161;
    }
  } else {

  }
  ldv_49161: ;
#line 363
  if (mdev->ee_hash_s != 0U) {
#line 365
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 365
    if (tmp___5 != 0L) {
#line 365
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (365), "i" (12UL));
      ldv_49162: ;
#line 365
      goto ldv_49162;
    } else {

    }
#line 368
    slot = ee_hash_slot___0(mdev, sector);
#line 369
    n = slot->first;
#line 369
    goto ldv_49167;
    ldv_49166: 
#line 370
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 370
    if (tmp___8 != 0) {
#line 371
      tmp___6 = get_current();
#line 371
      tmp___7 = get_current();
#line 371
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 377
      goto out_conflict;
    } else {

    }
#line 369
    n = n->next;
    ldv_49167: ;
#line 369
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 369
      __mptr___0 = (struct hlist_node  const  *)n;
#line 369
      e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 369
      if (1 != 0) {
#line 370
        goto ldv_49166;
      } else {
#line 372
        goto ldv_49168;
      }
    } else {

    }
    ldv_49168: ;
  } else {

  }
  out_no_conflict: 
#line 386
  put_net_conf(mdev);
#line 387
  return (0);
  out_conflict: 
#line 390
  put_net_conf(mdev);
#line 391
  return (1);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 409
  mdev = req->mdev;
#line 410
  rv = 0;
#line 411
  m->bio = 0;
#line 413
  switch ((unsigned int )what) {
  default: 
#line 415
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          415);
#line 416
  goto ldv_49177;
  case 1U: ;
#line 427
  if ((req->rq_state & 504UL) != 0UL) {
#line 427
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            427);
  } else {

  }
#line 428
  req->rq_state = req->rq_state | 8UL;
#line 429
  inc_ap_pending(mdev);
#line 430
  goto ldv_49177;
  case 2U: ;
#line 434
  if ((req->rq_state & 7UL) != 0UL) {
#line 434
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            434);
  } else {

  }
#line 435
  req->rq_state = req->rq_state | 1UL;
#line 436
  goto ldv_49177;
  case 22U: ;
#line 439
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 440
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 442
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 444
  req->rq_state = req->rq_state | 6UL;
#line 445
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 447
  _req_may_be_done_not_susp(req, m);
#line 448
  put_ldev(mdev);
#line 449
  goto ldv_49177;
  case 21U: 
#line 452
  req->rq_state = req->rq_state | 2UL;
#line 453
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 455
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 456
  _req_may_be_done_not_susp(req, m);
#line 457
  put_ldev(mdev);
#line 458
  goto ldv_49177;
  case 20U: 
#line 462
  req->rq_state = req->rq_state | 2UL;
#line 463
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 464
  _req_may_be_done_not_susp(req, m);
#line 465
  put_ldev(mdev);
#line 466
  goto ldv_49177;
  case 19U: 
#line 469
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         469U);
#line 471
  req->rq_state = req->rq_state | 2UL;
#line 472
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 474
  if ((req->rq_state & 504UL) != 0UL) {
#line 474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            474);
  } else {

  }
#line 476
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 477
  put_ldev(mdev);
#line 481
  if (*((unsigned int *)mdev + 569UL) != 65536U) {
#line 482
    _req_may_be_done_not_susp(req, m);
#line 483
    goto ldv_49177;
  } else {

  }
#line 487
  req->rq_state = req->rq_state | 8UL;
#line 488
  inc_ap_pending(mdev);
  case 4U: 
#line 501
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 501
  hlist_add_head(& req->collision, tmp);
#line 503
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 505
  if ((req->rq_state & 8UL) == 0UL) {
#line 505
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            505);
  } else {

  }
#line 506
  req->rq_state = req->rq_state | 16UL;
#line 507
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 510
  drbd_queue_work(& mdev->data.work, & req->w);
#line 511
  goto ldv_49177;
  case 3U: 
#line 517
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 517
  hlist_add_head(& req->collision, tmp___0);
#line 537
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 541
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 541
  if (tmp___1 != 0) {
#line 541
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            541);
  } else {

  }
#line 543
  req->epoch = (mdev->newest_tle)->br_number;
#line 546
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 549
  if ((req->rq_state & 8UL) == 0UL) {
#line 549
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            549);
  } else {

  }
#line 550
  req->rq_state = req->rq_state | 16UL;
#line 551
  req->w.cb = & w_send_dblock;
#line 552
  drbd_queue_work(& mdev->data.work, & req->w);
#line 555
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 556
    queue_barrier(mdev);
  } else {

  }
#line 558
  goto ldv_49177;
  case 5U: 
#line 561
  req->rq_state = req->rq_state | 16UL;
#line 562
  req->w.cb = & w_send_oos;
#line 563
  drbd_queue_work(& mdev->data.work, & req->w);
#line 564
  goto ldv_49177;
  case 9U: ;
  case 6U: ;
  case 7U: 
#line 573
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 576
  _req_may_be_done_not_susp(req, m);
#line 577
  goto ldv_49177;
  case 8U: ;
#line 581
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 582
    atomic_add((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 584
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 588
    if ((req->rq_state & 8UL) != 0UL) {
#line 589
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 589
      if (tmp___2 != 0) {
#line 589
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 589
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 589
      if (tmp___4 < 0) {
#line 589
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 589
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 589, tmp___3);
      } else {

      }
#line 590
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 591
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 597
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 598
  req->rq_state = req->rq_state | 32UL;
#line 604
  _req_may_be_done_not_susp(req, m);
#line 605
  goto ldv_49177;
  case 11U: 
#line 608
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 10U: ;
#line 613
  if ((req->rq_state & 8UL) != 0UL) {
#line 614
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 614
    if (tmp___5 != 0) {
#line 614
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 614
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
    if (tmp___7 < 0) {
#line 614
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 614
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 614, tmp___6);
    } else {

    }
  } else {

  }
#line 615
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 616
  req->rq_state = req->rq_state | 64UL;
#line 617
  if ((req->rq_state & 32UL) != 0UL && (req->rq_state & 1024UL) != 0UL) {
#line 618
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 622
  if ((req->rq_state & 16UL) == 0UL) {
#line 623
    _req_may_be_done(req, m);
  } else {

  }
#line 624
  goto ldv_49177;
  case 14U: 
#line 627
  req->rq_state = req->rq_state | 256UL;
  case 15U: ;
#line 632
  if ((unsigned int )what == 15U) {
#line 633
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 636
  req->rq_state = req->rq_state | 64UL;
  case 13U: ;
  case 12U: 
#line 654
  req->rq_state = req->rq_state | 128UL;
#line 655
  if ((req->rq_state & 8UL) == 0UL) {
#line 655
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            655);
  } else {

  }
#line 656
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 656
  if (tmp___8 != 0) {
#line 656
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 656
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
  if (tmp___10 < 0) {
#line 656
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 656, tmp___9);
  } else {

  }
#line 657
  atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
#line 658
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 659
  _req_may_be_done_not_susp(req, m);
#line 660
  goto ldv_49177;
  case 16U: ;
#line 664
  if ((req->rq_state & 8UL) != 0UL) {
#line 665
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 665
    if (tmp___11 != 0) {
#line 665
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 665
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
    if (tmp___13 < 0) {
#line 665
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 665
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 665, tmp___12);
    } else {

    }
#line 666
    atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
  } else {

  }
#line 668
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 670
  req->rq_state = req->rq_state | 64UL;
#line 671
  _req_may_be_done_not_susp(req, m);
#line 673
  goto ldv_49177;
  case 24U: ;
#line 676
  if ((req->rq_state & 2UL) == 0UL) {
#line 677
    goto ldv_49177;
  } else {

  }
#line 679
  _req_may_be_done(req, m);
#line 680
  goto ldv_49177;
  case 25U: ;
#line 683
  if ((req->rq_state & 2UL) == 0UL) {
#line 684
    goto ldv_49177;
  } else {

  }
#line 686
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 688
  rv = 2;
#line 689
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 690
    rv = 1;
  } else {

  }
#line 692
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 693
  req->w.cb = & w_restart_disk_io;
#line 694
  drbd_queue_work(& mdev->data.work, & req->w);
#line 695
  goto ldv_49177;
  case 23U: ;
#line 702
  if ((req->rq_state & 128UL) == 0UL) {
#line 703
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 704
      drbd_queue_work(& mdev->data.work, & req->w);
#line 705
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 707
    goto ldv_49177;
  } else {

  }
  case 17U: ;
#line 712
  if ((req->rq_state & 1024UL) == 0UL) {
#line 713
    goto ldv_49177;
  } else {

  }
#line 715
  if ((req->rq_state & 8UL) != 0UL) {
#line 719
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 720
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 722
  if ((req->rq_state & 504UL) != 0UL) {
#line 723
    req->rq_state = req->rq_state | 64UL;
#line 724
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 725
      atomic_sub((int )(req->size >> 9), & mdev->ap_in_flight);
    } else {

    }
  } else {

  }
#line 727
  _req_may_be_done(req, m);
#line 728
  goto ldv_49177;
  case 18U: ;
#line 731
  if ((req->rq_state & 8UL) == 0UL) {
#line 731
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            731);
  } else {

  }
#line 732
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 732
  if (tmp___14 != 0) {
#line 732
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 732
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 732
  if (tmp___16 < 0) {
#line 732
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 732, tmp___15);
  } else {

  }
#line 733
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 734
  req->rq_state = req->rq_state | 192UL;
#line 735
  _req_may_be_done_not_susp(req, m);
#line 736
  goto ldv_49177;
  }
  ldv_49177: ;
#line 739
  return (rv);
}
}
#line 749 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 754
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 755
    return (1);
  } else {

  }
#line 756
  if ((int )mdev->state.ldv_38894.disk > 4) {
#line 757
    return (0);
  } else {

  }
#line 758
  if ((int )mdev->state.ldv_38894.disk <= 3) {
#line 759
    return (0);
  } else {

  }
#line 761
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 762
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 764
  if (sector >= nr_sectors) {
#line 764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            764);
  } else {

  }
#line 765
  if (esector >= nr_sectors) {
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            765);
  } else {

  }
#line 767
  sbnr = sector >> 3;
#line 768
  ebnr = esector >> 3;
#line 770
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 770
  return (tmp == 0);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio , unsigned long start_time ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int send_oos ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  bool tmp___1 ;
  int tmp___2 ;
  bool tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  bool tmp___10 ;
  bool tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int congested ;
  int tmp___18 ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 775
  rw = (int const   )bio->bi_rw & (int const   )4097;
#line 776
  size = (int const   )bio->bi_size;
#line 777
  sector = bio->bi_sector;
#line 778
  b = 0;
#line 780
  send_oos = 0;
#line 781
  err = -5;
#line 782
  ret = 0;
#line 785
  req = drbd_req_new(mdev, bio);
#line 786
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 787
    dec_ap_bio(mdev);
#line 790
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 791
    bio_endio(bio, -12);
#line 792
    return (0);
  } else {

  }
#line 794
  req->start_time = start_time;
#line 796
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 797
  if (local == 0) {
#line 798
    bio_put(req->private_bio);
#line 799
    req->private_bio = 0;
  } else {

  }
#line 801
  if (rw == 1) {
#line 802
    remote = 1;
  } else {
#line 805
    if (local != 0) {
#line 806
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 806
      if (tmp == 0) {
#line 812
        local = 0;
#line 813
        bio_put(req->private_bio);
#line 814
        req->private_bio = 0;
#line 815
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 818
    remote = local == 0 && (int )mdev->state.ldv_38894.pdsk > 7;
  }
#line 829
  if ((rw == 4096 && (int )mdev->state.ldv_38894.disk > 3) && local == 0) {
#line 830
    err = -11;
#line 831
    goto fail_and_free_req;
  } else {

  }
#line 839
  if (rw == 1 && local != 0) {
#line 839
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 839
    if (tmp___0 == 0) {
#line 840
      req->rq_state = req->rq_state | 2048UL;
#line 841
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 844
  if (remote != 0) {
#line 844
    tmp___1 = drbd_should_do_remote(mdev->state);
#line 844
    if ((int )tmp___1) {
#line 844
      tmp___2 = 1;
    } else {
#line 844
      tmp___2 = 0;
    }
  } else {
#line 844
    tmp___2 = 0;
  }
#line 844
  remote = tmp___2;
#line 845
  if (rw == 1) {
#line 845
    tmp___3 = drbd_should_send_oos(mdev->state);
#line 845
    if ((int )tmp___3) {
#line 845
      tmp___4 = 1;
    } else {
#line 845
      tmp___4 = 0;
    }
  } else {
#line 845
    tmp___4 = 0;
  }
#line 845
  send_oos = tmp___4;
#line 846
  if (remote != 0 && send_oos != 0) {
#line 846
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            846);
  } else {

  }
#line 848
  if (local == 0 && remote == 0) {
#line 848
    tmp___6 = is_susp(mdev->state);
#line 848
    if (tmp___6 == 0) {
#line 849
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 849
      if (tmp___5 != 0) {
#line 850
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 851
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 860
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 860
    tmp___8 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 860
    if (tmp___8 != 0) {
      allocate_barrier: 
#line 864
      tmp___7 = kmalloc(56UL, 16U);
#line 864
      b = (struct drbd_tl_epoch *)tmp___7;
#line 865
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 866
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 867
        err = -12;
#line 868
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 873
  spin_lock_irq(& mdev->req_lock);
#line 875
  tmp___9 = is_susp(mdev->state);
#line 875
  if (tmp___9 != 0) {
#line 880
    ret = 1;
#line 881
    spin_unlock_irq(& mdev->req_lock);
#line 882
    goto fail_free_complete;
  } else {

  }
#line 885
  if (remote != 0 || send_oos != 0) {
#line 886
    tmp___10 = drbd_should_do_remote(mdev->state);
#line 886
    remote = (int )tmp___10;
#line 887
    if (rw == 1) {
#line 887
      tmp___11 = drbd_should_send_oos(mdev->state);
#line 887
      if ((int )tmp___11) {
#line 887
        tmp___12 = 1;
      } else {
#line 887
        tmp___12 = 0;
      }
    } else {
#line 887
      tmp___12 = 0;
    }
#line 887
    send_oos = tmp___12;
#line 888
    if (remote != 0 && send_oos != 0) {
#line 888
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && send_oos) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              888);
    } else {

    }
#line 890
    if (remote == 0 && send_oos == 0) {
#line 891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 892
    if (local == 0 && remote == 0) {
#line 893
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 894
      spin_unlock_irq(& mdev->req_lock);
#line 895
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 899
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 900
    mdev->unused_spare_tle = b;
#line 901
    b = 0;
  } else {

  }
#line 903
  if ((rw == 1 && (remote != 0 || send_oos != 0)) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 903
    tmp___13 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 903
    if (tmp___13 != 0) {
#line 908
      spin_unlock_irq(& mdev->req_lock);
#line 909
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 914
  _drbd_start_io_acct(mdev, req, bio);
#line 926
  if ((remote != 0 || send_oos != 0) && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 926
    tmp___15 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 926
    if (tmp___15 != 0) {
#line 928
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 929
      mdev->unused_spare_tle = 0;
    } else {
#line 926
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 931
  if (remote != 0 && rw == 1) {
#line 931
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 931
    if (tmp___14 != 0) {
#line 931
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              932);
    } else {

    }
  } else {

  }
#line 950
  if (remote != 0) {
#line 951
    _req_mod(req, to_be_send);
  } else {

  }
#line 952
  if (local != 0) {
#line 953
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 958
  if (rw == 1) {
#line 958
    tmp___16 = _req_conflicts(req);
#line 958
    if (tmp___16 != 0) {
#line 959
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 961
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 965
  if (remote != 0) {
#line 970
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 974
  if (send_oos != 0) {
#line 974
    tmp___17 = __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                                      974U);
#line 974
    if (tmp___17 != 0) {
#line 975
      _req_mod(req, queue_for_send_oos);
    } else {

    }
  } else {

  }
#line 977
  if ((remote != 0 && (mdev->net_conf)->on_congestion != 0) && mdev->agreed_pro_version > 95) {
#line 979
    congested = 0;
#line 981
    if ((mdev->net_conf)->cong_fill != 0) {
#line 981
      tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_in_flight));
#line 981
      if (tmp___18 >= (mdev->net_conf)->cong_fill) {
#line 983
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-fill threshold reached\n");
#line 984
        congested = 1;
      } else {

      }
    } else {

    }
#line 987
    if ((mdev->act_log)->used >= (unsigned int )(mdev->net_conf)->cong_extents) {
#line 988
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Congestion-extents threshold reached\n");
#line 989
      congested = 1;
    } else {

    }
#line 992
    if (congested != 0) {
#line 993
      queue_barrier(mdev);
#line 995
      if ((mdev->net_conf)->on_congestion == 1) {
#line 996
        __ns.i = mdev->state.i;
#line 996
        __ns.ldv_38894.conn = 22U;
#line 996
        _drbd_set_state(mdev, __ns, 0, 0);
      } else {
#line 998
        __ns___0.i = mdev->state.i;
#line 998
        __ns___0.ldv_38894.conn = 1U;
#line 998
        _drbd_set_state(mdev, __ns___0, 0, 0);
      }
    } else {

    }
  } else {

  }
#line 1002
  spin_unlock_irq(& mdev->req_lock);
#line 1003
  kfree((void const   *)b);
#line 1005
  if (local != 0) {
#line 1006
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1013
    tmp___20 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1013
    if (tmp___20 != 0) {
#line 1014
      tmp___19 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 1014
      if (tmp___19 != 0) {
#line 1017
        bio_endio(req->private_bio, -5);
      } else {
#line 1019
        generic_make_request(req->private_bio);
      }
#line 1020
      put_ldev(mdev);
    } else {
#line 1022
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 1025
  return (0);
  fail_conflicting: 
#line 1034
  _drbd_end_io_acct(mdev, req);
#line 1035
  spin_unlock_irq(& mdev->req_lock);
#line 1036
  if (remote != 0) {
#line 1037
    tmp___21 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 1037
    if (tmp___21 != 0) {
#line 1037
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 1037
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1037
    if (tmp___23 < 0) {
#line 1037
      tmp___22 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1037
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 1037, tmp___22);
    } else {

    }
  } else {

  }
#line 1040
  err = 0;
  fail_free_complete: ;
#line 1043
  if ((req->rq_state & 2048UL) != 0UL) {
#line 1044
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 1046
  if (local != 0) {
#line 1047
    bio_put(req->private_bio);
#line 1048
    req->private_bio = 0;
#line 1049
    put_ldev(mdev);
  } else {

  }
#line 1051
  if (ret == 0) {
#line 1052
    bio_endio(bio, err);
  } else {

  }
#line 1054
  drbd_req_free(req);
#line 1055
  dec_ap_bio(mdev);
#line 1056
  kfree((void const   *)b);
#line 1058
  return (ret);
}
}
#line 1066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1068
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U && (! allow_oos || is_write != 0)) {
#line 1070
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1070
    if (tmp___1 != 0) {
#line 1071
      tmp = get_current();
#line 1071
      tmp___0 = get_current();
#line 1071
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1077
    return (1);
  } else {

  }
#line 1080
  return (0);
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void drbd_make_request(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  unsigned long start_time ;
  int tmp ;
  long tmp___0 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1086
  mdev = (struct drbd_conf *)q->queuedata;
#line 1089
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1089
  if (tmp != 0) {
#line 1090
    bio_endio(bio, -1);
#line 1091
    return;
  } else {

  }
#line 1094
  start_time = jiffies;
#line 1099
  if (bio->bi_size == 0U) {
#line 1099
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1099);
  } else {

  }
#line 1100
  if ((bio->bi_size & 511U) != 0U) {
#line 1100
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1100);
  } else {

  }
#line 1101
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1101
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1101);
  } else {

  }
#line 1105
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1106
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1108
  tmp___0 = __builtin_expect(s_enr == e_enr, 1L);
#line 1108
  if (tmp___0 != 0L) {
#line 1109
    inc_ap_bio(mdev, 1);
#line 1110
    drbd_make_request_common(mdev, bio, start_time);
#line 1111
    return;
  } else {

  }
#line 1116
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1122
    bio_endio(bio, -22);
  } else {
#line 1134
    sect = bio->bi_sector;
#line 1135
    sps = 256;
#line 1136
    mask = sps + -1;
#line 1137
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1138
    bp = bio_split(bio, (int )first_sectors);
#line 1145
    inc_ap_bio(mdev, 3);
#line 1147
    if (s_enr + 1U != e_enr) {
#line 1147
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1147);
    } else {

    }
#line 1149
    goto ldv_49275;
    ldv_49274: 
#line 1150
    inc_ap_bio(mdev, 1);
    ldv_49275: 
#line 1149
    tmp___1 = drbd_make_request_common(mdev, & bp->bio1, start_time);
#line 1149
    if (tmp___1 != 0) {
#line 1150
      goto ldv_49274;
    } else {

    }

#line 1152
    goto ldv_49278;
    ldv_49277: 
#line 1153
    inc_ap_bio(mdev, 1);
    ldv_49278: 
#line 1152
    tmp___2 = drbd_make_request_common(mdev, & bp->bio2, start_time);
#line 1152
    if (tmp___2 != 0) {
#line 1153
      goto ldv_49277;
    } else {

    }
#line 1155
    dec_ap_bio(mdev);
#line 1157
    bio_pair_release(bp);
  }
#line 1159
  return;
}
}
#line 1174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1176
  mdev = (struct drbd_conf *)q->queuedata;
#line 1177
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1179
  bio_size = bvm->bi_size;
#line 1182
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1184
  if (limit < 0) {
#line 1185
    limit = 0;
  } else {

  }
#line 1186
  if (bio_size == 0U) {
#line 1187
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1188
      limit = (int )bvec->bv_len;
    } else
#line 1189
    if (limit != 0) {
#line 1189
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1189
      if (tmp != 0) {
#line 1190
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1192
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1193
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1194
          _min1 = limit;
#line 1194
          _min2 = backing_limit;
#line 1194
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1196
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1198
  return (limit);
}
}
#line 1201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void request_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_request *req ;
  struct list_head *le ;
  unsigned long et ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  union drbd_state __ns ;

  {
#line 1203
  mdev = (struct drbd_conf *)data;
#line 1206
  et = 0UL;
#line 1208
  tmp = get_net_conf(mdev);
#line 1208
  if (tmp != 0) {
#line 1209
    et = (unsigned long )((((mdev->net_conf)->timeout * 250) / 10) * (mdev->net_conf)->ko_count);
#line 1210
    put_net_conf(mdev);
  } else {

  }
#line 1212
  if (et == 0UL || (int )mdev->state.ldv_38894.conn <= 8) {
#line 1213
    return;
  } else {

  }
#line 1215
  spin_lock_irq(& mdev->req_lock);
#line 1216
  le = & (mdev->oldest_tle)->requests;
#line 1217
  tmp___0 = list_empty((struct list_head  const  *)le);
#line 1217
  if (tmp___0 != 0) {
#line 1218
    spin_unlock_irq(& mdev->req_lock);
#line 1219
    mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
#line 1220
    return;
  } else {

  }
#line 1223
  le = le->prev;
#line 1224
  __mptr = (struct list_head  const  *)le;
#line 1224
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 1225
  if ((1 != 0 && 1 != 0) && (long )jiffies - (long )(req->start_time + et) >= 0L) {
#line 1226
    if ((req->rq_state & 8UL) != 0UL) {
#line 1227
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Remote failed to finish a request within ko-count * timeout\n");
#line 1228
      __ns.i = mdev->state.i;
#line 1228
      __ns.ldv_38894.conn = 3U;
#line 1228
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
    } else {
#line 1230
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local backing block device frozen?\n");
#line 1231
      mod_timer(& mdev->request_timer, (unsigned long )jiffies + et);
    }
  } else {
#line 1234
    mod_timer(& mdev->request_timer, req->start_time + et);
  }
#line 1237
  spin_unlock_irq(& mdev->req_lock);
#line 1238
  return;
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 739 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 741
  return ((bdev->bd_disk)->queue);
}
}
#line 1019 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1021
  retval = 512;
#line 1023
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1024
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1026
  return ((unsigned short )retval);
}
}
#line 1029 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1031
  tmp = bdev_get_queue(bdev);
#line 1031
  tmp___0 = queue_logical_block_size(tmp);
#line 1031
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1539 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1664
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1674
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1675
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1683
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 3072;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 16;
#line 92
  bio = bio_alloc(16U, 1U);
#line 93
  bio->bi_bdev = bdev->md_bdev;
#line 94
  bio->bi_sector = sector;
#line 95
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 95
  ok = tmp___0 == size;
#line 96
  if (ok == 0) {
#line 97
    goto out;
  } else {

  }
#line 98
  bio->bi_private = (void *)(& md_io);
#line 99
  bio->bi_end_io = & drbd_md_io_complete;
#line 100
  bio->bi_rw = (unsigned long )rw;
#line 102
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 102
  if (tmp___1 != 0) {
#line 103
    bio_endio(bio, -5);
  } else {
#line 105
    submit_bio(rw, bio);
  }
#line 106
  wait_for_completion(& md_io.event);
#line 107
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 110
  bio_put(bio);
#line 111
  return (ok);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 118
  offset = 0;
#line 119
  iop = mdev->md_io_page;
#line 121
  tmp = mutex_is_locked(& mdev->md_io_mutex);
#line 121
  if (tmp == 0) {
#line 121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            121);
  } else {

  }
#line 123
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 123
  if (tmp___0 != 0L) {
#line 123
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (123), "i" (12UL));
    ldv_48949: ;
#line 123
    goto ldv_48949;
  } else {

  }
#line 125
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 125
  logical_block_size = (int )tmp___1;
#line 126
  if (logical_block_size == 0) {
#line 127
    logical_block_size = 512;
  } else {

  }
#line 130
  if (logical_block_size != 512) {
#line 131
    mask = logical_block_size / 512 + -1;
#line 132
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              132);
    } else {

    }
#line 133
    if ((mask + 1) * 512 != logical_block_size) {
#line 133
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              133);
    } else {

    }
#line 134
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 135
    sector = (sector_t )(~ mask) & sector;
#line 136
    iop = mdev->md_io_tmpp;
#line 138
    if (rw & 1) {
#line 141
      tmp___2 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 141
      p = tmp___2;
#line 142
      tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 142
      hp = tmp___3;
#line 144
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 147
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 147
      if (tmp___4 != 0L) {
#line 148
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 151
        return (0);
      } else {

      }
#line 154
      __len = 512UL;
#line 154
      if (__len > 63UL) {
#line 154
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 154
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 158
  tmp___7 = drbd_md_first_sector(bdev);
#line 158
  if (tmp___7 > sector) {
#line 160
    tmp___5 = get_current();
#line 160
    tmp___6 = get_current();
#line 160
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 158
    tmp___8 = drbd_md_last_sector(bdev);
#line 158
    if (tmp___8 < sector) {
#line 160
      tmp___5 = get_current();
#line 160
      tmp___6 = get_current();
#line 160
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 164
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 165
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 165
  if (tmp___9 != 0L) {
#line 166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 168
    return (0);
  } else {

  }
#line 171
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 172
    tmp___10 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 172
    p___0 = tmp___10;
#line 173
    tmp___11 = lowmem_page_address((struct page  const  *)mdev->md_io_tmpp);
#line 173
    hp___0 = tmp___11;
#line 175
    __len___0 = 512UL;
#line 175
    if (__len___0 > 63UL) {
#line 175
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 175
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 178
  return (ok);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  int wake ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;

  {
#line 185
  al_flags = 0UL;
#line 188
  spin_lock_irq(& mdev->al_lock);
#line 189
  tmp = lc_find(mdev->resync, enr / 4U);
#line 190
  tmp___2 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 190
  if (tmp___2 != 0L) {
#line 191
    __mptr = (struct lc_element  const  *)tmp;
#line 191
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 192
    tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 192
    if (tmp___1 != 0) {
#line 193
      tmp___0 = test_and_set_bit(2, (unsigned long volatile   *)(& bm_ext->flags));
#line 193
      wake = tmp___0 == 0;
#line 194
      spin_unlock_irq(& mdev->al_lock);
#line 195
      if (wake != 0) {
#line 196
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 197
      return (0);
    } else {

    }
  } else {

  }
#line 200
  al_ext = lc_get(mdev->act_log, enr);
#line 201
  al_flags = (mdev->act_log)->flags;
#line 202
  spin_unlock_irq(& mdev->al_lock);
#line 213
  return (al_ext);
}
}
#line 216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 218
  enr = (unsigned int )(sector >> 13);
#line 222
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 222
  if (tmp <= 0) {
#line 222
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            222);
  } else {

  }
#line 224
  al_ext = _al_get(mdev, enr);
#line 224
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 224
    goto ldv_48979;
  } else {

  }
#line 224
  tmp___0 = get_current();
#line 224
  __wait.flags = 0U;
#line 224
  __wait.private = (void *)tmp___0;
#line 224
  __wait.func = & autoremove_wake_function;
#line 224
  __wait.task_list.next = & __wait.task_list;
#line 224
  __wait.task_list.prev = & __wait.task_list;
  ldv_48982: 
#line 224
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 224
  al_ext = _al_get(mdev, enr);
#line 224
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 224
    goto ldv_48981;
  } else {

  }
#line 224
  schedule();
#line 224
  goto ldv_48982;
  ldv_48981: 
#line 224
  finish_wait(& mdev->al_wait, & __wait);
  ldv_48979: ;
#line 226
  if (al_ext->lc_number != enr) {
#line 233
    init_completion(& al_work.event);
#line 234
    al_work.al_ext = al_ext;
#line 235
    al_work.enr = enr;
#line 236
    al_work.old_enr = al_ext->lc_number;
#line 237
    al_work.w.cb = & w_al_write_transaction;
#line 238
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 239
    wait_for_completion(& al_work.event);
#line 241
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 243
    spin_lock_irq(& mdev->al_lock);
#line 244
    lc_changed(mdev->act_log, al_ext);
#line 245
    spin_unlock_irq(& mdev->al_lock);
#line 246
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 248
  return;
}
}
#line 250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 252
  enr = (unsigned int )(sector >> 13);
#line 256
  tmp = spinlock_check(& mdev->al_lock);
#line 256
  flags = _raw_spin_lock_irqsave(tmp);
#line 258
  extent = lc_find(mdev->act_log, enr);
#line 260
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 261
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 262
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 263
    return;
  } else {

  }
#line 266
  tmp___0 = lc_put(mdev->act_log, extent);
#line 266
  if (tmp___0 == 0U) {
#line 267
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 269
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int al_extent_to_bm_page(unsigned int al_enr ) 
{ 


  {
#line 283
  return (al_enr >> 5);
}
}
#line 290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static unsigned int rs_extent_to_bm_page(unsigned int rs_enr ) 
{ 


  {
#line 292
  return (rs_enr >> 3);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  char const   *tmp___2 ;
  void *tmp___3 ;
  __u32 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  int tmp___12 ;

  {
#line 302
  __mptr = (struct drbd_work  const  *)w;
#line 302
  aw = (struct update_al_work *)__mptr;
#line 303
  updated = aw->al_ext;
#line 304
  new_enr = aw->enr;
#line 305
  evicted = aw->old_enr;
#line 310
  xor_sum = 0U;
#line 312
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 312
  if (tmp___0 == 0) {
#line 313
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.disk);
#line 313
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 316
    complete(& ((struct update_al_work *)w)->event);
#line 317
    return (1);
  } else {

  }
#line 325
  if ((int )mdev->state.ldv_38894.conn <= 9 && evicted != 4294967295U) {
#line 326
    tmp___1 = al_extent_to_bm_page(evicted);
#line 326
    drbd_bm_write_page(mdev, tmp___1);
  } else {

  }
#line 329
  if ((int )mdev->state.ldv_38894.disk <= 3) {
#line 330
    tmp___2 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.disk);
#line 330
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___2, evicted, new_enr);
#line 333
    complete(& ((struct update_al_work *)w)->event);
#line 334
    put_ldev(mdev);
#line 335
    return (1);
  } else {

  }
#line 338
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 339
  tmp___3 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 339
  buffer = (struct al_transaction *)tmp___3;
#line 341
  buffer->magic = 1728214147U;
#line 342
  tmp___4 = __fswab32(mdev->al_tr_number);
#line 342
  buffer->tr_number = tmp___4;
#line 344
  tmp___5 = lc_index_of(mdev->act_log, updated);
#line 344
  n = (int )tmp___5;
#line 346
  tmp___6 = __fswab32((__u32 )n);
#line 346
  buffer->updates[0].pos = tmp___6;
#line 347
  tmp___7 = __fswab32(new_enr);
#line 347
  buffer->updates[0].extent = tmp___7;
#line 349
  xor_sum = xor_sum ^ new_enr;
#line 351
  __min1 = 61;
#line 351
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 351
  mx = __min1 < __min2 ? __min1 : __min2;
#line 353
  i = 0;
#line 353
  goto ldv_49022;
  ldv_49021: 
#line 354
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 355
  tmp___8 = lc_element_by_index(mdev->act_log, idx);
#line 355
  extent_nr = tmp___8->lc_number;
#line 356
  tmp___9 = __fswab32(idx);
#line 356
  buffer->updates[i + 1].pos = tmp___9;
#line 357
  tmp___10 = __fswab32(extent_nr);
#line 357
  buffer->updates[i + 1].extent = tmp___10;
#line 358
  xor_sum = xor_sum ^ extent_nr;
#line 353
  i = i + 1;
  ldv_49022: ;
#line 353
  if (i < mx) {
#line 354
    goto ldv_49021;
  } else {

  }

#line 360
  goto ldv_49025;
  ldv_49024: 
#line 361
  buffer->updates[i + 1].pos = 4294967295U;
#line 362
  buffer->updates[i + 1].extent = 4294967295U;
#line 363
  xor_sum = ~ xor_sum;
#line 360
  i = i + 1;
  ldv_49025: ;
#line 360
  if (i <= 60) {
#line 361
    goto ldv_49024;
  } else {

  }
#line 365
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 366
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 367
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 369
  tmp___11 = __fswab32(xor_sum);
#line 369
  buffer->xor_sum = tmp___11;
#line 371
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 374
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 374
  if (tmp___12 == 0) {
#line 375
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 377
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 377
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 379
    mdev->al_tr_pos = 0;
  } else {

  }
#line 381
  if (mdev->al_tr_pos > 63) {
#line 381
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            381);
  } else {

  }
#line 382
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 384
  mutex_unlock(& mdev->md_io_mutex);
#line 386
  complete(& ((struct update_al_work *)w)->event);
#line 387
  put_ldev(mdev);
#line 389
  return (1);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 408
  xor_sum = 0U;
#line 410
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 414
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 414
  if (tmp == 0) {
#line 415
    return (-1);
  } else {

  }
#line 417
  tmp___0 = __fswab32(b->magic);
#line 417
  rv = tmp___0 == 2205418087U;
#line 419
  i = 0;
#line 419
  goto ldv_49039;
  ldv_49038: 
#line 420
  tmp___1 = __fswab32(b->updates[i].extent);
#line 420
  xor_sum = tmp___1 ^ xor_sum;
#line 419
  i = i + 1;
  ldv_49039: ;
#line 419
  if (i <= 61) {
#line 420
    goto ldv_49038;
  } else {

  }
#line 421
  tmp___2 = __fswab32(b->xor_sum);
#line 421
  rv = (tmp___2 == xor_sum) & rv;
#line 423
  return (rv);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 439
  active_extents = 0;
#line 440
  transactions = 0;
#line 441
  found_valid = 0;
#line 442
  from = 0;
#line 443
  to = 0;
#line 444
  from_tnr = 0U;
#line 445
  to_tnr = 0U;
#line 448
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 453
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 454
  tmp = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 454
  buffer = (struct al_transaction *)tmp;
#line 457
  i = 0;
#line 457
  goto ldv_49059;
  ldv_49058: 
#line 458
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 459
  if (rv == 0) {
#line 460
    goto ldv_49057;
  } else {

  }
#line 461
  if (rv == -1) {
#line 462
    mutex_unlock(& mdev->md_io_mutex);
#line 463
    return (0);
  } else {

  }
#line 465
  tmp___0 = __fswab32(buffer->tr_number);
#line 465
  cnr = tmp___0;
#line 467
  found_valid = found_valid + 1;
#line 467
  if (found_valid == 1) {
#line 468
    from = i;
#line 469
    to = i;
#line 470
    from_tnr = cnr;
#line 471
    to_tnr = cnr;
#line 472
    goto ldv_49057;
  } else {

  }
#line 474
  if ((int )cnr - (int )from_tnr < 0) {
#line 475
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 475
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              475);
    } else {

    }
#line 476
    from = i;
#line 477
    from_tnr = cnr;
  } else {

  }
#line 479
  if ((int )cnr - (int )to_tnr > 0) {
#line 480
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 480
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              480);
    } else {

    }
#line 481
    to = i;
#line 482
    to_tnr = cnr;
  } else {

  }
  ldv_49057: 
#line 457
  i = i + 1;
  ldv_49059: ;
#line 457
  if (i <= mx) {
#line 458
    goto ldv_49058;
  } else {

  }

#line 486
  if (found_valid == 0) {
#line 487
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 488
    mutex_unlock(& mdev->md_io_mutex);
#line 489
    return (1);
  } else {

  }
#line 494
  i = from;
  ldv_49074: 
#line 500
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 501
  _b = rv == 0;
#line 501
  if (_b != 0) {
#line 501
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            501);
  } else {

  }
#line 501
  if (_b != 0) {
#line 501
    goto cancel;
  } else {

  }
#line 502
  if (rv == -1) {
#line 503
    mutex_unlock(& mdev->md_io_mutex);
#line 504
    return (0);
  } else {

  }
#line 507
  tmp___1 = __fswab32(buffer->tr_number);
#line 507
  trn = tmp___1;
#line 509
  spin_lock_irq(& mdev->al_lock);
#line 515
  j = 61;
#line 515
  goto ldv_49071;
  ldv_49070: 
#line 516
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 516
  pos = (int )tmp___2;
#line 517
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 517
  extent_nr = tmp___3;
#line 519
  if (extent_nr == 4294967295U) {
#line 520
    goto ldv_49069;
  } else {

  }
#line 522
  lc_set(mdev->act_log, extent_nr, pos);
#line 523
  active_extents = active_extents + 1;
  ldv_49069: 
#line 515
  j = j - 1;
  ldv_49071: ;
#line 515
  if (j >= 0) {
#line 516
    goto ldv_49070;
  } else {

  }
#line 525
  spin_unlock_irq(& mdev->al_lock);
#line 527
  transactions = transactions + 1;
  cancel: ;
#line 530
  if (i == to) {
#line 531
    goto ldv_49073;
  } else {

  }
#line 532
  i = i + 1;
#line 533
  if (i > mx) {
#line 534
    i = 0;
  } else {

  }
#line 535
  goto ldv_49074;
  ldv_49073: 
#line 537
  mdev->al_tr_number = to_tnr + 1U;
#line 538
  mdev->al_tr_pos = to;
#line 539
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 539
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 541
    mdev->al_tr_pos = 0;
  } else {

  }
#line 544
  mutex_unlock(& mdev->md_io_mutex);
#line 546
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 549
  return (1);
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 559
  add = 0UL;
#line 563
  tmp___0 = lc_try_lock(mdev->act_log);
#line 563
  if (tmp___0 != 0) {
#line 563
    goto ldv_49083;
  } else {

  }
#line 563
  tmp___1 = get_current();
#line 563
  __wait.flags = 0U;
#line 563
  __wait.private = (void *)tmp___1;
#line 563
  __wait.func = & autoremove_wake_function;
#line 563
  __wait.task_list.next = & __wait.task_list;
#line 563
  __wait.task_list.prev = & __wait.task_list;
  ldv_49086: 
#line 563
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 563
  tmp___2 = lc_try_lock(mdev->act_log);
#line 563
  if (tmp___2 != 0) {
#line 563
    goto ldv_49085;
  } else {

  }
#line 563
  schedule();
#line 563
  goto ldv_49086;
  ldv_49085: 
#line 563
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49083: 
#line 565
  i = 0;
#line 565
  goto ldv_49091;
  ldv_49090: 
#line 566
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 566
  enr = tmp___3->lc_number;
#line 567
  if (enr == 4294967295U) {
#line 568
    goto ldv_49087;
  } else {

  }
#line 569
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 569
  tmp = (int )tmp___4;
#line 570
  descriptor.modname = "drbd";
#line 570
  descriptor.function = "drbd_al_apply_to_bm";
#line 570
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 570
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 570
  descriptor.lineno = 570U;
#line 570
  descriptor.flags = 0U;
#line 570
  tmp___5 = __builtin_expect((long )descriptor.flags & 1L, 0L);
#line 570
  if (tmp___5 != 0L) {
#line 570
    __dynamic_dev_dbg(& descriptor, (struct device  const  *)(& (mdev->vdisk)->part0.__dev),
                      "AL: set %d bits in extent %u\n", tmp, enr);
  } else {

  }
#line 571
  add = (unsigned long )tmp + add;
  ldv_49087: 
#line 565
  i = i + 1;
  ldv_49091: ;
#line 565
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 566
    goto ldv_49090;
  } else {

  }
#line 574
  lc_unlock(mdev->act_log);
#line 575
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 577
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 577
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 578
  return;
}
}
#line 581 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 585
  spin_lock_irq(& mdev->al_lock);
#line 586
  rv = al_ext->refcnt == 0U;
#line 587
  tmp = __builtin_expect(rv != 0, 1L);
#line 587
  if (tmp != 0L) {
#line 588
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 589
  spin_unlock_irq(& mdev->al_lock);
#line 591
  return (rv);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 608
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 608
  if (tmp == 0) {
#line 608
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            608);
  } else {

  }
#line 610
  i = 0;
#line 610
  goto ldv_49109;
  ldv_49108: 
#line 611
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 612
  if (al_ext->lc_number == 4294967295U) {
#line 613
    goto ldv_49103;
  } else {

  }
#line 614
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 614
  if (tmp___0 != 0) {
#line 614
    goto ldv_49104;
  } else {

  }
#line 614
  tmp___1 = get_current();
#line 614
  __wait.flags = 0U;
#line 614
  __wait.private = (void *)tmp___1;
#line 614
  __wait.func = & autoremove_wake_function;
#line 614
  __wait.task_list.next = & __wait.task_list;
#line 614
  __wait.task_list.prev = & __wait.task_list;
  ldv_49107: 
#line 614
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 614
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 614
  if (tmp___2 != 0) {
#line 614
    goto ldv_49106;
  } else {

  }
#line 614
  schedule();
#line 614
  goto ldv_49107;
  ldv_49106: 
#line 614
  finish_wait(& mdev->al_wait, & __wait);
  ldv_49104: ;
  ldv_49103: 
#line 610
  i = i + 1;
  ldv_49109: ;
#line 610
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 611
    goto ldv_49108;
  } else {

  }
#line 617
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 618
  return;
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned long tmp___2 ;

  {
#line 622
  __mptr = (struct drbd_work  const  *)w;
#line 622
  udw = (struct update_odbm_work *)__mptr;
#line 624
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 624
  if (tmp___0 == 0) {
#line 625
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 625
    if (tmp != 0) {
#line 626
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 627
    kfree((void const   *)udw);
#line 628
    return (1);
  } else {

  }
#line 631
  tmp___1 = rs_extent_to_bm_page(udw->enr);
#line 631
  drbd_bm_write_page(mdev, tmp___1);
#line 632
  put_ldev(mdev);
#line 634
  kfree((void const   *)udw);
#line 636
  tmp___2 = drbd_bm_total_weight(mdev);
#line 636
  if (tmp___2 <= mdev->rs_failed) {
#line 637
    switch ((int )mdev->state.ldv_38894.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 640
    drbd_resync_finished(mdev);
    default: ;
#line 643
    goto ldv_49125;
    }
    ldv_49125: ;
  } else {

  }
#line 646
  drbd_bcast_sync_progress(mdev);
#line 648
  return (1);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 666
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 666
  if (tmp == 0) {
#line 666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            666);
  } else {

  }
#line 670
  enr = (unsigned int )(sector >> 15);
#line 672
  e = lc_get(mdev->resync, enr);
#line 673
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 674
    __mptr = (struct lc_element  const  *)e;
#line 674
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 675
    if (ext->lce.lc_number == enr) {
#line 676
      if (success != 0) {
#line 677
        ext->rs_left = ext->rs_left - count;
      } else {
#line 679
        ext->rs_failed = ext->rs_failed + count;
      }
#line 680
      if (ext->rs_left < ext->rs_failed) {
#line 681
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 686
        dump_stack();
#line 688
        lc_put(mdev->resync, & ext->lce);
#line 689
        val.i = 0U;
#line 689
        val.ldv_38894.conn = 1U;
#line 689
        mask.i = 0U;
#line 689
        mask.ldv_38894.conn = 31U;
#line 689
        drbd_force_state(mdev, mask, val);
#line 690
        return;
      } else {

      }
    } else {
#line 699
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 699
      rs_left = tmp___0;
#line 700
      if (ext->flags != 0UL) {
#line 701
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 705
        ext->flags = 0UL;
      } else {

      }
#line 707
      if (ext->rs_failed != 0) {
#line 708
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
      } else {

      }
#line 712
      ext->rs_left = rs_left;
#line 713
      ext->rs_failed = success == 0 ? count : 0;
#line 714
      lc_changed(mdev->resync, & ext->lce);
    }
#line 716
    lc_put(mdev->resync, & ext->lce);
#line 719
    if (ext->rs_left == ext->rs_failed) {
#line 720
      ext->rs_failed = 0;
#line 722
      tmp___1 = kmalloc(32UL, 32U);
#line 722
      udw = (struct update_odbm_work *)tmp___1;
#line 723
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 724
        udw->enr = ext->lce.lc_number;
#line 725
        udw->w.cb = & w_update_odbm;
#line 726
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 728
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
      }
    } else {

    }
  } else {
#line 732
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 736
  return;
}
}
#line 739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_advance_rs_marks(struct drbd_conf *mdev , unsigned long still_to_go ) 
{ 
  unsigned long now ;
  unsigned long last ;
  int next ;

  {
#line 741
  now = jiffies;
#line 742
  last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 743
  next = (mdev->rs_last_mark + 1) % 8;
#line 744
  if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 745
    if ((mdev->rs_mark_left[mdev->rs_last_mark] != still_to_go && (unsigned int )*((unsigned short *)mdev + 1138UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1138UL) != 320U) {
#line 748
      mdev->rs_mark_time[next] = now;
#line 749
      mdev->rs_mark_left[next] = still_to_go;
#line 750
      mdev->rs_last_mark = next;
    } else {

    }
  } else {

  }
#line 752
  return;
}
}
#line 762 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 767
  count = 0UL;
#line 769
  wake_up = 0;
#line 772
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 773
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 775
    return;
  } else {

  }
#line 777
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 778
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 780
  _b = sector >= nr_sectors;
#line 780
  if (_b != 0) {
#line 780
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            780);
  } else {

  }
#line 780
  if (_b != 0) {
#line 780
    return;
  } else {

  }
#line 781
  _b___0 = esector >= nr_sectors;
#line 781
  if (_b___0 != 0) {
#line 781
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            781);
  } else {

  }
#line 781
  if (_b___0 != 0) {
#line 781
    esector = nr_sectors - 1UL;
  } else {

  }
#line 783
  lbnr = (nr_sectors - 1UL) >> 3;
#line 788
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 788
  if (tmp != 0L) {
#line 789
    return;
  } else {

  }
#line 790
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 790
  if (tmp___0 != 0L) {
#line 791
    ebnr = lbnr;
  } else {
#line 793
    ebnr = (esector - 7UL) >> 3;
  }
#line 794
  sbnr = (sector + 7UL) >> 3;
#line 796
  if (sbnr > ebnr) {
#line 797
    return;
  } else {

  }
#line 803
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 803
  count = (unsigned long )tmp___1;
#line 804
  if (count != 0UL) {
#line 804
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 804
    if (tmp___4 != 0) {
#line 805
      tmp___2 = drbd_bm_total_weight(mdev);
#line 805
      drbd_advance_rs_marks(mdev, tmp___2);
#line 806
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 806
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 807
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 808
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 812
      wake_up = 1;
#line 813
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 815
  if (wake_up != 0) {
#line 816
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 817
  return;
}
}
#line 827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                           unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 832
  count = 0U;
#line 835
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 838
    return (0);
  } else {

  }
#line 841
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 841
  if (tmp == 0) {
#line 842
    return (0);
  } else {

  }
#line 844
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 845
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 847
  _b = sector >= nr_sectors;
#line 847
  if (_b != 0) {
#line 847
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            847);
  } else {

  }
#line 847
  if (_b != 0) {
#line 848
    goto out;
  } else {

  }
#line 849
  _b___0 = esector >= nr_sectors;
#line 849
  if (_b___0 != 0) {
#line 849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            849);
  } else {

  }
#line 849
  if (_b___0 != 0) {
#line 850
    esector = nr_sectors - 1UL;
  } else {

  }
#line 852
  lbnr = (nr_sectors - 1UL) >> 3;
#line 856
  sbnr = sector >> 3;
#line 857
  ebnr = esector >> 3;
#line 861
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 861
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 862
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 862
  count = (unsigned int )tmp___1;
#line 864
  enr = (unsigned int )(sector >> 15);
#line 865
  e = lc_find(mdev->resync, enr);
#line 866
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 867
    __mptr = (struct lc_element  const  *)e;
#line 867
    __mptr___0 = (struct lc_element  const  *)e;
#line 867
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 868
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 871
  put_ldev(mdev);
#line 873
  return ((int )count);
}
}
#line 877 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 881
  wakeup = 0;
#line 884
  spin_lock_irq(& mdev->al_lock);
#line 885
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 886
    spin_unlock_irq(& mdev->al_lock);
#line 887
    return (0);
  } else {

  }
#line 889
  e = lc_get(mdev->resync, enr);
#line 890
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 890
    __mptr = (struct lc_element  const  *)e;
#line 890
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 890
    bm_ext = 0;
  }
#line 891
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 892
    if (bm_ext->lce.lc_number != enr) {
#line 893
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 894
      bm_ext->rs_failed = 0;
#line 895
      lc_changed(mdev->resync, & bm_ext->lce);
#line 896
      wakeup = 1;
    } else {

    }
#line 898
    if (bm_ext->lce.refcnt == 1U) {
#line 899
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 900
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 902
  rs_flags = (mdev->resync)->flags;
#line 903
  spin_unlock_irq(& mdev->al_lock);
#line 904
  if (wakeup != 0) {
#line 905
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 907
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 908
    if ((rs_flags & 4UL) != 0UL) {
#line 909
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 911
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 911
    if (tmp != 0L) {
#line 911
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (911), "i" (12UL));
      ldv_49216: ;
#line 911
      goto ldv_49216;
    } else {

    }
  } else {

  }
#line 914
  return (bm_ext);
}
}
#line 917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 920
  rv = 0;
#line 922
  spin_lock_irq(& mdev->al_lock);
#line 923
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 923
  if (tmp != 0L) {
#line 924
    rv = 1;
  } else {
#line 926
    al_ext = lc_find(mdev->act_log, enr);
#line 927
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 928
      if (al_ext->refcnt != 0U) {
#line 929
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 932
  spin_unlock_irq(& mdev->al_lock);
#line 939
  return (rv);
}
}
#line 949 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int sa ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;

  {
#line 951
  enr = (unsigned int )(sector >> 15);
#line 954
  sa = 200;
  retry: 
#line 958
  __ret = 0;
#line 958
  bm_ext = _bme_get(mdev, enr);
#line 958
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 958
    tmp = get_current();
#line 958
    __wait.flags = 0U;
#line 958
    __wait.private = (void *)tmp;
#line 958
    __wait.func = & autoremove_wake_function;
#line 958
    __wait.task_list.next = & __wait.task_list;
#line 958
    __wait.task_list.prev = & __wait.task_list;
    ldv_49237: 
#line 958
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 958
    bm_ext = _bme_get(mdev, enr);
#line 958
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 958
      goto ldv_49235;
    } else {

    }
#line 958
    tmp___0 = get_current();
#line 958
    tmp___1 = signal_pending(tmp___0);
#line 958
    if (tmp___1 == 0) {
#line 958
      schedule();
#line 958
      goto ldv_49236;
    } else {

    }
#line 958
    __ret = -512;
#line 958
    goto ldv_49235;
    ldv_49236: ;
#line 958
    goto ldv_49237;
    ldv_49235: 
#line 958
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 958
  sig = __ret;
#line 960
  if (sig != 0) {
#line 961
    return (-4);
  } else {

  }
#line 963
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 963
  if (tmp___2 != 0) {
#line 964
    return (0);
  } else {

  }
#line 966
  i = 0;
#line 966
  goto ldv_49246;
  ldv_49245: 
#line 967
  __ret___0 = 0;
#line 967
  tmp___8 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 967
  if (tmp___8 != 0) {
#line 967
    tmp___9 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 967
    if (tmp___9 == 0) {
#line 967
      tmp___3 = get_current();
#line 967
      __wait___0.flags = 0U;
#line 967
      __wait___0.private = (void *)tmp___3;
#line 967
      __wait___0.func = & autoremove_wake_function;
#line 967
      __wait___0.task_list.next = & __wait___0.task_list;
#line 967
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_49243: 
#line 967
      prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 967
      tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 967
      if (tmp___4 == 0) {
#line 967
        goto ldv_49241;
      } else {
#line 967
        tmp___5 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 967
        if (tmp___5 != 0) {
#line 967
          goto ldv_49241;
        } else {

        }
      }
#line 967
      tmp___6 = get_current();
#line 967
      tmp___7 = signal_pending(tmp___6);
#line 967
      if (tmp___7 == 0) {
#line 967
        schedule();
#line 967
        goto ldv_49242;
      } else {

      }
#line 967
      __ret___0 = -512;
#line 967
      goto ldv_49241;
      ldv_49242: ;
#line 967
      goto ldv_49243;
      ldv_49241: 
#line 967
      finish_wait(& mdev->al_wait, & __wait___0);
    } else {

    }
  } else {

  }
#line 967
  sig = __ret___0;
#line 971
  if (sig != 0) {
#line 971
    goto _L;
  } else {
#line 971
    tmp___12 = constant_test_bit(2U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 971
    if (tmp___12 != 0 && sa != 0) {
      _L: /* CIL Label */ 
#line 972
      spin_lock_irq(& mdev->al_lock);
#line 973
      tmp___10 = lc_put(mdev->resync, & bm_ext->lce);
#line 973
      if (tmp___10 == 0U) {
#line 974
        bm_ext->flags = 0UL;
#line 975
        mdev->resync_locked = mdev->resync_locked - 1U;
#line 976
        __wake_up(& mdev->al_wait, 3U, 1, 0);
      } else {

      }
#line 978
      spin_unlock_irq(& mdev->al_lock);
#line 979
      if (sig != 0) {
#line 980
        return (-4);
      } else {

      }
#line 981
      tmp___11 = schedule_timeout_interruptible(25L);
#line 981
      if (tmp___11 != 0L) {
#line 982
        return (-4);
      } else {

      }
#line 983
      if (sa != 0) {
#line 983
        sa = sa - 1;
#line 983
        if (sa == 0) {
#line 984
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_begin_io() stepped aside for 20sec.Resync stalled?\n");
        } else {

        }
      } else {

      }
#line 986
      goto retry;
    } else {

    }
  }
#line 966
  i = i + 1;
  ldv_49246: ;
#line 966
  if (i <= 3) {
#line 967
    goto ldv_49245;
  } else {

  }
#line 989
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 990
  return (0);
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1004
  enr = (unsigned int )(sector >> 15);
#line 1005
  al_enr = enr * 4U;
#line 1010
  spin_lock_irq(& mdev->al_lock);
#line 1011
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1025
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1026
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1026
      __mptr = (struct lc_element  const  *)e;
#line 1026
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1026
      bm_ext = 0;
    }
#line 1027
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1028
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1028
      if (tmp != 0) {
#line 1028
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1028);
      } else {

      }
#line 1029
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1029
      if (tmp___0 == 0) {
#line 1029
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1029);
      } else {

      }
#line 1030
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1031
      mdev->resync_wenr = 4294967295U;
#line 1032
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1032
      if (tmp___1 == 0U) {
#line 1033
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1034
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1036
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1040
  e = lc_try_get(mdev->resync, enr);
#line 1041
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1041
    __mptr___0 = (struct lc_element  const  *)e;
#line 1041
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1041
    bm_ext = 0;
  }
#line 1042
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1043
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1043
    if (tmp___2 != 0) {
#line 1044
      goto proceed;
    } else {

    }
#line 1045
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1045
    if (tmp___3 == 0) {
#line 1046
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1052
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1053
      if (bm_ext->lce.refcnt == 0U) {
#line 1053
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1053);
      } else {

      }
    }
#line 1055
    goto check_al;
  } else {
#line 1058
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1059
      goto try_again;
    } else {

    }
#line 1061
    e = lc_get(mdev->resync, enr);
#line 1062
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1062
      __mptr___1 = (struct lc_element  const  *)e;
#line 1062
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1062
      bm_ext = 0;
    }
#line 1063
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1064
      rs_flags = (mdev->resync)->flags;
#line 1065
      if ((rs_flags & 4UL) != 0UL) {
#line 1066
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1068
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1068
      if (tmp___4 != 0L) {
#line 1068
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1068), "i" (12UL));
        ldv_49267: ;
#line 1068
        goto ldv_49267;
      } else {

      }
#line 1069
      goto try_again;
    } else {

    }
#line 1071
    if (bm_ext->lce.lc_number != enr) {
#line 1072
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1073
      bm_ext->rs_failed = 0;
#line 1074
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1075
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1076
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1076
      if (tmp___5 != 0) {
#line 1076
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1076);
      } else {

      }
    } else {

    }
#line 1078
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1079
    if (bm_ext->lce.refcnt != 1U) {
#line 1079
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1079);
    } else {

    }
#line 1080
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1081
    goto check_al;
  }
  check_al: 
#line 1084
  i = 0;
#line 1084
  goto ldv_49269;
  ldv_49268: 
#line 1085
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1085
  if (tmp___6 != 0L) {
#line 1086
    goto try_again;
  } else {

  }
#line 1087
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1087
  if (tmp___7 != 0) {
#line 1088
    goto try_again;
  } else {

  }
#line 1084
  i = i + 1;
  ldv_49269: ;
#line 1084
  if (i <= 3) {
#line 1085
    goto ldv_49268;
  } else {

  }
#line 1090
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1092
  mdev->resync_wenr = 4294967295U;
#line 1093
  spin_unlock_irq(& mdev->al_lock);
#line 1094
  return (0);
  try_again: ;
#line 1097
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1098
    mdev->resync_wenr = enr;
  } else {

  }
#line 1099
  spin_unlock_irq(& mdev->al_lock);
#line 1100
  return (-11);
}
}
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1105
  enr = (unsigned int )(sector >> 15);
#line 1110
  tmp = spinlock_check(& mdev->al_lock);
#line 1110
  flags = _raw_spin_lock_irqsave(tmp);
#line 1111
  e = lc_find(mdev->resync, enr);
#line 1112
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1112
    __mptr = (struct lc_element  const  *)e;
#line 1112
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1112
    bm_ext = 0;
  }
#line 1113
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1114
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1115
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1115
    if (tmp___0 != 0) {
#line 1116
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1117
    return;
  } else {

  }
#line 1120
  if (bm_ext->lce.refcnt == 0U) {
#line 1121
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1122
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1125
    return;
  } else {

  }
#line 1128
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1128
  if (tmp___1 == 0U) {
#line 1129
    bm_ext->flags = 0UL;
#line 1130
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1131
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1134
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1135
  return;
}
}
#line 1141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1143
  spin_lock_irq(& mdev->al_lock);
#line 1145
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1145
  if (tmp != 0) {
#line 1146
    lc_reset(mdev->resync);
#line 1147
    put_ldev(mdev);
  } else {

  }
#line 1149
  mdev->resync_locked = 0U;
#line 1150
  mdev->resync_wenr = 4294967295U;
#line 1151
  spin_unlock_irq(& mdev->al_lock);
#line 1152
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1153
  return;
}
}
#line 1162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1168
  spin_lock_irq(& mdev->al_lock);
#line 1170
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1170
  if (tmp___3 != 0) {
#line 1172
    i = 0;
#line 1172
    goto ldv_49298;
    ldv_49297: 
#line 1173
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1174
    __mptr = (struct lc_element  const  *)e;
#line 1174
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1175
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1176
      goto ldv_49296;
    } else {

    }
#line 1177
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1178
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1181
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1181
      if (tmp != 0) {
#line 1181
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1181);
      } else {

      }
#line 1182
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1182
      if (tmp___0 == 0) {
#line 1182
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1182);
      } else {

      }
#line 1183
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1184
      mdev->resync_wenr = 4294967295U;
#line 1185
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1187
    if (bm_ext->lce.refcnt != 0U) {
#line 1188
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1190
      put_ldev(mdev);
#line 1191
      spin_unlock_irq(& mdev->al_lock);
#line 1192
      return (-11);
    } else {

    }
#line 1194
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1194
    if (tmp___1 != 0) {
#line 1194
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1194);
    } else {

    }
#line 1195
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1195
    if (tmp___2 != 0) {
#line 1195
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1195);
    } else {

    }
#line 1196
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_49296: 
#line 1172
    i = i + 1;
    ldv_49298: ;
#line 1172
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1173
      goto ldv_49297;
    } else {

    }

#line 1198
    if ((mdev->resync)->used != 0U) {
#line 1198
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1198);
    } else {

    }
#line 1199
    put_ldev(mdev);
  } else {

  }
#line 1201
  spin_unlock_irq(& mdev->al_lock);
#line 1203
  return (0);
}
}
#line 1212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1218
  wake_up = 0;
#line 1220
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1221
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1223
    return;
  } else {

  }
#line 1225
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1226
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1228
  _b = sector >= nr_sectors;
#line 1228
  if (_b != 0) {
#line 1228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1228);
  } else {

  }
#line 1228
  if (_b != 0) {
#line 1228
    return;
  } else {

  }
#line 1229
  _b___0 = esector >= nr_sectors;
#line 1229
  if (_b___0 != 0) {
#line 1229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1229);
  } else {

  }
#line 1229
  if (_b___0 != 0) {
#line 1229
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1231
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1236
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1236
  if (tmp != 0L) {
#line 1237
    return;
  } else {

  }
#line 1238
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1238
  if (tmp___0 != 0L) {
#line 1239
    ebnr = lbnr;
  } else {
#line 1241
    ebnr = (esector - 7UL) >> 3;
  }
#line 1242
  sbnr = (sector + 7UL) >> 3;
#line 1244
  if (sbnr > ebnr) {
#line 1245
    return;
  } else {

  }
#line 1251
  spin_lock_irq(& mdev->al_lock);
#line 1252
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1252
  count = (unsigned long )tmp___1;
#line 1253
  if (count != 0UL) {
#line 1254
    mdev->rs_failed = mdev->rs_failed + count;
#line 1256
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1256
    if (tmp___2 != 0) {
#line 1257
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1258
      put_ldev(mdev);
    } else {

    }
#line 1263
    wake_up = 1;
  } else {

  }
#line 1265
  spin_unlock_irq(& mdev->al_lock);
#line 1266
  if (wake_up != 0) {
#line 1267
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1268
  return;
}
}
#line 292 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 295
  tmp = list_empty(list);
#line 295
  if (tmp == 0) {
#line 296
    __list_splice(list, head, head->next);
  } else {

  }
#line 297
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 113 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 169 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 171
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 173
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 174
  memset((void *)dst, 255, (size_t )len);
#line 176
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 177
  return;
}
}
#line 276 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 280
  tmp___0 = __bitmap_weight(src, nbits);
#line 280
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 641
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 643
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 91 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 484 "include/linux/module.h"
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 490
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 494
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 256 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 280
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 203 "include/linux/page-flags.h"
__inline static int PageSlab(struct page  const  *page ) 
{ 
  int tmp ;

  {
#line 203
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 203
  return (tmp);
}
}
#line 2052 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2053
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2054
extern struct block_device *bdget(dev_t  ) ;
#line 2058
extern void bdput(struct block_device * ) ;
#line 2096
extern int blkdev_put(struct block_device * , fmode_t  ) ;
#line 1921 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2195
extern int wake_up_process(struct task_struct * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , umode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 47 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 48
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 8 "include/linux/kthread.h"
extern struct task_struct *kthread_create_on_node(int (*)(void * ) , void * , int  ,
                                                  char const   *  , ...) ;
#line 411 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 416
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 610
extern struct gendisk *alloc_disk(int  ) ;
#line 612
extern void put_disk(struct gendisk * ) ;
#line 275 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 277
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 278
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 278
    return (tmp);
  } else {

  }
#line 279
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 826 "include/linux/blkdev.h"
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 827
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 828
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 830
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 861
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 876
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
bool allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 157 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 593
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 593
  if (tmp != 0L) {
#line 593
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (593), "i" (12UL));
    ldv_47678: ;
#line 593
    goto ldv_47678;
  } else {

  }
#line 594
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 595
  return;
}
}
#line 604 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 606
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 607
  return;
}
}
#line 616 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 618
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 618
  if (tmp != 0L) {
#line 618
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (618), "i" (12UL));
    ldv_47693: ;
#line 618
    goto ldv_47693;
  } else {

  }
#line 619
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 620
  return;
}
}
#line 1193
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1207
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) ;
#line 1213
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1218
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1224
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1228
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1267
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1269
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1274
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1280
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1281
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1282
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1284
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1290
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) ;
#line 1489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1490 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1491 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1493 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1494 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1496 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1497 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1499 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1503
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1504
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1506 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1516
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1517
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1680
void drbd_nl_cleanup(void) ;
#line 1681
int drbd_nl_init(void) ;
#line 1682
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1781 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1783
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp == 0) {
#line 1783
    goto ldv_48773;
  } else {

  }
#line 1783
  tmp___0 = get_current();
#line 1783
  __wait.flags = 0U;
#line 1783
  __wait.private = (void *)tmp___0;
#line 1783
  __wait.func = & autoremove_wake_function;
#line 1783
  __wait.task_list.next = & __wait.task_list;
#line 1783
  __wait.task_list.prev = & __wait.task_list;
  ldv_48776: 
#line 1783
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1783
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1783
  if (tmp___1 == 0) {
#line 1783
    goto ldv_48775;
  } else {

  }
#line 1783
  schedule();
#line 1783
  goto ldv_48776;
  ldv_48775: 
#line 1783
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_48773: ;
#line 1786
  return;
}
}
#line 1824 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;
  union drbd_state __ns___0 ;

  {
#line 1826
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1828
  if (forcedetach == 0) {
#line 1829
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1829
    if (tmp != 0) {
#line 1830
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1831
    if ((int )mdev->state.ldv_38894.disk > 4) {
#line 1832
      __ns.i = mdev->state.i;
#line 1832
      __ns.ldv_38894.disk = 4U;
#line 1832
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1833
    goto ldv_48801;
  } else {

  }
  case 2: ;
  case 1: 
#line 1838
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1839
  if ((int )mdev->state.ldv_38894.disk > 2) {
#line 1840
    __ns___0.i = mdev->state.i;
#line 1840
    __ns___0.ldv_38894.disk = 2U;
#line 1840
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1841
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1844
  goto ldv_48801;
  }
  ldv_48801: ;
#line 1847
  return;
}
}
#line 1857 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1860
  if (error != 0) {
#line 1862
    tmp = spinlock_check(& mdev->req_lock);
#line 1862
    flags = _raw_spin_lock_irqsave(tmp);
#line 1863
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1864
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1866
  return;
}
}
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_48842;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_48842;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_48842: ;
#line 1942
  return (s);
}
}
#line 1950 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1953
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1955
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1961
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1962
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1962
    if (tmp != 0) {
#line 1963
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1964
      dump_stack();
    } else {

    }
#line 1966
    return (0UL);
  } else {

  }
#line 1968
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1968
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1971
  return (0UL);
  }
}
}
#line 2033 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2035
  _drbd_thread_stop(thi, 0, 0);
#line 2036
  return;
}
}
#line 2038 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 2040
  _drbd_thread_stop(thi, 1, 0);
#line 2041
  return;
}
}
#line 2255 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(struct drbd_conf *mdev ) 
{ 
  union drbd_state s ;

  {
#line 2257
  s = mdev->state;
#line 2262
  switch ((unsigned int )s.ldv_38894.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
  case 22U: ;
  case 23U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
#line 2287
  goto ldv_48973;
  case 13U: ;
#line 2291
  if (mdev->agreed_pro_version <= 95) {
#line 2292
    return (0);
  } else {

  }
#line 2293
  goto ldv_48973;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2300
  return (0);
  }
  ldv_48973: ;
#line 2303
  switch ((unsigned int )s.ldv_38894.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2310
  goto ldv_48983;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2319
  return (0);
  }
  ldv_48983: ;
#line 2322
  return (1);
}
}
#line 2330 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static bool may_inc_ap_bio___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2332
  tmp = drbd_get_max_buffers(mdev);
#line 2332
  mxb = tmp;
#line 2334
  tmp___0 = is_susp(mdev->state);
#line 2334
  if (tmp___0 != 0) {
#line 2335
    return (0);
  } else {

  }
#line 2336
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2336
  if (tmp___1 != 0) {
#line 2337
    return (0);
  } else {

  }
#line 2344
  tmp___2 = drbd_state_is_stable___0(mdev);
#line 2344
  if (tmp___2 == 0) {
#line 2345
    return (0);
  } else {

  }
#line 2349
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2349
  if (tmp___3 > mxb) {
#line 2350
    return (0);
  } else {

  }
#line 2351
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2351
  if (tmp___4 != 0) {
#line 2352
    return (0);
  } else {

  }
#line 2353
  return (1);
}
}
#line 2433 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2435
  sk = (mdev->data.socket)->sk;
#line 2436
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2437
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2438
  return;
}
}
#line 2440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2447
  return (0);
}
}
#line 326 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_49236;
  ldv_49235: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_49236: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_49235;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                     0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                  & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 89
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 130 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 135
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{0U}}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}, 1250, 5, 0,
    0, 0UL};
#line 164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 164
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 206
  tmp = kmalloc(56UL, 208U);
#line 206
  b = (struct drbd_tl_epoch *)tmp;
#line 207
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 208
    return (0);
  } else {

  }
#line 209
  INIT_LIST_HEAD(& b->requests);
#line 210
  INIT_LIST_HEAD(& b->w.list);
#line 211
  b->next = 0;
#line 212
  b->br_number = 4711U;
#line 213
  b->n_writes = 0;
#line 214
  b->w.cb = 0;
#line 216
  mdev->oldest_tle = b;
#line 217
  mdev->newest_tle = b;
#line 218
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 220
  mdev->tl_hash = 0;
#line 221
  mdev->tl_hash_s = 0U;
#line 223
  return (1);
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 228
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            228);
  } else {

  }
#line 229
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 229
  if (tmp == 0) {
#line 229
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            229);
  } else {

  }
#line 230
  kfree((void const   *)mdev->oldest_tle);
#line 231
  mdev->oldest_tle = 0;
#line 232
  kfree((void const   *)mdev->unused_spare_tle);
#line 233
  mdev->unused_spare_tle = 0;
#line 234
  kfree((void const   *)mdev->tl_hash);
#line 235
  mdev->tl_hash = 0;
#line 236
  mdev->tl_hash_s = 0U;
#line 237
  return;
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 250
  INIT_LIST_HEAD(& new->requests);
#line 251
  INIT_LIST_HEAD(& new->w.list);
#line 252
  new->w.cb = 0;
#line 253
  new->next = 0;
#line 254
  new->n_writes = 0;
#line 256
  newest_before = mdev->newest_tle;
#line 259
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 260
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 261
    (mdev->newest_tle)->next = new;
#line 262
    mdev->newest_tle = new;
  } else {

  }
#line 264
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 283
  spin_lock_irq(& mdev->req_lock);
#line 285
  b = mdev->oldest_tle;
#line 288
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 289
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 291
    goto bail;
  } else {

  }
#line 293
  if (b->br_number != barrier_nr) {
#line 294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 296
    goto bail;
  } else {

  }
#line 298
  if ((unsigned int )b->n_writes != set_size) {
#line 299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 301
    goto bail;
  } else {

  }
#line 305
  le = b->requests.next;
#line 305
  tle = le->next;
#line 305
  goto ldv_49464;
  ldv_49463: 
#line 306
  __mptr = (struct list_head  const  *)le;
#line 306
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 307
  _req_mod(r, barrier_acked);
#line 305
  le = tle;
#line 305
  tle = le->next;
  ldv_49464: ;
#line 305
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 306
    goto ldv_49463;
  } else {

  }
#line 322
  list_del_init(& b->requests);
#line 324
  nob = b->next;
#line 325
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 325
  if (tmp != 0) {
#line 326
    _tl_add_barrier(mdev, b);
#line 327
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 328
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 332
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 332
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              332);
    } else {

    }
#line 333
    mdev->oldest_tle = nob;
#line 334
    kfree((void const   *)b);
  }
#line 337
  spin_unlock_irq(& mdev->req_lock);
#line 338
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 338
  if (tmp___0 != 0) {
#line 338
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 338
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 338
  if (tmp___2 < 0) {
#line 338
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 338
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 338, tmp___1);
  } else {

  }
#line 340
  return;
  bail: 
#line 343
  spin_unlock_irq(& mdev->req_lock);
#line 344
  val.i = 0U;
#line 344
  val.ldv_38894.conn = 6U;
#line 344
  mask.i = 0U;
#line 344
  mask.ldv_38894.conn = 31U;
#line 344
  drbd_force_state(mdev, mask, val);
#line 346
  return;
}
}
#line 356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 363
  b = mdev->oldest_tle;
#line 364
  pn = & mdev->oldest_tle;
#line 365
  goto ldv_49499;
  ldv_49498: 
#line 366
  n_writes = 0;
#line 367
  n_reads = 0;
#line 368
  INIT_LIST_HEAD(& carry_reads);
#line 369
  le = b->requests.next;
#line 369
  tle = le->next;
#line 369
  goto ldv_49491;
  ldv_49490: 
#line 370
  __mptr = (struct list_head  const  *)le;
#line 370
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 371
  rv = _req_mod(req, what);
#line 373
  n_writes = (rv & 1) + n_writes;
#line 374
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 369
  le = tle;
#line 369
  tle = le->next;
  ldv_49491: ;
#line 369
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 370
    goto ldv_49490;
  } else {

  }
#line 376
  tmp = b->next;
#line 378
  if (n_writes != 0) {
#line 379
    if ((unsigned int )what == 23U) {
#line 380
      b->n_writes = n_writes;
#line 381
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 382
        b->w.cb = & w_send_barrier;
#line 383
        inc_ap_pending(mdev);
#line 384
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 387
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 389
    pn = & b->next;
  } else {
#line 391
    if (n_reads != 0) {
#line 392
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 395
    list_del(& b->requests);
#line 400
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 401
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 401
      if (tmp___0 != 0) {
#line 401
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 401
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 401
      if (tmp___2 < 0) {
#line 401
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 401
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 401, tmp___1);
      } else {

      }
    } else {

    }
#line 403
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 405
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 405
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                405);
      } else {

      }
#line 406
      INIT_LIST_HEAD(& b->requests);
#line 407
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 408
      INIT_LIST_HEAD(& b->w.list);
#line 409
      b->w.cb = 0;
#line 410
      b->br_number = random32();
#line 411
      b->n_writes = 0;
#line 413
      *pn = b;
#line 414
      goto ldv_49497;
    } else {

    }
#line 416
    *pn = tmp;
#line 417
    kfree((void const   *)b);
  }
#line 419
  b = tmp;
#line 420
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_49499: ;
#line 365
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 366
    goto ldv_49498;
  } else {

  }
  ldv_49497: ;
#line 370
  return;
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 438
  spin_lock_irq(& mdev->req_lock);
#line 440
  _tl_restart(mdev, connection_lost_while_pending);
#line 443
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 443
  if (tmp == 0) {
#line 443
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            443);
  } else {

  }
#line 446
  le = mdev->out_of_sequence_requests.next;
#line 446
  tle = le->next;
#line 446
  goto ldv_49509;
  ldv_49508: 
#line 447
  __mptr = (struct list_head  const  *)le;
#line 447
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 450
  _req_mod(r, connection_lost_while_pending);
#line 446
  le = tle;
#line 446
  tle = le->next;
  ldv_49509: ;
#line 446
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 447
    goto ldv_49508;
  } else {

  }
#line 454
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 456
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 458
  spin_unlock_irq(& mdev->req_lock);
#line 459
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 463
  spin_lock_irq(& mdev->req_lock);
#line 464
  _tl_restart(mdev, what);
#line 465
  spin_unlock_irq(& mdev->req_lock);
#line 466
  return;
}
}
#line 474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 477
  return (((((int )os.ldv_38894.conn > 9 && (int )ns.ldv_38894.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_38894.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f ,
                                     union drbd_state mask , union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;

  {
#line 494
  tmp = spinlock_check(& mdev->req_lock);
#line 494
  flags = _raw_spin_lock_irqsave(tmp);
#line 495
  os = mdev->state;
#line 496
  ns.i = (os.i & ~ mask.i) | val.i;
#line 497
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 498
  ns = mdev->state;
#line 499
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 501
  return (rv);
}
}
#line 510 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 513
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 514
  return;
}
}
#line 516
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 517
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) ;
#line 520
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 522
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 526 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 533
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 533
  if (tmp != 0) {
#line 534
    return (SS_CW_SUCCESS);
  } else {

  }
#line 536
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 536
  if (tmp___0 != 0) {
#line 537
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 539
  rv = SS_UNKNOWN_ERROR;
#line 540
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 540
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 541
  os = mdev->state;
#line 542
  ns.i = (os.i & ~ mask.i) | val.i;
#line 543
  ns = sanitize_state(mdev, os, ns, 0);
#line 545
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 545
  if (tmp___2 == 0) {
#line 546
    rv = SS_CW_NO_NEED;
  } else {

  }
#line 547
  if ((int )rv == 0) {
#line 548
    rv = is_valid_state(mdev, ns);
#line 549
    if ((int )rv == 1) {
#line 550
      rv = is_valid_state_transition(mdev, ns, os);
#line 551
      if ((int )rv == 1) {
#line 552
        rv = SS_UNKNOWN_ERROR;
      } else {

      }
    } else {

    }
  } else {

  }
#line 555
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 557
  return (rv);
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv drbd_req_state(struct drbd_conf *mdev , union drbd_state mask ,
                                         union drbd_state val , enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  enum drbd_state_rv rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  raw_spinlock_t *tmp___2 ;
  int tmp___3 ;
  struct task_struct *tmp___4 ;

  {
#line 579
  init_completion(& done);
#line 581
  if (((unsigned int )f & 8U) != 0U) {
#line 582
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 584
  tmp = spinlock_check(& mdev->req_lock);
#line 584
  flags = _raw_spin_lock_irqsave(tmp);
#line 585
  os = mdev->state;
#line 586
  ns.i = (os.i & ~ mask.i) | val.i;
#line 587
  ns = sanitize_state(mdev, os, ns, 0);
#line 589
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 589
  if (tmp___3 != 0) {
#line 590
    rv = is_valid_state(mdev, ns);
#line 591
    if ((int )rv == 1) {
#line 592
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 593
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 595
    if ((int )rv <= 0) {
#line 596
      if (((unsigned int )f & 2U) != 0U) {
#line 597
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 598
      goto abort;
    } else {

    }
#line 601
    drbd_state_lock___0(mdev);
#line 602
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 602
    if (tmp___0 == 0) {
#line 603
      drbd_state_unlock(mdev);
#line 604
      rv = SS_CW_FAILED_BY_PEER;
#line 605
      if (((unsigned int )f & 2U) != 0U) {
#line 606
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 607
      goto abort;
    } else {

    }
#line 610
    rv = _req_st_cond(mdev, mask, val);
#line 610
    if ((int )rv != 0) {
#line 610
      goto ldv_49581;
    } else {

    }
#line 610
    tmp___1 = get_current();
#line 610
    __wait.flags = 0U;
#line 610
    __wait.private = (void *)tmp___1;
#line 610
    __wait.func = & autoremove_wake_function;
#line 610
    __wait.task_list.next = & __wait.task_list;
#line 610
    __wait.task_list.prev = & __wait.task_list;
    ldv_49584: 
#line 610
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 610
    rv = _req_st_cond(mdev, mask, val);
#line 610
    if ((int )rv != 0) {
#line 610
      goto ldv_49583;
    } else {

    }
#line 610
    schedule();
#line 610
    goto ldv_49584;
    ldv_49583: 
#line 610
    finish_wait(& mdev->state_wait, & __wait);
    ldv_49581: ;
#line 613
    if ((int )rv <= 0) {
#line 614
      drbd_state_unlock(mdev);
#line 615
      if (((unsigned int )f & 2U) != 0U) {
#line 616
        print_st_err(mdev, os, ns, (int )rv);
      } else {

      }
#line 617
      goto abort;
    } else {

    }
#line 619
    tmp___2 = spinlock_check(& mdev->req_lock);
#line 619
    flags = _raw_spin_lock_irqsave(tmp___2);
#line 620
    os = mdev->state;
#line 621
    ns.i = (os.i & ~ mask.i) | val.i;
#line 622
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 623
    drbd_state_unlock(mdev);
  } else {
#line 625
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 628
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 630
  if (((unsigned int )f & 4U) != 0U && (int )rv == 1) {
#line 631
    tmp___4 = get_current();
#line 631
    if ((unsigned long )tmp___4 == (unsigned long )mdev->worker.task) {
#line 631
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              631);
    } else {

    }
#line 632
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 636
  if (((unsigned int )f & 8U) != 0U) {
#line 637
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 639
  return (rv);
}
}
#line 653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val , enum chg_state_flags f ) 
{ 
  enum drbd_state_rv rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 658
  rv = drbd_req_state(mdev, mask, val, f);
#line 658
  if ((int )rv != -18) {
#line 658
    goto ldv_49595;
  } else {

  }
#line 658
  tmp = get_current();
#line 658
  __wait.flags = 0U;
#line 658
  __wait.private = (void *)tmp;
#line 658
  __wait.func = & autoremove_wake_function;
#line 658
  __wait.task_list.next = & __wait.task_list;
#line 658
  __wait.task_list.prev = & __wait.task_list;
  ldv_49598: 
#line 658
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 658
  rv = drbd_req_state(mdev, mask, val, f);
#line 658
  if ((int )rv != -18) {
#line 658
    goto ldv_49597;
  } else {

  }
#line 658
  schedule();
#line 658
  goto ldv_49598;
  ldv_49597: 
#line 658
  finish_wait(& mdev->state_wait, & __wait);
  ldv_49595: ;
#line 661
  return (rv);
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 666
  tmp = is_susp(ns);
#line 666
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.pdsk);
#line 666
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.disk);
#line 666
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_38894.peer);
#line 666
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38894.role);
#line 666
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_38894.conn);
#line 666
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 677
  return;
}
}
#line 680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  enum drbd_state_rv err ) 
{ 
  char const   *tmp ;

  {
#line 683
  if ((int )err == -18) {
#line 684
    return;
  } else {

  }
#line 685
  tmp = drbd_set_st_err_str(err);
#line 685
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 686
  print_st(mdev, (char *)" state", os);
#line 687
  print_st(mdev, (char *)"wanted", ns);
#line 688
  return;
}
}
#line 697 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_state_rv rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 702
  rv = 1;
#line 704
  fp = FP_DONT_CARE;
#line 705
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 705
  if (tmp != 0) {
#line 706
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 707
    put_ldev(mdev);
  } else {

  }
#line 710
  tmp___0 = get_net_conf(mdev);
#line 710
  if (tmp___0 != 0) {
#line 711
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 713
      rv = SS_TWO_PRIMARIES;
    } else {

    }
#line 714
    put_net_conf(mdev);
  } else {

  }
#line 717
  if ((int )rv <= 0) {

  } else
#line 719
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 720
    rv = SS_DEVICE_IN_USE;
  } else
#line 722
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38894.conn <= 9) && (int )ns.ldv_38894.disk <= 7) {
#line 723
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 725
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_38894.conn <= 9) && (int )ns.ldv_38894.pdsk > 5) {
#line 727
    rv = SS_PRIMARY_NOP;
  } else
#line 729
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38894.disk <= 4) && (int )ns.ldv_38894.pdsk <= 4) {
#line 730
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 732
  if ((int )ns.ldv_38894.conn > 10 && (int )ns.ldv_38894.disk <= 3) {
#line 733
    rv = SS_NO_LOCAL_DISK;
  } else
#line 735
  if ((int )ns.ldv_38894.conn > 10 && (int )ns.ldv_38894.pdsk <= 3) {
#line 736
    rv = SS_NO_REMOTE_DISK;
  } else
#line 738
  if (((int )ns.ldv_38894.conn > 10 && (int )ns.ldv_38894.disk <= 7) && (int )ns.ldv_38894.pdsk <= 7) {
#line 739
    rv = SS_NO_UP_TO_DATE_DISK;
  } else
#line 741
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 746
    rv = SS_CONNECTED_OUTDATES;
  } else
#line 748
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 750
    rv = SS_NO_VERIFY_ALG;
  } else
#line 752
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 754
    rv = SS_NOT_SUPPORTED;
  } else
#line 756
  if ((int )ns.ldv_38894.conn > 9 && *((unsigned int *)(& ns) + 0UL) == 49152U) {
#line 757
    rv = SS_CONNECTED_OUTDATES;
  } else {

  }
#line 759
  return (rv);
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_rv is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                                    union drbd_state os ) 
{ 
  enum drbd_state_rv rv ;

  {
#line 772
  rv = 1;
#line 774
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_38894.conn > 10) {
#line 776
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 778
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 779
    rv = SS_ALREADY_STANDALONE;
  } else {

  }
#line 781
  if ((int )ns.ldv_38894.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 782
    rv = SS_IS_DISKLESS;
  } else {

  }
#line 784
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_38894.conn <= 1) {
#line 785
    rv = SS_NO_NET_CONFIG;
  } else {

  }
#line 787
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_38894.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 788
    rv = SS_LOWER_THAN_OUTDATED;
  } else {

  }
#line 790
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 791
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 793
  if ((int )ns.ldv_38894.conn == (int )os.ldv_38894.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 794
    rv = SS_IN_TRANSIENT_STATE;
  } else {

  }
#line 796
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_38894.conn <= 9) {
#line 797
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 799
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_38894.conn != (int )os.ldv_38894.conn) && (int )os.ldv_38894.conn > 10) {
#line 801
    rv = SS_RESYNC_RUNNING;
  } else {

  }
#line 803
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_38894.conn <= 9) {
#line 805
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 807
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) && (int )os.ldv_38894.conn <= 8) {
#line 809
    rv = SS_NEED_CONNECTION;
  } else {

  }
#line 811
  return (rv);
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_disk_state disk_min ;
  enum drbd_disk_state disk_max ;
  enum drbd_disk_state pdsk_min ;
  enum drbd_disk_state pdsk_max ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 830
  fp = FP_DONT_CARE;
#line 831
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 831
  if (tmp != 0) {
#line 832
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 833
    put_ldev(mdev);
  } else {

  }
#line 837
  if (((int )ns.ldv_38894.conn > 2 && (int )ns.ldv_38894.conn <= 7) && (int )os.ldv_38894.conn <= 1) {
#line 839
    ns.ldv_38894.conn = os.ldv_38894.conn;
  } else {

  }
#line 843
  if (((((int )os.ldv_38894.conn > 2 && (int )os.ldv_38894.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_38894.conn <= 7) {
#line 845
    ns.ldv_38894.conn = os.ldv_38894.conn;
  } else {

  }
#line 848
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 849
    ns.ldv_38894.disk = 0U;
  } else {

  }
#line 853
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 854
    ns.ldv_38894.disk = 0U;
  } else {

  }
#line 857
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 858
    ns.ldv_38894.conn = os.ldv_38894.conn;
  } else {

  }
#line 860
  if ((int )ns.ldv_38894.conn <= 9) {
#line 861
    ns.ldv_38894.peer_isp = 0U;
#line 862
    ns.ldv_38894.peer = 0U;
#line 863
    if ((int )ns.ldv_38894.pdsk > 6 || (int )ns.ldv_38894.pdsk <= 3) {
#line 864
      ns.ldv_38894.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 868
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 869
    ns.ldv_38894.aftr_isp = 0U;
  } else {

  }
#line 872
  if (((int )os.ldv_38894.conn > 10 && (int )ns.ldv_38894.conn > 10) && ((int )ns.ldv_38894.disk <= 2 || (int )ns.ldv_38894.pdsk <= 2)) {
#line 874
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 875
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 878
    ns.ldv_38894.conn = 10U;
  } else {

  }
#line 882
  if ((int )ns.ldv_38894.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 882
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 882
    if (tmp___0 != 0) {
#line 884
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 885
        ns.ldv_38894.disk = mdev->new_state_tmp.ldv_38894.disk;
#line 886
        ns.ldv_38894.pdsk = mdev->new_state_tmp.ldv_38894.pdsk;
      } else {
#line 888
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 889
        ns.ldv_38894.disk = 0U;
#line 890
        ns.ldv_38894.pdsk = 6U;
      }
#line 892
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 896
  if ((int )ns.ldv_38894.conn > 9 && (int )ns.ldv_38894.conn <= 21) {
#line 897
    if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 898
      ns.ldv_38894.disk = 8U;
    } else {

    }
#line 899
    if (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U) {
#line 900
      ns.ldv_38894.pdsk = 8U;
    } else {

    }
  } else {

  }
#line 904
  disk_min = D_DISKLESS;
#line 905
  disk_max = D_UP_TO_DATE;
#line 906
  pdsk_min = D_INCONSISTENT;
#line 907
  pdsk_max = D_UNKNOWN;
#line 908
  switch ((unsigned int )ns.ldv_38894.conn) {
  case 14U: ;
  case 21U: ;
  case 12U: ;
  case 15U: ;
  case 23U: 
#line 914
  disk_min = D_INCONSISTENT;
#line 915
  disk_max = D_OUTDATED;
#line 916
  pdsk_min = D_UP_TO_DATE;
#line 917
  pdsk_max = D_UP_TO_DATE;
#line 918
  goto ldv_49638;
  case 18U: ;
  case 19U: 
#line 921
  disk_min = D_UP_TO_DATE;
#line 922
  disk_max = D_UP_TO_DATE;
#line 923
  pdsk_min = D_UP_TO_DATE;
#line 924
  pdsk_max = D_UP_TO_DATE;
#line 925
  goto ldv_49638;
  case 10U: 
#line 927
  disk_min = D_DISKLESS;
#line 928
  disk_max = D_UP_TO_DATE;
#line 929
  pdsk_min = D_DISKLESS;
#line 930
  pdsk_max = D_UP_TO_DATE;
#line 931
  goto ldv_49638;
  case 13U: ;
  case 20U: ;
  case 11U: ;
  case 22U: 
#line 936
  disk_min = D_UP_TO_DATE;
#line 937
  disk_max = D_UP_TO_DATE;
#line 938
  pdsk_min = D_INCONSISTENT;
#line 939
  pdsk_max = D_CONSISTENT;
#line 940
  goto ldv_49638;
  case 17U: 
#line 942
  disk_min = D_INCONSISTENT;
#line 943
  disk_max = D_INCONSISTENT;
#line 944
  pdsk_min = D_UP_TO_DATE;
#line 945
  pdsk_max = D_UP_TO_DATE;
#line 946
  goto ldv_49638;
  case 16U: 
#line 948
  disk_min = D_UP_TO_DATE;
#line 949
  disk_max = D_UP_TO_DATE;
#line 950
  pdsk_min = D_INCONSISTENT;
#line 951
  pdsk_max = D_INCONSISTENT;
#line 952
  goto ldv_49638;
  case 0U: ;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 8U: ;
  case 9U: ;
  case 31U: ;
#line 964
  goto ldv_49638;
  }
  ldv_49638: ;
#line 966
  if ((unsigned int )ns.ldv_38894.disk > (unsigned int )disk_max) {
#line 967
    ns.ldv_38894.disk = (unsigned char )disk_max;
  } else {

  }
#line 969
  if ((unsigned int )ns.ldv_38894.disk < (unsigned int )disk_min) {
#line 970
    tmp___1 = drbd_disk_str(disk_min);
#line 970
    tmp___2 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.disk);
#line 970
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from %s to %s\n",
             tmp___2, tmp___1);
#line 972
    ns.ldv_38894.disk = (unsigned char )disk_min;
  } else {

  }
#line 974
  if ((unsigned int )ns.ldv_38894.pdsk > (unsigned int )pdsk_max) {
#line 975
    ns.ldv_38894.pdsk = (unsigned char )pdsk_max;
  } else {

  }
#line 977
  if ((unsigned int )ns.ldv_38894.pdsk < (unsigned int )pdsk_min) {
#line 978
    tmp___3 = drbd_disk_str(pdsk_min);
#line 978
    tmp___4 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.pdsk);
#line 978
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from %s to %s\n",
             tmp___4, tmp___3);
#line 980
    ns.ldv_38894.pdsk = (unsigned char )pdsk_min;
  } else {

  }
#line 983
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38894.conn <= 9) && (int )ns.ldv_38894.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38894.conn > 9) || (int )os.ldv_38894.pdsk <= 5)) {
#line 986
    ns.ldv_38894.susp_fen = 1U;
  } else {

  }
#line 988
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38894.disk <= 7) && (int )ns.ldv_38894.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38894.disk > 7) || (int )os.ldv_38894.pdsk > 7)) {
#line 991
    ns.ldv_38894.susp_nod = 1U;
  } else {

  }
#line 993
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 994
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 995
      ns.ldv_38894.conn = 20U;
    } else {

    }
#line 996
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 997
      ns.ldv_38894.conn = 21U;
    } else {

    }
  } else {
#line 999
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 1000
      ns.ldv_38894.conn = 16U;
    } else {

    }
#line 1001
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1002
      ns.ldv_38894.conn = 17U;
    } else {

    }
  }
#line 1005
  return (ns);
}
}
#line 1009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 1011
  if (mdev->agreed_pro_version <= 89) {
#line 1012
    mdev->ov_start_sector = 0UL;
  } else {

  }
#line 1013
  mdev->rs_total = drbd_bm_bits(mdev);
#line 1014
  mdev->ov_position = 0UL;
#line 1015
  if ((unsigned int )cs == 19U) {
#line 1021
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 1023
    bit = mdev->ov_start_sector >> 3;
#line 1024
    if (mdev->rs_total <= bit) {
#line 1025
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
#line 1027
      mdev->rs_total = 1UL;
    } else {
#line 1029
      mdev->rs_total = mdev->rs_total - bit;
    }
#line 1030
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 1032
  mdev->ov_left = mdev->rs_total;
#line 1033
  return;
}
}
#line 1035 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1037
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 1037
  if (tmp != 0) {
#line 1038
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 1039
  return;
}
}
#line 1051 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum drbd_state_rv __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  union drbd_state os ;
  enum drbd_state_rv rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  enum drbd_state_rv tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long tmp___24 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___25 ;
  int tmp___26 ;
  void *tmp___27 ;

  {
#line 1055
  rv = 1;
#line 1056
  warn_sync_abort = 0;
#line 1059
  os = mdev->state;
#line 1061
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1063
  if (ns.i == os.i) {
#line 1064
    return (SS_NOTHING_TO_DO);
  } else {

  }
#line 1066
  if (((unsigned int )flags & 1U) == 0U) {
#line 1070
    rv = is_valid_state(mdev, ns);
#line 1071
    if ((int )rv <= 0) {
#line 1075
      tmp = is_valid_state(mdev, os);
#line 1075
      if ((int )tmp == (int )rv) {
#line 1076
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1078
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1081
  if ((int )rv <= 0) {
#line 1082
    if (((unsigned int )flags & 2U) != 0U) {
#line 1083
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1084
    return (rv);
  } else {

  }
#line 1087
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1088
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1092
  pbp = (char *)(& pb);
#line 1093
  *pbp = 0;
#line 1094
  if ((int )ns.ldv_38894.role != (int )os.ldv_38894.role) {
#line 1095
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_38894.role);
#line 1095
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_38894.role);
#line 1095
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1095
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1098
  if ((int )ns.ldv_38894.peer != (int )os.ldv_38894.peer) {
#line 1099
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_38894.peer);
#line 1099
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_38894.peer);
#line 1099
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1099
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1102
  if ((int )ns.ldv_38894.conn != (int )os.ldv_38894.conn) {
#line 1103
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_38894.conn);
#line 1103
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_38894.conn);
#line 1103
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1103
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1106
  if ((int )ns.ldv_38894.disk != (int )os.ldv_38894.disk) {
#line 1107
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.disk);
#line 1107
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_38894.disk);
#line 1107
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1107
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1110
  if ((int )ns.ldv_38894.pdsk != (int )os.ldv_38894.pdsk) {
#line 1111
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_38894.pdsk);
#line 1111
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_38894.pdsk);
#line 1111
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1111
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1114
  tmp___18 = is_susp(ns);
#line 1114
  tmp___19 = is_susp(os);
#line 1114
  if (tmp___18 != tmp___19) {
#line 1115
    tmp___15 = is_susp(ns);
#line 1115
    tmp___16 = is_susp(os);
#line 1115
    tmp___17 = sprintf(pbp, "susp( %d -> %d ) ", tmp___16, tmp___15);
#line 1115
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1118
  if ((int )ns.ldv_38894.aftr_isp != (int )os.ldv_38894.aftr_isp) {
#line 1119
    tmp___20 = sprintf(pbp, "aftr_isp( %d -> %d ) ", (int )os.ldv_38894.aftr_isp,
                       (int )ns.ldv_38894.aftr_isp);
#line 1119
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1122
  if ((int )ns.ldv_38894.peer_isp != (int )os.ldv_38894.peer_isp) {
#line 1123
    tmp___21 = sprintf(pbp, "peer_isp( %d -> %d ) ", (int )os.ldv_38894.peer_isp,
                       (int )ns.ldv_38894.peer_isp);
#line 1123
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1126
  if ((int )ns.ldv_38894.user_isp != (int )os.ldv_38894.user_isp) {
#line 1127
    tmp___22 = sprintf(pbp, "user_isp( %d -> %d ) ", (int )os.ldv_38894.user_isp,
                       (int )ns.ldv_38894.user_isp);
#line 1127
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1130
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1141
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1141
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1141
    if (tmp___23 == 0) {
#line 1145
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1151
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1153
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1155
  mdev->state = ns;
#line 1157
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38894.disk > 2) {
#line 1158
    drbd_print_uuids(mdev, "attached to UUIDs");
  } else {

  }
#line 1160
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1161
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1164
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_38894.conn <= 9) {
#line 1166
    tmp___24 = drbd_bm_bits(mdev);
#line 1166
    mdev->ov_start_sector = (tmp___24 - mdev->ov_left) << 3;
#line 1168
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1172
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1174
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1175
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1177
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1178
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1181
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1183
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1184
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1187
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1189
    now = jiffies;
#line 1192
    set_ov_position(mdev, (enum drbd_conns )ns.ldv_38894.conn);
#line 1193
    mdev->rs_start = now;
#line 1194
    mdev->rs_last_events = 0;
#line 1195
    mdev->rs_last_sect_ev = 0;
#line 1196
    mdev->ov_last_oos_size = 0UL;
#line 1197
    mdev->ov_last_oos_start = 0UL;
#line 1199
    i = 0;
#line 1199
    goto ldv_49682;
    ldv_49681: 
#line 1200
    mdev->rs_mark_left[i] = mdev->ov_left;
#line 1201
    mdev->rs_mark_time[i] = now;
#line 1199
    i = i + 1;
    ldv_49682: ;
#line 1199
    if (i <= 7) {
#line 1200
      goto ldv_49681;
    } else {

    }
#line 1204
    drbd_rs_controller_reset(mdev);
#line 1206
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1207
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1209
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1213
  tmp___26 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1213
  if (tmp___26 != 0) {
#line 1214
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1218
    tmp___25 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1218
    if (tmp___25 != 0) {
#line 1219
      mdf = mdf | 64U;
    } else {

    }
#line 1220
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U || ((int )mdev->state.ldv_38894.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 4U)) {
#line 1222
      mdf = mdf | 2U;
    } else {

    }
#line 1223
    if ((int )mdev->state.ldv_38894.conn > 9) {
#line 1224
      mdf = mdf | 4U;
    } else {

    }
#line 1225
    if ((int )mdev->state.ldv_38894.disk > 4) {
#line 1226
      mdf = mdf | 1U;
    } else {

    }
#line 1227
    if ((int )mdev->state.ldv_38894.disk > 5) {
#line 1228
      mdf = mdf | 16U;
    } else {

    }
#line 1229
    if ((int )mdev->state.ldv_38894.pdsk <= 5 && (int )mdev->state.ldv_38894.pdsk > 3) {
#line 1230
      mdf = mdf | 32U;
    } else {

    }
#line 1231
    if ((mdev->ldev)->md.flags != mdf) {
#line 1232
      (mdev->ldev)->md.flags = mdf;
#line 1233
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1235
    if ((int )os.ldv_38894.disk <= 6 && (int )ns.ldv_38894.disk > 6) {
#line 1236
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1237
    put_ldev(mdev);
  } else {

  }
#line 1241
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1243
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1246
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1247
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1250
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1251
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1254
  if (((int )os.ldv_38894.conn > 7 && (int )ns.ldv_38894.conn <= 7) && (int )ns.ldv_38894.conn > 2) {
#line 1256
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1259
  if ((int )os.ldv_38894.conn <= 9 && (int )ns.ldv_38894.conn > 9) {
#line 1260
    drbd_resume_al(mdev);
  } else {

  }
#line 1262
  tmp___27 = kmalloc(48UL, 32U);
#line 1262
  ascw = (struct after_state_chg_work *)tmp___27;
#line 1263
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1264
    ascw->os = os;
#line 1265
    ascw->ns = ns;
#line 1266
    ascw->flags = flags;
#line 1267
    ascw->w.cb = & w_after_state_ch;
#line 1268
    ascw->done = done;
#line 1269
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1271
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1274
  return (rv);
}
}
#line 1277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1280
  __mptr = (struct drbd_work  const  *)w;
#line 1280
  ascw = (struct after_state_chg_work *)__mptr;
#line 1281
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1282
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1283
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1283
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1283);
    } else {

    }
#line 1284
    complete(ascw->done);
  } else {

  }
#line 1286
  kfree((void const   *)ascw);
#line 1288
  return (1);
}
}
#line 1291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1293
  if (rv != 0) {
#line 1294
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1295
    val.i = 0U;
#line 1295
    val.ldv_38894.conn = 10U;
#line 1295
    mask.i = 0U;
#line 1295
    mask.ldv_38894.conn = 31U;
#line 1295
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1296
    return;
  } else {

  }
#line 1299
  switch ((int )mdev->state.ldv_38894.conn) {
  case 12: 
#line 1301
  val___0.i = 0U;
#line 1301
  val___0.ldv_38894.conn = 15U;
#line 1301
  mask___0.i = 0U;
#line 1301
  mask___0.ldv_38894.conn = 31U;
#line 1301
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1302
  goto ldv_49706;
  case 11: 
#line 1304
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1305
  goto ldv_49706;
  }
  ldv_49706: ;
#line 1308
  return;
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io_from_worker(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                               char *why , enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 1315
  tmp = get_current();
#line 1315
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 1315
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1315);
  } else {

  }
#line 1318
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 1320
  drbd_bm_lock(mdev, why, flags);
#line 1321
  rv = (*io_fn)(mdev);
#line 1322
  drbd_bm_unlock(mdev);
#line 1324
  drbd_resume_io(mdev);
#line 1326
  return (rv);
}
}
#line 1336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 1340
  what = nothing;
#line 1341
  nsm.i = 4294967295U;
#line 1343
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1344
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1345
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1346
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1349
  fp = FP_DONT_CARE;
#line 1350
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1350
  if (tmp != 0) {
#line 1351
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1352
    put_ldev(mdev);
  } else {

  }
#line 1356
  drbd_bcast_state(mdev, ns);
#line 1358
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_38894.disk > 7) || (int )os.ldv_38894.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_38894.disk <= 7) && (int )ns.ldv_38894.pdsk <= 7)) {
#line 1360
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1365
  nsm.i = 4294967295U;
#line 1366
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1367
    if ((int )os.ldv_38894.conn <= 9 && (int )ns.ldv_38894.conn > 9) {
#line 1368
      what = resend;
    } else {

    }
#line 1370
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_38894.disk > 1) {
#line 1371
      what = restart_frozen_disk_io;
    } else {

    }
#line 1373
    if ((unsigned int )what != 26U) {
#line 1374
      nsm.ldv_38894.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1377
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1379
    if ((int )os.ldv_38894.pdsk > 5 && (int )ns.ldv_38894.pdsk <= 5) {
#line 1380
      tl_clear(mdev);
#line 1381
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1381
      if (tmp___0 != 0) {
#line 1382
        drbd_uuid_new_current(mdev);
#line 1383
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1385
      spin_lock_irq(& mdev->req_lock);
#line 1386
      __ns.i = mdev->state.i;
#line 1386
      __ns.ldv_38894.susp_fen = 0U;
#line 1386
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1387
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1390
    if ((int )os.ldv_38894.conn <= 9 && (int )ns.ldv_38894.conn > 9) {
#line 1391
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1392
      what = resend;
#line 1393
      nsm.ldv_38894.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1397
  if ((unsigned int )what != 26U) {
#line 1398
    spin_lock_irq(& mdev->req_lock);
#line 1399
    _tl_restart(mdev, what);
#line 1400
    nsm.i = nsm.i & mdev->state.i;
#line 1401
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1402
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1409
  if ((((unsigned int )*((unsigned short *)(& os) + 0UL) != 256U && (unsigned int )*((unsigned short *)(& os) + 0UL) != 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) && mdev->agreed_pro_version > 95) {
#line 1409
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1409
    if (tmp___1 != 0) {
#line 1412
      drbd_gen_and_send_sync_uuid(mdev);
#line 1413
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1417
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_38894.pdsk > 0) {
#line 1418
    drbd_send_uuids(mdev);
#line 1419
    drbd_send_state(mdev);
  } else {

  }
#line 1424
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned short *)mdev + 1138UL) == 208U) {
#line 1426
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1431
  if ((((int )os.ldv_38894.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_38894.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1437
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1437
    if (tmp___3 != 0) {
#line 1438
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_38894.disk > 7) {
#line 1440
        tmp___2 = is_susp(mdev->state);
#line 1440
        if (tmp___2 != 0) {
#line 1441
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1443
          drbd_uuid_new_current(mdev);
#line 1444
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1447
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1451
  if ((int )ns.ldv_38894.pdsk <= 3) {
#line 1451
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1451
    if (tmp___4 != 0) {
#line 1452
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1453
        drbd_uuid_new_current(mdev);
#line 1454
        drbd_send_uuids(mdev);
      } else {

      }
#line 1458
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1462
        drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote diskless peer",
                                   BM_DONT_CLEAR);
      } else {

      }
#line 1464
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1470
  if (((unsigned int )*((unsigned char *)(& os) + 0UL) == 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) && (int )mdev->state.ldv_38894.conn <= 10) {
#line 1470
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1470
    if (tmp___5 != 0) {
#line 1474
      drbd_bitmap_io_from_worker(mdev, & drbd_bm_write, (char *)"demote", BM_LOCKED_TEST_ALLOWED);
#line 1476
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1480
  if (((int )ns.ldv_38894.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1482
    drbd_send_sizes(mdev, 0, 0);
#line 1483
    drbd_send_uuids(mdev);
#line 1484
    drbd_send_state(mdev);
  } else {

  }
#line 1488
  if ((int )ns.ldv_38894.conn > 9 && ((int )os.ldv_38894.aftr_isp != (int )ns.ldv_38894.aftr_isp || (int )os.ldv_38894.user_isp != (int )ns.ldv_38894.user_isp)) {
#line 1491
    drbd_send_state(mdev);
  } else {

  }
#line 1494
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1496
    suspend_other_sg(mdev);
  } else {

  }
#line 1500
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_38894.conn > 9) {
#line 1501
    drbd_send_state(mdev);
  } else {

  }
#line 1503
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 352U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 352U) {
#line 1504
    drbd_send_state(mdev);
  } else {

  }
#line 1507
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1510
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync",
                         BM_LOCKED_TEST_ALLOWED);
  } else {

  }
#line 1515
  if ((((int )os.ldv_38894.conn <= 9 && (int )ns.ldv_38894.conn <= 9) && (int )os.ldv_38894.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1518
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate",
                         BM_LOCKED_MASK);
  } else {

  }
#line 1523
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1529
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1530
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1535
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1536
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.disk);
#line 1536
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___6);
    } else {

    }
#line 1540
    tmp___7 = drbd_send_state(mdev);
#line 1540
    if (tmp___7 != 0) {
#line 1541
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1543
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1545
    drbd_rs_cancel_all(mdev);
#line 1550
    drbd_md_sync(mdev);
#line 1551
    put_ldev(mdev);
#line 1553
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1554
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1560
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1563
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 0U) {
#line 1564
      tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_38894.disk);
#line 1564
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___8);
    } else {

    }
#line 1568
    mdev->rs_total = 0UL;
#line 1569
    mdev->rs_failed = 0UL;
#line 1570
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1572
    tmp___9 = drbd_send_state(mdev);
#line 1572
    if (tmp___9 != 0) {
#line 1573
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {

    }
#line 1576
    put_ldev(mdev);
  } else {

  }
#line 1580
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 16U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1581
    drbd_send_state(mdev);
  } else {

  }
#line 1584
  if ((int )ns.ldv_38894.disk > 3 && (int )ns.ldv_38894.pdsk > 3) {
#line 1584
    tmp___10 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1584
    if (tmp___10 != 0) {
#line 1586
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1587
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1591
  if ((((int )os.ldv_38894.conn > 10 && (int )ns.ldv_38894.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1594
    resume_next_sg(mdev);
  } else {

  }
#line 1598
  if (((int )os.ldv_38894.disk <= 7 && (int )os.ldv_38894.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1599
    drbd_send_state(mdev);
  } else {

  }
#line 1608
  if ((int )os.ldv_38894.conn > 10 && (int )ns.ldv_38894.conn <= 10) {
#line 1608
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1608
    if (tmp___11 != 0) {
#line 1609
      drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished",
                           BM_DONT_CLEAR);
#line 1611
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1615
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1615
    tmp___12 = is_susp(ns);
#line 1615
    if (tmp___12 == 0) {
#line 1615
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1616
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1619
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1620
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1624
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1627
    if ((int )os.ldv_38894.aftr_isp != (int )ns.ldv_38894.aftr_isp) {
#line 1628
      resume_next_sg(mdev);
    } else {

    }
#line 1630
    tmp___13 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1630
    if (tmp___13 != 0) {
#line 1631
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1634
  drbd_md_sync(mdev);
#line 1635
  return;
}
}
#line 1638 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1640
  thi = (struct drbd_thread *)arg;
#line 1641
  mdev = thi->mdev;
  restart: 
#line 1646
  retval = (*(thi->function))(thi);
#line 1648
  tmp = spinlock_check(& thi->t_lock);
#line 1648
  flags = _raw_spin_lock_irqsave(tmp);
#line 1660
  if ((unsigned int )thi->t_state == 3U) {
#line 1661
    tmp___0 = get_current();
#line 1661
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1662
    thi->t_state = Running;
#line 1663
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1664
    goto restart;
  } else {

  }
#line 1667
  thi->task = 0;
#line 1668
  thi->t_state = None;
#line 1669
  __asm__  volatile   ("mfence": : : "memory");
#line 1670
  complete(& thi->stop);
#line 1671
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1673
  tmp___1 = get_current();
#line 1673
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1676
  ldv_module_put_3(& __this_module);
#line 1677
  return (retval);
}
}
#line 1680 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1683
  spinlock_check(& thi->t_lock);
#line 1683
  __raw_spin_lock_init(& thi->t_lock.ldv_6176.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1684
  thi->task = 0;
#line 1685
  thi->t_state = None;
#line 1686
  thi->function = func;
#line 1687
  thi->mdev = mdev;
#line 1688
  return;
}
}
#line 1690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1692
  mdev = thi->mdev;
#line 1696
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1703
  tmp = spinlock_check(& thi->t_lock);
#line 1703
  flags = _raw_spin_lock_irqsave(tmp);
#line 1705
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1707
  tmp___0 = get_current();
#line 1707
  tmp___1 = get_current();
#line 1707
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1711
  tmp___2 = ldv_try_module_get_1(& __this_module);
#line 1711
  if (tmp___2 == 0) {
#line 1712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1713
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1714
    return (0);
  } else {

  }
#line 1717
  init_completion(& thi->stop);
#line 1718
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1718);
  } else {

  }
#line 1719
  thi->reset_cpu_mask = 1;
#line 1720
  thi->t_state = Running;
#line 1721
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1722
  tmp___3 = get_current();
#line 1722
  flush_signals(tmp___3);
#line 1724
  tmp___4 = mdev_to_minor(mdev);
#line 1724
  nt = kthread_create_on_node(& drbd_thread_setup, (void *)thi, -1, "drbd%d_%s", tmp___4,
                              me);
#line 1727
  tmp___5 = IS_ERR((void const   *)nt);
#line 1727
  if (tmp___5 != 0L) {
#line 1728
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1730
    ldv_module_put_5(& __this_module);
#line 1731
    return (0);
  } else {

  }
#line 1733
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1733
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1734
  thi->task = nt;
#line 1735
  thi->t_state = Running;
#line 1736
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1737
  wake_up_process(nt);
#line 1738
  goto ldv_49762;
  case 2U: 
#line 1740
  thi->t_state = Restarting;
#line 1741
  tmp___7 = get_current();
#line 1741
  tmp___8 = get_current();
#line 1741
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1747
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1748
  goto ldv_49762;
  }
  ldv_49762: ;
#line 1751
  return (1);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1759
  ns = restart != 0 ? Restarting : Exiting;
#line 1762
  tmp = spinlock_check(& thi->t_lock);
#line 1762
  flags = _raw_spin_lock_irqsave(tmp);
#line 1764
  if ((unsigned int )thi->t_state == 0U) {
#line 1765
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1766
    if (restart != 0) {
#line 1767
      drbd_thread_start(thi);
    } else {

    }
#line 1768
    return;
  } else {

  }
#line 1771
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1772
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1773
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1774
      return;
    } else {

    }
#line 1777
    thi->t_state = ns;
#line 1778
    __asm__  volatile   ("mfence": : : "memory");
#line 1779
    init_completion(& thi->stop);
#line 1780
    tmp___0 = get_current();
#line 1780
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1781
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1785
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1787
  if (wait != 0) {
#line 1788
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1789
  return;
}
}
#line 1799 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1804
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1804
  if (tmp != 0U) {
#line 1805
    return;
  } else {

  }
#line 1807
  tmp___0 = mdev_to_minor(mdev);
#line 1807
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1807
  ord = (int )(tmp___0 % tmp___1);
#line 1808
  cpu = -1;
#line 1808
  goto ldv_49783;
  ldv_49782: 
#line 1809
  tmp___2 = ord;
#line 1809
  ord = ord - 1;
#line 1809
  if (tmp___2 == 0) {
#line 1810
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1811
    return;
  } else {

  }
  ldv_49783: 
#line 1808
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1808
  cpu = (int )tmp___3;
#line 1808
  if (cpu < nr_cpu_ids) {
#line 1809
    goto ldv_49782;
  } else {

  }
#line 1815
  cpumask_setall(mdev->cpu_mask);
#line 1816
  return;
}
}
#line 1825 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1827
  tmp = get_current();
#line 1827
  p = tmp;
#line 1828
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1833
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1833
  if (_b != 0) {
#line 1833
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1833);
  } else {

  }
#line 1833
  if (_b != 0) {
#line 1834
    return;
  } else {

  }
#line 1835
  if (thi->reset_cpu_mask == 0) {
#line 1836
    return;
  } else {

  }
#line 1837
  thi->reset_cpu_mask = 0;
#line 1838
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1839
  return;
}
}
#line 1843 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 1849
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1849
  if (_b != 0) {
#line 1849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1849);
  } else {

  }
#line 1849
  if (_b != 0) {
#line 1849
    return (0);
  } else {

  }
#line 1850
  _b___0 = size == 0UL;
#line 1850
  if (_b___0 != 0) {
#line 1850
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1850);
  } else {

  }
#line 1850
  if (_b___0 != 0) {
#line 1850
    return (0);
  } else {

  }
#line 1852
  h->magic = 1728214147U;
#line 1853
  tmp = __fswab16((int )((__u16 )cmd));
#line 1853
  h->command = tmp;
#line 1854
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1854
  h->length = tmp___0;
#line 1856
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1858
  ok = (size_t )sent == size;
#line 1859
  if (ok == 0) {
#line 1859
    tmp___2 = get_current();
#line 1859
    tmp___3 = signal_pending(tmp___2);
#line 1859
    if (tmp___3 == 0) {
#line 1860
      tmp___1 = cmdname(cmd);
#line 1860
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
               tmp___1, (int )size, sent);
    } else {

    }
  } else {

  }
#line 1862
  return (ok);
}
}
#line 1868 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1871
  ok = 0;
#line 1874
  if (use_data_socket != 0) {
#line 1875
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1876
    sock = mdev->data.socket;
  } else {
#line 1878
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1879
    sock = mdev->meta.socket;
  }
#line 1884
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1884
  if (tmp != 0L) {
#line 1885
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1887
  if (use_data_socket != 0) {
#line 1888
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1890
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1891
  return (ok);
}
}
#line 1894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1900
  h.magic = 1728214147U;
#line 1901
  tmp = __fswab16((int )((__u16 )cmd));
#line 1901
  h.command = tmp;
#line 1902
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1902
  h.length = tmp___0;
#line 1904
  tmp___1 = drbd_get_data_sock(mdev);
#line 1904
  if (tmp___1 == 0) {
#line 1905
    return (0);
  } else {

  }
#line 1907
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1907
  ok = tmp___2 == 8;
#line 1909
  if (ok != 0) {
#line 1909
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1909
    if ((size_t )tmp___3 == size) {
#line 1909
      tmp___4 = 1;
    } else {
#line 1909
      tmp___4 = 0;
    }
  } else {
#line 1909
    tmp___4 = 0;
  }
#line 1909
  ok = tmp___4;
#line 1912
  drbd_put_data_sock(mdev);
#line 1914
  return (ok);
}
}
#line 1917 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1922
  apv = mdev->agreed_pro_version;
#line 1924
  if (apv > 87) {
#line 1924
    if (apv == 88) {
#line 1924
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1924
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1924
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1924
    size = tmp___0;
  } else {
#line 1924
    size = 12;
  }
#line 1933
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1934
  sock = mdev->data.socket;
#line 1936
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1936
  if (tmp___6 != 0L) {
#line 1937
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1939
    p = & mdev->data.sbuf.rs_param_95;
#line 1942
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1944
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1944
    p->rate = tmp___1;
#line 1945
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1945
    p->c_plan_ahead = tmp___2;
#line 1946
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1946
    p->c_delay_target = tmp___3;
#line 1947
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1947
    p->c_fill_target = tmp___4;
#line 1948
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1948
    p->c_max_rate = tmp___5;
#line 1950
    if (apv > 87) {
#line 1951
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1952
    if (apv > 88) {
#line 1953
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1955
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1957
    rv = 0;
  }
#line 1959
  mutex_unlock(& mdev->data.mutex);
#line 1961
  return (rv);
}
}
#line 1964 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1969
  size = 32;
#line 1971
  if (mdev->agreed_pro_version > 86) {
#line 1972
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1972
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1976
  tmp___0 = kmalloc((size_t )size, 16U);
#line 1976
  p = (struct p_protocol *)tmp___0;
#line 1977
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1978
    return (0);
  } else {

  }
#line 1980
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1980
  p->protocol = tmp___1;
#line 1981
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1981
  p->after_sb_0p = tmp___2;
#line 1982
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1982
  p->after_sb_1p = tmp___3;
#line 1983
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1983
  p->after_sb_2p = tmp___4;
#line 1984
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1984
  p->two_primaries = tmp___5;
#line 1986
  cf = 0;
#line 1987
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1988
    cf = cf | 1;
  } else {

  }
#line 1989
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U) {
#line 1990
    if (mdev->agreed_pro_version > 91) {
#line 1991
      cf = cf | 2;
    } else {
#line 1993
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1994
      kfree((void const   *)p);
#line 1995
      return (-1);
    }
  } else {

  }
#line 1998
  tmp___6 = __fswab32((__u32 )cf);
#line 1998
  p->conn_flags = tmp___6;
#line 2000
  if (mdev->agreed_pro_version > 86) {
#line 2001
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 2003
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 2005
  kfree((void const   *)p);
#line 2006
  return (rv);
}
}
#line 2009 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 2014
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2014
  if (tmp == 0) {
#line 2015
    return (1);
  } else {

  }
#line 2017
  i = 0;
#line 2017
  goto ldv_49849;
  ldv_49848: ;
#line 2018
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 2018
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 2018
    p.uuid[i] = tmp___0;
  } else {
#line 2018
    p.uuid[i] = 0ULL;
  }
#line 2017
  i = i + 1;
  ldv_49849: ;
#line 2017
  if (i <= 3) {
#line 2018
    goto ldv_49848;
  } else {

  }
#line 2020
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 2021
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 2021
  p.uuid[4] = tmp___1;
#line 2022
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 540UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 2023
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2023
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 2024
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2273UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 2025
  tmp___3 = __fswab64(uuid_flags);
#line 2025
  p.uuid[5] = tmp___3;
#line 2027
  put_ldev(mdev);
#line 2029
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 2029
  return (tmp___4);
}
}
#line 2033 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2035
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 2035
  return (tmp);
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2040
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 2040
  return (tmp);
}
}
#line 2043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_print_uuids(struct drbd_conf *mdev , char const   *text ) 
{ 
  u64 *uuid ;
  int tmp ;

  {
#line 2045
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2045
  if (tmp != 0) {
#line 2046
    uuid = (u64 *)(& (mdev->ldev)->md.uuid);
#line 2047
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX\n",
              text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL));
#line 2053
    put_ldev(mdev);
  } else {
#line 2055
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s effective data uuid: %016llX\n",
              text, mdev->ed_uuid);
  }
#line 2056
  return;
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_gen_and_send_sync_uuid(struct drbd_conf *mdev ) 
{ 
  struct p_rs_uuid p ;
  u64 uuid ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 2066
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 16U) {
#line 2066
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2066);
  } else {

  }
#line 2068
  uuid = (mdev->ldev)->md.uuid[1] + 281474976710656ULL;
#line 2069
  drbd_uuid_set(mdev, 1, uuid);
#line 2070
  drbd_print_uuids(mdev, "updated sync UUID");
#line 2071
  drbd_md_sync(mdev);
#line 2072
  tmp = __fswab64(uuid);
#line 2072
  p.uuid = tmp;
#line 2074
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 2074
  return (tmp___0);
}
}
#line 2078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int max_bio_size ;
  int ok ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u64 tmp___2 ;
  sector_t tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 2085
  tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 2085
  if (tmp___0 != 0) {
#line 2086
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 2086
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2086);
    } else {

    }
#line 2087
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 2088
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2089
    q_order_type = drbd_queue_order_type(mdev);
#line 2090
    tmp = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 2090
    max_bio_size = (int )(tmp << 9);
#line 2091
    __min1 = max_bio_size;
#line 2091
    __min2 = 131072;
#line 2091
    max_bio_size = __min1 < __min2 ? __min1 : __min2;
#line 2092
    put_ldev(mdev);
  } else {
#line 2094
    d_size = 0UL;
#line 2095
    u_size = 0UL;
#line 2096
    q_order_type = 0;
#line 2097
    max_bio_size = 131072;
  }
#line 2100
  tmp___1 = __fswab64((__u64 )d_size);
#line 2100
  p.d_size = tmp___1;
#line 2101
  tmp___2 = __fswab64((__u64 )u_size);
#line 2101
  p.u_size = tmp___2;
#line 2102
  if (trigger_reply == 0) {
#line 2102
    tmp___3 = drbd_get_capacity(mdev->this_bdev);
#line 2102
    tmp___4 = (__u64 )tmp___3;
  } else {
#line 2102
    tmp___4 = 0ULL;
  }
#line 2102
  tmp___5 = __fswab64(tmp___4);
#line 2102
  p.c_size = tmp___5;
#line 2103
  tmp___6 = __fswab32((__u32 )max_bio_size);
#line 2103
  p.max_bio_size = tmp___6;
#line 2104
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 2104
  p.queue_order_type = tmp___7;
#line 2105
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 2105
  p.dds_flags = tmp___8;
#line 2107
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 2109
  return (ok);
}
}
#line 2116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 2120
  ok = 0;
#line 2124
  drbd_state_lock___0(mdev);
#line 2126
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2128
  tmp = __fswab32(mdev->state.i);
#line 2128
  p.state = tmp;
#line 2129
  sock = mdev->data.socket;
#line 2131
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 2131
  if (tmp___0 != 0L) {
#line 2132
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 2136
  mutex_unlock(& mdev->data.mutex);
#line 2138
  drbd_state_unlock(mdev);
#line 2139
  return (ok);
}
}
#line 2142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2147
  tmp = __fswab32(mask.i);
#line 2147
  p.mask = tmp;
#line 2148
  tmp___0 = __fswab32(val.i);
#line 2148
  p.val = tmp___0;
#line 2150
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 2150
  return (tmp___1);
}
}
#line 2154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , enum drbd_state_rv retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2158
  tmp = __fswab32((__u32 )retcode);
#line 2158
  p.retcode = tmp;
#line 2160
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 2160
  return (tmp___0);
}
}
#line 2164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2177
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2179
    return (0);
  } else {

  }
#line 2181
  if (c->bit_offset >= c->bm_bits) {
#line 2182
    return (0);
  } else {

  }
#line 2185
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2186
  memset((void *)(& p->code), 0, 4087UL);
#line 2188
  plain_bits = 0UL;
#line 2193
  toggle = 2U;
  ldv_49912: ;
#line 2198
  if (toggle == 0U) {
#line 2198
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2198
    tmp = tmp___0;
  } else {
#line 2198
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2198
    tmp = tmp___1;
  }
#line 2200
  if (tmp == 0xffffffffffffffffUL) {
#line 2201
    tmp = c->bm_bits;
  } else {

  }
#line 2202
  rl = tmp - c->bit_offset;
#line 2204
  if (toggle == 2U) {
#line 2205
    if (rl == 0UL) {
#line 2208
      DCBP_set_start(p, 1);
#line 2210
      toggle = toggle == 0U;
#line 2211
      goto ldv_49910;
    } else {

    }
#line 2213
    DCBP_set_start(p, 0);
  } else {

  }
#line 2218
  if (rl == 0UL) {
#line 2219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2221
    return (-1);
  } else {

  }
#line 2224
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2225
  if (bits == -105) {
#line 2226
    goto ldv_49911;
  } else {

  }
#line 2227
  if (bits <= 0) {
#line 2228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2229
    return (0);
  } else {

  }
#line 2232
  toggle = toggle == 0U;
#line 2233
  plain_bits = plain_bits + rl;
#line 2234
  c->bit_offset = tmp;
  ldv_49910: ;
#line 2235
  if (c->bit_offset < c->bm_bits) {
#line 2236
    goto ldv_49912;
  } else {

  }
  ldv_49911: 
#line 2237
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2239
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2242
    c->bit_offset = c->bit_offset - plain_bits;
#line 2243
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2244
    c->bit_offset = c->word_offset * 64UL;
#line 2245
    return (0);
  } else {

  }
#line 2250
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2253
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2255
  return ((int )len);
}
}
#line 2265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                    struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2268
  p = (struct p_compressed_bm *)h;
#line 2273
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2275
  if (len < 0) {
#line 2276
    return (-5);
  } else {

  }
#line 2278
  if (len != 0) {
#line 2279
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2280
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2283
    c->packets[0] = c->packets[0] + 1U;
#line 2284
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2286
    if (c->bit_offset >= c->bm_bits) {
#line 2287
      len = 0;
    } else {

    }
  } else {
#line 2291
    __min1 = 511UL;
#line 2291
    __min2 = c->bm_words - c->word_offset;
#line 2291
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2292
    len = (int )((unsigned int )num_words * 8U);
#line 2293
    if (len != 0) {
#line 2294
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2295
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2297
    c->word_offset = c->word_offset + num_words;
#line 2298
    c->bit_offset = c->word_offset * 64UL;
#line 2300
    c->packets[1] = c->packets[1] + 1U;
#line 2301
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2303
    if (c->bit_offset > c->bm_bits) {
#line 2304
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2306
  if (ok != 0) {
#line 2307
    if (len == 0) {
#line 2308
      INFO_bm_xfer_stats(mdev, "send", c);
#line 2309
      return (0);
    } else {
#line 2311
      return (1);
    }
  } else {

  }
#line 2313
  return (-5);
}
}
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int err ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;

  {
#line 2323
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2323
  if (_b != 0) {
#line 2323
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2323);
  } else {

  }
#line 2323
  if (_b != 0) {
#line 2323
    return (0);
  } else {

  }
#line 2327
  tmp = __get_free_pages(16U, 0U);
#line 2327
  p = (struct p_header80 *)tmp;
#line 2328
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2329
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2330
    return (0);
  } else {

  }
#line 2333
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2333
  if (tmp___2 != 0) {
#line 2334
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2334
    if (tmp___1 != 0) {
#line 2335
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2336
      drbd_bm_set_all(mdev);
#line 2337
      tmp___0 = drbd_bm_write(mdev);
#line 2337
      if (tmp___0 != 0) {
#line 2341
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2343
        drbd_md_clear_flag(mdev, 8);
#line 2344
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2347
    put_ldev(mdev);
  } else {

  }
#line 2350
  tmp___3 = drbd_bm_bits(mdev);
#line 2350
  tmp___4 = drbd_bm_words(mdev);
#line 2350
  __constr_expr_0.bm_bits = tmp___3;
#line 2350
  __constr_expr_0.bm_words = tmp___4;
#line 2350
  __constr_expr_0.bit_offset = 0UL;
#line 2350
  __constr_expr_0.word_offset = 0UL;
#line 2350
  __constr_expr_0.packets[0] = 0U;
#line 2350
  __constr_expr_0.packets[1] = 0U;
#line 2350
  __constr_expr_0.bytes[0] = 0U;
#line 2350
  __constr_expr_0.bytes[1] = 0U;
#line 2350
  c = __constr_expr_0;
  ldv_49935: 
#line 2356
  err = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2357
  if (err > 0) {
#line 2358
    goto ldv_49935;
  } else {

  }
#line 2359
  free_pages((unsigned long )p, 0U);
#line 2360
  return (err == 0);
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2367
  tmp = drbd_get_data_sock(mdev);
#line 2367
  if (tmp == 0) {
#line 2368
    return (-1);
  } else {

  }
#line 2369
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2369
  err = tmp___0 == 0;
#line 2370
  drbd_put_data_sock(mdev);
#line 2371
  return (err);
}
}
#line 2374 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2379
  p.barrier = barrier_nr;
#line 2380
  tmp = __fswab32(set_size);
#line 2380
  p.set_size = tmp;
#line 2382
  if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 2383
    return (0);
  } else {

  }
#line 2384
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2386
  return (ok);
}
}
#line 2397 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2405
  p.sector = sector;
#line 2406
  p.block_id = block_id;
#line 2407
  p.blksize = blksize;
#line 2408
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2408
  tmp___0 = __fswab32((__u32 )tmp);
#line 2408
  p.seq_num = tmp___0;
#line 2410
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_38894.conn <= 9) {
#line 2411
    return (0);
  } else {

  }
#line 2412
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2414
  return (ok);
}
}
#line 2420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2423
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2423
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2423
    tmp___0 = tmp;
  } else {
#line 2423
    tmp___0 = 0U;
  }
#line 2423
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2425
  tmp___1 = __fswab32((__u32 )data_size);
#line 2425
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2425
  return (tmp___2);
}
}
#line 2429 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2432
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2432
  return (tmp);
}
}
#line 2441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2444
  tmp = __fswab32(e->size);
#line 2444
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2444
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_47617.block_id);
#line 2444
  return (tmp___1);
}
}
#line 2452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2455
  tmp = __fswab64(block_id);
#line 2455
  tmp___0 = __fswab32((__u32 )blksize);
#line 2455
  tmp___1 = __fswab64((__u64 )sector);
#line 2455
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2455
  return (tmp___2);
}
}
#line 2461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2467
  tmp = __fswab64((__u64 )sector);
#line 2467
  p.sector = tmp;
#line 2468
  p.block_id = block_id;
#line 2469
  tmp___0 = __fswab32((__u32 )size);
#line 2469
  p.blksize = tmp___0;
#line 2471
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2473
  return (ok);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2484
  tmp = __fswab64((__u64 )sector);
#line 2484
  p.sector = tmp;
#line 2485
  p.block_id = 1728263026ULL;
#line 2486
  tmp___0 = __fswab32((__u32 )size);
#line 2486
  p.blksize = tmp___0;
#line 2488
  p.head.magic = 1728214147U;
#line 2489
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2489
  p.head.command = tmp___1;
#line 2490
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2490
  p.head.length = tmp___2;
#line 2492
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2494
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2494
  ok = tmp___3 == 32;
#line 2495
  if (ok != 0) {
#line 2495
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2495
    if (tmp___4 == digest_size) {
#line 2495
      tmp___5 = 1;
    } else {
#line 2495
      tmp___5 = 0;
    }
  } else {
#line 2495
    tmp___5 = 0;
  }
#line 2495
  ok = tmp___5;
#line 2497
  mutex_unlock(& mdev->data.mutex);
#line 2499
  return (ok);
}
}
#line 2502 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2507
  tmp = __fswab64((__u64 )sector);
#line 2507
  p.sector = tmp;
#line 2508
  p.block_id = 1728261953ULL;
#line 2509
  tmp___0 = __fswab32((__u32 )size);
#line 2509
  p.blksize = tmp___0;
#line 2511
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2513
  return (ok);
}
}
#line 2520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2525
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2525
    tmp___0 = 1;
  } else {
#line 2525
    tmp = get_t_state(& mdev->asender);
#line 2525
    if ((unsigned int )tmp != 1U) {
#line 2525
      tmp___0 = 1;
    } else
#line 2525
    if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 2525
      tmp___0 = 1;
    } else {
#line 2525
      tmp___0 = 0;
    }
  }
#line 2525
  drop_it = tmp___0;
#line 2530
  if (drop_it != 0) {
#line 2531
    return (1);
  } else {

  }
#line 2533
  mdev->ko_count = mdev->ko_count - 1U;
#line 2533
  drop_it = mdev->ko_count == 0U;
#line 2534
  if (drop_it == 0) {
#line 2535
    tmp___1 = get_current();
#line 2535
    tmp___2 = get_current();
#line 2535
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2537
    request_ping(mdev);
  } else {

  }
#line 2540
  return (drop_it);
}
}
#line 2564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2567
  tmp = kmap(page);
#line 2567
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2567
  sent = tmp___0;
#line 2568
  kunmap(page);
#line 2569
  if ((size_t )sent == size) {
#line 2570
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2571
  return ((size_t )sent == size);
}
}
#line 2574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2577
  tmp = current_thread_info();
#line 2577
  oldfs = tmp->addr_limit;
#line 2579
  len = (int )size;
#line 2587
  if ((int )disable_sendpage) {
#line 2588
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
    return (tmp___0);
  } else {
#line 2587
    tmp___1 = page_count(page);
#line 2587
    if (tmp___1 <= 0) {
#line 2588
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
      return (tmp___0);
    } else {
#line 2587
      tmp___2 = PageSlab((struct page  const  *)page);
#line 2587
      if (tmp___2 != 0) {
#line 2588
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2588
        return (tmp___0);
      } else {

      }
    }
  }
#line 2590
  msg_flags = msg_flags | 16384U;
#line 2591
  drbd_update_congested(mdev);
#line 2592
  tmp___3 = current_thread_info();
#line 2592
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2592
  tmp___3->addr_limit = __constr_expr_0;
  ldv_50034: 
#line 2594
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2594
  sent = (int )tmp___4;
#line 2597
  if (sent == -11) {
#line 2598
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2598
    if (tmp___5 != 0) {
#line 2600
      goto ldv_50031;
    } else {
#line 2602
      goto ldv_50032;
    }
  } else {

  }
#line 2604
  if (sent <= 0) {
#line 2605
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2607
    goto ldv_50031;
  } else {

  }
#line 2609
  len = len - sent;
#line 2610
  offset = offset + sent;
  ldv_50032: ;
#line 2611
  if (len > 0) {
#line 2612
    goto ldv_50034;
  } else {

  }
  ldv_50031: 
#line 2612
  tmp___6 = current_thread_info();
#line 2612
  tmp___6->addr_limit = oldfs;
#line 2613
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2615
  ok = len == 0;
#line 2616
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2616
  if (tmp___7 != 0L) {
#line 2617
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2618
  return (ok);
}
}
#line 2621 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2626
  bvec = bio->bi_io_vec;
#line 2626
  i = 0;
#line 2626
  goto ldv_50042;
  ldv_50041: 
#line 2627
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2627
  if (tmp == 0) {
#line 2630
    return (0);
  } else {

  }
#line 2626
  bvec = bvec + 1;
#line 2626
  i = i + 1;
  ldv_50042: ;
#line 2626
  if ((int )bio->bi_vcnt > i) {
#line 2627
    goto ldv_50041;
  } else {

  }

#line 2632
  return (1);
}
}
#line 2635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2640
  bvec = bio->bi_io_vec;
#line 2640
  i = 0;
#line 2640
  goto ldv_50051;
  ldv_50050: 
#line 2641
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2641
  if (tmp == 0) {
#line 2644
    return (0);
  } else {

  }
#line 2640
  bvec = bvec + 1;
#line 2640
  i = i + 1;
  ldv_50051: ;
#line 2640
  if ((int )bio->bi_vcnt > i) {
#line 2641
    goto ldv_50050;
  } else {

  }

#line 2646
  return (1);
}
}
#line 2649 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2651
  page = e->pages;
#line 2652
  len = e->size;
#line 2654
  goto ldv_50065;
  ldv_50064: 
#line 2655
  __min1 = len;
#line 2655
  __min2 = 4096U;
#line 2655
  l = __min1 < __min2 ? __min1 : __min2;
#line 2656
  tmp = page_chain_next(page);
#line 2656
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2656
  if (tmp___0 == 0) {
#line 2658
    return (0);
  } else {

  }
#line 2659
  len = len - l;
#line 2654
  page = page_chain_next(page);
  ldv_50065: ;
#line 2654
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2654
    tmp___1 = page_chain_next(page);
#line 2654
    __builtin_prefetch((void const   *)tmp___1);
#line 2654
    if (1 != 0) {
#line 2655
      goto ldv_50064;
    } else {
#line 2657
      goto ldv_50066;
    }
  } else {

  }
  ldv_50066: ;
#line 2661
  return (1);
}
}
#line 2664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2666
  if (mdev->agreed_pro_version > 94) {
#line 2667
    return ((u32 )(((((bi_rw & 16UL) != 0UL ? 2 : 0) | ((bi_rw & 1024UL) != 0UL ? 16 : 0)) | ((bi_rw & 2048UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2672
    return ((bi_rw & 16UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char digest[64U] ;
  int tmp___9 ;

  {
#line 2680
  ok = 1;
#line 2682
  dp_flags = 0U;
#line 2686
  tmp = drbd_get_data_sock(mdev);
#line 2686
  if (tmp == 0) {
#line 2687
    return (0);
  } else {

  }
#line 2689
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2689
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2689
    dgs = (int )tmp___0;
  } else {
#line 2689
    dgs = 0;
  }
#line 2692
  if (req->size <= 32768U) {
#line 2693
    p.head.h80.magic = 1728214147U;
#line 2694
    p.head.h80.command = 0U;
#line 2695
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2695
    p.head.h80.length = tmp___1;
  } else {
#line 2698
    p.head.h95.magic = 23171U;
#line 2699
    p.head.h95.command = 0U;
#line 2700
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2700
    p.head.h95.length = tmp___2;
  }
#line 2704
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2704
  p.sector = tmp___3;
#line 2705
  p.block_id = (u64 )req;
#line 2706
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2706
  req->seq_num = tmp___4;
#line 2706
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2706
  p.seq_num = tmp___5;
#line 2709
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2711
  if ((int )mdev->state.ldv_38894.conn > 15 && (int )mdev->state.ldv_38894.conn <= 21) {
#line 2713
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2715
  tmp___6 = __fswab32(dp_flags);
#line 2715
  p.dp_flags = tmp___6;
#line 2716
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2717
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2717
  ok = tmp___7 == 32;
#line 2719
  if (ok != 0 && dgs != 0) {
#line 2720
    dgb = mdev->int_dig_out;
#line 2721
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2722
    tmp___8 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2722
    ok = tmp___8 == dgs;
  } else {

  }
#line 2724
  if (ok != 0) {
#line 2736
    if ((mdev->net_conf)->wire_protocol == 1 || dgs != 0) {
#line 2737
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2739
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
#line 2742
    if (dgs > 0 && dgs <= 64) {
#line 2746
      drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, (void *)(& digest));
#line 2747
      tmp___9 = memcmp((void const   *)mdev->int_dig_out, (void const   *)(& digest),
                       (size_t )dgs);
#line 2747
      if (tmp___9 != 0) {
#line 2748
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest mismatch, buffer modified by upper layers during write: %llus +%u\n",
                 (unsigned long long )req->sector, req->size);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2757
  drbd_put_data_sock(mdev);
#line 2759
  return (ok);
}
}
#line 2766 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 2774
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2774
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2774
    dgs = (int )tmp;
  } else {
#line 2774
    dgs = 0;
  }
#line 2777
  if (e->size <= 32768U) {
#line 2778
    p.head.h80.magic = 1728214147U;
#line 2779
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2779
    p.head.h80.command = tmp___0;
#line 2780
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2780
    p.head.h80.length = tmp___1;
  } else {
#line 2783
    p.head.h95.magic = 23171U;
#line 2784
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2784
    p.head.h95.command = tmp___2;
#line 2785
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2785
    p.head.h95.length = tmp___3;
  }
#line 2789
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2789
  p.sector = tmp___4;
#line 2790
  p.block_id = e->ldv_47617.block_id;
#line 2797
  tmp___5 = drbd_get_data_sock(mdev);
#line 2797
  if (tmp___5 == 0) {
#line 2798
    return (0);
  } else {

  }
#line 2800
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2800
  ok = tmp___6 == 32;
#line 2801
  if (ok != 0 && dgs != 0) {
#line 2802
    dgb = mdev->int_dig_out;
#line 2803
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2804
    tmp___7 = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
#line 2804
    ok = tmp___7 == dgs;
  } else {

  }
#line 2806
  if (ok != 0) {
#line 2807
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2809
  drbd_put_data_sock(mdev);
#line 2811
  return (ok);
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_oos(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  struct p_block_desc p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 2818
  tmp = __fswab64((__u64 )req->sector);
#line 2818
  p.sector = tmp;
#line 2819
  tmp___0 = __fswab32(req->size);
#line 2819
  p.blksize = tmp___0;
#line 2821
  tmp___1 = drbd_send_cmd(mdev, 1, P_OUT_OF_SYNC, & p.head, 24UL);
#line 2821
  return (tmp___1);
}
}
#line 2840 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2845
  sent = 0;
#line 2847
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2848
    return (-1000);
  } else {

  }
#line 2852
  iov.iov_base = buf;
#line 2853
  iov.iov_len = size;
#line 2855
  msg.msg_name = 0;
#line 2856
  msg.msg_namelen = 0;
#line 2857
  msg.msg_control = 0;
#line 2858
  msg.msg_controllen = 0UL;
#line 2859
  msg.msg_flags = msg_flags | 16384U;
#line 2861
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2862
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2863
    drbd_update_congested(mdev);
  } else {

  }
  ldv_50108: 
#line 2875
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2876
  if (rv == -11) {
#line 2877
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2877
    if (tmp != 0) {
#line 2878
      goto ldv_50106;
    } else {
#line 2880
      goto ldv_50107;
    }
  } else {

  }
#line 2882
  if (rv == 0) {
#line 2882
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2882);
  } else {

  }
#line 2883
  if (rv == -4) {
#line 2884
    tmp___0 = get_current();
#line 2884
    flush_signals(tmp___0);
#line 2885
    rv = 0;
  } else {

  }
#line 2887
  if (rv < 0) {
#line 2888
    goto ldv_50106;
  } else {

  }
#line 2889
  sent = sent + rv;
#line 2890
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2891
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_50107: ;
#line 2892
  if ((size_t )sent < size) {
#line 2893
    goto ldv_50108;
  } else {

  }
  ldv_50106: ;
#line 2894
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2895
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2897
  if (rv <= 0) {
#line 2898
    if (rv != -11) {
#line 2899
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2902
      val.i = 0U;
#line 2902
      val.ldv_38894.conn = 4U;
#line 2902
      mask.i = 0U;
#line 2902
      mask.ldv_38894.conn = 31U;
#line 2902
      drbd_force_state(mdev, mask, val);
    } else {
#line 2904
      val___0.i = 0U;
#line 2904
      val___0.ldv_38894.conn = 3U;
#line 2904
      mask___0.i = 0U;
#line 2904
      mask___0.ldv_38894.conn = 31U;
#line 2904
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2907
  return (sent);
}
}
#line 2910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2912
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2914
  rv = 0;
#line 2916
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2917
  tmp = spinlock_check(& mdev->req_lock);
#line 2917
  flags = _raw_spin_lock_irqsave(tmp);
#line 2921
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 2922
    if ((mode & 2U) != 0U) {
#line 2923
      rv = -30;
    } else
#line 2924
    if (! allow_oos) {
#line 2925
      rv = -124;
    } else {

    }
  } else {

  }
#line 2928
  if (rv == 0) {
#line 2929
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2930
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2931
  mutex_unlock(& drbd_main_mutex);
#line 2933
  return (rv);
}
}
#line 2936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2938
  mdev = (struct drbd_conf *)gd->private_data;
#line 2939
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2940
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2941
  mutex_unlock(& drbd_main_mutex);
#line 2942
  return (0);
}
}
#line 2945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2949
  __constr_expr_0.rate = 250;
#line 2949
  __constr_expr_0.after = -1;
#line 2949
  __constr_expr_0.al_extents = 127;
#line 2949
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2949
  __constr_expr_0.verify_alg_len = 0;
#line 2949
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.cpu_mask_len = 0;
#line 2949
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2949
  __constr_expr_0.csums_alg_len = 0;
#line 2949
  __constr_expr_0.use_rle = 0U;
#line 2949
  __constr_expr_0.on_no_data = 0;
#line 2949
  __constr_expr_0.c_plan_ahead = 0;
#line 2949
  __constr_expr_0.c_delay_target = 10;
#line 2949
  __constr_expr_0.c_fill_target = 0;
#line 2949
  __constr_expr_0.c_max_rate = 102400;
#line 2949
  __constr_expr_0.c_min_rate = 4096;
#line 2949
  mdev->sync_conf = __constr_expr_0;
#line 2967
  __constr_expr_1.ldv_38894.role = 2U;
#line 2967
  __constr_expr_1.ldv_38894.peer = 0U;
#line 2967
  __constr_expr_1.ldv_38894.conn = 0U;
#line 2967
  __constr_expr_1.ldv_38894.disk = 0U;
#line 2967
  __constr_expr_1.ldv_38894.pdsk = 6U;
#line 2967
  __constr_expr_1.ldv_38894.susp = 0U;
#line 2967
  __constr_expr_1.ldv_38894.aftr_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_38894.peer_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_38894.user_isp = (unsigned char)0;
#line 2967
  __constr_expr_1.ldv_38894.susp_nod = 0U;
#line 2967
  __constr_expr_1.ldv_38894.susp_fen = 0U;
#line 2967
  __constr_expr_1.ldv_38894._pad = (unsigned short)0;
#line 2967
  mdev->state = __constr_expr_1;
#line 2968
  return;
}
}
#line 2979 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;
  struct lock_class_key __key___17 ;
  struct lock_class_key __key___18 ;

  {
#line 2984
  drbd_set_defaults(mdev);
#line 2986
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2987
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2988
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2989
  atomic_set(& mdev->unacked_cnt, 0);
#line 2990
  atomic_set(& mdev->local_cnt, 0);
#line 2991
  atomic_set(& mdev->net_cnt, 0);
#line 2992
  atomic_set(& mdev->packet_seq, 0);
#line 2993
  atomic_set(& mdev->pp_in_use, 0);
#line 2994
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2995
  atomic_set(& mdev->rs_sect_in, 0);
#line 2996
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2997
  atomic_set(& mdev->ap_in_flight, 0);
#line 2999
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 3000
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 3001
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 3002
  sema_init(& mdev->data.work.s, 0);
#line 3003
  sema_init(& mdev->meta.work.s, 0);
#line 3004
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 3006
  spinlock_check(& mdev->data.work.q_lock);
#line 3006
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_6176.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 3007
  spinlock_check(& mdev->meta.work.q_lock);
#line 3007
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_6176.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 3009
  spinlock_check(& mdev->al_lock);
#line 3009
  __raw_spin_lock_init(& mdev->al_lock.ldv_6176.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 3010
  spinlock_check(& mdev->req_lock);
#line 3010
  __raw_spin_lock_init(& mdev->req_lock.ldv_6176.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 3011
  spinlock_check(& mdev->peer_seq_lock);
#line 3011
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_6176.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 3012
  spinlock_check(& mdev->epoch_lock);
#line 3012
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_6176.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 3014
  INIT_LIST_HEAD(& mdev->active_ee);
#line 3015
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 3016
  INIT_LIST_HEAD(& mdev->done_ee);
#line 3017
  INIT_LIST_HEAD(& mdev->read_ee);
#line 3018
  INIT_LIST_HEAD(& mdev->net_ee);
#line 3019
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 3020
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 3021
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 3022
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 3023
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 3024
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 3025
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 3026
  INIT_LIST_HEAD(& mdev->start_resync_work.list);
#line 3027
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 3029
  mdev->resync_work.cb = & w_resync_timer;
#line 3030
  mdev->unplug_work.cb = & w_send_write_hint;
#line 3031
  mdev->go_diskless.cb = & w_go_diskless;
#line 3032
  mdev->md_sync_work.cb = & w_md_sync;
#line 3033
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 3034
  mdev->start_resync_work.cb = & w_start_resync;
#line 3035
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 3036
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 3037
  init_timer_key(& mdev->start_resync_timer, "&mdev->start_resync_timer", & __key___11);
#line 3038
  init_timer_key(& mdev->request_timer, "&mdev->request_timer", & __key___12);
#line 3039
  mdev->resync_timer.function = & resync_timer_fn;
#line 3040
  mdev->resync_timer.data = (unsigned long )mdev;
#line 3041
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 3042
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 3043
  mdev->start_resync_timer.function = & start_resync_timer_fn;
#line 3044
  mdev->start_resync_timer.data = (unsigned long )mdev;
#line 3045
  mdev->request_timer.function = & request_timer_fn;
#line 3046
  mdev->request_timer.data = (unsigned long )mdev;
#line 3048
  __init_waitqueue_head(& mdev->misc_wait, "&mdev->misc_wait", & __key___13);
#line 3049
  __init_waitqueue_head(& mdev->state_wait, "&mdev->state_wait", & __key___14);
#line 3050
  __init_waitqueue_head(& mdev->net_cnt_wait, "&mdev->net_cnt_wait", & __key___15);
#line 3051
  __init_waitqueue_head(& mdev->ee_wait, "&mdev->ee_wait", & __key___16);
#line 3052
  __init_waitqueue_head(& mdev->al_wait, "&mdev->al_wait", & __key___17);
#line 3053
  __init_waitqueue_head(& mdev->seq_wait, "&mdev->seq_wait", & __key___18);
#line 3055
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 3056
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 3057
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 3059
  mdev->agreed_pro_version = 96;
#line 3060
  mdev->write_ordering = WO_bdev_flush;
#line 3061
  mdev->resync_wenr = 4294967295U;
#line 3062
  mdev->peer_max_bio_size = 4096;
#line 3063
  mdev->local_max_bio_size = 4096;
#line 3064
  return;
}
}
#line 3066 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 3069
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 3070
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 3074
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3074
  if (tmp___0 != 0) {
#line 3075
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 3075
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 3076
  tmp___9 = 0UL;
#line 3076
  mdev->rs_failed = tmp___9;
#line 3076
  tmp___8 = tmp___9;
#line 3076
  mdev->rs_total = tmp___8;
#line 3076
  tmp___7 = tmp___8;
#line 3076
  mdev->rs_start = tmp___7;
#line 3076
  tmp___6 = tmp___7;
#line 3076
  mdev->p_size = tmp___6;
#line 3076
  tmp___5 = (unsigned int )tmp___6;
#line 3076
  mdev->writ_cnt = tmp___5;
#line 3076
  tmp___4 = tmp___5;
#line 3076
  mdev->send_cnt = tmp___4;
#line 3076
  tmp___3 = tmp___4;
#line 3076
  mdev->recv_cnt = tmp___3;
#line 3076
  tmp___2 = tmp___3;
#line 3076
  mdev->read_cnt = tmp___2;
#line 3076
  tmp___1 = tmp___2;
#line 3076
  mdev->bm_writ_cnt = tmp___1;
#line 3076
  mdev->al_writ_cnt = tmp___1;
#line 3086
  mdev->rs_last_events = 0;
#line 3087
  mdev->rs_last_sect_ev = 0;
#line 3088
  i = 0;
#line 3088
  goto ldv_50165;
  ldv_50164: 
#line 3089
  mdev->rs_mark_left[i] = 0UL;
#line 3090
  mdev->rs_mark_time[i] = 0UL;
#line 3088
  i = i + 1;
  ldv_50165: ;
#line 3088
  if (i <= 7) {
#line 3089
    goto ldv_50164;
  } else {

  }

#line 3092
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 3092
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3092);
  } else {

  }
#line 3094
  drbd_set_my_capacity(mdev, 0UL);
#line 3095
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3097
    drbd_bm_resize(mdev, 0UL, 1);
#line 3098
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3101
  drbd_free_resources(mdev);
#line 3102
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 3108
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3108
  if (tmp___10 == 0) {
#line 3108
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3108);
  } else {

  }
#line 3109
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3109
  if (tmp___11 == 0) {
#line 3109
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3109);
  } else {

  }
#line 3110
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3110
  if (tmp___12 == 0) {
#line 3110
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3110);
  } else {

  }
#line 3111
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3111
  if (tmp___13 == 0) {
#line 3111
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3111);
  } else {

  }
#line 3112
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 3112
  if (tmp___14 == 0) {
#line 3112
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3112);
  } else {

  }
#line 3113
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 3113
  if (tmp___15 == 0) {
#line 3113
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3113);
  } else {

  }
#line 3114
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3114
  if (tmp___16 == 0) {
#line 3114
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3114);
  } else {

  }
#line 3115
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 3115
  if (tmp___17 == 0) {
#line 3115
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3115);
  } else {

  }
#line 3116
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 3116
  if (tmp___18 == 0) {
#line 3116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3116);
  } else {

  }
#line 3117
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 3117
  if (tmp___19 == 0) {
#line 3117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3117);
  } else {

  }
#line 3118
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 3118
  if (tmp___20 == 0) {
#line 3118
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3118);
  } else {

  }
#line 3120
  drbd_set_defaults(mdev);
#line 3121
  return;
}
}
#line 3124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 3128
  goto ldv_50172;
  ldv_50171: 
#line 3129
  page = drbd_pp_pool;
#line 3130
  drbd_pp_pool = (struct page *)page->ldv_15532.private;
#line 3131
  __free_pages(page, 0U);
#line 3132
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_50172: ;
#line 3128
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 3129
    goto ldv_50171;
  } else {

  }

#line 3137
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 3138
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 3139
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 3140
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 3141
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3142
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 3143
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3144
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 3145
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3146
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 3147
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 3148
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 3150
  drbd_ee_mempool = 0;
#line 3151
  drbd_request_mempool = 0;
#line 3152
  drbd_ee_cache = 0;
#line 3153
  drbd_request_cache = 0;
#line 3154
  drbd_bm_ext_cache = 0;
#line 3155
  drbd_al_ext_cache = 0;
#line 3157
  return;
}
}
#line 3160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 3163
  number = (int const   )(minor_count * 32U);
#line 3167
  drbd_request_mempool = 0;
#line 3168
  drbd_ee_cache = 0;
#line 3169
  drbd_request_cache = 0;
#line 3170
  drbd_bm_ext_cache = 0;
#line 3171
  drbd_al_ext_cache = 0;
#line 3172
  drbd_pp_pool = 0;
#line 3175
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 3177
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3178
    goto Enomem;
  } else {

  }
#line 3180
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 3182
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3183
    goto Enomem;
  } else {

  }
#line 3185
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 3187
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3188
    goto Enomem;
  } else {

  }
#line 3190
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 3192
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 3193
    goto Enomem;
  } else {

  }
#line 3196
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 3198
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3199
    goto Enomem;
  } else {

  }
#line 3201
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3203
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3204
    goto Enomem;
  } else {

  }
#line 3207
  spinlock_check(& drbd_pp_lock);
#line 3207
  __raw_spin_lock_init(& drbd_pp_lock.ldv_6176.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3209
  i = 0;
#line 3209
  goto ldv_50183;
  ldv_50182: 
#line 3210
  page = alloc_pages(131282U, 0U);
#line 3211
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3212
    goto Enomem;
  } else {

  }
#line 3213
  page->ldv_15532.private = (unsigned long )drbd_pp_pool;
#line 3214
  drbd_pp_pool = page;
#line 3209
  i = i + 1;
  ldv_50183: ;
#line 3209
  if (i < number) {
#line 3210
    goto ldv_50182;
  } else {

  }
#line 3216
  drbd_pp_vacant = number;
#line 3218
  return (0);
  Enomem: 
#line 3221
  drbd_destroy_mempools();
#line 3222
  return (-12);
}
}
#line 3225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3232
  return (0);
}
}
#line 3235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3239 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3243
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3244
  if (rr != 0) {
#line 3245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3247
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3248
  if (rr != 0) {
#line 3249
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3251
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3252
  if (rr != 0) {
#line 3253
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3255
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3256
  if (rr != 0) {
#line 3257
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3259
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3260
  if (rr != 0) {
#line 3261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3262
  return;
}
}
#line 3266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3268
  tmp = minor_to_mdev(minor);
#line 3268
  mdev = tmp;
#line 3270
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3271
    return;
  } else {

  }
#line 3274
  if (mdev->open_cnt != 0) {
#line 3275
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3276);
  } else {

  }
#line 3278
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3278
  _b = tmp___0 == 0;
#line 3278
  if (_b != 0) {
#line 3278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3278);
  } else {

  }
#line 3278
  if (_b != 0) {
#line 3280
    lp = mdev->data.work.q.next;
#line 3280
    goto ldv_50204;
    ldv_50203: 
#line 3281
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3280
    lp = lp->next;
    ldv_50204: ;
#line 3280
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3281
      goto ldv_50203;
    } else {

    }

  } else {

  }
#line 3286
  del_gendisk(mdev->vdisk);
#line 3291
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3292
    bdput(mdev->this_bdev);
  } else {

  }
#line 3294
  drbd_free_resources(mdev);
#line 3296
  drbd_release_ee_lists(mdev);
#line 3299
  kfree((void const   *)mdev->ee_hash);
#line 3305
  lc_destroy(mdev->act_log);
#line 3306
  lc_destroy(mdev->resync);
#line 3308
  kfree((void const   *)mdev->p_uuid);
#line 3311
  kfree((void const   *)mdev->int_dig_out);
#line 3312
  kfree((void const   *)mdev->int_dig_in);
#line 3313
  kfree((void const   *)mdev->int_dig_vv);
#line 3318
  drbd_free_mdev(mdev);
#line 3319
  return;
}
}
#line 3321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3325
  unregister_reboot_notifier(& drbd_notifier);
#line 3335
  if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3336
    remove_proc_entry("drbd", 0);
  } else {

  }
#line 3338
  drbd_nl_cleanup();
#line 3340
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3341
    i = minor_count;
#line 3342
    goto ldv_50211;
    ldv_50210: 
#line 3343
    drbd_delete_device(i);
    ldv_50211: 
#line 3342
    tmp = i;
#line 3342
    i = i - 1U;
#line 3342
    if (tmp != 0U) {
#line 3343
      goto ldv_50210;
    } else {

    }
#line 3344
    drbd_destroy_mempools();
  } else {

  }
#line 3347
  kfree((void const   *)minor_table);
#line 3349
  unregister_blkdev(147U, "drbd");
#line 3351
  printk("<6>drbd: module cleanup done.\n");
#line 3352
  return;
}
}
#line 3361 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  bool tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3363
  mdev = (struct drbd_conf *)congested_data;
#line 3365
  reason = 45;
#line 3366
  r = 0;
#line 3368
  tmp = may_inc_ap_bio___0(mdev);
#line 3368
  if (tmp) {
#line 3368
    tmp___0 = 0;
  } else {
#line 3368
    tmp___0 = 1;
  }
#line 3368
  if (tmp___0) {
#line 3370
    r = bdi_bits;
#line 3371
    reason = 100;
#line 3372
    goto out;
  } else {

  }
#line 3375
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3375
  if (tmp___1 != 0) {
#line 3376
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3377
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3378
    put_ldev(mdev);
#line 3379
    if (r != 0) {
#line 3380
      reason = 98;
    } else {

    }
  } else {

  }
#line 3383
  if ((bdi_bits & 4) != 0) {
#line 3383
    tmp___2 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3383
    if (tmp___2 != 0) {
#line 3384
      r = r | 4;
#line 3385
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3389
  mdev->congestion_reason = reason;
#line 3390
  return (r);
}
}
#line 3393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3400
  tmp = kzalloc(4848UL, 208U);
#line 3400
  mdev = (struct drbd_conf *)tmp;
#line 3401
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3402
    return (0);
  } else {

  }
#line 3403
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3403
  if (tmp___0) {
#line 3403
    tmp___1 = 0;
  } else {
#line 3403
    tmp___1 = 1;
  }
#line 3403
  if (tmp___1) {
#line 3404
    goto out_no_cpumask;
  } else {

  }
#line 3406
  mdev->minor = minor;
#line 3408
  drbd_init_set_defaults(mdev);
#line 3410
  q = blk_alloc_queue(208U);
#line 3411
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3412
    goto out_no_q;
  } else {

  }
#line 3413
  mdev->rq_queue = q;
#line 3414
  q->queuedata = (void *)mdev;
#line 3416
  disk = alloc_disk(1);
#line 3417
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3418
    goto out_no_disk;
  } else {

  }
#line 3419
  mdev->vdisk = disk;
#line 3421
  set_disk_ro(disk, 1);
#line 3423
  disk->queue = q;
#line 3424
  disk->major = 147;
#line 3425
  disk->first_minor = (int )minor;
#line 3426
  disk->fops = & drbd_ops;
#line 3427
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3428
  disk->private_data = (void *)mdev;
#line 3430
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3432
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3434
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3435
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3437
  blk_queue_make_request(q, & drbd_make_request);
#line 3440
  blk_queue_max_hw_sectors(q, 16U);
#line 3441
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3442
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3443
  q->queue_lock = & mdev->req_lock;
#line 3445
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3446
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3447
    goto out_no_io_page;
  } else {

  }
#line 3449
  tmp___2 = drbd_bm_init(mdev);
#line 3449
  if (tmp___2 != 0) {
#line 3450
    goto out_no_bitmap;
  } else {

  }
#line 3452
  tmp___3 = tl_init(mdev);
#line 3452
  if (tmp___3 == 0) {
#line 3453
    goto out_no_tl;
  } else {

  }
#line 3455
  tmp___4 = kzalloc(120UL, 208U);
#line 3455
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3456
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3457
    goto out_no_app_reads;
  } else {

  }
#line 3459
  tmp___5 = kzalloc(40UL, 208U);
#line 3459
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3460
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3461
    goto out_no_epoch;
  } else {

  }
#line 3463
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3464
  mdev->epochs = 1U;
#line 3466
  return (mdev);
  out_no_epoch: 
#line 3471
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3473
  tl_cleanup(mdev);
  out_no_tl: 
#line 3475
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3477
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3479
  put_disk(disk);
  out_no_disk: 
#line 3481
  blk_cleanup_queue(q);
  out_no_q: 
#line 3483
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3485
  kfree((void const   *)mdev);
#line 3486
  return (0);
}
}
#line 3491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3493
  kfree((void const   *)mdev->current_epoch);
#line 3494
  kfree((void const   *)mdev->app_reads_hash);
#line 3495
  tl_cleanup(mdev);
#line 3496
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3497
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3498
  __free_pages(mdev->md_io_page, 0U);
#line 3499
  put_disk(mdev->vdisk);
#line 3500
  blk_cleanup_queue(mdev->rq_queue);
#line 3501
  free_cpumask_var(mdev->cpu_mask);
#line 3502
  drbd_free_tl_hash(mdev);
#line 3503
  kfree((void const   *)mdev);
#line 3504
  return;
}
}
#line 3507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3518
  if (minor_count == 0U || minor_count > 256U) {
#line 3519
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3522
    return (-22);
  } else {

  }
#line 3528
  err = drbd_nl_init();
#line 3529
  if (err != 0) {
#line 3530
    return (err);
  } else {

  }
#line 3532
  err = register_blkdev(147U, "drbd");
#line 3533
  if (err != 0) {
#line 3534
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3537
    return (err);
  } else {

  }
#line 3540
  register_reboot_notifier(& drbd_notifier);
#line 3545
  err = -12;
#line 3547
  __init_waitqueue_head(& drbd_pp_wait, "&drbd_pp_wait", & __key);
#line 3549
  drbd_proc = 0;
#line 3550
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3550
  minor_table = (struct drbd_conf **)tmp;
#line 3552
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3553
    goto Enomem;
  } else {

  }
#line 3555
  err = drbd_create_mempools();
#line 3556
  if (err != 0) {
#line 3557
    goto Enomem;
  } else {

  }
#line 3559
  drbd_proc = proc_create_data("drbd", 33060, 0, & drbd_proc_fops, 0);
#line 3560
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3561
    printk("<3>drbd: unable to register proc file\n");
#line 3562
    goto Enomem;
  } else {

  }
#line 3565
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3567
  printk("<6>drbd: initialized. Version: 8.3.11 (api:%d/proto:%d-%d)\n", 88, 86, 96);
#line 3570
  tmp___0 = drbd_buildtag();
#line 3570
  printk("<6>drbd: %s\n", tmp___0);
#line 3571
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3573
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3575
  return (0);
  Enomem: 
#line 3578
  drbd_cleanup();
#line 3579
  if (err == -12) {
#line 3581
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3583
    printk("<3>drbd: initialization failure\n");
  }
#line 3584
  return (err);
}
}
#line 3587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3589
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3590
    return;
  } else {

  }
#line 3592
  blkdev_put(ldev->backing_bdev, 131U);
#line 3593
  blkdev_put(ldev->md_bdev, 131U);
#line 3595
  kfree((void const   *)ldev);
#line 3596
  return;
}
}
#line 3598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3600
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3601
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3602
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3603
    sock_release(mdev->data.socket);
#line 3604
    mdev->data.socket = 0;
#line 3605
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3607
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3608
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3609
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3610
    sock_release(mdev->meta.socket);
#line 3611
    mdev->meta.socket = 0;
#line 3612
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3614
  return;
}
}
#line 3617 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3619
  crypto_free_hash(mdev->csums_tfm);
#line 3620
  mdev->csums_tfm = 0;
#line 3621
  crypto_free_hash(mdev->verify_tfm);
#line 3622
  mdev->verify_tfm = 0;
#line 3623
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3624
  mdev->cram_hmac_tfm = 0;
#line 3625
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3626
  mdev->integrity_w_tfm = 0;
#line 3627
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3628
  mdev->integrity_r_tfm = 0;
#line 3630
  drbd_free_sock(mdev);
#line 3632
  drbd_free_bc(mdev->ldev);
#line 3632
  mdev->ldev = 0;
#line 3633
  return;
}
}
#line 3661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  sector_t tmp___12 ;
  int tmp___13 ;
  sector_t tmp___14 ;

  {
#line 3667
  del_timer(& mdev->md_sync_timer);
#line 3669
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3669
  if (tmp == 0) {
#line 3670
    return;
  } else {

  }
#line 3674
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3674
  if (tmp___0 == 0) {
#line 3675
    return;
  } else {

  }
#line 3677
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3678
  tmp___1 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 3678
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3679
  memset((void *)buffer, 0, 512UL);
#line 3681
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3681
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3681
  buffer->la_size = tmp___3;
#line 3682
  i = 0;
#line 3682
  goto ldv_50276;
  ldv_50275: 
#line 3683
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3683
  buffer->uuid[i] = tmp___4;
#line 3682
  i = i + 1;
  ldv_50276: ;
#line 3682
  if (i <= 3) {
#line 3683
    goto ldv_50275;
  } else {

  }
#line 3684
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3684
  buffer->flags = tmp___5;
#line 3685
  buffer->magic = 1795323011U;
#line 3687
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3687
  buffer->md_size_sect = tmp___6;
#line 3688
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3688
  buffer->al_offset = tmp___7;
#line 3689
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3689
  buffer->al_nr_extents = tmp___8;
#line 3690
  buffer->bm_bytes_per_bit = 1048576U;
#line 3691
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3691
  buffer->device_uuid = tmp___9;
#line 3693
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3693
  buffer->bm_offset = tmp___10;
#line 3694
  tmp___11 = __fswab32((__u32 )mdev->peer_max_bio_size);
#line 3694
  buffer->la_peer_max_bio_size = tmp___11;
#line 3696
  tmp___12 = drbd_md_ss__(mdev, mdev->ldev);
#line 3696
  if ((unsigned long long )tmp___12 != (mdev->ldev)->md.md_offset) {
#line 3696
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3696);
  } else {

  }
#line 3697
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3699
  tmp___13 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3699
  if (tmp___13 == 0) {
#line 3701
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3702
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3707
  tmp___14 = drbd_get_capacity(mdev->this_bdev);
#line 3707
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___14;
#line 3709
  mutex_unlock(& mdev->md_io_mutex);
#line 3710
  put_ldev(mdev);
#line 3711
  return;
}
}
#line 3721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;
  int peer ;
  __u32 tmp___16 ;
  int __max1 ;
  int __max2 ;

  {
#line 3724
  rv = 101;
#line 3726
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3726
  if (tmp == 0) {
#line 3727
    return (118);
  } else {

  }
#line 3729
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3730
  tmp___0 = lowmem_page_address((struct page  const  *)mdev->md_io_page);
#line 3730
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3732
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3732
  if (tmp___1 == 0) {
#line 3735
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3736
    rv = 118;
#line 3737
    goto err;
  } else {

  }
#line 3740
  tmp___2 = __fswab32(buffer->magic);
#line 3740
  if (tmp___2 != 2205418091U) {
#line 3741
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3742
    rv = 119;
#line 3743
    goto err;
  } else {

  }
#line 3745
  tmp___4 = __fswab32(buffer->al_offset);
#line 3745
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3746
    tmp___3 = __fswab32(buffer->al_offset);
#line 3746
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3748
    rv = 119;
#line 3749
    goto err;
  } else {

  }
#line 3751
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3751
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3752
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3752
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3754
    rv = 119;
#line 3755
    goto err;
  } else {

  }
#line 3757
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3757
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3758
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3758
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3760
    rv = 119;
#line 3761
    goto err;
  } else {

  }
#line 3764
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3764
  if (tmp___10 != 4096U) {
#line 3765
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3767
    rv = 119;
#line 3768
    goto err;
  } else {

  }
#line 3771
  tmp___11 = __fswab64(buffer->la_size);
#line 3771
  bdev->md.la_size_sect = tmp___11;
#line 3772
  i = 0;
#line 3772
  goto ldv_50288;
  ldv_50287: 
#line 3773
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3773
  bdev->md.uuid[i] = tmp___12;
#line 3772
  i = i + 1;
  ldv_50288: ;
#line 3772
  if (i <= 3) {
#line 3773
    goto ldv_50287;
  } else {

  }
#line 3774
  tmp___13 = __fswab32(buffer->flags);
#line 3774
  bdev->md.flags = tmp___13;
#line 3775
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3775
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3776
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3776
  bdev->md.device_uuid = tmp___15;
#line 3778
  spin_lock_irq(& mdev->req_lock);
#line 3779
  if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 3781
    tmp___16 = __fswab32(buffer->la_peer_max_bio_size);
#line 3781
    peer = (int )tmp___16;
#line 3782
    __max1 = peer;
#line 3782
    __max2 = 4096;
#line 3782
    peer = __max1 > __max2 ? __max1 : __max2;
#line 3783
    mdev->peer_max_bio_size = peer;
  } else {

  }
#line 3785
  spin_unlock_irq(& mdev->req_lock);
#line 3787
  if (mdev->sync_conf.al_extents <= 6) {
#line 3788
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3791
  mutex_unlock(& mdev->md_io_mutex);
#line 3792
  put_ldev(mdev);
#line 3794
  return (rv);
}
}
#line 3815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3817
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3817
  if (tmp == 0) {
#line 3818
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3819
  return;
}
}
#line 3822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3826
  i = 2;
#line 3826
  goto ldv_50302;
  ldv_50301: 
#line 3827
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3826
  i = i + 1;
  ldv_50302: ;
#line 3826
  if (i <= 2) {
#line 3827
    goto ldv_50301;
  } else {

  }

#line 3831
  return;
}
}
#line 3830 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3832
  if (idx == 0) {
#line 3833
    if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 3834
      val = val | 1ULL;
    } else {
#line 3836
      val = val & 0xfffffffffffffffeULL;
    }
#line 3838
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3841
  (mdev->ldev)->md.uuid[idx] = val;
#line 3842
  drbd_md_mark_dirty(mdev);
#line 3843
  return;
}
}
#line 3846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3848
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3849
    drbd_uuid_move_history(mdev);
#line 3850
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3852
  _drbd_uuid_set(mdev, idx, val);
#line 3853
  return;
}
}
#line 3862 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  unsigned long long bm_uuid ;

  {
#line 3865
  bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3867
  if (bm_uuid != 0ULL) {
#line 3868
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
             bm_uuid);
  } else {

  }
#line 3870
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3872
  get_random_bytes((void *)(& val), 8);
#line 3873
  _drbd_uuid_set(mdev, 0, val);
#line 3874
  drbd_print_uuids(mdev, "new current UUID");
#line 3876
  drbd_md_sync(mdev);
#line 3877
  return;
}
}
#line 3879 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  unsigned long long bm_uuid ;

  {
#line 3881
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3882
    return;
  } else {

  }
#line 3884
  if (val == 0ULL) {
#line 3885
    drbd_uuid_move_history(mdev);
#line 3886
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3887
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3889
    bm_uuid = (mdev->ldev)->md.uuid[1];
#line 3890
    if (bm_uuid != 0ULL) {
#line 3891
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID was already set: %llX\n",
               bm_uuid);
    } else {

    }
#line 3893
    (mdev->ldev)->md.uuid[1] = val & 0xfffffffffffffffeULL;
  }
#line 3895
  drbd_md_mark_dirty(mdev);
#line 3896
  return;
}
}
#line 3904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3906
  rv = -5;
#line 3908
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3908
  if (tmp != 0) {
#line 3909
    drbd_md_set_flag(mdev, 8);
#line 3910
    drbd_md_sync(mdev);
#line 3911
    drbd_bm_set_all(mdev);
#line 3913
    rv = drbd_bm_write(mdev);
#line 3915
    if (rv == 0) {
#line 3916
      drbd_md_clear_flag(mdev, 8);
#line 3917
      drbd_md_sync(mdev);
    } else {

    }
#line 3920
    put_ldev(mdev);
  } else {

  }
#line 3923
  return (rv);
}
}
#line 3932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3934
  rv = -5;
#line 3936
  drbd_resume_al(mdev);
#line 3937
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3937
  if (tmp != 0) {
#line 3938
    drbd_bm_clear_all(mdev);
#line 3939
    rv = drbd_bm_write(mdev);
#line 3940
    put_ldev(mdev);
  } else {

  }
#line 3943
  return (rv);
}
}
#line 3946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 3948
  __mptr = (struct drbd_work  const  *)w;
#line 3948
  work = (struct bm_io_work *)__mptr;
#line 3949
  rv = -5;
#line 3951
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3951
  if (tmp != 0) {
#line 3951
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3951);
  } else {

  }
#line 3953
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3953
  if (tmp___0 != 0) {
#line 3954
    drbd_bm_lock(mdev, work->why, work->flags);
#line 3955
    rv = (*(work->io_fn))(mdev);
#line 3956
    drbd_bm_unlock(mdev);
#line 3957
    put_ldev(mdev);
  } else {

  }
#line 3960
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 3961
  __asm__  volatile   ("": : : "memory");
#line 3962
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3964
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3965
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3967
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3968
  work->why = 0;
#line 3969
  work->flags = 0;
#line 3971
  return (1);
}
}
#line 3974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 3976
  lc_destroy(mdev->resync);
#line 3977
  mdev->resync = 0;
#line 3978
  lc_destroy(mdev->act_log);
#line 3979
  mdev->act_log = 0;
#line 3980
  drbd_free_bc(mdev->ldev);
#line 3980
  mdev->ldev = 0;
#line 3984
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 3985
    __free_pages(mdev->md_io_tmpp, 0U);
#line 3986
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 3988
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3989
  return;
}
}
#line 3991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3993
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 3993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3993);
  } else {

  }
#line 3998
  val.i = 0U;
#line 3998
  val.ldv_38894.disk = 0U;
#line 3998
  mask.i = 0U;
#line 3998
  mask.ldv_38894.disk = 15U;
#line 3998
  drbd_force_state(mdev, mask, val);
#line 3999
  return (1);
}
}
#line 4002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 4004
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 4004
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4004);
  } else {

  }
#line 4005
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 4005
  if (tmp == 0) {
#line 4006
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 4007
  return;
}
}
#line 4021 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why , enum bm_flag flags ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4026
  tmp = get_current();
#line 4026
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 4026
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4026);
  } else {

  }
#line 4028
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 4028
  if (tmp___0 != 0) {
#line 4028
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4028);
  } else {

  }
#line 4029
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 4029
  if (tmp___1 != 0) {
#line 4029
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4029);
  } else {

  }
#line 4030
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 4030
  if (tmp___2 == 0) {
#line 4030
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4030);
  } else {

  }
#line 4031
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 4032
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 4035
  mdev->bm_io_work.io_fn = io_fn;
#line 4036
  mdev->bm_io_work.done = done;
#line 4037
  mdev->bm_io_work.why = why;
#line 4038
  mdev->bm_io_work.flags = flags;
#line 4040
  spin_lock_irq(& mdev->req_lock);
#line 4041
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 4042
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 4042
  if (tmp___4 == 0) {
#line 4043
    tmp___3 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 4043
    if (tmp___3 == 0) {
#line 4044
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {

    }
  } else {

  }
#line 4046
  spin_unlock_irq(& mdev->req_lock);
#line 4047
  return;
}
}
#line 4058 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ,
                   enum bm_flag flags ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 4063
  tmp = get_current();
#line 4063
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 4063
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            4063);
  } else {

  }
#line 4065
  if (((unsigned int )flags & 1U) == 0U) {
#line 4066
    drbd_suspend_io(mdev);
  } else {

  }
#line 4068
  drbd_bm_lock(mdev, why, flags);
#line 4069
  rv = (*io_fn)(mdev);
#line 4070
  drbd_bm_unlock(mdev);
#line 4072
  if (((unsigned int )flags & 1U) == 0U) {
#line 4073
    drbd_resume_io(mdev);
  } else {

  }
#line 4075
  return (rv);
}
}
#line 4078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4080
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 4081
    drbd_md_mark_dirty(mdev);
#line 4082
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 4084
  return;
}
}
#line 4086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 4088
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 4089
    drbd_md_mark_dirty(mdev);
#line 4090
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 4092
  return;
}
}
#line 4093 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 4095
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 4098 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 4100
  mdev = (struct drbd_conf *)data;
#line 4102
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 4103
  return;
}
}
#line 4105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 4107
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 4112
  drbd_md_sync(mdev);
#line 4113
  return (1);
}
}
#line 4133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 4137
  tmp = rsp->count;
#line 4137
  rsp->count = rsp->count - 1UL;
#line 4137
  if (tmp == 0UL) {
#line 4138
    get_random_bytes((void *)(& refresh), 8);
#line 4139
    rsp->state = rsp->state + (unsigned long )refresh;
#line 4140
    rsp->count = 10000UL;
  } else {

  }
#line 4142
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 4143
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 4143
  return ((unsigned long )tmp___0);
}
}
#line 4147 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 4148
  _faults[0] = (char *)"Meta-data write";
#line 4148
  _faults[1] = (char *)"Meta-data read";
#line 4148
  _faults[2] = (char *)"Resync write";
#line 4148
  _faults[3] = (char *)"Resync read";
#line 4148
  _faults[4] = (char *)"Data write";
#line 4148
  _faults[5] = (char *)"Data read";
#line 4148
  _faults[6] = (char *)"Data read ahead";
#line 4148
  _faults[7] = (char *)"BM allocation";
#line 4148
  _faults[8] = (char *)"EE allocation";
#line 4148
  _faults[9] = (char *)"receive data corruption";
#line 4161
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 4165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 4167
  rrs.state = 0UL;
#line 4167
  rrs.count = 0UL;
#line 4169
  if (fault_devs == 0) {
#line 4169
    goto _L;
  } else {
#line 4169
    tmp = mdev_to_minor(mdev);
#line 4169
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 4169
      tmp___0 = _drbd_fault_random(& rrs);
#line 4169
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 4169
        tmp___1 = 1;
      } else {
#line 4169
        tmp___1 = 0;
      }
    } else {
#line 4169
      tmp___1 = 0;
    }
  }
#line 4169
  ret = (unsigned int )tmp___1;
#line 4174
  if (ret != 0U) {
#line 4175
    fault_count = fault_count + 1;
#line 4177
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 4177
    if (tmp___3 != 0) {
#line 4178
      tmp___2 = _drbd_fault_str(type);
#line 4178
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 4182
  return (ret);
}
}
#line 4186 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 4191
  buildtag[0] = '\000';
#line 4191
  tmp = 1U;
#line 4191
  while (1) {
#line 4191
    if (tmp >= 38U) {
#line 4191
      break;
    } else {

    }
#line 4191
    buildtag[tmp] = (char)0;
#line 4191
    tmp = tmp + 1U;
  }
#line 4193
  if ((int )((signed char )buildtag[0]) == 0) {
#line 4195
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 4196
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4199
      buildtag[0] = 98;
    }
  } else {

  }
#line 4202
  return ((char const   *)(& buildtag));
}
}
#line 4250 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_68_p1 ;
  int res_drbd_open_68 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_69_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_75_p1 ;
  void *var_drbd_notify_sys_75_p2 ;
  unsigned long var_md_sync_timer_fn_104_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4439
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4398
  LDV_IN_INTERRUPT = 1;
#line 4407
  ldv_initialize();
#line 4422
  ldv_handler_precall();
#line 4423
  tmp = drbd_init();
#line 4423
  if (tmp != 0) {
#line 4424
    goto ldv_final;
  } else {

  }
#line 4446
  goto ldv_50482;
  ldv_50481: 
#line 4450
  tmp___0 = nondet_int();
#line 4450
  switch (tmp___0) {
  case 0: ;
#line 4455
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4469
    ldv_handler_precall();
#line 4470
    res_drbd_open_68 = drbd_open(var_group1, var_drbd_open_68_p1);
#line 4471
    ldv_check_return_value(res_drbd_open_68);
#line 4472
    if (res_drbd_open_68 != 0) {
#line 4473
      goto ldv_module_exit;
    } else {

    }
#line 4491
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4497
  goto ldv_50476;
  case 1: ;
#line 4501
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4515
    ldv_handler_precall();
#line 4516
    drbd_release(var_group2, var_drbd_release_69_p1);
#line 4534
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4540
  goto ldv_50476;
  case 2: 
#line 4558
  ldv_handler_precall();
#line 4559
  drbd_notify_sys(var_group3, var_drbd_notify_sys_75_p1, var_drbd_notify_sys_75_p2);
#line 4583
  goto ldv_50476;
  case 3: 
#line 4607
  ldv_handler_precall();
#line 4608
  md_sync_timer_fn(var_md_sync_timer_fn_104_p0);
#line 4626
  goto ldv_50476;
  default: ;
#line 4627
  goto ldv_50476;
  }
  ldv_50476: ;
  ldv_50482: 
#line 4446
  tmp___1 = nondet_int();
#line 4446
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4448
    goto ldv_50481;
  } else {

  }

  ldv_module_exit: 
#line 4648
  ldv_handler_precall();
#line 4649
  drbd_cleanup();
  ldv_final: 
#line 4669
  ldv_check_final_state();
#line 4672
  return;
}
}
#line 4676 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4681
  ldv_module_put(ldv_func_arg1);
#line 4682
  return;
}
}
#line 4692 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4697
  ldv_module_put(ldv_func_arg1);
#line 4698
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[24U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT",      "Ahead",      "Behind"};
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 68 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 68
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 80
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 101 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 104
  return ((unsigned int )s <= 23U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 109
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 114
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 117 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_rv err ) 
{ 


  {
#line 119
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 320 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 93 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 125
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 179 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 185
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 186
  __len = (size_t )len;
#line 186
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 189
  return;
}
}
#line 233 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 239
  tmp = __bitmap_equal(src1, src2, nbits);
#line 239
  return (tmp);
}
}
#line 301 "include/linux/bitmap.h"
__inline static int bitmap_parse(char const   *buf , unsigned int buflen , unsigned long *maskp ,
                                 int nmaskbits ) 
{ 
  int tmp ;

  {
#line 304
  tmp = __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
#line 304
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 71 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 75
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ,
                                                                          struct cred * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 81
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 88 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ,
                                                                             struct cred * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 94
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 96
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 98
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 99
    return (-12);
  } else {

  }
#line 101
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 103
  tmp = call_usermodehelper_exec(info, wait);
#line 103
  return (tmp);
}
}
#line 107 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 109
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 109
  return (tmp);
}
}
#line 207 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 484 "include/linux/module.h"
__inline static int ldv_try_module_get_1(struct module *module ) ;
#line 490
void ldv_module_put_7(struct module *ldv_func_arg1 ) ;
#line 494
void ldv_module_put_8(struct module *ldv_func_arg1 ) ;
#line 2092 "include/linux/fs.h"
extern struct block_device *blkdev_get_by_path(char const   * , fmode_t  , void * ) ;
#line 124 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char const   * , void (*)(struct cn_msg * ,
                                                                      struct netlink_skb_parms * ) ) ;
#line 126
extern void cn_del_callback(struct cb_id * ) ;
#line 127
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 410 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 831 "include/linux/blkdev.h"
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 835
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 851
extern void blk_queue_stack_limits(struct request_queue * , struct request_queue * ) ;
#line 858
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1527 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1919 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1922
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1926
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1926
  if (tmp___1 != 0UL) {
#line 1926
    __min1 = 2251799813685248UL;
#line 1926
    tmp___0 = drbd_md_first_sector(bdev);
#line 1926
    __min2 = tmp___0;
#line 1926
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1926
    s = 0UL;
  }
#line 1929
  goto ldv_48730;
  case -2: 
#line 1931
  __min1___0 = 2251799813685248UL;
#line 1931
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1931
  __min2___0 = tmp___2;
#line 1931
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1934
  __min1___1 = s;
#line 1934
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1934
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1937
  goto ldv_48730;
  default: 
#line 1939
  __min1___2 = 8587575296UL;
#line 1939
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1939
  __min2___2 = tmp___3;
#line 1939
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_48730: ;
#line 1942
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 76 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[85U]  = 
#line 76 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}, 
        {"on_congestion", 0, 4}, 
        {"cong_fill", 0, 4}, 
        {"cong_extents", 0, 4}, 
        {"force", 32768, 4}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 52
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 53
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_49506;
  ldv_49505: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_49503;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_49503: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_49506: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_49505;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_49567;
  ldv_49566: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_49535;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_49535;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_49535;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_49535;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_49535;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_49535;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_49535;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_49535;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_49535;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_49535;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_49535;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_49535;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_49535: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_49567: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_49566;
  } else {

  }

#line 20
  return (1);
}
}
#line 70
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 70 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  unsigned short *tmp___19 ;
  u16 tmp___20 ;

  {
#line 38
  goto ldv_49673;
  ldv_49672: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_49605;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_49605;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_49605;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_49605;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_49605;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_49605;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_49605;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_49605;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_49605;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_49605;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_49605;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_49605;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_49605;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_49605;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_49605;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_49605;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_49605;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_49605;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_49605;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_49605;
  case 81: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->on_congestion = (int )tmp___16;
#line 38
  goto ldv_49605;
  case 82: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_fill = (int )tmp___17;
#line 38
  goto ldv_49605;
  case 83: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->cong_extents = (int )tmp___18;
#line 38
  goto ldv_49605;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_49605;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_49605: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_49673: 
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___20 = get_unaligned_le16((void const   *)tmp___19);
#line 38
  tag = (int )tmp___20;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_49672;
  } else {

  }

#line 38
  return (1);
}
}
#line 74
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) ;
#line 74 "include/linux/drbd_nl.h"
static int disconnect_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disconnect *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 72
  goto ldv_49690;
  ldv_49689: 
#line 72
  tmp = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 72
  dlen = (int )tmp___0;
#line 72
  switch (tag & 8191) {
  case 84: 
#line 72
  arg->force = (int )((signed char )*((char *)tags)) != 0;
#line 72
  goto ldv_49687;
  default: ;
#line 72
  if ((tag & 8192) != 0) {
#line 72
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 72
    return (0);
  } else {

  }
  }
  ldv_49687: 
#line 72
  tags = tags + (unsigned long )dlen;
  ldv_49690: 
#line 72
  tmp___1 = tags;
#line 72
  tags = tags + 1;
#line 72
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 72
  tag = (int )tmp___2;
#line 72
  if (tag != 0) {
#line 73
    goto ldv_49689;
  } else {

  }

#line 72
  return (1);
}
}
#line 80
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 80 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 76
  goto ldv_49709;
  ldv_49708: 
#line 76
  tmp = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 76
  dlen = (int )tmp___0;
#line 76
  switch (tag & 8191) {
  case 29: 
#line 76
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 76
  goto ldv_49704;
  case 68: 
#line 76
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_49704;
  case 69: 
#line 76
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 76
  goto ldv_49704;
  default: ;
#line 76
  if ((tag & 8192) != 0) {
#line 76
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 76
    return (0);
  } else {

  }
  }
  ldv_49704: 
#line 76
  tags = tags + (unsigned long )dlen;
  ldv_49709: 
#line 76
  tmp___1 = tags;
#line 76
  tags = tags + 1;
#line 76
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 76
  tag = (int )tmp___2;
#line 76
  if (tag != 0) {
#line 77
    goto ldv_49708;
  } else {

  }

#line 76
  return (1);
}
}
#line 101
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 101 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 82
  goto ldv_49765;
  ldv_49764: 
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 82
  dlen = (int )tmp___0;
#line 82
  switch (tag & 8191) {
  case 30: 
#line 82
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->rate = (int )tmp___1;
#line 82
  goto ldv_49723;
  case 31: 
#line 82
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->after = (int )tmp___2;
#line 82
  goto ldv_49723;
  case 32: 
#line 82
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->al_extents = (int )tmp___3;
#line 82
  goto ldv_49723;
  case 52: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->verify_alg_len = dlen;
#line 82
  __min1 = (size_t )dlen;
#line 82
  __min2 = 64UL;
#line 82
  __len = __min1 < __min2 ? __min1 : __min2;
#line 82
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 82
  goto ldv_49723;
  case 51: ;
#line 82
  if (dlen > 32) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->cpu_mask_len = dlen;
#line 82
  __min1___0 = (size_t )dlen;
#line 82
  __min2___0 = 32UL;
#line 82
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 82
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 82
  goto ldv_49723;
  case 64: ;
#line 82
  if (dlen > 64) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 82
    return (0);
  } else {

  }
#line 82
  arg->csums_alg_len = dlen;
#line 82
  __min1___1 = (size_t )dlen;
#line 82
  __min2___1 = 64UL;
#line 82
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 82
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 82
  goto ldv_49723;
  case 65: 
#line 82
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 82
  goto ldv_49723;
  case 75: 
#line 82
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->on_no_data = (int )tmp___4;
#line 82
  goto ldv_49723;
  case 76: 
#line 82
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_plan_ahead = (int )tmp___5;
#line 82
  goto ldv_49723;
  case 77: 
#line 82
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_delay_target = (int )tmp___6;
#line 82
  goto ldv_49723;
  case 78: 
#line 82
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_fill_target = (int )tmp___7;
#line 82
  goto ldv_49723;
  case 79: 
#line 82
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_max_rate = (int )tmp___8;
#line 82
  goto ldv_49723;
  case 80: 
#line 82
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 82
  arg->c_min_rate = (int )tmp___9;
#line 82
  goto ldv_49723;
  default: ;
#line 82
  if ((tag & 8192) != 0) {
#line 82
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 82
    return (0);
  } else {

  }
  }
  ldv_49723: 
#line 82
  tags = tags + (unsigned long )dlen;
  ldv_49765: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 82
  tag = (int )tmp___11;
#line 82
  if (tag != 0) {
#line 83
    goto ldv_49764;
  } else {

  }

#line 82
  return (1);
}
}
#line 145
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 145 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 143
  goto ldv_50064;
  ldv_50063: 
#line 143
  tmp = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 143
  dlen = (int )tmp___0;
#line 143
  switch (tag & 8191) {
  case 66: 
#line 143
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 143
  goto ldv_50061;
  default: ;
#line 143
  if ((tag & 8192) != 0) {
#line 143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 143
    return (0);
  } else {

  }
  }
  ldv_50061: 
#line 143
  tags = tags + (unsigned long )dlen;
  ldv_50064: 
#line 143
  tmp___1 = tags;
#line 143
  tags = tags + 1;
#line 143
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 143
  tag = (int )tmp___2;
#line 143
  if (tag != 0) {
#line 144
    goto ldv_50063;
  } else {

  }

#line 143
  return (1);
}
}
#line 149
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 149 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 147
  goto ldv_50081;
  ldv_50080: 
#line 147
  tmp = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 147
  dlen = (int )tmp___0;
#line 147
  switch (tag & 8191) {
  case 63: 
#line 147
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 147
  goto ldv_50078;
  default: ;
#line 147
  if ((tag & 8192) != 0) {
#line 147
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 147
    return (0);
  } else {

  }
  }
  ldv_50078: 
#line 147
  tags = tags + (unsigned long )dlen;
  ldv_50081: 
#line 147
  tmp___1 = tags;
#line 147
  tags = tags + 1;
#line 147
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 147
  tag = (int )tmp___2;
#line 147
  if (tag != 0) {
#line 148
    goto ldv_50080;
  } else {

  }

#line 147
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_50126;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_50126;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_50126;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_50126;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50126;
  }
  ldv_50126: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_50133;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_50133;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_50133;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_50133;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50133;
  }
  ldv_50133: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_50140;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_50140;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50140;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_50140;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50140;
  }
  ldv_50140: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_50147;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_50147;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_50147;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_50147;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50147;
  }
  ldv_50147: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_50154;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_50154;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50154;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_50154;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50154;
  }
  ldv_50154: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_50164;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_50164;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_50164;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_50164;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50164;
  }
  ldv_50164: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_50171;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_50171;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50171;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_50171;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50171;
  }
  ldv_50171: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_50181;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_50181;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_50181;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_50181;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50181;
  }
  ldv_50181: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_50188;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_50188;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_50188;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_50188;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50188;
  }
  ldv_50188: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_50195;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_50195;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50195;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_50195;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50195;
  }
  ldv_50195: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_50202;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_50202;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_50202;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_50202;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50202;
  }
  ldv_50202: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_50209;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_50209;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_50209;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_50209;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50209;
  }
  ldv_50209: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_50216;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_50216;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50216;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_50216;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50216;
  }
  ldv_50216: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_50223;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_50223;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_50223;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_50223;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50223;
  }
  ldv_50223: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_50230;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_50230;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_50230;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_50230;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50230;
  }
  ldv_50230: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_50237;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_50237;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_50237;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_50237;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50237;
  }
  ldv_50237: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_50244;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_50244;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_50244;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_50244;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50244;
  }
  ldv_50244: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_50251;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_50251;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_50251;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_50251;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50251;
  }
  ldv_50251: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_50258;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_50258;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_50258;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_50258;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50258;
  }
  ldv_50258: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_50265;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_50265;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_50265;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_50265;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50265;
  }
  ldv_50265: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_50272;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_50272;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_50272;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_50272;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50272;
  }
  ldv_50272: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_50279;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_50279;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_50279;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_50279;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50279;
  }
  ldv_50279: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_50286;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_50286;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_50286;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_50286;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50286;
  }
  ldv_50286: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_50293;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_50293;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_50293;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_50293;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50293;
  }
  ldv_50293: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_50300;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_50300;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_50300;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_50300;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50300;
  }
  ldv_50300: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_50307;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_50307;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_50307;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_50307;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50307;
  }
  ldv_50307: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_50314;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_50314;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_50314;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_50314;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50314;
  }
  ldv_50314: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_50321;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_50321;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_50321;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_50321;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50321;
  }
  ldv_50321: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_50328;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_50328;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_50328;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_50328;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_50328;
  }
  ldv_50328: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 70
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 70 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  void *__gu_p___57 ;
  unsigned short *tmp___41 ;
  void *__gu_p___58 ;
  unsigned short *tmp___42 ;
  void *__gu_p___59 ;
  void *__gu_p___60 ;
  unsigned short *tmp___43 ;
  void *__gu_p___61 ;
  unsigned short *tmp___44 ;
  void *__gu_p___62 ;
  void *__gu_p___63 ;
  unsigned short *tmp___45 ;
  void *__gu_p___64 ;
  unsigned short *tmp___46 ;
  void *__gu_p___65 ;
  unsigned short *tmp___47 ;
  void *__gu_p___66 ;
  unsigned short *tmp___48 ;
  void *__gu_p___67 ;
  unsigned short *tmp___49 ;
  void *__gu_p___68 ;
  unsigned short *tmp___50 ;
  void *__gu_p___69 ;
  unsigned short *tmp___51 ;
  void *__gu_p___70 ;
  unsigned short *tmp___52 ;
  void *__gu_p___71 ;
  unsigned short *tmp___53 ;
  void *__gu_p___72 ;
  unsigned short *tmp___54 ;
  void *__gu_p___73 ;
  unsigned short *tmp___55 ;
  void *__gu_p___74 ;
  unsigned short *tmp___56 ;
  void *__gu_p___75 ;
  unsigned short *tmp___57 ;
  void *__gu_p___76 ;
  unsigned short *tmp___58 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_50353;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_50353;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_50353;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_50353;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50353;
  }
  ldv_50353: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_50360;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_50360;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_50360;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_50360;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50360;
  }
  ldv_50360: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_50370;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_50370;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_50370;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_50370;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50370;
  }
  ldv_50370: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_50377;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_50377;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_50377;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_50377;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50377;
  }
  ldv_50377: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_50387;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_50387;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_50387;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_50387;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50387;
  }
  ldv_50387: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_50394;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_50394;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_50394;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_50394;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50394;
  }
  ldv_50394: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_50404;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_50404;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_50404;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_50404;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50404;
  }
  ldv_50404: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_50411;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_50411;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_50411;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_50411;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50411;
  }
  ldv_50411: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_50421;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_50421;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_50421;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_50421;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50421;
  }
  ldv_50421: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_50428;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_50428;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_50428;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_50428;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50428;
  }
  ldv_50428: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_50438;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_50438;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_50438;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_50438;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50438;
  }
  ldv_50438: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_50445;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_50445;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_50445;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_50445;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50445;
  }
  ldv_50445: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_50452;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_50452;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_50452;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_50452;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50452;
  }
  ldv_50452: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_50459;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_50459;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_50459;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_50459;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50459;
  }
  ldv_50459: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_50466;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_50466;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_50466;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_50466;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50466;
  }
  ldv_50466: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_50473;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_50473;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_50473;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_50473;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50473;
  }
  ldv_50473: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_50480;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_50480;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_50480;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_50480;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50480;
  }
  ldv_50480: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_50487;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_50487;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_50487;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_50487;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50487;
  }
  ldv_50487: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_50494;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_50494;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_50494;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_50494;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50494;
  }
  ldv_50494: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_50501;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_50501;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_50501;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_50501;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50501;
  }
  ldv_50501: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_50508;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_50508;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_50508;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_50508;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50508;
  }
  ldv_50508: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_50515;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_50515;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_50515;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_50515;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50515;
  }
  ldv_50515: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_50522;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_50522;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_50522;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_50522;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50522;
  }
  ldv_50522: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_50529;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_50529;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_50529;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_50529;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50529;
  }
  ldv_50529: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_50536;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_50536;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_50536;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_50536;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50536;
  }
  ldv_50536: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_50543;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_50543;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_50543;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_50543;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50543;
  }
  ldv_50543: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_50550;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_50550;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_50550;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_50550;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50550;
  }
  ldv_50550: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_50557;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_50557;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_50557;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_50557;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50557;
  }
  ldv_50557: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_50564;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_50564;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_50564;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_50564;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50564;
  }
  ldv_50564: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_50571;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_50571;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_50571;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_50571;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50571;
  }
  ldv_50571: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_50578;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_50578;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_50578;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_50578;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50578;
  }
  ldv_50578: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_50585;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_50585;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_50585;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_50585;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50585;
  }
  ldv_50585: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_50592;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_50592;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_50592;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_50592;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50592;
  }
  ldv_50592: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_50599;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_50599;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_50599;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_50599;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50599;
  }
  ldv_50599: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_50606;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_50606;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_50606;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_50606;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50606;
  }
  ldv_50606: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_50613;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_50613;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_50613;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_50613;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50613;
  }
  ldv_50613: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_50620;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_50620;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_50620;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_50620;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50620;
  }
  ldv_50620: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_50627;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_50627;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_50627;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_50627;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50627;
  }
  ldv_50627: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_50634;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_50634;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_50634;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_50634;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50634;
  }
  ldv_50634: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_50641;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_50641;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_50641;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_50641;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50641;
  }
  ldv_50641: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_50648;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_50648;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_50648;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_50648;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50648;
  }
  ldv_50648: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_50655;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_50655;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_50655;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_50655;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50655;
  }
  ldv_50655: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_50662;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_50662;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_50662;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_50662;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50662;
  }
  ldv_50662: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_50669;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_50669;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_50669;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_50669;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50669;
  }
  ldv_50669: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_50676;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_50676;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_50676;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_50676;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50676;
  }
  ldv_50676: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_50683;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_50683;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_50683;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_50683;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50683;
  }
  ldv_50683: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_50690;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_50690;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_50690;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_50690;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50690;
  }
  ldv_50690: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_50697;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_50697;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_50697;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_50697;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50697;
  }
  ldv_50697: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_50704;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_50704;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_50704;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_50704;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50704;
  }
  ldv_50704: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_50711;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_50711;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_50711;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_50711;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50711;
  }
  ldv_50711: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_50718;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_50718;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_50718;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_50718;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50718;
  }
  ldv_50718: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_50725;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_50725;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_50725;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_50725;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50725;
  }
  ldv_50725: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_50732;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_50732;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_50732;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_50732;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50732;
  }
  ldv_50732: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_50739;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_50739;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_50739;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_50739;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50739;
  }
  ldv_50739: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_50746;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_50746;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_50746;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_50746;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50746;
  }
  ldv_50746: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 81U;
#line 38
  goto ldv_50753;
  case 2UL: 
#line 38
  put_unaligned_le16(81, __gu_p___54);
#line 38
  goto ldv_50753;
  case 4UL: 
#line 38
  put_unaligned_le32(81U, __gu_p___54);
#line 38
  goto ldv_50753;
  case 8UL: 
#line 38
  put_unaligned_le64(81ULL, __gu_p___54);
#line 38
  goto ldv_50753;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50753;
  }
  ldv_50753: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 4U;
#line 38
  goto ldv_50760;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___55);
#line 38
  goto ldv_50760;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___55);
#line 38
  goto ldv_50760;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___55);
#line 38
  goto ldv_50760;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50760;
  }
  ldv_50760: 
#line 38
  __gu_p___56 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = (unsigned char )arg->on_congestion;
#line 38
  goto ldv_50767;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->on_congestion), __gu_p___56);
#line 38
  goto ldv_50767;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_50767;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->on_congestion, __gu_p___56);
#line 38
  goto ldv_50767;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50767;
  }
  ldv_50767: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 82U;
#line 38
  goto ldv_50774;
  case 2UL: 
#line 38
  put_unaligned_le16(82, __gu_p___57);
#line 38
  goto ldv_50774;
  case 4UL: 
#line 38
  put_unaligned_le32(82U, __gu_p___57);
#line 38
  goto ldv_50774;
  case 8UL: 
#line 38
  put_unaligned_le64(82ULL, __gu_p___57);
#line 38
  goto ldv_50774;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50774;
  }
  ldv_50774: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 4U;
#line 38
  goto ldv_50781;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___58);
#line 38
  goto ldv_50781;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___58);
#line 38
  goto ldv_50781;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___58);
#line 38
  goto ldv_50781;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50781;
  }
  ldv_50781: 
#line 38
  __gu_p___59 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = (unsigned char )arg->cong_fill;
#line 38
  goto ldv_50788;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_fill), __gu_p___59);
#line 38
  goto ldv_50788;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_50788;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_fill, __gu_p___59);
#line 38
  goto ldv_50788;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50788;
  }
  ldv_50788: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 83U;
#line 38
  goto ldv_50795;
  case 2UL: 
#line 38
  put_unaligned_le16(83, __gu_p___60);
#line 38
  goto ldv_50795;
  case 4UL: 
#line 38
  put_unaligned_le32(83U, __gu_p___60);
#line 38
  goto ldv_50795;
  case 8UL: 
#line 38
  put_unaligned_le64(83ULL, __gu_p___60);
#line 38
  goto ldv_50795;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50795;
  }
  ldv_50795: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 4U;
#line 38
  goto ldv_50802;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___61);
#line 38
  goto ldv_50802;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___61);
#line 38
  goto ldv_50802;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___61);
#line 38
  goto ldv_50802;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50802;
  }
  ldv_50802: 
#line 38
  __gu_p___62 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = (unsigned char )arg->cong_extents;
#line 38
  goto ldv_50809;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cong_extents), __gu_p___62);
#line 38
  goto ldv_50809;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_50809;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cong_extents, __gu_p___62);
#line 38
  goto ldv_50809;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50809;
  }
  ldv_50809: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 60U;
#line 38
  goto ldv_50816;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___63);
#line 38
  goto ldv_50816;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___63);
#line 38
  goto ldv_50816;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___63);
#line 38
  goto ldv_50816;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50816;
  }
  ldv_50816: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 1U;
#line 38
  goto ldv_50823;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___64);
#line 38
  goto ldv_50823;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___64);
#line 38
  goto ldv_50823;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___64);
#line 38
  goto ldv_50823;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50823;
  }
  ldv_50823: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 27U;
#line 38
  goto ldv_50830;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___65);
#line 38
  goto ldv_50830;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___65);
#line 38
  goto ldv_50830;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___65);
#line 38
  goto ldv_50830;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50830;
  }
  ldv_50830: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 1U;
#line 38
  goto ldv_50837;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___66);
#line 38
  goto ldv_50837;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___66);
#line 38
  goto ldv_50837;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___66);
#line 38
  goto ldv_50837;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50837;
  }
  ldv_50837: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 28U;
#line 38
  goto ldv_50844;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___67);
#line 38
  goto ldv_50844;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___67);
#line 38
  goto ldv_50844;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___67);
#line 38
  goto ldv_50844;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50844;
  }
  ldv_50844: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___68 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___68) = 1U;
#line 38
  goto ldv_50851;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___68);
#line 38
  goto ldv_50851;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___68);
#line 38
  goto ldv_50851;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___68);
#line 38
  goto ldv_50851;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50851;
  }
  ldv_50851: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___69 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___69) = 41U;
#line 38
  goto ldv_50858;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___69);
#line 38
  goto ldv_50858;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___69);
#line 38
  goto ldv_50858;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___69);
#line 38
  goto ldv_50858;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50858;
  }
  ldv_50858: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___70 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___70) = 1U;
#line 38
  goto ldv_50865;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___70);
#line 38
  goto ldv_50865;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___70);
#line 38
  goto ldv_50865;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___70);
#line 38
  goto ldv_50865;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50865;
  }
  ldv_50865: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___53 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___71 = (void *)tmp___53;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___71) = 61U;
#line 38
  goto ldv_50872;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___71);
#line 38
  goto ldv_50872;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___71);
#line 38
  goto ldv_50872;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___71);
#line 38
  goto ldv_50872;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50872;
  }
  ldv_50872: 
#line 38
  tmp___54 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___72 = (void *)tmp___54;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___72) = 1U;
#line 38
  goto ldv_50879;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___72);
#line 38
  goto ldv_50879;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___72);
#line 38
  goto ldv_50879;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___72);
#line 38
  goto ldv_50879;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50879;
  }
  ldv_50879: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___55 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___73 = (void *)tmp___55;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___73) = 62U;
#line 38
  goto ldv_50886;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___73);
#line 38
  goto ldv_50886;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___73);
#line 38
  goto ldv_50886;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___73);
#line 38
  goto ldv_50886;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50886;
  }
  ldv_50886: 
#line 38
  tmp___56 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___74 = (void *)tmp___56;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___74) = 1U;
#line 38
  goto ldv_50893;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___74);
#line 38
  goto ldv_50893;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___74);
#line 38
  goto ldv_50893;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___74);
#line 38
  goto ldv_50893;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50893;
  }
  ldv_50893: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___57 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___75 = (void *)tmp___57;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___75) = 70U;
#line 38
  goto ldv_50900;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___75);
#line 38
  goto ldv_50900;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___75);
#line 38
  goto ldv_50900;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___75);
#line 38
  goto ldv_50900;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50900;
  }
  ldv_50900: 
#line 38
  tmp___58 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___76 = (void *)tmp___58;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___76) = 1U;
#line 38
  goto ldv_50907;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___76);
#line 38
  goto ldv_50907;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___76);
#line 38
  goto ldv_50907;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___76);
#line 38
  goto ldv_50907;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_50907;
  }
  ldv_50907: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 101
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 101 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 82
  tmp = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p = (void *)tmp;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p) = 30U;
#line 82
  goto ldv_51004;
  case 2UL: 
#line 82
  put_unaligned_le16(30, __gu_p);
#line 82
  goto ldv_51004;
  case 4UL: 
#line 82
  put_unaligned_le32(30U, __gu_p);
#line 82
  goto ldv_51004;
  case 8UL: 
#line 82
  put_unaligned_le64(30ULL, __gu_p);
#line 82
  goto ldv_51004;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51004;
  }
  ldv_51004: 
#line 82
  tmp___0 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___0 = (void *)tmp___0;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___0) = 4U;
#line 82
  goto ldv_51011;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___0);
#line 82
  goto ldv_51011;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___0);
#line 82
  goto ldv_51011;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___0);
#line 82
  goto ldv_51011;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51011;
  }
  ldv_51011: 
#line 82
  __gu_p___1 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 82
  goto ldv_51018;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 82
  goto ldv_51018;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 82
  goto ldv_51018;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 82
  goto ldv_51018;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51018;
  }
  ldv_51018: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___1 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___2 = (void *)tmp___1;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___2) = 31U;
#line 82
  goto ldv_51025;
  case 2UL: 
#line 82
  put_unaligned_le16(31, __gu_p___2);
#line 82
  goto ldv_51025;
  case 4UL: 
#line 82
  put_unaligned_le32(31U, __gu_p___2);
#line 82
  goto ldv_51025;
  case 8UL: 
#line 82
  put_unaligned_le64(31ULL, __gu_p___2);
#line 82
  goto ldv_51025;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51025;
  }
  ldv_51025: 
#line 82
  tmp___2 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___3 = (void *)tmp___2;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___3) = 4U;
#line 82
  goto ldv_51032;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___3);
#line 82
  goto ldv_51032;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___3);
#line 82
  goto ldv_51032;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___3);
#line 82
  goto ldv_51032;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51032;
  }
  ldv_51032: 
#line 82
  __gu_p___4 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 82
  goto ldv_51039;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 82
  goto ldv_51039;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 82
  goto ldv_51039;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 82
  goto ldv_51039;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51039;
  }
  ldv_51039: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___3 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___5 = (void *)tmp___3;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___5) = 32U;
#line 82
  goto ldv_51046;
  case 2UL: 
#line 82
  put_unaligned_le16(32, __gu_p___5);
#line 82
  goto ldv_51046;
  case 4UL: 
#line 82
  put_unaligned_le32(32U, __gu_p___5);
#line 82
  goto ldv_51046;
  case 8UL: 
#line 82
  put_unaligned_le64(32ULL, __gu_p___5);
#line 82
  goto ldv_51046;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51046;
  }
  ldv_51046: 
#line 82
  tmp___4 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___6 = (void *)tmp___4;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___6) = 4U;
#line 82
  goto ldv_51053;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___6);
#line 82
  goto ldv_51053;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___6);
#line 82
  goto ldv_51053;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___6);
#line 82
  goto ldv_51053;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51053;
  }
  ldv_51053: 
#line 82
  __gu_p___7 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 82
  goto ldv_51060;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 82
  goto ldv_51060;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_51060;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 82
  goto ldv_51060;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51060;
  }
  ldv_51060: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___5 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___8 = (void *)tmp___5;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___8) = 52U;
#line 82
  goto ldv_51067;
  case 2UL: 
#line 82
  put_unaligned_le16(49204, __gu_p___8);
#line 82
  goto ldv_51067;
  case 4UL: 
#line 82
  put_unaligned_le32(49204U, __gu_p___8);
#line 82
  goto ldv_51067;
  case 8UL: 
#line 82
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 82
  goto ldv_51067;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51067;
  }
  ldv_51067: 
#line 82
  tmp___6 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___9 = (void *)tmp___6;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 82
  goto ldv_51074;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 82
  goto ldv_51074;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_51074;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 82
  goto ldv_51074;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51074;
  }
  ldv_51074: 
#line 82
  __len = (size_t )arg->verify_alg_len;
#line 82
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 82
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 82
  tmp___7 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___10 = (void *)tmp___7;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___10) = 51U;
#line 82
  goto ldv_51084;
  case 2UL: 
#line 82
  put_unaligned_le16(49203, __gu_p___10);
#line 82
  goto ldv_51084;
  case 4UL: 
#line 82
  put_unaligned_le32(49203U, __gu_p___10);
#line 82
  goto ldv_51084;
  case 8UL: 
#line 82
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 82
  goto ldv_51084;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51084;
  }
  ldv_51084: 
#line 82
  tmp___8 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___11 = (void *)tmp___8;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 82
  goto ldv_51091;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 82
  goto ldv_51091;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_51091;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 82
  goto ldv_51091;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51091;
  }
  ldv_51091: 
#line 82
  __len___0 = (size_t )arg->cpu_mask_len;
#line 82
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 82
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 82
  tmp___9 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___12 = (void *)tmp___9;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___12) = 64U;
#line 82
  goto ldv_51101;
  case 2UL: 
#line 82
  put_unaligned_le16(49216, __gu_p___12);
#line 82
  goto ldv_51101;
  case 4UL: 
#line 82
  put_unaligned_le32(49216U, __gu_p___12);
#line 82
  goto ldv_51101;
  case 8UL: 
#line 82
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 82
  goto ldv_51101;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51101;
  }
  ldv_51101: 
#line 82
  tmp___10 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___13 = (void *)tmp___10;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 82
  goto ldv_51108;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 82
  goto ldv_51108;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_51108;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 82
  goto ldv_51108;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51108;
  }
  ldv_51108: 
#line 82
  __len___1 = (size_t )arg->csums_alg_len;
#line 82
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 82
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 82
  tmp___11 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___14 = (void *)tmp___11;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___14) = 65U;
#line 82
  goto ldv_51118;
  case 2UL: 
#line 82
  put_unaligned_le16(32833, __gu_p___14);
#line 82
  goto ldv_51118;
  case 4UL: 
#line 82
  put_unaligned_le32(32833U, __gu_p___14);
#line 82
  goto ldv_51118;
  case 8UL: 
#line 82
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 82
  goto ldv_51118;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51118;
  }
  ldv_51118: 
#line 82
  tmp___12 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___15 = (void *)tmp___12;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___15) = 1U;
#line 82
  goto ldv_51125;
  case 2UL: 
#line 82
  put_unaligned_le16(1, __gu_p___15);
#line 82
  goto ldv_51125;
  case 4UL: 
#line 82
  put_unaligned_le32(1U, __gu_p___15);
#line 82
  goto ldv_51125;
  case 8UL: 
#line 82
  put_unaligned_le64(1ULL, __gu_p___15);
#line 82
  goto ldv_51125;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51125;
  }
  ldv_51125: 
#line 82
  *((char *)tags) = (char )arg->use_rle;
#line 82
  tags = tags + 1U;
#line 82
  tmp___13 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___16 = (void *)tmp___13;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___16) = 75U;
#line 82
  goto ldv_51132;
  case 2UL: 
#line 82
  put_unaligned_le16(75, __gu_p___16);
#line 82
  goto ldv_51132;
  case 4UL: 
#line 82
  put_unaligned_le32(75U, __gu_p___16);
#line 82
  goto ldv_51132;
  case 8UL: 
#line 82
  put_unaligned_le64(75ULL, __gu_p___16);
#line 82
  goto ldv_51132;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51132;
  }
  ldv_51132: 
#line 82
  tmp___14 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___17 = (void *)tmp___14;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___17) = 4U;
#line 82
  goto ldv_51139;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___17);
#line 82
  goto ldv_51139;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___17);
#line 82
  goto ldv_51139;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___17);
#line 82
  goto ldv_51139;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51139;
  }
  ldv_51139: 
#line 82
  __gu_p___18 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 82
  goto ldv_51146;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 82
  goto ldv_51146;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_51146;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 82
  goto ldv_51146;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51146;
  }
  ldv_51146: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___15 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___19 = (void *)tmp___15;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___19) = 76U;
#line 82
  goto ldv_51153;
  case 2UL: 
#line 82
  put_unaligned_le16(76, __gu_p___19);
#line 82
  goto ldv_51153;
  case 4UL: 
#line 82
  put_unaligned_le32(76U, __gu_p___19);
#line 82
  goto ldv_51153;
  case 8UL: 
#line 82
  put_unaligned_le64(76ULL, __gu_p___19);
#line 82
  goto ldv_51153;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51153;
  }
  ldv_51153: 
#line 82
  tmp___16 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___20 = (void *)tmp___16;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___20) = 4U;
#line 82
  goto ldv_51160;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___20);
#line 82
  goto ldv_51160;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___20);
#line 82
  goto ldv_51160;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___20);
#line 82
  goto ldv_51160;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51160;
  }
  ldv_51160: 
#line 82
  __gu_p___21 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 82
  goto ldv_51167;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 82
  goto ldv_51167;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_51167;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 82
  goto ldv_51167;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51167;
  }
  ldv_51167: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___17 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___22 = (void *)tmp___17;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___22) = 77U;
#line 82
  goto ldv_51174;
  case 2UL: 
#line 82
  put_unaligned_le16(77, __gu_p___22);
#line 82
  goto ldv_51174;
  case 4UL: 
#line 82
  put_unaligned_le32(77U, __gu_p___22);
#line 82
  goto ldv_51174;
  case 8UL: 
#line 82
  put_unaligned_le64(77ULL, __gu_p___22);
#line 82
  goto ldv_51174;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51174;
  }
  ldv_51174: 
#line 82
  tmp___18 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___23 = (void *)tmp___18;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___23) = 4U;
#line 82
  goto ldv_51181;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___23);
#line 82
  goto ldv_51181;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___23);
#line 82
  goto ldv_51181;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___23);
#line 82
  goto ldv_51181;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51181;
  }
  ldv_51181: 
#line 82
  __gu_p___24 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 82
  goto ldv_51188;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 82
  goto ldv_51188;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_51188;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 82
  goto ldv_51188;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51188;
  }
  ldv_51188: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___19 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___25 = (void *)tmp___19;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___25) = 78U;
#line 82
  goto ldv_51195;
  case 2UL: 
#line 82
  put_unaligned_le16(78, __gu_p___25);
#line 82
  goto ldv_51195;
  case 4UL: 
#line 82
  put_unaligned_le32(78U, __gu_p___25);
#line 82
  goto ldv_51195;
  case 8UL: 
#line 82
  put_unaligned_le64(78ULL, __gu_p___25);
#line 82
  goto ldv_51195;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51195;
  }
  ldv_51195: 
#line 82
  tmp___20 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___26 = (void *)tmp___20;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___26) = 4U;
#line 82
  goto ldv_51202;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___26);
#line 82
  goto ldv_51202;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___26);
#line 82
  goto ldv_51202;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___26);
#line 82
  goto ldv_51202;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51202;
  }
  ldv_51202: 
#line 82
  __gu_p___27 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 82
  goto ldv_51209;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 82
  goto ldv_51209;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_51209;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 82
  goto ldv_51209;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51209;
  }
  ldv_51209: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___21 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___28 = (void *)tmp___21;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___28) = 79U;
#line 82
  goto ldv_51216;
  case 2UL: 
#line 82
  put_unaligned_le16(79, __gu_p___28);
#line 82
  goto ldv_51216;
  case 4UL: 
#line 82
  put_unaligned_le32(79U, __gu_p___28);
#line 82
  goto ldv_51216;
  case 8UL: 
#line 82
  put_unaligned_le64(79ULL, __gu_p___28);
#line 82
  goto ldv_51216;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51216;
  }
  ldv_51216: 
#line 82
  tmp___22 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___29 = (void *)tmp___22;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___29) = 4U;
#line 82
  goto ldv_51223;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___29);
#line 82
  goto ldv_51223;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___29);
#line 82
  goto ldv_51223;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___29);
#line 82
  goto ldv_51223;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51223;
  }
  ldv_51223: 
#line 82
  __gu_p___30 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 82
  goto ldv_51230;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 82
  goto ldv_51230;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_51230;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 82
  goto ldv_51230;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51230;
  }
  ldv_51230: 
#line 82
  tags = tags + 4U;
#line 82
  tmp___23 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___31 = (void *)tmp___23;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___31) = 80U;
#line 82
  goto ldv_51237;
  case 2UL: 
#line 82
  put_unaligned_le16(80, __gu_p___31);
#line 82
  goto ldv_51237;
  case 4UL: 
#line 82
  put_unaligned_le32(80U, __gu_p___31);
#line 82
  goto ldv_51237;
  case 8UL: 
#line 82
  put_unaligned_le64(80ULL, __gu_p___31);
#line 82
  goto ldv_51237;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51237;
  }
  ldv_51237: 
#line 82
  tmp___24 = tags;
#line 82
  tags = tags + 1;
#line 82
  __gu_p___32 = (void *)tmp___24;
#line 82
  switch (2UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___32) = 4U;
#line 82
  goto ldv_51244;
  case 2UL: 
#line 82
  put_unaligned_le16(4, __gu_p___32);
#line 82
  goto ldv_51244;
  case 4UL: 
#line 82
  put_unaligned_le32(4U, __gu_p___32);
#line 82
  goto ldv_51244;
  case 8UL: 
#line 82
  put_unaligned_le64(4ULL, __gu_p___32);
#line 82
  goto ldv_51244;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51244;
  }
  ldv_51244: 
#line 82
  __gu_p___33 = (void *)tags;
#line 82
  switch (4UL) {
  case 1UL: 
#line 82
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 82
  goto ldv_51251;
  case 2UL: 
#line 82
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 82
  goto ldv_51251;
  case 4UL: 
#line 82
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_51251;
  case 8UL: 
#line 82
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 82
  goto ldv_51251;
  default: 
#line 82
  __bad_unaligned_access_size();
#line 82
  goto ldv_51251;
  }
  ldv_51251: 
#line 82
  tags = tags + 4U;
#line 82
  return (tags);
}
}
#line 113
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 113 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 111
  tmp = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p = (void *)tmp;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p) = 33U;
#line 111
  goto ldv_51339;
  case 2UL: 
#line 111
  put_unaligned_le16(33, __gu_p);
#line 111
  goto ldv_51339;
  case 4UL: 
#line 111
  put_unaligned_le32(33U, __gu_p);
#line 111
  goto ldv_51339;
  case 8UL: 
#line 111
  put_unaligned_le64(33ULL, __gu_p);
#line 111
  goto ldv_51339;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_51339;
  }
  ldv_51339: 
#line 111
  tmp___0 = tags;
#line 111
  tags = tags + 1;
#line 111
  __gu_p___0 = (void *)tmp___0;
#line 111
  switch (2UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___0) = 4U;
#line 111
  goto ldv_51346;
  case 2UL: 
#line 111
  put_unaligned_le16(4, __gu_p___0);
#line 111
  goto ldv_51346;
  case 4UL: 
#line 111
  put_unaligned_le32(4U, __gu_p___0);
#line 111
  goto ldv_51346;
  case 8UL: 
#line 111
  put_unaligned_le64(4ULL, __gu_p___0);
#line 111
  goto ldv_51346;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_51346;
  }
  ldv_51346: 
#line 111
  __gu_p___1 = (void *)tags;
#line 111
  switch (4UL) {
  case 1UL: 
#line 111
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 111
  goto ldv_51353;
  case 2UL: 
#line 111
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 111
  goto ldv_51353;
  case 4UL: 
#line 111
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 111
  goto ldv_51353;
  case 8UL: 
#line 111
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 111
  goto ldv_51353;
  default: 
#line 111
  __bad_unaligned_access_size();
#line 111
  goto ldv_51353;
  }
  ldv_51353: 
#line 111
  tags = tags + 4U;
#line 111
  return (tags);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 142
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 146
  envp[0] = (char *)"HOME=/";
#line 146
  envp[1] = (char *)"TERM=linux";
#line 146
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 146
  envp[3] = 0;
#line 146
  envp[4] = 0;
#line 146
  envp[5] = 0;
#line 154
  argv[0] = (char *)(& usermode_helper);
#line 154
  argv[1] = cmd;
#line 154
  argv[2] = (char *)(& mb);
#line 154
  argv[3] = 0;
#line 157
  tmp = mdev_to_minor(mdev);
#line 157
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 159
  tmp___0 = get_net_conf(mdev);
#line 159
  if (tmp___0 != 0) {
#line 160
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 162
    afs = (char *)"ipv6";
#line 163
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 165
    goto ldv_51674;
    case 2: 
#line 167
    afs = (char *)"ipv4";
#line 168
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 170
    goto ldv_51674;
    default: 
#line 172
    afs = (char *)"ssocks";
#line 173
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_51674: 
#line 176
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 177
    envp[3] = (char *)(& af);
#line 178
    envp[4] = (char *)(& ad);
#line 179
    put_net_conf(mdev);
  } else {

  }
#line 184
  drbd_md_sync(mdev);
#line 186
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 188
  drbd_bcast_ev_helper(mdev, cmd);
#line 189
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 190
  if (ret != 0) {
#line 191
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 195
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 199
  if (ret < 0) {
#line 200
    ret = 0;
  } else {

  }
#line 202
  return (ret);
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 212
  if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            212);
  } else {

  }
#line 214
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 214
  if (tmp != 0) {
#line 215
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 216
    put_ldev(mdev);
  } else {
#line 218
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 219
    nps = (enum drbd_disk_state )mdev->state.ldv_38894.pdsk;
#line 220
    goto out;
  }
#line 223
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 225
  switch ((r >> 8) & 255) {
  case 3: 
#line 227
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 228
  nps = D_INCONSISTENT;
#line 229
  goto ldv_51686;
  case 4: 
#line 231
  ex_to_string = (char *)"peer was fenced";
#line 232
  nps = D_OUTDATED;
#line 233
  goto ldv_51686;
  case 5: ;
#line 235
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 16U) {
#line 237
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 238
    nps = D_OUTDATED;
  } else {
#line 240
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 241
    nps = (enum drbd_disk_state )mdev->state.ldv_38894.pdsk;
  }
#line 243
  goto ldv_51686;
  case 6: 
#line 247
  ex_to_string = (char *)"peer is active";
#line 248
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 249
  nps = D_UNKNOWN;
#line 250
  val.i = 0U;
#line 250
  val.ldv_38894.disk = 5U;
#line 250
  mask.i = 0U;
#line 250
  mask.ldv_38894.disk = 15U;
#line 250
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 251
  goto ldv_51686;
  case 7: ;
#line 253
  if ((unsigned int )fp != 2U) {
#line 254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 255
  ex_to_string = (char *)"peer was stonithed";
#line 256
  nps = D_OUTDATED;
#line 257
  goto ldv_51686;
  default: 
#line 260
  nps = D_UNKNOWN;
#line 261
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 262
  return (nps);
  }
  ldv_51686: 
#line 265
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 269
  if ((unsigned int )*((unsigned char *)mdev + 2278UL) != 0U && (unsigned int )nps > 5U) {
#line 272
    val___0.i = 0U;
#line 272
    val___0.ldv_38894.susp_fen = 0U;
#line 272
    mask___0.i = 0U;
#line 272
    mask___0.ldv_38894.susp_fen = 1U;
#line 272
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 275
  return (nps);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state ns ;

  {
#line 280
  mdev = (struct drbd_conf *)data;
#line 284
  nps = drbd_try_outdate_peer(mdev);
#line 297
  spin_lock_irq(& mdev->req_lock);
#line 298
  ns = mdev->state;
#line 299
  if ((int )ns.ldv_38894.conn <= 8) {
#line 300
    ns.ldv_38894.pdsk = (unsigned char )nps;
#line 301
    _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 303
  spin_unlock_irq(& mdev->req_lock);
#line 305
  return (0);
}
}
#line 308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 312
  tmp = mdev_to_minor(mdev);
#line 312
  tmp___0 = kthread_create_on_node(& _try_outdate_peer_async, (void *)mdev, -1, "drbd%d_a_helper",
                                   tmp);
#line 312
  __k = tmp___0;
#line 312
  tmp___1 = IS_ERR((void const   *)__k);
#line 312
  if (tmp___1 == 0L) {
#line 312
    wake_up_process(__k);
  } else {

  }
#line 312
  opa = __k;
#line 313
  tmp___2 = IS_ERR((void const   *)opa);
#line 313
  if (tmp___2 != 0L) {
#line 314
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 315
  return;
}
}
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_state_rv drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role ,
                                 int force ) 
{ 
  int max_tries ;
  enum drbd_state_rv rv ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 320
  max_tries = 4;
#line 321
  rv = 0;
#line 322
  try = 0;
#line 323
  forced = 0;
#line 327
  if ((unsigned int )new_role == 1U) {
#line 328
    request_ping(mdev);
  } else {

  }
#line 330
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 332
  mask.i = 0U;
#line 332
  mask.ldv_38894.role = 3U;
#line 333
  val.i = 0U;
#line 333
  val.ldv_38894.role = (unsigned char )new_role;
#line 335
  goto ldv_51724;
  ldv_51727: 
#line 336
  rv = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 340
  if ((int )rv == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 341
    val.ldv_38894.pdsk = 0U;
#line 342
    mask.ldv_38894.pdsk = 0U;
#line 343
    goto ldv_51724;
  } else {

  }
#line 346
  if (((int )rv == -2 && force != 0) && ((int )mdev->state.ldv_38894.disk <= 7 && (int )mdev->state.ldv_38894.disk > 3)) {
#line 349
    mask.ldv_38894.disk = 15U;
#line 350
    val.ldv_38894.disk = 8U;
#line 351
    forced = 1;
#line 352
    goto ldv_51724;
  } else {

  }
#line 355
  if (((int )rv == -2 && (unsigned int )*((unsigned char *)mdev + 2277UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 357
    if (*((unsigned int *)mdev + 569UL) != 49152U) {
#line 357
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              357);
    } else {

    }
#line 358
    nps = drbd_try_outdate_peer(mdev);
#line 360
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 361
      val.ldv_38894.disk = 8U;
#line 362
      mask.ldv_38894.disk = 15U;
    } else {

    }
#line 365
    val.ldv_38894.pdsk = (unsigned char )nps;
#line 366
    mask.ldv_38894.pdsk = 15U;
#line 368
    goto ldv_51724;
  } else {

  }
#line 371
  if ((int )rv == 2) {
#line 372
    goto fail;
  } else {

  }
#line 373
  if ((int )rv == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 374
    nps = drbd_try_outdate_peer(mdev);
#line 376
    if (force != 0 && (unsigned int )nps > 5U) {
#line 377
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 378
      nps = D_OUTDATED;
    } else {

    }
#line 381
    mask.ldv_38894.pdsk = 15U;
#line 382
    val.ldv_38894.pdsk = (unsigned char )nps;
#line 384
    goto ldv_51724;
  } else {

  }
#line 386
  if ((int )rv == -1) {
#line 389
    schedule_timeout_interruptible((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 390
    if (try < max_tries) {
#line 391
      try = max_tries + -1;
    } else {

    }
#line 392
    goto ldv_51724;
  } else {

  }
#line 394
  if ((int )rv <= 0) {
#line 395
    rv = _drbd_request_state(mdev, mask, val, 6);
#line 397
    if ((int )rv <= 0) {
#line 398
      goto fail;
    } else {

    }
  } else {

  }
#line 400
  goto ldv_51726;
  ldv_51724: 
#line 335
  tmp = try;
#line 335
  try = try + 1;
#line 335
  if (tmp < max_tries) {
#line 336
    goto ldv_51727;
  } else {

  }
  ldv_51726: ;
#line 403
  if ((int )rv <= 0) {
#line 404
    goto fail;
  } else {

  }
#line 406
  if (forced != 0) {
#line 407
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 410
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
  if (tmp___0 == 0) {
#line 410
    goto ldv_51728;
  } else {

  }
#line 410
  tmp___1 = get_current();
#line 410
  __wait.flags = 0U;
#line 410
  __wait.private = (void *)tmp___1;
#line 410
  __wait.func = & autoremove_wake_function;
#line 410
  __wait.task_list.next = & __wait.task_list;
#line 410
  __wait.task_list.prev = & __wait.task_list;
  ldv_51731: 
#line 410
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 410
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 410
  if (tmp___2 == 0) {
#line 410
    goto ldv_51730;
  } else {

  }
#line 410
  schedule();
#line 410
  goto ldv_51731;
  ldv_51730: 
#line 410
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51728: ;
#line 412
  if ((unsigned int )new_role == 2U) {
#line 413
    set_disk_ro(mdev->vdisk, 1);
#line 414
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 414
    if (tmp___3 != 0) {
#line 415
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 416
      put_ldev(mdev);
    } else {

    }
  } else {
#line 419
    tmp___4 = get_net_conf(mdev);
#line 419
    if (tmp___4 != 0) {
#line 420
      (mdev->net_conf)->want_lose = 0U;
#line 421
      put_net_conf(mdev);
    } else {

    }
#line 423
    set_disk_ro(mdev->vdisk, 0);
#line 424
    tmp___5 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 424
    if (tmp___5 != 0) {
#line 425
      if ((((int )mdev->state.ldv_38894.conn <= 9 || (int )mdev->state.ldv_38894.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 428
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 430
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 431
      put_ldev(mdev);
    } else {

    }
  }
#line 438
  if ((int )mdev->state.ldv_38894.conn > 8) {
#line 440
    if (forced != 0) {
#line 441
      drbd_send_uuids(mdev);
    } else {

    }
#line 442
    drbd_send_state(mdev);
  } else {

  }
#line 445
  drbd_md_sync(mdev);
#line 447
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 449
  mutex_unlock(& mdev->state_mutex);
#line 450
  return (rv);
}
}
#line 453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 457
  if ((unsigned int )minor >= minor_count) {
#line 458
    return (0);
  } else {

  }
#line 460
  mdev = minor_to_mdev((unsigned int )minor);
#line 462
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 463
    disk = 0;
#line 464
    mdev = drbd_new_device((unsigned int )minor);
#line 466
    spin_lock_irq(& drbd_pp_lock);
#line 467
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 468
      *(minor_table + (unsigned long )minor) = mdev;
#line 469
      disk = mdev->vdisk;
#line 470
      mdev = 0;
    } else {

    }
#line 472
    spin_unlock_irq(& drbd_pp_lock);
#line 474
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 477
      add_disk(disk);
    } else {
#line 479
      drbd_free_mdev(mdev);
    }
#line 481
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 484
  return (mdev);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;
  enum drbd_state_rv tmp___0 ;

  {
#line 492
  memset((void *)(& primary_args), 0, 4UL);
#line 493
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 493
  if (tmp == 0) {
#line 494
    reply->ret_code = 126;
#line 495
    return (0);
  } else {

  }
#line 498
  tmp___0 = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 498
  reply->ret_code = (int )tmp___0;
#line 501
  return (0);
}
}
#line 504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_state_rv tmp ;

  {
#line 507
  tmp = drbd_set_role(mdev, R_SECONDARY, 0);
#line 507
  reply->ret_code = (int )tmp;
#line 509
  return (0);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 517
  md_size_sect = 0UL;
#line 518
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 521
  bdev->md.md_size_sect = 262144U;
#line 522
  tmp = drbd_md_ss__(mdev, bdev);
#line 522
  bdev->md.md_offset = (u64 )tmp;
#line 523
  bdev->md.al_offset = 8;
#line 524
  bdev->md.bm_offset = 72;
#line 525
  goto ldv_51755;
  case -2: 
#line 528
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 528
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 529
  bdev->md.md_offset = 0ULL;
#line 530
  bdev->md.al_offset = 8;
#line 531
  bdev->md.bm_offset = 72;
#line 532
  goto ldv_51755;
  case -1: ;
  case -3: 
#line 535
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 535
  bdev->md.md_offset = (u64 )tmp___1;
#line 537
  bdev->md.al_offset = -64;
#line 539
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 540
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 541
  md_size_sect = md_size_sect >> 15;
#line 542
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 546
  md_size_sect = md_size_sect + 72UL;
#line 548
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 550
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 551
  goto ldv_51755;
  }
  ldv_51755: ;
#line 554
  return;
}
}
#line 556 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 560
  units[0] = 75;
#line 560
  units[1] = 77;
#line 560
  units[2] = 71;
#line 560
  units[3] = 84;
#line 560
  units[4] = 80;
#line 560
  units[5] = 69;
#line 561
  base = 0;
#line 562
  goto ldv_51766;
  ldv_51765: 
#line 564
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 565
  base = base + 1;
  ldv_51766: ;
#line 562
  if (size > 9999ULL && (unsigned int )base <= 4U) {
#line 563
    goto ldv_51765;
  } else {

  }
#line 567
  sprintf(buf, "%u %cB", (unsigned int )size, (int )units[base]);
#line 569
  return (buf);
}
}
#line 585 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 587
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 588
  tmp = is_susp(mdev->state);
#line 588
  if (tmp != 0) {
#line 589
    return;
  } else {

  }
#line 590
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 590
  if (tmp___0 == 0) {
#line 590
    goto ldv_51771;
  } else {

  }
#line 590
  tmp___1 = get_current();
#line 590
  __wait.flags = 0U;
#line 590
  __wait.private = (void *)tmp___1;
#line 590
  __wait.func = & autoremove_wake_function;
#line 590
  __wait.task_list.next = & __wait.task_list;
#line 590
  __wait.task_list.prev = & __wait.task_list;
  ldv_51774: 
#line 590
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 590
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 590
  if (tmp___2 == 0) {
#line 590
    goto ldv_51773;
  } else {

  }
#line 590
  schedule();
#line 590
  goto ldv_51774;
  ldv_51773: 
#line 590
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51771: ;
#line 593
  return;
}
}
#line 593 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 595
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 596
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 597
  return;
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determine_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int err___0 ;

  {
#line 614
  rv = 0;
#line 625
  drbd_suspend_io(mdev);
#line 628
  tmp = lc_try_lock(mdev->act_log);
#line 628
  if (tmp != 0) {
#line 628
    goto ldv_51790;
  } else {

  }
#line 628
  tmp___0 = get_current();
#line 628
  __wait.flags = 0U;
#line 628
  __wait.private = (void *)tmp___0;
#line 628
  __wait.func = & autoremove_wake_function;
#line 628
  __wait.task_list.next = & __wait.task_list;
#line 628
  __wait.task_list.prev = & __wait.task_list;
  ldv_51793: 
#line 628
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 628
  tmp___1 = lc_try_lock(mdev->act_log);
#line 628
  if (tmp___1 != 0) {
#line 628
    goto ldv_51792;
  } else {

  }
#line 628
  schedule();
#line 628
  goto ldv_51793;
  ldv_51792: 
#line 628
  finish_wait(& mdev->al_wait, & __wait);
  ldv_51790: 
#line 630
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 631
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 632
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 635
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 637
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 639
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 639
  if (tmp___5 != size) {
#line 639
    goto _L;
  } else {
#line 639
    tmp___6 = drbd_bm_capacity(mdev);
#line 639
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 642
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 643
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 643
      if (tmp___3 != 0L) {
#line 645
        tmp___2 = drbd_bm_capacity(mdev);
#line 645
        size = tmp___2 >> 1;
#line 646
        if (size == 0UL) {
#line 647
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 650
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 654
        rv = dev_size_error;
      } else {

      }
#line 657
      drbd_set_my_capacity(mdev, size);
#line 658
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 659
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 659
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 662
  if ((int )rv == -1) {
#line 663
    goto out;
  } else {

  }
#line 665
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 667
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 667
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 670
  if (la_size_changed != 0 || md_moved != 0) {
#line 673
    drbd_al_shrink(mdev);
#line 674
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 678
    err___0 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed", BM_LOCKED_MASK);
#line 680
    if (err___0 != 0) {
#line 681
      rv = dev_size_error;
#line 682
      goto out;
    } else {

    }
#line 684
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 687
  if (size > la_size) {
#line 688
    rv = grew;
  } else {

  }
#line 689
  if (size < la_size) {
#line 690
    rv = shrunk;
  } else {

  }
  out: 
#line 692
  lc_unlock(mdev->act_log);
#line 693
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 694
  drbd_resume_io(mdev);
#line 696
  return (rv);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 702
  p_size = mdev->p_size;
#line 703
  la_size = (sector_t )bdev->md.la_size_sect;
#line 705
  u_size = (sector_t )bdev->dc.disk_size;
#line 706
  size = 0UL;
#line 708
  m_size = drbd_get_max_capacity___1(bdev);
#line 710
  if ((int )mdev->state.ldv_38894.conn <= 9 && assume_peer_has_space != 0) {
#line 711
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 712
    p_size = m_size;
  } else {

  }
#line 715
  if (p_size != 0UL && m_size != 0UL) {
#line 716
    __min1 = p_size;
#line 716
    __min2 = m_size;
#line 716
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 718
  if (la_size != 0UL) {
#line 719
    size = la_size;
#line 720
    if (m_size != 0UL && m_size < size) {
#line 721
      size = m_size;
    } else {

    }
#line 722
    if (p_size != 0UL && p_size < size) {
#line 723
      size = p_size;
    } else {

    }
  } else {
#line 725
    if (m_size != 0UL) {
#line 726
      size = m_size;
    } else {

    }
#line 727
    if (p_size != 0UL) {
#line 728
      size = p_size;
    } else {

    }
  }
#line 732
  if (size == 0UL) {
#line 733
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 735
  if (u_size != 0UL) {
#line 736
    if (u_size > size) {
#line 737
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 740
      size = u_size;
    }
  } else {

  }
#line 743
  return (size);
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 761
  _b = mdev->sync_conf.al_extents <= 6;
#line 761
  if (_b != 0) {
#line 761
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            761);
  } else {

  }
#line 761
  if (_b != 0) {
#line 762
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 764
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 766
    return (0);
  } else {

  }
#line 768
  in_use = 0U;
#line 769
  t = mdev->act_log;
#line 770
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 773
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 775
    return (-12);
  } else {

  }
#line 777
  spin_lock_irq(& mdev->al_lock);
#line 778
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 779
    i = 0;
#line 779
    goto ldv_51822;
    ldv_51821: 
#line 780
    e = lc_element_by_index(t, (unsigned int )i);
#line 781
    if (e->refcnt != 0U) {
#line 782
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 784
    in_use = e->refcnt + in_use;
#line 779
    i = i + 1;
    ldv_51822: ;
#line 779
    if ((unsigned int )i < t->nr_elements) {
#line 780
      goto ldv_51821;
    } else {

    }

  } else {

  }
#line 787
  if (in_use == 0U) {
#line 788
    mdev->act_log = n;
  } else {

  }
#line 789
  spin_unlock_irq(& mdev->al_lock);
#line 790
  if (in_use != 0U) {
#line 791
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 792
    lc_destroy(n);
#line 793
    return (-16);
  } else
#line 795
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 796
    lc_destroy(t);
  } else {

  }
#line 798
  drbd_md_mark_dirty(mdev);
#line 799
  return (0);
}
}
#line 802 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_bio_size ) 
{ 
  struct request_queue *q ;
  int max_hw_sectors ;
  int max_segments ;
  struct request_queue *b ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned int _min2 ;
  int tmp___0 ;
  struct request_queue *b___0 ;
  int tmp___1 ;

  {
#line 804
  q = mdev->rq_queue;
#line 805
  max_hw_sectors = (int )(max_bio_size >> 9);
#line 806
  max_segments = 0;
#line 808
  tmp___0 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 808
  if (tmp___0 != 0) {
#line 809
    b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 811
    tmp = queue_max_hw_sectors(b);
#line 811
    _min1 = tmp;
#line 811
    _min2 = max_bio_size >> 9;
#line 811
    max_hw_sectors = (int )(_min1 < _min2 ? _min1 : _min2);
#line 812
    max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 813
    put_ldev(mdev);
  } else {

  }
#line 816
  blk_queue_logical_block_size(q, 512);
#line 817
  blk_queue_max_hw_sectors(q, (unsigned int )max_hw_sectors);
#line 819
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 820
  blk_queue_segment_boundary(q, 4095UL);
#line 822
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 822
  if (tmp___1 != 0) {
#line 823
    b___0 = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 825
    blk_queue_stack_limits(q, b___0);
#line 827
    if (q->backing_dev_info.ra_pages != b___0->backing_dev_info.ra_pages) {
#line 828
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
                q->backing_dev_info.ra_pages, b___0->backing_dev_info.ra_pages);
#line 831
      q->backing_dev_info.ra_pages = b___0->backing_dev_info.ra_pages;
    } else {

    }
#line 833
    put_ldev(mdev);
  } else {

  }
#line 835
  return;
}
}
#line 837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_reconsider_max_bio_size(struct drbd_conf *mdev ) 
{ 
  int now ;
  int new ;
  int local ;
  int peer ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  int tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 841
  tmp = queue_max_hw_sectors(mdev->rq_queue);
#line 841
  now = (int )(tmp << 9);
#line 842
  local = mdev->local_max_bio_size;
#line 843
  peer = mdev->peer_max_bio_size;
#line 845
  tmp___1 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 845
  if (tmp___1 != 0) {
#line 846
    tmp___0 = queue_max_hw_sectors((((mdev->ldev)->backing_bdev)->bd_disk)->queue);
#line 846
    local = (int )(tmp___0 << 9);
#line 847
    mdev->local_max_bio_size = local;
#line 848
    put_ldev(mdev);
  } else {

  }
#line 854
  if ((int )mdev->state.ldv_38894.conn > 9) {
#line 855
    if (mdev->agreed_pro_version <= 93) {
#line 856
      peer = mdev->peer_max_bio_size;
    } else
#line 857
    if (mdev->agreed_pro_version == 94) {
#line 858
      peer = 32768;
    } else {
#line 860
      peer = 131072;
    }
  } else {

  }
#line 863
  __min1 = local;
#line 863
  __min2 = peer;
#line 863
  new = __min1 < __min2 ? __min1 : __min2;
#line 865
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && new < now) {
#line 866
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED new < now; (%d < %d)\n",
            new, now);
  } else {

  }
#line 868
  if (new != now) {
#line 869
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max BIO size = %u\n",
              new);
  } else {

  }
#line 871
  drbd_setup_queue_param(mdev, (unsigned int )new);
#line 872
  return;
}
}
#line 881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 883
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 883
  if (tmp == 0) {
#line 883
    goto ldv_51849;
  } else {

  }
#line 883
  tmp___0 = get_current();
#line 883
  __wait.flags = 0U;
#line 883
  __wait.private = (void *)tmp___0;
#line 883
  __wait.func = & autoremove_wake_function;
#line 883
  __wait.task_list.next = & __wait.task_list;
#line 883
  __wait.task_list.prev = & __wait.task_list;
  ldv_51852: 
#line 883
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 883
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 883
  if (tmp___1 == 0) {
#line 883
    goto ldv_51851;
  } else {

  }
#line 883
  schedule();
#line 883
  goto ldv_51852;
  ldv_51851: 
#line 883
  finish_wait(& mdev->state_wait, & __wait);
  ldv_51849: 
#line 884
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 884
  if (tmp___2 == 0) {
#line 884
    goto ldv_51853;
  } else {

  }
#line 884
  tmp___3 = get_current();
#line 884
  __wait___0.flags = 0U;
#line 884
  __wait___0.private = (void *)tmp___3;
#line 884
  __wait___0.func = & autoremove_wake_function;
#line 884
  __wait___0.task_list.next = & __wait___0.task_list;
#line 884
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51856: 
#line 884
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 884
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 884
  if (tmp___4 == 0) {
#line 884
    goto ldv_51855;
  } else {

  }
#line 884
  schedule();
#line 884
  goto ldv_51856;
  ldv_51855: 
#line 884
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_51853: 
#line 885
  drbd_thread_start(& mdev->worker);
#line 886
  drbd_flush_workqueue(mdev);
#line 887
  return;
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 894
  spin_lock_irq(& mdev->req_lock);
#line 895
  if (((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1138UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2276UL) == 2U) {
#line 898
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 899
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 901
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 902
  spin_unlock_irq(& mdev->req_lock);
#line 903
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 904
  return;
}
}
#line 907 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 909
  s = 0;
#line 911
  tmp = lc_try_lock(mdev->act_log);
#line 911
  if (tmp != 0) {
#line 912
    drbd_al_shrink(mdev);
#line 913
    lc_unlock(mdev->act_log);
  } else {
#line 915
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 916
    return;
  }
#line 919
  spin_lock_irq(& mdev->req_lock);
#line 920
  if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 921
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 921
    s = tmp___0 == 0;
  } else {

  }
#line 923
  spin_unlock_irq(& mdev->req_lock);
#line 925
  if (s != 0) {
#line 926
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 927
  return;
}
}
#line 931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct block_device *bdev ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  enum drbd_state_rv rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  sector_t tmp___9 ;
  sector_t tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___19 ;
  unsigned short tmp___20 ;
  struct page *page ;
  struct page *tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  sector_t tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  unsigned long tmp___36 ;
  unsigned long tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 938
  nbc = 0;
#line 940
  resync_lru = 0;
#line 943
  cp_discovered = 0;
#line 946
  drbd_reconfig_start(mdev);
#line 949
  if ((int )mdev->state.ldv_38894.disk > 0) {
#line 950
    retcode = ERR_DISK_CONFIGURED;
#line 951
    goto fail;
  } else {

  }
#line 957
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 957
  if (tmp == 0) {
#line 957
    goto ldv_51882;
  } else {

  }
#line 957
  tmp___0 = get_current();
#line 957
  __wait.flags = 0U;
#line 957
  __wait.private = (void *)tmp___0;
#line 957
  __wait.func = & autoremove_wake_function;
#line 957
  __wait.task_list.next = & __wait.task_list;
#line 957
  __wait.task_list.prev = & __wait.task_list;
  ldv_51885: 
#line 957
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 957
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 957
  if (tmp___1 == 0) {
#line 957
    goto ldv_51884;
  } else {

  }
#line 957
  schedule();
#line 957
  goto ldv_51885;
  ldv_51884: 
#line 957
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_51882: 
#line 960
  tmp___2 = kzalloc(392UL, 208U);
#line 960
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 961
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 962
    retcode = ERR_NOMEM;
#line 963
    goto fail;
  } else {

  }
#line 966
  nbc->dc.disk_size = 0ULL;
#line 967
  nbc->dc.on_io_error = 0;
#line 968
  nbc->dc.fencing = 0;
#line 969
  nbc->dc.max_bio_bvecs = 0;
#line 971
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 971
  if (tmp___3 == 0) {
#line 972
    retcode = ERR_MANDATORY_TAG;
#line 973
    goto fail;
  } else {

  }
#line 976
  if (nbc->dc.meta_dev_idx < -3) {
#line 977
    retcode = ERR_MD_IDX_INVALID;
#line 978
    goto fail;
  } else {

  }
#line 981
  tmp___4 = get_net_conf(mdev);
#line 981
  if (tmp___4 != 0) {
#line 982
    prot = (mdev->net_conf)->wire_protocol;
#line 983
    put_net_conf(mdev);
#line 984
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 985
      retcode = ERR_STONITH_AND_PROT_A;
#line 986
      goto fail;
    } else {

    }
  } else {

  }
#line 990
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.backing_dev), 131U, (void *)mdev);
#line 992
  tmp___6 = IS_ERR((void const   *)bdev);
#line 992
  if (tmp___6 != 0L) {
#line 993
    tmp___5 = PTR_ERR((void const   *)bdev);
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 995
    retcode = ERR_OPEN_DISK;
#line 996
    goto fail;
  } else {

  }
#line 998
  nbc->backing_bdev = bdev;
#line 1008
  bdev = blkdev_get_by_path((char const   *)(& nbc->dc.meta_dev), 131U, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 1012
  tmp___8 = IS_ERR((void const   *)bdev);
#line 1012
  if (tmp___8 != 0L) {
#line 1013
    tmp___7 = PTR_ERR((void const   *)bdev);
#line 1013
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 1015
    retcode = ERR_OPEN_MD_DISK;
#line 1016
    goto fail;
  } else {

  }
#line 1018
  nbc->md_bdev = bdev;
#line 1020
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 1023
    retcode = ERR_MD_IDX_INVALID;
#line 1024
    goto fail;
  } else {

  }
#line 1027
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 1030
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 1031
    retcode = ERR_NOMEM;
#line 1032
    goto fail;
  } else {

  }
#line 1036
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1038
  tmp___10 = drbd_get_max_capacity___1(nbc);
#line 1038
  if ((unsigned long long )tmp___10 < nbc->dc.disk_size) {
#line 1039
    tmp___9 = drbd_get_max_capacity___1(nbc);
#line 1039
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___9, nbc->dc.disk_size);
#line 1042
    retcode = ERR_DISK_TO_SMALL;
#line 1043
    goto fail;
  } else {

  }
#line 1046
  if (nbc->dc.meta_dev_idx < 0) {
#line 1047
    max_possible_sectors = 2251799813685248UL;
#line 1049
    min_md_device_sectors = 2048UL;
  } else {
#line 1051
    max_possible_sectors = 8587575296UL;
#line 1052
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1055
  tmp___11 = drbd_get_capacity(nbc->md_bdev);
#line 1055
  if (tmp___11 < min_md_device_sectors) {
#line 1056
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1057
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1060
    goto fail;
  } else {

  }
#line 1065
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 1065
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 1065
  if (tmp___12 < tmp___13) {
#line 1067
    retcode = ERR_DISK_TO_SMALL;
#line 1068
    goto fail;
  } else {

  }
#line 1071
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1073
  if (nbc->known_size > max_possible_sectors) {
#line 1074
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1077
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1078
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1082
  drbd_suspend_io(mdev);
#line 1084
  tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1084
  if (tmp___14 == 0) {
#line 1084
    goto ldv_51887;
  } else {
#line 1084
    tmp___15 = is_susp(mdev->state);
#line 1084
    if (tmp___15 != 0) {
#line 1084
      goto ldv_51887;
    } else {

    }
  }
#line 1084
  tmp___16 = get_current();
#line 1084
  __wait___0.flags = 0U;
#line 1084
  __wait___0.private = (void *)tmp___16;
#line 1084
  __wait___0.func = & autoremove_wake_function;
#line 1084
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1084
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_51890: 
#line 1084
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1084
  tmp___17 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1084
  if (tmp___17 == 0) {
#line 1084
    goto ldv_51889;
  } else {
#line 1084
    tmp___18 = is_susp(mdev->state);
#line 1084
    if (tmp___18 != 0) {
#line 1084
      goto ldv_51889;
    } else {

    }
  }
#line 1084
  schedule();
#line 1084
  goto ldv_51890;
  ldv_51889: 
#line 1084
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_51887: 
#line 1086
  drbd_flush_workqueue(mdev);
#line 1088
  val.i = 0U;
#line 1088
  val.ldv_38894.disk = 1U;
#line 1088
  mask.i = 0U;
#line 1088
  mask.ldv_38894.disk = 15U;
#line 1088
  rv = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1089
  retcode = (enum drbd_ret_code )rv;
#line 1090
  drbd_resume_io(mdev);
#line 1091
  if ((int )rv <= 0) {
#line 1092
    goto fail;
  } else {

  }
#line 1094
  tmp___19 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1094
  if (tmp___19 == 0) {
#line 1095
    goto force_diskless;
  } else {

  }
#line 1097
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1100
  tmp___20 = bdev_logical_block_size(nbc->md_bdev);
#line 1100
  logical_block_size = (int )tmp___20;
#line 1101
  if (logical_block_size == 0) {
#line 1102
    logical_block_size = 512;
  } else {

  }
#line 1104
  if (logical_block_size != 512) {
#line 1105
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1106
      tmp___21 = alloc_pages(16U, 0U);
#line 1106
      page = tmp___21;
#line 1107
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1108
        goto force_diskless_dec;
      } else {

      }
#line 1110
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1112
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1114
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1118
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1119
    tmp___22 = drbd_bm_init(mdev);
#line 1119
    if (tmp___22 != 0) {
#line 1120
      retcode = ERR_NOMEM;
#line 1121
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1125
  tmp___23 = drbd_md_read(mdev, nbc);
#line 1125
  retcode = (enum drbd_ret_code )tmp___23;
#line 1126
  if ((unsigned int )retcode != 101U) {
#line 1127
    goto force_diskless_dec;
  } else {

  }
#line 1129
  if (((int )mdev->state.ldv_38894.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1132
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1134
    retcode = ERR_DATA_NOT_CURRENT;
#line 1135
    goto force_diskless_dec;
  } else {

  }
#line 1139
  tmp___24 = drbd_check_al_size(mdev);
#line 1139
  if (tmp___24 != 0) {
#line 1140
    retcode = ERR_NOMEM;
#line 1141
    goto force_diskless_dec;
  } else {

  }
#line 1145
  tmp___25 = drbd_md_test_flag(nbc, 1);
#line 1145
  if (tmp___25 != 0) {
#line 1145
    tmp___26 = drbd_new_dev_size(mdev, nbc, 0);
#line 1145
    if ((unsigned long long )tmp___26 < nbc->md.la_size_sect) {
#line 1147
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1148
      retcode = ERR_DISK_TO_SMALL;
#line 1149
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1152
  tmp___27 = drbd_al_read_log(mdev, nbc);
#line 1152
  if (tmp___27 == 0) {
#line 1153
    retcode = ERR_IO_MD_DISK;
#line 1154
    goto force_diskless_dec;
  } else {

  }
#line 1159
  if ((unsigned int )*((unsigned char *)nbc + 372UL) != 0U) {
#line 1160
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1162
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1168
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1168
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1168);
  } else {

  }
#line 1169
  mdev->ldev = nbc;
#line 1170
  mdev->resync = resync_lru;
#line 1171
  nbc = 0;
#line 1172
  resync_lru = 0;
#line 1174
  mdev->write_ordering = WO_bdev_flush;
#line 1175
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1177
  tmp___28 = drbd_md_test_flag(mdev->ldev, 64);
#line 1177
  if (tmp___28 != 0) {
#line 1178
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1180
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1182
  tmp___29 = drbd_md_test_flag(mdev->ldev, 2);
#line 1182
  if (tmp___29 != 0 && ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2278UL) == 0U)) {
#line 1184
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1185
    cp_discovered = 1;
  } else {

  }
#line 1188
  mdev->send_cnt = 0U;
#line 1189
  mdev->recv_cnt = 0U;
#line 1190
  mdev->read_cnt = 0U;
#line 1191
  mdev->writ_cnt = 0U;
#line 1193
  drbd_reconsider_max_bio_size(mdev);
#line 1209
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1210
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) != 1U) {
#line 1210
    tmp___30 = drbd_md_test_flag(mdev->ldev, 2);
#line 1210
    if (tmp___30 != 0) {
#line 1210
      tmp___31 = drbd_md_test_flag(mdev->ldev, 4);
#line 1210
      if (tmp___31 == 0) {
#line 1213
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1215
  dd = drbd_determine_dev_size(mdev, 0);
#line 1216
  if ((int )dd == -1) {
#line 1217
    retcode = ERR_NOMEM_BITMAP;
#line 1218
    goto force_diskless_dec;
  } else
#line 1219
  if ((int )dd == 2) {
#line 1220
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1222
  tmp___34 = drbd_md_test_flag(mdev->ldev, 8);
#line 1222
  if (tmp___34 != 0) {
#line 1223
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1225
    tmp___32 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching",
                              BM_LOCKED_MASK);
#line 1225
    if (tmp___32 != 0) {
#line 1227
      retcode = ERR_IO_MD_DISK;
#line 1228
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1231
    tmp___33 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching",
                              BM_LOCKED_MASK);
#line 1231
    if (tmp___33 < 0) {
#line 1233
      retcode = ERR_IO_MD_DISK;
#line 1234
      goto force_diskless_dec;
    } else {

    }
  }
#line 1238
  if (cp_discovered != 0) {
#line 1239
    drbd_al_apply_to_bm(mdev);
#line 1240
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"crashed primary apply AL",
                              BM_LOCKED_MASK);
#line 1240
    if (tmp___35 != 0) {
#line 1242
      retcode = ERR_IO_MD_DISK;
#line 1243
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1247
  tmp___36 = _drbd_bm_total_weight(mdev);
#line 1247
  tmp___37 = drbd_bm_bits(mdev);
#line 1247
  if (tmp___36 == tmp___37) {
#line 1248
    drbd_suspend_al(mdev);
  } else {

  }
#line 1250
  spin_lock_irq(& mdev->req_lock);
#line 1251
  os = mdev->state;
#line 1252
  ns.i = os.i;
#line 1258
  tmp___39 = drbd_md_test_flag(mdev->ldev, 1);
#line 1258
  if (tmp___39 != 0) {
#line 1259
    tmp___38 = drbd_md_test_flag(mdev->ldev, 16);
#line 1259
    if (tmp___38 != 0) {
#line 1260
      ns.ldv_38894.disk = 7U;
    } else {
#line 1262
      ns.ldv_38894.disk = 5U;
    }
  } else {
#line 1264
    ns.ldv_38894.disk = 4U;
  }
#line 1267
  tmp___40 = drbd_md_test_flag(mdev->ldev, 32);
#line 1267
  if (tmp___40 != 0) {
#line 1268
    ns.ldv_38894.pdsk = 5U;
  } else {

  }
#line 1270
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1272
    ns.ldv_38894.disk = 8U;
  } else {

  }
#line 1281
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1282
    mdev->new_state_tmp.i = ns.i;
#line 1283
    ns.i = os.i;
#line 1284
    ns.ldv_38894.disk = 3U;
#line 1289
    kfree((void const   *)mdev->p_uuid);
#line 1290
    mdev->p_uuid = 0;
  } else {

  }
#line 1293
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1294
  ns = mdev->state;
#line 1295
  spin_unlock_irq(& mdev->req_lock);
#line 1297
  if ((int )rv <= 0) {
#line 1298
    goto force_diskless_dec;
  } else {

  }
#line 1300
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1301
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1303
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1305
  drbd_md_mark_dirty(mdev);
#line 1306
  drbd_md_sync(mdev);
#line 1308
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1309
  put_ldev(mdev);
#line 1310
  reply->ret_code = (int )retcode;
#line 1311
  drbd_reconfig_done(mdev);
#line 1312
  return (0);
  force_diskless_dec: 
#line 1315
  put_ldev(mdev);
  force_diskless: 
#line 1317
  val___0.i = 0U;
#line 1317
  val___0.ldv_38894.disk = 2U;
#line 1317
  mask___0.i = 0U;
#line 1317
  mask___0.ldv_38894.disk = 15U;
#line 1317
  drbd_force_state(mdev, mask___0, val___0);
#line 1318
  drbd_md_sync(mdev);
  fail: ;
#line 1320
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1321
    if ((unsigned long )nbc->backing_bdev != (unsigned long )((struct block_device *)0)) {
#line 1322
      blkdev_put(nbc->backing_bdev, 131U);
    } else {

    }
#line 1324
    if ((unsigned long )nbc->md_bdev != (unsigned long )((struct block_device *)0)) {
#line 1325
      blkdev_put(nbc->md_bdev, 131U);
    } else {

    }
#line 1327
    kfree((void const   *)nbc);
  } else {

  }
#line 1329
  lc_destroy(resync_lru);
#line 1331
  reply->ret_code = (int )retcode;
#line 1332
  drbd_reconfig_done(mdev);
#line 1333
  return (0);
}
}
#line 1341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_code retcode ;
  int ret ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1346
  drbd_suspend_io(mdev);
#line 1347
  val.i = 0U;
#line 1347
  val.ldv_38894.disk = 2U;
#line 1347
  mask.i = 0U;
#line 1347
  mask.ldv_38894.disk = 15U;
#line 1347
  tmp = drbd_request_state(mdev, mask, val);
#line 1347
  retcode = (enum drbd_ret_code )tmp;
#line 1349
  __ret = 0;
#line 1349
  if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 1349
    tmp___0 = get_current();
#line 1349
    __wait.flags = 0U;
#line 1349
    __wait.private = (void *)tmp___0;
#line 1349
    __wait.func = & autoremove_wake_function;
#line 1349
    __wait.task_list.next = & __wait.task_list;
#line 1349
    __wait.task_list.prev = & __wait.task_list;
    ldv_51917: 
#line 1349
    prepare_to_wait(& mdev->misc_wait, & __wait, 1);
#line 1349
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) != 4U) {
#line 1349
      goto ldv_51915;
    } else {

    }
#line 1349
    tmp___1 = get_current();
#line 1349
    tmp___2 = signal_pending(tmp___1);
#line 1349
    if (tmp___2 == 0) {
#line 1349
      schedule();
#line 1349
      goto ldv_51916;
    } else {

    }
#line 1349
    __ret = -512;
#line 1349
    goto ldv_51915;
    ldv_51916: ;
#line 1349
    goto ldv_51917;
    ldv_51915: 
#line 1349
    finish_wait(& mdev->misc_wait, & __wait);
  } else {

  }
#line 1349
  ret = __ret;
#line 1351
  drbd_resume_io(mdev);
#line 1352
  if ((long )retcode == 4294967285L) {
#line 1353
    retcode = 2;
  } else {

  }
#line 1354
  if (ret != 0) {
#line 1355
    retcode = ERR_INTR;
  } else {

  }
#line 1356
  reply->ret_code = (int )retcode;
#line 1357
  return (0);
}
}
#line 1360 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_code retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___16 ;

  {
#line 1365
  new_conf = 0;
#line 1366
  tfm = 0;
#line 1367
  integrity_w_tfm = 0;
#line 1368
  integrity_r_tfm = 0;
#line 1369
  new_tl_hash = 0;
#line 1370
  new_ee_hash = 0;
#line 1373
  int_dig_out = 0;
#line 1374
  int_dig_in = 0;
#line 1375
  int_dig_vv = 0;
#line 1378
  drbd_reconfig_start(mdev);
#line 1380
  if ((int )mdev->state.ldv_38894.conn > 0) {
#line 1381
    retcode = ERR_NET_CONFIGURED;
#line 1382
    goto fail;
  } else {

  }
#line 1386
  tmp = kzalloc(544UL, 208U);
#line 1386
  new_conf = (struct net_conf *)tmp;
#line 1387
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1388
    retcode = ERR_NOMEM;
#line 1389
    goto fail;
  } else {

  }
#line 1392
  new_conf->timeout = 60;
#line 1393
  new_conf->try_connect_int = 10;
#line 1394
  new_conf->ping_int = 10;
#line 1395
  new_conf->max_epoch_size = 2048;
#line 1396
  new_conf->max_buffers = 2048;
#line 1397
  new_conf->unplug_watermark = 128;
#line 1398
  new_conf->sndbuf_size = 0;
#line 1399
  new_conf->rcvbuf_size = 0;
#line 1400
  new_conf->ko_count = 0;
#line 1401
  new_conf->after_sb_0p = 0;
#line 1402
  new_conf->after_sb_1p = 0;
#line 1403
  new_conf->after_sb_2p = 0;
#line 1404
  new_conf->want_lose = 0U;
#line 1405
  new_conf->two_primaries = 0U;
#line 1406
  new_conf->wire_protocol = 3;
#line 1407
  new_conf->ping_timeo = 5;
#line 1408
  new_conf->rr_conflict = 0;
#line 1409
  new_conf->on_congestion = 0;
#line 1410
  new_conf->cong_extents = 127;
#line 1412
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1412
  if (tmp___0 == 0) {
#line 1413
    retcode = ERR_MANDATORY_TAG;
#line 1414
    goto fail;
  } else {

  }
#line 1417
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && new_conf->wire_protocol != 3) {
#line 1419
    retcode = ERR_NOT_PROTO_C;
#line 1420
    goto fail;
  } else {

  }
#line 1423
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1423
  if (tmp___1 != 0) {
#line 1424
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1425
    put_ldev(mdev);
#line 1426
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1427
      retcode = ERR_STONITH_AND_PROT_A;
#line 1428
      goto fail;
    } else {

    }
  } else {

  }
#line 1432
  if (new_conf->on_congestion != 0 && new_conf->wire_protocol != 1) {
#line 1433
    retcode = ERR_CONG_NOT_PROTO_A;
#line 1434
    goto fail;
  } else {

  }
#line 1437
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 540UL) != 0U) {
#line 1438
    retcode = ERR_DISCARD;
#line 1439
    goto fail;
  } else {

  }
#line 1442
  retcode = NO_ERROR;
#line 1444
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1445
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1446
  i = 0;
#line 1446
  goto ldv_51945;
  ldv_51944: 
#line 1447
  odev = minor_to_mdev((unsigned int )i);
#line 1448
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1449
    goto ldv_51943;
  } else {

  }
#line 1450
  tmp___4 = get_net_conf(odev);
#line 1450
  if (tmp___4 != 0) {
#line 1451
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1452
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1452
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1452
      if (tmp___2 == 0) {
#line 1454
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1456
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1457
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1457
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1457
      if (tmp___3 == 0) {
#line 1459
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1461
    put_net_conf(odev);
#line 1462
    if ((unsigned int )retcode != 101U) {
#line 1463
      goto fail;
    } else {

    }
  } else {

  }
  ldv_51943: 
#line 1446
  i = i + 1;
  ldv_51945: ;
#line 1446
  if ((unsigned int )i < minor_count) {
#line 1447
    goto ldv_51944;
  } else {

  }

#line 1467
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1468
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1470
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1471
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1471
    if (tmp___5 != 0L) {
#line 1472
      tfm = 0;
#line 1473
      retcode = ERR_AUTH_ALG;
#line 1474
      goto fail;
    } else {

    }
#line 1477
    tmp___6 = crypto_hash_tfm(tfm);
#line 1477
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1477
    if (tmp___7 == 0) {
#line 1478
      retcode = ERR_AUTH_ALG_ND;
#line 1479
      goto fail;
    } else {

    }
  } else {

  }
#line 1483
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1484
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1485
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1485
    if (tmp___8 != 0L) {
#line 1486
      integrity_w_tfm = 0;
#line 1487
      retcode = ERR_INTEGRITY_ALG;
#line 1488
      goto fail;
    } else {

    }
#line 1491
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1491
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1491
    if (tmp___10 == 0) {
#line 1492
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1493
      goto fail;
    } else {

    }
#line 1496
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1497
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1497
    if (tmp___11 != 0L) {
#line 1498
      integrity_r_tfm = 0;
#line 1499
      retcode = ERR_INTEGRITY_ALG;
#line 1500
      goto fail;
    } else {

    }
  } else {

  }
#line 1504
  ns = new_conf->max_epoch_size / 8;
#line 1505
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1506
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1506
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1507
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1508
      retcode = ERR_NOMEM;
#line 1509
      goto fail;
    } else {

    }
  } else {

  }
#line 1513
  ns = new_conf->max_buffers / 8;
#line 1514
  if ((unsigned int )*((unsigned char *)new_conf + 540UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1515
    tmp___13 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1515
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1516
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1517
      retcode = ERR_NOMEM;
#line 1518
      goto fail;
    } else {

    }
  } else {

  }
#line 1522
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1524
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1525
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1525
    i = (int )tmp___14;
#line 1526
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1527
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1528
      retcode = ERR_NOMEM;
#line 1529
      goto fail;
    } else {

    }
#line 1531
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1532
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1533
      retcode = ERR_NOMEM;
#line 1534
      goto fail;
    } else {

    }
#line 1536
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1537
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1538
      retcode = ERR_NOMEM;
#line 1539
      goto fail;
    } else {

    }
  } else {

  }
#line 1543
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1544
    tmp___15 = drbd_bm_init(mdev);
#line 1544
    if (tmp___15 != 0) {
#line 1545
      retcode = ERR_NOMEM;
#line 1546
      goto fail;
    } else {

    }
  } else {

  }
#line 1550
  drbd_flush_workqueue(mdev);
#line 1551
  spin_lock_irq(& mdev->req_lock);
#line 1552
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1553
    retcode = ERR_NET_CONFIGURED;
#line 1554
    spin_unlock_irq(& mdev->req_lock);
#line 1555
    goto fail;
  } else {

  }
#line 1557
  mdev->net_conf = new_conf;
#line 1559
  mdev->send_cnt = 0U;
#line 1560
  mdev->recv_cnt = 0U;
#line 1562
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1563
    kfree((void const   *)mdev->tl_hash);
#line 1564
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1565
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1568
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1569
    kfree((void const   *)mdev->ee_hash);
#line 1570
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1571
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1574
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1575
  mdev->cram_hmac_tfm = tfm;
#line 1577
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1578
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1580
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1581
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1583
  kfree((void const   *)mdev->int_dig_out);
#line 1584
  kfree((void const   *)mdev->int_dig_in);
#line 1585
  kfree((void const   *)mdev->int_dig_vv);
#line 1586
  mdev->int_dig_out = int_dig_out;
#line 1587
  mdev->int_dig_in = int_dig_in;
#line 1588
  mdev->int_dig_vv = int_dig_vv;
#line 1589
  __ns.i = mdev->state.i;
#line 1589
  __ns.ldv_38894.conn = 2U;
#line 1589
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1589
  retcode = (enum drbd_ret_code )tmp___16;
#line 1590
  spin_unlock_irq(& mdev->req_lock);
#line 1592
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1593
  reply->ret_code = (int )retcode;
#line 1594
  drbd_reconfig_done(mdev);
#line 1595
  return (0);
  fail: 
#line 1598
  kfree((void const   *)int_dig_out);
#line 1599
  kfree((void const   *)int_dig_in);
#line 1600
  kfree((void const   *)int_dig_vv);
#line 1601
  crypto_free_hash(tfm);
#line 1602
  crypto_free_hash(integrity_w_tfm);
#line 1603
  crypto_free_hash(integrity_r_tfm);
#line 1604
  kfree((void const   *)new_tl_hash);
#line 1605
  kfree((void const   *)new_ee_hash);
#line 1606
  kfree((void const   *)new_conf);
#line 1608
  reply->ret_code = (int )retcode;
#line 1609
  drbd_reconfig_done(mdev);
#line 1610
  return (0);
}
}
#line 1613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  struct disconnect dc ;
  int tmp ;
  union drbd_state __ns ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___0 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  enum drbd_state_rv tmp___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 1619
  memset((void *)(& dc), 0, 4UL);
#line 1620
  tmp = disconnect_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & dc);
#line 1620
  if (tmp == 0) {
#line 1621
    retcode = 126;
#line 1622
    goto fail;
  } else {

  }
#line 1625
  if ((unsigned int )*((unsigned char *)(& dc) + 0UL) != 0U) {
#line 1626
    spin_lock_irq(& mdev->req_lock);
#line 1627
    if ((int )mdev->state.ldv_38894.conn > 7) {
#line 1628
      __ns.i = mdev->state.i;
#line 1628
      __ns.ldv_38894.conn = 1U;
#line 1628
      _drbd_set_state(mdev, __ns, CS_HARD, 0);
    } else {

    }
#line 1629
    spin_unlock_irq(& mdev->req_lock);
#line 1630
    goto done;
  } else {

  }
#line 1633
  val.i = 0U;
#line 1633
  val.ldv_38894.conn = 1U;
#line 1633
  mask.i = 0U;
#line 1633
  mask.ldv_38894.conn = 31U;
#line 1633
  tmp___0 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1633
  retcode = (int )tmp___0;
#line 1635
  if (retcode == 2) {
#line 1636
    goto done;
  } else
#line 1637
  if (retcode == -9) {
#line 1638
    goto done;
  } else
#line 1639
  if (retcode == -7) {
#line 1642
    val___0.i = 0U;
#line 1642
    val___0.ldv_38894.conn = 1U;
#line 1642
    val___0.ldv_38894.pdsk = 5U;
#line 1641
    mask___0.i = 0U;
#line 1641
    mask___0.ldv_38894.conn = 31U;
#line 1642
    mask___0.ldv_38894.pdsk = 15U;
#line 1642
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1643
  if (retcode == -10) {
#line 1646
    val___1.i = 0U;
#line 1646
    val___1.ldv_38894.conn = 1U;
#line 1646
    val___1.ldv_38894.disk = 5U;
#line 1645
    mask___1.i = 0U;
#line 1645
    mask___1.ldv_38894.conn = 31U;
#line 1646
    mask___1.ldv_38894.disk = 15U;
#line 1646
    tmp___1 = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1646
    retcode = (int )tmp___1;
#line 1648
    if (retcode == -11 || retcode == -16) {
#line 1649
      val___2.i = 0U;
#line 1649
      val___2.ldv_38894.conn = 1U;
#line 1649
      mask___2.i = 0U;
#line 1649
      mask___2.ldv_38894.conn = 31U;
#line 1649
      drbd_force_state(mdev, mask___2, val___2);
#line 1650
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1654
  if (retcode <= 0) {
#line 1655
    goto fail;
  } else {

  }
#line 1657
  __ret = 0;
#line 1657
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 16U) {
#line 1657
    tmp___2 = get_current();
#line 1657
    __wait.flags = 0U;
#line 1657
    __wait.private = (void *)tmp___2;
#line 1657
    __wait.func = & autoremove_wake_function;
#line 1657
    __wait.task_list.next = & __wait.task_list;
#line 1657
    __wait.task_list.prev = & __wait.task_list;
    ldv_51980: 
#line 1657
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1657
    if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 16U) {
#line 1657
      goto ldv_51978;
    } else {

    }
#line 1657
    tmp___3 = get_current();
#line 1657
    tmp___4 = signal_pending(tmp___3);
#line 1657
    if (tmp___4 == 0) {
#line 1657
      schedule();
#line 1657
      goto ldv_51979;
    } else {

    }
#line 1657
    __ret = -512;
#line 1657
    goto ldv_51978;
    ldv_51979: ;
#line 1657
    goto ldv_51980;
    ldv_51978: 
#line 1657
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1657
  if (__ret != 0) {
#line 1661
    retcode = 129;
#line 1662
    goto fail;
  } else {

  }
  done: 
#line 1666
  retcode = 101;
  fail: 
#line 1668
  drbd_md_sync(mdev);
#line 1669
  reply->ret_code = retcode;
#line 1670
  return (0);
}
}
#line 1673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1677
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1678
  if ((int )mdev->state.ldv_38894.role != (int )mdev->state.ldv_38894.peer) {
#line 1679
    iass = (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U;
  } else {
#line 1681
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1683
  if (iass != 0) {
#line 1684
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1686
    val.i = 0U;
#line 1686
    val.ldv_38894.conn = 15U;
#line 1686
    mask.i = 0U;
#line 1686
    mask.ldv_38894.conn = 31U;
#line 1686
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1688
  return;
}
}
#line 1689 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1693
  retcode = 101;
#line 1697
  memset((void *)(& rs), 0, 16UL);
#line 1698
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1698
  if (tmp == 0) {
#line 1699
    retcode = 126;
#line 1700
    goto fail;
  } else {

  }
#line 1703
  if ((int )mdev->state.ldv_38894.conn > 10) {
#line 1704
    retcode = 130;
#line 1705
    goto fail;
  } else {

  }
#line 1708
  if ((unsigned int )*((unsigned char *)mdev + 2276UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2276UL) == 8U) {
#line 1710
    retcode = 131;
#line 1711
    goto fail;
  } else {

  }
#line 1714
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1714
  if (tmp___0 == 0) {
#line 1715
    retcode = 138;
#line 1716
    goto fail;
  } else {

  }
#line 1719
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1720
    retcode = 153;
#line 1721
    goto fail;
  } else {

  }
#line 1724
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1724
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1725
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1727
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1728
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1729
  dd = drbd_determine_dev_size(mdev, ddsf);
#line 1730
  drbd_md_sync(mdev);
#line 1731
  put_ldev(mdev);
#line 1732
  if ((int )dd == -1) {
#line 1733
    retcode = 140;
#line 1734
    goto fail;
  } else {

  }
#line 1737
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U) {
#line 1738
    if ((int )dd == 2) {
#line 1739
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1741
    drbd_send_uuids(mdev);
#line 1742
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1746
  reply->ret_code = retcode;
#line 1747
  return (0);
}
}
#line 1750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1753
  retcode = 101;
#line 1757
  verify_tfm = 0;
#line 1758
  csums_tfm = 0;
#line 1761
  rs_plan_s = 0;
#line 1764
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1764
  if (tmp) {
#line 1764
    tmp___0 = 0;
  } else {
#line 1764
    tmp___0 = 1;
  }
#line 1764
  if (tmp___0) {
#line 1765
    retcode = 122;
#line 1766
    goto fail;
  } else {

  }
#line 1769
  if ((nlp->flags & 2) != 0) {
#line 1770
    memset((void *)(& sc), 0, 212UL);
#line 1771
    sc.rate = 250;
#line 1772
    sc.after = -1;
#line 1773
    sc.al_extents = 127;
#line 1774
    sc.on_no_data = 0;
#line 1775
    sc.c_plan_ahead = 0;
#line 1776
    sc.c_delay_target = 10;
#line 1777
    sc.c_fill_target = 0;
#line 1778
    sc.c_max_rate = 102400;
#line 1779
    sc.c_min_rate = 4096;
  } else {
#line 1781
    __len = 212UL;
#line 1781
    if (__len > 63UL) {
#line 1781
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1781
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1783
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1783
  if (tmp___1 == 0) {
#line 1784
    retcode = 126;
#line 1785
    goto fail;
  } else {

  }
#line 1789
  rsr = (((unsigned int )*((unsigned short *)mdev + 1138UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1138UL) == 336U;
#line 1794
  if (rsr != 0) {
#line 1794
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1794
    if (tmp___2 != 0) {
#line 1795
      retcode = 148;
#line 1796
      goto fail;
    } else {

    }
  } else {

  }
#line 1799
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1800
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1801
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1801
    if (tmp___3 != 0L) {
#line 1802
      csums_tfm = 0;
#line 1803
      retcode = 144;
#line 1804
      goto fail;
    } else {

    }
#line 1807
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1807
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1807
    if (tmp___5 == 0) {
#line 1808
      retcode = 145;
#line 1809
      goto fail;
    } else {

    }
  } else {

  }
#line 1814
  ovr = (unsigned int )*((unsigned short *)mdev + 1138UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1138UL) == 304U;
#line 1816
  if (ovr != 0) {
#line 1817
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1817
    if (tmp___6 != 0) {
#line 1818
      retcode = 149;
#line 1819
      goto fail;
    } else {

    }
  } else {

  }
#line 1823
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1824
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1825
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1825
    if (tmp___7 != 0L) {
#line 1826
      verify_tfm = 0;
#line 1827
      retcode = 146;
#line 1828
      goto fail;
    } else {

    }
#line 1831
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1831
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1831
    if (tmp___9 == 0) {
#line 1832
      retcode = 147;
#line 1833
      goto fail;
    } else {

    }
  } else {

  }
#line 1838
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1839
    err = bitmap_parse((char const   *)(& sc.cpu_mask), 32U, (unsigned long *)(& new_cpu_mask->bits),
                       nr_cpu_ids);
#line 1841
    if (err != 0) {
#line 1842
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap_parse() failed with %d\n",
               err);
#line 1843
      retcode = 143;
#line 1844
      goto fail;
    } else {

    }
  } else {

  }
#line 1848
  _b = sc.rate <= 0;
#line 1848
  if (_b != 0) {
#line 1848
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1848);
  } else {

  }
#line 1848
  if (_b != 0) {
#line 1848
    sc.rate = 1;
  } else {

  }
#line 1849
  _b___0 = sc.al_extents <= 6;
#line 1849
  if (_b___0 != 0) {
#line 1849
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1849);
  } else {

  }
#line 1849
  if (_b___0 != 0) {
#line 1849
    sc.al_extents = 127;
  } else {

  }
#line 1851
  if (sc.al_extents > 3843) {
#line 1852
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1853
    sc.al_extents = 3843;
  } else {

  }
#line 1860
  if (sc.after >= 0) {
#line 1861
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1866
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1867
  if (retcode != 101) {
#line 1868
    goto fail;
  } else {

  }
#line 1870
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1871
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1872
    tmp___10 = kzalloc((unsigned long )fifo_size * 4UL, 208U);
#line 1872
    rs_plan_s = (int *)tmp___10;
#line 1873
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1874
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1875
      retcode = 122;
#line 1876
      goto fail;
    } else {

    }
  } else {

  }
#line 1882
  spin_lock(& mdev->peer_seq_lock);
#line 1883
  mdev->sync_conf = sc;
#line 1885
  if (rsr == 0) {
#line 1886
    crypto_free_hash(mdev->csums_tfm);
#line 1887
    mdev->csums_tfm = csums_tfm;
#line 1888
    csums_tfm = 0;
  } else {

  }
#line 1891
  if (ovr == 0) {
#line 1892
    crypto_free_hash(mdev->verify_tfm);
#line 1893
    mdev->verify_tfm = verify_tfm;
#line 1894
    verify_tfm = 0;
  } else {

  }
#line 1897
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1898
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1899
    mdev->rs_plan_s.values = rs_plan_s;
#line 1900
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1901
    mdev->rs_planed = 0;
#line 1902
    rs_plan_s = 0;
  } else {

  }
#line 1905
  spin_unlock(& mdev->peer_seq_lock);
#line 1907
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1907
  if (tmp___14 != 0) {
#line 1908
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1908
    if (tmp___11 != 0) {
#line 1908
      goto ldv_52024;
    } else {

    }
#line 1908
    tmp___12 = get_current();
#line 1908
    __wait.flags = 0U;
#line 1908
    __wait.private = (void *)tmp___12;
#line 1908
    __wait.func = & autoremove_wake_function;
#line 1908
    __wait.task_list.next = & __wait.task_list;
#line 1908
    __wait.task_list.prev = & __wait.task_list;
    ldv_52027: 
#line 1908
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1908
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1908
    if (tmp___13 != 0) {
#line 1908
      goto ldv_52026;
    } else {

    }
#line 1908
    schedule();
#line 1908
    goto ldv_52027;
    ldv_52026: 
#line 1908
    finish_wait(& mdev->al_wait, & __wait);
    ldv_52024: 
#line 1909
    drbd_al_shrink(mdev);
#line 1910
    err = drbd_check_al_size(mdev);
#line 1911
    lc_unlock(mdev->act_log);
#line 1912
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1914
    put_ldev(mdev);
#line 1915
    drbd_md_sync(mdev);
#line 1917
    if (err != 0) {
#line 1918
      retcode = 122;
#line 1919
      goto fail;
    } else {

    }
  } else {

  }
#line 1923
  if ((int )mdev->state.ldv_38894.conn > 9) {
#line 1924
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1926
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1926
  if (tmp___15) {
#line 1926
    tmp___16 = 0;
  } else {
#line 1926
    tmp___16 = 1;
  }
#line 1926
  if (tmp___16) {
#line 1927
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1928
    drbd_calc_cpu_mask(mdev);
#line 1929
    mdev->receiver.reset_cpu_mask = 1;
#line 1930
    mdev->asender.reset_cpu_mask = 1;
#line 1931
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1934
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1936
  kfree((void const   *)rs_plan_s);
#line 1937
  free_cpumask_var(new_cpu_mask);
#line 1938
  crypto_free_hash(csums_tfm);
#line 1939
  crypto_free_hash(verify_tfm);
#line 1940
  reply->ret_code = retcode;
#line 1941
  return (0);
}
}
#line 1944 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  enum drbd_state_rv tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1951
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1951
  if (tmp == 0) {
#line 1951
    goto ldv_52034;
  } else {

  }
#line 1951
  tmp___0 = get_current();
#line 1951
  __wait.flags = 0U;
#line 1951
  __wait.private = (void *)tmp___0;
#line 1951
  __wait.func = & autoremove_wake_function;
#line 1951
  __wait.task_list.next = & __wait.task_list;
#line 1951
  __wait.task_list.prev = & __wait.task_list;
  ldv_52037: 
#line 1951
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1951
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1951
  if (tmp___1 == 0) {
#line 1951
    goto ldv_52036;
  } else {

  }
#line 1951
  schedule();
#line 1951
  goto ldv_52037;
  ldv_52036: 
#line 1951
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52034: 
#line 1953
  val.i = 0U;
#line 1953
  val.ldv_38894.conn = 12U;
#line 1953
  mask.i = 0U;
#line 1953
  mask.ldv_38894.conn = 31U;
#line 1953
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1953
  retcode = (int )tmp___2;
#line 1955
  if (retcode <= 0 && retcode != -15) {
#line 1956
    val___0.i = 0U;
#line 1956
    val___0.ldv_38894.conn = 12U;
#line 1956
    mask___0.i = 0U;
#line 1956
    mask___0.ldv_38894.conn = 31U;
#line 1956
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1958
  goto ldv_52054;
  ldv_52053: 
#line 1959
  spin_lock_irq(& mdev->req_lock);
#line 1960
  if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 1961
    __ns.i = mdev->state.i;
#line 1961
    __ns.ldv_38894.disk = 4U;
#line 1961
    tmp___3 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1961
    retcode = (int )tmp___3;
  } else {

  }
#line 1962
  spin_unlock_irq(& mdev->req_lock);
#line 1964
  if (retcode != -15) {
#line 1965
    goto ldv_52048;
  } else {

  }
#line 1967
  val___1.i = 0U;
#line 1967
  val___1.ldv_38894.conn = 12U;
#line 1967
  mask___1.i = 0U;
#line 1967
  mask___1.ldv_38894.conn = 31U;
#line 1967
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_52054: ;
#line 1958
  if (retcode == -15) {
#line 1959
    goto ldv_52053;
  } else {

  }
  ldv_52048: 
#line 1970
  reply->ret_code = retcode;
#line 1971
  return (0);
}
}
#line 1974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1978
  rv = drbd_bmio_set_n_write(mdev);
#line 1979
  drbd_suspend_al(mdev);
#line 1980
  return (rv);
}
}
#line 1983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  enum drbd_state_rv tmp___2 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___3 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1990
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1990
  if (tmp == 0) {
#line 1990
    goto ldv_52065;
  } else {

  }
#line 1990
  tmp___0 = get_current();
#line 1990
  __wait.flags = 0U;
#line 1990
  __wait.private = (void *)tmp___0;
#line 1990
  __wait.func = & autoremove_wake_function;
#line 1990
  __wait.task_list.next = & __wait.task_list;
#line 1990
  __wait.task_list.prev = & __wait.task_list;
  ldv_52068: 
#line 1990
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1990
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 1990
  if (tmp___1 == 0) {
#line 1990
    goto ldv_52067;
  } else {

  }
#line 1990
  schedule();
#line 1990
  goto ldv_52068;
  ldv_52067: 
#line 1990
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52065: 
#line 1992
  val.i = 0U;
#line 1992
  val.ldv_38894.conn = 11U;
#line 1992
  mask.i = 0U;
#line 1992
  mask.ldv_38894.conn = 31U;
#line 1992
  tmp___2 = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1992
  retcode = (int )tmp___2;
#line 1994
  if (retcode <= 0) {
#line 1995
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2276UL) == 1U) {
#line 1998
      val___0.i = 0U;
#line 1998
      val___0.ldv_38894.pdsk = 4U;
#line 1998
      mask___0.i = 0U;
#line 1998
      mask___0.ldv_38894.pdsk = 15U;
#line 1998
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1999
      if (retcode > 0) {
#line 2000
        tmp___3 = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer",
                                 BM_DONT_CLEAR);
#line 2000
        if (tmp___3 != 0) {
#line 2003
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 2006
      val___1.i = 0U;
#line 2006
      val___1.ldv_38894.conn = 11U;
#line 2006
      mask___1.i = 0U;
#line 2006
      mask___1.ldv_38894.conn = 31U;
#line 2006
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 2009
  reply->ret_code = retcode;
#line 2010
  return (0);
}
}
#line 2013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2016
  retcode = 101;
#line 2018
  val.i = 0U;
#line 2018
  val.ldv_38894.user_isp = 1U;
#line 2018
  mask.i = 0U;
#line 2018
  mask.ldv_38894.user_isp = 1U;
#line 2018
  tmp = drbd_request_state(mdev, mask, val);
#line 2018
  if (tmp == 2) {
#line 2019
    retcode = 134;
  } else {

  }
#line 2021
  reply->ret_code = retcode;
#line 2022
  return (0);
}
}
#line 2025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state s ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 2028
  retcode = 101;
#line 2031
  val.i = 0U;
#line 2031
  val.ldv_38894.user_isp = 0U;
#line 2031
  mask.i = 0U;
#line 2031
  mask.ldv_38894.user_isp = 1U;
#line 2031
  tmp = drbd_request_state(mdev, mask, val);
#line 2031
  if (tmp == 2) {
#line 2032
    s = mdev->state;
#line 2033
    if ((unsigned int )*((unsigned short *)(& s) + 0UL) == 320U || (unsigned int )*((unsigned short *)(& s) + 0UL) == 336U) {
#line 2034
      retcode = (unsigned int )*((unsigned char *)(& s) + 2UL) == 0U ? ((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U ? 157 : 135) : 156;
    } else {
#line 2037
      retcode = 135;
    }
  } else {

  }
#line 2041
  reply->ret_code = retcode;
#line 2042
  return (0);
}
}
#line 2045 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2048
  val.i = 0U;
#line 2048
  val.ldv_38894.susp = 1U;
#line 2048
  mask.i = 0U;
#line 2048
  mask.ldv_38894.susp = 1U;
#line 2048
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2050
  return (0);
}
}
#line 2053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2056
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 2056
  if (tmp != 0) {
#line 2057
    drbd_uuid_new_current(mdev);
#line 2058
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2060
  drbd_suspend_io(mdev);
#line 2061
  val.i = 0U;
#line 2061
  val.ldv_38894.susp = 0U;
#line 2061
  val.ldv_38894.susp_nod = 0U;
#line 2061
  val.ldv_38894.susp_fen = 0U;
#line 2061
  mask.i = 0U;
#line 2061
  mask.ldv_38894.susp = 1U;
#line 2061
  mask.ldv_38894.susp_nod = 1U;
#line 2061
  mask.ldv_38894.susp_fen = 1U;
#line 2061
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2062
  if (reply->ret_code == 1) {
#line 2063
    if ((int )mdev->state.ldv_38894.conn <= 9) {
#line 2064
      tl_clear(mdev);
    } else {

    }
#line 2065
    if ((unsigned int )*((unsigned char *)mdev + 2277UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2277UL) == 4U) {
#line 2066
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 2068
  drbd_resume_io(mdev);
#line 2070
  return (0);
}
}
#line 2073 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2076
  val.i = 0U;
#line 2076
  val.ldv_38894.disk = 5U;
#line 2076
  mask.i = 0U;
#line 2076
  mask.ldv_38894.disk = 15U;
#line 2076
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2077
  return (0);
}
}
#line 2080 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2085
  tl = (unsigned short *)(& reply->tag_list);
#line 2087
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2087
  if (tmp != 0) {
#line 2088
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2089
    put_ldev(mdev);
  } else {

  }
#line 2092
  tmp___0 = get_net_conf(mdev);
#line 2092
  if (tmp___0 != 0) {
#line 2093
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2094
    put_net_conf(mdev);
  } else {

  }
#line 2096
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2098
  tmp___1 = tl;
#line 2098
  tl = tl + 1;
#line 2098
  __gu_p = (void *)tmp___1;
#line 2098
  switch (2UL) {
  case 1UL: 
#line 2098
  *((u8 *)__gu_p) = 0U;
#line 2098
  goto ldv_52137;
  case 2UL: 
#line 2098
  put_unaligned_le16(0, __gu_p);
#line 2098
  goto ldv_52137;
  case 4UL: 
#line 2098
  put_unaligned_le32(0U, __gu_p);
#line 2098
  goto ldv_52137;
  case 8UL: 
#line 2098
  put_unaligned_le64(0ULL, __gu_p);
#line 2098
  goto ldv_52137;
  default: 
#line 2098
  __bad_unaligned_access_size();
#line 2098
  goto ldv_52137;
  }
  ldv_52137: ;
#line 2100
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2106
  tl = (unsigned short *)(& reply->tag_list);
#line 2107
  s = mdev->state;
#line 2111
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2114
  if ((int )s.ldv_38894.conn > 15 && (int )s.ldv_38894.conn <= 21) {
#line 2115
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2115
    if (tmp != 0) {
#line 2116
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2117
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2118
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2121
  tmp___0 = tl;
#line 2121
  tl = tl + 1;
#line 2121
  __gu_p = (void *)tmp___0;
#line 2121
  switch (2UL) {
  case 1UL: 
#line 2121
  *((u8 *)__gu_p) = 0U;
#line 2121
  goto ldv_52153;
  case 2UL: 
#line 2121
  put_unaligned_le16(0, __gu_p);
#line 2121
  goto ldv_52153;
  case 4UL: 
#line 2121
  put_unaligned_le32(0U, __gu_p);
#line 2121
  goto ldv_52153;
  case 8UL: 
#line 2121
  put_unaligned_le64(0ULL, __gu_p);
#line 2121
  goto ldv_52153;
  default: 
#line 2121
  __bad_unaligned_access_size();
#line 2121
  goto ldv_52153;
  }
  ldv_52153: ;
#line 2123
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2131
  tl = (unsigned short *)(& reply->tag_list);
#line 2133
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2133
  if (tmp != 0) {
#line 2134
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2135
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2136
    put_ldev(mdev);
  } else {

  }
#line 2138
  tmp___0 = tl;
#line 2138
  tl = tl + 1;
#line 2138
  __gu_p = (void *)tmp___0;
#line 2138
  switch (2UL) {
  case 1UL: 
#line 2138
  *((u8 *)__gu_p) = 0U;
#line 2138
  goto ldv_52166;
  case 2UL: 
#line 2138
  put_unaligned_le16(0, __gu_p);
#line 2138
  goto ldv_52166;
  case 4UL: 
#line 2138
  put_unaligned_le32(0U, __gu_p);
#line 2138
  goto ldv_52166;
  case 8UL: 
#line 2138
  put_unaligned_le64(0ULL, __gu_p);
#line 2138
  goto ldv_52166;
  default: 
#line 2138
  __bad_unaligned_access_size();
#line 2138
  goto ldv_52166;
  }
  ldv_52166: ;
#line 2140
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2155
  tl = (unsigned short *)(& reply->tag_list);
#line 2157
  if (*((unsigned int *)mdev + 569UL) != 40960U) {
#line 2157
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2157
    rv = tmp != 0;
  } else {
#line 2157
    rv = 2;
  }
#line 2160
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2161
  tmp___0 = tl;
#line 2161
  tl = tl + 1;
#line 2161
  __gu_p = (void *)tmp___0;
#line 2161
  switch (2UL) {
  case 1UL: 
#line 2161
  *((u8 *)__gu_p) = 0U;
#line 2161
  goto ldv_52180;
  case 2UL: 
#line 2161
  put_unaligned_le16(0, __gu_p);
#line 2161
  goto ldv_52180;
  case 4UL: 
#line 2161
  put_unaligned_le32(0U, __gu_p);
#line 2161
  goto ldv_52180;
  case 8UL: 
#line 2161
  put_unaligned_le64(0ULL, __gu_p);
#line 2161
  goto ldv_52180;
  default: 
#line 2161
  __bad_unaligned_access_size();
#line 2161
  goto ldv_52180;
  }
  ldv_52180: ;
#line 2163
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2166 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2170
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2173
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2173
  if (tmp == 0) {
#line 2174
    reply->ret_code = 126;
#line 2175
    return (0);
  } else {

  }
#line 2180
  tmp___0 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2180
  if (tmp___0 == 0) {
#line 2180
    goto ldv_52191;
  } else {

  }
#line 2180
  tmp___1 = get_current();
#line 2180
  __wait.flags = 0U;
#line 2180
  __wait.private = (void *)tmp___1;
#line 2180
  __wait.func = & autoremove_wake_function;
#line 2180
  __wait.task_list.next = & __wait.task_list;
#line 2180
  __wait.task_list.prev = & __wait.task_list;
  ldv_52194: 
#line 2180
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 2180
  tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2180
  if (tmp___2 == 0) {
#line 2180
    goto ldv_52193;
  } else {

  }
#line 2180
  schedule();
#line 2180
  goto ldv_52194;
  ldv_52193: 
#line 2180
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_52191: 
#line 2183
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2184
  val.i = 0U;
#line 2184
  val.ldv_38894.conn = 18U;
#line 2184
  mask.i = 0U;
#line 2184
  mask.ldv_38894.conn = 31U;
#line 2184
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2185
  return (0);
}
}
#line 2189 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2192
  retcode = 101;
#line 2193
  skip_initial_sync = 0;
#line 2198
  memset((void *)(& args), 0, 4UL);
#line 2199
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2199
  if (tmp == 0) {
#line 2200
    reply->ret_code = 126;
#line 2201
    return (0);
  } else {

  }
#line 2204
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 2206
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2206
  if (tmp___0 == 0) {
#line 2207
    retcode = 138;
#line 2208
    goto out;
  } else {

  }
#line 2212
  if ((((unsigned int )*((unsigned short *)mdev + 1138UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2214
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2215
    skip_initial_sync = 1;
  } else
#line 2216
  if ((unsigned int )*((unsigned short *)mdev + 1138UL) != 0U) {
#line 2217
    retcode = 151;
#line 2218
    goto out_dec;
  } else {

  }
#line 2221
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2222
  drbd_uuid_new_current(mdev);
#line 2224
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2225
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid",
                         BM_LOCKED_MASK);
#line 2227
    if (err != 0) {
#line 2228
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2229
      retcode = 118;
    } else {

    }
#line 2231
    if (skip_initial_sync != 0) {
#line 2232
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2233
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2234
      drbd_print_uuids(mdev, "cleared bitmap UUID");
#line 2235
      spin_lock_irq(& mdev->req_lock);
#line 2236
      __ns.i = mdev->state.i;
#line 2236
      __ns.ldv_38894.disk = 8U;
#line 2236
      __ns.ldv_38894.pdsk = 8U;
#line 2236
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2238
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2242
  drbd_md_sync(mdev);
  out_dec: 
#line 2244
  put_ldev(mdev);
  out: 
#line 2246
  mutex_unlock(& mdev->state_mutex);
#line 2248
  reply->ret_code = retcode;
#line 2249
  return (0);
}
}
#line 2259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2259
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1312}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2290 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  void *tmp___2 ;

  {
#line 2292
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2298
  reply_size = 34;
#line 2302
  tmp = ldv_try_module_get_1(& __this_module);
#line 2302
  if (tmp == 0) {
#line 2303
    printk("<3>drbd: try_module_get() failed!\n");
#line 2304
    return;
  } else {

  }
#line 2307
  tmp___0 = debug_lockdep_rcu_enabled();
#line 2307
  tmp___1 = get_current();
#line 2307
  if (((tmp___1->cred)->cap_effective.cap[0] & 2097152U) == 0U) {
#line 2308
    retcode = 152;
#line 2309
    goto fail;
  } else {

  }
#line 2312
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2314
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2315
    retcode = 127;
#line 2316
    goto fail;
  } else {

  }
#line 2319
  if (nlp->packet_type > 27 || nlp->packet_type == 27) {
#line 2321
    retcode = 137;
#line 2322
    goto fail;
  } else {

  }
#line 2325
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2328
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2329
    retcode = 137;
#line 2330
    goto fail;
  } else {

  }
#line 2333
  reply_size = cm->reply_body_size + reply_size;
#line 2336
  tmp___2 = kzalloc((size_t )reply_size, 208U);
#line 2336
  cn_reply = (struct cn_msg *)tmp___2;
#line 2337
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2338
    retcode = 122;
#line 2339
    goto fail;
  } else {

  }
#line 2341
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2343
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2345
  reply->minor = nlp->drbd_minor;
#line 2346
  reply->ret_code = 101;
#line 2349
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2351
  cn_reply->id = req->id;
#line 2352
  cn_reply->seq = req->seq;
#line 2353
  cn_reply->ack = req->ack + 1U;
#line 2354
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2355
  cn_reply->flags = 0U;
#line 2357
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2358
  if (rr != 0 && rr != -3) {
#line 2359
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2361
  kfree((void const   *)cn_reply);
#line 2362
  ldv_module_put_7(& __this_module);
#line 2363
  return;
  fail: 
#line 2365
  drbd_nl_send_reply(req, retcode);
#line 2366
  ldv_module_put_8(& __this_module);
#line 2367
  return;
}
}
#line 2369 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2375
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2376
  len = (int )len < (int )l ? len : l;
#line 2377
  tmp = tl;
#line 2377
  tl = tl + 1;
#line 2377
  __gu_p = (void *)tmp;
#line 2377
  switch (2UL) {
  case 1UL: 
#line 2377
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2377
  goto ldv_52245;
  case 2UL: 
#line 2377
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2377
  goto ldv_52245;
  case 4UL: 
#line 2377
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2377
  goto ldv_52245;
  case 8UL: 
#line 2377
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2377
  goto ldv_52245;
  default: 
#line 2377
  __bad_unaligned_access_size();
#line 2377
  goto ldv_52245;
  }
  ldv_52245: 
#line 2378
  tmp___0 = tl;
#line 2378
  tl = tl + 1;
#line 2378
  __gu_p___0 = (void *)tmp___0;
#line 2378
  switch (2UL) {
  case 1UL: 
#line 2378
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2378
  goto ldv_52252;
  case 2UL: 
#line 2378
  put_unaligned_le16((int )len, __gu_p___0);
#line 2378
  goto ldv_52252;
  case 4UL: 
#line 2378
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2378
  goto ldv_52252;
  case 8UL: 
#line 2378
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2378
  goto ldv_52252;
  default: 
#line 2378
  __bad_unaligned_access_size();
#line 2378
  goto ldv_52252;
  }
  ldv_52252: 
#line 2379
  __len = (size_t )len;
#line 2379
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2380
  tl = tl + (unsigned long )len;
#line 2381
  if (nul_terminated != 0) {
#line 2382
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2383
  return (tl);
}
}
#line 2387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2389
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2389
  return (tmp);
}
}
#line 2393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2395
  tmp = strlen(str);
#line 2395
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2395
  return (tmp___0);
}
}
#line 2399 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2401
  tmp = tl;
#line 2401
  tl = tl + 1;
#line 2401
  __gu_p = (void *)tmp;
#line 2401
  switch (2UL) {
  case 1UL: 
#line 2401
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2401
  goto ldv_52278;
  case 2UL: 
#line 2401
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2401
  goto ldv_52278;
  case 4UL: 
#line 2401
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2401
  goto ldv_52278;
  case 8UL: 
#line 2401
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2401
  goto ldv_52278;
  default: 
#line 2401
  __bad_unaligned_access_size();
#line 2401
  goto ldv_52278;
  }
  ldv_52278: ;
#line 2402
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2404
  tmp___0 = tl;
#line 2404
  tl = tl + 1;
#line 2404
  __gu_p___0 = (void *)tmp___0;
#line 2404
  switch (2UL) {
  case 1UL: 
#line 2404
  *((u8 *)__gu_p___0) = 4U;
#line 2404
  goto ldv_52286;
  case 2UL: 
#line 2404
  put_unaligned_le16(4, __gu_p___0);
#line 2404
  goto ldv_52286;
  case 4UL: 
#line 2404
  put_unaligned_le32(4U, __gu_p___0);
#line 2404
  goto ldv_52286;
  case 8UL: 
#line 2404
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2404
  goto ldv_52286;
  default: 
#line 2404
  __bad_unaligned_access_size();
#line 2404
  goto ldv_52286;
  }
  ldv_52286: 
#line 2405
  __gu_p___1 = (void *)tl;
#line 2405
  switch (4UL) {
  case 1UL: 
#line 2405
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2405
  goto ldv_52293;
  case 2UL: 
#line 2405
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2405
  goto ldv_52293;
  case 4UL: 
#line 2405
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2405
  goto ldv_52293;
  case 8UL: 
#line 2405
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2405
  goto ldv_52293;
  default: 
#line 2405
  __bad_unaligned_access_size();
#line 2405
  goto ldv_52293;
  }
  ldv_52293: 
#line 2406
  tl = tl + 4U;
#line 2407
  goto ldv_52298;
  case 16384U: 
#line 2409
  tmp___1 = tl;
#line 2409
  tl = tl + 1;
#line 2409
  __gu_p___2 = (void *)tmp___1;
#line 2409
  switch (2UL) {
  case 1UL: 
#line 2409
  *((u8 *)__gu_p___2) = 8U;
#line 2409
  goto ldv_52302;
  case 2UL: 
#line 2409
  put_unaligned_le16(8, __gu_p___2);
#line 2409
  goto ldv_52302;
  case 4UL: 
#line 2409
  put_unaligned_le32(8U, __gu_p___2);
#line 2409
  goto ldv_52302;
  case 8UL: 
#line 2409
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2409
  goto ldv_52302;
  default: 
#line 2409
  __bad_unaligned_access_size();
#line 2409
  goto ldv_52302;
  }
  ldv_52302: 
#line 2410
  __gu_p___3 = (void *)tl;
#line 2410
  switch (8UL) {
  case 1UL: 
#line 2410
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2410
  goto ldv_52309;
  case 2UL: 
#line 2410
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2410
  goto ldv_52309;
  case 4UL: 
#line 2410
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2410
  goto ldv_52309;
  case 8UL: 
#line 2410
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2410
  goto ldv_52309;
  default: 
#line 2410
  __bad_unaligned_access_size();
#line 2410
  goto ldv_52309;
  }
  ldv_52309: 
#line 2411
  tl = tl + 8U;
#line 2412
  goto ldv_52298;
  default: ;
  }
  ldv_52298: ;
#line 2417
  return (tl);
}
}
#line 2420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2426
  cn_reply = (struct cn_msg *)(& buffer);
#line 2427
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2429
  tl = (unsigned short *)(& reply->tag_list);
#line 2433
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2435
  tmp = tl;
#line 2435
  tl = tl + 1;
#line 2435
  __gu_p = (void *)tmp;
#line 2435
  switch (2UL) {
  case 1UL: 
#line 2435
  *((u8 *)__gu_p) = 0U;
#line 2435
  goto ldv_52325;
  case 2UL: 
#line 2435
  put_unaligned_le16(0, __gu_p);
#line 2435
  goto ldv_52325;
  case 4UL: 
#line 2435
  put_unaligned_le32(0U, __gu_p);
#line 2435
  goto ldv_52325;
  case 8UL: 
#line 2435
  put_unaligned_le64(0ULL, __gu_p);
#line 2435
  goto ldv_52325;
  default: 
#line 2435
  __bad_unaligned_access_size();
#line 2435
  goto ldv_52325;
  }
  ldv_52325: 
#line 2437
  cn_reply->id.idx = 8U;
#line 2438
  cn_reply->id.val = 1U;
#line 2440
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2440
  cn_reply->seq = (__u32 )tmp___0;
#line 2441
  cn_reply->ack = 0U;
#line 2442
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2444
  cn_reply->flags = 0U;
#line 2446
  reply->packet_type = 17;
#line 2447
  reply->minor = mdev_to_minor(mdev);
#line 2448
  reply->ret_code = 101;
#line 2450
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2451
  return;
}
}
#line 2453 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2459
  cn_reply = (struct cn_msg *)(& buffer);
#line 2460
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2462
  tl = (unsigned short *)(& reply->tag_list);
#line 2466
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2467
  tmp = tl;
#line 2467
  tl = tl + 1;
#line 2467
  __gu_p = (void *)tmp;
#line 2467
  switch (2UL) {
  case 1UL: 
#line 2467
  *((u8 *)__gu_p) = 0U;
#line 2467
  goto ldv_52340;
  case 2UL: 
#line 2467
  put_unaligned_le16(0, __gu_p);
#line 2467
  goto ldv_52340;
  case 4UL: 
#line 2467
  put_unaligned_le32(0U, __gu_p);
#line 2467
  goto ldv_52340;
  case 8UL: 
#line 2467
  put_unaligned_le64(0ULL, __gu_p);
#line 2467
  goto ldv_52340;
  default: 
#line 2467
  __bad_unaligned_access_size();
#line 2467
  goto ldv_52340;
  }
  ldv_52340: 
#line 2469
  cn_reply->id.idx = 8U;
#line 2470
  cn_reply->id.val = 1U;
#line 2472
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2472
  cn_reply->seq = (__u32 )tmp___0;
#line 2473
  cn_reply->ack = 0U;
#line 2474
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2476
  cn_reply->flags = 0U;
#line 2478
  reply->packet_type = 20;
#line 2479
  reply->minor = mdev_to_minor(mdev);
#line 2480
  reply->ret_code = 101;
#line 2482
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2483
  return;
}
}
#line 2485 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1___0 ;
  unsigned int __min2___0 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2496
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2497
    return;
  } else {

  }
#line 2498
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2499
    return;
  } else {

  }
#line 2507
  tmp = kzalloc(33026UL, 16U);
#line 2507
  cn_reply = (struct cn_msg *)tmp;
#line 2514
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2517
    return;
  } else {

  }
#line 2520
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2521
  tl = (unsigned short *)(& reply->tag_list);
#line 2523
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2524
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2525
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2526
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2527
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_47617.block_id));
#line 2530
  __min1 = e->size;
#line 2530
  __min2 = 32768U;
#line 2530
  len = __min1 < __min2 ? __min1 : __min2;
#line 2531
  tmp___0 = tl;
#line 2531
  tl = tl + 1;
#line 2531
  __gu_p = (void *)tmp___0;
#line 2531
  switch (2UL) {
  case 1UL: 
#line 2531
  *((u8 *)__gu_p) = 50U;
#line 2531
  goto ldv_52363;
  case 2UL: 
#line 2531
  put_unaligned_le16(49202, __gu_p);
#line 2531
  goto ldv_52363;
  case 4UL: 
#line 2531
  put_unaligned_le32(49202U, __gu_p);
#line 2531
  goto ldv_52363;
  case 8UL: 
#line 2531
  put_unaligned_le64(49202ULL, __gu_p);
#line 2531
  goto ldv_52363;
  default: 
#line 2531
  __bad_unaligned_access_size();
#line 2531
  goto ldv_52363;
  }
  ldv_52363: 
#line 2532
  tmp___1 = tl;
#line 2532
  tl = tl + 1;
#line 2532
  __gu_p___0 = (void *)tmp___1;
#line 2532
  switch (2UL) {
  case 1UL: 
#line 2532
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2532
  goto ldv_52370;
  case 2UL: 
#line 2532
  put_unaligned_le16((int )((unsigned short )len), __gu_p___0);
#line 2532
  goto ldv_52370;
  case 4UL: 
#line 2532
  put_unaligned_le32(len, __gu_p___0);
#line 2532
  goto ldv_52370;
  case 8UL: 
#line 2532
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2532
  goto ldv_52370;
  default: 
#line 2532
  __bad_unaligned_access_size();
#line 2532
  goto ldv_52370;
  }
  ldv_52370: 
#line 2534
  page = e->pages;
#line 2535
  goto ldv_52386;
  ldv_52385: 
#line 2536
  tmp___2 = kmap_atomic(page);
#line 2536
  d = tmp___2;
#line 2537
  __min1___0 = len;
#line 2537
  __min2___0 = 4096U;
#line 2537
  l = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 2538
  __len = (size_t )l;
#line 2538
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2539
  __kunmap_atomic(d);
#line 2540
  tl = tl + (unsigned long )l;
#line 2541
  len = len - l;
#line 2542
  if (len == 0U) {
#line 2543
    goto ldv_52384;
  } else {

  }
#line 2535
  page = page_chain_next(page);
  ldv_52386: ;
#line 2535
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2535
    tmp___3 = page_chain_next(page);
#line 2535
    __builtin_prefetch((void const   *)tmp___3);
#line 2535
    if (1 != 0) {
#line 2536
      goto ldv_52385;
    } else {
#line 2538
      goto ldv_52384;
    }
  } else {

  }
  ldv_52384: 
#line 2545
  tmp___4 = tl;
#line 2545
  tl = tl + 1;
#line 2545
  __gu_p___1 = (void *)tmp___4;
#line 2545
  switch (2UL) {
  case 1UL: 
#line 2545
  *((u8 *)__gu_p___1) = 0U;
#line 2545
  goto ldv_52389;
  case 2UL: 
#line 2545
  put_unaligned_le16(0, __gu_p___1);
#line 2545
  goto ldv_52389;
  case 4UL: 
#line 2545
  put_unaligned_le32(0U, __gu_p___1);
#line 2545
  goto ldv_52389;
  case 8UL: 
#line 2545
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2545
  goto ldv_52389;
  default: 
#line 2545
  __bad_unaligned_access_size();
#line 2545
  goto ldv_52389;
  }
  ldv_52389: 
#line 2547
  cn_reply->id.idx = 8U;
#line 2548
  cn_reply->id.val = 1U;
#line 2550
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2550
  cn_reply->seq = (__u32 )tmp___5;
#line 2551
  cn_reply->ack = 0U;
#line 2552
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2554
  cn_reply->flags = 0U;
#line 2556
  reply->packet_type = 24;
#line 2557
  reply->minor = mdev_to_minor(mdev);
#line 2558
  reply->ret_code = 101;
#line 2560
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2561
  kfree((void const   *)cn_reply);
#line 2562
  return;
}
}
#line 2564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2570
  cn_reply = (struct cn_msg *)(& buffer);
#line 2571
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2573
  tl = (unsigned short *)(& reply->tag_list);
#line 2578
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2578
  if (tmp == 0) {
#line 2579
    return;
  } else {

  }
#line 2580
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2581
  put_ldev(mdev);
#line 2583
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2584
  tmp___0 = tl;
#line 2584
  tl = tl + 1;
#line 2584
  __gu_p = (void *)tmp___0;
#line 2584
  switch (2UL) {
  case 1UL: 
#line 2584
  *((u8 *)__gu_p) = 0U;
#line 2584
  goto ldv_52405;
  case 2UL: 
#line 2584
  put_unaligned_le16(0, __gu_p);
#line 2584
  goto ldv_52405;
  case 4UL: 
#line 2584
  put_unaligned_le32(0U, __gu_p);
#line 2584
  goto ldv_52405;
  case 8UL: 
#line 2584
  put_unaligned_le64(0ULL, __gu_p);
#line 2584
  goto ldv_52405;
  default: 
#line 2584
  __bad_unaligned_access_size();
#line 2584
  goto ldv_52405;
  }
  ldv_52405: 
#line 2586
  cn_reply->id.idx = 8U;
#line 2587
  cn_reply->id.val = 1U;
#line 2589
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2589
  cn_reply->seq = (__u32 )tmp___1;
#line 2590
  cn_reply->ack = 0U;
#line 2591
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2593
  cn_reply->flags = 0U;
#line 2595
  reply->packet_type = 23;
#line 2596
  reply->minor = mdev_to_minor(mdev);
#line 2597
  reply->ret_code = 101;
#line 2599
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2600
  return;
}
}
#line 2602 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2605
  try = 10;
#line 2607
  cn_id_drbd.val = 1U;
  ldv_52417: 
#line 2609
  cn_id_drbd.idx = cn_idx;
#line 2610
  err = cn_add_callback(& cn_id_drbd, "cn_drbd", & drbd_connector_callback);
#line 2611
  if (err == 0) {
#line 2612
    goto ldv_52416;
  } else {

  }
#line 2613
  cn_idx = cn_idx + 6977U;
#line 2614
  tmp = try;
#line 2614
  try = try - 1;
#line 2614
  if (tmp != 0) {
#line 2615
    goto ldv_52417;
  } else {

  }
  ldv_52416: ;
#line 2616
  if (err != 0) {
#line 2617
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2618
    return (err);
  } else {

  }
#line 2621
  return (0);
}
}
#line 2624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2628
  cn_id_drbd.idx = cn_idx;
#line 2629
  cn_id_drbd.val = 1U;
#line 2631
  cn_del_callback(& cn_id_drbd);
#line 2632
  return;
}
}
#line 2634 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2637
  cn_reply = (struct cn_msg *)(& buffer);
#line 2638
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2642
  memset((void *)(& buffer), 0, 32UL);
#line 2643
  cn_reply->id = req->id;
#line 2645
  cn_reply->seq = req->seq;
#line 2646
  cn_reply->ack = req->ack + 1U;
#line 2647
  cn_reply->len = 12U;
#line 2648
  cn_reply->flags = 0U;
#line 2650
  reply->packet_type = 27;
#line 2651
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2652
  reply->ret_code = ret_code;
#line 2654
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2655
  if (rr != 0 && rr != -3) {
#line 2656
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2657
  return;
}
}
#line 2667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_7(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2672
  ldv_module_put(ldv_func_arg1);
#line 2673
  return;
}
}
#line 2675 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_8(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2680
  ldv_module_put(ldv_func_arg1);
#line 2681
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
