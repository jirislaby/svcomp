/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 21 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 24 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 26 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 27 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 28 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 29 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 34 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 37 "include/linux/types.h"
typedef _Bool bool;
#line 39 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 40 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 53 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 62 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 67 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 77 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 110 "include/linux/types.h"
typedef __s32 int32_t;
#line 116 "include/linux/types.h"
typedef __u32 uint32_t;
#line 119 "include/linux/types.h"
typedef __u64 uint64_t;
#line 141 "include/linux/types.h"
typedef unsigned long sector_t;
#line 142 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 171 "include/linux/types.h"
typedef __u16 __le16;
#line 172 "include/linux/types.h"
typedef __u16 __be16;
#line 174 "include/linux/types.h"
typedef __u32 __be32;
#line 179 "include/linux/types.h"
typedef __u32 __wsum;
#line 195 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 196 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 208 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 208 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 213 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};
#line 213 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 214 "include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 219
struct hlist_node;
#line 219 "include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 223 "include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 234
struct task_struct;
#line 235
struct mm_struct;
#line 54 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 145 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 290 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1205_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1205_8 ldv_1205 ;
};
#line 22 "include/linux/bitops.h"
struct module;
#line 45 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 132 "include/linux/kernel.h"
struct completion;
#line 244
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2097_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2112_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2113_14 {
   struct __anonstruct_ldv_2097_15 ldv_2097 ;
   struct __anonstruct_ldv_2112_16 ldv_2112 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2113_14 ldv_2113 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_KDB = 19,
    KM_TYPE_NR = 20
} ;
#line 122
struct thread_struct;
#line 124
struct cpumask;
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct arch_spinlock;
#line 301 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 607 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 271 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/msr.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 150 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 282 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4700_20 {
   u64 rip ;
   u64 rdp ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4706_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4707_19 {
   struct __anonstruct_ldv_4700_20 ldv_4700 ;
   struct __anonstruct_ldv_4706_21 ldv_4706 ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4716_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4707_19 ldv_4707 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4716_22 ldv_4716 ;
};
#line 334 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 360 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 366 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 372 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 380 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct fpu {
   union thread_xstate *state ;
};
#line 426
struct kmem_cache;
#line 427
struct perf_event;
#line 428 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   struct fpu fpu ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5183_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5206_25 {
   struct __anonstruct_ldv_5183_26 ldv_5183 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5206_25 ldv_5206 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct arch_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct arch_spinlock arch_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_arch_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_arch_rwlock_t_30 arch_rwlock_t;
#line 17
struct lockdep_map;
#line 55 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 53 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 59 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 144 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 187 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 554 "include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 33 "include/linux/spinlock_types.h"
struct __anonstruct_ldv_5792_32 {
   u8 __padding[1U] ;
   struct lockdep_map dep_map ;
};
#line 33 "include/linux/spinlock_types.h"
union __anonunion_ldv_5793_31 {
   struct raw_spinlock rlock ;
   struct __anonstruct_ldv_5792_32 ldv_5792 ;
};
#line 33 "include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_ldv_5793_31 ldv_5793 ;
};
#line 77 "include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 23 "include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_33 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 23 "include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_33 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_34 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_34 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 282 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 96 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[16U] ;
};
#line 96 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 649 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 162
struct rw_semaphore;
#line 77 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
typedef long rwsem_count_t;
#line 78 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/rwsem.h"
struct rw_semaphore {
   rwsem_count_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 763 "include/linux/mmzone.h"
struct ctl_table;
#line 175 "include/linux/ioport.h"
struct device;
#line 311 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 96 "include/linux/debugobjects.h"
struct tvec_base;
#line 97 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   struct tvec_base *base ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   int slack ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 263 "include/linux/timer.h"
struct hrtimer;
#line 264
enum hrtimer_restart;
#line 276
struct work_struct;
#line 45 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 86 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 431 "include/linux/workqueue.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 46 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 52 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 53 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 272
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 282
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 289
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
} ;
#line 297
struct wakeup_source;
#line 298 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char async_suspend : 1 ;
   enum dpm_state status ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   unsigned char run_wake : 1 ;
   unsigned char runtime_auto : 1 ;
   unsigned char no_callbacks : 1 ;
   unsigned char use_autosuspend : 1 ;
   unsigned char timer_autosuspends : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_100 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_100 mm_context_t;
#line 17 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 314 "include/linux/topology.h"
struct vm_area_struct;
#line 35 "include/linux/kmod.h"
struct key;
#line 229 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 202 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 210 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 443
struct sock;
#line 444
struct kobject;
#line 445
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
} ;
#line 451 "include/linux/elf.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   void const   *(*current_ns)(void) ;
   void const   *(*netlink_ns)(struct sock * ) ;
   void const   *(*initial_ns)(void) ;
};
#line 55 "include/linux/kobject_ns.h"
struct attribute {
   char const   *name ;
   mode_t mode ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 98 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116
struct sysfs_dirent;
#line 185 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 49 "include/linux/kobject.h"
struct kset;
#line 49
struct kobj_type;
#line 49 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 107 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops  const  *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations  const  *(*child_ns_type)(struct kobject * ) ;
   void const   *(*namespace)(struct kobject * ) ;
};
#line 115 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 122 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const  filter)(struct kset * , struct kobject * ) ;
   char const   *(* const  name)(struct kset * , struct kobject * ) ;
   int (* const  uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 139 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops  const  *uevent_ops ;
};
#line 217
struct kernel_param;
#line 218 "include/linux/kobject.h"
struct kernel_param_ops {
   int (*set)(char const   * , struct kernel_param  const  * ) ;
   int (*get)(char * , struct kernel_param  const  * ) ;
   void (*free)(void * ) ;
};
#line 42 "include/linux/moduleparam.h"
struct kparam_string;
#line 42
struct kparam_array;
#line 42 "include/linux/moduleparam.h"
union __anonunion_ldv_10914_110 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 42 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   struct kernel_param_ops  const  *ops ;
   u16 perm ;
   u16 flags ;
   union __anonunion_ldv_10914_110 ldv_10914 ;
};
#line 57 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 63 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   struct kernel_param_ops  const  *ops ;
   unsigned int elemsize ;
   void *elem ;
};
#line 396 "include/linux/moduleparam.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 778 "include/linux/rcupdate.h"
struct tracepoint;
#line 779 "include/linux/rcupdate.h"
struct tracepoint_func {
   void *func ;
   void *data ;
};
#line 29 "include/linux/tracepoint.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 88 "include/linux/tracepoint.h"
struct mod_arch_specific {

};
#line 117 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 48 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 60
struct module_param_attrs;
#line 60 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 72
struct exception_table_entry;
#line 190
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 196 "include/linux/module.h"
struct module_ref {
   unsigned int incs ;
   unsigned int decs ;
};
#line 386
struct module_sect_attrs;
#line 386
struct module_notes_attrs;
#line 386
struct ftrace_event_call;
#line 386 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   unsigned int percpu_size ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head source_list ;
   struct list_head target_list ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   struct module_ref *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 74 "include/linux/connector.h"
struct hlist_nulls_node;
#line 74 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 54 "include/linux/uio.h"
struct cred;
#line 40 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 41 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 55 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 143 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 143 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 161 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 161 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 161 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 225 "include/linux/if.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};
#line 123 "include/linux/if_ether.h"
struct prio_tree_node;
#line 123 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 172
struct address_space;
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12257_123 {
   u16 inuse ;
   u16 objects ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12258_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12257_123 ldv_12257 ;
};
#line 173 "include/linux/rbtree.h"
struct __anonstruct_ldv_12263_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12266_124 {
   struct __anonstruct_ldv_12263_125 ldv_12263 ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 173 "include/linux/rbtree.h"
union __anonunion_ldv_12270_126 {
   unsigned long index ;
   void *freelist ;
};
#line 173 "include/linux/rbtree.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12258_122 ldv_12258 ;
   union __anonunion_ldv_12266_124 ldv_12266 ;
   union __anonunion_ldv_12270_126 ldv_12270 ;
   struct list_head lru ;
};
#line 122 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 122 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 122
struct anon_vma;
#line 122
struct vm_operations_struct;
#line 122
struct mempolicy;
#line 122 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 186 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 192 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 205 "include/linux/mm_types.h"
struct mm_rss_stat {
   unsigned long count[3U] ;
};
#line 220
struct linux_binfmt;
#line 220
struct mmu_notifier_mm;
#line 220 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   atomic_t oom_disable_count ;
};
#line 158 "include/linux/kmemcheck.h"
enum ldv_12744 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 52 "include/linux/net.h"
typedef enum ldv_12744 socket_state;
#line 175 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 176
struct pipe_inode_info;
#line 177
struct inode;
#line 178
struct net;
#line 195
struct fasync_struct;
#line 195 "include/asm-generic/fcntl.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct rcu_head rcu ;
};
#line 125 "include/linux/net.h"
struct proto_ops;
#line 125 "include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 151
struct kiocb;
#line 152 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 835 "include/linux/sysctl.h"
struct nsproxy;
#line 836
struct ctl_table_root;
#line 837 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 946
struct ctl_table_header;
#line 964 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 984 "include/linux/sysctl.h"
struct ctl_table {
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   void *extra1 ;
   void *extra2 ;
};
#line 1026 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1034 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 1068 "include/linux/sysctl.h"
struct ratelimit_state {
   spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 328 "include/trace/events/kmem.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int stat[18U] ;
};
#line 45 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 56 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 66 "include/linux/slub_def.h"
struct kmem_cache {
   struct kmem_cache_cpu *cpu_slab ;
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1024U] ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67
struct dma_map_ops;
#line 67 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct device_driver;
#line 19
struct driver_private;
#line 20
struct class;
#line 21
struct class_private;
#line 22
struct bus_type;
#line 23
struct bus_type_private;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 122 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   bool suppress_bind_attrs ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 158 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 188
struct class_attribute;
#line 188 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct kobj_ns_type_operations  const  *ns_type ;
   void const   *(*namespace)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 218
struct device_type;
#line 257 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , struct class_attribute * , char * ) ;
   ssize_t (*store)(struct class * , struct class_attribute * , char const   * , size_t  ) ;
};
#line 308 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 335 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 396 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 405
struct dma_coherent_mem;
#line 405 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 459 "include/linux/device.h"
struct wakeup_source {
   char *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long hit_count ;
   unsigned char active : 1 ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 30 "include/linux/range.h"
struct file_ra_state;
#line 31
struct user_struct;
#line 32
struct writeback_control;
#line 166 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 183 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 355 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/io.h"
struct bio_vec;
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 867
struct hrtimer_clock_base;
#line 868
struct hrtimer_cpu_base;
#line 877
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 882 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   int hang_detected ;
   unsigned long nr_events ;
   unsigned long nr_retries ;
   unsigned long nr_hangs ;
   ktime_t max_hang_time ;
};
#line 444
struct net_device;
#line 445 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 253 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 254
struct sec_path;
#line 254 "include/linux/skbuff.h"
struct __anonstruct_ldv_19337_147 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_19338_146 {
   __wsum csum ;
   struct __anonstruct_ldv_19337_147 ldv_19337 ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_19368_148 {
   __u32 mark ;
   __u32 dropcount ;
};
#line 254 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   ktime_t tstamp ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   struct sec_path *sp ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_19338_146 ldv_19338 ;
   __u32 priority ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int skb_iif ;
   __u16 tc_index ;
   __u16 tc_verd ;
   __u32 rxhash ;
   __u16 queue_mapping ;
   unsigned char ndisc_nodetype : 2 ;
   unsigned char deliver_no_wcard : 1 ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   union __anonunion_ldv_19368_148 ldv_19368 ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 439
struct dst_entry;
#line 474
struct rtable;
#line 112 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 93 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 96 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 561
struct dentry;
#line 39 "include/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};
#line 272 "include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 tx_rate ;
};
#line 352 "include/linux/if_link.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   raw_spinlock_t *rawlock ;
   spinlock_t *spinlock ;
};
#line 87 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 302
struct file_operations;
#line 60 "include/linux/miscdevice.h"
struct pm_qos_request_list {
   struct plist_node list ;
   int pm_qos_class ;
};
#line 432 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 52 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 78 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 93 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 101 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 110 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 206 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 228 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 276 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 288 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 309 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 342 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 358 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 378 "include/linux/ethtool.h"
union __anonunion_h_u_150 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 378 "include/linux/ethtool.h"
union __anonunion_m_u_151 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 378 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_150 h_u ;
   union __anonunion_m_u_151 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 403 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 451 "include/linux/ethtool.h"
struct ethtool_rxfh_indir {
   __u32 cmd ;
   __u32 size ;
   __u32 ring_index[0U] ;
};
#line 464 "include/linux/ethtool.h"
union __anonunion_h_u_152 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 464 "include/linux/ethtool.h"
union __anonunion_m_u_153 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[72U] ;
};
#line 464 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_152 h_u ;
   union __anonunion_m_u_153 m_u ;
   __u16 vlan_tag ;
   __u16 vlan_tag_mask ;
   __u64 data ;
   __u64 data_mask ;
   __s32 action ;
};
#line 501 "include/linux/ethtool.h"
struct ethtool_rx_ntuple {
   __u32 cmd ;
   struct ethtool_rx_ntuple_flow_spec fs ;
};
#line 517 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 534 "include/linux/ethtool.h"
struct ethtool_rx_ntuple_list {
   struct list_head list ;
   unsigned int count ;
};
#line 560 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
   int (*reset)(struct net_device * , u32 * ) ;
   int (*set_rx_ntuple)(struct net_device * , struct ethtool_rx_ntuple * ) ;
   int (*get_rx_ntuple)(struct net_device * , u32  , void * ) ;
   int (*get_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir * ) ;
   int (*set_rxfh_indir)(struct net_device * , struct ethtool_rxfh_indir  const  * ) ;
};
#line 694
struct prot_inuse;
#line 695 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct u64_stats_sync {

};
#line 138 "include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[31U] ;
   struct u64_stats_sync syncp ;
};
#line 61 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 69 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 74 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[5U] ;
};
#line 80 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 85 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 92 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 98 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[79U] ;
};
#line 104 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[27U] ;
};
#line 110
struct proc_dir_entry;
#line 110 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   spinlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 73 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 74
struct fib_rules_ops;
#line 75
struct xt_table;
#line 75 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   atomic_t rt_genid ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
};
#line 67 "include/net/netns/ipv4.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 173 "include/linux/percpu_counter.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 62 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
};
#line 68 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 334 "include/linux/in.h"
union __anonunion_in6_u_154 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 334 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_154 in6_u ;
};
#line 247 "include/linux/netfilter.h"
struct flowi;
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_156 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_157 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dn_u_158 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_nl_u_155 {
   struct __anonstruct_ip4_u_156 ip4_u ;
   struct __anonstruct_ip6_u_157 ip6_u ;
   struct __anonstruct_dn_u_158 dn_u ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_ports_160 {
   __be16 sport ;
   __be16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_icmpt_161 {
   __u8 type ;
   __u8 code ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_dnports_162 {
   __le16 sport ;
   __le16 dport ;
};
#line 308 "include/linux/netfilter.h"
struct __anonstruct_mht_163 {
   __u8 type ;
};
#line 308 "include/linux/netfilter.h"
union __anonunion_uli_u_159 {
   struct __anonstruct_ports_160 ports ;
   struct __anonstruct_icmpt_161 icmpt ;
   struct __anonstruct_dnports_162 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_163 mht ;
};
#line 308 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_155 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_159 uli_u ;
   __u32 secid ;
};
#line 327
struct bio;
#line 328
struct bio_integrity_payload;
#line 329
struct block_device;
#line 17 "include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 18 "include/linux/blk_types.h"
typedef void bio_destructor_t(struct bio * );
#line 19 "include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 28 "include/linux/blk_types.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 117 "include/linux/blk_types.h"
struct fstrim_range {
   uint64_t start ;
   uint64_t len ;
   uint64_t minlen ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_164 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_164 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 398 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 57 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 57 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 206
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 213
struct pid_namespace;
#line 213 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 164 "include/linux/pid.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 45 "include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 425 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 119 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 152 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 150 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 151 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 165
struct dquot;
#line 185 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 186 "include/linux/quota.h"
typedef long long qsize_t;
#line 189 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 211
struct quota_format_type;
#line 212 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 271 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 299 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 310 "include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   qsize_t *(*get_reserved_space)(struct inode * ) ;
};
#line 324 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
};
#line 337 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops  const  *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 383 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops  const  *ops[2U] ;
};
#line 575 "include/linux/fs.h"
union __anonunion_arg_166 {
   char *buf ;
   void *data ;
};
#line 575 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_165 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_166 arg ;
   int error ;
};
#line 575 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_165 read_descriptor_t;
#line 578 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 627
struct backing_dev_info;
#line 628 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 649
struct hd_struct;
#line 649
struct gendisk;
#line 649 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 719
struct posix_acl;
#line 720
struct inode_operations;
#line 720
struct file_lock;
#line 720
struct cdev;
#line 720 "include/linux/fs.h"
union __anonunion_ldv_23364_167 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 720 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned int i_blkbits ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_23364_167 ldv_23364 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   unsigned int i_readcount ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 893 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 901 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 924 "include/linux/fs.h"
union __anonunion_f_u_168 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 924 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_168 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   int f_sb_list_cpu ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1048
struct files_struct;
#line 1048 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1049 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1054 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_170 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_169 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_170 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_169 fl_u ;
};
#line 1156 "include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct rcu_head fa_rcu ;
};
#line 1348
struct file_system_type;
#line 1348
struct super_operations;
#line 1348
struct xattr_handler;
#line 1348
struct mtd_info;
#line 1348 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_dirt ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler  const  **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head *s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
};
#line 1468 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1506
struct block_device_operations;
#line 1507 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1546 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1589 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , struct writeback_control * ) ;
   int (*drop_inode)(struct inode * ) ;
   void (*evict_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
   int (*trim_fs)(struct super_block * , struct fstrim_range * ) ;
};
#line 1769 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   struct dentry *(*mount)(struct file_system_type * , int  , char const   * , void * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 361 "include/linux/netfilter.h"
struct ebt_table;
#line 362 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   unsigned int htable_size ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
   char *slabname ;
};
#line 470 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 16 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
};
#line 62
struct net_generic;
#line 63 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
};
#line 97 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct phy_device;
#line 57
struct wireless_dev;
#line 58
enum netdev_tx {
    __NETDEV_TX_MIN = (-0x7FFFFFFF-1),
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
} ;
#line 117 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 136 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 208
struct neighbour;
#line 209
struct neigh_parms;
#line 236 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 241 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 289 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 390 "include/linux/netdevice.h"
typedef struct sk_buff *rx_handler_func_t(struct sk_buff * );
#line 497
struct Qdisc;
#line 497 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   u64 tx_bytes ;
   u64 tx_packets ;
   u64 tx_dropped ;
};
#line 519 "include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct rcu_head rcu ;
   u16 cpus[0U] ;
};
#line 530 "include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 fill ;
   unsigned int last_qtail ;
};
#line 541 "include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct rcu_head rcu ;
   struct work_struct free_work ;
   struct rps_dev_flow flows[0U] ;
};
#line 589 "include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct netdev_rx_queue *first ;
   atomic_t count ;
};
#line 598 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device * , struct rtnl_link_stats64 * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_netpoll_setup)(struct net_device * , struct netpoll_info * ) ;
   void (*ndo_netpoll_cleanup)(struct net_device * ) ;
   int (*ndo_set_vf_mac)(struct net_device * , int  , u8 * ) ;
   int (*ndo_set_vf_vlan)(struct net_device * , int  , u16  , u8  ) ;
   int (*ndo_set_vf_tx_rate)(struct net_device * , int  , int  ) ;
   int (*ndo_get_vf_config)(struct net_device * , int  , struct ifla_vf_info * ) ;
   int (*ndo_set_vf_port)(struct net_device * , int  , struct nlattr ** ) ;
   int (*ndo_get_vf_port)(struct net_device * , int  , struct sk_buff * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
   int (*ndo_fcoe_get_wwn)(struct net_device * , u64 * , int  ) ;
};
#line 795
struct iw_handler_def;
#line 795
struct iw_public_data;
#line 795
struct in_device;
#line 795
struct inet6_dev;
#line 795
struct pcpu_lstats;
#line 795
struct pcpu_tstats;
#line 795
struct pcpu_dstats;
#line 795 "include/linux/netdevice.h"
union __anonunion_ldv_26703_172 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_tstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 795
struct garp_port;
#line 795
struct rtnl_link_ops;
#line 795 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct pm_qos_request_list pm_qos_req ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned int priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   spinlock_t addr_list_lock ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   int uc_promisc ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_group *vlgrp ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   void *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   struct net_device *master ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct kset *queues_kset ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct netdev_queue *ingress_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct list_head link_watch_list ;
   unsigned short reg_state ;
   unsigned short rtnl_link_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   union __anonunion_ldv_26703_172 ldv_26703 ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[4U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops  const  *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
   struct ethtool_rx_ntuple_list ethtool_ntuple_list ;
   struct phy_device *phydev ;
};
#line 1261
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 198 "include/linux/irq.h"
struct timer_rand_state;
#line 199
struct irqaction;
#line 100 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 118 "include/linux/sem.h"
struct sem_undo_list;
#line 131 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 140 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 149
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_179 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_179 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_181 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_182 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_183 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_184 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_185 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_186 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_180 {
   int _pad[28U] ;
   struct __anonstruct__kill_181 _kill ;
   struct __anonstruct__timer_182 _timer ;
   struct __anonstruct__rt_183 _rt ;
   struct __anonstruct__sigchld_184 _sigchld ;
   struct __anonstruct__sigfault_185 _sigfault ;
   struct __anonstruct__sigpoll_186 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_180 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 22 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_189 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_189 seccomp_t;
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 40 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 84 "include/linux/resource.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_29685_190 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_191 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_192 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_29685_190 ldv_29685 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_191 type_data ;
   union __anonunion_payload_192 payload ;
};
#line 292
struct audit_context;
#line 27 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct bio_list;
#line 266
struct fs_struct;
#line 267
struct perf_event_context;
#line 149 "include/linux/sched.h"
struct cfs_rq;
#line 360
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_193 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_193 ki_obj ;
   __u64 ki_user_data ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 161 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 177 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 401 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 443 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 451 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 458 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 475 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 511
struct tty_struct;
#line 511
struct taskstats;
#line 511
struct tty_audit_buf;
#line 511 "include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
   int oom_score_adj ;
   struct mutex cred_guard_mutex ;
};
#line 662 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   atomic_long_t locked_vm ;
};
#line 707
struct reclaim_state;
#line 708 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 726 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 1001
struct io_context;
#line 1024
struct rq;
#line 1025 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct rq * , struct task_struct * , int  , int  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_waking)(struct rq * , struct task_struct * ) ;
   void (*task_woken)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_fork)(struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct rq * , struct task_struct * ) ;
   void (*task_move_group)(struct task_struct * , int  ) ;
};
#line 1088 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1093 "include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 1128 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1154
struct rt_rq;
#line 1154 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1178
struct mem_cgroup;
#line 1178 "include/linux/sched.h"
struct memcg_batch_info {
   int do_batch ;
   struct mem_cgroup *memcg ;
   unsigned long bytes ;
   unsigned long memsw_bytes ;
};
#line 1513
struct css_set;
#line 1513
struct compat_robust_list_head;
#line 1513
struct ftrace_ret_stack;
#line 1513 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   raw_spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int mems_allowed_change_disable ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_batch_info memcg_batch ;
};
#line 332 "include/linux/fsnotify.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char const   *filename ;
   char const   *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct coredump_params {
   long signr ;
   struct pt_regs *regs ;
   struct file *file ;
   unsigned long limit ;
   unsigned long mm_flags ;
};
#line 79 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(struct coredump_params * ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 82 "include/linux/security.h"
struct xfrm_policy;
#line 83
struct xfrm_state;
#line 104
struct request_sock;
#line 3025 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 85 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 101 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 34 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 815 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net * , struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * , struct list_head * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 92
struct neigh_table;
#line 92 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 71 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 90
struct neigh_ops;
#line 90 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   rwlock_t lock ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   int (*output)(struct sk_buff * ) ;
   struct neigh_ops  const  *ops ;
   struct rcu_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};
#line 118 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 128 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 138 "include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct rcu_head rcu ;
};
#line 149 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * , __u32  ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 394
struct dn_route;
#line 394 "include/net/neighbour.h"
union __anonunion_ldv_34655_198 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 394 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[14U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[1U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_34655_198 ldv_34655 ;
};
#line 100 "include/net/sock.h"
struct __anonstruct_socket_lock_t_199 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 100 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_199 socket_lock_t;
#line 100
struct proto;
#line 101 "include/net/sock.h"
union __anonunion_ldv_34801_200 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34807_201 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 101 "include/net/sock.h"
union __anonunion_ldv_34815_202 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};
#line 101 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_34801_200 ldv_34801 ;
   atomic_t skc_refcnt ;
   int skc_tx_queue_mapping ;
   union __anonunion_ldv_34807_201 ldv_34807 ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   union __anonunion_ldv_34815_202 ldv_34815 ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 153 "include/net/sock.h"
struct __anonstruct_sk_backlog_203 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   int len ;
};
#line 153 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_203 sk_backlog ;
   struct socket_wq *sk_wq ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   __u32 sk_rxhash ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct pid *sk_peer_pid ;
   struct cred  const  *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 697
struct request_sock_ops;
#line 698
struct timewait_sock_ops;
#line 699
struct inet_hashinfo;
#line 700
struct raw_hashinfo;
#line 701
struct udp_table;
#line 701 "include/net/sock.h"
union __anonunion_h_204 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 701 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   void (*rehash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_204 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 178 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 191 "include/linux/drbd.h"
struct __anonstruct_ldv_35955_205 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned char susp_nod : 1 ;
   unsigned char susp_fen : 1 ;
   unsigned short _pad : 9 ;
};
#line 191 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_35955_205 ldv_35955 ;
   unsigned int i ;
};
#line 110 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 111
struct crypto_async_request;
#line 112
struct crypto_aead;
#line 113
struct crypto_blkcipher;
#line 114
struct crypto_hash;
#line 115
struct crypto_rng;
#line 116
struct crypto_tfm;
#line 117
struct crypto_type;
#line 118
struct aead_givcrypt_request;
#line 119
struct skcipher_givcrypt_request;
#line 119 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 128 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 141 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 167 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 181 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 186 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 205 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 220 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 237 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 246 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 252 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 261 "include/linux/crypto.h"
union __anonunion_cra_u_206 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 261 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_206 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 313 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 333 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 348 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 357 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 365 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 377 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 384 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 392 "include/linux/crypto.h"
union __anonunion_crt_u_207 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 392 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_207 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 421 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 425 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 429 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 441 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 445 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_values {

};
#line 145 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * , struct request_values * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
   void (*syn_ack_timeout)(struct sock * , struct request_sock * ) ;
};
#line 50 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 81 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 90 "include/linux/genhd.h"
struct partition_meta_info {
   u8 uuid[16U] ;
   u8 volname[64U] ;
};
#line 98 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 138 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 145
struct request_queue;
#line 145
struct blk_integrity;
#line 145 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 13 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 18 "include/linux/writeback.h"
struct writeback_control {
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   unsigned long wb_start ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_background : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
};
#line 54
struct bdi_writeback;
#line 38 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 45 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   unsigned long last_active ;
   struct task_struct *task ;
   struct timer_list wakeup_timer ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 61 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head work_list ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 29 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned short cgroup_changed ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 94 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 378 "include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_ATA_TASKFILE = 8,
    REQ_TYPE_ATA_PC = 9
} ;
#line 63 "include/linux/blkdev.h"
union __anonunion_ldv_39599_215 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 63 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_39599_215 ldv_39599 ;
   void *elevator_private ;
   void *elevator_private2 ;
   void *elevator_private3 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   int ref_count ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue * , struct request * , struct bio * );
#line 20 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 22 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 24 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 25 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 26 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 28 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 29 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 30 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 31 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 33 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 34 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 35 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 64 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 72 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 84 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
   unsigned char registered : 1 ;
};
#line 188 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 189 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 190 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 191 "include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue * , struct request * );
#line 192 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 193 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 201 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 203 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 204 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 205 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 206
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 213 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 219 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 228 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char no_cluster ;
   signed char discard_zeroes_data ;
};
#line 256 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned int flush_seq ;
   int flush_err ;
   struct request flush_rq ;
   struct request *orig_flush_rq ;
   struct list_head pending_flushes ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1150 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1169 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1170 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1171 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1172 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1173 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1231 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   void (*unlock_native_capacity)(struct gendisk * ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   void (*swap_slot_free_notify)(struct block_device * , unsigned long  ) ;
   struct module *owner ;
};
#line 130 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   void *sysctl ;
};
#line 494 "include/linux/ipv6.h"
struct __anonstruct_ldv_41087_222 {
   atomic_t rid ;
   atomic_t ip_id_count ;
   __u32 tcp_ts ;
   __u32 tcp_ts_stamp ;
};
#line 494 "include/linux/ipv6.h"
union __anonunion_ldv_41089_221 {
   struct __anonstruct_ldv_41087_222 ldv_41087 ;
   struct rcu_head rcu ;
};
#line 494 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u32 avl_height ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   union __anonunion_ldv_41089_221 ldv_41089 ;
};
#line 49 "include/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 227 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1537 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header80 {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header95 {
   u16 magic ;
   u16 command ;
   u32 length ;
   u8 payload[0U] ;
};
#line 354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_header {
   struct p_header80 h80 ;
   struct p_header95 h95 ;
};
#line 359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   union p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 392 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 408 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header80 head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 417 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header80 head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 440 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header80 head ;
   u32 barrier ;
   u32 pad ;
};
#line 447 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header80 head ;
   u32 barrier ;
   u32 set_size ;
};
#line 461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_95 {
   struct p_header80 head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
   u32 c_plan_ahead ;
   u32 c_delay_target ;
   u32 c_fill_target ;
   u32 c_max_rate ;
};
#line 485 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header80 head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 conn_flags ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 498 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header80 head ;
   u64 uuid[6U] ;
};
#line 504 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header80 head ;
   u64 uuid ;
};
#line 509 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header80 head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u16 queue_order_type ;
   u16 dds_flags ;
};
#line 519 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header80 head ;
   u32 state ;
};
#line 524 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header80 head ;
   u32 mask ;
   u32 val ;
};
#line 530 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header80 head ;
   u32 retcode ;
};
#line 573 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_delay_probe93 {
   struct p_header80 head ;
   u32 seq_num ;
   u32 offset ;
};
#line 618 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   union p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_rs_param_95 rs_param_95 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
   struct p_delay_probe93 delay_probe93 ;
   struct p_rs_uuid rs_uuid ;
};
#line 651
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 658 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 679
struct drbd_work;
#line 689 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 693
struct drbd_tl_epoch;
#line 724 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_writes ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 766 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union __anonunion_ldv_43398_225 {
   u64 block_id ;
   struct digest_info *digest ;
};
#line 771 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct hlist_node colision ;
   struct drbd_epoch *epoch ;
   struct drbd_conf *mdev ;
   struct page *pages ;
   atomic_t pending_bios ;
   unsigned int size ;
   unsigned long flags ;
   sector_t sector ;
   union __anonunion_ldv_43398_225 ldv_43398 ;
};
#line 828
struct drbd_bitmap;
#line 829 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 874 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 884 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
   unsigned char dry_run : 1 ;
};
#line 73 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
   int on_no_data ;
   int c_plan_ahead ;
   int c_delay_target ;
   int c_fill_target ;
   int c_max_rate ;
   int c_min_rate ;
};
#line 144 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 926 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 933
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2
} ;
#line 939 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct fifo_buffer {
   int *values ;
   unsigned int head_index ;
   unsigned int size ;
};
#line 945 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work go_diskless ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   wait_queue_head_t net_cnt_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_same_csum ;
   unsigned long rs_mark_left[8U] ;
   unsigned long rs_mark_time[8U] ;
   int rs_last_mark ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   atomic_t pp_in_use_by_net ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
   atomic_t rs_sect_in ;
   atomic_t rs_sect_ev ;
   int rs_last_sect_ev ;
   int rs_last_events ;
   int c_sync_rate ;
   struct fifo_buffer rs_plan_s ;
   int rs_in_flight ;
   int rs_planed ;
};
#line 1147
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2414 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct mutex bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 145 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 152
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1272 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 54 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 55 "include/linux/prio_heap.h"
struct cgroupfs_root;
#line 57
struct cgroup;
#line 58
struct css_id;
#line 56 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 194 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
};
#line 247 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[64U] ;
   struct rcu_head rcu_head ;
};
#line 166 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_DELAY_PROBE = 39,
    P_MAX_CMD = 40,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 694 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 760 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 920 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 1191
enum drbd_req_event;
#line 1191
enum drbd_req_event;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    read_retry_remote_canceled = 9,
    recv_acked_by_peer = 10,
    write_acked_by_peer = 11,
    write_acked_by_peer_and_sis = 12,
    conflict_discarded_by_peer = 13,
    neg_acked = 14,
    barrier_acked = 15,
    data_received = 16,
    read_completed_with_error = 17,
    read_ahead_completed_with_error = 18,
    write_completed_with_error = 19,
    completed_ok = 20,
    resend = 21,
    fail_frozen_disk_io = 22,
    restart_frozen_disk_io = 23,
    nothing = 24
} ;
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 181 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 54 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 261
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 285 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 552
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 556 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header80 head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 753
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BECAME_LAST = 2,
    EV_CLEANUP = 32
} ;
#line 1155
enum dds_flags {
    DDSF_FORCED = 1,
    DDSF_NO_RESYNC = 2
} ;
#line 1191
enum drbd_req_event;
#line 1191
enum drbd_req_event;
#line 1483
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct data_cmd {
   int expect_payload ;
   size_t pkt_size ;
   int (*function)(struct drbd_conf * , enum drbd_packets  , unsigned int  ) ;
};
#line 4216 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header80 * ) ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 190 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 1191 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1191
enum drbd_req_event;
#line 12 "include/linux/dynamic_debug.h"
struct _ddebug {
   char const   *modname ;
   char const   *function ;
   char const   *filename ;
   char const   *format ;
   unsigned int lineno : 24 ;
   unsigned char flags ;
   char enabled ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_226 {
   u32 pos ;
   u32 extent ;
};
#line 71 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_226 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 170 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 189 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 294
enum drbd_uuid_index {
    UI_CURRENT = 0,
    UI_BITMAP = 1,
    UI_HISTORY_START = 2,
    UI_HISTORY_END = 3,
    UI_SIZE = 4,
    UI_FLAGS = 5,
    UI_EXTENDED_SIZE = 6
} ;
#line 1191 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1191
enum drbd_req_event;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 2086 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30994 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3428 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3918 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 173 "include/linux/types.h"
typedef __u32 __le32;
#line 175 "include/linux/types.h"
typedef __u64 __le64;
#line 264 "include/linux/timer.h"
enum hrtimer_restart;
#line 36 "include/linux/kmod.h"
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 42 "include/linux/kmod.h"
struct subprocess_info {
   struct work_struct work ;
   struct completion *complete ;
   char *path ;
   char **argv ;
   char **envp ;
   enum umh_wait wait ;
   int retval ;
   int (*init)(struct subprocess_info * ) ;
   void (*cleanup)(struct subprocess_info * ) ;
   void *data ;
};
#line 39 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 63 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 144 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 158 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 93 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    ERR_NEED_APV_93 = 153,
    ERR_STONITH_AND_PROT_A = 154,
    AFTER_LAST_ERR_CODE = 155
} ;
#line 310 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 348 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 897 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char primary_force : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
   unsigned char resize_force : 1 ;
   unsigned char no_resync : 1 ;
};
#line 103 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 131 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 140 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 1191 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_req_event;
#line 1191
enum drbd_req_event;
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_primary_force = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_dry_run = 41030,
    T_resize_size = 16413,
    T_resize_force = 32836,
    T_no_resync = 41029,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_on_no_data = 75,
    T_c_plan_ahead = 76,
    T_c_delay_target = 77,
    T_c_fill_target = 78,
    T_c_max_rate = 79,
    T_c_min_rate = 80,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 107 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 2162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )((unsigned long )*(addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 10 "include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 19
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w ) 
{ 
  unsigned long res ;

  {
#line 47
  res = 0UL;
#line 53
  __asm__  ("661:\n\tcall __sw_hweight64\n662:\n.section .altinstructions,\"a\"\n .balign 8 \n .quad 661b\n .quad 663f\n\t .word (4*32+23)\n\t .byte 662b-661b\n\t .byte 664f-663f\n.previous\n.section .discard,\"aw\",@progbits\n\t .byte 0xff + (664f-663f) - (662b-661b)\n.previous\n.section .altinstr_replacement, \"ax\"\n663:\n\t.byte 0xf3,0x48,0x0f,0xb8,0xc7\n664:\n.previous": "=a" (res): "D" (w));
#line 58
  return (res);
}
}
#line 47 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 49
  tmp = __arch_hweight64((__u64 )w);
#line 49
  return (tmp);
}
}
#line 69 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 150 "include/linux/kernel.h"
extern void __might_sleep(char const   * , int  , int  ) ;
#line 282
extern int printk(char const   *  , ...) ;
#line 86 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *pfo_ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1962;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1962;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1962;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& current_task));
#line 14
  goto ldv_1962;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1962: ;
#line 14
  return (pfo_ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4370: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4370;
  } else {

  }

#line 19
  return (order);
}
}
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 25
  return ((int )*((int volatile   *)(& v->counter)));
}
}
#line 35 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 37
  v->counter = i;
#line 38
  return;
}
}
#line 93 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 95
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; incl %0": "+m" (v->counter));
#line 97
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0; sete %1": "+m" (v->counter),
                       "=qm" (c): : "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 182
  __i = i;
#line 183
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 186
  return (i + __i);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 207
  tmp = atomic_add_return(- i, v);
#line 207
  return (tmp);
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long kernel_stack ;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long pfo_ret__ ;

  {
#line 216
  switch (8UL) {
  case 1UL: 
#line 216
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5511;
  case 2UL: 
#line 216
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5511;
  case 4UL: 
#line 216
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5511;
  case 8UL: 
#line 216
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "p" (& kernel_stack));
#line 216
  goto ldv_5511;
  default: 
#line 216
  __bad_percpu_size();
  }
  ldv_5511: 
#line 216
  ti = (struct thread_info *)(pfo_ret__ - 8152UL);
#line 218
  return (ti);
}
}
#line 553 "include/linux/lockdep.h"
extern void lockdep_rcu_dereference(char const   * , int const    ) ;
#line 93 "include/linux/spinlock.h"
extern void __raw_spin_lock_init(raw_spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 29 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock_irq(raw_spinlock_t * ) ;
#line 32
extern unsigned long _raw_spin_lock_irqsave(raw_spinlock_t * ) ;
#line 41
extern void _raw_spin_unlock_irq(raw_spinlock_t * ) ;
#line 43
extern void _raw_spin_unlock_irqrestore(raw_spinlock_t * , unsigned long  ) ;
#line 18 "include/linux/rwlock_api_smp.h"
extern void _raw_read_lock(rwlock_t * ) ;
#line 30
extern void _raw_read_unlock(rwlock_t * ) ;
#line 272 "include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock ) 
{ 


  {
#line 274
  return (& lock->ldv_5793.rlock);
}
}
#line 308 "include/linux/spinlock.h"
__inline static void spin_lock_irq(spinlock_t *lock ) 
{ 


  {
#line 310
  _raw_spin_lock_irq(& lock->ldv_5793.rlock);
#line 311
  return;
}
}
#line 333 "include/linux/spinlock.h"
__inline static void spin_unlock_irq(spinlock_t *lock ) 
{ 


  {
#line 335
  _raw_spin_unlock_irq(& lock->ldv_5793.rlock);
#line 336
  return;
}
}
#line 338 "include/linux/spinlock.h"
__inline static void spin_unlock_irqrestore(spinlock_t *lock , unsigned long flags ) 
{ 


  {
#line 340
  _raw_spin_unlock_irqrestore(& lock->ldv_5793.rlock, flags);
#line 341
  return;
}
}
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 156
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 584
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 586
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 589
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 115 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 134
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 159
extern int mutex_trylock(struct mutex * ) ;
#line 160
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 321 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 324 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 326
  tmp = alloc_pages_current(gfp_mask, order);
#line 326
  return (tmp);
}
}
#line 337
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 349
extern void __free_pages(struct page * , unsigned int  ) ;
#line 189 "include/linux/rcupdate.h"
extern int debug_lockdep_rcu_enabled(void) ;
#line 243 "include/linux/rcupdate.h"
__inline static int rcu_read_lock_sched_held(void) 
{ 


  {
#line 245
  return (1);
}
}
#line 635 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 639
  return;
}
}
#line 55 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 66
extern void vfree(void const   * ) ;
#line 41 "include/linux/ratelimit.h"
extern int ___ratelimit(struct ratelimit_state * , char const   * ) ;
#line 144 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 62 "include/linux/kmemleak.h"
__inline static void kmemleak_alloc(void const   *ptr , size_t size , int min_count ,
                                    gfp_t gfp ) 
{ 


  {
#line 64
  return;
}
}
#line 51 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13741: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13741;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 148 "include/linux/slub_def.h"
extern struct kmem_cache *kmalloc_caches[14U] ;
#line 154 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 156
  if (size == 0UL) {
#line 157
    return (0);
  } else {

  }
#line 159
  if (size <= 8UL) {
#line 160
    return (3);
  } else {

  }
#line 162
  if (size > 64UL && size <= 96UL) {
#line 163
    return (1);
  } else {

  }
#line 164
  if (size > 128UL && size <= 192UL) {
#line 165
    return (2);
  } else {

  }
#line 166
  if (size <= 8UL) {
#line 166
    return (3);
  } else {

  }
#line 167
  if (size <= 16UL) {
#line 167
    return (4);
  } else {

  }
#line 168
  if (size <= 32UL) {
#line 168
    return (5);
  } else {

  }
#line 169
  if (size <= 64UL) {
#line 169
    return (6);
  } else {

  }
#line 170
  if (size <= 128UL) {
#line 170
    return (7);
  } else {

  }
#line 171
  if (size <= 256UL) {
#line 171
    return (8);
  } else {

  }
#line 172
  if (size <= 512UL) {
#line 172
    return (9);
  } else {

  }
#line 173
  if (size <= 1024UL) {
#line 173
    return (10);
  } else {

  }
#line 174
  if (size <= 2048UL) {
#line 174
    return (11);
  } else {

  }
#line 175
  if (size <= 4096UL) {
#line 175
    return (12);
  } else {

  }
#line 180
  if (size <= 8192UL) {
#line 180
    return (13);
  } else {

  }
#line 181
  if (size <= 16384UL) {
#line 181
    return (14);
  } else {

  }
#line 182
  if (size <= 32768UL) {
#line 182
    return (15);
  } else {

  }
#line 183
  if (size <= 65536UL) {
#line 183
    return (16);
  } else {

  }
#line 184
  if (size <= 131072UL) {
#line 184
    return (17);
  } else {

  }
#line 185
  if (size <= 262144UL) {
#line 185
    return (18);
  } else {

  }
#line 186
  if (size <= 524288UL) {
#line 186
    return (19);
  } else {

  }
#line 187
  if (size <= 1048576UL) {
#line 187
    return (20);
  } else {

  }
#line 188
  if (size <= 2097152UL) {
#line 188
    return (21);
  } else {

  }
#line 189
  return (-1);
}
}
#line 206 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 208
  tmp = kmalloc_index(size);
#line 208
  index = tmp;
#line 210
  if (index == 0) {
#line 211
    return (0);
  } else {

  }
#line 213
  return (kmalloc_caches[index]);
}
}
#line 217
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 220
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 229 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 231
  tmp = get_order(size);
#line 231
  order = (unsigned int )tmp;
#line 232
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 232
  ret = (void *)tmp___0;
#line 234
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 235
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 237
  return (ret);
}
}
#line 240 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 244
  if (0) {
#line 245
    if (size > 8192UL) {
#line 246
      tmp = kmalloc_large(size, flags);
#line 246
      return (tmp);
    } else {

    }
#line 248
    if ((flags & 1U) == 0U) {
#line 249
      tmp___0 = kmalloc_slab(size);
#line 249
      s = tmp___0;
#line 251
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 252
        return (16);
      } else {

      }
#line 254
      ret = kmem_cache_alloc_notrace(s, flags);
#line 256
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 258
      return (ret);
    } else {

    }
  } else {

  }
#line 261
  tmp___1 = __kmalloc(size, flags);
#line 261
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 651 "include/linux/device.h"
extern int dev_alert(struct device  const  * , char const   *  , ...) ;
#line 655
extern int dev_err(struct device  const  * , char const   *  , ...) ;
#line 657
extern int dev_warn(struct device  const  * , char const   *  , ...) ;
#line 661
extern int _dev_info(struct device  const  * , char const   *  , ...) ;
#line 602 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 604
  return ((void *)((unsigned long )((unsigned long long )(((long )page + 24189255811072L) / 56L) << 12) + 0xffff880000000000UL));
}
}
#line 2245 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 358 "include/linux/sched.h"
extern void schedule(void) ;
#line 2385
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 57 "include/linux/highmem.h"
__inline static void *__kmap_atomic(struct page *page ) 
{ 
  void *tmp ;

  {
#line 59
  pagefault_disable();
#line 60
  tmp = lowmem_page_address(page);
#line 60
  return (tmp);
}
}
#line 64 "include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr ) 
{ 


  {
#line 66
  pagefault_enable();
#line 67
  return;
}
}
#line 218 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 221
extern void bio_put(struct bio * ) ;
#line 224
extern void bio_endio(struct bio * , int  ) ;
#line 233
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 716 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 718
  return ((bdev->bd_disk)->queue);
}
}
#line 882
extern int blkdev_issue_flush(struct block_device * , gfp_t  , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 142
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 144 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 145
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 145
    tmp = _drbd_insert_fault(mdev, type);
#line 145
    if (tmp != 0U) {
#line 145
      tmp___0 = 1;
    } else {
#line 145
      tmp___0 = 0;
    }
  } else {
#line 145
    tmp___0 = 0;
  }
#line 145
  return (tmp___0);
}
}
#line 165
struct ratelimit_state drbd_ratelimit_state ;
#line 1174
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1270
void drbd_go_diskless(struct drbd_conf *mdev ) ;
#line 1271
void drbd_ldev_destroy(struct drbd_conf *mdev ) ;
#line 1410
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1411
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) ;
#line 1412
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1413
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1414
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1415
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1417
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1420
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1422
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1423
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1424
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1425
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1426
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1427
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1429
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1430
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1431
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1432
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1434
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1435
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1436
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1437
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1440
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1443
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1446
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1447
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1449
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1464
rwlock_t global_state_lock ;
#line 1481
char *ppsize(char *buf , unsigned long long size ) ;
#line 1501
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1752 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1758
  _raw_read_lock(& global_state_lock);
#line 1759
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1760
  _raw_read_unlock(& global_state_lock);
#line 1762
  return (rv);
}
}
#line 1783 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1785
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1787
  if (forcedetach == 0) {
#line 1788
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1788
    if (tmp != 0) {
#line 1789
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1790
    goto ldv_44381;
  } else {

  }
  case 2: ;
  case 1: 
#line 1795
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1796
  if ((int )mdev->state.ldv_35955.disk > 2) {
#line 1797
    __ns.i = mdev->state.i;
#line 1797
    __ns.ldv_35955.disk = 2U;
#line 1797
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1801
  goto ldv_44381;
  }
  ldv_44381: ;
#line 1804
  return;
}
}
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1817
  if (error != 0) {
#line 1819
    tmp = spinlock_check(& mdev->req_lock);
#line 1819
    flags = _raw_spin_lock_irqsave(tmp);
#line 1820
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1821
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1823
  return;
}
}
#line 1849 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1851
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1854
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1857
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 2112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;

  {
#line 2114
  tmp = atomic_sub_return(1, & mdev->local_cnt);
#line 2114
  i = tmp;
#line 2116
  if (i < 0) {
#line 2116
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( i >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2116);
  } else {

  }
#line 2117
  if (i == 0) {
#line 2118
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 2120
      drbd_ldev_destroy(mdev);
    } else {

    }
#line 2121
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 2123
      drbd_go_diskless(mdev);
    } else {

    }
#line 2124
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2126
  return;
}
}
#line 2129 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 2134
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 2135
    return (0);
  } else {

  }
#line 2137
  atomic_inc(& mdev->local_cnt);
#line 2138
  io_allowed = (unsigned int )mdev->state.ldv_35955.disk >= (unsigned int )mins;
#line 2139
  if (io_allowed == 0) {
#line 2140
    put_ldev(mdev);
  } else {

  }
#line 2141
  return (io_allowed);
}
}
#line 2387 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2389
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2390
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2391
  return;
}
}
#line 2401 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;

  {
#line 2405
  tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 2405
  if (tmp != 0) {
#line 2406
    return;
  } else {

  }
#line 2408
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 208U, 0);
#line 2409
  if (r != 0) {
#line 2410
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2411
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data flush failed with status %d, disabling md-flushes\n",
            r);
  } else {

  }
#line 2413
  return;
}
}
#line 94 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) ;
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 99
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 99
  return (tmp);
}
}
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;

  {
#line 105
  b = mdev->bitmap;
#line 106
  tmp = ___ratelimit(& drbd_ratelimit_state, "__bm_print_lock_info");
#line 106
  if (tmp == 0) {
#line 107
    return;
  } else {

  }
#line 108
  tmp___9 = get_current();
#line 108
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 108
    tmp___7 = get_current();
#line 108
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 108
      tmp___5 = get_current();
#line 108
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 108
        tmp___3 = get_current();
#line 108
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 108
        tmp___4 = (char *)"worker";
      }
#line 108
      tmp___6 = tmp___4;
    } else {
#line 108
      tmp___6 = (char *)"asender";
    }
#line 108
    tmp___8 = tmp___6;
  } else {
#line 108
    tmp___8 = (char *)"receiver";
  }
#line 108
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME %s in %s, bitmap locked for \'%s\' by %s\n",
          tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
          (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 114
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  int tmp___10 ;

  {
#line 120
  b = mdev->bitmap;
#line 123
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 124
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_lock!?\n");
#line 125
    return;
  } else {

  }
#line 128
  tmp = mutex_trylock(& b->bm_change);
#line 128
  trylock_failed = tmp == 0;
#line 130
  if (trylock_failed != 0) {
#line 131
    tmp___9 = get_current();
#line 131
    if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 131
      tmp___7 = get_current();
#line 131
      if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 131
        tmp___5 = get_current();
#line 131
        if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 131
          tmp___3 = get_current();
#line 131
          tmp___4 = (char *)(& tmp___3->comm);
        } else {
#line 131
          tmp___4 = (char *)"worker";
        }
#line 131
        tmp___6 = tmp___4;
      } else {
#line 131
        tmp___6 = (char *)"asender";
      }
#line 131
      tmp___8 = tmp___6;
    } else {
#line 131
      tmp___8 = (char *)"receiver";
    }
#line 131
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
             tmp___8, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
             (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 139
    mutex_lock_nested(& b->bm_change, 0U);
  } else {

  }
#line 141
  tmp___10 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 141
  if (tmp___10 != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap already locked in bm_lock\n");
  } else {

  }
#line 144
  b->bm_why = why;
#line 145
  b->bm_task = get_current();
#line 146
  return;
}
}
#line 148 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;

  {
#line 150
  b = mdev->bitmap;
#line 151
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 152
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME no bitmap in drbd_bm_unlock!?\n");
#line 153
    return;
  } else {

  }
#line 156
  tmp = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 156
  if (tmp == 0) {
#line 157
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME bitmap not locked in bm_unlock\n");
  } else {

  }
#line 159
  b->bm_why = 0;
#line 160
  b->bm_task = 0;
#line 161
  mutex_unlock(& b->bm_change);
#line 162
  return;
}
}
#line 165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 171
  page_nr = offset >> 9;
#line 172
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 172
  if (tmp != 0L) {
#line 172
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (172), "i" (12UL));
    ldv_44658: ;
#line 172
    goto ldv_44658;
  } else {

  }
#line 173
  page = *(b->bm_pages + page_nr);
#line 175
  tmp___0 = __kmap_atomic(page);
#line 175
  return ((unsigned long *)tmp___0);
}
}
#line 178 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 180
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 180
  return (tmp);
}
}
#line 183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 185
  __kunmap_atomic((void *)p_addr);
#line 186
  return;
}
}
#line 188 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 190
  return;
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 215
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 216
    return;
  } else {

  }
#line 218
  i = 0UL;
#line 218
  goto ldv_44677;
  ldv_44676: ;
#line 219
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 220
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 223
    goto ldv_44675;
  } else {

  }
#line 225
  __free_pages(*(pages + i), 0U);
#line 226
  *(pages + i) = 0;
  ldv_44675: 
#line 218
  i = i + 1UL;
  ldv_44677: ;
#line 218
  if (i < number) {
#line 219
    goto ldv_44676;
  } else {

  }

#line 223
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 232
  if (v != 0) {
#line 233
    vfree((void const   *)ptr);
  } else {
#line 235
    kfree((void const   *)ptr);
  }
#line 236
  return;
}
}
#line 241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 243
  old_pages = b->bm_pages;
#line 245
  vmalloced = 0U;
#line 246
  have = b->bm_number_of_pages;
#line 248
  tmp = __builtin_expect(have == 0UL, 0L);
#line 248
  if (tmp != 0L) {
#line 248
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 248
    if (tmp___0 != 0L) {
#line 248
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (248), "i" (12UL));
      ldv_44694: ;
#line 248
      goto ldv_44694;
    } else {

    }
  } else {

  }
#line 249
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 249
  if (tmp___1 != 0L) {
#line 249
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 249
    if (tmp___2 != 0L) {
#line 249
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (249), "i" (12UL));
      ldv_44695: ;
#line 249
      goto ldv_44695;
    } else {

    }
  } else {

  }
#line 251
  if (have == want) {
#line 252
    return (old_pages);
  } else {

  }
#line 259
  bytes = (unsigned int )want * 8U;
#line 260
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 260
  new_pages = (struct page **)tmp___3;
#line 261
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 262
    tmp___4 = vmalloc((unsigned long )bytes);
#line 262
    new_pages = (struct page **)tmp___4;
#line 263
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 264
      return (0);
    } else {

    }
#line 265
    vmalloced = 1U;
  } else {

  }
#line 268
  memset((void *)new_pages, 0, (size_t )bytes);
#line 269
  if (want >= have) {
#line 270
    i = 0U;
#line 270
    goto ldv_44697;
    ldv_44696: 
#line 271
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 270
    i = i + 1U;
    ldv_44697: ;
#line 270
    if ((unsigned long )i < have) {
#line 271
      goto ldv_44696;
    } else {

    }

#line 272
    goto ldv_44700;
    ldv_44699: 
#line 273
    page = alloc_pages(131282U, 0U);
#line 274
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 275
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 276
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 277
      return (0);
    } else {

    }
#line 279
    *(new_pages + (unsigned long )i) = page;
#line 272
    i = i + 1U;
    ldv_44700: ;
#line 272
    if ((unsigned long )i < want) {
#line 273
      goto ldv_44699;
    } else {

    }

  } else {
#line 282
    i = 0U;
#line 282
    goto ldv_44703;
    ldv_44702: 
#line 283
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 282
    i = i + 1U;
    ldv_44703: ;
#line 282
    if ((unsigned long )i < want) {
#line 283
      goto ldv_44702;
    } else {

    }

  }
#line 289
  if (vmalloced != 0U) {
#line 290
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 292
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 294
  return (new_pages);
}
}
#line 301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;

  {
#line 303
  b = mdev->bitmap;
#line 304
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 304
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 304
  if (tmp != 0L) {
#line 304
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       304);
  } else {

  }
#line 304
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 305
  tmp___0 = kzalloc(408UL, 208U);
#line 305
  b = (struct drbd_bitmap *)tmp___0;
#line 306
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 307
    return (-12);
  } else {

  }
#line 308
  spinlock_check(& b->bm_lock);
#line 308
  __raw_spin_lock_init(& b->bm_lock.ldv_5793.rlock, "&(&b->bm_lock)->rlock", & __key);
#line 309
  __mutex_init(& b->bm_change, "&b->bm_change", & __key___0);
#line 310
  __init_waitqueue_head(& b->bm_io_wait, & __key___1);
#line 312
  mdev->bitmap = b;
#line 314
  return (0);
}
}
#line 317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;

  {
#line 319
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 319
  if (_b != 0) {
#line 319
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_capacity", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            319);
  } else {

  }
#line 319
  if (_b != 0) {
#line 319
    return (0UL);
  } else {

  }
#line 320
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  int tmp ;

  {
#line 327
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 327
  if (_b != 0) {
#line 327
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_cleanup", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            327);
  } else {

  }
#line 327
  if (_b != 0) {
#line 327
    return;
  } else {

  }
#line 328
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 329
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 329
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp);
#line 330
  kfree((void const   *)mdev->bitmap);
#line 331
  mdev->bitmap = 0;
#line 332
  return;
}
}
#line 339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 341
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 342
  w = b->bm_bits >> 6;
#line 343
  cleared = 0;
#line 346
  p_addr = bm_map_paddr(b, w);
#line 347
  bm = p_addr + (w & 511UL);
#line 348
  if (b->bm_words > w) {
#line 349
    tmp = hweight_long(*bm & ~ mask);
#line 349
    cleared = (int )tmp;
#line 350
    *bm = *bm & mask;
#line 351
    w = w + (size_t )1;
#line 351
    bm = bm + 1;
  } else {

  }
#line 354
  if (b->bm_words > w) {
#line 355
    tmp___0 = hweight_long(*bm);
#line 355
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 356
    *bm = 0UL;
  } else {

  }
#line 358
  bm_unmap(p_addr);
#line 359
  return (cleared);
}
}
#line 362 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 364
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 365
  w = b->bm_bits >> 6;
#line 368
  p_addr = bm_map_paddr(b, w);
#line 369
  bm = p_addr + (w & 511UL);
#line 370
  if (b->bm_words > w) {
#line 371
    *bm = *bm | ~ mask;
#line 372
    bm = bm + 1;
#line 372
    w = w + (size_t )1;
  } else {

  }
#line 375
  if (b->bm_words > w) {
#line 376
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 378
  bm_unmap(p_addr);
#line 379
  return;
}
}
#line 381 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 383
  offset = 0UL;
#line 384
  bits = 0UL;
#line 387
  goto ldv_44759;
  ldv_44758: 
#line 388
  __min1 = b->bm_words - offset;
#line 388
  __min2 = 512UL;
#line 388
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 388
  i = do_now;
#line 389
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 390
  bm = p_addr + (offset & 511UL);
#line 391
  goto ldv_44755;
  ldv_44754: 
#line 396
  tmp = bm;
#line 396
  bm = bm + 1;
#line 396
  tmp___0 = hweight_long(*tmp);
#line 396
  bits = tmp___0 + bits;
  ldv_44755: 
#line 391
  tmp___1 = i;
#line 391
  i = i - 1UL;
#line 391
  if (tmp___1 != 0UL) {
#line 392
    goto ldv_44754;
  } else {

  }
#line 398
  __bm_unmap(p_addr, KM_USER0);
#line 399
  offset = offset + do_now;
#line 400
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                400, 0);
#line 400
  _cond_resched();
  ldv_44759: ;
#line 387
  if (b->bm_words > offset) {
#line 388
    goto ldv_44758;
  } else {

  }

#line 403
  return (bits);
}
}
#line 406 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 408
  tmp = __bm_count_bits(b, 0);
#line 408
  return (tmp);
}
}
#line 411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 413
  tmp = __bm_count_bits(b, 1);
#line 413
  return (tmp);
}
}
#line 417 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 424
  end = offset + len;
#line 426
  if (b->bm_words < end) {
#line 427
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 428
    return;
  } else {

  }
#line 431
  goto ldv_44782;
  ldv_44781: 
#line 432
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 432
  __min2 = end;
#line 432
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 433
  p_addr = bm_map_paddr(b, offset);
#line 434
  bm = p_addr + (offset & 511UL);
#line 435
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 436
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 438
    goto ldv_44780;
  } else {

  }
#line 440
  memset((void *)bm, c, do_now * 8UL);
#line 441
  bm_unmap(p_addr);
#line 442
  offset = offset + do_now;
  ldv_44782: ;
#line 431
  if (offset < end) {
#line 432
    goto ldv_44781;
  } else {

  }
  ldv_44780: ;
#line 436
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity , int set_new_bits ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  size_t tmp___1 ;
  sector_t tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 456
  b = mdev->bitmap;
#line 459
  opages = 0;
#line 460
  err = 0;
#line 463
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 463
  if (_b != 0) {
#line 463
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_resize", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            463);
  } else {

  }
#line 463
  if (_b != 0) {
#line 463
    return (-12);
  } else {

  }
#line 465
  drbd_bm_lock(mdev, (char *)"resize");
#line 467
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_bm_resize called with capacity == %llu\n",
            (unsigned long long )capacity);
#line 470
  if (b->bm_dev_capacity == capacity) {
#line 471
    goto out;
  } else {

  }
#line 473
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 475
  if (capacity == 0UL) {
#line 476
    spin_lock_irq(& b->bm_lock);
#line 477
    opages = b->bm_pages;
#line 478
    onpages = b->bm_number_of_pages;
#line 479
    owords = b->bm_words;
#line 480
    b->bm_pages = 0;
#line 481
    tmp___2 = 0UL;
#line 481
    b->bm_dev_capacity = tmp___2;
#line 481
    tmp___1 = tmp___2;
#line 481
    b->bm_words = tmp___1;
#line 481
    tmp___0 = tmp___1;
#line 481
    b->bm_bits = tmp___0;
#line 481
    tmp = tmp___0;
#line 481
    b->bm_set = tmp;
#line 481
    b->bm_number_of_pages = tmp;
#line 486
    spin_unlock_irq(& b->bm_lock);
#line 487
    bm_free_pages(opages, onpages);
#line 488
    bm_vk_free((void *)opages, opages_vmalloced);
#line 489
    goto out;
  } else {

  }
#line 491
  bits = (capacity + 7UL) >> 3;
#line 498
  words = (bits + 63UL) >> 6;
#line 500
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 500
  if (tmp___3 != 0) {
#line 501
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 501
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              501);
    } else {

    }
#line 502
    put_ldev(mdev);
  } else {

  }
#line 506
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 507
  have = b->bm_number_of_pages;
#line 508
  if (want == have) {
#line 509
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 509
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( b->bm_pages != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
              509);
    } else {

    }
#line 510
    npages = b->bm_pages;
  } else {
#line 512
    tmp___4 = drbd_insert_fault(mdev, 7U);
#line 512
    if (tmp___4 != 0) {
#line 513
      npages = 0;
    } else {
#line 515
      npages = bm_realloc_pages(b, want);
    }
  }
#line 518
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 519
    err = -12;
#line 520
    goto out;
  } else {

  }
#line 523
  spin_lock_irq(& b->bm_lock);
#line 524
  opages = b->bm_pages;
#line 525
  owords = b->bm_words;
#line 526
  obits = b->bm_bits;
#line 528
  growing = bits > obits;
#line 529
  if (((unsigned long )opages != (unsigned long )((struct page **)0) && growing != 0) && set_new_bits != 0) {
#line 530
    bm_set_surplus(b);
  } else {

  }
#line 532
  b->bm_pages = npages;
#line 533
  b->bm_number_of_pages = want;
#line 534
  b->bm_bits = bits;
#line 535
  b->bm_words = words;
#line 536
  b->bm_dev_capacity = capacity;
#line 538
  if (growing != 0) {
#line 539
    if (set_new_bits != 0) {
#line 540
      bm_memset(b, owords, 255, words - owords);
#line 541
      b->bm_set = b->bm_set + (bits - obits);
    } else {
#line 543
      bm_memset(b, owords, 0, words - owords);
    }
  } else {

  }
#line 547
  if (want < have) {
#line 549
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 552
  p_addr = bm_map_paddr(b, words);
#line 553
  bm = p_addr + (words & 511UL);
#line 554
  *bm = 2205418087UL;
#line 555
  bm_unmap(p_addr);
#line 557
  bm_clear_surplus(b);
#line 559
  spin_unlock_irq(& b->bm_lock);
#line 560
  if ((unsigned long )opages != (unsigned long )npages) {
#line 561
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 562
  if (growing == 0) {
#line 563
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 564
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync bitmap: bits=%lu words=%lu\n",
            bits, words);
  out: 
#line 567
  drbd_bm_unlock(mdev);
#line 568
  return (err);
}
}
#line 579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;

  {
#line 581
  b = mdev->bitmap;
#line 585
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 585
  if (_b != 0) {
#line 585
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            585);
  } else {

  }
#line 585
  if (_b != 0) {
#line 585
    return (0UL);
  } else {

  }
#line 586
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 586
  if (_b___0 != 0) {
#line 586
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_bm_total_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            586);
  } else {

  }
#line 586
  if (_b___0 != 0) {
#line 586
    return (0UL);
  } else {

  }
#line 588
  tmp = spinlock_check(& b->bm_lock);
#line 588
  flags = _raw_spin_lock_irqsave(tmp);
#line 589
  s = b->bm_set;
#line 590
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 592
  return (s);
}
}
#line 595 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 599
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 599
  if (tmp == 0) {
#line 600
    return (0UL);
  } else {

  }
#line 601
  s = _drbd_bm_total_weight(mdev);
#line 602
  put_ldev(mdev);
#line 603
  return (s);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 608
  b = mdev->bitmap;
#line 609
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 609
  if (_b != 0) {
#line 609
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            609);
  } else {

  }
#line 609
  if (_b != 0) {
#line 609
    return (0UL);
  } else {

  }
#line 610
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 610
  if (_b___0 != 0) {
#line 610
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_words", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            610);
  } else {

  }
#line 610
  if (_b___0 != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 612
  return (b->bm_words);
}
}
#line 615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;

  {
#line 617
  b = mdev->bitmap;
#line 618
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 618
  if (_b != 0) {
#line 618
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            618);
  } else {

  }
#line 618
  if (_b != 0) {
#line 618
    return (0UL);
  } else {

  }
#line 620
  return (b->bm_bits);
}
}
#line 628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  int __ret_warn_on ;
  long tmp ;
  int __ret_warn_on___0 ;
  long tmp___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___1 ;
  unsigned long *tmp___2 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  int tmp___5 ;

  {
#line 631
  b = mdev->bitmap;
#line 636
  end = offset + number;
#line 638
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 638
  if (_b != 0) {
#line 638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            638);
  } else {

  }
#line 638
  if (_b != 0) {
#line 638
    return;
  } else {

  }
#line 639
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 639
  if (_b___0 != 0) {
#line 639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_merge_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            639);
  } else {

  }
#line 639
  if (_b___0 != 0) {
#line 639
    return;
  } else {

  }
#line 640
  if (number == 0UL) {
#line 641
    return;
  } else {

  }
#line 642
  __ret_warn_on = b->bm_words <= offset;
#line 642
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 642
  if (tmp != 0L) {
#line 642
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       642);
  } else {

  }
#line 642
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 643
  __ret_warn_on___0 = b->bm_words < end;
#line 643
  tmp___0 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 643
  if (tmp___0 != 0L) {
#line 643
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       643);
  } else {

  }
#line 643
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 645
  spin_lock_irq(& b->bm_lock);
#line 646
  goto ldv_44870;
  ldv_44869: 
#line 647
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 647
  __min2 = end;
#line 647
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 648
  p_addr = bm_map_paddr(b, offset);
#line 649
  bm = p_addr + (offset & 511UL);
#line 650
  offset = offset + do_now;
#line 651
  goto ldv_44867;
  ldv_44866: 
#line 652
  bits = hweight_long(*bm);
#line 653
  tmp___1 = buffer;
#line 653
  buffer = buffer + 1;
#line 653
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___1);
#line 654
  tmp___2 = bm;
#line 654
  bm = bm + 1;
#line 654
  *tmp___2 = word;
#line 655
  tmp___3 = hweight_long(word);
#line 655
  b->bm_set = b->bm_set + (tmp___3 - bits);
  ldv_44867: 
#line 651
  tmp___4 = do_now;
#line 651
  do_now = do_now - (size_t )1;
#line 651
  if (tmp___4 != 0UL) {
#line 652
    goto ldv_44866;
  } else {

  }
#line 657
  bm_unmap(p_addr);
  ldv_44870: ;
#line 646
  if (offset < end) {
#line 647
    goto ldv_44869;
  } else {

  }

#line 664
  if (b->bm_words == end) {
#line 665
    tmp___5 = bm_clear_surplus(b);
#line 665
    b->bm_set = b->bm_set - (unsigned long )tmp___5;
  } else {

  }
#line 667
  spin_unlock_irq(& b->bm_lock);
#line 668
  return;
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  int _b___0 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long *tmp___0 ;
  size_t tmp___1 ;

  {
#line 676
  b = mdev->bitmap;
#line 680
  end = offset + number;
#line 682
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 682
  if (_b != 0) {
#line 682
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            682);
  } else {

  }
#line 682
  if (_b != 0) {
#line 682
    return;
  } else {

  }
#line 683
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 683
  if (_b___0 != 0) {
#line 683
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_get_lel", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            683);
  } else {

  }
#line 683
  if (_b___0 != 0) {
#line 683
    return;
  } else {

  }
#line 685
  spin_lock_irq(& b->bm_lock);
#line 686
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "offset=%lu number=%lu bm_words=%lu\n",
            offset, number, b->bm_words);
  } else {
#line 694
    goto ldv_44895;
    ldv_44894: 
#line 695
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 695
    __min2 = end;
#line 695
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 696
    p_addr = bm_map_paddr(b, offset);
#line 697
    bm = p_addr + (offset & 511UL);
#line 698
    offset = offset + do_now;
#line 699
    goto ldv_44892;
    ldv_44891: 
#line 700
    tmp = buffer;
#line 700
    buffer = buffer + 1;
#line 700
    tmp___0 = bm;
#line 700
    bm = bm + 1;
#line 700
    *tmp = *tmp___0;
    ldv_44892: 
#line 699
    tmp___1 = do_now;
#line 699
    do_now = do_now - (size_t )1;
#line 699
    if (tmp___1 != 0UL) {
#line 700
      goto ldv_44891;
    } else {

    }
#line 701
    bm_unmap(p_addr);
    ldv_44895: ;
#line 694
    if (offset < end) {
#line 695
      goto ldv_44894;
    } else {

    }

  }
#line 704
  spin_unlock_irq(& b->bm_lock);
#line 705
  return;
}
}
#line 708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 710
  b = mdev->bitmap;
#line 711
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 711
  if (_b != 0) {
#line 711
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            711);
  } else {

  }
#line 711
  if (_b != 0) {
#line 711
    return;
  } else {

  }
#line 712
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 712
  if (_b___0 != 0) {
#line 712
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            712);
  } else {

  }
#line 712
  if (_b___0 != 0) {
#line 712
    return;
  } else {

  }
#line 714
  spin_lock_irq(& b->bm_lock);
#line 715
  bm_memset(b, 0UL, 255, b->bm_words);
#line 716
  bm_clear_surplus(b);
#line 717
  b->bm_set = b->bm_bits;
#line 718
  spin_unlock_irq(& b->bm_lock);
#line 719
  return;
}
}
#line 722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  int _b___0 ;

  {
#line 724
  b = mdev->bitmap;
#line 725
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 725
  if (_b != 0) {
#line 725
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            725);
  } else {

  }
#line 725
  if (_b != 0) {
#line 725
    return;
  } else {

  }
#line 726
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 726
  if (_b___0 != 0) {
#line 726
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_clear_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            726);
  } else {

  }
#line 726
  if (_b___0 != 0) {
#line 726
    return;
  } else {

  }
#line 728
  spin_lock_irq(& b->bm_lock);
#line 729
  bm_memset(b, 0UL, 0, b->bm_words);
#line 730
  b->bm_set = 0UL;
#line 731
  spin_unlock_irq(& b->bm_lock);
#line 732
  return;
}
}
#line 734 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 736
  b = (struct drbd_bitmap *)bio->bi_private;
#line 737
  uptodate = (int )bio->bi_flags & 1;
#line 744
  if (error == 0 && uptodate == 0) {
#line 745
    error = -5;
  } else {

  }
#line 747
  if (error != 0) {
#line 750
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 752
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 752
  if (tmp != 0) {
#line 753
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 755
  bio_put(bio);
#line 756
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 761
  tmp = bio_alloc(208U, 1);
#line 761
  bio = tmp;
#line 763
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 765
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 769
  __min1 = 4096U;
#line 769
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 769
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 769
  len = __min1 < __min2 ? __min1 : __min2;
#line 772
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 773
  bio->bi_sector = on_disk_sector;
#line 774
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 775
  bio->bi_private = (void *)b;
#line 776
  bio->bi_end_io = & bm_async_io_complete;
#line 778
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 778
  if (tmp___1 != 0) {
#line 779
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 780
    bio_endio(bio, -5);
  } else {
#line 782
    submit_bio(rw, bio);
  }
#line 783
  return;
}
}
#line 822 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char *tmp___7 ;

  {
#line 824
  b = mdev->bitmap;
#line 829
  err = 0;
#line 831
  tmp = bm_is_locked(b);
#line 831
  __ret_warn_on = tmp == 0;
#line 831
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 831
  if (tmp___0 != 0L) {
#line 831
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       831);
  } else {

  }
#line 831
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 835
  tmp___1 = drbd_bm_words(mdev);
#line 835
  bm_words = (int )tmp___1;
#line 836
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 842
  now = jiffies;
#line 843
  atomic_set(& b->bm_async_io, num_pages);
#line 844
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 847
  i = 0;
#line 847
  goto ldv_44947;
  ldv_44946: 
#line 848
  bm_page_io_async(mdev, b, i, rw);
#line 847
  i = i + 1;
  ldv_44947: ;
#line 847
  if (i < num_pages) {
#line 848
    goto ldv_44946;
  } else {

  }
#line 850
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 850
  drbd_blk_run_queue(tmp___2);
#line 851
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___3 == 0) {
#line 851
    goto ldv_44949;
  } else {

  }
#line 851
  tmp___4 = get_current();
#line 851
  __wait.flags = 0U;
#line 851
  __wait.private = (void *)tmp___4;
#line 851
  __wait.func = & autoremove_wake_function;
#line 851
  __wait.task_list.next = & __wait.task_list;
#line 851
  __wait.task_list.prev = & __wait.task_list;
  ldv_44952: 
#line 851
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 851
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 851
  if (tmp___5 == 0) {
#line 851
    goto ldv_44951;
  } else {

  }
#line 851
  schedule();
#line 851
  goto ldv_44952;
  ldv_44951: 
#line 851
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_44949: 
#line 853
  tmp___6 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 853
  if (tmp___6 != 0) {
#line 854
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "we had at least one MD IO ERROR during bitmap IO\n");
#line 855
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 856
    err = -5;
  } else {

  }
#line 859
  now = jiffies;
#line 860
  if (rw == 1) {
#line 864
    drbd_md_flush(mdev);
  } else {
#line 867
    b->bm_set = bm_count_bits_swap_endian(b);
#line 868
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "recounting of set bits took additional %lu jiffies\n",
              (unsigned long )jiffies - now);
  }
#line 871
  now = b->bm_set;
#line 873
  tmp___7 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 873
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s (%lu bits) marked out-of-sync by on disk bit-map.\n",
            tmp___7, now);
#line 876
  return (err);
}
}
#line 883 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 885
  tmp = bm_rw(mdev, 0);
#line 885
  return (tmp);
}
}
#line 892 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 894
  tmp = bm_rw(mdev, 1);
#line 894
  return (tmp);
}
}
#line 906 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  int tmp___2 ;

  {
#line 908
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 911
  err = 0;
#line 913
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 914
  tmp = drbd_bm_words(mdev);
#line 914
  bm_words = (int )tmp;
#line 915
  offset = (int )(enr << 6);
#line 916
  _min1 = 64;
#line 916
  _min2 = bm_words - offset;
#line 916
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 917
  if (num_words <= 63) {
#line 918
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 918
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 919
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 919
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 921
  tmp___2 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 921
  if (tmp___2 == 0) {
#line 923
    err = -5;
#line 924
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
            enr, (unsigned long long )on_disk_sector);
#line 927
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 928
    i = 0;
#line 928
    goto ldv_44975;
    ldv_44974: 
#line 929
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 928
    i = i + 1;
    ldv_44975: ;
#line 928
    if (i <= 3) {
#line 929
      goto ldv_44974;
    } else {

    }

  } else {

  }
#line 931
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 932
  mutex_unlock(& mdev->md_io_mutex);
#line 933
  return (err);
}
}
#line 943 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  unsigned long offset ;

  {
#line 946
  b = mdev->bitmap;
#line 947
  i = 0xffffffffffffffffUL;
#line 951
  if (b->bm_bits < bm_fo) {
#line 952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm_fo=%lu bm_bits=%lu\n",
            bm_fo, b->bm_bits);
  } else {
#line 954
    goto ldv_44991;
    ldv_44990: 
#line 956
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 957
    offset = bit_offset >> 6;
#line 958
    p_addr = __bm_map_paddr(b, offset, km);
#line 960
    if ((int )find_zero_bit != 0) {
#line 961
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 963
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 965
    __bm_unmap(p_addr, km);
#line 966
    if (i <= 32767UL) {
#line 967
      i = bit_offset + i;
#line 968
      if (b->bm_bits <= i) {
#line 969
        goto ldv_44988;
      } else {

      }
#line 970
      goto found;
    } else {

    }
#line 972
    bm_fo = bit_offset + 32768UL;
    ldv_44991: ;
#line 954
    if (b->bm_bits > bm_fo) {
#line 955
      goto ldv_44990;
    } else {

    }
    ldv_44988: 
#line 974
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 977
  return (i);
}
}
#line 980 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  int _b___0 ;
  int tmp ;

  {
#line 983
  b = mdev->bitmap;
#line 984
  i = 0xffffffffffffffffUL;
#line 986
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 986
  if (_b != 0) {
#line 986
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            986);
  } else {

  }
#line 986
  if (_b != 0) {
#line 986
    return (i);
  } else {

  }
#line 987
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 987
  if (_b___0 != 0) {
#line 987
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_find_next", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            987);
  } else {

  }
#line 987
  if (_b___0 != 0) {
#line 987
    return (i);
  } else {

  }
#line 989
  spin_lock_irq(& b->bm_lock);
#line 990
  tmp = bm_is_locked(b);
#line 990
  if (tmp != 0) {
#line 991
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 993
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 995
  spin_unlock_irq(& b->bm_lock);
#line 996
  return (i);
}
}
#line 999 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1001
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 1001
  return (tmp);
}
}
#line 1014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1017
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1017
  return (tmp);
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1023
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1023
  return (tmp);
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s ,
                               unsigned long e , int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp ;
  int tmp___0 ;

  {
#line 1035
  b = mdev->bitmap;
#line 1036
  p_addr = 0;
#line 1038
  last_page_nr = 0xffffffffffffffffUL;
#line 1039
  c = 0;
#line 1041
  if (b->bm_bits <= e) {
#line 1042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n",
            s, e, b->bm_bits);
#line 1044
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1046
  bitnr = s;
#line 1046
  goto ldv_45031;
  ldv_45030: 
#line 1047
  offset = bitnr >> 6;
#line 1048
  page_nr = offset >> 9;
#line 1049
  if (page_nr != last_page_nr) {
#line 1050
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1051
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1052
    p_addr = __bm_map_paddr(b, offset, km);
#line 1053
    last_page_nr = page_nr;
  } else {

  }
#line 1055
  if (val != 0) {
#line 1056
    tmp = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1056
    c = (tmp == 0) + c;
  } else {
#line 1058
    tmp___0 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1058
    c = c - (tmp___0 != 0);
  }
#line 1046
  bitnr = bitnr + 1UL;
  ldv_45031: ;
#line 1046
  if (bitnr <= e) {
#line 1047
    goto ldv_45030;
  } else {

  }

#line 1060
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1061
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1062
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1063
  return (c);
}
}
#line 1070 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                             int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;

  {
#line 1074
  b = mdev->bitmap;
#line 1075
  c = 0;
#line 1077
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1077
  if (_b != 0) {
#line 1077
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1077);
  } else {

  }
#line 1077
  if (_b != 0) {
#line 1077
    return (1);
  } else {

  }
#line 1078
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1078
  if (_b___0 != 0) {
#line 1078
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "bm_change_bits_to", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1078);
  } else {

  }
#line 1078
  if (_b___0 != 0) {
#line 1078
    return (0);
  } else {

  }
#line 1080
  tmp = spinlock_check(& b->bm_lock);
#line 1080
  flags = _raw_spin_lock_irqsave(tmp);
#line 1081
  tmp___0 = bm_is_locked(b);
#line 1081
  if (tmp___0 != 0) {
#line 1082
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1084
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1086
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1087
  return (c);
}
}
#line 1091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1093
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1093
  return (tmp);
}
}
#line 1097 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1099
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1099
  return (- tmp);
}
}
#line 1104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1109
  tmp = __kmap_atomic(*(b->bm_pages + (unsigned long )page_nr));
#line 1109
  paddr = (unsigned long *)tmp;
#line 1110
  i = first_word;
#line 1110
  goto ldv_45070;
  ldv_45069: 
#line 1111
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1111
  bits = (int )tmp___0;
#line 1112
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1113
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1110
  i = i + 1;
  ldv_45070: ;
#line 1110
  if (i < last_word) {
#line 1111
    goto ldv_45069;
  } else {

  }
#line 1115
  __kunmap_atomic((void *)paddr);
#line 1116
  return;
}
}
#line 1122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1132
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1133
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1140
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1142
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1143
    return;
  } else {

  }
#line 1149
  if (sl != 0UL) {
#line 1150
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1152
  first_page = (int )(sl >> 15);
#line 1153
  last_page = (int )(el >> 15);
#line 1157
  first_word = (int )(sl >> 6) & 511;
#line 1158
  last_word = 512;
#line 1161
  page_nr = first_page;
#line 1161
  goto ldv_45086;
  ldv_45085: 
#line 1162
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1163
  __might_sleep("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1163, 0);
#line 1163
  _cond_resched();
#line 1164
  first_word = 0;
#line 1161
  page_nr = page_nr + 1;
  ldv_45086: ;
#line 1161
  if (page_nr < last_page) {
#line 1162
    goto ldv_45085;
  } else {

  }
#line 1168
  last_word = (int )(el >> 6) & 511;
#line 1169
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1176
  if (el <= (unsigned long )e) {
#line 1177
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1178
  return;
}
}
#line 1187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long offset ;
  int tmp___1 ;

  {
#line 1190
  b = mdev->bitmap;
#line 1194
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1194
  if (_b != 0) {
#line 1194
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1194);
  } else {

  }
#line 1194
  if (_b != 0) {
#line 1194
    return (0);
  } else {

  }
#line 1195
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1195
  if (_b___0 != 0) {
#line 1195
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_test_bit", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1195);
  } else {

  }
#line 1195
  if (_b___0 != 0) {
#line 1195
    return (0);
  } else {

  }
#line 1197
  tmp = spinlock_check(& b->bm_lock);
#line 1197
  flags = _raw_spin_lock_irqsave(tmp);
#line 1198
  tmp___0 = bm_is_locked(b);
#line 1198
  if (tmp___0 != 0) {
#line 1199
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1200
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1201
    offset = bitnr >> 6;
#line 1202
    p_addr = bm_map_paddr(b, offset);
#line 1203
    tmp___1 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1203
    i = tmp___1 != 0;
#line 1204
    bm_unmap(p_addr);
  } else
#line 1205
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1206
    i = -1;
  } else {
#line 1208
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu > bm_bits=%lu\n",
            bitnr, b->bm_bits);
#line 1209
    i = 0;
  }
#line 1212
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1213
  return (i);
}
}
#line 1217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int _b___1 ;

  {
#line 1220
  b = mdev->bitmap;
#line 1221
  p_addr = 0;
#line 1221
  page_nr = 0xffffffffffffffffUL;
#line 1223
  c = 0;
#line 1230
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1230
  if (_b != 0) {
#line 1230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1230);
  } else {

  }
#line 1230
  if (_b != 0) {
#line 1230
    return (1);
  } else {

  }
#line 1231
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1231
  if (_b___0 != 0) {
#line 1231
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1231);
  } else {

  }
#line 1231
  if (_b___0 != 0) {
#line 1231
    return (1);
  } else {

  }
#line 1233
  tmp = spinlock_check(& b->bm_lock);
#line 1233
  flags = _raw_spin_lock_irqsave(tmp);
#line 1234
  tmp___0 = bm_is_locked(b);
#line 1234
  if (tmp___0 != 0) {
#line 1235
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1236
  bitnr = s;
#line 1236
  goto ldv_45128;
  ldv_45127: 
#line 1237
  w = bitnr >> 6;
#line 1238
  if (w >> 9 != page_nr) {
#line 1239
    page_nr = w >> 9;
#line 1240
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1241
      bm_unmap(p_addr);
    } else {

    }
#line 1242
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1244
  _b___1 = b->bm_bits <= bitnr;
#line 1244
  if (_b___1 != 0) {
#line 1244
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_count_bits", (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1244);
  } else {

  }
#line 1244
  if (_b___1 != 0) {
#line 1245
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitnr=%lu bm_bits=%lu\n",
            bitnr, b->bm_bits);
  } else {
#line 1247
    tmp___1 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1247
    c = (tmp___1 != 0) + c;
  }
#line 1236
  bitnr = bitnr + 1UL;
  ldv_45128: ;
#line 1236
  if (bitnr <= (unsigned long )e) {
#line 1237
    goto ldv_45127;
  } else {

  }

#line 1250
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1251
    bm_unmap(p_addr);
  } else {

  }
#line 1252
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1253
  return (c);
}
}
#line 1271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___1 ;
  unsigned long tmp___2 ;
  int tmp___3 ;

  {
#line 1273
  b = mdev->bitmap;
#line 1278
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1278
  if (_b != 0) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1278);
  } else {

  }
#line 1278
  if (_b != 0) {
#line 1278
    return (0);
  } else {

  }
#line 1279
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1279
  if (_b___0 != 0) {
#line 1279
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_e_weight", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1279);
  } else {

  }
#line 1279
  if (_b___0 != 0) {
#line 1279
    return (0);
  } else {

  }
#line 1281
  tmp = spinlock_check(& b->bm_lock);
#line 1281
  flags = _raw_spin_lock_irqsave(tmp);
#line 1282
  tmp___0 = bm_is_locked(b);
#line 1282
  if (tmp___0 != 0) {
#line 1283
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1285
  s = (int )(enr << 6);
#line 1286
  _min1 = (enr + 1UL) << 6;
#line 1286
  _min2 = b->bm_words;
#line 1286
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1287
  count = 0;
#line 1288
  if ((size_t )s < b->bm_words) {
#line 1289
    n = e - s;
#line 1290
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1291
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1292
    goto ldv_45154;
    ldv_45153: 
#line 1293
    tmp___1 = bm;
#line 1293
    bm = bm + 1;
#line 1293
    tmp___2 = hweight_long(*tmp___1);
#line 1293
    count = (int )((unsigned int )tmp___2 + (unsigned int )count);
    ldv_45154: 
#line 1292
    tmp___3 = n;
#line 1292
    n = n - 1;
#line 1292
    if (tmp___3 != 0) {
#line 1293
      goto ldv_45153;
    } else {

    }
#line 1294
    bm_unmap(p_addr);
  } else {
#line 1296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_e_weight\n",
            s);
  }
#line 1298
  spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1299
  return (count);
}
}
#line 1303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  int _b___0 ;
  int tmp ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1305
  b = mdev->bitmap;
#line 1309
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1309
  if (_b != 0) {
#line 1309
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1309);
  } else {

  }
#line 1309
  if (_b != 0) {
#line 1309
    return (0UL);
  } else {

  }
#line 1310
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1310
  if (_b___0 != 0) {
#line 1310
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_bm_ALe_set_all", (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1310);
  } else {

  }
#line 1310
  if (_b___0 != 0) {
#line 1310
    return (0UL);
  } else {

  }
#line 1312
  spin_lock_irq(& b->bm_lock);
#line 1313
  tmp = bm_is_locked(b);
#line 1313
  if (tmp != 0) {
#line 1314
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1315
  weight = b->bm_set;
#line 1317
  s = (int )((unsigned int )al_enr * 16U);
#line 1318
  __min1 = (size_t )(s + 16);
#line 1318
  __min2 = b->bm_words;
#line 1318
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1320
  if ((e + -1) >> 9 != s >> 9) {
#line 1320
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
            1321);
  } else {

  }
#line 1322
  count = 0;
#line 1323
  if ((size_t )s < b->bm_words) {
#line 1324
    do_now = e - s;
#line 1324
    i = do_now;
#line 1325
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1326
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1327
    goto ldv_45178;
    ldv_45177: 
#line 1328
    tmp___0 = hweight_long(*bm);
#line 1328
    count = (int )((unsigned int )tmp___0 + (unsigned int )count);
#line 1329
    *bm = 0xffffffffffffffffUL;
#line 1330
    bm = bm + 1;
    ldv_45178: 
#line 1327
    tmp___1 = i;
#line 1327
    i = i - 1;
#line 1327
    if (tmp___1 != 0) {
#line 1328
      goto ldv_45177;
    } else {

    }
#line 1332
    bm_unmap(p_addr);
#line 1333
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1334
    if ((size_t )e == b->bm_words) {
#line 1335
      tmp___2 = bm_clear_surplus(b);
#line 1335
      b->bm_set = b->bm_set - (unsigned long )tmp___2;
    } else {

    }
  } else {
#line 1337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "start offset (%d) too large in drbd_bm_ALe_set_all\n",
            s);
  }
#line 1339
  weight = b->bm_set - weight;
#line 1340
  spin_unlock_irq(& b->bm_lock);
#line 1341
  return (weight);
}
}
#line 90 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 290
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 291
char const   *drbd_role_str(enum drbd_role s ) ;
#line 292
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 164
struct drbd_conf **minor_table ;
#line 1109 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1113
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1115
  return (mdev);
}
}
#line 1469
int proc_details ;
#line 1608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1609
struct file_operations  const  drbd_proc_fops ;
#line 2148 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2161
  tmp = drbd_bm_total_weight(mdev);
#line 2161
  *bits_left = tmp - mdev->rs_failed;
#line 2164
  if (*bits_left > mdev->rs_total) {
#line 2170
    __asm__  volatile   ("": : : "memory");
#line 2171
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35955.conn);
#line 2171
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n",
             tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2174
    *per_mil_done = 0U;
  } else {
#line 2177
    tmp___1 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2180
    *per_mil_done = (unsigned int )tmp___1;
  }
#line 2182
  return;
}
}
#line 2261 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int is_susp(union drbd_state s ) 
{ 


  {
#line 2263
  return (((unsigned int )*((unsigned char *)(& s) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& s) + 2UL) != 0U);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations  const  drbd_proc_fops  = 
#line 48
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 63 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;
  int stalled ;

  {
#line 68
  stalled = 0;
#line 70
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 72
  x = (int )(res / 50U);
#line 73
  y = 20 - x;
#line 74
  seq_printf(seq, "\t[");
#line 75
  i = 1;
#line 75
  goto ldv_44665;
  ldv_44664: 
#line 76
  seq_printf(seq, "=");
#line 75
  i = i + 1;
  ldv_44665: ;
#line 75
  if (i < x) {
#line 76
    goto ldv_44664;
  } else {

  }
#line 77
  seq_printf(seq, ">");
#line 78
  i = 0;
#line 78
  goto ldv_44668;
  ldv_44667: 
#line 79
  seq_printf(seq, ".");
#line 78
  i = i + 1;
  ldv_44668: ;
#line 78
  if (i < y) {
#line 79
    goto ldv_44667;
  } else {

  }
#line 80
  seq_printf(seq, "] ");
#line 82
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 84
  if (mdev->rs_total > 1048576UL) {
#line 85
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 89
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 105
  i = (mdev->rs_last_mark + 2) % 8;
#line 106
  dt = ((unsigned long )jiffies - mdev->rs_mark_time[i]) / 250UL;
#line 107
  if (dt > 6000UL) {
#line 108
    stalled = 1;
  } else {

  }
#line 110
  if (dt == 0UL) {
#line 111
    dt = dt + 1UL;
  } else {

  }
#line 112
  db = mdev->rs_mark_left[i] - rs_left;
#line 113
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 115
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 119
  dbdt = db / dt << 2;
#line 120
  if (dbdt > 1000UL) {
#line 121
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 124
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 128
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 129
  if (dt == 0UL) {
#line 130
    dt = 1UL;
  } else {

  }
#line 131
  db = mdev->rs_total - rs_left;
#line 132
  dbdt = db / dt << 2;
#line 133
  if (dbdt > 1000UL) {
#line 134
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 137
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 139
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 140
    if (mdev->c_sync_rate > 1000) {
#line 141
      seq_printf(seq, " want: %d,%03d", mdev->c_sync_rate / 1000, mdev->c_sync_rate % 1000);
    } else {
#line 144
      seq_printf(seq, " want: %d", mdev->c_sync_rate);
    }
  } else {

  }
#line 146
  seq_printf(seq, " K/sec%s\n", stalled != 0 ? (char *)" (stalled)" : (char *)"");
#line 147
  return;
}
}
#line 149 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 151
  __mptr = (struct lc_element  const  *)e;
#line 151
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 153
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 156
  return;
}
}
#line 159 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[3U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long tmp___11 ;
  int tmp___12 ;

  {
#line 161
  hole = 0;
#line 165
  write_ordering_chars[0] = 110;
#line 165
  write_ordering_chars[1] = 100;
#line 165
  write_ordering_chars[2] = 102;
#line 171
  tmp = drbd_buildtag();
#line 171
  seq_printf(seq, "version: 8.3.9 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 95, tmp);
#line 194
  i = 0;
#line 194
  goto ldv_44688;
  ldv_44687: 
#line 195
  mdev = minor_to_mdev((unsigned int )i);
#line 196
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 197
    hole = 1;
#line 198
    goto ldv_44686;
  } else {

  }
#line 200
  if (hole != 0) {
#line 201
    hole = 0;
#line 202
    seq_printf(seq, "\n");
  } else {

  }
#line 205
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35955.conn);
#line 207
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 210
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 212
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 212
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 212
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 212
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 212
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 212
    tmp___5 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 212
    tmp___6 = is_susp(mdev->state);
#line 212
    tmp___7 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.pdsk);
#line 212
    tmp___8 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.disk);
#line 212
    tmp___9 = drbd_role_str((enum drbd_role )mdev->state.ldv_35955.peer);
#line 212
    tmp___10 = drbd_role_str((enum drbd_role )mdev->state.ldv_35955.role);
#line 212
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___10, tmp___9, tmp___8, tmp___7, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               tmp___6 != 0 ? 115 : 114, (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 97 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 2014UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               tmp___5 != 0 ? 115 : 45, mdev->send_cnt / 2U, mdev->recv_cnt / 2U,
               mdev->writ_cnt / 2U, mdev->read_cnt / 2U, mdev->al_writ_cnt, mdev->bm_writ_cnt,
               tmp___4, tmp___2 + tmp___3, tmp___1, tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 243
    tmp___11 = drbd_bm_total_weight(mdev);
#line 243
    seq_printf(seq, " oos:%lu\n", tmp___11 << 2);
  }
#line 246
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) {
#line 248
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 250
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U) {
#line 251
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 257
  if (proc_details > 0) {
#line 257
    tmp___12 = _get_ldev_if_state(mdev, D_FAILED);
#line 257
    if (tmp___12 != 0) {
#line 258
      lc_seq_printf_stats(seq, mdev->resync);
#line 259
      lc_seq_printf_stats(seq, mdev->act_log);
#line 260
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 263
  if (proc_details > 1) {
#line 264
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 265
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_44686: 
#line 194
  i = i + 1;
  ldv_44688: ;
#line 194
  if ((unsigned int )i < minor_count) {
#line 195
    goto ldv_44687;
  } else {

  }

#line 271
  return (0);
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 276
  tmp = PDE((struct inode  const  *)inode);
#line 276
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 276
  return (tmp___0);
}
}
#line 297
void ldv_check_final_state(void) ;
#line 300
extern void ldv_check_return_value(int  ) ;
#line 306
extern void ldv_initialize(void) ;
#line 309
extern void ldv_handler_precall(void) ;
#line 312
extern int nondet_int(void) ;
#line 315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 318 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 350
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 340
  LDV_IN_INTERRUPT = 1;
#line 349
  ldv_initialize();
#line 353
  goto ldv_44719;
  ldv_44718: 
#line 357
  tmp = nondet_int();
#line 357
  switch (tmp) {
  case 0: ;
#line 362
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 367
    ldv_handler_precall();
#line 368
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 369
    ldv_check_return_value(res_drbd_proc_open_3);
#line 370
    if (res_drbd_proc_open_3 != 0) {
#line 371
      goto ldv_module_exit;
    } else {

    }
#line 372
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 378
  goto ldv_44716;
  default: ;
#line 379
  goto ldv_44716;
  }
  ldv_44716: ;
  ldv_44719: 
#line 353
  tmp___0 = nondet_int();
#line 353
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 355
    goto ldv_44718;
  } else {

  }

  ldv_module_exit: ;
#line 388
  ldv_check_final_state();
#line 391
  return;
}
}
#line 1 "<compiler builtins>"
void __builtin_prefetch(void const   *  , ...) ;
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 215 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/cmpxchg_64.h"
extern void __xchg_wrong_size(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 24 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 26
  list->next = list;
#line 27
  list->prev = list;
#line 28
  return;
}
}
#line 47
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 60 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 62
  __list_add(new, head, head->next);
#line 63
  return;
}
}
#line 74 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 76
  __list_add(new, head->prev, head);
#line 77
  return;
}
}
#line 86 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 88
  next->prev = prev;
#line 89
  prev->next = next;
#line 90
  return;
}
}
#line 106
extern void list_del(struct list_head * ) ;
#line 136 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 138
  __list_del(entry->prev, entry->next);
#line 139
  INIT_LIST_HEAD(entry);
#line 140
  return;
}
}
#line 180 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 182
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 267 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 271
  first = list->next;
#line 272
  last = list->prev;
#line 274
  first->prev = prev;
#line 275
  prev->next = first;
#line 277
  last->next = next;
#line 278
  next->prev = last;
#line 279
  return;
}
}
#line 312 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 315
  tmp = list_empty((struct list_head  const  *)list);
#line 315
  if (tmp == 0) {
#line 316
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 317
    INIT_LIST_HEAD(list);
  } else {

  }
#line 319
  return;
}
}
#line 47 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 49
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; addl %1,%0": "+m" (v->counter): "ir" (i));
#line 51
  return;
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 63
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; subl %1,%0": "+m" (v->counter): "ir" (i));
#line 65
  return;
}
}
#line 105 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 107
  __asm__  volatile   (".section .smp_locks,\"a\"\n.balign 4\n.long 671f - .\n.previous\n671:\n\tlock; decl %0": "+m" (v->counter));
#line 109
  return;
}
}
#line 218 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic.h"
__inline static int atomic_xchg(atomic_t *v , int new ) 
{ 
  int __x ;
  u8 volatile   *__ptr ;
  u16 volatile   *__ptr___0 ;
  u32 volatile   *__ptr___1 ;
  u64 volatile   *__ptr___2 ;

  {
#line 220
  __x = new;
#line 220
  switch (4UL) {
  case 1UL: 
#line 220
  __ptr = (u8 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgb %0,%1": "=q" (__x), "+m" (*__ptr): "0" (__x): "memory");
#line 220
  goto ldv_5289;
  case 2UL: 
#line 220
  __ptr___0 = (u16 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgw %0,%1": "=r" (__x), "+m" (*__ptr___0): "0" (__x): "memory");
#line 220
  goto ldv_5289;
  case 4UL: 
#line 220
  __ptr___1 = (u32 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgl %0,%1": "=r" (__x), "+m" (*__ptr___1): "0" (__x): "memory");
#line 220
  goto ldv_5289;
  case 8UL: 
#line 220
  __ptr___2 = (u64 volatile   *)(& v->counter);
#line 220
  __asm__  volatile   ("xchgq %0,%1": "=r" (__x), "+m" (*__ptr___2): "0" (__x): "memory");
#line 220
  goto ldv_5289;
  default: 
#line 220
  __xchg_wrong_size();
  }
  ldv_5289: ;
#line 220
  return (__x);
}
}
#line 261 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 22 "include/linux/spinlock_api_smp.h"
extern void _raw_spin_lock(raw_spinlock_t * ) ;
#line 39
extern void _raw_spin_unlock(raw_spinlock_t * ) ;
#line 23 "include/linux/rwlock_api_smp.h"
extern void _raw_write_lock_irq(rwlock_t * ) ;
#line 35
extern void _raw_write_unlock_irq(rwlock_t * ) ;
#line 283 "include/linux/spinlock.h"
__inline static void spin_lock(spinlock_t *lock ) 
{ 


  {
#line 285
  _raw_spin_lock(& lock->ldv_5793.rlock);
#line 286
  return;
}
}
#line 323 "include/linux/spinlock.h"
__inline static void spin_unlock(spinlock_t *lock ) 
{ 


  {
#line 325
  _raw_spin_unlock(& lock->ldv_5793.rlock);
#line 326
  return;
}
}
#line 185 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 91 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 57 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___0(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13609: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13609;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 229 "include/linux/slub_def.h"
__inline static void *kmalloc_large___0(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 231
  tmp = get_order(size);
#line 231
  order = (unsigned int )tmp;
#line 232
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 232
  ret = (void *)tmp___0;
#line 234
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 235
  trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 237
  return (ret);
}
}
#line 240 "include/linux/slub_def.h"
__inline static void *kmalloc___0(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 244
  if (0) {
#line 245
    if (size > 8192UL) {
#line 246
      tmp = kmalloc_large___0(size, flags);
#line 246
      return (tmp);
    } else {

    }
#line 248
    if ((flags & 1U) == 0U) {
#line 249
      tmp___0 = kmalloc_slab(size);
#line 249
      s = tmp___0;
#line 251
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 252
        return (16);
      } else {

      }
#line 254
      ret = kmem_cache_alloc_notrace(s, flags);
#line 256
      trace_kmalloc___0((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 258
      return (ret);
    } else {

    }
  } else {

  }
#line 261
  tmp___1 = __kmalloc(size, flags);
#line 261
  return (tmp___1);
}
}
#line 348 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 348
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 348
  return (tmp);
}
}
#line 308 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 310
  tmp = PageTail(page);
#line 310
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 310
  if (tmp___0 != 0L) {
#line 311
    return (page->ldv_12266.first_page);
  } else {

  }
#line 312
  return (page);
}
}
#line 315 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 317
  tmp = compound_head(page);
#line 317
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 317
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18019: ;
#line 63
    goto ldv_18019;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18020: ;
#line 65
    goto ldv_18020;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18021: ;
#line 66
    goto ldv_18021;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.class_cache[0] = 0;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.class_cache[1] = 0;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.ldv_5793.rlock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.ldv_5793.ldv_5792.dep_map, "semaphore->lock", & __key,
                   0);
#line 37
  return;
}
}
#line 40
extern int down_interruptible(struct semaphore * ) ;
#line 42
extern int down_trylock(struct semaphore * ) ;
#line 44
extern void up(struct semaphore * ) ;
#line 839 "include/linux/fs.h"
__inline static loff_t i_size_read(struct inode  const  *inode ) 
{ 


  {
#line 858
  return ((loff_t )inode->i_size);
}
}
#line 354 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 355
extern long schedule_timeout_interruptible(long  ) ;
#line 2031
extern void flush_signals(struct task_struct * ) ;
#line 2064
extern void force_sig(int  , struct task_struct * ) ;
#line 1069 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1127 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1129
  return (& tfm->base);
}
}
#line 1147 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1149
  tmp = crypto_hash_tfm(tfm);
#line 1149
  return (& tmp->crt_u.hash);
}
}
#line 1162 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1164
  tmp = crypto_hash_crt(tfm);
#line 1164
  return (tmp->digestsize);
}
}
#line 1182 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1184
  tmp = crypto_hash_crt(desc->tfm);
#line 1184
  tmp___0 = (*(tmp->init))(desc);
#line 1184
  return (tmp___0);
}
}
#line 1187 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1191
  tmp = crypto_hash_crt(desc->tfm);
#line 1191
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1191
  return (tmp___0);
}
}
#line 1194 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1196
  tmp = crypto_hash_crt(desc->tfm);
#line 1196
  tmp___0 = (*(tmp->final))(desc, out);
#line 1196
  return (tmp___0);
}
}
#line 229 "include/linux/bio.h"
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 648 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 940 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 942
  return (q->limits.max_segment_size);
}
}
#line 670 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 676
  __asm__  volatile   ("": : : "memory");
#line 677
  return (thi->t_state);
}
}
#line 1118 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1120
  return (mdev->minor);
}
}
#line 1131 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1133
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1136
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1136
  if (tmp != 0L) {
#line 1137
    mutex_unlock(& mdev->data.mutex);
#line 1138
    return (0);
  } else {

  }
#line 1140
  return (1);
}
}
#line 1143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1145
  mutex_unlock(& mdev->data.mutex);
#line 1146
  return;
}
}
#line 1170
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1179
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1181
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1200
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1204
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) ;
#line 1209
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) ;
#line 1217
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1223
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1225
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1227
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1230
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1232
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1236
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1242
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1245
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1248
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1249
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1252
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1263
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1462
wait_queue_head_t drbd_pp_wait ;
#line 1464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1491
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1494
int drbd_worker(struct drbd_thread *thi ) ;
#line 1495
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1496
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1497
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1498
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1499
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1503
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1505 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 


  {
#line 1507
  if (mdev->ov_last_oos_size != 0UL) {
#line 1508
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Out of sync: start=%llu, size=%lu (sectors)\n",
            (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1512
  mdev->ov_last_oos_size = 0UL;
#line 1513
  return;
}
}
#line 1516
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) ;
#line 1517
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) ;
#line 1520
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1521
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1522
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1523
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1524
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1525
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1526
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1527
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1529
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1530
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1531
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1532
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1533
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1534
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1536
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1538
void resync_timer_fn(unsigned long data ) ;
#line 1541
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) ;
#line 1542
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) ;
#line 1545
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1550
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) ;
#line 1565 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1569
  if (level == 1) {
#line 1570
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1572
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1574
  return (err);
}
}
#line 1577 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1579
  val = 1;
#line 1580
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1582
  return;
}
}
#line 1584 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1586
  val = 0;
#line 1587
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1589
  return;
}
}
#line 1614
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1615
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1616
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1618
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1619
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1620
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1621
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1624
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1628
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1706 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct page *page_chain_next(struct page *page ) 
{ 


  {
#line 1708
  return ((struct page *)page->ldv_12266.ldv_12263.private);
}
}
#line 1729 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1731
  page = e->pages;
#line 1732
  goto ldv_44946;
  ldv_44945: 
#line 1733
  tmp = page_count(page);
#line 1733
  if (tmp > 1) {
#line 1734
    return (1);
  } else {

  }
#line 1732
  page = page_chain_next(page);
  ldv_44946: ;
#line 1732
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1732
    tmp___0 = page_chain_next(page);
#line 1732
    __builtin_prefetch((void const   *)tmp___0);
#line 1732
    if (1 != 0) {
#line 1733
      goto ldv_44945;
    } else {
#line 1735
      goto ldv_44947;
    }
  } else {

  }
  ldv_44947: ;
#line 1736
  return (0);
}
}
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1742
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1742
  if (tmp == 0) {
#line 1742
    goto ldv_44951;
  } else {

  }
#line 1742
  tmp___0 = get_current();
#line 1742
  __wait.flags = 0U;
#line 1742
  __wait.private = (void *)tmp___0;
#line 1742
  __wait.func = & autoremove_wake_function;
#line 1742
  __wait.task_list.next = & __wait.task_list;
#line 1742
  __wait.task_list.prev = & __wait.task_list;
  ldv_44954: 
#line 1742
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1742
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1742
  if (tmp___1 == 0) {
#line 1742
    goto ldv_44953;
  } else {

  }
#line 1742
  schedule();
#line 1742
  goto ldv_44954;
  ldv_44953: 
#line 1742
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_44951: ;
#line 1745
  return;
}
}
#line 1746 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1748
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1749
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1750
  return;
}
}
#line 1783 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1785
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1787
  if (forcedetach == 0) {
#line 1788
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1788
    if (tmp != 0) {
#line 1789
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1790
    goto ldv_44977;
  } else {

  }
  case 2: ;
  case 1: 
#line 1795
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1796
  if ((int )mdev->state.ldv_35955.disk > 2) {
#line 1797
    __ns.i = mdev->state.i;
#line 1797
    __ns.ldv_35955.disk = 2U;
#line 1797
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1801
  goto ldv_44977;
  }
  ldv_44977: ;
#line 1804
  return;
}
}
#line 1862 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 
  loff_t tmp ;
  sector_t tmp___0 ;

  {
#line 1865
  if ((unsigned long )bdev != (unsigned long )((struct block_device *)0)) {
#line 1865
    tmp = i_size_read((struct inode  const  *)bdev->bd_inode);
#line 1865
    tmp___0 = (sector_t )(tmp >> 9);
  } else {
#line 1865
    tmp___0 = 0UL;
  }
#line 1865
  return (tmp___0);
}
}
#line 1944 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1947
  tmp = spinlock_check(& q->q_lock);
#line 1947
  flags = _raw_spin_lock_irqsave(tmp);
#line 1948
  list_add_tail(& w->list, & q->q);
#line 1949
  up(& q->s);
#line 1951
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1952
  return;
}
}
#line 1954 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1956
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1956
  if (tmp != 0) {
#line 1957
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1958
  return;
}
}
#line 1960 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1962
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1963
  wake_asender(mdev);
#line 1964
  return;
}
}
#line 1966 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1970
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1970
  return (tmp);
}
}
#line 1985 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1987
  _drbd_thread_stop(thi, 0, 1);
#line 1988
  return;
}
}
#line 2045 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2047
  atomic_inc(& mdev->rs_pending_cnt);
#line 2048
  return;
}
}
#line 2393 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2395
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2395
  if (tmp___0 != 0) {
#line 2396
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2396
    drbd_blk_run_queue(tmp);
#line 2397
    put_ldev(mdev);
  } else {

  }
#line 2399
  return;
}
}
#line 22 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 23
void drbd_endio_sec(struct bio *bio , int error ) ;
#line 24
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_make_private_bio(struct drbd_request *req , struct bio *bio_src ) 
{ 
  struct bio *bio ;

  {
#line 269
  bio = bio_clone(bio_src, 16U);
#line 271
  req->private_bio = bio;
#line 273
  bio->bi_private = (void *)req;
#line 274
  bio->bi_end_io = & drbd_endio_pri;
#line 275
  bio->bi_next = 0;
#line 276
  return;
}
}
#line 320
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 322
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 327 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 329
  mdev = req->mdev;
#line 334
  rv = __req_mod(req, what, & m);
#line 335
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 336
    complete_master_bio(mdev, & m);
  } else {

  }
#line 338
  return (rv);
}
}
#line 343 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  int rv ;

  {
#line 346
  mdev = req->mdev;
#line 350
  spin_lock_irq(& mdev->req_lock);
#line 351
  rv = __req_mod(req, what, & m);
#line 352
  spin_unlock_irq(& mdev->req_lock);
#line 354
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 355
    complete_master_bio(mdev, & m);
  } else {

  }
#line 357
  return (rv);
}
}
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 83
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 84
  md_io->error = error;
#line 86
  complete(& md_io->event);
#line 87
  return;
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 94
  flags = 0UL;
#line 95
  mdev = e->mdev;
#line 97
  if (e->ldv_43398.block_id == 0ULL) {
#line 97
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            97);
  } else {

  }
#line 99
  tmp = spinlock_check(& mdev->req_lock);
#line 99
  flags = _raw_spin_lock_irqsave(tmp);
#line 100
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 101
  list_del(& e->w.list);
#line 102
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 102
  if (tmp___0 != 0) {
#line 103
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 104
  tmp___1 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 104
  if (tmp___1 != 0) {
#line 105
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_read_sec_final");
  } else {

  }
#line 106
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 108
  drbd_queue_work(& mdev->data.work, & e->w);
#line 109
  put_ldev(mdev);
#line 110
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void drbd_endio_write_sec_final(struct drbd_epoch_entry *e ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 116
  flags = 0UL;
#line 117
  mdev = e->mdev;
#line 123
  if (e->ldv_43398.block_id == 0ULL) {
#line 123
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id != ID_VACANT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            123);
  } else {

  }
#line 129
  e_sector = e->sector;
#line 130
  do_al_complete_io = (int )e->flags & 1;
#line 131
  is_syncer_req = e->ldv_43398.block_id == 0xffffffffffffffffULL;
#line 133
  tmp = spinlock_check(& mdev->req_lock);
#line 133
  flags = _raw_spin_lock_irqsave(tmp);
#line 134
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 135
  list_del(& e->w.list);
#line 136
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 143
  if (is_syncer_req != 0) {
#line 143
    tmp___0 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 143
    do_wake = tmp___0;
  } else {
#line 143
    tmp___1 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 143
    do_wake = tmp___1;
  }
#line 147
  tmp___2 = constant_test_bit(3U, (unsigned long const volatile   *)(& e->flags));
#line 147
  if (tmp___2 != 0) {
#line 148
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec_final");
  } else {

  }
#line 149
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 151
  if (is_syncer_req != 0) {
#line 152
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 154
  if (do_wake != 0) {
#line 155
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 157
  if (do_al_complete_io != 0) {
#line 158
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 160
  wake_asender(mdev);
#line 161
  put_ldev(mdev);
#line 162
  return;
}
}
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_sec(struct bio *bio , int error ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  int is_write ;
  int tmp ;

  {
#line 169
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 170
  mdev = e->mdev;
#line 171
  uptodate = (int )bio->bi_flags & 1;
#line 172
  is_write = (int )bio->bi_rw & 1;
#line 174
  if (error != 0) {
#line 175
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: error=%d s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", error, (unsigned long long )e->sector);
  } else {

  }
#line 178
  if (error == 0 && uptodate == 0) {
#line 179
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: setting error to -EIO s=%llus\n",
             is_write != 0 ? (char *)"write" : (char *)"read", (unsigned long long )e->sector);
#line 185
    error = -5;
  } else {

  }
#line 188
  if (error != 0) {
#line 189
    set_bit(3U, (unsigned long volatile   *)(& e->flags));
  } else {

  }
#line 191
  bio_put(bio);
#line 192
  tmp = atomic_dec_and_test(& e->pending_bios);
#line 192
  if (tmp != 0) {
#line 193
    if (is_write != 0) {
#line 194
      drbd_endio_write_sec_final(e);
    } else {
#line 196
      drbd_endio_read_sec_final(e);
    }
  } else {

  }
#line 197
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  enum drbd_req_event what ;
  int uptodate ;
  long tmp ;
  void *tmp___0 ;

  {
#line 204
  req = (struct drbd_request *)bio->bi_private;
#line 205
  mdev = req->mdev;
#line 207
  uptodate = (int )bio->bi_flags & 1;
#line 209
  if (error == 0 && uptodate == 0) {
#line 210
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "p %s: setting error to -EIO\n",
             (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 215
    error = -5;
  } else {

  }
#line 219
  tmp = __builtin_expect(error != 0, 0L);
#line 219
  if (tmp != 0L) {
#line 220
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 1025UL) == 0UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 226
    what = completed_ok;
  }
#line 228
  bio_put(req->private_bio);
#line 229
  tmp___0 = ERR_PTR((long )error);
#line 229
  req->private_bio = (struct bio *)tmp___0;
#line 231
  req_mod(req, what);
#line 232
  return;
}
}
#line 234 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int tmp ;

  {
#line 236
  __mptr = (struct drbd_work  const  *)w;
#line 236
  req = (struct drbd_request *)__mptr;
#line 242
  spin_lock_irq(& mdev->req_lock);
#line 243
  if (cancel != 0 || *((unsigned int *)mdev + 503UL) != 65536U) {
#line 244
    _req_mod(req, read_retry_remote_canceled);
#line 245
    spin_unlock_irq(& mdev->req_lock);
#line 246
    return (1);
  } else {

  }
#line 248
  spin_unlock_irq(& mdev->req_lock);
#line 250
  tmp = w_send_read_req(mdev, w, 0);
#line 250
  return (tmp);
}
}
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;

  {
#line 255
  _b = cancel != 0;
#line 255
  if (_b != 0) {
#line 255
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "w_resync_inactive", (char *)"cancel", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            255);
  } else {

  }
#line 255
  if (_b != 0) {
#line 255
    return (1);
  } else {

  }
#line 256
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "resync inactive, but callback triggered??\n");
#line 257
  return (1);
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_ee(struct drbd_conf *mdev , struct crypto_hash *tfm , struct drbd_epoch_entry *e ,
                  void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct page *page ;
  struct page *tmp ;
  unsigned int len ;

  {
#line 264
  page = e->pages;
#line 268
  desc.tfm = tfm;
#line 269
  desc.flags = 0U;
#line 271
  sg_init_table(& sg, 1U);
#line 272
  crypto_hash_init(& desc);
#line 274
  goto ldv_45431;
  ldv_45430: 
#line 276
  sg_set_page(& sg, page, 4096U, 0U);
#line 277
  crypto_hash_update(& desc, & sg, sg.length);
#line 278
  page = tmp;
  ldv_45431: 
#line 274
  tmp = page_chain_next(page);
#line 274
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 275
    goto ldv_45430;
  } else {

  }
#line 281
  len = e->size & 4095U;
#line 282
  sg_set_page(& sg, page, len != 0U ? len : 4096U, 0U);
#line 283
  crypto_hash_update(& desc, & sg, sg.length);
#line 284
  crypto_hash_final(& desc, (u8 *)digest);
#line 285
  return;
}
}
#line 287 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum_bio(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
                   void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 294
  desc.tfm = tfm;
#line 295
  desc.flags = 0U;
#line 297
  sg_init_table(& sg, 1U);
#line 298
  crypto_hash_init(& desc);
#line 300
  bvec = bio->bi_io_vec;
#line 300
  i = 0;
#line 300
  goto ldv_45444;
  ldv_45443: 
#line 301
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 302
  crypto_hash_update(& desc, & sg, sg.length);
#line 300
  bvec = bvec + 1;
#line 300
  i = i + 1;
  ldv_45444: ;
#line 300
  if ((int )bio->bi_vcnt > i) {
#line 301
    goto ldv_45443;
  } else {

  }
#line 304
  crypto_hash_final(& desc, (u8 *)digest);
#line 305
  return;
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  unsigned int tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 309
  __mptr = (struct drbd_work  const  *)w;
#line 309
  e = (struct drbd_epoch_entry *)__mptr;
#line 314
  if (e->ldv_43398.block_id != 2205466966ULL) {
#line 314
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            314);
  } else {

  }
#line 316
  tmp = __builtin_expect(cancel != 0, 0L);
#line 316
  if (tmp != 0L) {
#line 317
    drbd_free_some_ee(mdev, e, 0);
#line 318
    return (1);
  } else {

  }
#line 321
  tmp___1 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 321
  if (tmp___1 != 0L) {
#line 322
    tmp___0 = crypto_hash_digestsize(mdev->csums_tfm);
#line 322
    digest_size = (int )tmp___0;
#line 323
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 324
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 325
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 327
      inc_rs_pending(mdev);
#line 328
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 334
      kfree((void const   *)digest);
    } else {
#line 336
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc() of digest failed.\n");
#line 337
      ok = 0;
    }
  } else {
#line 340
    ok = 1;
  }
#line 342
  drbd_free_some_ee(mdev, e, 0);
#line 344
  tmp___2 = __builtin_expect(ok == 0, 0L);
#line 344
  if (tmp___2 != 0L) {
#line 345
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest(..., csum) failed\n");
  } else {

  }
#line 346
  return (ok);
}
}
#line 351 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 355
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 355
  if (tmp == 0) {
#line 356
    return (-5);
  } else {

  }
#line 358
  tmp___0 = drbd_rs_should_slow_down(mdev);
#line 358
  if (tmp___0 != 0) {
#line 359
    goto defer;
  } else {

  }
#line 363
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 364
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 365
    goto defer;
  } else {

  }
#line 367
  e->w.cb = & w_e_send_csum;
#line 368
  spin_lock_irq(& mdev->req_lock);
#line 369
  list_add(& e->w.list, & mdev->read_ee);
#line 370
  spin_unlock_irq(& mdev->req_lock);
#line 372
  atomic_add(size >> 9, & mdev->rs_sect_ev);
#line 373
  tmp___1 = drbd_submit_ee(mdev, e, 0U, 3);
#line 373
  if (tmp___1 == 0) {
#line 374
    return (0);
  } else {

  }
#line 379
  spin_lock_irq(& mdev->req_lock);
#line 380
  list_del(& e->w.list);
#line 381
  spin_unlock_irq(& mdev->req_lock);
#line 383
  drbd_free_some_ee(mdev, e, 0);
  defer: 
#line 385
  put_ldev(mdev);
#line 386
  return (-11);
}
}
#line 389 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;
  int queue ;
  int tmp ;

  {
#line 391
  mdev = (struct drbd_conf *)data;
#line 394
  queue = 1;
#line 395
  switch ((int )mdev->state.ldv_35955.conn) {
  case 18: 
#line 397
  mdev->resync_work.cb = & w_make_ov_request;
#line 398
  goto ldv_45470;
  case 17: 
#line 400
  mdev->resync_work.cb = & w_make_resync_request;
#line 401
  goto ldv_45470;
  default: 
#line 403
  queue = 0;
#line 404
  mdev->resync_work.cb = & w_resync_inactive;
  }
  ldv_45470: 
#line 408
  tmp = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 408
  if (tmp != 0 && queue != 0) {
#line 409
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 410
  return;
}
}
#line 412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_set(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 416
  i = 0;
#line 416
  goto ldv_45479;
  ldv_45478: 
#line 417
  *(fb->values + (unsigned long )i) = value;
#line 416
  i = i + 1;
  ldv_45479: ;
#line 416
  if ((unsigned int )i < fb->size) {
#line 417
    goto ldv_45478;
  } else {

  }

#line 421
  return;
}
}
#line 420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int fifo_push(struct fifo_buffer *fb , int value ) 
{ 
  int ov ;
  unsigned int tmp ;

  {
#line 424
  ov = *(fb->values + (unsigned long )fb->head_index);
#line 425
  tmp = fb->head_index;
#line 425
  fb->head_index = fb->head_index + 1U;
#line 425
  *(fb->values + (unsigned long )tmp) = value;
#line 427
  if (fb->head_index >= fb->size) {
#line 428
    fb->head_index = 0U;
  } else {

  }
#line 430
  return (ov);
}
}
#line 433 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void fifo_add_val(struct fifo_buffer *fb , int value ) 
{ 
  int i ;

  {
#line 437
  i = 0;
#line 437
  goto ldv_45492;
  ldv_45491: 
#line 438
  *(fb->values + (unsigned long )i) = *(fb->values + (unsigned long )i) + value;
#line 437
  i = i + 1;
  ldv_45492: ;
#line 437
  if ((unsigned int )i < fb->size) {
#line 438
    goto ldv_45491;
  } else {

  }

#line 442
  return;
}
}
#line 441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_rs_controller(struct drbd_conf *mdev ) 
{ 
  unsigned int sect_in ;
  unsigned int want ;
  int req_sect ;
  int correction ;
  int cps ;
  int steps ;
  int curr_corr ;
  int max_sect ;
  int tmp ;

  {
#line 452
  tmp = atomic_xchg(& mdev->rs_sect_in, 0);
#line 452
  sect_in = (unsigned int )tmp;
#line 453
  mdev->rs_in_flight = (int )((unsigned int )mdev->rs_in_flight - sect_in);
#line 455
  spin_lock(& mdev->peer_seq_lock);
#line 457
  steps = (int )mdev->rs_plan_s.size;
#line 459
  if ((unsigned int )mdev->rs_in_flight + sect_in == 0U) {
#line 460
    want = (unsigned int )(((mdev->sync_conf.rate * 50) / 250) * steps);
  } else {
#line 462
    want = mdev->sync_conf.c_fill_target != 0 ? (unsigned int )mdev->sync_conf.c_fill_target : (((unsigned int )mdev->sync_conf.c_delay_target * sect_in) * 250U) / 250U;
  }
#line 466
  correction = (int )((want - (unsigned int )mdev->rs_in_flight) - (unsigned int )mdev->rs_planed);
#line 469
  cps = correction / steps;
#line 470
  fifo_add_val(& mdev->rs_plan_s, cps);
#line 471
  mdev->rs_planed = mdev->rs_planed + cps * steps;
#line 474
  curr_corr = fifo_push(& mdev->rs_plan_s, 0);
#line 475
  spin_unlock(& mdev->peer_seq_lock);
#line 476
  mdev->rs_planed = mdev->rs_planed - curr_corr;
#line 478
  req_sect = (int )(sect_in + (unsigned int )curr_corr);
#line 479
  if (req_sect < 0) {
#line 480
    req_sect = 0;
  } else {

  }
#line 482
  max_sect = (mdev->sync_conf.c_max_rate * 50) / 250;
#line 483
  if (req_sect > max_sect) {
#line 484
    req_sect = max_sect;
  } else {

  }
#line 492
  return (req_sect);
}
}
#line 495 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  int number ;
  int rollback_i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  int i ;
  long tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned long tmp___15 ;

  {
#line 500
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 500
  capacity = tmp;
#line 504
  i = 0;
#line 506
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 506
  if (tmp___0 != 0L) {
#line 507
    return (1);
  } else {

  }
#line 509
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35955.conn <= 9, 0L);
#line 509
  if (tmp___1 != 0L) {
#line 510
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_resync_request()! cstate < Connected");
#line 511
    return (0);
  } else {

  }
#line 514
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 272U) {
#line 515
    tmp___2 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35955.conn);
#line 515
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s in w_make_resync_request\n",
            tmp___2);
  } else {

  }
#line 518
  if (mdev->rs_total == 0UL) {
#line 520
    drbd_resync_finished(mdev);
#line 521
    return (1);
  } else {

  }
#line 524
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 524
  if (tmp___3 == 0) {
#line 529
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk broke down during resync!\n");
#line 530
    mdev->resync_work.cb = & w_resync_inactive;
#line 531
    return (1);
  } else {

  }
#line 536
  if (mdev->agreed_pro_version <= 93) {
#line 536
    tmp___4 = queue_max_segment_size(mdev->rq_queue);
#line 536
    max_segment_size = (int )tmp___4;
  } else {
#line 536
    max_segment_size = mdev->agreed_pro_version <= 94 ? 32768 : 131072;
  }
#line 540
  if (mdev->rs_plan_s.size != 0U) {
#line 541
    tmp___5 = drbd_rs_controller(mdev);
#line 541
    number = tmp___5 >> 3;
#line 542
    mdev->c_sync_rate = (number * 1000) / 25;
  } else {
#line 544
    mdev->c_sync_rate = mdev->sync_conf.rate;
#line 545
    number = (mdev->c_sync_rate * 25) / 1000;
  }
#line 553
  tmp___6 = drbd_rs_should_slow_down(mdev);
#line 553
  if (tmp___6 != 0) {
#line 554
    goto requeue;
  } else {

  }
#line 556
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 557
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 558
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 560
    mx = 1;
  }
#line 561
  mutex_unlock(& mdev->data.mutex);
#line 564
  if (number > mx) {
#line 565
    mx = number;
  } else {

  }
#line 568
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 569
  if (pe + number > mx) {
#line 570
    number = mx - pe;
  } else {

  }
#line 573
  i = 0;
#line 573
  goto ldv_45538;
  ldv_45537: 
#line 575
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 576
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 577
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 578
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 580
    queued = 1;
#line 581
    sndbuf = 0;
  }
#line 583
  mutex_unlock(& mdev->data.mutex);
#line 584
  if (sndbuf / 2 < queued) {
#line 585
    goto requeue;
  } else {

  }
  next_sector: 
#line 588
  size = 4096;
#line 589
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 591
  if (bit == 0xffffffffffffffffUL) {
#line 592
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 593
    mdev->resync_work.cb = & w_resync_inactive;
#line 594
    put_ldev(mdev);
#line 595
    return (1);
  } else {

  }
#line 598
  sector = bit << 3;
#line 600
  tmp___7 = drbd_try_rs_begin_io(mdev, sector);
#line 600
  if (tmp___7 != 0) {
#line 601
    mdev->bm_resync_fo = bit;
#line 602
    goto requeue;
  } else {

  }
#line 604
  mdev->bm_resync_fo = bit + 1UL;
#line 606
  tmp___8 = drbd_bm_test_bit(mdev, bit);
#line 606
  tmp___9 = __builtin_expect(tmp___8 == 0, 0L);
#line 606
  if (tmp___9 != 0L) {
#line 607
    drbd_rs_complete_io(mdev, sector);
#line 608
    goto next_sector;
  } else {

  }
#line 618
  align = 1;
#line 619
  rollback_i = i;
  ldv_45526: ;
#line 621
  if (size + 4096 > max_segment_size) {
#line 622
    goto ldv_45525;
  } else {

  }
#line 625
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 626
    goto ldv_45525;
  } else {

  }
#line 629
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 630
    goto ldv_45525;
  } else {

  }
#line 636
  tmp___10 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 636
  if (tmp___10 != 1) {
#line 637
    goto ldv_45525;
  } else {

  }
#line 638
  bit = bit + 1UL;
#line 639
  size = size + 4096;
#line 640
  if (4096 << align <= size) {
#line 641
    align = align + 1;
  } else {

  }
#line 642
  i = i + 1;
#line 643
  goto ldv_45526;
  ldv_45525: ;
#line 646
  if (size > 4096) {
#line 647
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 651
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 652
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 653
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 654
    tmp___11 = read_for_csum(mdev, sector, size);
#line 654
    switch (tmp___11) {
    case -5: 
#line 656
    put_ldev(mdev);
#line 657
    return (0);
    case -11: 
#line 659
    drbd_rs_complete_io(mdev, sector);
#line 660
    mdev->bm_resync_fo = sector >> 3;
#line 661
    i = rollback_i;
#line 662
    goto requeue;
    case 0: ;
#line 665
    goto ldv_45530;
    default: 
#line 667
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"),
                         "i" (667), "i" (12UL));
    ldv_45532: ;
#line 667
    goto ldv_45532;
    }
    ldv_45530: ;
  } else {
#line 670
    inc_rs_pending(mdev);
#line 671
    tmp___14 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 671
    if (tmp___14 == 0) {
#line 673
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_drequest() failed, aborting...\n");
#line 674
      atomic_dec(& mdev->rs_pending_cnt);
#line 674
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 674
      if (tmp___13 < 0) {
#line 674
        tmp___12 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 674
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_make_resync_request", 674, tmp___12);
      } else {

      }
#line 675
      put_ldev(mdev);
#line 676
      return (0);
    } else {

    }
  }
#line 573
  i = i + 1;
  ldv_45538: ;
#line 573
  if (i < number) {
#line 574
    goto ldv_45537;
  } else {

  }
#line 681
  tmp___15 = drbd_bm_bits(mdev);
#line 681
  if (mdev->bm_resync_fo >= tmp___15) {
#line 688
    mdev->resync_work.cb = & w_resync_inactive;
#line 689
    put_ldev(mdev);
#line 690
    return (1);
  } else {

  }
  requeue: 
#line 694
  mdev->rs_in_flight = mdev->rs_in_flight + (i << 3);
#line 695
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 696
  put_ldev(mdev);
#line 697
  return (1);
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 704
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 704
  capacity = tmp;
#line 706
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 706
  if (tmp___0 != 0L) {
#line 707
    return (1);
  } else {

  }
#line 709
  tmp___1 = __builtin_expect((int )mdev->state.ldv_35955.conn <= 9, 0L);
#line 709
  if (tmp___1 != 0L) {
#line 710
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Confused in w_make_ov_request()! cstate < Connected");
#line 711
    return (0);
  } else {

  }
#line 714
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 715
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 715
  if (tmp___2 > number) {
#line 716
    goto requeue;
  } else {

  }
#line 718
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 718
  number = number - tmp___3;
#line 720
  sector = mdev->ov_position;
#line 721
  i = 0;
#line 721
  goto ldv_45556;
  ldv_45555: ;
#line 722
  if (sector >= capacity) {
#line 723
    mdev->resync_work.cb = & w_resync_inactive;
#line 724
    return (1);
  } else {

  }
#line 727
  size = 4096;
#line 729
  tmp___4 = drbd_try_rs_begin_io(mdev, sector);
#line 729
  if (tmp___4 != 0) {
#line 730
    mdev->ov_position = sector;
#line 731
    goto requeue;
  } else {

  }
#line 734
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 735
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 737
  inc_rs_pending(mdev);
#line 738
  tmp___7 = drbd_send_ov_request(mdev, sector, size);
#line 738
  if (tmp___7 == 0) {
#line 739
    atomic_dec(& mdev->rs_pending_cnt);
#line 739
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 739
    if (tmp___6 < 0) {
#line 739
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 739
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "w_make_ov_request", 739, tmp___5);
    } else {

    }
#line 740
    return (0);
  } else {

  }
#line 742
  sector = sector + 8UL;
#line 721
  i = i + 1;
  ldv_45556: ;
#line 721
  if (i < number) {
#line 722
    goto ldv_45555;
  } else {

  }
#line 744
  mdev->ov_position = sector;
  requeue: 
#line 747
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 748
  return (1);
}
}
#line 752 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 754
  kfree((void const   *)w);
#line 755
  ov_oos_print(mdev);
#line 756
  drbd_resync_finished(mdev);
#line 758
  return (1);
}
}
#line 761 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 763
  kfree((void const   *)w);
#line 765
  drbd_resync_finished(mdev);
#line 767
  return (1);
}
}
#line 770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void ping_peer(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 772
  clear_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 773
  request_ping(mdev);
#line 774
  tmp = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 774
  if (tmp != 0 || (int )mdev->state.ldv_35955.conn <= 9) {
#line 774
    goto ldv_45571;
  } else {

  }
#line 774
  tmp___0 = get_current();
#line 774
  __wait.flags = 0U;
#line 774
  __wait.private = (void *)tmp___0;
#line 774
  __wait.func = & autoremove_wake_function;
#line 774
  __wait.task_list.next = & __wait.task_list;
#line 774
  __wait.task_list.prev = & __wait.task_list;
  ldv_45574: 
#line 774
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 774
  tmp___1 = constant_test_bit(26U, (unsigned long const volatile   *)(& mdev->flags));
#line 774
  if (tmp___1 != 0 || (int )mdev->state.ldv_35955.conn <= 9) {
#line 774
    goto ldv_45573;
  } else {

  }
#line 774
  schedule();
#line 774
  goto ldv_45574;
  ldv_45573: 
#line 774
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45571: ;
#line 777
  return;
}
}
#line 778 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  int i ;
  int i___0 ;
  int tmp___3 ;

  {
#line 784
  khelper_cmd = 0;
#line 789
  tmp___1 = drbd_rs_del_all(mdev);
#line 789
  if (tmp___1 != 0) {
#line 795
    drbd_kick_lo(mdev);
#line 796
    tmp = get_current();
#line 796
    tmp->state = 1L;
#line 797
    schedule_timeout(25L);
#line 798
    tmp___0 = kmalloc___0(24UL, 32U);
#line 798
    w = (struct drbd_work *)tmp___0;
#line 799
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 800
      w->cb = & w_resync_finished;
#line 801
      drbd_queue_work(& mdev->data.work, w);
#line 802
      return (1);
    } else {

    }
#line 804
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Warn failed to drbd_rs_del_all() and to kmalloc(w).\n");
  } else {

  }
#line 807
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 808
  if (dt == 0UL) {
#line 809
    dt = 1UL;
  } else {

  }
#line 810
  db = mdev->rs_total;
#line 811
  dbdt = db / dt << 2;
#line 812
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 814
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 814
  if (tmp___2 == 0) {
#line 815
    goto out;
  } else {

  }
#line 817
  ping_peer(mdev);
#line 819
  spin_lock_irq(& mdev->req_lock);
#line 820
  os = mdev->state;
#line 824
  if ((int )os.ldv_35955.conn <= 10) {
#line 825
    goto out_unlock;
  } else {

  }
#line 827
  ns = os;
#line 828
  ns.ldv_35955.conn = 10U;
#line 830
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s done (total %lu sec; paused %lu sec; %lu K/sec)\n",
            (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
            mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 835
  n_oos = drbd_bm_total_weight(mdev);
#line 837
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 838
    if (n_oos != 0UL) {
#line 839
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online verify found %lu %dk block out of sync!\n",
                n_oos, 4);
#line 841
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 844
      if (mdev->rs_failed != n_oos) {
#line 844
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                844);
      } else {

      }
#line 846
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 847
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 849
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 850
        s = mdev->rs_same_csum;
#line 851
        t = mdev->rs_total;
#line 852
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 855
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
                  ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
                  mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 864
  if (mdev->rs_failed != 0UL) {
#line 865
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "            %lu failed blocks\n",
              mdev->rs_failed);
#line 867
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 868
      ns.ldv_35955.disk = 4U;
#line 869
      ns.ldv_35955.pdsk = 8U;
    } else {
#line 871
      ns.ldv_35955.disk = 8U;
#line 872
      ns.ldv_35955.pdsk = 4U;
    }
  } else {
#line 875
    ns.ldv_35955.disk = 8U;
#line 876
    ns.ldv_35955.pdsk = 8U;
#line 878
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 879
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 881
        i = 1;
#line 881
        goto ldv_45593;
        ldv_45592: 
#line 882
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 881
        i = i + 1;
        ldv_45593: ;
#line 881
        if (i <= 3) {
#line 882
          goto ldv_45592;
        } else {

        }
#line 883
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 884
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 886
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "mdev->p_uuid is NULL! BUG\n");
      }
    } else {

    }
#line 890
    drbd_uuid_set_bm(mdev, 0ULL);
#line 892
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 896
      i___0 = 0;
#line 896
      goto ldv_45597;
      ldv_45596: 
#line 897
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 896
      i___0 = i___0 + 1;
      ldv_45597: ;
#line 896
      if (i___0 <= 3) {
#line 897
        goto ldv_45596;
      } else {

      }

    } else {

    }
  }
#line 901
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 903
  spin_unlock_irq(& mdev->req_lock);
#line 904
  put_ldev(mdev);
  out: 
#line 906
  mdev->rs_total = 0UL;
#line 907
  mdev->rs_failed = 0UL;
#line 908
  mdev->rs_paused = 0UL;
#line 909
  mdev->ov_start_sector = 0UL;
#line 911
  drbd_md_sync(mdev);
#line 913
  tmp___3 = test_and_clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 913
  if (tmp___3 != 0) {
#line 914
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap\n");
#line 915
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 918
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 919
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 921
  return (1);
}
}
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int i ;
  int tmp ;

  {
#line 927
  tmp = drbd_ee_has_active_page(e);
#line 927
  if (tmp != 0) {
#line 929
    i = (int )(((unsigned long )e->size + 4095UL) >> 12);
#line 930
    atomic_add(i, & mdev->pp_in_use_by_net);
#line 931
    atomic_sub(i, & mdev->pp_in_use);
#line 932
    spin_lock_irq(& mdev->req_lock);
#line 933
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 934
    spin_unlock_irq(& mdev->req_lock);
#line 935
    __wake_up(& drbd_pp_wait, 3U, 1, 0);
  } else {
#line 937
    drbd_free_some_ee(mdev, e, 0);
  }
#line 938
  return;
}
}
#line 946 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;

  {
#line 948
  __mptr = (struct drbd_work  const  *)w;
#line 948
  e = (struct drbd_epoch_entry *)__mptr;
#line 951
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 951
  if (tmp___1 != 0L) {
#line 952
    drbd_free_some_ee(mdev, e, 0);
#line 953
    atomic_dec(& mdev->unacked_cnt);
#line 953
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 953
    if (tmp___0 < 0) {
#line 953
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 953
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_data_req", 953, tmp);
    } else {

    }
#line 954
    return (1);
  } else {

  }
#line 957
  tmp___3 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 957
  if (tmp___3 != 0L) {
#line 958
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 960
    tmp___2 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_data_req");
#line 960
    if (tmp___2 != 0) {
#line 961
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. sector=%llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 964
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 967
  atomic_dec(& mdev->unacked_cnt);
#line 967
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 967
  if (tmp___5 < 0) {
#line 967
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 967
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_data_req", 967, tmp___4);
  } else {

  }
#line 969
  move_to_net_ee_or_free(mdev, e);
#line 971
  tmp___6 = __builtin_expect(ok == 0, 0L);
#line 971
  if (tmp___6 != 0L) {
#line 972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 973
  return (ok);
}
}
#line 982 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 984
  __mptr = (struct drbd_work  const  *)w;
#line 984
  e = (struct drbd_epoch_entry *)__mptr;
#line 987
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 987
  if (tmp___1 != 0L) {
#line 988
    drbd_free_some_ee(mdev, e, 0);
#line 989
    atomic_dec(& mdev->unacked_cnt);
#line 989
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 989
    if (tmp___0 < 0) {
#line 989
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 989
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_rsdata_req", 989, tmp);
    } else {

    }
#line 990
    return (1);
  } else {

  }
#line 993
  tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 993
  if (tmp___2 != 0) {
#line 994
    drbd_rs_complete_io(mdev, e->sector);
#line 995
    put_ldev(mdev);
  } else {

  }
#line 998
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 998
  if (tmp___6 != 0L) {
#line 999
    tmp___4 = __builtin_expect((int )mdev->state.ldv_35955.pdsk > 3, 1L);
#line 999
    if (tmp___4 != 0L) {
#line 1000
      inc_rs_pending(mdev);
#line 1001
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 1003
      tmp___3 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1003
      if (tmp___3 != 0) {
#line 1004
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not sending RSDataReply, partner DISKLESS!\n");
      } else {

      }
#line 1006
      ok = 1;
    }
  } else {
#line 1009
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_rsdata_req");
#line 1009
    if (tmp___5 != 0) {
#line 1010
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegRSDReply. sector %llus.\n",
              (unsigned long long )e->sector);
    } else {

    }
#line 1013
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1016
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 1019
  atomic_dec(& mdev->unacked_cnt);
#line 1019
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1019
  if (tmp___8 < 0) {
#line 1019
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1019
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_rsdata_req", 1019, tmp___7);
  } else {

  }
#line 1021
  move_to_net_ee_or_free(mdev, e);
#line 1023
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1023
  if (tmp___9 != 0L) {
#line 1024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block() failed\n");
  } else {

  }
#line 1025
  return (ok);
}
}
#line 1028 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  long tmp___9 ;

  {
#line 1030
  __mptr = (struct drbd_work  const  *)w;
#line 1030
  e = (struct drbd_epoch_entry *)__mptr;
#line 1033
  digest = 0;
#line 1034
  eq = 0;
#line 1036
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1036
  if (tmp___1 != 0L) {
#line 1037
    drbd_free_some_ee(mdev, e, 0);
#line 1038
    atomic_dec(& mdev->unacked_cnt);
#line 1038
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1038
    if (tmp___0 < 0) {
#line 1038
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1038
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_csum_rs_req", 1038, tmp);
    } else {

    }
#line 1039
    return (1);
  } else {

  }
#line 1042
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1042
  if (tmp___2 != 0) {
#line 1043
    drbd_rs_complete_io(mdev, e->sector);
#line 1044
    put_ldev(mdev);
  } else {

  }
#line 1047
  di = e->ldv_43398.digest;
#line 1049
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1049
  if (tmp___6 != 0L) {
#line 1053
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1054
      tmp___3 = crypto_hash_digestsize(mdev->csums_tfm);
#line 1054
      digest_size = (int )tmp___3;
#line 1055
      if (di->digest_size != digest_size) {
#line 1055
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1055);
      } else {

      }
#line 1056
      digest = kmalloc___0((size_t )digest_size, 16U);
    } else {

    }
#line 1058
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1059
      drbd_csum_ee(mdev, mdev->csums_tfm, e, digest);
#line 1060
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1060
      eq = tmp___4 == 0;
#line 1061
      kfree((void const   *)digest);
    } else {

    }
#line 1064
    if (eq != 0) {
#line 1065
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1065U);
#line 1067
      mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(e->size >> 12);
#line 1068
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 1070
      inc_rs_pending(mdev);
#line 1071
      e->ldv_43398.block_id = 0xffffffffffffffffULL;
#line 1072
      e->flags = e->flags & 0xffffffffffffffefUL;
#line 1073
      kfree((void const   *)di);
#line 1074
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 1077
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1078
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_csum_rs_req");
#line 1078
    if (tmp___5 != 0) {
#line 1079
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1082
  atomic_dec(& mdev->unacked_cnt);
#line 1082
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1082
  if (tmp___8 < 0) {
#line 1082
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_csum_rs_req", 1082, tmp___7);
  } else {

  }
#line 1083
  move_to_net_ee_or_free(mdev, e);
#line 1085
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 1085
  if (tmp___9 != 0L) {
#line 1086
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_send_block/ack() failed\n");
  } else {

  }
#line 1087
  return (ok);
}
}
#line 1090 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 1092
  __mptr = (struct drbd_work  const  *)w;
#line 1092
  e = (struct drbd_epoch_entry *)__mptr;
#line 1095
  ok = 1;
#line 1097
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1097
  if (tmp != 0L) {
#line 1098
    goto out;
  } else {

  }
#line 1100
  tmp___0 = __builtin_expect((e->flags & 8UL) != 0UL, 0L);
#line 1100
  if (tmp___0 != 0L) {
#line 1101
    goto out;
  } else {

  }
#line 1103
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1103
  digest_size = (int )tmp___1;
#line 1105
  digest = kmalloc___0((size_t )digest_size, 16U);
#line 1106
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1107
    drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1108
    inc_rs_pending(mdev);
#line 1109
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 1111
    if (ok == 0) {
#line 1112
      atomic_dec(& mdev->rs_pending_cnt);
#line 1112
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1112
      if (tmp___3 < 0) {
#line 1112
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1112
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
                "w_e_end_ov_req", 1112, tmp___2);
      } else {

      }
    } else {

    }
#line 1113
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1117
  drbd_free_some_ee(mdev, e, 0);
#line 1119
  atomic_dec(& mdev->unacked_cnt);
#line 1119
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1119
  if (tmp___5 < 0) {
#line 1119
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1119
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_req", 1119, tmp___4);
  } else {

  }
#line 1121
  return (ok);
}
}
#line 1124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1126
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1127
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1129
    mdev->ov_last_oos_start = sector;
#line 1130
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1132
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1132U);
#line 1133
  set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1134
  return;
}
}
#line 1136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1138
  __mptr = (struct drbd_work  const  *)w;
#line 1138
  e = (struct drbd_epoch_entry *)__mptr;
#line 1142
  eq = 0;
#line 1144
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 1144
  if (tmp___1 != 0L) {
#line 1145
    drbd_free_some_ee(mdev, e, 0);
#line 1146
    atomic_dec(& mdev->unacked_cnt);
#line 1146
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1146
    if (tmp___0 < 0) {
#line 1146
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1146
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "w_e_end_ov_reply", 1146, tmp);
    } else {

    }
#line 1147
    return (1);
  } else {

  }
#line 1152
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1152
  if (tmp___2 != 0) {
#line 1153
    drbd_rs_complete_io(mdev, e->sector);
#line 1154
    put_ldev(mdev);
  } else {

  }
#line 1157
  di = e->ldv_43398.digest;
#line 1159
  tmp___6 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1159
  if (tmp___6 != 0L) {
#line 1160
    tmp___3 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1160
    digest_size = (int )tmp___3;
#line 1161
    digest = kmalloc___0((size_t )digest_size, 16U);
#line 1162
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1163
      drbd_csum_ee(mdev, mdev->verify_tfm, e, digest);
#line 1165
      if (di->digest_size != digest_size) {
#line 1165
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( digest_size == di->digest_size ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                1165);
      } else {

      }
#line 1166
      tmp___4 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1166
      eq = tmp___4 == 0;
#line 1167
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1170
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1171
    tmp___5 = ___ratelimit(& drbd_ratelimit_state, "w_e_end_ov_reply");
#line 1171
    if (tmp___5 != 0) {
#line 1172
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending NegDReply. I guess it gets messy.\n");
    } else {

    }
  }
#line 1175
  atomic_dec(& mdev->unacked_cnt);
#line 1175
  tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1175
  if (tmp___8 < 0) {
#line 1175
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1175
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "w_e_end_ov_reply", 1175, tmp___7);
  } else {

  }
#line 1176
  if (eq == 0) {
#line 1177
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1179
    ov_oos_print(mdev);
  }
#line 1181
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1184
  drbd_free_some_ee(mdev, e, 0);
#line 1186
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1186
  if (mdev->ov_left == 0UL) {
#line 1187
    ov_oos_print(mdev);
#line 1188
    drbd_resync_finished(mdev);
  } else {

  }
#line 1191
  return (ok);
}
}
#line 1194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1196
  __mptr = (struct drbd_work  const  *)w;
#line 1196
  b = (struct drbd_wq_barrier *)__mptr;
#line 1197
  complete(& b->done);
#line 1198
  return (1);
}
}
#line 1201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1203
  __mptr = (struct drbd_work  const  *)w;
#line 1203
  b = (struct drbd_tl_epoch *)__mptr;
#line 1204
  p = & mdev->data.sbuf.barrier;
#line 1205
  ok = 1;
#line 1212
  spin_lock_irq(& mdev->req_lock);
#line 1213
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_35955.conn <= 9) {
#line 1214
    cancel = 1;
  } else {

  }
#line 1215
  spin_unlock_irq(& mdev->req_lock);
#line 1216
  if (cancel != 0) {
#line 1217
    return (1);
  } else {

  }
#line 1219
  tmp = drbd_get_data_sock(mdev);
#line 1219
  if (tmp == 0) {
#line 1220
    return (0);
  } else {

  }
#line 1221
  p->barrier = b->br_number;
#line 1225
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header80 *)p,
                      16UL, 0U);
#line 1227
  drbd_put_data_sock(mdev);
#line 1229
  return (ok);
}
}
#line 1232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1234
  if (cancel != 0) {
#line 1235
    return (1);
  } else {

  }
#line 1236
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1236
  return (tmp);
}
}
#line 1245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1247
  __mptr = (struct drbd_work  const  *)w;
#line 1247
  req = (struct drbd_request *)__mptr;
#line 1250
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1250
  if (tmp != 0L) {
#line 1251
    req_mod(req, send_canceled);
#line 1252
    return (1);
  } else {

  }
#line 1255
  ok = drbd_send_dblock(mdev, req);
#line 1256
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1258
  return (ok);
}
}
#line 1267 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1269
  __mptr = (struct drbd_work  const  *)w;
#line 1269
  req = (struct drbd_request *)__mptr;
#line 1272
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1272
  if (tmp != 0L) {
#line 1273
    req_mod(req, send_canceled);
#line 1274
    return (1);
  } else {

  }
#line 1277
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1280
  if (ok == 0) {
#line 1283
    if ((int )mdev->state.ldv_35955.conn > 9) {
#line 1284
      val.i = 0U;
#line 1284
      val.ldv_35955.conn = 5U;
#line 1284
      mask.i = 0U;
#line 1284
      mask.ldv_35955.conn = 31U;
#line 1284
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1286
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1288
  return (ok);
}
}
#line 1291 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_restart_disk_io(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 1293
  __mptr = (struct drbd_work  const  *)w;
#line 1293
  req = (struct drbd_request *)__mptr;
#line 1295
  if ((int )(req->master_bio)->bi_rw & 1 && (req->rq_state & 2048UL) != 0UL) {
#line 1296
    drbd_al_begin_io(mdev, req->sector);
  } else {

  }
#line 1302
  drbd_req_make_private_bio(req, req->master_bio);
#line 1303
  (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1304
  generic_make_request(req->private_bio);
#line 1306
  return (1);
}
}
#line 1309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;

  {
#line 1311
  odev = mdev;
  ldv_45760: ;
#line 1314
  if (odev->sync_conf.after == -1) {
#line 1315
    return (1);
  } else {

  }
#line 1316
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1317
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1317
  if (_b != 0) {
#line 1317
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_may_sync_now", (char *)"!odev", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1317);
  } else {

  }
#line 1317
  if (_b != 0) {
#line 1317
    return (1);
  } else {

  }
#line 1318
  if (((((int )odev->state.ldv_35955.conn > 15 && (int )odev->state.ldv_35955.conn <= 21) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) || (unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1322
    return (0);
  } else {

  }
#line 1323
  goto ldv_45760;
}
}
#line 1332 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1335
  rv = 0;
#line 1337
  i = 0;
#line 1337
  goto ldv_45771;
  ldv_45770: 
#line 1338
  odev = minor_to_mdev((unsigned int )i);
#line 1339
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1340
    goto ldv_45767;
  } else {

  }
#line 1341
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1342
    goto ldv_45767;
  } else {

  }
#line 1343
  tmp___0 = _drbd_may_sync_now(odev);
#line 1343
  if (tmp___0 == 0) {
#line 1344
    __ns.i = odev->state.i;
#line 1344
    __ns.ldv_35955.aftr_isp = 1U;
#line 1344
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1344
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_45767: 
#line 1337
  i = i + 1;
  ldv_45771: ;
#line 1337
  if ((unsigned int )i < minor_count) {
#line 1338
    goto ldv_45770;
  } else {

  }

#line 1348
  return (rv);
}
}
#line 1357 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1360
  rv = 0;
#line 1362
  i = 0;
#line 1362
  goto ldv_45783;
  ldv_45782: 
#line 1363
  odev = minor_to_mdev((unsigned int )i);
#line 1364
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1365
    goto ldv_45779;
  } else {

  }
#line 1366
  if ((unsigned int )*((unsigned short *)odev + 1006UL) == 0U && (unsigned int )*((unsigned char *)odev + 2013UL) == 0U) {
#line 1367
    goto ldv_45779;
  } else {

  }
#line 1368
  if ((unsigned int )*((unsigned char *)odev + 2014UL) != 0U) {
#line 1369
    tmp___0 = _drbd_may_sync_now(odev);
#line 1369
    if (tmp___0 != 0) {
#line 1370
      __ns.i = odev->state.i;
#line 1370
      __ns.ldv_35955.aftr_isp = 0U;
#line 1370
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1370
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_45779: 
#line 1362
  i = i + 1;
  ldv_45783: ;
#line 1362
  if ((unsigned int )i < minor_count) {
#line 1363
    goto ldv_45782;
  } else {

  }

#line 1375
  return (rv);
}
}
#line 1378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1380
  _raw_write_lock_irq(& global_state_lock);
#line 1381
  _drbd_resume_next(mdev);
#line 1382
  _raw_write_unlock_irq(& global_state_lock);
#line 1383
  return;
}
}
#line 1385 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1387
  _raw_write_lock_irq(& global_state_lock);
#line 1388
  _drbd_pause_after(mdev);
#line 1389
  _raw_write_unlock_irq(& global_state_lock);
#line 1390
  return;
}
}
#line 1392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1396
  if (o_minor == -1) {
#line 1397
    return (101);
  } else {

  }
#line 1398
  if (o_minor < -1) {
#line 1399
    return (132);
  } else {
#line 1398
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1398
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1399
      return (132);
    } else {

    }
  }
#line 1402
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_45796: ;
#line 1404
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1405
    return (133);
  } else {

  }
#line 1408
  if (odev->sync_conf.after == -1) {
#line 1409
    return (101);
  } else {

  }
#line 1412
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1413
  goto ldv_45796;
}
}
#line 1416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1421
  _raw_write_lock_irq(& global_state_lock);
#line 1422
  retcode = sync_after_error(mdev, na);
#line 1423
  if (retcode == 101) {
#line 1424
    mdev->sync_conf.after = na;
    ldv_45803: 
#line 1426
    changes = _drbd_pause_after(mdev);
#line 1427
    tmp = _drbd_resume_next(mdev);
#line 1427
    changes = tmp | changes;
#line 1428
    if (changes != 0) {
#line 1429
      goto ldv_45803;
    } else {

    }

  } else {

  }
#line 1430
  _raw_write_unlock_irq(& global_state_lock);
#line 1431
  return (retcode);
}
}
#line 1442 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  u64 uuid ;
  int tmp___0 ;
  unsigned long tw ;
  unsigned long tmp___1 ;
  unsigned long now ;
  int i ;
  char const   *tmp___2 ;

  {
#line 1447
  if ((int )mdev->state.ldv_35955.conn > 15) {
#line 1448
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync already running!\n");
#line 1449
    return;
  } else {

  }
#line 1453
  drbd_rs_cancel_all(mdev);
#line 1455
  if ((unsigned int )side == 17U) {
#line 1459
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1460
    r = (r >> 8) & 255;
#line 1461
    if (r > 0) {
#line 1462
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "before-resync-target handler returned %d, dropping connection.\n",
                r);
#line 1464
      val.i = 0U;
#line 1464
      val.ldv_35955.conn = 1U;
#line 1464
      mask.i = 0U;
#line 1464
      mask.ldv_35955.conn = 31U;
#line 1464
      drbd_force_state(mdev, mask, val);
#line 1465
      return;
    } else {

    }
  } else {

  }
#line 1469
  drbd_state_lock(mdev);
#line 1471
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1471
  if (tmp == 0) {
#line 1472
    drbd_state_unlock(mdev);
#line 1473
    return;
  } else {

  }
#line 1476
  if ((unsigned int )side == 17U) {
#line 1477
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1481
    get_random_bytes((void *)(& uuid), 8);
#line 1482
    drbd_uuid_set(mdev, 1, uuid);
#line 1483
    drbd_send_sync_uuid(mdev, uuid);
#line 1485
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 16U) {
#line 1485
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1485);
    } else {

    }
  }
#line 1488
  _raw_write_lock_irq(& global_state_lock);
#line 1489
  ns = mdev->state;
#line 1491
  tmp___0 = _drbd_may_sync_now(mdev);
#line 1491
  ns.ldv_35955.aftr_isp = tmp___0 == 0;
#line 1493
  ns.ldv_35955.conn = (unsigned char )side;
#line 1495
  if ((unsigned int )side == 17U) {
#line 1496
    ns.ldv_35955.disk = 4U;
  } else {
#line 1498
    ns.ldv_35955.pdsk = 4U;
  }
#line 1500
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1501
  ns = mdev->state;
#line 1503
  if ((int )ns.ldv_35955.conn <= 9) {
#line 1504
    r = 0;
  } else {

  }
#line 1506
  if (r == 1) {
#line 1507
    tmp___1 = drbd_bm_total_weight(mdev);
#line 1507
    tw = tmp___1;
#line 1508
    now = jiffies;
#line 1511
    mdev->rs_failed = 0UL;
#line 1512
    mdev->rs_paused = 0UL;
#line 1513
    mdev->rs_same_csum = 0UL;
#line 1514
    mdev->rs_last_events = 0;
#line 1515
    mdev->rs_last_sect_ev = 0;
#line 1516
    mdev->rs_total = tw;
#line 1517
    mdev->rs_start = now;
#line 1518
    i = 0;
#line 1518
    goto ldv_45820;
    ldv_45819: 
#line 1519
    mdev->rs_mark_left[i] = tw;
#line 1520
    mdev->rs_mark_time[i] = now;
#line 1518
    i = i + 1;
    ldv_45820: ;
#line 1518
    if (i <= 7) {
#line 1519
      goto ldv_45819;
    } else {

    }
#line 1522
    _drbd_pause_after(mdev);
  } else {

  }
#line 1524
  _raw_write_unlock_irq(& global_state_lock);
#line 1525
  put_ldev(mdev);
#line 1527
  if (r == 1) {
#line 1528
    tmp___2 = drbd_conn_str((enum drbd_conns )ns.ldv_35955.conn);
#line 1528
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Began resync as %s (will sync %lu KB [%lu bits set]).\n",
              tmp___2, mdev->rs_total << 2, mdev->rs_total);
#line 1533
    if (mdev->agreed_pro_version <= 94 && mdev->rs_total == 0UL) {
#line 1544
      if ((unsigned int )side == 16U) {
#line 1545
        schedule_timeout_interruptible((long )((mdev->net_conf)->ping_int * 250 + ((mdev->net_conf)->ping_timeo * 250) / 9));
      } else {

      }
#line 1548
      drbd_resync_finished(mdev);
    } else {

    }
#line 1551
    atomic_set(& mdev->rs_sect_in, 0);
#line 1552
    atomic_set(& mdev->rs_sect_ev, 0);
#line 1553
    mdev->rs_in_flight = 0;
#line 1554
    mdev->rs_planed = 0;
#line 1555
    spin_lock(& mdev->peer_seq_lock);
#line 1556
    fifo_set(& mdev->rs_plan_s, 0);
#line 1557
    spin_unlock(& mdev->peer_seq_lock);
#line 1562
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1563
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1565
    drbd_md_sync(mdev);
  } else {

  }
#line 1567
  drbd_state_unlock(mdev);
#line 1568
  return;
}
}
#line 1570 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  enum drbd_thread_state tmp___3 ;
  enum drbd_thread_state tmp___4 ;
  int _b___0 ;
  int tmp___5 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  enum drbd_thread_state tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 1572
  mdev = thi->mdev;
#line 1573
  w = 0;
#line 1574
  work_list.next = & work_list;
#line 1574
  work_list.prev = & work_list;
#line 1575
  intr = 0;
#line 1577
  tmp = mdev_to_minor(mdev);
#line 1577
  tmp___0 = get_current();
#line 1577
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1579
  goto ldv_45833;
  ldv_45843: 
#line 1580
  drbd_thread_current_set_cpu(mdev);
#line 1582
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1582
  if (tmp___1 != 0) {
#line 1583
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1584
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1585
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1586
    mutex_unlock(& mdev->data.mutex);
#line 1588
    intr = down_interruptible(& mdev->data.work.s);
#line 1590
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1591
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1592
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1593
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1596
  if (intr != 0) {
#line 1597
    if (intr != -4) {
#line 1597
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( intr == -EINTR ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1597);
    } else {

    }
#line 1598
    tmp___2 = get_current();
#line 1598
    flush_signals(tmp___2);
#line 1599
    tmp___3 = get_t_state(thi);
#line 1599
    _b = (unsigned int )tmp___3 == 1U;
#line 1599
    if (_b != 0) {
#line 1599
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_worker", (char *)"get_t_state(thi) == Running", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
              1599);
    } else {

    }
#line 1599
    if (_b != 0) {
#line 1600
      goto ldv_45833;
    } else {

    }
#line 1601
    goto ldv_45834;
  } else {

  }
#line 1604
  tmp___4 = get_t_state(thi);
#line 1604
  if ((unsigned int )tmp___4 != 1U) {
#line 1605
    goto ldv_45834;
  } else {

  }
#line 1610
  w = 0;
#line 1611
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1612
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1612
  _b___0 = tmp___5 != 0;
#line 1612
  if (_b___0 != 0) {
#line 1612
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_worker", (char *)"list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1612);
  } else {

  }
#line 1612
  if (_b___0 != 0) {
#line 1624
    spin_unlock_irq(& mdev->data.work.q_lock);
#line 1625
    goto ldv_45833;
  } else {

  }
#line 1627
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1627
  w = (struct drbd_work *)__mptr;
#line 1628
  list_del_init(& w->list);
#line 1629
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1631
  tmp___6 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_35955.conn <= 9);
#line 1631
  if (tmp___6 == 0) {
#line 1633
    if ((int )mdev->state.ldv_35955.conn > 9) {
#line 1635
      val.i = 0U;
#line 1635
      val.ldv_35955.conn = 5U;
#line 1635
      mask.i = 0U;
#line 1635
      mask.ldv_35955.conn = 31U;
#line 1635
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_45833: 
#line 1579
  tmp___7 = get_t_state(thi);
#line 1579
  if ((unsigned int )tmp___7 == 1U) {
#line 1580
    goto ldv_45843;
  } else {

  }
  ldv_45834: 
#line 1638
  tmp___8 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1638
  if (tmp___8 == 0) {
#line 1638
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1638);
  } else {

  }
#line 1639
  tmp___9 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1639
  if (tmp___9 == 0) {
#line 1639
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1639);
  } else {

  }
#line 1641
  spin_lock_irq(& mdev->data.work.q_lock);
#line 1642
  i = 0;
#line 1643
  goto ldv_45850;
  ldv_45849: 
#line 1644
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1645
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1647
  goto ldv_45847;
  ldv_45846: 
#line 1648
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1648
  w = (struct drbd_work *)__mptr___0;
#line 1649
  list_del_init(& w->list);
#line 1650
  (*(w->cb))(mdev, w, 1);
#line 1651
  i = i + 1;
  ldv_45847: 
#line 1647
  tmp___10 = list_empty((struct list_head  const  *)(& work_list));
#line 1647
  if (tmp___10 == 0) {
#line 1648
    goto ldv_45846;
  } else {

  }
#line 1654
  spin_lock_irq(& mdev->data.work.q_lock);
  ldv_45850: 
#line 1643
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1643
  if (tmp___11 == 0) {
#line 1644
    goto ldv_45849;
  } else {

  }
#line 1656
  sema_init(& mdev->data.work.s, 0);
#line 1662
  spin_unlock_irq(& mdev->data.work.q_lock);
#line 1664
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 1664
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
            1664);
  } else {

  }
#line 1667
  drbd_thread_stop(& mdev->receiver);
#line 1668
  drbd_mdev_cleanup(mdev);
#line 1670
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "worker terminated\n");
#line 1672
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1673
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1674
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1676
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 392 "include/linux/kernel.h"
extern void dump_stack(void) ;
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 78
extern struct cpumask  const  * const  cpu_possible_mask ;
#line 104 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  bool __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 107
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 107
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  if (tmp___1 != 0L) {
#line 107
    __ret_warn_on = ! __warned;
#line 107
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp != 0L) {
#line 107
      warn_slowpath_null("include/linux/cpumask.h", 107);
    } else {

    }
#line 107
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 107
    if (tmp___0 != 0L) {
#line 107
      __warned = 1;
    } else {

    }
  } else {

  }
#line 107
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 109
  return (cpu);
}
}
#line 169 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 172
  if (n != -1) {
#line 173
    cpumask_check((unsigned int )n);
  } else {

  }
#line 174
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 174
  return ((unsigned int )tmp);
}
}
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 147 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 149
  __list_del(list->prev, list->next);
#line 150
  list_add(list, head);
#line 151
  return;
}
}
#line 568 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 570
  h->next = 0;
#line 571
  h->pprev = 0;
#line 572
  return;
}
}
#line 574 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 576
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 584 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 586
  next = n->next;
#line 587
  pprev = n->pprev;
#line 588
  *pprev = next;
#line 589
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 590
    next->pprev = pprev;
  } else {

  }
#line 591
  return;
}
}
#line 600 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 602
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 602
  if (tmp == 0) {
#line 603
    __hlist_del(n);
#line 604
    INIT_HLIST_NODE(n);
  } else {

  }
#line 606
  return;
}
}
#line 608 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 610
  first = h->first;
#line 611
  n->next = first;
#line 612
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 613
    first->pprev = & n->next;
  } else {

  }
#line 614
  h->first = n;
#line 615
  n->pprev = & h->first;
#line 616
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 135 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 46 "include/linux/delay.h"
extern void msleep(unsigned int  ) ;
#line 253 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 350 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 78 "include/linux/random.h"
extern u32 random32(void) ;
#line 236 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 238
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 240
extern void sock_release(struct socket * ) ;
#line 243
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___1(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13757: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13757;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 229 "include/linux/slub_def.h"
__inline static void *kmalloc_large___1(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 231
  tmp = get_order(size);
#line 231
  order = (unsigned int )tmp;
#line 232
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 232
  ret = (void *)tmp___0;
#line 234
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 235
  trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 237
  return (ret);
}
}
#line 240 "include/linux/slub_def.h"
__inline static void *kmalloc___1(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 244
  if (0) {
#line 245
    if (size > 8192UL) {
#line 246
      tmp = kmalloc_large___1(size, flags);
#line 246
      return (tmp);
    } else {

    }
#line 248
    if ((flags & 1U) == 0U) {
#line 249
      tmp___0 = kmalloc_slab(size);
#line 249
      s = tmp___0;
#line 251
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 252
        return (16);
      } else {

      }
#line 254
      ret = kmem_cache_alloc_notrace(s, flags);
#line 256
      trace_kmalloc___1((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 258
      return (ret);
    } else {

    }
  } else {

  }
#line 261
  tmp___1 = __kmalloc(size, flags);
#line 261
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___0(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___1(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 342 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_18009: ;
#line 63
    goto ldv_18009;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_18010: ;
#line 65
    goto ldv_18010;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_18011: ;
#line 66
    goto ldv_18011;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2322 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2324
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2324
  return (tmp);
}
}
#line 2348 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2350
  tmp = test_tsk_thread_flag(p, 2);
#line 2350
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2350
  return ((int )tmp___0);
}
}
#line 293 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 480 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 483 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 485
  return;
}
}
#line 513 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 515
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1104 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1106
  return ((struct crypto_hash *)tfm);
}
}
#line 1116 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1119
  type = type & 4294967280U;
#line 1120
  mask = mask & 4294967280U;
#line 1121
  type = type | 8U;
#line 1122
  mask = mask | 14U;
#line 1124
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1124
  tmp___0 = __crypto_hash_cast(tmp);
#line 1124
  return (tmp___0);
}
}
#line 1132 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1134
  tmp = crypto_hash_tfm(tfm);
#line 1134
  crypto_free_tfm(tmp);
#line 1135
  return;
}
}
#line 1199 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1203
  tmp = crypto_hash_crt(desc->tfm);
#line 1203
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1203
  return (tmp___0);
}
}
#line 1206 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1209
  tmp = crypto_hash_crt(hash);
#line 1209
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1209
  return (tmp___0);
}
}
#line 422 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 424
  disk->part0.nr_sects = size;
#line 425
  return;
}
}
#line 47 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 49
  __might_sleep("include/linux/highmem.h", 49, 0);
#line 50
  tmp = lowmem_page_address(page);
#line 50
  return (tmp);
}
}
#line 53 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 55
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 34
extern void mempool_free(void * , mempool_t * ) ;
#line 228 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[41U] ;

  {
#line 233
  cmdnames[0] = "Data";
#line 233
  cmdnames[1] = "DataReply";
#line 233
  cmdnames[2] = "RSDataReply";
#line 233
  cmdnames[3] = "Barrier";
#line 233
  cmdnames[4] = "ReportBitMap";
#line 233
  cmdnames[5] = "BecomeSyncTarget";
#line 233
  cmdnames[6] = "BecomeSyncSource";
#line 233
  cmdnames[7] = "UnplugRemote";
#line 233
  cmdnames[8] = "DataRequest";
#line 233
  cmdnames[9] = "RSDataRequest";
#line 233
  cmdnames[10] = "SyncParam";
#line 233
  cmdnames[11] = "ReportProtocol";
#line 233
  cmdnames[12] = "ReportUUIDs";
#line 233
  cmdnames[13] = "ReportSizes";
#line 233
  cmdnames[14] = "ReportState";
#line 233
  cmdnames[15] = "ReportSyncUUID";
#line 233
  cmdnames[16] = "AuthChallenge";
#line 233
  cmdnames[17] = "AuthResponse";
#line 233
  cmdnames[18] = "StateChgRequest";
#line 233
  cmdnames[19] = "Ping";
#line 233
  cmdnames[20] = "PingAck";
#line 233
  cmdnames[21] = "RecvAck";
#line 233
  cmdnames[22] = "WriteAck";
#line 233
  cmdnames[23] = "RSWriteAck";
#line 233
  cmdnames[24] = "DiscardAck";
#line 233
  cmdnames[25] = "NegAck";
#line 233
  cmdnames[26] = "NegDReply";
#line 233
  cmdnames[27] = "NegRSDReply";
#line 233
  cmdnames[28] = "BarrierAck";
#line 233
  cmdnames[29] = "StateChgReply";
#line 233
  cmdnames[30] = "OVRequest";
#line 233
  cmdnames[31] = "OVReply";
#line 233
  cmdnames[32] = "OVResult";
#line 233
  cmdnames[33] = "CsumRSRequest";
#line 233
  cmdnames[34] = "CsumRSIsInSync";
#line 233
  cmdnames[35] = "SyncParam89";
#line 233
  cmdnames[36] = "CBitmap";
#line 233
  cmdnames[37] = 0;
#line 233
  cmdnames[38] = 0;
#line 233
  cmdnames[39] = "DelayProbe";
#line 233
  cmdnames[40] = 0;
#line 275
  if ((unsigned int )cmd == 65521U) {
#line 276
    return ("HandShakeM");
  } else {

  }
#line 277
  if ((unsigned int )cmd == 65522U) {
#line 278
    return ("HandShakeS");
  } else {

  }
#line 279
  if ((unsigned int )cmd == 65534U) {
#line 280
    return ("HandShake");
  } else {

  }
#line 281
  if ((unsigned int )cmd > 39U) {
#line 282
    return ("Unknown");
  } else {

  }
#line 283
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 304
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 307 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 317
  c->word_offset = c->bit_offset >> 6;
#line 318
  return;
}
}
#line 582 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 584
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 595 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 597
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 607 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 609
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1168
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1172
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1178
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1188
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1190
void tl_clear(struct drbd_conf *mdev ) ;
#line 1194
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1197
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1198
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1201
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) ;
#line 1203
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1212
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1214
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1215
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1219
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1221
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) ;
#line 1238
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1240
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1250
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1267
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1268
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1269
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1457
mempool_t *drbd_ee_mempool ;
#line 1459
struct page *drbd_pp_pool ;
#line 1460
spinlock_t drbd_pp_lock ;
#line 1461
int drbd_pp_vacant ;
#line 1482
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) ;
#line 1484
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) ;
#line 1485
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1486
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1487
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1490
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) ;
#line 1544
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1554
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1556
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1560
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1561
void drbd_free_tl_hash(struct drbd_conf *mdev ) ;
#line 1591 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1593
  val = 1;
#line 1594
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1596
  return;
}
}
#line 1598 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1600
  val = 2;
#line 1601
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1603
  return;
}
}
#line 1605
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1617
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1643
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1729 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_ee_has_active_page___0(struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  int tmp ;
  struct page *tmp___0 ;

  {
#line 1731
  page = e->pages;
#line 1732
  goto ldv_45221;
  ldv_45220: 
#line 1733
  tmp = page_count(page);
#line 1733
  if (tmp > 1) {
#line 1734
    return (1);
  } else {

  }
#line 1732
  page = page_chain_next(page);
  ldv_45221: ;
#line 1732
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1732
    tmp___0 = page_chain_next(page);
#line 1732
    __builtin_prefetch((void const   *)tmp___0);
#line 1732
    if (1 != 0) {
#line 1733
      goto ldv_45220;
    } else {
#line 1735
      goto ldv_45222;
    }
  } else {

  }
  ldv_45222: ;
#line 1736
  return (0);
}
}
#line 1775 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1779
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1779
  return (tmp);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1835
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1838
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1841
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1879
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1883
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1883
  if (tmp___1 != 0UL) {
#line 1883
    __min1 = 34359738368UL;
#line 1883
    tmp___0 = drbd_md_first_sector(bdev);
#line 1883
    __min2 = tmp___0;
#line 1883
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1883
    s = 0UL;
  }
#line 1886
  goto ldv_45293;
  case -2: 
#line 1888
  __min1___0 = 34359738368UL;
#line 1888
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1888
  __min2___0 = tmp___2;
#line 1888
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1891
  __min1___1 = s;
#line 1891
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1891
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1894
  goto ldv_45293;
  default: 
#line 1896
  __min1___2 = 8587575296UL;
#line 1896
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1896
  __min2___2 = tmp___3;
#line 1896
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_45293: ;
#line 1899
  return (s);
}
}
#line 1933 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1936
  tmp = spinlock_check(& q->q_lock);
#line 1936
  flags = _raw_spin_lock_irqsave(tmp);
#line 1937
  list_add(& w->list, & q->q);
#line 1938
  up(& q->s);
#line 1940
  spin_unlock_irqrestore(& q->q_lock, flags);
#line 1941
  return;
}
}
#line 1973 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1976
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1976
  return (tmp);
}
}
#line 1979 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header80 h ;
  int tmp ;

  {
#line 1982
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1982
  return (tmp);
}
}
#line 2064 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 2066
  atomic_inc(& mdev->unacked_cnt);
#line 2067
  return;
}
}
#line 2080 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 2082
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 2082
  if (tmp != 0) {
#line 2083
    __wake_up(& mdev->net_cnt_wait, 3U, 1, 0);
  } else {

  }
#line 2084
  return;
}
}
#line 2092 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 2096
  atomic_inc(& mdev->net_cnt);
#line 2097
  have_net_conf = (int )mdev->state.ldv_35955.conn > 1;
#line 2098
  if (have_net_conf == 0) {
#line 2099
    put_net_conf(mdev);
  } else {

  }
#line 2100
  return (have_net_conf);
}
}
#line 2338 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2340
  mdev->ed_uuid = val;
#line 2341
  return;
}
}
#line 2343 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2350
  return ((int )a - (int )b);
}
}
#line 2359 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2362
  spin_lock(& mdev->peer_seq_lock);
#line 2363
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2363
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2364
  mdev->peer_seq = m;
#line 2365
  spin_unlock(& mdev->peer_seq_lock);
#line 2366
  if (m == new_seq) {
#line 2367
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2368
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 33
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 34
    tmp = mdev_to_minor(mdev);
#line 34
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 37
    dump_stack();
#line 38
    bio_endio(bio, -19);
#line 39
    return;
  } else {

  }
#line 42
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 42
  if (tmp___0 != 0) {
#line 43
    bio_endio(bio, -5);
  } else {
#line 45
    generic_make_request(bio);
  }
#line 46
  return;
}
}
#line 66 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 68
  tmp = crypto_tfm_alg_type(tfm);
#line 68
  return ((tmp & 14U) == 8U);
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_45559: ;
#line 227
    goto ldv_45559;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_45564: ;
#line 236
    goto ldv_45564;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 250 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 253
  tmp = ar_hash_slot(mdev, sector);
#line 253
  slot = tmp;
#line 257
  n = slot->first;
#line 257
  goto ldv_45582;
  ldv_45581: ;
#line 258
  if ((unsigned long )req == (unsigned long )id) {
#line 259
    if (req->sector != sector) {
#line 259
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->sector == sector ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
              259);
    } else {

    }
#line 260
    return (req);
  } else {

  }
#line 257
  n = n->next;
  ldv_45582: ;
#line 257
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 257
    __builtin_prefetch((void const   *)n->next);
#line 257
    if (1 != 0) {
#line 257
      __mptr = (struct hlist_node  const  *)n;
#line 257
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 257
      if (1 != 0) {
#line 258
        goto ldv_45581;
      } else {
#line 260
        goto ldv_45583;
      }
    } else {
#line 260
      goto ldv_45583;
    }
  } else {

  }
  ldv_45583: ;
#line 263
  return (0);
}
}
#line 305 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 307
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_45635: ;
#line 162
  goto ldv_45635;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 67
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 69
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 70
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_del(struct page **head , int n ) 
{ 
  struct page *page ;
  struct page *tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 89
  tmp___0 = __builtin_expect(n == 0, 0L);
#line 89
  if (tmp___0 != 0L) {
#line 89
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (89), "i" (12UL));
    ldv_45715: ;
#line 89
    goto ldv_45715;
  } else {

  }
#line 90
  tmp___1 = __builtin_expect((unsigned long )head == (unsigned long )((struct page **)0),
                             0L);
#line 90
  if (tmp___1 != 0L) {
#line 90
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (90), "i" (12UL));
    ldv_45716: ;
#line 90
    goto ldv_45716;
  } else {

  }
#line 92
  page = *head;
#line 94
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 95
    return (0);
  } else {

  }
#line 97
  goto ldv_45719;
  ldv_45718: 
#line 98
  tmp = page_chain_next(page);
#line 99
  n = n - 1;
#line 99
  if (n == 0) {
#line 100
    goto ldv_45717;
  } else {

  }
#line 101
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 103
    return (0);
  } else {

  }
#line 104
  page = tmp;
  ldv_45719: ;
#line 97
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 98
    goto ldv_45718;
  } else {

  }
  ldv_45717: 
#line 108
  page->ldv_12266.ldv_12263.private = 0UL;
#line 110
  page = *head;
#line 111
  *head = tmp;
#line 112
  return (page);
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *page_chain_tail(struct page *page , int *len ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 121
  i = 1;
#line 122
  goto ldv_45727;
  ldv_45726: 
#line 123
  i = i + 1;
#line 123
  page = tmp;
  ldv_45727: 
#line 122
  tmp = page_chain_next(page);
#line 122
  if ((unsigned long )tmp != (unsigned long )((struct page *)0)) {
#line 123
    goto ldv_45726;
  } else {

  }

#line 124
  if ((unsigned long )len != (unsigned long )((int *)0)) {
#line 125
    *len = i;
  } else {

  }
#line 126
  return (page);
}
}
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int page_chain_free(struct page *page ) 
{ 
  struct page *tmp ;
  int i ;

  {
#line 132
  i = 0;
#line 133
  goto ldv_45736;
  ldv_45735: 
#line 134
  put_page(page);
#line 135
  i = i + 1;
#line 133
  page = tmp;
  ldv_45736: ;
#line 133
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 133
    tmp = page_chain_next(page);
#line 133
    if (1 != 0) {
#line 134
      goto ldv_45735;
    } else {
#line 136
      goto ldv_45737;
    }
  } else {

  }
  ldv_45737: ;
#line 137
  return (i);
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void page_chain_add(struct page **head , struct page *chain_first , struct page *chain_last ) 
{ 
  struct page *tmp ;
  long tmp___0 ;

  {
#line 145
  tmp = page_chain_tail(chain_first, 0);
#line 146
  tmp___0 = __builtin_expect((unsigned long )tmp != (unsigned long )chain_last, 0L);
#line 146
  if (tmp___0 != 0L) {
#line 146
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                         "i" (146), "i" (12UL));
    ldv_45744: ;
#line 146
    goto ldv_45744;
  } else {

  }
#line 150
  chain_last->ldv_12266.ldv_12263.private = (unsigned long )*head;
#line 151
  *head = chain_first;
#line 152
  return;
}
}
#line 154 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_pages_or_try_alloc(struct drbd_conf *mdev , int number ) 
{ 
  struct page *page ;
  struct page *tmp ;
  int i ;

  {
#line 156
  page = 0;
#line 157
  tmp = 0;
#line 158
  i = 0;
#line 162
  if (drbd_pp_vacant >= number) {
#line 163
    spin_lock(& drbd_pp_lock);
#line 164
    page = page_chain_del(& drbd_pp_pool, number);
#line 165
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 166
      drbd_pp_vacant = drbd_pp_vacant - number;
    } else {

    }
#line 167
    spin_unlock(& drbd_pp_lock);
#line 168
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 169
      return (page);
    } else {

    }
  } else {

  }
#line 175
  i = 0;
#line 175
  goto ldv_45754;
  ldv_45753: 
#line 176
  tmp = alloc_pages(514U, 0U);
#line 177
  if ((unsigned long )tmp == (unsigned long )((struct page *)0)) {
#line 178
    goto ldv_45752;
  } else {

  }
#line 179
  tmp->ldv_12266.ldv_12263.private = (unsigned long )page;
#line 180
  page = tmp;
#line 175
  i = i + 1;
  ldv_45754: ;
#line 175
  if (i < number) {
#line 176
    goto ldv_45753;
  } else {

  }
  ldv_45752: ;
#line 183
  if (i == number) {
#line 184
    return (page);
  } else {

  }
#line 189
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 190
    tmp = page_chain_tail(page, 0);
#line 191
    spin_lock(& drbd_pp_lock);
#line 192
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 193
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 194
    spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 196
  return (0);
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 204
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 204
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 205
    drbd_kick_lo(mdev);
  } else {

  }
#line 206
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 218
  le = mdev->net_ee.next;
#line 218
  tle = le->next;
#line 218
  goto ldv_45769;
  ldv_45768: 
#line 219
  __mptr = (struct list_head  const  *)le;
#line 219
  e = (struct drbd_epoch_entry *)__mptr;
#line 220
  tmp = drbd_ee_has_active_page___0(e);
#line 220
  if (tmp != 0) {
#line 221
    goto ldv_45767;
  } else {

  }
#line 222
  list_move(le, to_be_freed);
#line 218
  le = tle;
#line 218
  tle = le->next;
  ldv_45769: ;
#line 218
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 219
    goto ldv_45768;
  } else {

  }
  ldv_45767: ;
#line 223
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 228
  reclaimed.next = & reclaimed;
#line 228
  reclaimed.prev = & reclaimed;
#line 231
  maybe_kick_lo(mdev);
#line 232
  spin_lock_irq(& mdev->req_lock);
#line 233
  reclaim_net_ee(mdev, & reclaimed);
#line 234
  spin_unlock_irq(& mdev->req_lock);
#line 236
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 236
  e = (struct drbd_epoch_entry *)__mptr;
#line 236
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 236
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 236
  goto ldv_45783;
  ldv_45782: 
#line 237
  drbd_free_some_ee(mdev, e, 1);
#line 236
  e = t;
#line 236
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 236
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45783: ;
#line 236
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 237
    goto ldv_45782;
  } else {

  }

#line 241
  return;
}
}
#line 252 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , unsigned int number , bool retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;

  {
#line 254
  page = 0;
#line 255
  tmp = get_current();
#line 255
  wait.flags = 0U;
#line 255
  wait.private = (void *)tmp;
#line 255
  wait.func = & autoremove_wake_function;
#line 255
  wait.task_list.next = & wait.task_list;
#line 255
  wait.task_list.prev = & wait.task_list;
#line 259
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 259
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 260
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
  } else {

  }
#line 262
  goto ldv_45794;
  ldv_45793: 
#line 263
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 265
  drbd_kick_lo_and_reclaim_net(mdev);
#line 267
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 267
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 268
    page = drbd_pp_first_pages_or_try_alloc(mdev, (int )number);
#line 269
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 270
      goto ldv_45792;
    } else {

    }
  } else {

  }
#line 273
  if (! retry) {
#line 274
    goto ldv_45792;
  } else {

  }
#line 276
  tmp___2 = get_current();
#line 276
  tmp___3 = signal_pending(tmp___2);
#line 276
  if (tmp___3 != 0) {
#line 277
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_pp_alloc interrupted!\n");
#line 278
    goto ldv_45792;
  } else {

  }
#line 281
  schedule();
  ldv_45794: ;
#line 262
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 263
    goto ldv_45793;
  } else {

  }
  ldv_45792: 
#line 283
  finish_wait(& drbd_pp_wait, & wait);
#line 285
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 286
    atomic_add((int )number, & mdev->pp_in_use);
  } else {

  }
#line 287
  return (page);
}
}
#line 294 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page , int is_net ) 
{ 
  atomic_t *a ;
  int i ;
  struct page *tmp ;

  {
#line 296
  a = is_net != 0 ? & mdev->pp_in_use_by_net : & mdev->pp_in_use;
#line 299
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 32UL) {
#line 300
    i = page_chain_free(page);
  } else {
#line 303
    tmp = page_chain_tail(page, & i);
#line 304
    spin_lock(& drbd_pp_lock);
#line 305
    page_chain_add(& drbd_pp_pool, page, tmp);
#line 306
    drbd_pp_vacant = drbd_pp_vacant + i;
#line 307
    spin_unlock(& drbd_pp_lock);
  }
#line 309
  i = atomic_sub_return(i, a);
#line 310
  if (i < 0) {
#line 311
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERTION FAILED: %s: %d < 0\n",
             is_net != 0 ? (char *)"pp_in_use_by_net" : (char *)"pp_in_use", i);
  } else {

  }
#line 313
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 314
  return;
}
}
#line 331 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct drbd_epoch_entry *e ;
  struct page *page ;
  unsigned int nr_pages ;
  int tmp ;
  void *tmp___0 ;

  {
#line 339
  nr_pages = (unsigned int )(((unsigned long )data_size + 4095UL) >> 12);
#line 341
  tmp = drbd_insert_fault(mdev, 8U);
#line 341
  if (tmp != 0) {
#line 342
    return (0);
  } else {

  }
#line 344
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 344
  e = (struct drbd_epoch_entry *)tmp___0;
#line 345
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 346
    if ((gfp_mask & 512U) == 0U) {
#line 347
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "alloc_ee: Allocation of an EE failed\n");
    } else {

    }
#line 348
    return (0);
  } else {

  }
#line 351
  page = drbd_pp_alloc(mdev, nr_pages, (gfp_mask & 16U) != 0U);
#line 352
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 353
    goto fail;
  } else {

  }
#line 355
  INIT_HLIST_NODE(& e->colision);
#line 356
  e->epoch = 0;
#line 357
  e->mdev = mdev;
#line 358
  e->pages = page;
#line 359
  atomic_set(& e->pending_bios, 0);
#line 360
  e->size = data_size;
#line 361
  e->flags = 0UL;
#line 362
  e->sector = sector;
#line 363
  e->ldv_43398.block_id = id;
#line 365
  return (e);
  fail: 
#line 368
  mempool_free((void *)e, drbd_ee_mempool);
#line 369
  return (0);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_some_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , int is_net ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 374
  if ((e->flags & 16UL) != 0UL) {
#line 375
    kfree((void const   *)e->ldv_43398.digest);
  } else {

  }
#line 376
  drbd_pp_free(mdev, e->pages, is_net);
#line 377
  tmp = atomic_read((atomic_t const   *)(& e->pending_bios));
#line 377
  if (tmp != 0) {
#line 377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&e->pending_bios) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            377);
  } else {

  }
#line 378
  tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 378
  if (tmp___0 == 0) {
#line 378
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            378);
  } else {

  }
#line 379
  mempool_free((void *)e, drbd_ee_mempool);
#line 380
  return;
}
}
#line 382 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  int is_net ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 384
  work_list.next = & work_list;
#line 384
  work_list.prev = & work_list;
#line 386
  count = 0;
#line 387
  is_net = (unsigned long )(& mdev->net_ee) == (unsigned long )list;
#line 389
  spin_lock_irq(& mdev->req_lock);
#line 390
  list_splice_init(list, & work_list);
#line 391
  spin_unlock_irq(& mdev->req_lock);
#line 393
  __mptr = (struct list_head  const  *)work_list.next;
#line 393
  e = (struct drbd_epoch_entry *)__mptr;
#line 393
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 393
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 393
  goto ldv_45835;
  ldv_45834: 
#line 394
  drbd_free_some_ee(mdev, e, is_net);
#line 395
  count = count + 1;
#line 393
  e = t;
#line 393
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 393
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45835: ;
#line 393
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 394
    goto ldv_45834;
  } else {

  }

#line 397
  return (count);
}
}
#line 410 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 412
  work_list.next = & work_list;
#line 412
  work_list.prev = & work_list;
#line 413
  reclaimed.next = & reclaimed;
#line 413
  reclaimed.prev = & reclaimed;
#line 415
  ok = (int )mdev->state.ldv_35955.conn > 8;
#line 417
  spin_lock_irq(& mdev->req_lock);
#line 418
  reclaim_net_ee(mdev, & reclaimed);
#line 419
  list_splice_init(& mdev->done_ee, & work_list);
#line 420
  spin_unlock_irq(& mdev->req_lock);
#line 422
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 422
  e = (struct drbd_epoch_entry *)__mptr;
#line 422
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 422
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 422
  goto ldv_45852;
  ldv_45851: 
#line 423
  drbd_free_some_ee(mdev, e, 1);
#line 422
  e = t;
#line 422
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 422
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_45852: ;
#line 422
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 423
    goto ldv_45851;
  } else {

  }
#line 429
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 429
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 429
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 429
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 429
  goto ldv_45861;
  ldv_45860: 
#line 431
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 431
  ok = tmp != 0 && ok != 0;
#line 432
  drbd_free_some_ee(mdev, e, 0);
#line 429
  e = t;
#line 429
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 429
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_45861: ;
#line 429
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 430
    goto ldv_45860;
  } else {

  }
#line 434
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 436
  return (ok);
}
}
#line 439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 441
  tmp = get_current();
#line 441
  wait.flags = 0U;
#line 441
  wait.private = (void *)tmp;
#line 441
  wait.func = & autoremove_wake_function;
#line 441
  wait.task_list.next = & wait.task_list;
#line 441
  wait.task_list.prev = & wait.task_list;
#line 445
  goto ldv_45869;
  ldv_45868: 
#line 446
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 447
  spin_unlock_irq(& mdev->req_lock);
#line 448
  drbd_kick_lo(mdev);
#line 449
  schedule();
#line 450
  finish_wait(& mdev->ee_wait, & wait);
#line 451
  spin_lock_irq(& mdev->req_lock);
  ldv_45869: 
#line 445
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 445
  if (tmp___0 == 0) {
#line 446
    goto ldv_45868;
  } else {

  }

#line 450
  return;
}
}
#line 455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 457
  spin_lock_irq(& mdev->req_lock);
#line 458
  _drbd_wait_ee_list_empty(mdev, head);
#line 459
  spin_unlock_irq(& mdev->req_lock);
#line 460
  return;
}
}
#line 464 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 467
  sk = sock->sk;
#line 468
  err = 0;
#line 470
  *what = "listen";
#line 471
  err = (*((sock->ops)->listen))(sock, 5);
#line 472
  if (err < 0) {
#line 473
    goto out;
  } else {

  }
#line 475
  *what = "sock_create_lite";
#line 476
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 478
  if (err < 0) {
#line 479
    goto out;
  } else {

  }
#line 481
  *what = "accept";
#line 482
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 483
  if (err < 0) {
#line 484
    sock_release(*newsock);
#line 485
    *newsock = 0;
#line 486
    goto out;
  } else {

  }
#line 488
  (*newsock)->ops = sock->ops;
  out: ;
#line 491
  return (err);
}
}
#line 494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 498
  iov.iov_base = buf;
#line 498
  iov.iov_len = size;
#line 502
  msg.msg_name = 0;
#line 502
  msg.msg_namelen = 0;
#line 502
  msg.msg_iov = (struct iovec *)(& iov);
#line 502
  msg.msg_iovlen = 1UL;
#line 502
  msg.msg_control = 0;
#line 502
  msg.msg_controllen = 0UL;
#line 502
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 509
  tmp = current_thread_info();
#line 509
  oldfs = tmp->addr_limit;
#line 510
  tmp___0 = current_thread_info();
#line 510
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 510
  tmp___0->addr_limit = __constr_expr_0;
#line 511
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 512
  tmp___1 = current_thread_info();
#line 512
  tmp___1->addr_limit = oldfs;
#line 514
  return (rv);
}
}
#line 517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 520
  iov.iov_base = buf;
#line 520
  iov.iov_len = size;
#line 524
  msg.msg_name = 0;
#line 524
  msg.msg_namelen = 0;
#line 524
  msg.msg_iov = (struct iovec *)(& iov);
#line 524
  msg.msg_iovlen = 1UL;
#line 524
  msg.msg_control = 0;
#line 524
  msg.msg_controllen = 0UL;
#line 524
  msg.msg_flags = 16640U;
#line 531
  tmp = current_thread_info();
#line 531
  oldfs = tmp->addr_limit;
#line 532
  tmp___0 = current_thread_info();
#line 532
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 532
  tmp___0->addr_limit = __constr_expr_0;
  ldv_45907: 
#line 535
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 536
  if ((size_t )rv == size) {
#line 537
    goto ldv_45906;
  } else {

  }
#line 544
  if (rv < 0) {
#line 545
    if (rv == -104) {
#line 546
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was reset by peer\n");
    } else
#line 547
    if (rv != -512) {
#line 548
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
              rv);
    } else {

    }
#line 549
    goto ldv_45906;
  } else
#line 550
  if (rv == 0) {
#line 551
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock was shut down by peer\n");
#line 552
    goto ldv_45906;
  } else {
#line 558
    goto ldv_45906;
  }
#line 560
  goto ldv_45907;
  ldv_45906: 
#line 562
  tmp___1 = current_thread_info();
#line 562
  tmp___1->addr_limit = oldfs;
#line 564
  if ((size_t )rv != size) {
#line 565
    val.i = 0U;
#line 565
    val.ldv_35955.conn = 4U;
#line 565
    mask.i = 0U;
#line 565
    mask.ldv_35955.conn = 31U;
#line 565
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 567
  return (rv);
}
}
#line 575 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setbufsize(struct socket *sock , unsigned int snd , unsigned int rcv ) 
{ 


  {
#line 579
  if (snd != 0U) {
#line 580
    (sock->sk)->sk_sndbuf = (int )snd;
#line 581
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 583
  if (rcv != 0U) {
#line 584
    (sock->sk)->sk_rcvbuf = (int )rcv;
#line 585
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 587
  return;
}
}
#line 589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 595
  disconnect_on_error = 1;
#line 597
  tmp = get_net_conf(mdev);
#line 597
  if (tmp == 0) {
#line 598
    return (0);
  } else {

  }
#line 600
  what = "sock_create_kern";
#line 601
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 603
  if (err < 0) {
#line 604
    sock = 0;
#line 605
    goto out;
  } else {

  }
#line 608
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 608
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 608
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 610
  drbd_setbufsize(sock, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 620
  __min1 = (mdev->net_conf)->my_addr_len;
#line 620
  __min2 = 28;
#line 620
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 620
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 622
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 623
    src_in6.sin6_port = 0U;
  } else {
#line 625
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 627
  what = "bind before connect";
#line 628
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 631
  if (err < 0) {
#line 632
    goto out;
  } else {

  }
#line 636
  disconnect_on_error = 0;
#line 637
  what = "connect";
#line 638
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 643
  if (err < 0) {
#line 644
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 645
      sock_release(sock);
#line 646
      sock = 0;
    } else {

    }
#line 648
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 655
    disconnect_on_error = 0;
#line 656
    goto ldv_45944;
    default: 
#line 658
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
            what, err);
    }
    ldv_45944: ;
#line 660
    if (disconnect_on_error != 0) {
#line 661
      val.i = 0U;
#line 661
      val.ldv_35955.conn = 1U;
#line 661
      mask.i = 0U;
#line 661
      mask.ldv_35955.conn = 31U;
#line 661
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 663
  put_net_conf(mdev);
#line 664
  return (sock);
}
}
#line 667 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 670
  s_estab = 0;
#line 673
  tmp = get_net_conf(mdev);
#line 673
  if (tmp == 0) {
#line 674
    return (0);
  } else {

  }
#line 676
  what = "sock_create_kern";
#line 677
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 679
  if (err != 0) {
#line 680
    s_listen = 0;
#line 681
    goto out;
  } else {

  }
#line 684
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 685
  tmp___0 = random32();
#line 685
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 687
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 688
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 689
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 690
  drbd_setbufsize(s_listen, (unsigned int )(mdev->net_conf)->sndbuf_size, (unsigned int )(mdev->net_conf)->rcvbuf_size);
#line 693
  what = "bind before listen";
#line 694
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 697
  if (err < 0) {
#line 698
    goto out;
  } else {

  }
#line 700
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 703
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 704
    sock_release(s_listen);
  } else {

  }
#line 705
  if (err < 0) {
#line 706
    if ((err != -11 && err != -4) && err != -512) {
#line 707
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s failed, err = %d\n",
              what, err);
#line 708
      val.i = 0U;
#line 708
      val.ldv_35955.conn = 1U;
#line 708
      mask.i = 0U;
#line 708
      mask.ldv_35955.conn = 31U;
#line 708
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 711
  put_net_conf(mdev);
#line 713
  return (s_estab);
}
}
#line 716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header80 *h ;
  int tmp ;

  {
#line 719
  h = & mdev->data.sbuf.header.h80;
#line 721
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 721
  return (tmp);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header80 *h ;
  int rr ;
  __u16 tmp ;

  {
#line 726
  h = & mdev->data.rbuf.header.h80;
#line 729
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 731
  if (rr == 8 && h->magic == 1728214147U) {
#line 732
    tmp = __fswab16((int )h->command);
#line 732
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 734
  return (65535);
}
}
#line 742 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 747
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 748
    return (0);
  } else {

  }
#line 750
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 752
  if (rr > 0 || rr == -11) {
#line 753
    return (1);
  } else {
#line 755
    sock_release(*sock);
#line 756
    *sock = 0;
#line 757
    return (0);
  }
}
}
#line 769 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  enum drbd_packets tmp___3 ;
  u32 tmp___4 ;
  struct task_struct *tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  int tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 774
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 774
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !mdev->data.socket ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            774);
  } else {

  }
#line 776
  val.i = 0U;
#line 776
  val.ldv_35955.conn = 8U;
#line 776
  mask.i = 0U;
#line 776
  mask.ldv_35955.conn = 31U;
#line 776
  tmp = drbd_request_state(mdev, mask, val);
#line 776
  if (tmp <= 0) {
#line 777
    return (-2);
  } else {

  }
#line 779
  clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 781
  sock = 0;
#line 782
  msock = 0;
  ldv_46003: 
#line 785
  try = 0;
  ldv_45995: 
#line 787
  s = drbd_try_connect(mdev);
#line 788
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 789
    goto ldv_45994;
  } else {
#line 788
    try = try + 1;
#line 788
    if (try > 2) {
#line 789
      goto ldv_45994;
    } else {

    }
  }
#line 791
  tmp___0 = get_current();
#line 791
  tmp___0->state = 1L;
#line 792
  schedule_timeout(25L);
#line 793
  goto ldv_45995;
  ldv_45994: ;
#line 795
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 796
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 797
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 798
      sock = s;
#line 799
      s = 0;
    } else
#line 800
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 801
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 802
      msock = s;
#line 803
      s = 0;
    } else {
#line 805
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Logic error in drbd_connect()\n");
#line 806
      goto out_release_sockets;
    }
  } else {

  }
#line 810
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 811
    tmp___1 = get_current();
#line 811
    tmp___1->state = 1L;
#line 812
    schedule_timeout(25L);
#line 813
    ok = drbd_socket_okay(mdev, & sock);
#line 814
    tmp___2 = drbd_socket_okay(mdev, & msock);
#line 814
    ok = tmp___2 != 0 && ok != 0;
#line 815
    if (ok != 0) {
#line 816
      goto ldv_45997;
    } else {

    }
  } else {

  }
  retry: 
#line 820
  s = drbd_wait_for_connect(mdev);
#line 821
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 822
    tmp___3 = drbd_recv_fp(mdev, s);
#line 822
    try = (int )tmp___3;
#line 823
    drbd_socket_okay(mdev, & sock);
#line 824
    drbd_socket_okay(mdev, & msock);
#line 825
    switch (try) {
    case 65522: ;
#line 827
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 828
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet S crossed\n");
#line 829
      sock_release(sock);
    } else {

    }
#line 831
    sock = s;
#line 832
    goto ldv_46000;
    case 65521: ;
#line 834
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 835
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "initial packet M crossed\n");
#line 836
      sock_release(msock);
    } else {

    }
#line 838
    msock = s;
#line 839
    set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 840
    goto ldv_46000;
    default: 
#line 842
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error receiving initial packet\n");
#line 843
    sock_release(s);
#line 844
    tmp___4 = random32();
#line 844
    if ((int )tmp___4 & 1) {
#line 845
      goto retry;
    } else {

    }
    }
    ldv_46000: ;
  } else {

  }
#line 849
  if ((int )mdev->state.ldv_35955.conn <= 1) {
#line 850
    goto out_release_sockets;
  } else {

  }
#line 851
  tmp___7 = get_current();
#line 851
  tmp___8 = signal_pending(tmp___7);
#line 851
  if (tmp___8 != 0) {
#line 852
    tmp___5 = get_current();
#line 852
    flush_signals(tmp___5);
#line 853
    __asm__  volatile   ("": : : "memory");
#line 854
    tmp___6 = get_t_state(& mdev->receiver);
#line 854
    if ((unsigned int )tmp___6 == 2U) {
#line 855
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 858
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 859
    ok = drbd_socket_okay(mdev, & sock);
#line 860
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 860
    ok = tmp___9 != 0 && ok != 0;
#line 861
    if (ok != 0) {
#line 862
      goto ldv_45997;
    } else {

    }
  } else {

  }
#line 864
  goto ldv_46003;
  ldv_45997: 
#line 866
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 867
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 869
  (sock->sk)->sk_allocation = 16U;
#line 870
  (msock->sk)->sk_allocation = 16U;
#line 872
  (sock->sk)->sk_priority = 4U;
#line 873
  (msock->sk)->sk_priority = 6U;
#line 880
  tmp___10 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 880
  (sock->sk)->sk_rcvtimeo = tmp___10;
#line 880
  (sock->sk)->sk_sndtimeo = tmp___10;
#line 883
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 884
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 888
  drbd_tcp_nodelay(sock);
#line 889
  drbd_tcp_nodelay(msock);
#line 891
  mdev->data.socket = sock;
#line 892
  mdev->meta.socket = msock;
#line 893
  mdev->last_received = jiffies;
#line 895
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 895
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->asender.task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            895);
  } else {

  }
#line 897
  h = drbd_do_handshake(mdev);
#line 898
  if (h <= 0) {
#line 899
    return (h);
  } else {

  }
#line 901
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 903
    tmp___11 = drbd_do_auth(mdev);
#line 903
    switch (tmp___11) {
    case -1: 
#line 905
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed\n");
#line 906
    return (-1);
    case 0: 
#line 908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Authentication of peer failed, trying again.\n");
#line 909
    return (0);
    }
  } else {

  }
#line 913
  val___0.i = 0U;
#line 913
  val___0.ldv_35955.conn = 9U;
#line 913
  mask___0.i = 0U;
#line 913
  mask___0.ldv_35955.conn = 31U;
#line 913
  tmp___12 = drbd_request_state(mdev, mask___0, val___0);
#line 913
  if (tmp___12 <= 0) {
#line 914
    return (0);
  } else {

  }
#line 916
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 917
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 919
  atomic_set(& mdev->packet_seq, 0);
#line 920
  mdev->peer_seq = 0U;
#line 922
  drbd_thread_start(& mdev->asender);
#line 924
  if (mdev->agreed_pro_version <= 94) {
#line 924
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 924
    if (tmp___13 != 0) {
#line 925
      drbd_setup_queue_param(mdev, 32768U);
#line 926
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 929
  tmp___14 = drbd_send_protocol(mdev);
#line 929
  if (tmp___14 == 0) {
#line 930
    return (-1);
  } else {

  }
#line 931
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 932
  drbd_send_sizes(mdev, 0, 0);
#line 933
  drbd_send_uuids(mdev);
#line 934
  drbd_send_state(mdev);
#line 935
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 936
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 938
  return (1);
  out_release_sockets: ;
#line 941
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 942
    sock_release(sock);
  } else {

  }
#line 943
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 944
    sock_release(msock);
  } else {

  }
#line 945
  return (-1);
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , enum drbd_packets *cmd , unsigned int *packet_size ) 
{ 
  union p_header *h ;
  int r ;
  long tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u16 tmp___4 ;
  __u16 tmp___5 ;
  __u32 tmp___6 ;
  long tmp___7 ;

  {
#line 950
  h = & mdev->data.rbuf.header;
#line 953
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 954
  tmp = __builtin_expect(r != 8, 0L);
#line 954
  if (tmp != 0L) {
#line 955
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read expecting header on sock: r=%d\n",
            r);
#line 956
    return (0);
  } else {

  }
#line 959
  tmp___7 = __builtin_expect(h->h80.magic == 1728214147U, 1L);
#line 959
  if (tmp___7 != 0L) {
#line 960
    tmp___0 = __fswab16((int )h->h80.command);
#line 960
    *cmd = (enum drbd_packets )tmp___0;
#line 961
    tmp___1 = __fswab16((int )h->h80.length);
#line 961
    *packet_size = (unsigned int )tmp___1;
  } else
#line 962
  if ((unsigned int )h->h95.magic == 23171U) {
#line 963
    tmp___2 = __fswab16((int )h->h95.command);
#line 963
    *cmd = (enum drbd_packets )tmp___2;
#line 964
    tmp___3 = __fswab32(h->h95.length);
#line 964
    *packet_size = tmp___3;
  } else {
#line 966
    tmp___4 = __fswab16((int )h->h80.length);
#line 966
    tmp___5 = __fswab16((int )h->h80.command);
#line 966
    tmp___6 = __fswab32(h->h80.magic);
#line 966
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on data m: 0x%08x c: %d l: %d\n",
            tmp___6, (int )tmp___5, (int )tmp___4);
#line 970
    return (0);
  }
#line 972
  mdev->last_received = jiffies;
#line 974
  return (1);
}
}
#line 977 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_flush(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 981
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 981
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 981
    if (tmp != 0) {
#line 982
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 208U, 0);
#line 984
      if (rv != 0) {
#line 985
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "local disk flush failed with status %d\n",
                rv);
#line 989
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 991
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 993
  return;
}
}
#line 1001 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1007
  rv = FE_STILL_LIVE;
#line 1009
  spin_lock(& mdev->epoch_lock);
  ldv_46040: 
#line 1011
  next_epoch = 0;
#line 1013
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1015
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1017
  atomic_dec(& epoch->active);
#line 1018
  goto ldv_46030;
  case 1U: 
#line 1020
  set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1021
  goto ldv_46030;
  case 2U: ;
#line 1024
  goto ldv_46030;
  }
  ldv_46030: ;
#line 1027
  if (epoch_size != 0) {
#line 1027
    tmp___1 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1027
    if (tmp___1 == 0) {
#line 1027
      tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1027
      if (tmp___2 != 0) {
#line 1030
        if (((unsigned int )ev & 32U) == 0U) {
#line 1031
          spin_unlock(& mdev->epoch_lock);
#line 1032
          drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1033
          spin_lock(& mdev->epoch_lock);
        } else {

        }
#line 1035
        atomic_dec(& mdev->unacked_cnt);
#line 1035
        tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
        if (tmp___0 < 0) {
#line 1035
          tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1035
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
                  "drbd_may_finish_epoch", 1035, tmp);
        } else {

        }
#line 1037
        if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1038
          __mptr = (struct list_head  const  *)epoch->list.next;
#line 1038
          next_epoch = (struct drbd_epoch *)__mptr;
#line 1039
          list_del(& epoch->list);
#line 1040
          ev = (enum epoch_event )(((unsigned int )ev & 32U) | 2U);
#line 1041
          mdev->epochs = mdev->epochs - 1U;
#line 1042
          kfree((void const   *)epoch);
#line 1044
          if ((unsigned int )rv == 0U) {
#line 1045
            rv = FE_DESTROYED;
          } else {

          }
        } else {
#line 1047
          epoch->flags = 0UL;
#line 1048
          atomic_set(& epoch->epoch_size, 0);
#line 1050
          if ((unsigned int )rv == 0U) {
#line 1051
            rv = FE_RECYCLED;
          } else {

          }
#line 1052
          __wake_up(& mdev->ee_wait, 3U, 1, 0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1056
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1057
    goto ldv_46039;
  } else {

  }
#line 1059
  epoch = next_epoch;
#line 1060
  goto ldv_46040;
  ldv_46039: 
#line 1062
  spin_unlock(& mdev->epoch_lock);
#line 1064
  return (rv);
}
}
#line 1072 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[3U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;

  {
#line 1075
  write_ordering_str[0] = (char *)"none";
#line 1075
  write_ordering_str[1] = (char *)"drain";
#line 1075
  write_ordering_str[2] = (char *)"flush";
#line 1081
  pwo = mdev->write_ordering;
#line 1082
  _min1 = pwo;
#line 1082
  _min2 = wo;
#line 1082
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1083
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1084
    wo = WO_drain_io;
  } else {

  }
#line 1085
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1086
    wo = WO_none;
  } else {

  }
#line 1087
  mdev->write_ordering = wo;
#line 1088
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 2U) {
#line 1089
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Method to ensure write ordering: %s\n",
              write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1090
  return;
}
}
#line 1099 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_submit_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e , unsigned int const   rw ,
                   int const   fault_type ) 
{ 
  struct bio *bios ;
  struct bio *bio ;
  struct page *page ;
  sector_t sector ;
  unsigned int ds ;
  unsigned int n_bios ;
  unsigned int nr_pages ;
  unsigned int len ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  long tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 1102
  bios = 0;
#line 1104
  page = e->pages;
#line 1105
  sector = e->sector;
#line 1106
  ds = e->size;
#line 1107
  n_bios = 0U;
#line 1108
  nr_pages = (unsigned int )(((unsigned long )ds + 4095UL) >> 12);
  next_bio: 
#line 1115
  bio = bio_alloc(16U, (int )nr_pages);
#line 1116
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 1117
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "submit_ee: Allocation of a bio failed\n");
#line 1118
    goto fail;
  } else {

  }
#line 1121
  bio->bi_sector = sector;
#line 1122
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1125
  bio->bi_rw = (unsigned long )rw;
#line 1126
  bio->bi_private = (void *)e;
#line 1127
  bio->bi_end_io = & drbd_endio_sec;
#line 1129
  bio->bi_next = bios;
#line 1130
  bios = bio;
#line 1131
  n_bios = n_bios + 1U;
#line 1133
  goto ldv_46072;
  ldv_46071: 
#line 1134
  __min1 = ds;
#line 1134
  __min2 = 4096U;
#line 1134
  len = __min1 < __min2 ? __min1 : __min2;
#line 1135
  tmp___0 = bio_add_page(bio, page, len, 0U);
#line 1135
  if (tmp___0 == 0) {
#line 1137
    tmp = __builtin_expect((unsigned int )bio->bi_vcnt == 0U, 0L);
#line 1137
    if (tmp != 0L) {
#line 1137
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1137), "i" (12UL));
      ldv_46070: ;
#line 1137
      goto ldv_46070;
    } else {

    }
#line 1138
    goto next_bio;
  } else {

  }
#line 1140
  ds = ds - len;
#line 1141
  sector = (sector_t )(len >> 9) + sector;
#line 1142
  nr_pages = nr_pages - 1U;
#line 1133
  page = page_chain_next(page);
  ldv_46072: ;
#line 1133
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1133
    tmp___1 = page_chain_next(page);
#line 1133
    __builtin_prefetch((void const   *)tmp___1);
#line 1133
    if (1 != 0) {
#line 1134
      goto ldv_46071;
    } else {
#line 1136
      goto ldv_46073;
    }
  } else {

  }
  ldv_46073: ;
#line 1144
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1144
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( page == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1144);
  } else {

  }
#line 1145
  if (ds != 0U) {
#line 1145
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ds == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1145);
  } else {

  }
#line 1147
  atomic_set(& e->pending_bios, (int )n_bios);
  ldv_46074: 
#line 1149
  bio = bios;
#line 1150
  bios = bios->bi_next;
#line 1151
  bio->bi_next = 0;
#line 1154
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1155
    bio->bi_rw = bio->bi_rw & 0xfffffffffffffdffUL;
  } else {

  }
#line 1157
  drbd_generic_make_request(mdev, fault_type, bio);
#line 1158
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1159
    goto ldv_46074;
  } else {

  }
#line 1159
  maybe_kick_lo(mdev);
#line 1160
  return (0);
  fail: ;
#line 1163
  goto ldv_46077;
  ldv_46076: 
#line 1164
  bio = bios;
#line 1165
  bios = bios->bi_next;
#line 1166
  bio_put(bio);
  ldv_46077: ;
#line 1163
  if ((unsigned long )bios != (unsigned long )((struct bio *)0)) {
#line 1164
    goto ldv_46076;
  } else {

  }

#line 1168
  return (-12);
}
}
#line 1171 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  int rv ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  enum finish_epoch tmp ;
  void *tmp___0 ;
  void *tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 1174
  p = & mdev->data.rbuf.barrier;
#line 1177
  inc_unacked(mdev);
#line 1179
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1180
    drbd_kick_lo(mdev);
  } else {

  }
#line 1182
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1183
  tmp = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1183
  rv = (int )tmp;
#line 1190
  switch ((unsigned int )mdev->write_ordering) {
  case 0U: ;
#line 1192
  if (rv == 2) {
#line 1193
    return (1);
  } else {

  }
#line 1197
  tmp___0 = kmalloc___1(40UL, 16U);
#line 1197
  epoch = (struct drbd_epoch *)tmp___0;
#line 1198
  if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1199
    goto ldv_46088;
  } else {
#line 1201
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Allocation of an epoch failed, slowing down\n");
  }
  case 2U: ;
  case 1U: 
#line 1206
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1207
  drbd_flush(mdev);
#line 1209
  tmp___2 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1209
  if (tmp___2 != 0) {
#line 1210
    tmp___1 = kmalloc___1(40UL, 16U);
#line 1210
    epoch = (struct drbd_epoch *)tmp___1;
#line 1211
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1212
      goto ldv_46088;
    } else {

    }
  } else {

  }
#line 1215
  epoch = mdev->current_epoch;
#line 1216
  tmp___3 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1216
  if (tmp___3 == 0) {
#line 1216
    goto ldv_46091;
  } else {

  }
#line 1216
  tmp___4 = get_current();
#line 1216
  __wait.flags = 0U;
#line 1216
  __wait.private = (void *)tmp___4;
#line 1216
  __wait.func = & autoremove_wake_function;
#line 1216
  __wait.task_list.next = & __wait.task_list;
#line 1216
  __wait.task_list.prev = & __wait.task_list;
  ldv_46094: 
#line 1216
  prepare_to_wait(& mdev->ee_wait, & __wait, 2);
#line 1216
  tmp___5 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1216
  if (tmp___5 == 0) {
#line 1216
    goto ldv_46093;
  } else {

  }
#line 1216
  schedule();
#line 1216
  goto ldv_46094;
  ldv_46093: 
#line 1216
  finish_wait(& mdev->ee_wait, & __wait);
  ldv_46091: 
#line 1218
  tmp___6 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1218
  if (tmp___6 != 0) {
#line 1218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&epoch->active) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1218);
  } else {

  }
#line 1219
  if (epoch->flags != 0UL) {
#line 1219
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( epoch->flags == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1219);
  } else {

  }
#line 1221
  return (1);
  default: 
#line 1223
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Strangeness in mdev->write_ordering %d\n",
          (unsigned int )mdev->write_ordering);
#line 1224
  return (0);
  }
  ldv_46088: 
#line 1227
  epoch->flags = 0UL;
#line 1228
  atomic_set(& epoch->epoch_size, 0);
#line 1229
  atomic_set(& epoch->active, 0);
#line 1231
  spin_lock(& mdev->epoch_lock);
#line 1232
  tmp___7 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1232
  if (tmp___7 != 0) {
#line 1233
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1234
    mdev->current_epoch = epoch;
#line 1235
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1238
    kfree((void const   *)epoch);
  }
#line 1240
  spin_unlock(& mdev->epoch_lock);
#line 1242
  return (1);
}
}
#line 1248 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  int dgs ;
  int ds ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned long *data ;
  unsigned int tmp___0 ;
  int _b ;
  int _b___0 ;
  unsigned int len ;
  int __min1 ;
  int __min2 ;
  void *tmp___1 ;
  int tmp___2 ;
  struct page *tmp___3 ;
  int tmp___4 ;

  {
#line 1250
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1250
  capacity = tmp;
#line 1254
  dig_in = mdev->int_dig_in;
#line 1255
  dig_vv = mdev->int_dig_vv;
#line 1258
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1258
    tmp___0 = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1258
    dgs = (int )tmp___0;
  } else {
#line 1258
    dgs = 0;
  }
#line 1261
  if (dgs != 0) {
#line 1262
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1263
    if (rr != dgs) {
#line 1264
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data digest: read %d expected %d\n",
               rr, dgs);
#line 1266
      return (0);
    } else {

    }
  } else {

  }
#line 1270
  data_size = data_size - dgs;
#line 1272
  _b = (data_size & 511) != 0;
#line 1272
  if (_b != 0) {
#line 1272
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size & 0x1ff", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1272);
  } else {

  }
#line 1272
  if (_b != 0) {
#line 1272
    return (0);
  } else {

  }
#line 1273
  _b___0 = (unsigned int )data_size > 131072U;
#line 1273
  if (_b___0 != 0) {
#line 1273
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1273);
  } else {

  }
#line 1273
  if (_b___0 != 0) {
#line 1273
    return (0);
  } else {

  }
#line 1277
  if ((sector_t )(data_size >> 9) + sector > capacity) {
#line 1278
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "capacity: %llus < sector: %llus + size: %u\n",
            (unsigned long long )capacity, (unsigned long long )sector, data_size);
#line 1281
    return (0);
  } else {

  }
#line 1287
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1288
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1289
    return (0);
  } else {

  }
#line 1291
  ds = data_size;
#line 1292
  page = e->pages;
#line 1293
  goto ldv_46122;
  ldv_46121: 
#line 1294
  __min1 = ds;
#line 1294
  __min2 = 4096;
#line 1294
  len = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 1295
  tmp___1 = kmap(page);
#line 1295
  data = (unsigned long *)tmp___1;
#line 1296
  rr = drbd_recv(mdev, (void *)data, (size_t )len);
#line 1297
  tmp___2 = drbd_insert_fault(mdev, 9U);
#line 1297
  if (tmp___2 != 0) {
#line 1298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Fault injection: Corrupting data on receive\n");
#line 1299
    *data = ~ *data;
  } else {

  }
#line 1301
  kunmap(page);
#line 1302
  if ((unsigned int )rr != len) {
#line 1303
    drbd_free_some_ee(mdev, e, 0);
#line 1304
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, len);
#line 1306
    return (0);
  } else {

  }
#line 1308
  ds = ds - rr;
#line 1293
  page = page_chain_next(page);
  ldv_46122: ;
#line 1293
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 1293
    tmp___3 = page_chain_next(page);
#line 1293
    __builtin_prefetch((void const   *)tmp___3);
#line 1293
    if (1 != 0) {
#line 1294
      goto ldv_46121;
    } else {
#line 1296
      goto ldv_46123;
    }
  } else {

  }
  ldv_46123: ;
#line 1311
  if (dgs != 0) {
#line 1312
    drbd_csum_ee(mdev, mdev->integrity_r_tfm, e, dig_vv);
#line 1313
    tmp___4 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1313
    if (tmp___4 != 0) {
#line 1314
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED.\n");
#line 1315
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1317
      drbd_free_some_ee(mdev, e, 0);
#line 1318
      return (0);
    } else {

    }
  } else {

  }
#line 1321
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1322
  return (e);
}
}
#line 1328 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1331
  rv = 1;
#line 1334
  if (data_size == 0) {
#line 1335
    return (1);
  } else {

  }
#line 1337
  page = drbd_pp_alloc(mdev, 1U, 1);
#line 1339
  data = kmap(page);
#line 1340
  goto ldv_46143;
  ldv_46142: 
#line 1341
  __min1 = data_size;
#line 1341
  __min2 = 4096;
#line 1341
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1342
  __min1___1 = data_size;
#line 1342
  __min2___1 = 4096;
#line 1342
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1343
    rv = 0;
#line 1345
    __min1___0 = data_size;
#line 1345
    __min2___0 = 4096;
#line 1345
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data: read %d expected %d\n",
             rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1346
    goto ldv_46141;
  } else {

  }
#line 1348
  data_size = data_size - rr;
  ldv_46143: ;
#line 1340
  if (data_size != 0) {
#line 1341
    goto ldv_46142;
  } else {

  }
  ldv_46141: 
#line 1350
  kunmap(page);
#line 1351
  drbd_pp_free(mdev, page, 0);
#line 1352
  return (rv);
}
}
#line 1355 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  int __min1 ;
  int __min2 ;
  void *tmp___0 ;
  int tmp___1 ;

  {
#line 1361
  dig_in = mdev->int_dig_in;
#line 1362
  dig_vv = mdev->int_dig_vv;
#line 1364
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1364
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1364
    dgs = (int )tmp;
  } else {
#line 1364
    dgs = 0;
  }
#line 1367
  if (dgs != 0) {
#line 1368
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1369
    if (rr != dgs) {
#line 1370
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply digest: read %d expected %d\n",
               rr, dgs);
#line 1372
      return (0);
    } else {

    }
  } else {

  }
#line 1376
  data_size = data_size - dgs;
#line 1380
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1382
  bio = req->master_bio;
#line 1383
  if (bio->bi_sector != sector) {
#line 1383
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector == bio->bi_sector ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1383);
  } else {

  }
#line 1385
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1385
  i = (int )bio->bi_idx;
#line 1385
  goto ldv_46162;
  ldv_46161: 
#line 1386
  __min1 = data_size;
#line 1386
  __min2 = (int )bvec->bv_len;
#line 1386
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1387
  tmp___0 = kmap(bvec->bv_page);
#line 1387
  rr = drbd_recv(mdev, tmp___0 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1390
  kunmap(bvec->bv_page);
#line 1391
  if (rr != expect) {
#line 1392
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving data reply: read %d expected %d\n",
             rr, expect);
#line 1395
    return (0);
  } else {

  }
#line 1397
  data_size = data_size - rr;
#line 1385
  bvec = bvec + 1;
#line 1385
  i = i + 1;
  ldv_46162: ;
#line 1385
  if ((int )bio->bi_vcnt > i) {
#line 1386
    goto ldv_46161;
  } else {

  }

#line 1400
  if (dgs != 0) {
#line 1401
    drbd_csum_bio(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1402
    tmp___1 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1402
    if (tmp___1 != 0) {
#line 1403
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Digest integrity check FAILED. Broken NICs?\n");
#line 1404
      return (0);
    } else {

    }
  } else {

  }
#line 1408
  if (data_size != 0) {
#line 1408
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1408);
  } else {

  }
#line 1409
  return (1);
}
}
#line 1414 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1416
  e = (struct drbd_epoch_entry *)w;
#line 1417
  sector = e->sector;
#line 1420
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1420
  if (tmp == 0) {
#line 1420
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1420);
  } else {

  }
#line 1422
  tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1422
  if (tmp___0 != 0L) {
#line 1423
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1423U);
#line 1424
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1427
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1429
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1431
  atomic_dec(& mdev->unacked_cnt);
#line 1431
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1431
  if (tmp___2 < 0) {
#line 1431
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1431
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_end_resync_block", 1431, tmp___1);
  } else {

  }
#line 1433
  return (ok);
}
}
#line 1436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1440
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1441
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1442
    goto fail;
  } else {

  }
#line 1444
  atomic_dec(& mdev->rs_pending_cnt);
#line 1444
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1444
  if (tmp___0 < 0) {
#line 1444
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1444
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "recv_resync_read", 1444, tmp);
  } else {

  }
#line 1446
  inc_unacked(mdev);
#line 1450
  e->w.cb = & e_end_resync_block;
#line 1452
  spin_lock_irq(& mdev->req_lock);
#line 1453
  list_add(& e->w.list, & mdev->sync_ee);
#line 1454
  spin_unlock_irq(& mdev->req_lock);
#line 1456
  atomic_add(data_size >> 9, & mdev->rs_sect_ev);
#line 1457
  tmp___1 = drbd_submit_ee(mdev, e, 1U, 2);
#line 1457
  if (tmp___1 == 0) {
#line 1458
    return (1);
  } else {

  }
#line 1463
  spin_lock_irq(& mdev->req_lock);
#line 1464
  list_del(& e->w.list);
#line 1465
  spin_unlock_irq(& mdev->req_lock);
#line 1467
  drbd_free_some_ee(mdev, e, 0);
  fail: 
#line 1469
  put_ldev(mdev);
#line 1470
  return (0);
}
}
#line 1473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  long tmp___0 ;

  {
#line 1478
  p = & mdev->data.rbuf.data;
#line 1480
  tmp = __fswab64(p->sector);
#line 1480
  sector = (sector_t )tmp;
#line 1482
  spin_lock_irq(& mdev->req_lock);
#line 1483
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1484
  spin_unlock_irq(& mdev->req_lock);
#line 1485
  tmp___0 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1485
  if (tmp___0 != 0L) {
#line 1486
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got a corrupt block_id/sector pair(1).\n");
#line 1487
    return (0);
  } else {

  }
#line 1493
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1495
  if (ok != 0) {
#line 1496
    req_mod(req, data_received);
  } else {

  }
#line 1501
  return (ok);
}
}
#line 1504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  int ok ;
  struct p_data *p ;
  __u64 tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1508
  p = & mdev->data.rbuf.data;
#line 1510
  tmp = __fswab64(p->sector);
#line 1510
  sector = (sector_t )tmp;
#line 1511
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1511
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1511);
  } else {

  }
#line 1513
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1513
  if (tmp___1 != 0) {
#line 1517
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1519
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "receive_RSDataReply");
#line 1519
    if (tmp___0 != 0) {
#line 1520
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write resync data to local disk.\n");
    } else {

    }
#line 1522
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1524
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
  }
#line 1527
  atomic_add((int )(data_size >> 9), & mdev->rs_sect_in);
#line 1529
  return (ok);
}
}
#line 1535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1537
  e = (struct drbd_epoch_entry *)w;
#line 1538
  sector = e->sector;
#line 1539
  ok = 1;
#line 1541
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1542
    tmp___0 = __builtin_expect((e->flags & 8UL) == 0UL, 1L);
#line 1542
    if (tmp___0 != 0L) {
#line 1543
      pcmd = ((int )mdev->state.ldv_35955.conn > 15 && (int )mdev->state.ldv_35955.conn <= 21) && (e->flags & 2UL) != 0UL ? 23 : 22;
#line 1547
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1547
      ok = tmp & ok;
#line 1548
      if (pcmd == 23) {
#line 1549
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1549U);
      } else {

      }
    } else {
#line 1551
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1555
    atomic_dec(& mdev->unacked_cnt);
#line 1555
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1555
    if (tmp___2 < 0) {
#line 1555
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1555
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
              "e_end_block", 1555, tmp___1);
    } else {

    }
  } else {

  }
#line 1559
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1560
    spin_lock_irq(& mdev->req_lock);
#line 1561
    tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1561
    if (tmp___3 != 0) {
#line 1561
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1561);
    } else {

    }
#line 1562
    hlist_del_init(& e->colision);
#line 1563
    spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1565
    tmp___4 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1565
    if (tmp___4 == 0) {
#line 1565
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1565);
    } else {

    }
  }
#line 1568
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1570
  return (ok);
}
}
#line 1573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1575
  e = (struct drbd_epoch_entry *)w;
#line 1576
  ok = 1;
#line 1578
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1578
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1578);
  } else {

  }
#line 1579
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1581
  spin_lock_irq(& mdev->req_lock);
#line 1582
  tmp = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1582
  if (tmp != 0) {
#line 1582
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1582);
  } else {

  }
#line 1583
  hlist_del_init(& e->colision);
#line 1584
  spin_unlock_irq(& mdev->req_lock);
#line 1586
  atomic_dec(& mdev->unacked_cnt);
#line 1586
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1586
  if (tmp___1 < 0) {
#line 1586
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1586
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: unacked_cnt = %d < 0 !\n",
            "e_send_discard_ack", 1586, tmp___0);
  } else {

  }
#line 1588
  return (ok);
}
}
#line 1612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 1614
  tmp = get_current();
#line 1614
  wait.flags = 0U;
#line 1614
  wait.private = (void *)tmp;
#line 1614
  wait.func = & autoremove_wake_function;
#line 1614
  wait.task_list.next = & wait.task_list;
#line 1614
  wait.task_list.prev = & wait.task_list;
#line 1617
  ret = 0;
#line 1618
  spin_lock(& mdev->peer_seq_lock);
  ldv_46238: 
#line 1620
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1621
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1621
  if (tmp___0 <= 0) {
#line 1622
    goto ldv_46237;
  } else {

  }
#line 1623
  tmp___1 = get_current();
#line 1623
  tmp___2 = signal_pending(tmp___1);
#line 1623
  if (tmp___2 != 0) {
#line 1624
    ret = -512;
#line 1625
    goto ldv_46237;
  } else {

  }
#line 1627
  p_seq = mdev->peer_seq;
#line 1628
  spin_unlock(& mdev->peer_seq_lock);
#line 1629
  timeout = schedule_timeout(7500L);
#line 1630
  spin_lock(& mdev->peer_seq_lock);
#line 1631
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1632
    ret = -110;
#line 1633
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n");
#line 1634
    goto ldv_46237;
  } else {

  }
#line 1636
  goto ldv_46238;
  ldv_46237: 
#line 1637
  finish_wait(& mdev->seq_wait, & wait);
#line 1638
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1639
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1640
  spin_unlock(& mdev->peer_seq_lock);
#line 1641
  return (ret);
}
}
#line 1644 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static unsigned long write_flags_to_bio(struct drbd_conf *mdev , u32 dpf ) 
{ 


  {
#line 1646
  if (mdev->agreed_pro_version > 94) {
#line 1647
    return ((unsigned long )((((((dpf & 2U) != 0U ? 32 : 0) | ((dpf & 8U) != 0U ? 512 : 0)) | ((dpf & 16U) != 0U ? 16384 : 0)) | ((dpf & 32U) != 0U ? 16384 : 0)) | ((dpf & 64U) != 0U ? 128 : 0)));
  } else {
#line 1653
    return ((dpf & 2U) != 0U ? 544UL : 0UL);
  }
}
}
#line 1657 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int rw ;
  u32 dp_flags ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  __u32 tmp___4 ;
  unsigned long tmp___5 ;
  int size ;
  int discard ;
  int tmp___6 ;
  wait_queue_t wait ;
  struct task_struct *tmp___7 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  long tmp___8 ;
  long tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  struct hlist_head *tmp___12 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  int tmp___15 ;
  struct hlist_node  const  *__mptr ;
  struct task_struct *tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;

  {
#line 1661
  p = & mdev->data.rbuf.data;
#line 1662
  rw = 1;
#line 1665
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1665
  if (tmp___2 == 0) {
#line 1666
    tmp = ___ratelimit(& drbd_ratelimit_state, "receive_Data");
#line 1666
    if (tmp != 0) {
#line 1667
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not write mirrored data block to local disk.\n");
    } else {

    }
#line 1669
    spin_lock(& mdev->peer_seq_lock);
#line 1670
    tmp___0 = __fswab32(p->seq_num);
#line 1670
    if (mdev->peer_seq + 1U == tmp___0) {
#line 1671
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1672
    spin_unlock(& mdev->peer_seq_lock);
#line 1674
    drbd_send_ack_dp(mdev, P_NEG_ACK, p, (int )data_size);
#line 1675
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1676
    tmp___1 = drbd_drain_block(mdev, (int )data_size);
#line 1676
    return (tmp___1);
  } else {

  }
#line 1684
  tmp___3 = __fswab64(p->sector);
#line 1684
  sector = (sector_t )tmp___3;
#line 1685
  e = read_in_block(mdev, p->block_id, sector, (int )data_size);
#line 1686
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1687
    put_ldev(mdev);
#line 1688
    return (0);
  } else {

  }
#line 1691
  e->w.cb = & e_end_block;
#line 1693
  spin_lock(& mdev->epoch_lock);
#line 1694
  e->epoch = mdev->current_epoch;
#line 1695
  atomic_inc(& (e->epoch)->epoch_size);
#line 1696
  atomic_inc(& (e->epoch)->active);
#line 1697
  spin_unlock(& mdev->epoch_lock);
#line 1699
  tmp___4 = __fswab32(p->dp_flags);
#line 1699
  dp_flags = tmp___4;
#line 1700
  tmp___5 = write_flags_to_bio(mdev, dp_flags);
#line 1700
  rw = (int )((unsigned int )tmp___5 | (unsigned int )rw);
#line 1702
  if ((dp_flags & 4U) != 0U) {
#line 1703
    e->flags = e->flags | 2UL;
  } else {

  }
#line 1706
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1707
    spin_lock_irq(& mdev->req_lock);
  } else {
#line 1711
    size = (int const   )e->size;
#line 1712
    tmp___6 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 1712
    discard = tmp___6;
#line 1713
    tmp___7 = get_current();
#line 1713
    wait.flags = 0U;
#line 1713
    wait.private = (void *)tmp___7;
#line 1713
    wait.func = & autoremove_wake_function;
#line 1713
    wait.task_list.next = & wait.task_list;
#line 1713
    wait.task_list.prev = & wait.task_list;
#line 1719
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1719
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              1719);
    } else {

    }
#line 1720
    tmp___8 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1720
    if (tmp___8 != 0L) {
#line 1720
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1720), "i" (12UL));
      ldv_46261: ;
#line 1720
      goto ldv_46261;
    } else {

    }
#line 1721
    tmp___9 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 1721
    if (tmp___9 != 0L) {
#line 1721
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1721), "i" (12UL));
      ldv_46262: ;
#line 1721
      goto ldv_46262;
    } else {

    }
#line 1757
    tmp___10 = __fswab32(p->seq_num);
#line 1757
    tmp___11 = drbd_wait_peer_seq(mdev, tmp___10);
#line 1757
    if (tmp___11 != 0) {
#line 1758
      goto out_interrupted;
    } else {

    }
#line 1760
    spin_lock_irq(& mdev->req_lock);
#line 1762
    tmp___12 = ee_hash_slot(mdev, sector);
#line 1762
    hlist_add_head(& e->colision, tmp___12);
#line 1765
    slot = tl_hash_slot(mdev, sector);
#line 1766
    first = 1;
    ldv_46274: 
#line 1768
    have_unacked = 0;
#line 1769
    have_conflict = 0;
#line 1770
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1772
    n = slot->first;
#line 1772
    goto ldv_46271;
    ldv_46270: 
#line 1773
    tmp___15 = overlaps(i->sector, (int )i->size, sector, size);
#line 1773
    if (tmp___15 != 0) {
#line 1776
      if (first != 0) {
#line 1777
        tmp___13 = get_current();
#line 1777
        tmp___14 = get_current();
#line 1777
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
                  (char *)(& tmp___14->comm), tmp___13->pid, (unsigned long long )sector,
                  size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1782
      if ((i->rq_state & 8UL) != 0UL) {
#line 1783
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1784
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1772
    n = n->next;
    ldv_46271: ;
#line 1772
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1772
      __builtin_prefetch((void const   *)n->next);
#line 1772
      if (1 != 0) {
#line 1772
        __mptr = (struct hlist_node  const  *)n;
#line 1772
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 1772
        if (1 != 0) {
#line 1773
          goto ldv_46270;
        } else {
#line 1775
          goto ldv_46272;
        }
      } else {
#line 1775
        goto ldv_46272;
      }
    } else {

    }
    ldv_46272: ;
#line 1788
    if (have_conflict == 0) {
#line 1789
      goto ldv_46273;
    } else {

    }
#line 1792
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1793
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [DISCARD BY FLAG] sec=%llus\n",
                (unsigned long long )sector);
#line 1795
      inc_unacked(mdev);
#line 1796
      e->w.cb = & e_send_discard_ack;
#line 1797
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1799
      spin_unlock_irq(& mdev->req_lock);
#line 1804
      put_ldev(mdev);
#line 1805
      wake_asender(mdev);
#line 1806
      finish_wait(& mdev->misc_wait, & wait);
#line 1807
      return (1);
    } else {

    }
#line 1810
    tmp___16 = get_current();
#line 1810
    tmp___17 = signal_pending(tmp___16);
#line 1810
    if (tmp___17 != 0) {
#line 1811
      hlist_del_init(& e->colision);
#line 1813
      spin_unlock_irq(& mdev->req_lock);
#line 1815
      finish_wait(& mdev->misc_wait, & wait);
#line 1816
      goto out_interrupted;
    } else {

    }
#line 1819
    spin_unlock_irq(& mdev->req_lock);
#line 1820
    if (first != 0) {
#line 1821
      first = 0;
#line 1822
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Concurrent write! [W AFTERWARDS] sec=%llus\n",
                (unsigned long long )sector);
    } else
#line 1824
    if (discard != 0) {
#line 1827
      if (have_unacked != 0) {
#line 1827
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( have_unacked == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                1827);
      } else {

      }
    } else {

    }
#line 1829
    schedule();
#line 1830
    spin_lock_irq(& mdev->req_lock);
#line 1831
    goto ldv_46274;
    ldv_46273: 
#line 1832
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1835
  list_add(& e->w.list, & mdev->active_ee);
#line 1836
  spin_unlock_irq(& mdev->req_lock);
#line 1838
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1840
  inc_unacked(mdev);
#line 1843
  goto ldv_46276;
  case 2: 
#line 1847
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1848
  goto ldv_46276;
  case 1: ;
#line 1851
  goto ldv_46276;
  }
  ldv_46276: ;
#line 1854
  if ((int )mdev->state.ldv_35955.pdsk <= 3) {
#line 1856
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1856U);
#line 1857
    e->flags = e->flags | 1UL;
#line 1858
    e->flags = e->flags & 0xfffffffffffffffdUL;
#line 1859
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1862
  tmp___18 = drbd_submit_ee(mdev, e, (unsigned int const   )rw, 4);
#line 1862
  if (tmp___18 == 0) {
#line 1863
    return (1);
  } else {

  }
#line 1868
  spin_lock_irq(& mdev->req_lock);
#line 1869
  list_del(& e->w.list);
#line 1870
  hlist_del_init(& e->colision);
#line 1871
  spin_unlock_irq(& mdev->req_lock);
#line 1872
  if ((int )e->flags & 1) {
#line 1873
    drbd_al_complete_io(mdev, e->sector);
  } else {

  }
  out_interrupted: 
#line 1879
  put_ldev(mdev);
#line 1880
  drbd_free_some_ee(mdev, e, 0);
#line 1881
  return (0);
}
}
#line 1895 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_rs_should_slow_down(struct drbd_conf *mdev ) 
{ 
  struct gendisk *disk ;
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  int curr_events ;
  int throttle ;
  unsigned long res ;
  unsigned int _cpu ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  unsigned long res___0 ;
  unsigned int _cpu___0 ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  int tmp ;
  unsigned long rs_left ;
  int i ;
  unsigned long tmp___0 ;

  {
#line 1897
  disk = (((mdev->ldev)->backing_bdev)->bd_contains)->bd_disk;
#line 1900
  throttle = 0;
#line 1903
  if (mdev->sync_conf.c_min_rate == 0) {
#line 1904
    return (0);
  } else {

  }
#line 1906
  res = 0UL;
#line 1906
  _cpu = 4294967295U;
#line 1906
  goto ldv_46295;
  ldv_46294: 
#line 1906
  __vpp_verify = 0;
#line 1906
  __asm__  ("": "=r" (__ptr): "0" (disk->part0.dkstats));
#line 1906
  res = ((struct disk_stats *)(__per_cpu_offset[_cpu] + __ptr))->sectors[0] + res;
  ldv_46295: 
#line 1906
  _cpu = cpumask_next((int )_cpu, cpu_possible_mask);
#line 1906
  if ((unsigned int )nr_cpu_ids > _cpu) {
#line 1907
    goto ldv_46294;
  } else {

  }
#line 1907
  res___0 = 0UL;
#line 1907
  _cpu___0 = 4294967295U;
#line 1907
  goto ldv_46305;
  ldv_46304: 
#line 1907
  __vpp_verify___0 = 0;
#line 1907
  __asm__  ("": "=r" (__ptr___0): "0" (disk->part0.dkstats));
#line 1907
  res___0 = ((struct disk_stats *)(__per_cpu_offset[_cpu___0] + __ptr___0))->sectors[1] + res___0;
  ldv_46305: 
#line 1907
  _cpu___0 = cpumask_next((int )_cpu___0, cpu_possible_mask);
#line 1907
  if ((unsigned int )nr_cpu_ids > _cpu___0) {
#line 1908
    goto ldv_46304;
  } else {

  }
#line 1907
  tmp = atomic_read((atomic_t const   *)(& mdev->rs_sect_ev));
#line 1907
  curr_events = ((int )res + (int )res___0) - tmp;
#line 1909
  if (mdev->rs_last_events == 0 || curr_events - mdev->rs_last_events > 64) {
#line 1913
    mdev->rs_last_events = curr_events;
#line 1917
    i = (mdev->rs_last_mark + 6) % 8;
#line 1918
    tmp___0 = drbd_bm_total_weight(mdev);
#line 1918
    rs_left = tmp___0 - mdev->rs_failed;
#line 1920
    dt = (unsigned long )(((long )jiffies - (long )mdev->rs_mark_time[i]) / 250L);
#line 1921
    if (dt == 0UL) {
#line 1922
      dt = dt + 1UL;
    } else {

    }
#line 1923
    db = mdev->rs_mark_left[i] - rs_left;
#line 1924
    dbdt = db / dt << 2;
#line 1926
    if ((unsigned long )mdev->sync_conf.c_min_rate < dbdt) {
#line 1927
      throttle = 1;
    } else {

    }
  } else {

  }
#line 1929
  return (throttle);
}
}
#line 1933 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int digest_size ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int verb ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  __u64 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  void *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;

  {
#line 1936
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1936
  capacity = tmp;
#line 1938
  di = 0;
#line 1941
  p = & mdev->data.rbuf.block_req;
#line 1943
  tmp___0 = __fswab64(p->sector);
#line 1943
  sector = (sector_t )tmp___0;
#line 1944
  tmp___1 = __fswab32(p->blksize);
#line 1944
  size = (int )tmp___1;
#line 1946
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1947
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1947, (unsigned long long )sector, size);
#line 1949
    return (0);
  } else {

  }
#line 1951
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1952
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:%d: sector: %llus, size: %u\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            1952, (unsigned long long )sector, size);
#line 1954
    return (0);
  } else {

  }
#line 1957
  tmp___7 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1957
  if (tmp___7 == 0) {
#line 1958
    verb = 1;
#line 1959
    switch ((unsigned int )cmd) {
    case 8U: 
#line 1961
    drbd_send_ack_rp(mdev, P_NEG_DREPLY, p);
#line 1962
    goto ldv_46324;
    case 9U: ;
    case 33U: ;
    case 30U: 
#line 1966
    drbd_send_ack_rp(mdev, P_NEG_RS_DREPLY, p);
#line 1967
    goto ldv_46324;
    case 31U: 
#line 1969
    verb = 0;
#line 1970
    atomic_dec(& mdev->rs_pending_cnt);
#line 1970
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1970
    if (tmp___3 < 0) {
#line 1970
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1970
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 1970, tmp___2);
    } else {

    }
#line 1971
    drbd_send_ack_ex(mdev, P_OV_RESULT, sector, size, 4711ULL);
#line 1972
    goto ldv_46324;
    default: 
#line 1974
    tmp___4 = cmdname(cmd);
#line 1974
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
            tmp___4);
    }
    ldv_46324: ;
#line 1977
    if (verb != 0) {
#line 1977
      tmp___5 = ___ratelimit(& drbd_ratelimit_state, "receive_DataRequest");
#line 1977
      if (tmp___5 != 0) {
#line 1978
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not satisfy peer\'s read request, no local data.\n");
      } else {

      }
    } else {

    }
#line 1982
    tmp___6 = drbd_drain_block(mdev, (int )digest_size);
#line 1982
    return (tmp___6);
  } else {

  }
#line 1988
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 1989
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1990
    put_ldev(mdev);
#line 1991
    return (0);
  } else {

  }
#line 1994
  switch ((unsigned int )cmd) {
  case 8U: 
#line 1996
  e->w.cb = & w_e_end_data_req;
#line 1997
  fault_type = 5U;
#line 1999
  goto submit;
  case 9U: 
#line 2002
  e->w.cb = & w_e_end_rsdata_req;
#line 2003
  fault_type = 3U;
#line 2004
  goto ldv_46337;
  case 31U: ;
  case 33U: 
#line 2008
  fault_type = 3U;
#line 2009
  tmp___8 = kmalloc___1((unsigned long )digest_size + 16UL, 16U);
#line 2009
  di = (struct digest_info *)tmp___8;
#line 2010
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 2011
    goto out_free_e;
  } else {

  }
#line 2013
  di->digest_size = (int )digest_size;
#line 2014
  di->digest = (void *)di + 16U;
#line 2016
  e->ldv_43398.digest = di;
#line 2017
  e->flags = e->flags | 16UL;
#line 2019
  tmp___9 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 2019
  if ((unsigned int )tmp___9 != digest_size) {
#line 2020
    goto out_free_e;
  } else {

  }
#line 2022
  if ((unsigned int )cmd == 33U) {
#line 2023
    if (mdev->agreed_pro_version <= 88) {
#line 2023
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2023);
    } else {

    }
#line 2024
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2025
  if ((unsigned int )cmd == 31U) {
#line 2026
    e->w.cb = & w_e_end_ov_reply;
#line 2027
    atomic_dec(& mdev->rs_pending_cnt);
#line 2027
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2027
    if (tmp___11 < 0) {
#line 2027
      tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2027
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "receive_DataRequest", 2027, tmp___10);
    } else {

    }
#line 2030
    goto submit_for_resync;
  } else {

  }
#line 2032
  goto ldv_46337;
  case 30U: ;
#line 2035
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2037
    mdev->ov_start_sector = sector;
#line 2038
    mdev->ov_position = sector;
#line 2039
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2040
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify start sector: %llu\n",
              (unsigned long long )sector);
  } else {

  }
#line 2043
  e->w.cb = & w_e_end_ov_req;
#line 2044
  fault_type = 3U;
#line 2045
  goto ldv_46337;
  default: 
#line 2048
  tmp___12 = cmdname(cmd);
#line 2048
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected command (%s) in receive_DataRequest\n",
          tmp___12);
#line 2050
  fault_type = 10U;
#line 2051
  goto out_free_e;
  }
  ldv_46337: ;
#line 2076
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 4U) {
#line 2076
    tmp___13 = drbd_rs_should_slow_down(mdev);
#line 2076
    if (tmp___13 != 0) {
#line 2077
      msleep(100U);
    } else {

    }
  } else {

  }
#line 2078
  tmp___14 = drbd_rs_begin_io(mdev, e->sector);
#line 2078
  if (tmp___14 != 0) {
#line 2079
    goto out_free_e;
  } else {

  }
  submit_for_resync: 
#line 2082
  atomic_add(size >> 9, & mdev->rs_sect_ev);
  submit: 
#line 2085
  inc_unacked(mdev);
#line 2086
  spin_lock_irq(& mdev->req_lock);
#line 2087
  list_add_tail(& e->w.list, & mdev->read_ee);
#line 2088
  spin_unlock_irq(& mdev->req_lock);
#line 2090
  tmp___15 = drbd_submit_ee(mdev, e, 0U, (int const   )fault_type);
#line 2090
  if (tmp___15 == 0) {
#line 2091
    return (1);
  } else {

  }
#line 2096
  spin_lock_irq(& mdev->req_lock);
#line 2097
  list_del(& e->w.list);
#line 2098
  spin_unlock_irq(& mdev->req_lock);
  out_free_e: 
#line 2102
  put_ldev(mdev);
#line 2103
  drbd_free_some_ee(mdev, e, 0);
#line 2104
  return (0);
}
}
#line 2107 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  int tmp ;
  int tmp___0 ;

  {
#line 2109
  rv = -100;
#line 2112
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2113
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2115
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2116
  ch_self = mdev->comm_bm_set;
#line 2118
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2122
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2123
  goto ldv_46358;
  case 0: ;
#line 2125
  goto ldv_46358;
  case 1: ;
#line 2127
  if (self == 0 && peer == 1) {
#line 2128
    rv = -1;
#line 2129
    goto ldv_46358;
  } else {

  }
#line 2131
  if (self == 1 && peer == 0) {
#line 2132
    rv = 1;
#line 2133
    goto ldv_46358;
  } else {

  }
  case 2: ;
#line 2137
  if (self == 0 && peer == 1) {
#line 2138
    rv = 1;
#line 2139
    goto ldv_46358;
  } else {

  }
#line 2141
  if (self == 1 && peer == 0) {
#line 2142
    rv = -1;
#line 2143
    goto ldv_46358;
  } else {

  }
#line 2146
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n");
  case 3: ;
#line 2149
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2150
    tmp = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2150
    rv = tmp != 0 ? -1 : 1;
#line 2152
    goto ldv_46358;
  } else {
#line 2154
    if (ch_peer == 0UL) {
#line 2154
      rv = 1;
#line 2154
      goto ldv_46358;
    } else {

    }
#line 2155
    if (ch_self == 0UL) {
#line 2155
      rv = -1;
#line 2155
      goto ldv_46358;
    } else {

    }
  }
#line 2157
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2158
    goto ldv_46358;
  } else {

  }
  case 4: ;
#line 2160
  if (ch_self < ch_peer) {
#line 2161
    rv = -1;
  } else
#line 2162
  if (ch_self > ch_peer) {
#line 2163
    rv = 1;
  } else {
#line 2166
    tmp___0 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2166
    rv = tmp___0 != 0 ? -1 : 1;
  }
#line 2168
  goto ldv_46358;
  case 5: 
#line 2170
  rv = -1;
#line 2171
  goto ldv_46358;
  case 6: 
#line 2173
  rv = 1;
  }
  ldv_46358: ;
#line 2176
  return (rv);
}
}
#line 2179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2181
  rv = -100;
#line 2183
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2184
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2186
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2192
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2193
  goto ldv_46378;
  case 0: ;
#line 2195
  goto ldv_46378;
  case 7: 
#line 2197
  hg = drbd_asb_recover_0p(mdev);
#line 2198
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 2199
    rv = hg;
  } else {

  }
#line 2200
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2201
    rv = hg;
  } else {

  }
#line 2202
  goto ldv_46378;
  case 10: 
#line 2204
  rv = drbd_asb_recover_0p(mdev);
#line 2205
  goto ldv_46378;
  case 8: ;
#line 2207
  return ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U ? 1 : -1);
  case 9: 
#line 2209
  hg = drbd_asb_recover_0p(mdev);
#line 2210
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 2211
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2215
    val.i = 0U;
#line 2215
    val.ldv_35955.role = 2U;
#line 2215
    mask.i = 0U;
#line 2215
    mask.ldv_35955.role = 3U;
#line 2215
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2216
    if (self != 1) {
#line 2217
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2219
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2220
      rv = hg;
    }
  } else {
#line 2223
    rv = hg;
  }
  }
  ldv_46378: ;
#line 2226
  return (rv);
}
}
#line 2229 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2231
  rv = -100;
#line 2233
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2234
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2236
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2244
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Configuration error.\n");
#line 2245
  goto ldv_46402;
  case 10: 
#line 2247
  rv = drbd_asb_recover_0p(mdev);
#line 2248
  goto ldv_46402;
  case 0: ;
#line 2250
  goto ldv_46402;
  case 9: 
#line 2252
  hg = drbd_asb_recover_0p(mdev);
#line 2253
  if (hg == -1) {
#line 2257
    val.i = 0U;
#line 2257
    val.ldv_35955.role = 2U;
#line 2257
    mask.i = 0U;
#line 2257
    mask.ldv_35955.role = 3U;
#line 2257
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2258
    if (self != 1) {
#line 2259
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2261
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Successfully gave up primary role.\n");
#line 2262
      rv = hg;
    }
  } else {
#line 2265
    rv = hg;
  }
  }
  ldv_46402: ;
#line 2268
  return (rv);
}
}
#line 2271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 


  {
#line 2274
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2275
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s uuid info vanished while I was looking!\n",
              text);
#line 2276
    return;
  } else {

  }
#line 2278
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n",
            text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits, flags);
#line 2279
  return;
}
}
#line 2298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  unsigned long tmp ;
  u64 tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  u64 tmp___3 ;

  {
#line 2303
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2304
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2306
  *rule_nr = 10;
#line 2307
  if (self == 4ULL && peer == 4ULL) {
#line 2308
    return (0);
  } else {

  }
#line 2310
  *rule_nr = 20;
#line 2311
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2313
    return (-2);
  } else {

  }
#line 2315
  *rule_nr = 30;
#line 2316
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2318
    return (2);
  } else {

  }
#line 2320
  if (self == peer) {
#line 2323
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2325
      if (mdev->agreed_pro_version <= 90) {
#line 2326
        return (-1001);
      } else {

      }
#line 2328
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2330
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource, missed the resync finished event, corrected myself:\n");
#line 2331
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2333
        if ((int )mdev->state.ldv_35955.disk > 2) {
#line 2333
          tmp = drbd_bm_total_weight(mdev);
#line 2333
          tmp___0 = (u64 )tmp;
        } else {
#line 2333
          tmp___0 = 0ULL;
        }
#line 2333
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___0,
                       0ULL);
#line 2335
        *rule_nr = 34;
      } else {
#line 2337
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncSource (peer failed to write sync_uuid)\n");
#line 2338
        *rule_nr = 36;
      }
#line 2341
      return (1);
    } else {

    }
#line 2344
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2346
      if (mdev->agreed_pro_version <= 90) {
#line 2347
        return (-1001);
      } else {

      }
#line 2349
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2351
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget, peer missed the resync finished event, corrected peer:\n");
#line 2353
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2354
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2355
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2357
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2358
        *rule_nr = 35;
      } else {
#line 2360
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "was SyncTarget (failed to write sync_uuid)\n");
#line 2361
        *rule_nr = 37;
      }
#line 2364
      return (-1);
    } else {

    }
#line 2368
    tmp___1 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 2368
    rct = (int )((tmp___1 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2372
    *rule_nr = 40;
#line 2374
    switch (rct) {
    case 0: ;
#line 2375
    return (0);
    case 1: ;
#line 2376
    return (1);
    case 2: ;
#line 2377
    return (-1);
    case 3: 
#line 2379
    dc = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 2380
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2384
  *rule_nr = 50;
#line 2385
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2386
  if (self == peer) {
#line 2387
    return (-1);
  } else {

  }
#line 2389
  *rule_nr = 51;
#line 2390
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2391
  if (self == peer) {
#line 2392
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2393
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2394
    if (self == peer) {
#line 2398
      if (mdev->agreed_pro_version <= 90) {
#line 2399
        return (-1001);
      } else {

      }
#line 2401
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2402
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2403
      return (-1);
    } else {

    }
  } else {

  }
#line 2407
  *rule_nr = 60;
#line 2408
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2409
  i = 2;
#line 2409
  goto ldv_46432;
  ldv_46431: 
#line 2410
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2411
  if (self == peer) {
#line 2412
    return (-2);
  } else {

  }
#line 2409
  i = i + 1;
  ldv_46432: ;
#line 2409
  if (i <= 3) {
#line 2410
    goto ldv_46431;
  } else {

  }
#line 2415
  *rule_nr = 70;
#line 2416
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2417
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2418
  if (self == peer) {
#line 2419
    return (1);
  } else {

  }
#line 2421
  *rule_nr = 71;
#line 2422
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2423
  if (self == peer) {
#line 2424
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2425
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2426
    if (self == peer) {
#line 2430
      if (mdev->agreed_pro_version <= 90) {
#line 2431
        return (-1001);
      } else {

      }
#line 2433
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2434
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2436
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Undid last start of resync:\n");
#line 2438
      if ((int )mdev->state.ldv_35955.disk > 2) {
#line 2438
        tmp___2 = drbd_bm_total_weight(mdev);
#line 2438
        tmp___3 = (u64 )tmp___2;
      } else {
#line 2438
        tmp___3 = 0ULL;
      }
#line 2438
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___3,
                     0ULL);
#line 2441
      return (1);
    } else {

    }
  } else {

  }
#line 2446
  *rule_nr = 80;
#line 2447
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2448
  i = 2;
#line 2448
  goto ldv_46435;
  ldv_46434: 
#line 2449
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2450
  if (self == peer) {
#line 2451
    return (2);
  } else {

  }
#line 2448
  i = i + 1;
  ldv_46435: ;
#line 2448
  if (i <= 3) {
#line 2449
    goto ldv_46434;
  } else {

  }
#line 2454
  *rule_nr = 90;
#line 2455
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2456
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2457
  if (self == peer && self != 0ULL) {
#line 2458
    return (100);
  } else {

  }
#line 2460
  *rule_nr = 100;
#line 2461
  i = 2;
#line 2461
  goto ldv_46441;
  ldv_46440: 
#line 2462
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2463
  j = 2;
#line 2463
  goto ldv_46438;
  ldv_46437: 
#line 2464
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2465
  if (self == peer) {
#line 2466
    return (-100);
  } else {

  }
#line 2463
  j = j + 1;
  ldv_46438: ;
#line 2463
  if (j <= 3) {
#line 2464
    goto ldv_46437;
  } else {

  }
#line 2461
  i = i + 1;
  ldv_46441: ;
#line 2461
  if (i <= 3) {
#line 2462
    goto ldv_46440;
  } else {

  }

#line 2470
  return (-1000);
}
}
#line 2476 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  int f ;
  long __x ;
  int tmp ;
  long __x___0 ;
  int pcount ;
  int forced ;
  long __x___1 ;
  long __x___2 ;
  long __x___3 ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  long __x___4 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;

  {
#line 2480
  rv = C_MASK;
#line 2483
  mydisk = (enum drbd_disk_state )mdev->state.ldv_35955.disk;
#line 2484
  if ((unsigned int )mydisk == 3U) {
#line 2485
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_35955.disk;
  } else {

  }
#line 2487
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_sync_handshake:\n");
#line 2488
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2489
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2492
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2494
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "uuid_compare()=%d by rule %d\n",
            hg, rule_nr);
#line 2496
  if (hg == -1000) {
#line 2497
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unrelated data, aborting!\n");
#line 2498
    return (C_MASK);
  } else {

  }
#line 2500
  if (hg == -1001) {
#line 2501
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "To resolve this both sides have to support at least protocol\n");
#line 2502
    return (C_MASK);
  } else {

  }
#line 2505
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2507
    if (hg == -100) {
#line 2507
      tmp = 1;
    } else {
#line 2507
      __x = (long )hg;
#line 2507
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2507
        tmp = 1;
      } else {
#line 2507
        tmp = 0;
      }
    }
#line 2507
    f = tmp;
#line 2508
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2509
    if (f != 0) {
#line 2510
      hg = hg * 2;
    } else {

    }
#line 2511
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming sync %s due to disk states.\n",
              hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2515
  __x___0 = (long )hg;
#line 2515
  if ((__x___0 < 0L ? - __x___0 : __x___0) == 100L) {
#line 2516
    drbd_khelper(mdev, (char *)"initial-split-brain");
  } else {

  }
#line 2518
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2519
    pcount = ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2521
    forced = hg == -100;
#line 2523
    switch (pcount) {
    case 0: 
#line 2525
    hg = drbd_asb_recover_0p(mdev);
#line 2526
    goto ldv_46460;
    case 1: 
#line 2528
    hg = drbd_asb_recover_1p(mdev);
#line 2529
    goto ldv_46460;
    case 2: 
#line 2531
    hg = drbd_asb_recover_2p(mdev);
#line 2532
    goto ldv_46460;
    }
    ldv_46460: 
#line 2534
    __x___1 = (long )hg;
#line 2534
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2535
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
               pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2538
      if (forced != 0) {
#line 2539
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Doing a full sync, since UUIDs where ambiguous.\n");
#line 2541
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2546
  if (hg == -100) {
#line 2547
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2548
      hg = -1;
    } else {

    }
#line 2549
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2550
      hg = 1;
    } else {

    }
#line 2552
    __x___2 = (long )hg;
#line 2552
    if ((__x___2 < 0L ? - __x___2 : __x___2) <= 99L) {
#line 2553
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected, manually solved. Sync from %s node\n",
               hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2558
  if (hg == -100) {
#line 2563
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Split-Brain detected but unresolved, dropping connection!\n");
#line 2564
    drbd_khelper(mdev, (char *)"split-brain");
#line 2565
    return (C_MASK);
  } else {

  }
#line 2568
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2569
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncSource, but I am inconsistent!\n");
#line 2570
    return (C_MASK);
  } else {

  }
#line 2573
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && (int )mdev->state.ldv_35955.disk > 6) {
#line 2575
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2577
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2580
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "I shall become SyncTarget, but I am primary!\n");
#line 2581
    return (C_MASK);
    case 10: 
#line 2583
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Becoming SyncTarget, violating the stable-dataassumption\n");
    }
  } else {

  }
#line 2588
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2588
    goto _L;
  } else {
#line 2588
    tmp___1 = constant_test_bit(25U, (unsigned long const volatile   *)(& mdev->flags));
#line 2588
    if (tmp___1 != 0) {
      _L: /* CIL Label */ 
#line 2589
      if (hg == 0) {
#line 2590
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: No resync, would become Connected immediately.\n");
      } else {
#line 2592
        __x___3 = (long )hg;
#line 2592
        tmp___0 = drbd_conn_str(hg > 0 ? C_SYNC_SOURCE : C_SYNC_TARGET);
#line 2592
        _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dry-run connect: Would become %s, doing a %s resync.",
                  tmp___0, (__x___3 < 0L ? - __x___3 : __x___3) > 1L ? (char *)"full" : (char *)"bit-map based");
      }
#line 2595
      return (C_MASK);
    } else {

    }
  }
#line 2598
  __x___4 = (long )hg;
#line 2598
  if ((__x___4 < 0L ? - __x___4 : __x___4) > 1L) {
#line 2599
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, full sync required after drbd_sync_handshake.\n");
#line 2600
    tmp___2 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2600
    if (tmp___2 != 0) {
#line 2601
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2604
  if (hg > 0) {
#line 2605
    rv = C_WF_BITMAP_S;
  } else
#line 2606
  if (hg < 0) {
#line 2607
    rv = C_WF_BITMAP_T;
  } else {
#line 2609
    rv = C_CONNECTED;
#line 2610
    tmp___4 = drbd_bm_total_weight(mdev);
#line 2610
    if (tmp___4 != 0UL) {
#line 2611
      tmp___3 = drbd_bm_total_weight(mdev);
#line 2611
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No resync, but %lu bits in bitmap!\n",
                tmp___3);
    } else {

    }
  }
#line 2616
  return (rv);
}
}
#line 2620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2623
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2625
    return (0);
  } else {

  }
#line 2628
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2630
    return (1);
  } else {

  }
#line 2633
  if ((unsigned int )peer == (unsigned int )self) {
#line 2634
    return (0);
  } else {

  }
#line 2637
  return (1);
}
}
#line 2640 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_protocol *p ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  int cf ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *my_alg ;
  int tmp___9 ;
  int tmp___10 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2642
  p = & mdev->data.rbuf.protocol;
#line 2645
  p_integrity_alg[0] = '\000';
#line 2645
  tmp = 1U;
#line 2645
  while (1) {
#line 2645
    if (tmp >= 64U) {
#line 2645
      break;
    } else {

    }
#line 2645
    p_integrity_alg[tmp] = (char)0;
#line 2645
    tmp = tmp + 1U;
  }
#line 2647
  tmp___0 = __fswab32(p->protocol);
#line 2647
  p_proto = (int )tmp___0;
#line 2648
  tmp___1 = __fswab32(p->after_sb_0p);
#line 2648
  p_after_sb_0p = (int )tmp___1;
#line 2649
  tmp___2 = __fswab32(p->after_sb_1p);
#line 2649
  p_after_sb_1p = (int )tmp___2;
#line 2650
  tmp___3 = __fswab32(p->after_sb_2p);
#line 2650
  p_after_sb_2p = (int )tmp___3;
#line 2651
  tmp___4 = __fswab32(p->two_primaries);
#line 2651
  p_two_primaries = (int )tmp___4;
#line 2652
  tmp___5 = __fswab32(p->conn_flags);
#line 2652
  cf = (int )tmp___5;
#line 2653
  p_want_lose = cf & 1;
#line 2655
  clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 2657
  if ((cf & 2) != 0) {
#line 2658
    set_bit(25U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2660
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2661
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible communication protocols\n");
#line 2662
    goto disconnect;
  } else {

  }
#line 2665
  tmp___6 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2665
  if (tmp___6 != 0) {
#line 2666
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-0pri settings\n");
#line 2667
    goto disconnect;
  } else {

  }
#line 2670
  tmp___7 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2670
  if (tmp___7 != 0) {
#line 2671
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-1pri settings\n");
#line 2672
    goto disconnect;
  } else {

  }
#line 2675
  tmp___8 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2675
  if (tmp___8 != 0) {
#line 2676
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible after-sb-2pri settings\n");
#line 2677
    goto disconnect;
  } else {

  }
#line 2680
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2681
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "both sides have the \'want_lose\' flag set\n");
#line 2682
    goto disconnect;
  } else {

  }
#line 2685
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2686
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the two-primaries options\n");
#line 2687
    goto disconnect;
  } else {

  }
#line 2690
  if (mdev->agreed_pro_version > 86) {
#line 2691
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2693
    tmp___9 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2693
    if ((unsigned int )tmp___9 != data_size) {
#line 2694
      return (0);
    } else {

    }
#line 2696
    p_integrity_alg[63] = 0;
#line 2697
    tmp___10 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2697
    if (tmp___10 != 0) {
#line 2698
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible setting of the data-integrity-alg\n");
#line 2699
      goto disconnect;
    } else {

    }
#line 2701
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "data-integrity-alg: %s\n",
              (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2705
  return (1);
  disconnect: 
#line 2708
  val.i = 0U;
#line 2708
  val.ldv_35955.conn = 1U;
#line 2708
  mask.i = 0U;
#line 2708
  mask.ldv_35955.conn = 31U;
#line 2708
  drbd_force_state(mdev, mask, val);
#line 2709
  return (0);
}
}
#line 2717 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  long tmp___0 ;
  void *tmp___1 ;
  struct crypto_tfm *tmp___2 ;
  int tmp___3 ;

  {
#line 2722
  if ((int )((signed char )*alg) == 0) {
#line 2723
    return (0);
  } else {

  }
#line 2725
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2726
  tmp___0 = IS_ERR((void const   *)tfm);
#line 2726
  if (tmp___0 != 0L) {
#line 2727
    tmp = PTR_ERR((void const   *)tfm);
#line 2727
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not allocate \"%s\" as %s (reason: %ld)\n",
            alg, name, tmp);
#line 2729
    return (tfm);
  } else {

  }
#line 2731
  tmp___2 = crypto_hash_tfm(tfm);
#line 2731
  tmp___3 = drbd_crypto_is_hash(tmp___2);
#line 2731
  if (tmp___3 == 0) {
#line 2732
    crypto_free_hash(tfm);
#line 2733
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "\"%s\" is not a digest (%s)\n",
            alg, name);
#line 2734
    tmp___1 = ERR_PTR(-22L);
#line 2734
    return ((struct crypto_hash *)tmp___1);
  } else {

  }
#line 2736
  return (tfm);
}
}
#line 2739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int packet_size ) 
{ 
  int ok ;
  struct p_rs_param_95 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  int *rs_plan_s ;
  int fifo_size ;
  int tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  int tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  void *tmp___11 ;
  size_t tmp___12 ;
  size_t tmp___13 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2741
  ok = 1;
#line 2742
  p = & mdev->data.rbuf.rs_param_95;
#line 2744
  verify_tfm = 0;
#line 2745
  csums_tfm = 0;
#line 2746
  apv = mdev->agreed_pro_version;
#line 2747
  rs_plan_s = 0;
#line 2748
  fifo_size = 0;
#line 2750
  exp_max_sz = apv > 87 ? (apv != 88 ? (apv <= 94 ? 140U : 156U) : 76U) : 12U;
#line 2756
  if (packet_size > exp_max_sz) {
#line 2757
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "SyncParam packet too long: received %u, expected <= %u bytes\n",
            packet_size, exp_max_sz);
#line 2759
    return (0);
  } else {

  }
#line 2762
  if (apv <= 88) {
#line 2763
    header_size = 4U;
#line 2764
    data_size = packet_size - header_size;
  } else
#line 2765
  if (apv <= 94) {
#line 2766
    header_size = 132U;
#line 2767
    data_size = packet_size - header_size;
#line 2768
    if (data_size != 0U) {
#line 2768
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2768);
    } else {

    }
  } else {
#line 2770
    header_size = 148U;
#line 2771
    data_size = packet_size - header_size;
#line 2772
    if (data_size != 0U) {
#line 2772
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( data_size == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              2772);
    } else {

    }
  }
#line 2776
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2778
  tmp = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )header_size);
#line 2778
  if ((unsigned int )tmp != header_size) {
#line 2779
    return (0);
  } else {

  }
#line 2781
  tmp___0 = __fswab32(p->rate);
#line 2781
  mdev->sync_conf.rate = (int )tmp___0;
#line 2783
  if (apv > 87) {
#line 2784
    if (apv == 88) {
#line 2785
      if (data_size > 64U) {
#line 2786
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "verify-alg too long, peer wants %u, accepting only %u byte\n",
                data_size, 64);
#line 2789
        return (0);
      } else {

      }
#line 2792
      tmp___1 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2792
      if ((unsigned int )tmp___1 != data_size) {
#line 2793
        return (0);
      } else {

      }
#line 2797
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2797
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2797);
      } else {

      }
#line 2798
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2803
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2803
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2803);
      } else {

      }
#line 2804
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2804
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                2804);
      } else {

      }
#line 2805
      p->verify_alg[63] = 0;
#line 2806
      p->csums_alg[63] = 0;
    }
#line 2809
    tmp___3 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2809
    if (tmp___3 != 0) {
#line 2810
      if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2811
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
                (unsigned char *)(& mdev->sync_conf.verify_alg), (char *)(& p->verify_alg));
#line 2813
        goto disconnect;
      } else {

      }
#line 2815
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2817
      tmp___2 = IS_ERR((void const   *)verify_tfm);
#line 2817
      if (tmp___2 != 0L) {
#line 2818
        verify_tfm = 0;
#line 2819
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2823
    if (apv > 88) {
#line 2823
      tmp___5 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2823
      if (tmp___5 != 0) {
#line 2824
        if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2825
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                  (unsigned char *)(& mdev->sync_conf.csums_alg), (char *)(& p->csums_alg));
#line 2827
          goto disconnect;
        } else {

        }
#line 2829
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2831
        tmp___4 = IS_ERR((void const   *)csums_tfm);
#line 2831
        if (tmp___4 != 0L) {
#line 2832
          csums_tfm = 0;
#line 2833
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2837
    if (apv > 94) {
#line 2838
      tmp___6 = __fswab32(p->rate);
#line 2838
      mdev->sync_conf.rate = (int )tmp___6;
#line 2839
      tmp___7 = __fswab32(p->c_plan_ahead);
#line 2839
      mdev->sync_conf.c_plan_ahead = (int )tmp___7;
#line 2840
      tmp___8 = __fswab32(p->c_delay_target);
#line 2840
      mdev->sync_conf.c_delay_target = (int )tmp___8;
#line 2841
      tmp___9 = __fswab32(p->c_fill_target);
#line 2841
      mdev->sync_conf.c_fill_target = (int )tmp___9;
#line 2842
      tmp___10 = __fswab32(p->c_max_rate);
#line 2842
      mdev->sync_conf.c_max_rate = (int )tmp___10;
#line 2844
      fifo_size = (mdev->sync_conf.c_plan_ahead * 250) / 250;
#line 2845
      if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 2846
        tmp___11 = kzalloc___0((unsigned long )fifo_size * 4UL, 208U);
#line 2846
        rs_plan_s = (int *)tmp___11;
#line 2847
        if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 2848
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 2849
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2854
    spin_lock(& mdev->peer_seq_lock);
#line 2856
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2857
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2858
      tmp___12 = strlen((char const   *)(& p->verify_alg));
#line 2858
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___12 + 1U);
#line 2859
      crypto_free_hash(mdev->verify_tfm);
#line 2860
      mdev->verify_tfm = verify_tfm;
#line 2861
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using verify-alg: \"%s\"\n",
                (char *)(& p->verify_alg));
    } else {

    }
#line 2863
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2864
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2865
      tmp___13 = strlen((char const   *)(& p->csums_alg));
#line 2865
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___13 + 1U);
#line 2866
      crypto_free_hash(mdev->csums_tfm);
#line 2867
      mdev->csums_tfm = csums_tfm;
#line 2868
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "using csums-alg: \"%s\"\n",
                (char *)(& p->csums_alg));
    } else {

    }
#line 2870
    if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 2871
      kfree((void const   *)mdev->rs_plan_s.values);
#line 2872
      mdev->rs_plan_s.values = rs_plan_s;
#line 2873
      mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 2874
      mdev->rs_planed = 0;
    } else {

    }
#line 2876
    spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2879
  return (ok);
  disconnect: 
#line 2883
  crypto_free_hash(csums_tfm);
#line 2885
  crypto_free_hash(verify_tfm);
#line 2886
  val.i = 0U;
#line 2886
  val.ldv_35955.conn = 1U;
#line 2886
  mask.i = 0U;
#line 2886
  mask.ldv_35955.conn = 31U;
#line 2886
  drbd_force_state(mdev, mask, val);
#line 2887
  return (0);
}
}
#line 2890 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2892
  return;
}
}
#line 2897 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;

  {
#line 2901
  if (a == 0UL || b == 0UL) {
#line 2902
    return;
  } else {

  }
#line 2903
  d = a > b ? a - b : b - a;
#line 2904
  if (a >> 3 < d || b >> 3 < d) {
#line 2905
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Considerable difference in %s: %llus vs. %llus\n",
             s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2907
  return;
}
}
#line 2909 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum dds_flags ddsf ;
  __u64 tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___1 ;
  unsigned long __x ;
  sector_t __y ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___4 ;
  sector_t tmp___5 ;
  int tmp___6 ;
  __u16 tmp___7 ;
  int tmp___8 ;
  sector_t tmp___9 ;
  __u32 tmp___10 ;
  unsigned int tmp___11 ;
  __u16 tmp___12 ;
  int tmp___13 ;
  __u64 tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;

  {
#line 2911
  p = & mdev->data.rbuf.sizes;
#line 2912
  dd = 0;
#line 2915
  ldsc = 0;
#line 2918
  tmp = __fswab64(p->d_size);
#line 2918
  p_size = (sector_t )tmp;
#line 2919
  tmp___0 = __fswab64(p->u_size);
#line 2919
  p_usize = (sector_t )tmp___0;
#line 2921
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 2922
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "some backing storage is needed\n");
#line 2923
    val.i = 0U;
#line 2923
    val.ldv_35955.conn = 1U;
#line 2923
    mask.i = 0U;
#line 2923
    mask.ldv_35955.conn = 31U;
#line 2923
    drbd_force_state(mdev, mask, val);
#line 2924
    return (0);
  } else {

  }
#line 2929
  mdev->p_size = p_size;
#line 2931
  tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2931
  if (tmp___6 != 0) {
#line 2932
    tmp___1 = drbd_get_max_capacity(mdev->ldev);
#line 2932
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___1);
#line 2934
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2939
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 144U) {
#line 2940
      __x = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2940
      __y = p_usize;
#line 2940
      if (__x != 0UL) {
#line 2940
        if (__y != 0UL) {
#line 2940
          _min1 = __x;
#line 2940
          _min2 = __y;
#line 2940
          tmp___2 = _min1 < _min2 ? _min1 : _min2;
        } else {
#line 2940
          tmp___2 = __x;
        }
#line 2940
        tmp___3 = tmp___2;
      } else {
#line 2940
        tmp___3 = __y;
      }
#line 2940
      p_usize = tmp___3;
    } else {

    }
#line 2943
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2945
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2946
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2947
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer sets u_size to %lu sectors\n",
                (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2953
    tmp___4 = drbd_new_dev_size(mdev, mdev->ldev, 0);
#line 2953
    tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 2953
    if ((tmp___4 < tmp___5 && (int )mdev->state.ldv_35955.disk > 4) && (int )mdev->state.ldv_35955.conn <= 9) {
#line 2957
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "The peer\'s disk size is too small!\n");
#line 2958
      val___0.i = 0U;
#line 2958
      val___0.ldv_35955.conn = 1U;
#line 2958
      mask___0.i = 0U;
#line 2958
      mask___0.ldv_35955.conn = 31U;
#line 2958
      drbd_force_state(mdev, mask___0, val___0);
#line 2959
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2960
      put_ldev(mdev);
#line 2961
      return (0);
    } else {

    }
#line 2963
    put_ldev(mdev);
  } else {

  }
#line 2967
  tmp___7 = __fswab16((int )p->dds_flags);
#line 2967
  ddsf = (enum dds_flags )tmp___7;
#line 2968
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2968
  if (tmp___8 != 0) {
#line 2969
    dd = drbd_determin_dev_size(mdev, ddsf);
#line 2970
    put_ldev(mdev);
#line 2971
    if ((int )dd == -1) {
#line 2972
      return (0);
    } else {

    }
#line 2973
    drbd_md_sync(mdev);
  } else {
#line 2976
    drbd_set_my_capacity(mdev, p_size);
  }
#line 2979
  tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2979
  if (tmp___13 != 0) {
#line 2980
    tmp___9 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2980
    if ((mdev->ldev)->known_size != tmp___9) {
#line 2981
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2982
      ldsc = 1;
    } else {

    }
#line 2985
    if (mdev->agreed_pro_version <= 93) {
#line 2986
      tmp___10 = __fswab32(p->max_segment_size);
#line 2986
      max_seg_s = tmp___10;
    } else
#line 2987
    if (mdev->agreed_pro_version == 94) {
#line 2988
      max_seg_s = 32768U;
    } else {
#line 2990
      max_seg_s = 131072U;
    }
#line 2992
    tmp___11 = queue_max_segment_size(mdev->rq_queue);
#line 2992
    if (tmp___11 != max_seg_s) {
#line 2993
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 2995
    tmp___12 = __fswab16((int )p->queue_order_type);
#line 2995
    drbd_setup_order_type(mdev, (int )tmp___12);
#line 2996
    put_ldev(mdev);
  } else {

  }
#line 2999
  if ((int )mdev->state.ldv_35955.conn > 9) {
#line 3000
    tmp___14 = __fswab64(p->c_size);
#line 3000
    tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 3000
    if (tmp___14 != (unsigned long long )tmp___15 || ldsc != 0) {
#line 3004
      drbd_send_sizes(mdev, 0, ddsf);
    } else {

    }
#line 3006
    tmp___16 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 3006
    if (tmp___16 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 160U)) {
#line 3008
      if ((int )mdev->state.ldv_35955.pdsk > 3 && (int )mdev->state.ldv_35955.disk > 3) {
#line 3010
        if (((unsigned int )ddsf & 2U) != 0U) {
#line 3011
          _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage suppressed with --assume-clean\n");
        } else {
#line 3013
          resync_after_online_grow(mdev);
        }
      } else {
#line 3015
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 3019
  return (1);
}
}
#line 3022 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  void *tmp ;
  __u64 tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 3024
  p = & mdev->data.rbuf.uuids;
#line 3028
  tmp = kmalloc___1(48UL, 16U);
#line 3028
  p_uuid = (u64 *)tmp;
#line 3030
  i = 0;
#line 3030
  goto ldv_46571;
  ldv_46570: 
#line 3031
  tmp___0 = __fswab64(p->uuid[i]);
#line 3031
  *(p_uuid + (unsigned long )i) = tmp___0;
#line 3030
  i = i + 1;
  ldv_46571: ;
#line 3030
  if (i <= 5) {
#line 3031
    goto ldv_46570;
  } else {

  }
#line 3033
  kfree((void const   *)mdev->p_uuid);
#line 3034
  mdev->p_uuid = p_uuid;
#line 3036
  if ((((int )mdev->state.ldv_35955.conn <= 9 && (int )mdev->state.ldv_35955.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 3040
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only connect to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 3042
    val.i = 0U;
#line 3042
    val.ldv_35955.conn = 1U;
#line 3042
    mask.i = 0U;
#line 3042
    mask.ldv_35955.conn = 31U;
#line 3042
    drbd_force_state(mdev, mask, val);
#line 3043
    return (0);
  } else {

  }
#line 3046
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3046
  if (tmp___1 != 0) {
#line 3047
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 3052
    if (skip_initial_sync != 0) {
#line 3053
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Accepted new current UUID, preparing to skip initial sync\n");
#line 3054
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 3056
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 3057
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 3058
      __ns.i = mdev->state.i;
#line 3058
      __ns.ldv_35955.disk = 8U;
#line 3058
      __ns.ldv_35955.pdsk = 8U;
#line 3058
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 3060
      drbd_md_sync(mdev);
    } else {

    }
#line 3062
    put_ldev(mdev);
  } else
#line 3063
  if ((int )mdev->state.ldv_35955.disk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3067
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3074
  tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3074
  if (tmp___2 == 0) {
#line 3074
    goto ldv_46580;
  } else {

  }
#line 3074
  tmp___3 = get_current();
#line 3074
  __wait.flags = 0U;
#line 3074
  __wait.private = (void *)tmp___3;
#line 3074
  __wait.func = & autoremove_wake_function;
#line 3074
  __wait.task_list.next = & __wait.task_list;
#line 3074
  __wait.task_list.prev = & __wait.task_list;
  ldv_46583: 
#line 3074
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3074
  tmp___4 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3074
  if (tmp___4 == 0) {
#line 3074
    goto ldv_46582;
  } else {

  }
#line 3074
  schedule();
#line 3074
  goto ldv_46583;
  ldv_46582: 
#line 3074
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46580: ;
#line 3075
  if ((int )mdev->state.ldv_35955.conn > 9 && (int )mdev->state.ldv_35955.disk <= 3) {
#line 3076
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3078
  return (1);
}
}
#line 3085 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3089
  c_tab[0] = 0;
#line 3089
  c_tab[1] = C_TEAR_DOWN;
#line 3089
  c_tab[2] = 0;
#line 3089
  c_tab[3] = 0;
#line 3089
  c_tab[4] = 0;
#line 3089
  c_tab[5] = 0;
#line 3089
  c_tab[6] = 0;
#line 3089
  c_tab[7] = 0;
#line 3089
  c_tab[8] = 0;
#line 3089
  c_tab[9] = 0;
#line 3089
  c_tab[10] = C_CONNECTED;
#line 3089
  c_tab[11] = C_STARTING_SYNC_T;
#line 3089
  c_tab[12] = C_STARTING_SYNC_S;
#line 3089
  c_tab[13] = 0;
#line 3089
  c_tab[14] = 0;
#line 3089
  c_tab[15] = 0;
#line 3089
  c_tab[16] = 0;
#line 3089
  c_tab[17] = 0;
#line 3089
  c_tab[18] = C_VERIFY_T;
#line 3089
  c_tab[19] = 0;
#line 3089
  c_tab[20] = 0;
#line 3089
  c_tab[21] = 0;
#line 3089
  c_tab[22] = 0;
#line 3089
  c_tab[23] = 0;
#line 3089
  c_tab[24] = 0;
#line 3089
  c_tab[25] = 0;
#line 3089
  c_tab[26] = 0;
#line 3089
  c_tab[27] = 0;
#line 3089
  c_tab[28] = 0;
#line 3089
  c_tab[29] = 0;
#line 3089
  c_tab[30] = 0;
#line 3089
  c_tab[31] = C_MASK;
#line 3099
  ms.i = ps.i;
#line 3101
  ms.ldv_35955.conn = (unsigned char )c_tab[(int )ps.ldv_35955.conn];
#line 3102
  ms.ldv_35955.peer = ps.ldv_35955.role;
#line 3103
  ms.ldv_35955.role = ps.ldv_35955.peer;
#line 3104
  ms.ldv_35955.pdsk = ps.ldv_35955.disk;
#line 3105
  ms.ldv_35955.disk = ps.ldv_35955.pdsk;
#line 3106
  ms.ldv_35955.peer_isp = (unsigned char )((int )ps.ldv_35955.aftr_isp | (int )ps.ldv_35955.user_isp);
#line 3108
  return (ms);
}
}
#line 3111 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3113
  p = & mdev->data.rbuf.req_state;
#line 3117
  tmp = __fswab32(p->mask);
#line 3117
  mask.i = tmp;
#line 3118
  tmp___0 = __fswab32(p->val);
#line 3118
  val.i = tmp___0;
#line 3120
  tmp___1 = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
#line 3120
  if (tmp___1 != 0) {
#line 3120
    tmp___2 = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 3120
    if (tmp___2 != 0) {
#line 3122
      drbd_send_sr_reply(mdev, -19);
#line 3123
      return (1);
    } else {

    }
  } else {

  }
#line 3126
  mask = convert_state(mask);
#line 3127
  val = convert_state(val);
#line 3129
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3131
  drbd_send_sr_reply(mdev, rv);
#line 3132
  drbd_md_sync(mdev);
#line 3134
  return (1);
}
}
#line 3137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_state *p ;
  union drbd_state os ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  enum chg_state_flags cs_flags ;
  int rv ;
  __u32 tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  int cr ;
  int tmp___2 ;
  enum drbd_conns tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___5 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;

  {
#line 3139
  p = & mdev->data.rbuf.state;
#line 3145
  tmp = __fswab32(p->state);
#line 3145
  peer_state.i = tmp;
#line 3147
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_35955.disk;
#line 3148
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3149
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3150
    tmp___0 = drbd_disk_str(real_peer_disk);
#line 3150
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "real peer disk state = %s\n",
              tmp___0);
  } else {

  }
#line 3153
  spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3155
  ns = mdev->state;
#line 3155
  os = ns;
#line 3156
  spin_unlock_irq(& mdev->req_lock);
#line 3160
  if (((*((unsigned int *)(& os) + 0UL) == 32768U && (unsigned int )real_peer_disk == 8U) && (int )os.ldv_35955.conn > 10) && (unsigned int )*((unsigned char *)(& os) + 1UL) == 16U) {
#line 3168
    if ((int )peer_state.ldv_35955.conn > 10 && (int )peer_state.ldv_35955.conn <= 15) {
#line 3170
      real_peer_disk = D_INCONSISTENT;
    } else
#line 3175
    if ((int )os.ldv_35955.conn > 15 && (unsigned int )*((unsigned short *)(& peer_state) + 0UL) == 160U) {
#line 3177
      tmp___1 = drbd_bm_total_weight(mdev);
#line 3177
      if (tmp___1 <= mdev->rs_failed) {
#line 3178
        drbd_resync_finished(mdev);
      } else {

      }
#line 3179
      return (1);
    } else {

    }
  } else {

  }
#line 3188
  if (((*((unsigned int *)(& os) + 0UL) == 65536U && (unsigned int )real_peer_disk == 4U) && (unsigned int )*((unsigned short *)(& os) + 0UL) == 160U) && (int )peer_state.ldv_35955.conn > 16) {
#line 3190
    real_peer_disk = D_UP_TO_DATE;
  } else {

  }
#line 3192
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 3193
    ns.ldv_35955.conn = 10U;
  } else {

  }
#line 3195
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_35955.disk > 2) {
#line 3195
    tmp___5 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3195
    if (tmp___5 != 0) {
#line 3200
      cr = (int )os.ldv_35955.conn <= 9;
#line 3203
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)(& os) + 1UL) == 6U)) | cr;
#line 3208
      tmp___2 = constant_test_bit(13U, (unsigned long const volatile   *)(& mdev->flags));
#line 3208
      cr = tmp___2 | cr;
#line 3211
      cr = ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((int )peer_state.ldv_35955.conn > 10 && (int )peer_state.ldv_35955.conn <= 14)) | cr;
#line 3215
      if (cr != 0) {
#line 3216
        tmp___3 = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_35955.role,
                                      real_peer_disk);
#line 3216
        ns.ldv_35955.conn = (unsigned char )tmp___3;
      } else {

      }
#line 3218
      put_ldev(mdev);
#line 3219
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 496U) {
#line 3220
        ns.ldv_35955.conn = 10U;
#line 3221
        if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 6U) {
#line 3222
          val.i = 0U;
#line 3222
          val.ldv_35955.disk = 2U;
#line 3222
          mask.i = 0U;
#line 3222
          mask.ldv_35955.disk = 15U;
#line 3222
          drbd_force_state(mdev, mask, val);
        } else
#line 3223
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3224
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Disk attach process on the peer node was aborted.\n");
#line 3225
          peer_state.ldv_35955.disk = 0U;
#line 3226
          real_peer_disk = D_DISKLESS;
        } else {
#line 3228
          tmp___4 = test_and_clear_bit(25, (unsigned long volatile   *)(& mdev->flags));
#line 3228
          if (tmp___4 != 0) {
#line 3229
            return (0);
          } else {

          }
#line 3230
          if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 144U) {
#line 3230
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( os.conn == C_WF_REPORT_PARAMS ) in %s:%d\n",
                    (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                    3230);
          } else {

          }
#line 3231
          val___0.i = 0U;
#line 3231
          val___0.ldv_35955.conn = 1U;
#line 3231
          mask___0.i = 0U;
#line 3231
          mask___0.ldv_35955.conn = 31U;
#line 3231
          drbd_force_state(mdev, mask___0, val___0);
#line 3232
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3237
  spin_lock_irq(& mdev->req_lock);
#line 3238
  if (mdev->state.i != os.i) {
#line 3239
    goto retry;
  } else {

  }
#line 3240
  clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 3241
  ns.ldv_35955.peer = peer_state.ldv_35955.role;
#line 3242
  ns.ldv_35955.pdsk = (unsigned char )real_peer_disk;
#line 3243
  ns.ldv_35955.peer_isp = (unsigned char )((int )peer_state.ldv_35955.aftr_isp | (int )peer_state.ldv_35955.user_isp);
#line 3244
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3245
    ns.ldv_35955.disk = mdev->new_state_tmp.ldv_35955.disk;
  } else {

  }
#line 3246
  cs_flags = (enum chg_state_flags )(((int )os.ldv_35955.conn > 9 || (int )ns.ldv_35955.conn <= 9) + 2);
#line 3247
  if (*((unsigned int *)(& ns) + 0UL) == 57344U) {
#line 3247
    tmp___6 = is_susp(ns);
#line 3247
    if (tmp___6 != 0) {
#line 3247
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 3247
        if ((int )os.ldv_35955.conn <= 9) {
#line 3247
          tmp___7 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 3247
          if (tmp___7 != 0) {
#line 3251
            spin_unlock_irq(& mdev->req_lock);
#line 3252
            dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Aborting Connect, can not thaw IO with an only Consistent peer\n");
#line 3253
            tl_clear(mdev);
#line 3254
            drbd_uuid_new_current(mdev);
#line 3255
            clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 3256
            val___1.i = 0U;
#line 3256
            val___1.ldv_35955.conn = 6U;
#line 3256
            val___1.ldv_35955.susp = 0U;
#line 3256
            mask___1.i = 0U;
#line 3256
            mask___1.ldv_35955.conn = 31U;
#line 3256
            mask___1.ldv_35955.susp = 1U;
#line 3256
            drbd_force_state(mdev, mask___1, val___1);
#line 3257
            return (0);
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3259
  rv = _drbd_set_state(mdev, ns, cs_flags, 0);
#line 3260
  ns = mdev->state;
#line 3261
  spin_unlock_irq(& mdev->req_lock);
#line 3263
  if (rv <= 0) {
#line 3264
    val___2.i = 0U;
#line 3264
    val___2.ldv_35955.conn = 1U;
#line 3264
    mask___2.i = 0U;
#line 3264
    mask___2.ldv_35955.conn = 31U;
#line 3264
    drbd_force_state(mdev, mask___2, val___2);
#line 3265
    return (0);
  } else {

  }
#line 3268
  if ((int )os.ldv_35955.conn > 9) {
#line 3269
    if (((int )ns.ldv_35955.conn > 10 && (int )peer_state.ldv_35955.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3274
      drbd_send_uuids(mdev);
#line 3275
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3279
  (mdev->net_conf)->want_lose = 0U;
#line 3281
  drbd_md_sync(mdev);
#line 3283
  return (1);
}
}
#line 3286 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 3288
  p = & mdev->data.rbuf.rs_uuid;
#line 3290
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35955.conn <= 9) || (int )mdev->state.ldv_35955.disk <= 2) {
#line 3290
    goto ldv_46634;
  } else {

  }
#line 3290
  tmp = get_current();
#line 3290
  __wait.flags = 0U;
#line 3290
  __wait.private = (void *)tmp;
#line 3290
  __wait.func = & autoremove_wake_function;
#line 3290
  __wait.task_list.next = & __wait.task_list;
#line 3290
  __wait.task_list.prev = & __wait.task_list;
  ldv_46637: 
#line 3290
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3290
  if (((unsigned int )*((unsigned short *)mdev + 1006UL) == 240U || (int )mdev->state.ldv_35955.conn <= 9) || (int )mdev->state.ldv_35955.disk <= 2) {
#line 3290
    goto ldv_46636;
  } else {

  }
#line 3290
  schedule();
#line 3290
  goto ldv_46637;
  ldv_46636: 
#line 3290
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46634: 
#line 3299
  tmp___1 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3299
  if (tmp___1 != 0) {
#line 3300
    tmp___0 = __fswab64(p->uuid);
#line 3300
    _drbd_uuid_set(mdev, 0, tmp___0);
#line 3301
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3303
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3305
    put_ldev(mdev);
  } else {
#line 3307
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Ignoring SyncUUID packet!\n");
  }
#line 3309
  return (1);
}
}
#line 3315 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , unsigned int data_size ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  int tmp ;

  {
#line 3318
  __min1 = 511UL;
#line 3318
  __min2 = c->bm_words - c->word_offset;
#line 3318
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3319
  want = num_words * 8U;
#line 3321
  if (want != data_size) {
#line 3322
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s:want (%u) != data_size (%u)\n",
            "receive_bitmap_plain", want, data_size);
#line 3323
    return (FAILED);
  } else {

  }
#line 3325
  if (want == 0U) {
#line 3326
    return (DONE);
  } else {

  }
#line 3327
  tmp = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3327
  if ((unsigned int )tmp != want) {
#line 3328
    return (FAILED);
  } else {

  }
#line 3330
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3332
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3333
  c->bit_offset = c->word_offset * 64UL;
#line 3334
  if (c->bit_offset > c->bm_bits) {
#line 3335
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3337
  return (OK);
}
}
#line 3341 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  __u16 tmp___0 ;
  int toggle ;
  int tmp___1 ;
  int have ;
  int bits ;
  int tmp___2 ;

  {
#line 3349
  s = c->bit_offset;
#line 3351
  tmp___0 = __fswab16((int )p->head.length);
#line 3351
  len = (int )((unsigned int )tmp___0 - 1U);
#line 3352
  tmp___1 = DCBP_get_start(p);
#line 3352
  toggle = tmp___1;
#line 3356
  tmp___2 = DCBP_get_pad_bits(p);
#line 3356
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___2);
#line 3358
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3359
  if (bits < 0) {
#line 3360
    return (FAILED);
  } else {

  }
#line 3362
  have = bits;
#line 3362
  goto ldv_46670;
  ldv_46669: 
#line 3363
  bits = vli_decode_bits(& rl, look_ahead);
#line 3364
  if (bits <= 0) {
#line 3365
    return (FAILED);
  } else {

  }
#line 3367
  if (toggle != 0) {
#line 3368
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3369
    if (c->bm_bits <= e) {
#line 3370
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap overflow (e:%lu) while decoding bm RLE packet\n",
              e);
#line 3371
      return (FAILED);
    } else {

    }
#line 3373
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3376
  if (have < bits) {
#line 3377
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n",
            have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
            (unsigned int )bs.buf_len);
#line 3381
    return (FAILED);
  } else {

  }
#line 3383
  look_ahead = look_ahead >> bits;
#line 3384
  have = have - bits;
#line 3386
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3387
  if (bits < 0) {
#line 3388
    return (FAILED);
  } else {

  }
#line 3389
  look_ahead = (tmp << have) | look_ahead;
#line 3390
  have = have + bits;
#line 3362
  s = (unsigned long )((unsigned long long )s + rl);
#line 3362
  toggle = toggle == 0;
  ldv_46670: ;
#line 3362
  if (have > 0) {
#line 3363
    goto ldv_46669;
  } else {

  }
#line 3393
  c->bit_offset = s;
#line 3394
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3396
  return (c->bm_bits == s);
}
}
#line 3400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3404
  tmp___0 = DCBP_get_code(p);
#line 3404
  if ((unsigned int )tmp___0 == 2U) {
#line 3405
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3405
    return (tmp);
  } else {

  }
#line 3411
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap_c: unknown encoding %u\n",
          (int )p->encoding);
#line 3412
  val.i = 0U;
#line 3412
  val.ldv_35955.conn = 6U;
#line 3412
  mask.i = 0U;
#line 3412
  mask.ldv_35955.conn = 31U;
#line 3412
  drbd_force_state(mdev, mask, val);
#line 3413
  return (FAILED);
}
}
#line 3416 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;

  {
#line 3420
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3423
  total = c->bytes[0] + c->bytes[1];
#line 3427
  if (total == 0U) {
#line 3428
    return;
  } else {

  }
#line 3431
  if (total >= plain) {
#line 3432
    return;
  } else {

  }
#line 3435
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3438
  if (r > 1000U) {
#line 3439
    r = 1000U;
  } else {

  }
#line 3441
  r = 1000U - r;
#line 3442
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
            direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0], total,
            r / 10U, r % 10U);
#line 3443
  return;
}
}
#line 3458 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  struct p_header80 *h ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  struct p_compressed_bm *p ;
  size_t __len ;
  void *__ret ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___8 ;

  {
#line 3463
  ok = 0;
#line 3464
  h = & mdev->data.rbuf.header.h80;
#line 3466
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3466
  if (tmp == 0) {
#line 3466
    goto ldv_46699;
  } else {

  }
#line 3466
  tmp___0 = get_current();
#line 3466
  __wait.flags = 0U;
#line 3466
  __wait.private = (void *)tmp___0;
#line 3466
  __wait.func = & autoremove_wake_function;
#line 3466
  __wait.task_list.next = & __wait.task_list;
#line 3466
  __wait.task_list.prev = & __wait.task_list;
  ldv_46702: 
#line 3466
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3466
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3466
  if (tmp___1 == 0) {
#line 3466
    goto ldv_46701;
  } else {

  }
#line 3466
  schedule();
#line 3466
  goto ldv_46702;
  ldv_46701: 
#line 3466
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_46699: 
#line 3468
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3472
  tmp___2 = __get_free_pages(16U, 0U);
#line 3472
  buffer = (void *)tmp___2;
#line 3473
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3474
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "receive_bitmap");
#line 3475
    goto out;
  } else {

  }
#line 3478
  tmp___3 = drbd_bm_bits(mdev);
#line 3478
  tmp___4 = drbd_bm_words(mdev);
#line 3478
  __constr_expr_0.bm_bits = tmp___3;
#line 3478
  __constr_expr_0.bm_words = tmp___4;
#line 3478
  __constr_expr_0.bit_offset = 0UL;
#line 3478
  __constr_expr_0.word_offset = 0UL;
#line 3478
  __constr_expr_0.packets[0] = 0U;
#line 3478
  __constr_expr_0.packets[1] = 0U;
#line 3478
  __constr_expr_0.bytes[0] = 0U;
#line 3478
  __constr_expr_0.bytes[1] = 0U;
#line 3478
  c = __constr_expr_0;
  ldv_46711: ;
#line 3484
  if ((unsigned int )cmd == 4U) {
#line 3485
    ret = receive_bitmap_plain(mdev, data_size, (unsigned long *)buffer, & c);
  } else
#line 3486
  if ((unsigned int )cmd == 36U) {
#line 3491
    if (data_size > 4088U) {
#line 3492
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too large\n");
#line 3493
      goto out;
    } else {

    }
#line 3496
    p = (struct p_compressed_bm *)buffer;
#line 3497
    __len = 8UL;
#line 3497
    if (__len > 63UL) {
#line 3497
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3497
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3498
    tmp___5 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )data_size);
#line 3498
    if ((unsigned int )tmp___5 != data_size) {
#line 3499
      goto out;
    } else {

    }
#line 3500
    if (data_size <= 1U) {
#line 3501
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ReportCBitmap packet too small (l:%u)\n",
              data_size);
#line 3502
      return (2);
    } else {

    }
#line 3504
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3506
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receive_bitmap: cmd neither ReportBitMap nor ReportCBitMap (is 0x%x)",
             (unsigned int )cmd);
#line 3507
    goto out;
  }
#line 3510
  c.packets[(unsigned int )cmd == 4U] = c.packets[(unsigned int )cmd == 4U] + 1U;
#line 3511
  c.bytes[(unsigned int )cmd == 4U] = (c.bytes[(unsigned int )cmd == 4U] + data_size) + 8U;
#line 3513
  if ((unsigned int )ret != 0U) {
#line 3514
    goto ldv_46710;
  } else {

  }
#line 3516
  tmp___6 = drbd_recv_header(mdev, & cmd, & data_size);
#line 3516
  if (tmp___6 == 0) {
#line 3517
    goto out;
  } else {

  }
#line 3518
  if ((unsigned int )ret == 0U) {
#line 3519
    goto ldv_46711;
  } else {

  }
  ldv_46710: ;
#line 3519
  if ((unsigned int )ret == 2U) {
#line 3520
    goto out;
  } else {

  }
#line 3522
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3524
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 224U) {
#line 3525
    tmp___7 = drbd_send_bitmap(mdev);
#line 3525
    ok = tmp___7 == 0;
#line 3526
    if (ok == 0) {
#line 3527
      goto out;
    } else {

    }
#line 3529
    val.i = 0U;
#line 3529
    val.ldv_35955.conn = 15U;
#line 3529
    mask.i = 0U;
#line 3529
    mask.ldv_35955.conn = 31U;
#line 3529
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3530
    if (ok != 1) {
#line 3530
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ok == SS_SUCCESS ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              3530);
    } else {

    }
  } else
#line 3531
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 208U) {
#line 3534
    tmp___8 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35955.conn);
#line 3534
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected cstate (%s) in receive_bitmap\n",
              tmp___8);
  } else {

  }
#line 3538
  ok = 1;
  out: 
#line 3540
  drbd_bm_unlock(mdev);
#line 3541
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 1006UL) == 208U) {
#line 3542
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3543
  free_pages((unsigned long )buffer, 0U);
#line 3544
  return (ok);
}
}
#line 3547 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  int __min1 ;
  int __min2 ;
  int _b ;

  {
#line 3553
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "skipping unknown optional packet type %d, l: %d!\n",
           (unsigned int )cmd, data_size);
#line 3556
  size = (int )data_size;
#line 3557
  goto ldv_46733;
  ldv_46732: 
#line 3558
  __min1 = size;
#line 3558
  __min2 = 128;
#line 3558
  want = __min1 < __min2 ? __min1 : __min2;
#line 3559
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3560
  _b = r <= 0;
#line 3560
  if (_b != 0) {
#line 3560
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "receive_skip", (char *)"r <= 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3560);
  } else {

  }
#line 3560
  if (_b != 0) {
#line 3560
    goto ldv_46731;
  } else {

  }
#line 3561
  size = size - r;
  ldv_46733: ;
#line 3557
  if (size > 0) {
#line 3558
    goto ldv_46732;
  } else {

  }
  ldv_46731: ;
#line 3563
  return (size == 0);
}
}
#line 3566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , enum drbd_packets cmd , unsigned int data_size ) 
{ 


  {
#line 3568
  if ((int )mdev->state.ldv_35955.disk > 3) {
#line 3569
    drbd_kick_lo(mdev);
  } else {

  }
#line 3573
  drbd_tcp_quickack(mdev->data.socket);
#line 3575
  return (1);
}
}
#line 3586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct data_cmd drbd_cmd_handler[41U]  = 
#line 3586
  {      {1, 32UL, & receive_Data}, 
        {1, 32UL, & receive_DataReply}, 
        {1, 32UL, & receive_RSDataReply}, 
        {0, 16UL, & receive_Barrier}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 8UL, & receive_UnplugRemote}, 
        {0, 32UL, & receive_DataRequest}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 32UL, & receive_protocol}, 
        {0, 56UL, & receive_uuids}, 
        {0, 40UL, & receive_sizes}, 
        {0, 12UL, & receive_state}, 
        {0, 16UL, & receive_sync_uuid}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_req_state}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 32UL, & receive_DataRequest}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 32UL, & receive_DataRequest}, 
        {0, 0UL, 0}, 
        {1, 8UL, & receive_SyncParam}, 
        {1, 8UL, & receive_bitmap}, 
        {0, 0UL, 0}, 
        {0, 0UL, 0}, 
        {0, 16UL, & receive_skip}, 
        {0, 0UL, 0}};
#line 3620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  union p_header *header ;
  unsigned int packet_size ;
  enum drbd_packets cmd ;
  size_t shs ;
  int rv ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  enum drbd_thread_state tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3622
  header = & mdev->data.rbuf.header;
#line 3628
  goto ldv_46758;
  ldv_46757: 
#line 3629
  drbd_thread_current_set_cpu(mdev);
#line 3630
  tmp = drbd_recv_header(mdev, & cmd, & packet_size);
#line 3630
  if (tmp == 0) {
#line 3631
    goto err_out;
  } else {

  }
#line 3633
  tmp___0 = __builtin_expect((unsigned int )cmd > 39U, 0L);
#line 3633
  if (tmp___0 != 0L) {
#line 3634
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
            (unsigned int )cmd, packet_size);
#line 3635
    goto err_out;
  } else {
#line 3633
    tmp___1 = __builtin_expect((unsigned long )drbd_cmd_handler[(unsigned int )cmd].function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                                                          enum drbd_packets  ,
                                                                                                                          unsigned int  ))0),
                               0L);
#line 3633
    if (tmp___1 != 0L) {
#line 3634
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown packet type %d, l: %d!\n",
              (unsigned int )cmd, packet_size);
#line 3635
      goto err_out;
    } else {

    }
  }
#line 3638
  shs = drbd_cmd_handler[(unsigned int )cmd].pkt_size - 8UL;
#line 3639
  rv = drbd_recv(mdev, (void *)(& header->h80.payload), shs);
#line 3640
  tmp___2 = __builtin_expect((size_t )rv != shs, 0L);
#line 3640
  if (tmp___2 != 0L) {
#line 3641
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read while reading sub header: rv=%d\n",
            rv);
#line 3642
    goto err_out;
  } else {

  }
#line 3645
  if ((size_t )packet_size != shs && drbd_cmd_handler[(unsigned int )cmd].expect_payload == 0) {
#line 3646
    tmp___3 = cmdname(cmd);
#line 3646
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No payload expected %s l:%d\n",
            tmp___3, packet_size);
#line 3647
    goto err_out;
  } else {

  }
#line 3650
  rv = (*(drbd_cmd_handler[(unsigned int )cmd].function))(mdev, cmd, packet_size - (unsigned int )shs);
#line 3652
  tmp___5 = __builtin_expect(rv == 0, 0L);
#line 3652
  if (tmp___5 != 0L) {
#line 3653
    tmp___4 = cmdname(cmd);
#line 3653
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error receiving %s, l: %d!\n",
            tmp___4, packet_size);
#line 3655
    goto err_out;
  } else {

  }
  ldv_46758: 
#line 3628
  tmp___6 = get_t_state(& mdev->receiver);
#line 3628
  if ((unsigned int )tmp___6 == 1U) {
#line 3629
    goto ldv_46757;
  } else {

  }

#line 3659
  if (0) {
    err_out: 
#line 3661
    val.i = 0U;
#line 3661
    val.ldv_35955.conn = 6U;
#line 3661
    mask.i = 0U;
#line 3661
    mask.ldv_35955.conn = 31U;
#line 3661
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 3665
  drbd_md_sync(mdev);
#line 3666
  return;
}
}
#line 3668 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3672
  barr.w.cb = & w_prev_work_done;
#line 3673
  init_completion(& barr.done);
#line 3674
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3675
  wait_for_completion(& barr.done);
#line 3676
  return;
}
}
#line 3678 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_tl_hash(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *h ;

  {
#line 3682
  spin_lock_irq(& mdev->req_lock);
#line 3684
  if ((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0) || (unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 3685
    spin_unlock_irq(& mdev->req_lock);
#line 3686
    return;
  } else {

  }
#line 3689
  h = mdev->ee_hash;
#line 3689
  goto ldv_46773;
  ldv_46772: ;
#line 3690
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3691
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
  } else {

  }
#line 3689
  h = h + 1;
  ldv_46773: ;
#line 3689
  if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3690
    goto ldv_46772;
  } else {

  }
#line 3693
  kfree((void const   *)mdev->ee_hash);
#line 3694
  mdev->ee_hash = 0;
#line 3695
  mdev->ee_hash_s = 0U;
#line 3698
  h = mdev->tl_hash;
#line 3698
  goto ldv_46776;
  ldv_46775: ;
#line 3699
  if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3700
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED tl_hash[%u] == %p, expected NULL\n",
            (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
  } else {

  }
#line 3698
  h = h + 1;
  ldv_46776: ;
#line 3698
  if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3699
    goto ldv_46775;
  } else {

  }
#line 3702
  kfree((void const   *)mdev->tl_hash);
#line 3703
  mdev->tl_hash = 0;
#line 3704
  mdev->tl_hash_s = 0U;
#line 3705
  spin_unlock_irq(& mdev->req_lock);
#line 3706
  return;
}
}
#line 3708 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3712
  rv = 0;
#line 3715
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) {
#line 3716
    return;
  } else {

  }
#line 3717
  if ((int )mdev->state.ldv_35955.conn > 7) {
#line 3718
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_35955.conn);
#line 3718
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED cstate = %s, expected < WFConnection\n",
            tmp);
  } else {

  }
#line 3722
  drbd_thread_stop(& mdev->asender);
#line 3723
  drbd_free_sock(mdev);
#line 3726
  spin_lock_irq(& mdev->req_lock);
#line 3727
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3728
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3729
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3730
  spin_unlock_irq(& mdev->req_lock);
#line 3742
  drbd_rs_cancel_all(mdev);
#line 3743
  mdev->rs_total = 0UL;
#line 3744
  mdev->rs_failed = 0UL;
#line 3745
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3746
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3749
  del_timer_sync(& mdev->resync_timer);
#line 3750
  resync_timer_fn((unsigned long )mdev);
#line 3755
  drbd_flush_workqueue(mdev);
#line 3759
  drbd_process_done_ee(mdev);
#line 3761
  kfree((void const   *)mdev->p_uuid);
#line 3762
  mdev->p_uuid = 0;
#line 3764
  tmp___0 = is_susp(mdev->state);
#line 3764
  if (tmp___0 == 0) {
#line 3765
    tl_clear(mdev);
  } else {

  }
#line 3767
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection closed\n");
#line 3769
  drbd_md_sync(mdev);
#line 3771
  fp = FP_DONT_CARE;
#line 3772
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3772
  if (tmp___1 != 0) {
#line 3773
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3774
    put_ldev(mdev);
  } else {

  }
#line 3777
  if (((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )fp != 0U) && (int )mdev->state.ldv_35955.pdsk > 5) {
#line 3778
    drbd_try_outdate_peer_async(mdev);
  } else {

  }
#line 3780
  spin_lock_irq(& mdev->req_lock);
#line 3781
  os = mdev->state;
#line 3782
  if ((int )os.ldv_35955.conn > 1) {
#line 3784
    ns = os;
#line 3785
    ns.ldv_35955.conn = 2U;
#line 3786
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3788
  spin_unlock_irq(& mdev->req_lock);
#line 3790
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3791
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3791
    if (tmp___2 == 0) {
#line 3791
      goto ldv_46786;
    } else {

    }
#line 3791
    tmp___3 = get_current();
#line 3791
    __wait.flags = 0U;
#line 3791
    __wait.private = (void *)tmp___3;
#line 3791
    __wait.func = & autoremove_wake_function;
#line 3791
    __wait.task_list.next = & __wait.task_list;
#line 3791
    __wait.task_list.prev = & __wait.task_list;
    ldv_46789: 
#line 3791
    prepare_to_wait(& mdev->net_cnt_wait, & __wait, 2);
#line 3791
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3791
    if (tmp___4 == 0) {
#line 3791
      goto ldv_46788;
    } else {

    }
#line 3791
    schedule();
#line 3791
    goto ldv_46789;
    ldv_46788: 
#line 3791
    finish_wait(& mdev->net_cnt_wait, & __wait);
    ldv_46786: 
#line 3793
    tmp___8 = is_susp(mdev->state);
#line 3793
    if (tmp___8 == 0) {
#line 3796
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3796
      if (tmp___5 == 0) {
#line 3796
        goto ldv_46790;
      } else {

      }
#line 3796
      tmp___6 = get_current();
#line 3796
      __wait___0.flags = 0U;
#line 3796
      __wait___0.private = (void *)tmp___6;
#line 3796
      __wait___0.func = & autoremove_wake_function;
#line 3796
      __wait___0.task_list.next = & __wait___0.task_list;
#line 3796
      __wait___0.task_list.prev = & __wait___0.task_list;
      ldv_46793: 
#line 3796
      prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3796
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3796
      if (tmp___7 == 0) {
#line 3796
        goto ldv_46792;
      } else {

      }
#line 3796
      schedule();
#line 3796
      goto ldv_46793;
      ldv_46792: 
#line 3796
      finish_wait(& mdev->misc_wait, & __wait___0);
      ldv_46790: 
#line 3797
      drbd_free_tl_hash(mdev);
    } else {

    }
#line 3800
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3801
    mdev->cram_hmac_tfm = 0;
#line 3803
    kfree((void const   *)mdev->net_conf);
#line 3804
    mdev->net_conf = 0;
#line 3805
    val.i = 0U;
#line 3805
    val.ldv_35955.conn = 0U;
#line 3805
    mask.i = 0U;
#line 3805
    mask.ldv_35955.conn = 31U;
#line 3805
    drbd_request_state(mdev, mask, val);
  } else {

  }
#line 3815
  tmp___9 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3815
  i = (unsigned int )tmp___9;
#line 3816
  if (i != 0U) {
#line 3817
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "net_ee not empty, killed %u entries\n",
              i);
  } else {

  }
#line 3818
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->pp_in_use_by_net));
#line 3818
  i = (unsigned int )tmp___10;
#line 3819
  if (i != 0U) {
#line 3820
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use_by_net = %d, expected 0\n",
              i);
  } else {

  }
#line 3821
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3821
  i = (unsigned int )tmp___11;
#line 3822
  if (i != 0U) {
#line 3823
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "pp_in_use = %d, expected 0\n",
              i);
  } else {

  }
#line 3825
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3825
  if (tmp___12 == 0) {
#line 3825
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3825);
  } else {

  }
#line 3826
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3826
  if (tmp___13 == 0) {
#line 3826
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3826);
  } else {

  }
#line 3827
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3827
  if (tmp___14 == 0) {
#line 3827
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3827);
  } else {

  }
#line 3828
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3828
  if (tmp___15 == 0) {
#line 3828
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3828);
  } else {

  }
#line 3831
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3832
  tmp___16 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3832
  if (tmp___16 == 0) {
#line 3832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            3832);
  } else {

  }
#line 3833
  return;
}
}
#line 3844 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  int tmp ;

  {
#line 3847
  p = & mdev->data.sbuf.handshake;
#line 3850
  tmp = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3850
  if (tmp != 0) {
#line 3851
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "interrupted during initial handshake\n");
#line 3852
    return (0);
  } else {

  }
#line 3855
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3856
    mutex_unlock(& mdev->data.mutex);
#line 3857
    return (0);
  } else {

  }
#line 3860
  memset((void *)p, 0, 80UL);
#line 3861
  p->protocol_min = 1442840576U;
#line 3862
  p->protocol_max = 1593835520U;
#line 3863
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header80 *)p,
                      80UL, 0U);
#line 3865
  mutex_unlock(& mdev->data.mutex);
#line 3866
  return (ok);
}
}
#line 3876 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  unsigned int length ;
  enum drbd_packets cmd ;
  int rv ;
  char const   *tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int __min1 ;
  int __min2 ;

  {
#line 3879
  p = & mdev->data.rbuf.handshake;
#line 3880
  expect = 72;
#line 3885
  rv = drbd_send_handshake(mdev);
#line 3886
  if (rv == 0) {
#line 3887
    return (0);
  } else {

  }
#line 3889
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 3890
  if (rv == 0) {
#line 3891
    return (0);
  } else {

  }
#line 3893
  if ((unsigned int )cmd != 65534U) {
#line 3894
    tmp = cmdname(cmd);
#line 3894
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake packet, received: %s (0x%04x)\n",
            tmp, (unsigned int )cmd);
#line 3896
    return (-1);
  } else {

  }
#line 3899
  if ((unsigned int )expect != length) {
#line 3900
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected HandShake length: %u, received: %u\n",
            expect, length);
#line 3902
    return (-1);
  } else {

  }
#line 3905
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3907
  if (rv != expect) {
#line 3908
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving handshake packet: l=%u\n",
            rv);
#line 3909
    return (0);
  } else {

  }
#line 3912
  tmp___0 = __fswab32(p->protocol_min);
#line 3912
  p->protocol_min = tmp___0;
#line 3913
  tmp___1 = __fswab32(p->protocol_max);
#line 3913
  p->protocol_max = tmp___1;
#line 3914
  if (p->protocol_max == 0U) {
#line 3915
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3917
  if (p->protocol_min > 95U || p->protocol_max <= 85U) {
#line 3919
    goto incompat;
  } else {

  }
#line 3921
  __min1 = 95;
#line 3921
  __min2 = (int )p->protocol_max;
#line 3921
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3923
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Handshake successful: Agreed network protocol version %d\n",
            mdev->agreed_pro_version);
#line 3926
  return (1);
  incompat: 
#line 3929
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
          86, 95, p->protocol_min, p->protocol_max);
#line 3933
  return (-1);
}
}
#line 3952 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  enum drbd_packets cmd ;
  unsigned int length ;
  int rv ;
  char const   *tmp___0 ;
  void *tmp___1 ;
  void *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  int tmp___5 ;

  {
#line 3956
  response = 0;
#line 3957
  right_response = 0;
#line 3958
  peers_ch = 0;
#line 3959
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3959
  key_len = (unsigned int )tmp;
#line 3966
  desc.tfm = mdev->cram_hmac_tfm;
#line 3967
  desc.flags = 0U;
#line 3969
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3971
  if (rv != 0) {
#line 3972
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_setkey() failed with %d\n",
            rv);
#line 3973
    rv = -1;
#line 3974
    goto fail;
  } else {

  }
#line 3977
  get_random_bytes((void *)(& my_challenge), 64);
#line 3979
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 3980
  if (rv == 0) {
#line 3981
    goto fail;
  } else {

  }
#line 3983
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 3984
  if (rv == 0) {
#line 3985
    goto fail;
  } else {

  }
#line 3987
  if ((unsigned int )cmd != 16U) {
#line 3988
    tmp___0 = cmdname(cmd);
#line 3988
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge packet, received: %s (0x%04x)\n",
            tmp___0, (unsigned int )cmd);
#line 3990
    rv = 0;
#line 3991
    goto fail;
  } else {

  }
#line 3994
  if (length > 128U) {
#line 3995
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthChallenge payload too big.\n");
#line 3996
    rv = -1;
#line 3997
    goto fail;
  } else {

  }
#line 4000
  tmp___1 = kmalloc___1((size_t )length, 16U);
#line 4000
  peers_ch = (char *)tmp___1;
#line 4001
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 4002
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of peers_ch failed\n");
#line 4003
    rv = -1;
#line 4004
    goto fail;
  } else {

  }
#line 4007
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )length);
#line 4009
  if ((unsigned int )rv != length) {
#line 4010
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read AuthChallenge: l=%u\n",
            rv);
#line 4011
    rv = 0;
#line 4012
    goto fail;
  } else {

  }
#line 4015
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 4016
  tmp___2 = kmalloc___1((size_t )resp_size, 16U);
#line 4016
  response = (char *)tmp___2;
#line 4017
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 4018
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of response failed\n");
#line 4019
    rv = -1;
#line 4020
    goto fail;
  } else {

  }
#line 4023
  sg_init_table(& sg, 1U);
#line 4024
  sg_set_buf(& sg, (void const   *)peers_ch, length);
#line 4026
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 4027
  if (rv != 0) {
#line 4028
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4029
    rv = -1;
#line 4030
    goto fail;
  } else {

  }
#line 4033
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 4034
  if (rv == 0) {
#line 4035
    goto fail;
  } else {

  }
#line 4037
  rv = drbd_recv_header(mdev, & cmd, & length);
#line 4038
  if (rv == 0) {
#line 4039
    goto fail;
  } else {

  }
#line 4041
  if ((unsigned int )cmd != 17U) {
#line 4042
    tmp___3 = cmdname(cmd);
#line 4042
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse packet, received: %s (0x%04x)\n",
            tmp___3, (unsigned int )cmd);
#line 4044
    rv = 0;
#line 4045
    goto fail;
  } else {

  }
#line 4048
  if (length != resp_size) {
#line 4049
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "expected AuthResponse payload of wrong size\n");
#line 4050
    rv = 0;
#line 4051
    goto fail;
  } else {

  }
#line 4054
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 4056
  if ((unsigned int )rv != resp_size) {
#line 4057
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short read receiving AuthResponse: l=%u\n",
            rv);
#line 4058
    rv = 0;
#line 4059
    goto fail;
  } else {

  }
#line 4062
  tmp___4 = kmalloc___1((size_t )resp_size, 16U);
#line 4062
  right_response = (char *)tmp___4;
#line 4063
  if ((unsigned long )right_response == (unsigned long )((char *)0)) {
#line 4064
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of right_response failed\n");
#line 4065
    rv = -1;
#line 4066
    goto fail;
  } else {

  }
#line 4069
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 4071
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 4072
  if (rv != 0) {
#line 4073
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "crypto_hash_digest() failed with %d\n",
            rv);
#line 4074
    rv = -1;
#line 4075
    goto fail;
  } else {

  }
#line 4078
  tmp___5 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 4078
  rv = tmp___5 == 0;
#line 4080
  if (rv != 0) {
#line 4081
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer authenticated using %d bytes of \'%s\' HMAC\n",
              resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {
#line 4084
    rv = -1;
  }
  fail: 
#line 4087
  kfree((void const   *)peers_ch);
#line 4088
  kfree((void const   *)response);
#line 4089
  kfree((void const   *)right_response);
#line 4091
  return (rv);
}
}
#line 4095 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___2 ;

  {
#line 4097
  mdev = thi->mdev;
#line 4098
  tmp = mdev_to_minor(mdev);
#line 4098
  minor = tmp;
#line 4101
  tmp___0 = get_current();
#line 4101
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 4103
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver (re)started\n");
  ldv_46840: 
#line 4106
  h = drbd_connect(mdev);
#line 4107
  if (h == 0) {
#line 4108
    drbd_disconnect(mdev);
#line 4109
    tmp___1 = get_current();
#line 4109
    tmp___1->state = 1L;
#line 4110
    schedule_timeout(250L);
  } else {

  }
#line 4112
  if (h == -1) {
#line 4113
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Discarding network configuration.\n");
#line 4114
    val.i = 0U;
#line 4114
    val.ldv_35955.conn = 1U;
#line 4114
    mask.i = 0U;
#line 4114
    mask.ldv_35955.conn = 31U;
#line 4114
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4116
  if (h == 0) {
#line 4117
    goto ldv_46840;
  } else {

  }

#line 4118
  if (h > 0) {
#line 4119
    tmp___2 = get_net_conf(mdev);
#line 4119
    if (tmp___2 != 0) {
#line 4120
      drbdd(mdev);
#line 4121
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4125
  drbd_disconnect(mdev);
#line 4127
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "receiver terminated\n");
#line 4128
  return (0);
}
}
#line 4133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;

  {
#line 4135
  p = (struct p_req_state_reply *)h;
#line 4137
  tmp = __fswab32(p->retcode);
#line 4137
  retcode = (int )tmp;
#line 4139
  if (retcode > 0) {
#line 4140
    set_bit(9U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4142
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
#line 4143
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested state change failed by peer: %s (%d)\n",
            tmp___0, retcode);
  }
#line 4146
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4148
  return (1);
}
}
#line 4151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4153
  tmp = drbd_send_ping_ack(mdev);
#line 4153
  return (tmp);
}
}
#line 4157 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  int tmp ;

  {
#line 4160
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4161
  tmp = test_and_set_bit(26, (unsigned long volatile   *)(& mdev->flags));
#line 4161
  if (tmp == 0) {
#line 4162
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 4164
  return (1);
}
}
#line 4167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4169
  p = (struct p_block_ack *)h;
#line 4170
  tmp = __fswab64(p->sector);
#line 4170
  sector = (sector_t )tmp;
#line 4171
  tmp___0 = __fswab32(p->blksize);
#line 4171
  blksize = (int )tmp___0;
#line 4173
  if (mdev->agreed_pro_version <= 88) {
#line 4173
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4173);
  } else {

  }
#line 4175
  tmp___1 = __fswab32(p->seq_num);
#line 4175
  update_peer_seq(mdev, tmp___1);
#line 4177
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4177
  if (tmp___2 != 0) {
#line 4178
    drbd_rs_complete_io(mdev, sector);
#line 4179
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4179U);
#line 4181
    mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4182
    put_ldev(mdev);
  } else {

  }
#line 4184
  atomic_dec(& mdev->rs_pending_cnt);
#line 4184
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4184
  if (tmp___4 < 0) {
#line 4184
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4184
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_IsInSync", 4184, tmp___3);
  } else {

  }
#line 4185
  atomic_add(blksize >> 9, & mdev->rs_sect_in);
#line 4187
  return (1);
}
}
#line 4192 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  struct hlist_node  const  *__mptr ;

  {
#line 4195
  tmp = tl_hash_slot(mdev, sector);
#line 4195
  slot = tmp;
#line 4199
  n = slot->first;
#line 4199
  goto ldv_46881;
  ldv_46880: ;
#line 4200
  if ((unsigned long )req == (unsigned long )id) {
#line 4201
    if (req->sector != sector) {
#line 4202
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
              req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4206
      goto ldv_46879;
    } else {

    }
#line 4208
    return (req);
  } else {

  }
#line 4199
  n = n->next;
  ldv_46881: ;
#line 4199
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4199
    __builtin_prefetch((void const   *)n->next);
#line 4199
    if (1 != 0) {
#line 4199
      __mptr = (struct hlist_node  const  *)n;
#line 4199
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4199
      if (1 != 0) {
#line 4200
        goto ldv_46880;
      } else {
#line 4202
        goto ldv_46879;
      }
    } else {
#line 4202
      goto ldv_46879;
    }
  } else {

  }
  ldv_46879: 
#line 4211
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "_ack_id_to_req: failed to find req %p, sector %llus in list\n",
          (void *)id, (unsigned long long )sector);
#line 4213
  return (0);
}
}
#line 4219 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  long tmp ;

  {
#line 4226
  spin_lock_irq(& mdev->req_lock);
#line 4227
  req = (*validator)(mdev, id, sector);
#line 4228
  tmp = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                         0L);
#line 4228
  if (tmp != 0L) {
#line 4229
    spin_unlock_irq(& mdev->req_lock);
#line 4230
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: got a corrupt block_id/sector pair\n",
            func);
#line 4231
    return (0);
  } else {

  }
#line 4233
  __req_mod(req, what, & m);
#line 4234
  spin_unlock_irq(& mdev->req_lock);
#line 4236
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4237
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4238
  return (1);
}
}
#line 4241 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  __u16 tmp___4 ;
  int tmp___5 ;

  {
#line 4243
  p = (struct p_block_ack *)h;
#line 4244
  tmp = __fswab64(p->sector);
#line 4244
  sector = (sector_t )tmp;
#line 4245
  tmp___0 = __fswab32(p->blksize);
#line 4245
  blksize = (int )tmp___0;
#line 4248
  tmp___1 = __fswab32(p->seq_num);
#line 4248
  update_peer_seq(mdev, tmp___1);
#line 4250
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4251
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4251U);
#line 4252
    atomic_dec(& mdev->rs_pending_cnt);
#line 4252
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4252
    if (tmp___3 < 0) {
#line 4252
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4252
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_BlockAck", 4252, tmp___2);
    } else {

    }
#line 4253
    return (1);
  } else {

  }
#line 4255
  tmp___4 = __fswab16((int )h->command);
#line 4255
  switch ((int )tmp___4) {
  case 23: ;
#line 4257
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4257
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4257);
  } else {

  }
#line 4258
  what = write_acked_by_peer_and_sis;
#line 4259
  goto ldv_46909;
  case 22: ;
#line 4261
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4261
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4261);
  } else {

  }
#line 4262
  what = write_acked_by_peer;
#line 4263
  goto ldv_46909;
  case 21: ;
#line 4265
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4265
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4265);
  } else {

  }
#line 4266
  what = recv_acked_by_peer;
#line 4267
  goto ldv_46909;
  case 24: ;
#line 4269
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4269
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4269);
  } else {

  }
#line 4270
  what = conflict_discarded_by_peer;
#line 4271
  goto ldv_46909;
  default: 
#line 4273
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( 0 ) in %s:%d\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
          4273);
#line 4274
  return (0);
  }
  ldv_46909: 
#line 4277
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_BlockAck", what);
#line 4277
  return (tmp___5);
}
}
#line 4281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  int size ;
  __u32 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 4283
  p = (struct p_block_ack *)h;
#line 4284
  tmp = __fswab64(p->sector);
#line 4284
  sector = (sector_t )tmp;
#line 4286
  tmp___0 = ___ratelimit(& drbd_ratelimit_state, "got_NegAck");
#line 4286
  if (tmp___0 != 0) {
#line 4287
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegAck packet. Peer is in troubles?\n");
  } else {

  }
#line 4289
  tmp___1 = __fswab32(p->seq_num);
#line 4289
  update_peer_seq(mdev, tmp___1);
#line 4291
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4292
    tmp___2 = __fswab32(p->blksize);
#line 4292
    size = (int )tmp___2;
#line 4293
    atomic_dec(& mdev->rs_pending_cnt);
#line 4293
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4293
    if (tmp___4 < 0) {
#line 4293
      tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4293
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
              "got_NegAck", 4293, tmp___3);
    } else {

    }
#line 4294
    drbd_rs_failed_io(mdev, sector, size);
#line 4295
    return (1);
  } else {

  }
#line 4297
  tmp___5 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4297
  return (tmp___5);
}
}
#line 4301 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 4303
  p = (struct p_block_ack *)h;
#line 4304
  tmp = __fswab64(p->sector);
#line 4304
  sector = (sector_t )tmp;
#line 4306
  tmp___0 = __fswab32(p->seq_num);
#line 4306
  update_peer_seq(mdev, tmp___0);
#line 4307
  tmp___1 = __fswab32(p->blksize);
#line 4307
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got NegDReply; Sector %llus, len %u; Fail original request.\n",
          (unsigned long long )sector, tmp___1);
#line 4310
  tmp___2 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4310
  return (tmp___2);
}
}
#line 4314 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 4318
  p = (struct p_block_ack *)h;
#line 4320
  tmp = __fswab64(p->sector);
#line 4320
  sector = (sector_t )tmp;
#line 4321
  tmp___0 = __fswab32(p->blksize);
#line 4321
  size = (int )tmp___0;
#line 4323
  tmp___1 = __fswab32(p->seq_num);
#line 4323
  update_peer_seq(mdev, tmp___1);
#line 4325
  atomic_dec(& mdev->rs_pending_cnt);
#line 4325
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4325
  if (tmp___3 < 0) {
#line 4325
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4325
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_NegRSDReply", 4325, tmp___2);
  } else {

  }
#line 4327
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 4327
  if (tmp___4 != 0) {
#line 4328
    drbd_rs_complete_io(mdev, sector);
#line 4329
    drbd_rs_failed_io(mdev, sector, size);
#line 4330
    put_ldev(mdev);
  } else {

  }
#line 4333
  return (1);
}
}
#line 4336 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4338
  p = (struct p_barrier_ack *)h;
#line 4340
  tmp = __fswab32(p->set_size);
#line 4340
  tl_release(mdev, p->barrier, tmp);
#line 4342
  return (1);
}
}
#line 4345 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  void *tmp___6 ;

  {
#line 4347
  p = (struct p_block_ack *)h;
#line 4352
  tmp = __fswab64(p->sector);
#line 4352
  sector = (sector_t )tmp;
#line 4353
  tmp___0 = __fswab32(p->blksize);
#line 4353
  size = (int )tmp___0;
#line 4355
  tmp___1 = __fswab32(p->seq_num);
#line 4355
  update_peer_seq(mdev, tmp___1);
#line 4357
  tmp___2 = __fswab64(p->block_id);
#line 4357
  if (tmp___2 == 4712ULL) {
#line 4358
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4360
    ov_oos_print(mdev);
  }
#line 4362
  tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 4362
  if (tmp___3 == 0) {
#line 4363
    return (1);
  } else {

  }
#line 4365
  drbd_rs_complete_io(mdev, sector);
#line 4366
  atomic_dec(& mdev->rs_pending_cnt);
#line 4366
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4366
  if (tmp___5 < 0) {
#line 4366
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4366
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: rs_pending_cnt = %d < 0 !\n",
            "got_OVResult", 4366, tmp___4);
  } else {

  }
#line 4368
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4368
  if (mdev->ov_left == 0UL) {
#line 4369
    tmp___6 = kmalloc___1(24UL, 16U);
#line 4369
    w = (struct drbd_work *)tmp___6;
#line 4370
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4371
      w->cb = & w_ov_finished;
#line 4372
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4374
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc(w) failed.");
#line 4375
      ov_oos_print(mdev);
#line 4376
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4379
  put_ldev(mdev);
#line 4380
  return (1);
}
}
#line 4383 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_skip(struct drbd_conf *mdev , struct p_header80 *h ) 
{ 


  {
#line 4385
  return (1);
}
}
#line 4393 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[41U] ;

  {
#line 4395
  asender_tbl[0].pkt_size = 0UL;
#line 4395
  asender_tbl[0].process = 0;
#line 4395
  asender_tbl[1].pkt_size = 0UL;
#line 4395
  asender_tbl[1].process = 0;
#line 4395
  asender_tbl[2].pkt_size = 0UL;
#line 4395
  asender_tbl[2].process = 0;
#line 4395
  asender_tbl[3].pkt_size = 0UL;
#line 4395
  asender_tbl[3].process = 0;
#line 4395
  asender_tbl[4].pkt_size = 0UL;
#line 4395
  asender_tbl[4].process = 0;
#line 4395
  asender_tbl[5].pkt_size = 0UL;
#line 4395
  asender_tbl[5].process = 0;
#line 4395
  asender_tbl[6].pkt_size = 0UL;
#line 4395
  asender_tbl[6].process = 0;
#line 4395
  asender_tbl[7].pkt_size = 0UL;
#line 4395
  asender_tbl[7].process = 0;
#line 4395
  asender_tbl[8].pkt_size = 0UL;
#line 4395
  asender_tbl[8].process = 0;
#line 4395
  asender_tbl[9].pkt_size = 0UL;
#line 4395
  asender_tbl[9].process = 0;
#line 4395
  asender_tbl[10].pkt_size = 0UL;
#line 4395
  asender_tbl[10].process = 0;
#line 4395
  asender_tbl[11].pkt_size = 0UL;
#line 4395
  asender_tbl[11].process = 0;
#line 4395
  asender_tbl[12].pkt_size = 0UL;
#line 4395
  asender_tbl[12].process = 0;
#line 4395
  asender_tbl[13].pkt_size = 0UL;
#line 4395
  asender_tbl[13].process = 0;
#line 4395
  asender_tbl[14].pkt_size = 0UL;
#line 4395
  asender_tbl[14].process = 0;
#line 4395
  asender_tbl[15].pkt_size = 0UL;
#line 4395
  asender_tbl[15].process = 0;
#line 4395
  asender_tbl[16].pkt_size = 0UL;
#line 4395
  asender_tbl[16].process = 0;
#line 4395
  asender_tbl[17].pkt_size = 0UL;
#line 4395
  asender_tbl[17].process = 0;
#line 4395
  asender_tbl[18].pkt_size = 0UL;
#line 4395
  asender_tbl[18].process = 0;
#line 4395
  asender_tbl[19].pkt_size = 8UL;
#line 4395
  asender_tbl[19].process = & got_Ping;
#line 4395
  asender_tbl[20].pkt_size = 8UL;
#line 4395
  asender_tbl[20].process = & got_PingAck;
#line 4395
  asender_tbl[21].pkt_size = 32UL;
#line 4395
  asender_tbl[21].process = & got_BlockAck;
#line 4395
  asender_tbl[22].pkt_size = 32UL;
#line 4395
  asender_tbl[22].process = & got_BlockAck;
#line 4395
  asender_tbl[23].pkt_size = 32UL;
#line 4395
  asender_tbl[23].process = & got_BlockAck;
#line 4395
  asender_tbl[24].pkt_size = 32UL;
#line 4395
  asender_tbl[24].process = & got_BlockAck;
#line 4395
  asender_tbl[25].pkt_size = 32UL;
#line 4395
  asender_tbl[25].process = & got_NegAck;
#line 4395
  asender_tbl[26].pkt_size = 32UL;
#line 4395
  asender_tbl[26].process = & got_NegDReply;
#line 4395
  asender_tbl[27].pkt_size = 32UL;
#line 4395
  asender_tbl[27].process = & got_NegRSDReply;
#line 4395
  asender_tbl[28].pkt_size = 16UL;
#line 4395
  asender_tbl[28].process = & got_BarrierAck;
#line 4395
  asender_tbl[29].pkt_size = 12UL;
#line 4395
  asender_tbl[29].process = & got_RqSReply;
#line 4395
  asender_tbl[30].pkt_size = 0UL;
#line 4395
  asender_tbl[30].process = 0;
#line 4395
  asender_tbl[31].pkt_size = 0UL;
#line 4395
  asender_tbl[31].process = 0;
#line 4395
  asender_tbl[32].pkt_size = 32UL;
#line 4395
  asender_tbl[32].process = & got_OVResult;
#line 4395
  asender_tbl[33].pkt_size = 0UL;
#line 4395
  asender_tbl[33].process = 0;
#line 4395
  asender_tbl[34].pkt_size = 32UL;
#line 4395
  asender_tbl[34].process = & got_IsInSync;
#line 4395
  asender_tbl[35].pkt_size = 0UL;
#line 4395
  asender_tbl[35].process = 0;
#line 4395
  asender_tbl[36].pkt_size = 0UL;
#line 4395
  asender_tbl[36].process = 0;
#line 4395
  asender_tbl[37].pkt_size = 0UL;
#line 4395
  asender_tbl[37].process = 0;
#line 4395
  asender_tbl[38].pkt_size = 0UL;
#line 4395
  asender_tbl[38].process = 0;
#line 4395
  asender_tbl[39].pkt_size = 16UL;
#line 4395
  asender_tbl[39].process = & got_skip;
#line 4395
  asender_tbl[40].pkt_size = 0UL;
#line 4395
  asender_tbl[40].process = 0;
#line 4415
  if (cmd > 40 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header80 * ))0)) {
#line 4416
    return (0);
  } else {

  }
#line 4417
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4420 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header80 *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  struct task_struct *tmp___10 ;
  long tmp___11 ;
  __u16 tmp___12 ;
  __u16 tmp___13 ;
  __u32 tmp___14 ;
  long tmp___15 ;
  __u16 tmp___16 ;
  __u16 tmp___17 ;
  __u16 tmp___18 ;
  __u16 tmp___19 ;
  __u32 tmp___20 ;
  long tmp___21 ;
  int _b___0 ;
  int tmp___22 ;
  enum drbd_thread_state tmp___23 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 4422
  mdev = thi->mdev;
#line 4423
  h = & mdev->meta.rbuf.header.h80;
#line 4424
  cmd = 0;
#line 4427
  buf = (void *)h;
#line 4428
  received = 0;
#line 4429
  expect = 8;
#line 4432
  tmp = mdev_to_minor(mdev);
#line 4432
  tmp___0 = get_current();
#line 4432
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4434
  tmp___1 = get_current();
#line 4434
  tmp___1->policy = 2U;
#line 4435
  tmp___2 = get_current();
#line 4435
  tmp___2->rt_priority = 2U;
#line 4437
  goto ldv_46991;
  ldv_46995: 
#line 4438
  drbd_thread_current_set_cpu(mdev);
#line 4439
  tmp___4 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4439
  if (tmp___4 != 0) {
#line 4440
    tmp___3 = drbd_send_ping(mdev);
#line 4440
    _b = tmp___3 == 0;
#line 4440
    if (_b != 0) {
#line 4440
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"!drbd_send_ping(mdev)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4440);
    } else {

    }
#line 4440
    if (_b != 0) {
#line 4440
      goto reconnect;
    } else {

    }
#line 4441
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4447
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4447
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4447
    if (tmp___5 > 3) {
#line 4449
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_46990: 
#line 4451
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4452
  tmp___6 = get_current();
#line 4452
  flush_signals(tmp___6);
#line 4453
  tmp___7 = drbd_process_done_ee(mdev);
#line 4453
  if (tmp___7 == 0) {
#line 4454
    goto reconnect;
  } else {

  }
#line 4456
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4457
  spin_lock_irq(& mdev->req_lock);
#line 4458
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4459
  spin_unlock_irq(& mdev->req_lock);
#line 4463
  if (empty != 0) {
#line 4464
    goto ldv_46989;
  } else {

  }
#line 4465
  goto ldv_46990;
  ldv_46989: ;
#line 4467
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4468
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4471
  tmp___8 = get_current();
#line 4471
  tmp___9 = signal_pending(tmp___8);
#line 4471
  if (tmp___9 != 0) {
#line 4472
    goto ldv_46991;
  } else {

  }
#line 4474
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4476
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4478
  tmp___10 = get_current();
#line 4478
  flush_signals(tmp___10);
#line 4490
  tmp___11 = __builtin_expect(rv > 0, 1L);
#line 4490
  if (tmp___11 != 0L) {
#line 4491
    received = received + rv;
#line 4492
    buf = buf + (unsigned long )rv;
  } else
#line 4493
  if (rv == 0) {
#line 4494
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta connection shut down by peer.\n");
#line 4495
    goto reconnect;
  } else
#line 4496
  if (rv == -11) {
#line 4497
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4499
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "PingAck did not arrive in time.\n");
#line 4500
      goto reconnect;
    } else {

    }
#line 4502
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4503
    goto ldv_46991;
  } else
#line 4504
  if (rv == -4) {
#line 4505
    goto ldv_46991;
  } else {
#line 4507
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sock_recvmsg returned %d\n",
            rv);
#line 4508
    goto reconnect;
  }
#line 4511
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4512
    tmp___15 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4512
    if (tmp___15 != 0L) {
#line 4513
      tmp___12 = __fswab16((int )h->length);
#line 4513
      tmp___13 = __fswab16((int )h->command);
#line 4513
      tmp___14 = __fswab32(h->magic);
#line 4513
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "magic?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___14, (int )tmp___13, (int )tmp___12);
#line 4517
      goto reconnect;
    } else {

    }
#line 4519
    tmp___16 = __fswab16((int )h->command);
#line 4519
    cmd = get_asender_cmd((int )tmp___16);
#line 4520
    tmp___17 = __fswab16((int )h->length);
#line 4520
    len = (int )tmp___17;
#line 4521
    tmp___21 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4521
    if (tmp___21 != 0L) {
#line 4522
      tmp___18 = __fswab16((int )h->length);
#line 4522
      tmp___19 = __fswab16((int )h->command);
#line 4522
      tmp___20 = __fswab32(h->magic);
#line 4522
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unknown command?? on meta m: 0x%08x c: %d l: %d\n",
              tmp___20, (int )tmp___19, (int )tmp___18);
#line 4526
      goto disconnect;
    } else {

    }
#line 4528
    expect = (int )cmd->pkt_size;
#line 4529
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4529
    if (_b___0 != 0) {
#line 4529
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
              "drbd_asender", (char *)"len != expect-sizeof(struct p_header80)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4529);
    } else {

    }
#line 4529
    if (_b___0 != 0) {
#line 4530
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4532
  if (received == expect) {
#line 4533
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4533
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cmd != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
              4533);
    } else {

    }
#line 4534
    tmp___22 = (*(cmd->process))(mdev, h);
#line 4534
    if (tmp___22 == 0) {
#line 4535
      goto reconnect;
    } else {

    }
#line 4537
    buf = (void *)h;
#line 4538
    received = 0;
#line 4539
    expect = 8;
#line 4540
    cmd = 0;
  } else {

  }
  ldv_46991: 
#line 4437
  tmp___23 = get_t_state(thi);
#line 4437
  if ((unsigned int )tmp___23 == 1U) {
#line 4438
    goto ldv_46995;
  } else {

  }

#line 4544
  if (0) {
    reconnect: 
#line 4546
    val.i = 0U;
#line 4546
    val.ldv_35955.conn = 5U;
#line 4546
    mask.i = 0U;
#line 4546
    mask.ldv_35955.conn = 31U;
#line 4546
    drbd_force_state(mdev, mask, val);
#line 4547
    drbd_md_sync(mdev);
  } else {

  }
#line 4549
  if (0) {
    disconnect: 
#line 4551
    val___0.i = 0U;
#line 4551
    val___0.ldv_35955.conn = 1U;
#line 4551
    mask___0.i = 0U;
#line 4551
    mask___0.ldv_35955.conn = 31U;
#line 4551
    drbd_force_state(mdev, mask___0, val___0);
#line 4552
    drbd_md_sync(mdev);
  } else {

  }
#line 4554
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4556
  if ((int )mdev->state.ldv_35955.conn > 9) {
#line 4556
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
            4556);
  } else {

  }
#line 4557
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "asender terminated\n");
#line 4559
  return (0);
}
}
#line 4599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4611
  LDV_IN_INTERRUPT = 1;
#line 4620
  ldv_initialize();
#line 4622
  goto ldv_47024;
  ldv_47023: 
#line 4625
  tmp = nondet_int();
#line 4625
  switch (tmp) {
  default: ;
#line 4627
  goto ldv_47022;
  }
  ldv_47022: ;
  ldv_47024: 
#line 4622
  tmp___0 = nondet_int();
#line 4622
  if (tmp___0 != 0) {
#line 4623
    goto ldv_47023;
  } else {

  }


#line 4636
  ldv_check_final_state();
#line 4639
  return;
}
}
#line 593 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 595
  __hlist_del(n);
#line 596
  n->next = 0xdead000000100100UL;
#line 597
  n->pprev = 0xdead000000200200UL;
#line 598
  return;
}
}
#line 315 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 319
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 184 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int cpu_number ;
#line 173 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 559 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 561
  rcu_read_lock_sched_notrace();
#line 563
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 565
  return;
}
}
#line 581 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 583
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 585
  rcu_read_lock_sched_notrace();
#line 586
  return;
}
}
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___2(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_11876: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_11876;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 229 "include/linux/slub_def.h"
__inline static void *kmalloc_large___2(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 231
  tmp = get_order(size);
#line 231
  order = (unsigned int )tmp;
#line 232
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 232
  ret = (void *)tmp___0;
#line 234
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 235
  trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 237
  return (ret);
}
}
#line 240 "include/linux/slub_def.h"
__inline static void *kmalloc___2(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 244
  if (0) {
#line 245
    if (size > 8192UL) {
#line 246
      tmp = kmalloc_large___2(size, flags);
#line 246
      return (tmp);
    } else {

    }
#line 248
    if ((flags & 1U) == 0U) {
#line 249
      tmp___0 = kmalloc_slab(size);
#line 249
      s = tmp___0;
#line 251
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 252
        return (16);
      } else {

      }
#line 254
      ret = kmem_cache_alloc_notrace(s, flags);
#line 256
      trace_kmalloc___2((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 258
      return (ret);
    } else {

    }
  } else {

  }
#line 261
  tmp___1 = __kmalloc(size, flags);
#line 261
  return (tmp___1);
}
}
#line 183 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 185
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 185
  if (tmp != 0L) {
#line 186
    if (part->partno != 0) {
#line 187
      __mptr = (struct device  const  *)part->__dev.parent;
#line 187
      return ((struct gendisk *)__mptr + 0xffffffffffffffa0UL);
    } else {
#line 189
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 189
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa0UL);
    }
  } else {

  }
#line 191
  return (0);
}
}
#line 360 "include/linux/genhd.h"
__inline static void part_inc_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 362
  part->in_flight[rw] = part->in_flight[rw] + 1;
#line 363
  if (part->partno != 0) {
#line 364
    tmp = part_to_disk(part);
#line 364
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] + 1;
  } else {

  }
#line 365
  return;
}
}
#line 367 "include/linux/genhd.h"
__inline static void part_dec_in_flight(struct hd_struct *part , int rw ) 
{ 
  struct gendisk *tmp ;

  {
#line 369
  part->in_flight[rw] = part->in_flight[rw] - 1;
#line 370
  if (part->partno != 0) {
#line 371
    tmp = part_to_disk(part);
#line 371
    tmp->part0.in_flight[rw] = tmp->part0.in_flight[rw] - 1;
  } else {

  }
#line 372
  return;
}
}
#line 393
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 212 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 213
extern void bio_pair_release(struct bio_pair * ) ;
#line 668 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1193
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1456
mempool_t *drbd_request_mempool ;
#line 1472
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1474
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 2022 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 2024
  atomic_inc(& mdev->ap_pending_cnt);
#line 2025
  return;
}
}
#line 2188 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2190
  mxb = 1000000;
#line 2191
  tmp = get_net_conf(mdev);
#line 2191
  if (tmp != 0) {
#line 2192
    mxb = (mdev->net_conf)->max_buffers;
#line 2193
    put_net_conf(mdev);
  } else {

  }
#line 2195
  return (mxb);
}
}
#line 2198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2204
  switch ((unsigned int )s.ldv_35955.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2217
  goto ldv_44537;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2236
  return (0);
  }
  ldv_44537: ;
#line 2239
  switch ((unsigned int )s.ldv_35955.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2246
  goto ldv_44557;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2255
  return (0);
  }
  ldv_44557: ;
#line 2258
  return (1);
}
}
#line 2266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2268
  tmp = drbd_get_max_buffers(mdev);
#line 2268
  mxb = tmp;
#line 2270
  tmp___0 = is_susp(mdev->state);
#line 2270
  if (tmp___0 != 0) {
#line 2271
    return (0);
  } else {

  }
#line 2272
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2272
  if (tmp___1 != 0) {
#line 2273
    return (0);
  } else {

  }
#line 2280
  tmp___2 = drbd_state_is_stable(mdev->state);
#line 2280
  if (tmp___2 == 0) {
#line 2281
    return (0);
  } else {

  }
#line 2285
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2285
  if (tmp___3 > mxb) {
#line 2286
    return (0);
  } else {

  }
#line 2287
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2287
  if (tmp___4 != 0) {
#line 2288
    return (0);
  } else {

  }
#line 2289
  return (1);
}
}
#line 2295 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int count ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2299
  tmp = get_current();
#line 2299
  wait.flags = 0U;
#line 2299
  wait.private = (void *)tmp;
#line 2299
  wait.func = & autoremove_wake_function;
#line 2299
  wait.task_list.next = & wait.task_list;
#line 2299
  wait.task_list.prev = & wait.task_list;
#line 2309
  spin_lock_irq(& mdev->req_lock);
#line 2310
  goto ldv_44576;
  ldv_44575: 
#line 2311
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2312
  spin_unlock_irq(& mdev->req_lock);
#line 2313
  schedule();
#line 2314
  finish_wait(& mdev->misc_wait, & wait);
#line 2315
  spin_lock_irq(& mdev->req_lock);
  ldv_44576: 
#line 2310
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2310
  if (tmp___0 == 0) {
#line 2311
    goto ldv_44575;
  } else {

  }
#line 2317
  atomic_add(count, & mdev->ap_bio_cnt);
#line 2318
  spin_unlock_irq(& mdev->req_lock);
#line 2319
  return;
}
}
#line 2321 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2323
  tmp = drbd_get_max_buffers(mdev);
#line 2323
  mxb = tmp;
#line 2324
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2324
  ap_bio = tmp___0;
#line 2326
  if (ap_bio < 0) {
#line 2326
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ap_bio >= 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
            2326);
  } else {

  }
#line 2330
  if (ap_bio < mxb) {
#line 2331
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2332
  if (ap_bio == 0) {
#line 2332
    tmp___2 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2332
    if (tmp___2 != 0) {
#line 2333
      tmp___1 = test_and_set_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 2333
      if (tmp___1 == 0) {
#line 2334
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2335
  return;
}
}
#line 48 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 51
  q = bdev_get_queue(mdev->this_bdev);
#line 53
  spin_lock_irq(q->queue_lock);
#line 58
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 58
  if (tmp == 0) {
#line 59
    blk_plug_device(q);
#line 60
    del_timer(& q->unplug_timer);
  } else {

  }
#line 63
  spin_unlock_irq(q->queue_lock);
#line 64
  return;
}
}
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 227
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 227
  if (tmp != 0L) {
#line 227
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (227), "i" (12UL));
    ldv_44688: ;
#line 227
    goto ldv_44688;
  } else {

  }
#line 228
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->ee_hash_s));
}
}
#line 234 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 236
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 236
  if (tmp != 0L) {
#line 236
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (236), "i" (12UL));
    ldv_44693: ;
#line 236
    goto ldv_44693;
  } else {

  }
#line 237
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 8) % mdev->tl_hash_s));
}
}
#line 242 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 244
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 278 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 281
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 281
  req = (struct drbd_request *)tmp;
#line 283
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 283
  if (tmp___0 != 0L) {
#line 284
    drbd_req_make_private_bio(req, bio_src);
#line 286
    req->rq_state = (int )bio_src->bi_rw & 1 ? 1024UL : 0UL;
#line 287
    req->mdev = mdev;
#line 288
    req->master_bio = bio_src;
#line 289
    req->epoch = 0U;
#line 290
    req->sector = bio_src->bi_sector;
#line 291
    req->size = bio_src->bi_size;
#line 292
    req->start_time = jiffies;
#line 293
    INIT_HLIST_NODE(& req->colision);
#line 294
    INIT_LIST_HEAD(& req->tl_requests);
#line 295
    INIT_LIST_HEAD(& req->w.list);
  } else {

  }
#line 297
  return (req);
}
}
#line 300 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 302
  mempool_free((void *)req, drbd_request_mempool);
#line 303
  return;
}
}
#line 318
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  void const   *__vpp_verify___1 ;
  unsigned long __ptr___1 ;
  void const   *__vpp_verify___2 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44768;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44768;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44768;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 46
  goto ldv_44768;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_44768: 
#line 46
  cpu = pfo_ret__;
#line 47
  __vpp_verify = 0;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    __vpp_verify___0 = 0;
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __vpp_verify___1 = 0;
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    __vpp_verify___2 = 0;
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  part_inc_in_flight(& (mdev->vdisk)->part0, rw);
#line 50
  rcu_read_unlock();
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int pfo_ret__ ;
  void const   *__vpp_verify ;
  unsigned long __ptr ;
  void const   *__vpp_verify___0 ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44801;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44801;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44801;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (pfo_ret__): "m" (cpu_number));
#line 59
  goto ldv_44801;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_44801: 
#line 59
  cpu = pfo_ret__;
#line 60
  __vpp_verify = 0;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    __vpp_verify___0 = 0;
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  part_dec_in_flight(& (mdev->vdisk)->part0, rw);
#line 63
  rcu_read_unlock();
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  int tmp ;
  int tmp___0 ;

  {
#line 68
  s = req->rq_state;
#line 76
  list_del(& req->tl_requests);
#line 81
  if ((int )rw == 1) {
#line 86
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 87
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             87U);
    } else {

    }
#line 89
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 90
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         90U);
    } else {

    }
#line 102
    if ((s & 7UL) != 0UL) {
#line 103
      tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 103
      if (tmp___0 != 0) {
#line 104
        if ((s & 2048UL) != 0UL) {
#line 105
          drbd_al_complete_io(mdev, req->sector);
        } else {

        }
#line 106
        put_ldev(mdev);
      } else {
#line 107
        tmp = ___ratelimit(& drbd_ratelimit_state, "_req_is_done");
#line 107
        if (tmp != 0) {
#line 108
          dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                   (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 115
  drbd_req_free(req);
#line 116
  return;
}
}
#line 118 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 127
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 127
  if (tmp != 0) {
#line 128
    return;
  } else {

  }
#line 130
  b = mdev->newest_tle;
#line 131
  b->w.cb = & w_send_barrier;
#line 136
  inc_ap_pending(mdev);
#line 137
  drbd_queue_work(& mdev->data.work, & b->w);
#line 138
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 139
  return;
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  int tmp ;
  struct hlist_node  const  *__mptr ;
  int tmp___0 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 144
  s = req->rq_state;
#line 152
  if ((int )mdev->state.ldv_35955.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 154
    queue_barrier(mdev);
  } else {

  }
#line 159
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 160
    sector = req->sector;
#line 161
    size = (int const   )req->size;
#line 167
    slot = tl_hash_slot___0(mdev, sector);
#line 168
    n = slot->first;
#line 168
    goto ldv_44844;
    ldv_44843: 
#line 169
    tmp = overlaps(sector, size, i->sector, (int )i->size);
#line 169
    if (tmp != 0) {
#line 170
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
                req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
                i->size);
    } else {

    }
#line 168
    n = n->next;
    ldv_44844: ;
#line 168
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 168
      __builtin_prefetch((void const   *)n->next);
#line 168
      if (1 != 0) {
#line 168
        __mptr = (struct hlist_node  const  *)n;
#line 168
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 168
        if (1 != 0) {
#line 169
          goto ldv_44843;
        } else {
#line 171
          goto ldv_44845;
        }
      } else {
#line 171
        goto ldv_44845;
      }
    } else {

    }
    ldv_44845: 
#line 191
    slot = ee_hash_slot___0(mdev, req->sector);
#line 192
    n = slot->first;
#line 192
    goto ldv_44852;
    ldv_44851: 
#line 193
    tmp___0 = overlaps(sector, size, e->sector, (int )e->size);
#line 193
    if (tmp___0 != 0) {
#line 194
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 195
      goto ldv_44850;
    } else {

    }
#line 192
    n = n->next;
    ldv_44852: ;
#line 192
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 192
      __builtin_prefetch((void const   *)n->next);
#line 192
      if (1 != 0) {
#line 192
        __mptr___0 = (struct hlist_node  const  *)n;
#line 192
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 192
        if (1 != 0) {
#line 193
          goto ldv_44851;
        } else {
#line 195
          goto ldv_44850;
        }
      } else {
#line 195
        goto ldv_44850;
      }
    } else {

    }
    ldv_44850: ;
  } else {

  }
#line 198
  return;
}
}
#line 202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 205
  bio_endio(m->bio, m->error);
#line 206
  dec_ap_bio(mdev);
#line 207
  return;
}
}
#line 215 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  int tmp___0 ;

  {
#line 217
  s = req->rq_state;
#line 218
  mdev = req->mdev;
#line 220
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 231
  if ((s & 16UL) != 0UL) {
#line 232
    return;
  } else {

  }
#line 233
  if ((s & 8UL) != 0UL) {
#line 234
    return;
  } else {

  }
#line 235
  if ((int )s & 1) {
#line 236
    return;
  } else {

  }
#line 238
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 260
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 261
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 261
    error = (int )tmp;
#line 265
    tmp___0 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 265
    if (tmp___0 == 0) {
#line 266
      hlist_del(& req->colision);
    } else
#line 268
    if ((s & 440UL) != 0UL) {
#line 268
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (s & (RQ_NET_MASK & ~RQ_NET_DONE)) == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              268);
    } else {

    }
#line 271
    if (rw == 1) {
#line 272
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 275
    _drbd_end_io_acct(mdev, req);
#line 277
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 278
    m->bio = req->master_bio;
#line 279
    req->master_bio = 0;
  } else {

  }
#line 282
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 287
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 288
  return;
}
}
#line 293 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_may_be_done_not_susp(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;

  {
#line 295
  mdev = req->mdev;
#line 297
  tmp = is_susp(mdev->state);
#line 297
  if (tmp == 0) {
#line 298
    _req_may_be_done(req, m);
  } else {

  }
#line 299
  return;
}
}
#line 324 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int tmp ;
  int tmp___0 ;
  int _b ;
  long tmp___1 ;
  struct task_struct *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct hlist_node  const  *__mptr ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  int tmp___8 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 326
  mdev = req->mdev;
#line 327
  sector = req->sector;
#line 328
  size = (int const   )req->size;
#line 334
  tmp = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 334
  if (tmp == 0) {
#line 334
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            334);
  } else {

  }
#line 336
  tmp___0 = get_net_conf(mdev);
#line 336
  if (tmp___0 == 0) {
#line 337
    return (0);
  } else {

  }
#line 340
  _b = mdev->tl_hash_s == 0U;
#line 340
  if (_b != 0) {
#line 340
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_req_conflicts", (char *)"mdev->tl_hash_s == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            340);
  } else {

  }
#line 340
  if (_b != 0) {
#line 341
    goto out_no_conflict;
  } else {

  }
#line 342
  tmp___1 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 342
  if (tmp___1 != 0L) {
#line 342
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (342), "i" (12UL));
    ldv_44885: ;
#line 342
    goto ldv_44885;
  } else {

  }
#line 345
  slot = tl_hash_slot___0(mdev, sector);
#line 346
  n = slot->first;
#line 346
  goto ldv_44892;
  ldv_44891: 
#line 347
  tmp___4 = overlaps(i->sector, (int )i->size, sector, size);
#line 347
  if (tmp___4 != 0) {
#line 348
    tmp___2 = get_current();
#line 348
    tmp___3 = get_current();
#line 348
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
              (char *)(& tmp___3->comm), tmp___2->pid, (unsigned long long )sector,
              size, (unsigned long long )i->sector, i->size);
#line 354
    goto out_conflict;
  } else {

  }
#line 346
  n = n->next;
  ldv_44892: ;
#line 346
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 346
    __builtin_prefetch((void const   *)n->next);
#line 346
    if (1 != 0) {
#line 346
      __mptr = (struct hlist_node  const  *)n;
#line 346
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 346
      if (1 != 0) {
#line 347
        goto ldv_44891;
      } else {
#line 349
        goto ldv_44893;
      }
    } else {
#line 349
      goto ldv_44893;
    }
  } else {

  }
  ldv_44893: ;
#line 358
  if (mdev->ee_hash_s != 0U) {
#line 360
    tmp___5 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                               0L);
#line 360
    if (tmp___5 != 0L) {
#line 360
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (360), "i" (12UL));
      ldv_44894: ;
#line 360
      goto ldv_44894;
    } else {

    }
#line 363
    slot = ee_hash_slot___0(mdev, sector);
#line 364
    n = slot->first;
#line 364
    goto ldv_44900;
    ldv_44899: 
#line 365
    tmp___8 = overlaps(e->sector, (int )e->size, sector, size);
#line 365
    if (tmp___8 != 0) {
#line 366
      tmp___6 = get_current();
#line 366
      tmp___7 = get_current();
#line 366
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
                (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
                size, (unsigned long long )e->sector, e->size);
#line 372
      goto out_conflict;
    } else {

    }
#line 364
    n = n->next;
    ldv_44900: ;
#line 364
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 364
      __builtin_prefetch((void const   *)n->next);
#line 364
      if (1 != 0) {
#line 364
        __mptr___0 = (struct hlist_node  const  *)n;
#line 364
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffe8UL;
#line 364
        if (1 != 0) {
#line 365
          goto ldv_44899;
        } else {
#line 367
          goto ldv_44901;
        }
      } else {
#line 367
        goto ldv_44901;
      }
    } else {

    }
    ldv_44901: ;
  } else {

  }
  out_no_conflict: 
#line 381
  put_net_conf(mdev);
#line 382
  return (0);
  out_conflict: 
#line 385
  put_net_conf(mdev);
#line 386
  return (1);
}
}
#line 401 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  int rv ;
  struct hlist_head *tmp ;
  struct hlist_head *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 404
  mdev = req->mdev;
#line 405
  rv = 0;
#line 406
  m->bio = 0;
#line 408
  switch ((unsigned int )what) {
  default: 
#line 410
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG in %s:%u\n",
          (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
          410);
#line 411
  goto ldv_44910;
  case 1U: ;
#line 422
  if ((req->rq_state & 504UL) != 0UL) {
#line 422
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            422);
  } else {

  }
#line 423
  req->rq_state = req->rq_state | 8UL;
#line 424
  inc_ap_pending(mdev);
#line 425
  goto ldv_44910;
  case 2U: ;
#line 429
  if ((req->rq_state & 7UL) != 0UL) {
#line 429
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            429);
  } else {

  }
#line 430
  req->rq_state = req->rq_state | 1UL;
#line 431
  goto ldv_44910;
  case 20U: ;
#line 434
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 435
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 437
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 439
  req->rq_state = req->rq_state | 6UL;
#line 440
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 442
  _req_may_be_done_not_susp(req, m);
#line 443
  put_ldev(mdev);
#line 444
  goto ldv_44910;
  case 19U: 
#line 447
  req->rq_state = req->rq_state | 2UL;
#line 448
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 450
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 451
  _req_may_be_done_not_susp(req, m);
#line 452
  put_ldev(mdev);
#line 453
  goto ldv_44910;
  case 18U: 
#line 457
  req->rq_state = req->rq_state | 2UL;
#line 458
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 459
  _req_may_be_done_not_susp(req, m);
#line 460
  put_ldev(mdev);
#line 461
  goto ldv_44910;
  case 17U: 
#line 464
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         464U);
#line 466
  req->rq_state = req->rq_state | 2UL;
#line 467
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 469
  if ((req->rq_state & 504UL) != 0UL) {
#line 469
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            469);
  } else {

  }
#line 471
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 472
  put_ldev(mdev);
#line 476
  if (*((unsigned int *)mdev + 503UL) != 65536U) {
#line 477
    _req_may_be_done_not_susp(req, m);
#line 478
    goto ldv_44910;
  } else {

  }
#line 482
  req->rq_state = req->rq_state | 8UL;
#line 483
  inc_ap_pending(mdev);
  case 4U: 
#line 496
  tmp = ar_hash_slot___0(mdev, req->sector);
#line 496
  hlist_add_head(& req->colision, tmp);
#line 498
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 500
  if ((req->rq_state & 8UL) == 0UL) {
#line 500
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            500);
  } else {

  }
#line 501
  req->rq_state = req->rq_state | 16UL;
#line 502
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 505
  drbd_queue_work(& mdev->data.work, & req->w);
#line 506
  goto ldv_44910;
  case 3U: 
#line 512
  tmp___0 = tl_hash_slot___0(mdev, req->sector);
#line 512
  hlist_add_head(& req->colision, tmp___0);
#line 532
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 536
  tmp___1 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 536
  if (tmp___1 != 0) {
#line 536
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            536);
  } else {

  }
#line 538
  req->epoch = (mdev->newest_tle)->br_number;
#line 541
  (mdev->newest_tle)->n_writes = (mdev->newest_tle)->n_writes + 1;
#line 544
  if ((req->rq_state & 8UL) == 0UL) {
#line 544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            544);
  } else {

  }
#line 545
  req->rq_state = req->rq_state | 16UL;
#line 546
  req->w.cb = & w_send_dblock;
#line 547
  drbd_queue_work(& mdev->data.work, & req->w);
#line 550
  if ((mdev->newest_tle)->n_writes >= (mdev->net_conf)->max_epoch_size) {
#line 551
    queue_barrier(mdev);
  } else {

  }
#line 553
  goto ldv_44910;
  case 5U: ;
  case 6U: 
#line 560
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 563
  _req_may_be_done_not_susp(req, m);
#line 564
  goto ldv_44910;
  case 7U: ;
#line 568
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 572
    if ((req->rq_state & 8UL) != 0UL) {
#line 573
      tmp___2 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 573
      if (tmp___2 != 0) {
#line 573
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 573
      tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 573
      if (tmp___4 < 0) {
#line 573
        tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 573
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "__req_mod", 573, tmp___3);
      } else {

      }
#line 574
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 575
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 581
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 582
  req->rq_state = req->rq_state | 32UL;
#line 588
  _req_may_be_done_not_susp(req, m);
#line 589
  goto ldv_44910;
  case 9U: 
#line 592
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
  case 8U: ;
#line 597
  if ((req->rq_state & 8UL) != 0UL) {
#line 598
    tmp___5 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 598
    if (tmp___5 != 0) {
#line 598
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 598
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 598
    if (tmp___7 < 0) {
#line 598
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 598
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 598, tmp___6);
    } else {

    }
  } else {

  }
#line 599
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 600
  req->rq_state = req->rq_state | 64UL;
#line 603
  if ((req->rq_state & 16UL) == 0UL) {
#line 604
    _req_may_be_done(req, m);
  } else {

  }
#line 605
  goto ldv_44910;
  case 12U: 
#line 608
  req->rq_state = req->rq_state | 256UL;
  case 13U: ;
#line 613
  if ((unsigned int )what == 13U) {
#line 614
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
              (unsigned long long )req->sector, req->size);
  } else {

  }
#line 617
  req->rq_state = req->rq_state | 64UL;
  case 11U: ;
  case 10U: 
#line 635
  req->rq_state = req->rq_state | 128UL;
#line 636
  if ((req->rq_state & 8UL) == 0UL) {
#line 636
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            636);
  } else {

  }
#line 637
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 637
  if (tmp___8 != 0) {
#line 637
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 637
  tmp___10 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
  if (tmp___10 < 0) {
#line 637
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 637
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 637, tmp___9);
  } else {

  }
#line 638
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 639
  _req_may_be_done_not_susp(req, m);
#line 640
  goto ldv_44910;
  case 14U: ;
#line 644
  if ((req->rq_state & 8UL) != 0UL) {
#line 645
    tmp___11 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 645
    if (tmp___11 != 0) {
#line 645
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 645
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
    if (tmp___13 < 0) {
#line 645
      tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 645
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "__req_mod", 645, tmp___12);
    } else {

    }
  } else {

  }
#line 646
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 648
  req->rq_state = req->rq_state | 64UL;
#line 649
  _req_may_be_done_not_susp(req, m);
#line 651
  goto ldv_44910;
  case 22U: ;
#line 654
  if ((req->rq_state & 2UL) == 0UL) {
#line 655
    goto ldv_44910;
  } else {

  }
#line 657
  _req_may_be_done(req, m);
#line 658
  goto ldv_44910;
  case 23U: ;
#line 661
  if ((req->rq_state & 2UL) == 0UL) {
#line 662
    goto ldv_44910;
  } else {

  }
#line 664
  req->rq_state = req->rq_state & 0xfffffffffffffffdUL;
#line 666
  rv = 2;
#line 667
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 668
    rv = 1;
  } else {

  }
#line 670
  _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 671
  req->w.cb = & w_restart_disk_io;
#line 672
  drbd_queue_work(& mdev->data.work, & req->w);
#line 673
  goto ldv_44910;
  case 21U: ;
#line 680
  if ((req->rq_state & 128UL) == 0UL) {
#line 681
    if ((unsigned long )req->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 682
      drbd_queue_work(& mdev->data.work, & req->w);
#line 683
      rv = (req->rq_state & 1024UL) != 0UL ? 1 : 2;
    } else {

    }
#line 685
    goto ldv_44910;
  } else {

  }
  case 15U: ;
#line 690
  if ((req->rq_state & 1024UL) == 0UL) {
#line 691
    goto ldv_44910;
  } else {

  }
#line 693
  if ((req->rq_state & 8UL) != 0UL) {
#line 697
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME (barrier_acked but pending)\n");
#line 698
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 700
  if ((req->rq_state & 32UL) == 0UL) {
#line 700
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            700);
  } else {

  }
#line 701
  req->rq_state = req->rq_state | 64UL;
#line 702
  _req_may_be_done(req, m);
#line 703
  goto ldv_44910;
  case 16U: ;
#line 706
  if ((req->rq_state & 8UL) == 0UL) {
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            706);
  } else {

  }
#line 707
  tmp___14 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 707
  if (tmp___14 != 0) {
#line 707
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 707
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 707
  if (tmp___16 < 0) {
#line 707
    tmp___15 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 707
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "__req_mod", 707, tmp___15);
  } else {

  }
#line 708
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 709
  req->rq_state = req->rq_state | 192UL;
#line 710
  _req_may_be_done_not_susp(req, m);
#line 711
  goto ldv_44910;
  }
  ldv_44910: ;
#line 714
  return (rv);
}
}
#line 724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  int tmp ;

  {
#line 729
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 730
    return (1);
  } else {

  }
#line 731
  if ((int )mdev->state.ldv_35955.disk > 4) {
#line 732
    return (0);
  } else {

  }
#line 733
  if ((int )mdev->state.ldv_35955.disk <= 3) {
#line 734
    return (0);
  } else {

  }
#line 736
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 737
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 739
  if (sector >= nr_sectors) {
#line 739
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( sector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            739);
  } else {

  }
#line 740
  if (esector >= nr_sectors) {
#line 740
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( esector < nr_sectors ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            740);
  } else {

  }
#line 742
  sbnr = sector >> 3;
#line 743
  ebnr = esector >> 3;
#line 745
  tmp = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 745
  return (tmp == 0);
}
}
#line 748 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  int ret ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;

  {
#line 750
  rw = (int const   )bio->bi_rw & (int const   )1025;
#line 751
  size = (int const   )bio->bi_size;
#line 752
  sector = bio->bi_sector;
#line 753
  b = 0;
#line 756
  err = -5;
#line 757
  ret = 0;
#line 760
  req = drbd_req_new(mdev, bio);
#line 761
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 762
    dec_ap_bio(mdev);
#line 765
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc() req\n");
#line 766
    bio_endio(bio, -12);
#line 767
    return (0);
  } else {

  }
#line 770
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 771
  if (local == 0) {
#line 772
    bio_put(req->private_bio);
#line 773
    req->private_bio = 0;
  } else {

  }
#line 775
  if (rw == 1) {
#line 776
    remote = 1;
  } else {
#line 779
    if (local != 0) {
#line 780
      tmp = drbd_may_do_local_read(mdev, sector, size);
#line 780
      if (tmp == 0) {
#line 786
        local = 0;
#line 787
        bio_put(req->private_bio);
#line 788
        req->private_bio = 0;
#line 789
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 792
    remote = local == 0 && (int )mdev->state.ldv_35955.pdsk > 7;
  }
#line 803
  if ((rw == 1024 && (int )mdev->state.ldv_35955.disk > 3) && local == 0) {
#line 804
    err = -11;
#line 805
    goto fail_and_free_req;
  } else {

  }
#line 813
  if (rw == 1 && local != 0) {
#line 813
    tmp___0 = constant_test_bit(28U, (unsigned long const volatile   *)(& mdev->flags));
#line 813
    if (tmp___0 == 0) {
#line 814
      req->rq_state = req->rq_state | 2048UL;
#line 815
      drbd_al_begin_io(mdev, sector);
    } else {

    }
  } else {

  }
#line 818
  remote = remote != 0 && (*((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35955.conn > 9));
#line 822
  if (local == 0 && remote == 0) {
#line 822
    tmp___2 = is_susp(mdev->state);
#line 822
    if (tmp___2 == 0) {
#line 823
      tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_make_request_common");
#line 823
      if (tmp___1 != 0) {
#line 824
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
      } else {

      }
#line 825
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 834
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 834
    tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 834
    if (tmp___4 != 0) {
      allocate_barrier: 
#line 838
      tmp___3 = kmalloc___2(56UL, 16U);
#line 838
      b = (struct drbd_tl_epoch *)tmp___3;
#line 839
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 840
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to alloc barrier.\n");
#line 841
        err = -12;
#line 842
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 847
  spin_lock_irq(& mdev->req_lock);
#line 849
  tmp___5 = is_susp(mdev->state);
#line 849
  if (tmp___5 != 0) {
#line 854
    ret = 1;
#line 855
    spin_unlock_irq(& mdev->req_lock);
#line 856
    goto fail_free_complete;
  } else {

  }
#line 859
  if (remote != 0) {
#line 860
    remote = *((unsigned int *)mdev + 503UL) == 65536U || (*((unsigned int *)mdev + 503UL) == 32768U && (int )mdev->state.ldv_35955.conn > 9);
#line 863
    if (remote == 0) {
#line 864
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lost connection while grabbing the req_lock!\n");
    } else {

    }
#line 865
    if (local == 0 && remote == 0) {
#line 866
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "IO ERROR: neither local nor remote disk\n");
#line 867
      spin_unlock_irq(& mdev->req_lock);
#line 868
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 872
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 873
    mdev->unused_spare_tle = b;
#line 874
    b = 0;
  } else {

  }
#line 876
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 876
    tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 876
    if (tmp___6 != 0) {
#line 881
      spin_unlock_irq(& mdev->req_lock);
#line 882
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 887
  _drbd_start_io_acct(mdev, req, bio);
#line 899
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 899
    tmp___8 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 899
    if (tmp___8 != 0) {
#line 901
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 902
      mdev->unused_spare_tle = 0;
    } else {
#line 899
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 904
  if (remote != 0 && rw == 1) {
#line 904
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 904
    if (tmp___7 != 0) {
#line 904
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              905);
    } else {

    }
  } else {

  }
#line 923
  if (remote != 0) {
#line 924
    _req_mod(req, to_be_send);
  } else {

  }
#line 925
  if (local != 0) {
#line 926
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 931
  if (rw == 1) {
#line 931
    tmp___9 = _req_conflicts(req);
#line 931
    if (tmp___9 != 0) {
#line 932
      goto fail_conflicting;
    } else {

    }
  } else {

  }
#line 934
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 938
  if (remote != 0) {
#line 943
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 947
  spin_unlock_irq(& mdev->req_lock);
#line 948
  kfree((void const   *)b);
#line 950
  if (local != 0) {
#line 951
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 958
    tmp___11 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 958
    if (tmp___11 != 0) {
#line 959
      tmp___10 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 959
      if (tmp___10 != 0) {
#line 962
        bio_endio(req->private_bio, -5);
      } else {
#line 964
        generic_make_request(req->private_bio);
      }
#line 965
      put_ldev(mdev);
    } else {
#line 967
      bio_endio(req->private_bio, -5);
    }
  } else {

  }
#line 972
  drbd_plug_device(mdev);
#line 974
  return (0);
  fail_conflicting: 
#line 983
  _drbd_end_io_acct(mdev, req);
#line 984
  spin_unlock_irq(& mdev->req_lock);
#line 985
  if (remote != 0) {
#line 986
    tmp___12 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 986
    if (tmp___12 != 0) {
#line 986
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 986
    tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 986
    if (tmp___14 < 0) {
#line 986
      tmp___13 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 986
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
              "drbd_make_request_common", 986, tmp___13);
    } else {

    }
  } else {

  }
#line 989
  err = 0;
  fail_free_complete: ;
#line 992
  if (rw == 1 && local != 0) {
#line 993
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 995
  if (local != 0) {
#line 996
    bio_put(req->private_bio);
#line 997
    req->private_bio = 0;
#line 998
    put_ldev(mdev);
  } else {

  }
#line 1000
  if (ret == 0) {
#line 1001
    bio_endio(bio, err);
  } else {

  }
#line 1003
  drbd_req_free(req);
#line 1004
  dec_ap_bio(mdev);
#line 1005
  kfree((void const   *)b);
#line 1007
  return (ret);
}
}
#line 1015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1017
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 1019
    tmp___1 = ___ratelimit(& drbd_ratelimit_state, "drbd_fail_request_early");
#line 1019
    if (tmp___1 != 0) {
#line 1020
      tmp = get_current();
#line 1020
      tmp___0 = get_current();
#line 1020
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
              (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 1026
    return (1);
  } else {

  }
#line 1029
  return (0);
}
}
#line 1032 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;
  long tmp___1 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1035
  mdev = (struct drbd_conf *)q->queuedata;
#line 1037
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1037
  if (tmp != 0) {
#line 1038
    bio_endio(bio, -1);
#line 1039
    return (0);
  } else {

  }
#line 1045
  if (bio->bi_size == 0U) {
#line 1045
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_size > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1045);
  } else {

  }
#line 1046
  if ((bio->bi_size & 511U) != 0U) {
#line 1046
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1046);
  } else {

  }
#line 1047
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1047
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bio->bi_idx == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
            1047);
  } else {

  }
#line 1051
  s_enr = (unsigned int )(bio->bi_sector >> 8);
#line 1052
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 8);
#line 1054
  tmp___1 = __builtin_expect(s_enr == e_enr, 1L);
#line 1054
  if (tmp___1 != 0L) {
#line 1055
    inc_ap_bio(mdev, 1);
#line 1056
    tmp___0 = drbd_make_request_common(mdev, bio);
#line 1056
    return (tmp___0);
  } else {

  }
#line 1061
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 131072U) {
#line 1063
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
            (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size, (unsigned long long )bio->bi_sector);
#line 1067
    bio_endio(bio, -22);
  } else {
#line 1079
    sect = bio->bi_sector;
#line 1080
    sps = 256;
#line 1081
    mask = sps + -1;
#line 1082
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1083
    bp = bio_split(bio, (int )first_sectors);
#line 1094
    inc_ap_bio(mdev, 3);
#line 1096
    if (s_enr + 1U != e_enr) {
#line 1096
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( e_enr == s_enr + 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
              1096);
    } else {

    }
#line 1098
    goto ldv_44998;
    ldv_44997: 
#line 1099
    inc_ap_bio(mdev, 1);
    ldv_44998: 
#line 1098
    tmp___2 = drbd_make_request_common(mdev, & bp->bio1);
#line 1098
    if (tmp___2 != 0) {
#line 1099
      goto ldv_44997;
    } else {

    }

#line 1101
    goto ldv_45001;
    ldv_45000: 
#line 1102
    inc_ap_bio(mdev, 1);
    ldv_45001: 
#line 1101
    tmp___3 = drbd_make_request_common(mdev, & bp->bio2);
#line 1101
    if (tmp___3 != 0) {
#line 1102
      goto ldv_45000;
    } else {

    }
#line 1104
    dec_ap_bio(mdev);
#line 1106
    bio_pair_release(bp);
  }
#line 1108
  return (0);
}
}
#line 1124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1126
  mdev = (struct drbd_conf *)q->queuedata;
#line 1127
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1129
  bio_size = bvm->bi_size;
#line 1132
  limit = (int )(131072U - ((bio_offset & 131071U) + bio_size));
#line 1134
  if (limit < 0) {
#line 1135
    limit = 0;
  } else {

  }
#line 1136
  if (bio_size == 0U) {
#line 1137
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1138
      limit = (int )bvec->bv_len;
    } else
#line 1139
    if (limit != 0) {
#line 1139
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1139
      if (tmp != 0) {
#line 1140
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1142
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 1143
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1144
          _min1 = limit;
#line 1144
          _min2 = backing_limit;
#line 1144
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1146
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1148
  return (limit);
}
}
#line 124 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 126
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 126
  return (tmp != 1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___1(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___2(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 646 "include/linux/device.h"
extern int dev_printk(char const   * , struct device  const  * , char const   *  , ...) ;
#line 320 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 322
  page = compound_head(page);
#line 323
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 323
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 323
  if (tmp___0 != 0L) {
#line 323
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (323), "i" (12UL));
    ldv_16196: ;
#line 323
    goto ldv_16196;
  } else {

  }
#line 324
  atomic_inc(& page->_count);
#line 325
  return;
}
}
#line 945 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 947
  retval = 512;
#line 949
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 950
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 952
  return ((unsigned short )retval);
}
}
#line 955 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 957
  tmp = bdev_get_queue(bdev);
#line 957
  tmp___0 = queue_logical_block_size(tmp);
#line 957
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1623 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1632
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1633
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1634
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1642
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 16384;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 544;
#line 92
  bio = bio_alloc(16U, 1);
#line 93
  bio->bi_bdev = bdev->md_bdev;
#line 94
  bio->bi_sector = sector;
#line 95
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 95
  ok = tmp___0 == size;
#line 96
  if (ok == 0) {
#line 97
    goto out;
  } else {

  }
#line 98
  bio->bi_private = (void *)(& md_io);
#line 99
  bio->bi_end_io = & drbd_md_io_complete;
#line 100
  bio->bi_rw = (unsigned long )rw;
#line 102
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 102
  if (tmp___1 != 0) {
#line 103
    bio_endio(bio, -5);
  } else {
#line 105
    submit_bio(rw, bio);
  }
#line 106
  wait_for_completion(& md_io.event);
#line 107
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
  out: 
#line 110
  bio_put(bio);
#line 111
  return (ok);
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  int tmp ;
  long tmp___0 ;
  unsigned short tmp___1 ;
  void *p ;
  void *tmp___2 ;
  void *hp ;
  void *tmp___3 ;
  long tmp___4 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___5 ;
  struct task_struct *tmp___6 ;
  sector_t tmp___7 ;
  sector_t tmp___8 ;
  long tmp___9 ;
  void *p___0 ;
  void *tmp___10 ;
  void *hp___0 ;
  void *tmp___11 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 118
  offset = 0;
#line 119
  iop = mdev->md_io_page;
#line 121
  tmp = mutex_is_locked(& mdev->md_io_mutex);
#line 121
  if (tmp == 0) {
#line 121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            121);
  } else {

  }
#line 123
  tmp___0 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 123
  if (tmp___0 != 0L) {
#line 123
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (123), "i" (12UL));
    ldv_44695: ;
#line 123
    goto ldv_44695;
  } else {

  }
#line 125
  tmp___1 = bdev_logical_block_size(bdev->md_bdev);
#line 125
  logical_block_size = (int )tmp___1;
#line 126
  if (logical_block_size == 0) {
#line 127
    logical_block_size = 512;
  } else {

  }
#line 130
  if (logical_block_size != 512) {
#line 131
    mask = logical_block_size / 512 + -1;
#line 132
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 132
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              132);
    } else {

    }
#line 133
    if ((mask + 1) * 512 != logical_block_size) {
#line 133
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              133);
    } else {

    }
#line 134
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 135
    sector = (sector_t )(~ mask) & sector;
#line 136
    iop = mdev->md_io_tmpp;
#line 138
    if (rw & 1) {
#line 141
      tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 141
      p = tmp___2;
#line 142
      tmp___3 = lowmem_page_address(mdev->md_io_tmpp);
#line 142
      hp = tmp___3;
#line 144
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 147
      tmp___4 = __builtin_expect(ok == 0, 0L);
#line 147
      if (tmp___4 != 0L) {
#line 148
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
                (unsigned long long )sector);
#line 151
        return (0);
      } else {

      }
#line 154
      __len = 512UL;
#line 154
      if (__len > 63UL) {
#line 154
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 154
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 158
  tmp___7 = drbd_md_first_sector(bdev);
#line 158
  if (tmp___7 > sector) {
#line 160
    tmp___5 = get_current();
#line 160
    tmp___6 = get_current();
#line 160
    dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
              (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
              rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 158
    tmp___8 = drbd_md_last_sector(bdev);
#line 158
    if (tmp___8 < sector) {
#line 160
      tmp___5 = get_current();
#line 160
      tmp___6 = get_current();
#line 160
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s [%d]:%s(,%llus,%s) out of range md access!\n",
                (char *)(& tmp___6->comm), tmp___5->pid, "drbd_md_sync_page_io", (unsigned long long )sector,
                rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 164
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 165
  tmp___9 = __builtin_expect(ok == 0, 0L);
#line 165
  if (tmp___9 != 0L) {
#line 166
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_md_sync_page_io(,%llus,%s) failed!\n",
            (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 168
    return (0);
  } else {

  }
#line 171
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 172
    tmp___10 = lowmem_page_address(mdev->md_io_page);
#line 172
    p___0 = tmp___10;
#line 173
    tmp___11 = lowmem_page_address(mdev->md_io_tmpp);
#line 173
    hp___0 = tmp___11;
#line 175
    __len___0 = 512UL;
#line 175
    if (__len___0 > 63UL) {
#line 175
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 175
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 178
  return (ok);
}
}
#line 181 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 185
  al_flags = 0UL;
#line 187
  spin_lock_irq(& mdev->al_lock);
#line 188
  tmp = lc_find(mdev->resync, enr / 4U);
#line 189
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 189
  if (tmp___1 != 0L) {
#line 190
    __mptr = (struct lc_element  const  *)tmp;
#line 190
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 191
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 191
    if (tmp___0 != 0) {
#line 192
      spin_unlock_irq(& mdev->al_lock);
#line 193
      return (0);
    } else {

    }
  } else {

  }
#line 196
  al_ext = lc_get(mdev->act_log, enr);
#line 197
  al_flags = (mdev->act_log)->flags;
#line 198
  spin_unlock_irq(& mdev->al_lock);
#line 209
  return (al_ext);
}
}
#line 212 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;

  {
#line 214
  enr = (unsigned int )(sector >> 13);
#line 218
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 218
  if (tmp <= 0) {
#line 218
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            218);
  } else {

  }
#line 220
  al_ext = _al_get(mdev, enr);
#line 220
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 220
    goto ldv_44724;
  } else {

  }
#line 220
  tmp___0 = get_current();
#line 220
  __wait.flags = 0U;
#line 220
  __wait.private = (void *)tmp___0;
#line 220
  __wait.func = & autoremove_wake_function;
#line 220
  __wait.task_list.next = & __wait.task_list;
#line 220
  __wait.task_list.prev = & __wait.task_list;
  ldv_44727: 
#line 220
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 220
  al_ext = _al_get(mdev, enr);
#line 220
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 220
    goto ldv_44726;
  } else {

  }
#line 220
  schedule();
#line 220
  goto ldv_44727;
  ldv_44726: 
#line 220
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44724: ;
#line 222
  if (al_ext->lc_number != enr) {
#line 229
    init_completion(& al_work.event);
#line 230
    al_work.al_ext = al_ext;
#line 231
    al_work.enr = enr;
#line 232
    al_work.old_enr = al_ext->lc_number;
#line 233
    al_work.w.cb = & w_al_write_transaction;
#line 234
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 235
    wait_for_completion(& al_work.event);
#line 237
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 239
    spin_lock_irq(& mdev->al_lock);
#line 240
    lc_changed(mdev->act_log, al_ext);
#line 241
    spin_unlock_irq(& mdev->al_lock);
#line 242
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 244
  return;
}
}
#line 246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  unsigned int tmp___0 ;

  {
#line 248
  enr = (unsigned int )(sector >> 13);
#line 252
  tmp = spinlock_check(& mdev->al_lock);
#line 252
  flags = _raw_spin_lock_irqsave(tmp);
#line 254
  extent = lc_find(mdev->act_log, enr);
#line 256
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 257
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 258
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "al_complete_io() called on inactive extent %u\n",
            enr);
#line 259
    return;
  } else {

  }
#line 262
  tmp___0 = lc_put(mdev->act_log, extent);
#line 262
  if (tmp___0 == 0U) {
#line 263
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 265
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 266
  return;
}
}
#line 269 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 271
  __mptr = (struct drbd_work  const  *)w;
#line 271
  aw = (struct update_al_work *)__mptr;
#line 272
  updated = aw->al_ext;
#line 273
  new_enr = aw->enr;
#line 274
  evicted = aw->old_enr;
#line 279
  xor_sum = 0U;
#line 281
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 281
  if (tmp___0 == 0) {
#line 282
    tmp = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.disk);
#line 282
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot start al transaction (-%d +%d)\n",
            tmp, evicted, new_enr);
#line 285
    complete(& ((struct update_al_work *)w)->event);
#line 286
    return (1);
  } else {

  }
#line 294
  if ((int )mdev->state.ldv_35955.conn <= 9 && evicted != 4294967295U) {
#line 295
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 298
  if ((int )mdev->state.ldv_35955.disk <= 3) {
#line 299
    tmp___1 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.disk);
#line 299
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "disk is %s, cannot write al transaction (-%d +%d)\n",
            tmp___1, evicted, new_enr);
#line 302
    complete(& ((struct update_al_work *)w)->event);
#line 303
    put_ldev(mdev);
#line 304
    return (1);
  } else {

  }
#line 307
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 308
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 308
  buffer = (struct al_transaction *)tmp___2;
#line 310
  buffer->magic = 1728214147U;
#line 311
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 311
  buffer->tr_number = tmp___3;
#line 313
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 313
  n = (int )tmp___4;
#line 315
  tmp___5 = __fswab32((__u32 )n);
#line 315
  buffer->updates[0].pos = tmp___5;
#line 316
  tmp___6 = __fswab32(new_enr);
#line 316
  buffer->updates[0].extent = tmp___6;
#line 318
  xor_sum = xor_sum ^ new_enr;
#line 320
  __min1 = 61;
#line 320
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 320
  mx = __min1 < __min2 ? __min1 : __min2;
#line 322
  i = 0;
#line 322
  goto ldv_44761;
  ldv_44760: 
#line 323
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 324
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 324
  extent_nr = tmp___7->lc_number;
#line 325
  tmp___8 = __fswab32(idx);
#line 325
  buffer->updates[i + 1].pos = tmp___8;
#line 326
  tmp___9 = __fswab32(extent_nr);
#line 326
  buffer->updates[i + 1].extent = tmp___9;
#line 327
  xor_sum = xor_sum ^ extent_nr;
#line 322
  i = i + 1;
  ldv_44761: ;
#line 322
  if (i < mx) {
#line 323
    goto ldv_44760;
  } else {

  }

#line 329
  goto ldv_44764;
  ldv_44763: 
#line 330
  buffer->updates[i + 1].pos = 4294967295U;
#line 331
  buffer->updates[i + 1].extent = 4294967295U;
#line 332
  xor_sum = ~ xor_sum;
#line 329
  i = i + 1;
  ldv_44764: ;
#line 329
  if (i <= 60) {
#line 330
    goto ldv_44763;
  } else {

  }
#line 334
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 335
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 336
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 338
  tmp___10 = __fswab32(xor_sum);
#line 338
  buffer->xor_sum = tmp___10;
#line 340
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 343
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 343
  if (tmp___11 == 0) {
#line 344
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 346
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 346
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 348
    mdev->al_tr_pos = 0;
  } else {

  }
#line 350
  if (mdev->al_tr_pos > 63) {
#line 350
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            350);
  } else {

  }
#line 351
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 353
  mutex_unlock(& mdev->md_io_mutex);
#line 355
  complete(& ((struct update_al_work *)w)->event);
#line 356
  put_ldev(mdev);
#line 358
  return (1);
}
}
#line 370 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 377
  xor_sum = 0U;
#line 379
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 383
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 383
  if (tmp == 0) {
#line 384
    return (-1);
  } else {

  }
#line 386
  tmp___0 = __fswab32(b->magic);
#line 386
  rv = tmp___0 == 2205418087U;
#line 388
  i = 0;
#line 388
  goto ldv_44778;
  ldv_44777: 
#line 389
  tmp___1 = __fswab32(b->updates[i].extent);
#line 389
  xor_sum = tmp___1 ^ xor_sum;
#line 388
  i = i + 1;
  ldv_44778: ;
#line 388
  if (i <= 61) {
#line 389
    goto ldv_44777;
  } else {

  }
#line 390
  tmp___2 = __fswab32(b->xor_sum);
#line 390
  rv = (tmp___2 == xor_sum) & rv;
#line 392
  return (rv);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;

  {
#line 408
  active_extents = 0;
#line 409
  transactions = 0;
#line 410
  found_valid = 0;
#line 411
  from = 0;
#line 412
  to = 0;
#line 413
  from_tnr = 0U;
#line 414
  to_tnr = 0U;
#line 417
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 422
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 423
  tmp = lowmem_page_address(mdev->md_io_page);
#line 423
  buffer = (struct al_transaction *)tmp;
#line 426
  i = 0;
#line 426
  goto ldv_44798;
  ldv_44797: 
#line 427
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 428
  if (rv == 0) {
#line 429
    goto ldv_44796;
  } else {

  }
#line 430
  if (rv == -1) {
#line 431
    mutex_unlock(& mdev->md_io_mutex);
#line 432
    return (0);
  } else {

  }
#line 434
  tmp___0 = __fswab32(buffer->tr_number);
#line 434
  cnr = tmp___0;
#line 436
  found_valid = found_valid + 1;
#line 436
  if (found_valid == 1) {
#line 437
    from = i;
#line 438
    to = i;
#line 439
    from_tnr = cnr;
#line 440
    to_tnr = cnr;
#line 441
    goto ldv_44796;
  } else {

  }
#line 443
  if ((int )cnr - (int )from_tnr < 0) {
#line 444
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 444
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              444);
    } else {

    }
#line 445
    from = i;
#line 446
    from_tnr = cnr;
  } else {

  }
#line 448
  if ((int )cnr - (int )to_tnr > 0) {
#line 449
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 449
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( cnr - to_tnr == i - to ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              449);
    } else {

    }
#line 450
    to = i;
#line 451
    to_tnr = cnr;
  } else {

  }
  ldv_44796: 
#line 426
  i = i + 1;
  ldv_44798: ;
#line 426
  if (i <= mx) {
#line 427
    goto ldv_44797;
  } else {

  }

#line 455
  if (found_valid == 0) {
#line 456
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "No usable activity log found.\n");
#line 457
    mutex_unlock(& mdev->md_io_mutex);
#line 458
    return (1);
  } else {

  }
#line 463
  i = from;
  ldv_44813: 
#line 469
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 470
  _b = rv == 0;
#line 470
  if (_b != 0) {
#line 470
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_read_log", (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            470);
  } else {

  }
#line 470
  if (_b != 0) {
#line 470
    goto cancel;
  } else {

  }
#line 471
  if (rv == -1) {
#line 472
    mutex_unlock(& mdev->md_io_mutex);
#line 473
    return (0);
  } else {

  }
#line 476
  tmp___1 = __fswab32(buffer->tr_number);
#line 476
  trn = tmp___1;
#line 478
  spin_lock_irq(& mdev->al_lock);
#line 484
  j = 61;
#line 484
  goto ldv_44810;
  ldv_44809: 
#line 485
  tmp___2 = __fswab32(buffer->updates[j].pos);
#line 485
  pos = (int )tmp___2;
#line 486
  tmp___3 = __fswab32(buffer->updates[j].extent);
#line 486
  extent_nr = tmp___3;
#line 488
  if (extent_nr == 4294967295U) {
#line 489
    goto ldv_44808;
  } else {

  }
#line 491
  lc_set(mdev->act_log, extent_nr, pos);
#line 492
  active_extents = active_extents + 1;
  ldv_44808: 
#line 484
  j = j - 1;
  ldv_44810: ;
#line 484
  if (j >= 0) {
#line 485
    goto ldv_44809;
  } else {

  }
#line 494
  spin_unlock_irq(& mdev->al_lock);
#line 496
  transactions = transactions + 1;
  cancel: ;
#line 499
  if (i == to) {
#line 500
    goto ldv_44812;
  } else {

  }
#line 501
  i = i + 1;
#line 502
  if (i > mx) {
#line 503
    i = 0;
  } else {

  }
#line 504
  goto ldv_44813;
  ldv_44812: 
#line 506
  mdev->al_tr_number = to_tnr + 1U;
#line 507
  mdev->al_tr_pos = to;
#line 508
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 508
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 510
    mdev->al_tr_pos = 0;
  } else {

  }
#line 513
  mutex_unlock(& mdev->md_io_mutex);
#line 515
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Found %d transactions (%d active extents) in activity log.\n",
            transactions, active_extents);
#line 518
  return (1);
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 523
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 524
  mdev = wc->mdev;
#line 526
  uptodate = (int )bio->bi_flags & 1;
#line 531
  if (error == 0 && uptodate == 0) {
#line 532
    error = -5;
  } else {

  }
#line 534
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 535
  if (error != 0 && wc->error == 0) {
#line 536
    wc->error = error;
  } else {

  }
#line 538
  tmp = atomic_dec_and_test(& wc->count);
#line 538
  if (tmp != 0) {
#line 539
    complete(& wc->io_done);
  } else {

  }
#line 541
  page = (bio->bi_io_vec)->bv_page;
#line 542
  put_page(page);
#line 543
  bio_put(bio);
#line 544
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 545
  put_ldev(mdev);
#line 546
  return;
}
}
#line 553 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 561
  page_offset___0 = 4096U;
#line 563
  i = 0;
#line 564
  err = -12;
#line 568
  enr = enr & 4294967288U;
#line 569
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 572
  if ((on_disk_sector & 7UL) != 0UL) {
#line 572
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !(on_disk_sector & 7U) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            572);
  } else {

  }
#line 581
  goto ldv_44837;
  ldv_44836: ;
#line 582
  if (bio->bi_sector == on_disk_sector) {
#line 583
    return (0);
  } else {

  }
#line 584
  i = i + 1;
  ldv_44837: 
#line 581
  bio = *(bios + (unsigned long )i);
#line 581
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 582
    goto ldv_44836;
  } else {

  }
#line 589
  bio = bio_alloc(208U, 1);
#line 590
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 591
    return (-12);
  } else {

  }
#line 593
  if (i > 0) {
#line 594
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 595
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 596
    page = prev_bv->bv_page;
  } else {

  }
#line 598
  if (page_offset___0 == 4096U) {
#line 599
    page = alloc_pages(2U, 0U);
#line 600
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 601
      goto out_bio_put;
    } else {

    }
#line 602
    page_offset___0 = 0U;
  } else {
#line 604
    get_page(page);
  }
#line 607
  offset = (int )(enr << 6);
#line 608
  tmp = kmap(page);
#line 609
  __min1 = 512UL;
#line 609
  tmp___0 = drbd_bm_words(mdev);
#line 609
  __min2 = tmp___0 - (size_t )offset;
#line 609
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 611
  kunmap(page);
#line 613
  bio->bi_private = (void *)wc;
#line 614
  bio->bi_end_io = & atodb_endio;
#line 615
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 616
  bio->bi_sector = on_disk_sector;
#line 618
  tmp___1 = bio_add_page(bio, page, 4096U, page_offset___0);
#line 618
  if (tmp___1 != 4096) {
#line 619
    goto out_put_page;
  } else {

  }
#line 621
  atomic_inc(& wc->count);
#line 627
  atomic_inc(& mdev->local_cnt);
#line 629
  *(bios + (unsigned long )i) = bio;
#line 631
  return (0);
  out_put_page: 
#line 634
  err = -22;
#line 635
  put_page(page);
  out_bio_put: 
#line 637
  bio_put(bio);
#line 638
  return (err);
}
}
#line 648 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  void *tmp___3 ;
  struct lc_element *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  struct request_queue *tmp___7 ;
  int tmp___8 ;
  struct lc_element *tmp___9 ;

  {
#line 655
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 655
  _b = tmp == 0;
#line 655
  if (_b != 0) {
#line 655
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_al_to_on_disk_bm", (char *)"!get_ldev_if_state(mdev, D_ATTACHING)",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            655);
  } else {

  }
#line 655
  if (_b != 0) {
#line 656
    return;
  } else {

  }
#line 658
  tmp___0 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___0 != 0) {
#line 658
    goto ldv_44856;
  } else {

  }
#line 658
  tmp___1 = get_current();
#line 658
  __wait.flags = 0U;
#line 658
  __wait.private = (void *)tmp___1;
#line 658
  __wait.func = & autoremove_wake_function;
#line 658
  __wait.task_list.next = & __wait.task_list;
#line 658
  __wait.task_list.prev = & __wait.task_list;
  ldv_44859: 
#line 658
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 658
  tmp___2 = lc_try_lock(mdev->act_log);
#line 658
  if (tmp___2 != 0) {
#line 658
    goto ldv_44858;
  } else {

  }
#line 658
  schedule();
#line 658
  goto ldv_44859;
  ldv_44858: 
#line 658
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44856: 
#line 660
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 663
  tmp___3 = kzalloc___1((unsigned long )nr_elements * 8UL, 208U);
#line 663
  bios = (struct bio **)tmp___3;
#line 664
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 665
    goto submit_one_by_one;
  } else {

  }
#line 667
  atomic_set(& wc.count, 0);
#line 668
  init_completion(& wc.io_done);
#line 669
  wc.mdev = mdev;
#line 670
  wc.error = 0;
#line 672
  i = 0;
#line 672
  goto ldv_44864;
  ldv_44863: 
#line 673
  tmp___4 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 673
  enr = tmp___4->lc_number;
#line 674
  if (enr == 4294967295U) {
#line 675
    goto ldv_44861;
  } else {

  }
#line 677
  tmp___5 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 677
  if (tmp___5 != 0) {
#line 680
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_44861: 
#line 672
  i = i + 1;
  ldv_44864: ;
#line 672
  if (i < nr_elements) {
#line 673
    goto ldv_44863;
  } else {

  }
#line 684
  lc_unlock(mdev->act_log);
#line 685
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 688
  i = 0;
#line 688
  goto ldv_44868;
  ldv_44867: ;
#line 689
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 690
    goto ldv_44866;
  } else {

  }
#line 691
  tmp___6 = drbd_insert_fault(mdev, 0U);
#line 691
  if (tmp___6 != 0) {
#line 692
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 693
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 695
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 688
  i = i + 1;
  ldv_44868: ;
#line 688
  if (i < nr_elements) {
#line 689
    goto ldv_44867;
  } else {

  }
  ldv_44866: 
#line 699
  tmp___7 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 699
  drbd_blk_run_queue(tmp___7);
#line 702
  drbd_md_flush(mdev);
#line 710
  tmp___8 = atomic_read((atomic_t const   *)(& wc.count));
#line 710
  if (tmp___8 != 0) {
#line 711
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 713
  put_ldev(mdev);
#line 715
  kfree((void const   *)bios);
#line 716
  return;
  free_bios_submit_one_by_one: 
#line 720
  i = 0;
#line 720
  goto ldv_44870;
  ldv_44869: 
#line 721
  bio_endio(*(bios + (unsigned long )i), 0);
#line 720
  i = i + 1;
  ldv_44870: ;
#line 720
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 721
    goto ldv_44869;
  } else {

  }
#line 723
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 726
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Using the slow drbd_al_to_on_disk_bm()\n");
#line 728
  i = 0;
#line 728
  goto ldv_44874;
  ldv_44873: 
#line 729
  tmp___9 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 729
  enr = tmp___9->lc_number;
#line 730
  if (enr == 4294967295U) {
#line 731
    goto ldv_44872;
  } else {

  }
#line 734
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_44872: 
#line 728
  i = i + 1;
  ldv_44874: ;
#line 728
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 729
    goto ldv_44873;
  } else {

  }
#line 737
  lc_unlock(mdev->act_log);
#line 738
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 739
  put_ldev(mdev);
#line 740
  return;
}
}
#line 746 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct lc_element *tmp___3 ;
  unsigned long tmp___4 ;
  struct _ddebug descriptor ;
  long tmp___5 ;
  char *tmp___6 ;

  {
#line 749
  add = 0UL;
#line 753
  tmp___0 = lc_try_lock(mdev->act_log);
#line 753
  if (tmp___0 != 0) {
#line 753
    goto ldv_44884;
  } else {

  }
#line 753
  tmp___1 = get_current();
#line 753
  __wait.flags = 0U;
#line 753
  __wait.private = (void *)tmp___1;
#line 753
  __wait.func = & autoremove_wake_function;
#line 753
  __wait.task_list.next = & __wait.task_list;
#line 753
  __wait.task_list.prev = & __wait.task_list;
  ldv_44887: 
#line 753
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 753
  tmp___2 = lc_try_lock(mdev->act_log);
#line 753
  if (tmp___2 != 0) {
#line 753
    goto ldv_44886;
  } else {

  }
#line 753
  schedule();
#line 753
  goto ldv_44887;
  ldv_44886: 
#line 753
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44884: 
#line 755
  i = 0;
#line 755
  goto ldv_44894;
  ldv_44893: 
#line 756
  tmp___3 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 756
  enr = tmp___3->lc_number;
#line 757
  if (enr == 4294967295U) {
#line 758
    goto ldv_44888;
  } else {

  }
#line 759
  tmp___4 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 759
  tmp = (int )tmp___4;
#line 760
  descriptor.modname = "drbd";
#line 760
  descriptor.function = "drbd_al_apply_to_bm";
#line 760
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared";
#line 760
  descriptor.format = "AL: set %d bits in extent %u\n";
#line 760
  descriptor.lineno = 760U;
#line 760
  descriptor.flags = 0U;
#line 760
  descriptor.enabled = (char)0;
#line 760
  tmp___5 = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 760
  if (tmp___5 != 0L) {
#line 760
    goto do_printk___0;
  } else {

  }
#line 760
  goto out___0;
  do_printk___0: 
#line 760
  dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), "AL: set %d bits in extent %u\n",
             tmp, enr);
  out___0: 
#line 761
  add = (unsigned long )tmp + add;
  ldv_44888: 
#line 755
  i = i + 1;
  ldv_44894: ;
#line 755
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 756
    goto ldv_44893;
  } else {

  }
#line 764
  lc_unlock(mdev->act_log);
#line 765
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 767
  tmp___6 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 767
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Marked additional %s as out-of-sync based on AL.\n",
            tmp___6);
#line 768
  return;
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 775
  spin_lock_irq(& mdev->al_lock);
#line 776
  rv = al_ext->refcnt == 0U;
#line 777
  tmp = __builtin_expect(rv != 0, 1L);
#line 777
  if (tmp != 0L) {
#line 778
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 779
  spin_unlock_irq(& mdev->al_lock);
#line 781
  return (rv);
}
}
#line 793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 798
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 798
  if (tmp == 0) {
#line 798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            798);
  } else {

  }
#line 800
  i = 0;
#line 800
  goto ldv_44912;
  ldv_44911: 
#line 801
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 802
  if (al_ext->lc_number == 4294967295U) {
#line 803
    goto ldv_44906;
  } else {

  }
#line 804
  tmp___0 = _try_lc_del(mdev, al_ext);
#line 804
  if (tmp___0 != 0) {
#line 804
    goto ldv_44907;
  } else {

  }
#line 804
  tmp___1 = get_current();
#line 804
  __wait.flags = 0U;
#line 804
  __wait.private = (void *)tmp___1;
#line 804
  __wait.func = & autoremove_wake_function;
#line 804
  __wait.task_list.next = & __wait.task_list;
#line 804
  __wait.task_list.prev = & __wait.task_list;
  ldv_44910: 
#line 804
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 804
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 804
  if (tmp___2 != 0) {
#line 804
    goto ldv_44909;
  } else {

  }
#line 804
  schedule();
#line 804
  goto ldv_44910;
  ldv_44909: 
#line 804
  finish_wait(& mdev->al_wait, & __wait);
  ldv_44907: ;
  ldv_44906: 
#line 800
  i = i + 1;
  ldv_44912: ;
#line 800
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 801
    goto ldv_44911;
  } else {

  }
#line 807
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 808
  return;
}
}
#line 810 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 812
  __mptr = (struct drbd_work  const  *)w;
#line 812
  udw = (struct update_odbm_work *)__mptr;
#line 814
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 814
  if (tmp___0 == 0) {
#line 815
    tmp = ___ratelimit(& drbd_ratelimit_state, "w_update_odbm");
#line 815
    if (tmp != 0) {
#line 816
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can not update on disk bitmap, local IO disabled.\n");
    } else {

    }
#line 817
    kfree((void const   *)udw);
#line 818
    return (1);
  } else {

  }
#line 821
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 822
  put_ldev(mdev);
#line 824
  kfree((void const   *)udw);
#line 826
  tmp___1 = drbd_bm_total_weight(mdev);
#line 826
  if (tmp___1 <= mdev->rs_failed) {
#line 827
    switch ((int )mdev->state.ldv_35955.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 830
    drbd_resync_finished(mdev);
    default: ;
#line 833
    goto ldv_44928;
    }
    ldv_44928: ;
  } else {

  }
#line 836
  drbd_bcast_sync_progress(mdev);
#line 838
  return (1);
}
}
#line 848 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  int tmp ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___0 ;
  void *tmp___1 ;

  {
#line 856
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 856
  if (tmp == 0) {
#line 856
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            856);
  } else {

  }
#line 860
  enr = (unsigned int )(sector >> 15);
#line 862
  e = lc_get(mdev->resync, enr);
#line 863
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 864
    __mptr = (struct lc_element  const  *)e;
#line 864
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 865
    if (ext->lce.lc_number == enr) {
#line 866
      if (success != 0) {
#line 867
        ext->rs_left = ext->rs_left - count;
      } else {
#line 869
        ext->rs_failed = ext->rs_failed + count;
      }
#line 870
      if (ext->rs_left < ext->rs_failed) {
#line 871
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
                (unsigned long long )sector, ext->lce.lc_number, ext->rs_left, ext->rs_failed,
                count);
#line 876
        dump_stack();
#line 878
        lc_put(mdev->resync, & ext->lce);
#line 879
        val.i = 0U;
#line 879
        val.ldv_35955.conn = 1U;
#line 879
        mask.i = 0U;
#line 879
        mask.ldv_35955.conn = 31U;
#line 879
        drbd_force_state(mdev, mask, val);
#line 880
        return;
      } else {

      }
    } else {
#line 889
      tmp___0 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 889
      rs_left = tmp___0;
#line 890
      if (ext->flags != 0UL) {
#line 891
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n",
                 ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 895
        ext->flags = 0UL;
      } else {

      }
#line 897
      if (ext->rs_failed != 0) {
#line 898
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Kicking resync_lru element enr=%u out with rs_failed=%d\n",
                 ext->lce.lc_number, ext->rs_failed);
#line 901
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 903
      ext->rs_left = rs_left;
#line 904
      ext->rs_failed = success == 0 ? count : 0;
#line 905
      lc_changed(mdev->resync, & ext->lce);
    }
#line 907
    lc_put(mdev->resync, & ext->lce);
#line 910
    if (ext->rs_left == ext->rs_failed) {
#line 911
      ext->rs_failed = 0;
#line 913
      tmp___1 = kmalloc___2(32UL, 32U);
#line 913
      udw = (struct update_odbm_work *)tmp___1;
#line 914
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 915
        udw->enr = ext->lce.lc_number;
#line 916
        udw->w.cb = & w_update_odbm;
#line 917
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 919
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an udw\n");
#line 920
        set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 924
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lc_get() failed! locked=%d/%d flags=%lu\n",
            mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 928
  return;
}
}
#line 938 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  unsigned long now ;
  unsigned long last ;
  int next ;
  unsigned long tw ;
  unsigned long tmp___2 ;
  raw_spinlock_t *tmp___3 ;
  int tmp___4 ;

  {
#line 943
  count = 0UL;
#line 945
  wake_up = 0;
#line 948
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 949
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_set_in_sync: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 951
    return;
  } else {

  }
#line 953
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 954
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 956
  _b = sector >= nr_sectors;
#line 956
  if (_b != 0) {
#line 956
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            956);
  } else {

  }
#line 956
  if (_b != 0) {
#line 956
    return;
  } else {

  }
#line 957
  _b___0 = esector >= nr_sectors;
#line 957
  if (_b___0 != 0) {
#line 957
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_in_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            957);
  } else {

  }
#line 957
  if (_b___0 != 0) {
#line 957
    esector = nr_sectors - 1UL;
  } else {

  }
#line 959
  lbnr = (nr_sectors - 1UL) >> 3;
#line 964
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 964
  if (tmp != 0L) {
#line 965
    return;
  } else {

  }
#line 966
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 966
  if (tmp___0 != 0L) {
#line 967
    ebnr = lbnr;
  } else {
#line 969
    ebnr = (esector - 7UL) >> 3;
  }
#line 970
  sbnr = (sector + 7UL) >> 3;
#line 972
  if (sbnr > ebnr) {
#line 973
    return;
  } else {

  }
#line 979
  tmp___1 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 979
  count = (unsigned long )tmp___1;
#line 980
  if (count != 0UL) {
#line 980
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 980
    if (tmp___4 != 0) {
#line 981
      now = jiffies;
#line 982
      last = mdev->rs_mark_time[mdev->rs_last_mark];
#line 983
      next = (mdev->rs_last_mark + 1) % 8;
#line 984
      if ((1 != 0 && 1 != 0) && (long )now - (long )(last + 750UL) >= 0L) {
#line 985
        tmp___2 = drbd_bm_total_weight(mdev);
#line 985
        tw = tmp___2;
#line 986
        if ((mdev->rs_mark_left[mdev->rs_last_mark] != tw && (unsigned int )*((unsigned short *)mdev + 1006UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 1006UL) != 320U) {
#line 989
          mdev->rs_mark_time[next] = now;
#line 990
          mdev->rs_mark_left[next] = tw;
#line 991
          mdev->rs_last_mark = next;
        } else {

        }
      } else {

      }
#line 994
      tmp___3 = spinlock_check(& mdev->al_lock);
#line 994
      flags = _raw_spin_lock_irqsave(tmp___3);
#line 995
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 996
      spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1000
      wake_up = 1;
#line 1001
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1003
  if (wake_up != 0) {
#line 1004
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1005
  return;
}
}
#line 1015 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  int tmp ;
  int _b ;
  int _b___0 ;
  raw_spinlock_t *tmp___0 ;
  int tmp___1 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1023
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1024
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sector: %llus, size: %d\n",
            (unsigned long long )sector, size);
#line 1026
    return;
  } else {

  }
#line 1029
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1029
  if (tmp == 0) {
#line 1030
    return;
  } else {

  }
#line 1032
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1033
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1035
  _b = sector >= nr_sectors;
#line 1035
  if (_b != 0) {
#line 1035
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1035);
  } else {

  }
#line 1035
  if (_b != 0) {
#line 1036
    goto out;
  } else {

  }
#line 1037
  _b___0 = esector >= nr_sectors;
#line 1037
  if (_b___0 != 0) {
#line 1037
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "__drbd_set_out_of_sync", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1037);
  } else {

  }
#line 1037
  if (_b___0 != 0) {
#line 1038
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1040
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1044
  sbnr = sector >> 3;
#line 1045
  ebnr = esector >> 3;
#line 1049
  tmp___0 = spinlock_check(& mdev->al_lock);
#line 1049
  flags = _raw_spin_lock_irqsave(tmp___0);
#line 1050
  tmp___1 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1050
  count = (unsigned int )tmp___1;
#line 1052
  enr = (unsigned int )(sector >> 15);
#line 1053
  e = lc_find(mdev->resync, enr);
#line 1054
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1055
    __mptr = (struct lc_element  const  *)e;
#line 1055
    __mptr___0 = (struct lc_element  const  *)e;
#line 1055
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1056
  spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1059
  put_ldev(mdev);
#line 1060
  return;
}
}
#line 1063 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  long tmp ;

  {
#line 1067
  wakeup = 0;
#line 1070
  spin_lock_irq(& mdev->al_lock);
#line 1071
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1072
    spin_unlock_irq(& mdev->al_lock);
#line 1073
    return (0);
  } else {

  }
#line 1075
  e = lc_get(mdev->resync, enr);
#line 1076
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1076
    __mptr = (struct lc_element  const  *)e;
#line 1076
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1076
    bm_ext = 0;
  }
#line 1077
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1078
    if (bm_ext->lce.lc_number != enr) {
#line 1079
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1080
      bm_ext->rs_failed = 0;
#line 1081
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1082
      wakeup = 1;
    } else {

    }
#line 1084
    if (bm_ext->lce.refcnt == 1U) {
#line 1085
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1086
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1088
  rs_flags = (mdev->resync)->flags;
#line 1089
  spin_unlock_irq(& mdev->al_lock);
#line 1090
  if (wakeup != 0) {
#line 1091
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1093
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1094
    if ((rs_flags & 4UL) != 0UL) {
#line 1095
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
    } else {

    }
#line 1097
    tmp = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1097
    if (tmp != 0L) {
#line 1097
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1097), "i" (12UL));
      ldv_45016: ;
#line 1097
      goto ldv_45016;
    } else {

    }
  } else {

  }
#line 1100
  return (bm_ext);
}
}
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1106
  rv = 0;
#line 1108
  spin_lock_irq(& mdev->al_lock);
#line 1109
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1109
  if (tmp != 0L) {
#line 1110
    rv = 1;
  } else {
#line 1112
    al_ext = lc_find(mdev->act_log, enr);
#line 1113
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1114
      if (al_ext->refcnt != 0U) {
#line 1115
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1118
  spin_unlock_irq(& mdev->al_lock);
#line 1125
  return (rv);
}
}
#line 1135 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1137
  enr = (unsigned int )(sector >> 15);
#line 1141
  __ret = 0;
#line 1141
  bm_ext = _bme_get(mdev, enr);
#line 1141
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1141
    tmp = get_current();
#line 1141
    __wait.flags = 0U;
#line 1141
    __wait.private = (void *)tmp;
#line 1141
    __wait.func = & autoremove_wake_function;
#line 1141
    __wait.task_list.next = & __wait.task_list;
#line 1141
    __wait.task_list.prev = & __wait.task_list;
    ldv_45035: 
#line 1141
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1141
    bm_ext = _bme_get(mdev, enr);
#line 1141
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1141
      goto ldv_45033;
    } else {

    }
#line 1141
    tmp___0 = get_current();
#line 1141
    tmp___1 = signal_pending(tmp___0);
#line 1141
    if (tmp___1 == 0) {
#line 1141
      schedule();
#line 1141
      goto ldv_45034;
    } else {

    }
#line 1141
    __ret = -512;
#line 1141
    goto ldv_45033;
    ldv_45034: ;
#line 1141
    goto ldv_45035;
    ldv_45033: 
#line 1141
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1141
  sig = __ret;
#line 1143
  if (sig != 0) {
#line 1144
    return (-4);
  } else {

  }
#line 1146
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1146
  if (tmp___2 != 0) {
#line 1147
    return (0);
  } else {

  }
#line 1149
  i = 0;
#line 1149
  goto ldv_45044;
  ldv_45043: 
#line 1150
  __ret___0 = 0;
#line 1150
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1150
  if (tmp___7 != 0) {
#line 1150
    tmp___3 = get_current();
#line 1150
    __wait___0.flags = 0U;
#line 1150
    __wait___0.private = (void *)tmp___3;
#line 1150
    __wait___0.func = & autoremove_wake_function;
#line 1150
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1150
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_45041: 
#line 1150
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1150
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1150
    if (tmp___4 == 0) {
#line 1150
      goto ldv_45039;
    } else {

    }
#line 1150
    tmp___5 = get_current();
#line 1150
    tmp___6 = signal_pending(tmp___5);
#line 1150
    if (tmp___6 == 0) {
#line 1150
      schedule();
#line 1150
      goto ldv_45040;
    } else {

    }
#line 1150
    __ret___0 = -512;
#line 1150
    goto ldv_45039;
    ldv_45040: ;
#line 1150
    goto ldv_45041;
    ldv_45039: 
#line 1150
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1150
  sig = __ret___0;
#line 1152
  if (sig != 0) {
#line 1153
    spin_lock_irq(& mdev->al_lock);
#line 1154
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1154
    if (tmp___8 == 0U) {
#line 1155
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1156
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1157
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1159
    spin_unlock_irq(& mdev->al_lock);
#line 1160
    return (-4);
  } else {

  }
#line 1149
  i = i + 1;
  ldv_45044: ;
#line 1149
  if (i <= 3) {
#line 1150
    goto ldv_45043;
  } else {

  }
#line 1163
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1164
  return (0);
}
}
#line 1176 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___2 ;
  int tmp___3 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  long tmp___4 ;
  int tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;

  {
#line 1178
  enr = (unsigned int )(sector >> 15);
#line 1179
  al_enr = enr * 4U;
#line 1184
  spin_lock_irq(& mdev->al_lock);
#line 1185
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1199
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1200
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1200
      __mptr = (struct lc_element  const  *)e;
#line 1200
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1200
      bm_ext = 0;
    }
#line 1201
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1202
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1202
      if (tmp != 0) {
#line 1202
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1202);
      } else {

      }
#line 1203
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1203
      if (tmp___0 == 0) {
#line 1203
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1203);
      } else {

      }
#line 1204
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1205
      mdev->resync_wenr = 4294967295U;
#line 1206
      tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1206
      if (tmp___1 == 0U) {
#line 1207
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1208
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1210
      dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "LOGIC BUG\n");
    }
  } else {

  }
#line 1214
  e = lc_try_get(mdev->resync, enr);
#line 1215
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1215
    __mptr___0 = (struct lc_element  const  *)e;
#line 1215
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1215
    bm_ext = 0;
  }
#line 1216
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1217
    tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1217
    if (tmp___2 != 0) {
#line 1218
      goto proceed;
    } else {

    }
#line 1219
    tmp___3 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1219
    if (tmp___3 == 0) {
#line 1220
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1226
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1227
      if (bm_ext->lce.refcnt == 0U) {
#line 1227
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1227);
      } else {

      }
    }
#line 1229
    goto check_al;
  } else {
#line 1232
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1233
      goto try_again;
    } else {

    }
#line 1235
    e = lc_get(mdev->resync, enr);
#line 1236
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1236
      __mptr___1 = (struct lc_element  const  *)e;
#line 1236
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1236
      bm_ext = 0;
    }
#line 1237
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1238
      rs_flags = (mdev->resync)->flags;
#line 1239
      if ((rs_flags & 4UL) != 0UL) {
#line 1240
        dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Have to wait for element (resync LRU too small?)\n");
      } else {

      }
#line 1242
      tmp___4 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1242
      if (tmp___4 != 0L) {
#line 1242
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1242), "i" (12UL));
        ldv_45065: ;
#line 1242
        goto ldv_45065;
      } else {

      }
#line 1243
      goto try_again;
    } else {

    }
#line 1245
    if (bm_ext->lce.lc_number != enr) {
#line 1246
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1247
      bm_ext->rs_failed = 0;
#line 1248
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1249
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1250
      tmp___5 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1250
      if (tmp___5 != 0) {
#line 1250
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1250);
      } else {

      }
    } else {

    }
#line 1252
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1253
    if (bm_ext->lce.refcnt != 1U) {
#line 1253
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1253);
    } else {

    }
#line 1254
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1255
    goto check_al;
  }
  check_al: 
#line 1258
  i = 0;
#line 1258
  goto ldv_45067;
  ldv_45066: 
#line 1259
  tmp___6 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                             0L);
#line 1259
  if (tmp___6 != 0L) {
#line 1260
    goto try_again;
  } else {

  }
#line 1261
  tmp___7 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1261
  if (tmp___7 != 0) {
#line 1262
    goto try_again;
  } else {

  }
#line 1258
  i = i + 1;
  ldv_45067: ;
#line 1258
  if (i <= 3) {
#line 1259
    goto ldv_45066;
  } else {

  }
#line 1264
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1266
  mdev->resync_wenr = 4294967295U;
#line 1267
  spin_unlock_irq(& mdev->al_lock);
#line 1268
  return (0);
  try_again: ;
#line 1271
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1272
    mdev->resync_wenr = enr;
  } else {

  }
#line 1273
  spin_unlock_irq(& mdev->al_lock);
#line 1274
  return (-11);
}
}
#line 1277 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  raw_spinlock_t *tmp ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 1279
  enr = (unsigned int )(sector >> 15);
#line 1284
  tmp = spinlock_check(& mdev->al_lock);
#line 1284
  flags = _raw_spin_lock_irqsave(tmp);
#line 1285
  e = lc_find(mdev->resync, enr);
#line 1286
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1286
    __mptr = (struct lc_element  const  *)e;
#line 1286
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1286
    bm_ext = 0;
  }
#line 1287
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1288
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1289
    tmp___0 = ___ratelimit(& drbd_ratelimit_state, "drbd_rs_complete_io");
#line 1289
    if (tmp___0 != 0) {
#line 1290
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io() called, but extent not found\n");
    } else {

    }
#line 1291
    return;
  } else {

  }
#line 1294
  if (bm_ext->lce.refcnt == 0U) {
#line 1295
    spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1296
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
            (unsigned long long )sector, enr);
#line 1299
    return;
  } else {

  }
#line 1302
  tmp___1 = lc_put(mdev->resync, & bm_ext->lce);
#line 1302
  if (tmp___1 == 0U) {
#line 1303
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1304
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1305
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1306
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1309
  spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1310
  return;
}
}
#line 1316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1318
  spin_lock_irq(& mdev->al_lock);
#line 1320
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1320
  if (tmp != 0) {
#line 1321
    lc_reset(mdev->resync);
#line 1322
    put_ldev(mdev);
  } else {

  }
#line 1324
  mdev->resync_locked = 0U;
#line 1325
  mdev->resync_wenr = 4294967295U;
#line 1326
  spin_unlock_irq(& mdev->al_lock);
#line 1327
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1328
  return;
}
}
#line 1337 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1343
  spin_lock_irq(& mdev->al_lock);
#line 1345
  tmp___3 = _get_ldev_if_state(mdev, D_FAILED);
#line 1345
  if (tmp___3 != 0) {
#line 1347
    i = 0;
#line 1347
    goto ldv_45096;
    ldv_45095: 
#line 1348
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1349
    __mptr = (struct lc_element  const  *)e;
#line 1349
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 1350
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1351
      goto ldv_45094;
    } else {

    }
#line 1352
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1353
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
                mdev->resync_wenr);
#line 1356
      tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1356
      if (tmp != 0) {
#line 1356
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1356);
      } else {

      }
#line 1357
      tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1357
      if (tmp___0 == 0) {
#line 1357
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
                1357);
      } else {

      }
#line 1358
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1359
      mdev->resync_wenr = 4294967295U;
#line 1360
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1362
    if (bm_ext->lce.refcnt != 0U) {
#line 1363
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Retrying drbd_rs_del_all() later. refcnt=%d\n",
                bm_ext->lce.refcnt);
#line 1365
      put_ldev(mdev);
#line 1366
      spin_unlock_irq(& mdev->al_lock);
#line 1367
      return (-11);
    } else {

    }
#line 1369
    tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1369
    if (tmp___1 != 0) {
#line 1369
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1369);
    } else {

    }
#line 1370
    tmp___2 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1370
    if (tmp___2 != 0) {
#line 1370
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1370);
    } else {

    }
#line 1371
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_45094: 
#line 1347
    i = i + 1;
    ldv_45096: ;
#line 1347
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1348
      goto ldv_45095;
    } else {

    }

#line 1373
    if ((mdev->resync)->used != 0U) {
#line 1373
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->resync->used == 0 ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
              1373);
    } else {

    }
#line 1374
    put_ldev(mdev);
  } else {

  }
#line 1376
  spin_unlock_irq(& mdev->al_lock);
#line 1378
  return (0);
}
}
#line 1387 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  int _b ;
  int _b___0 ;
  long tmp ;
  long tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1393
  wake_up = 0;
#line 1395
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 131072U) {
#line 1396
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "drbd_rs_failed_io: sector=%llus size=%d nonsense!\n",
            (unsigned long long )sector, size);
#line 1398
    return;
  } else {

  }
#line 1400
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1401
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1403
  _b = sector >= nr_sectors;
#line 1403
  if (_b != 0) {
#line 1403
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1403);
  } else {

  }
#line 1403
  if (_b != 0) {
#line 1403
    return;
  } else {

  }
#line 1404
  _b___0 = esector >= nr_sectors;
#line 1404
  if (_b___0 != 0) {
#line 1404
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_rs_failed_io", (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
            1404);
  } else {

  }
#line 1404
  if (_b___0 != 0) {
#line 1404
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1406
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1411
  tmp = __builtin_expect(esector <= 6UL, 0L);
#line 1411
  if (tmp != 0L) {
#line 1412
    return;
  } else {

  }
#line 1413
  tmp___0 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1413
  if (tmp___0 != 0L) {
#line 1414
    ebnr = lbnr;
  } else {
#line 1416
    ebnr = (esector - 7UL) >> 3;
  }
#line 1417
  sbnr = (sector + 7UL) >> 3;
#line 1419
  if (sbnr > ebnr) {
#line 1420
    return;
  } else {

  }
#line 1426
  spin_lock_irq(& mdev->al_lock);
#line 1427
  tmp___1 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1427
  count = (unsigned long )tmp___1;
#line 1428
  if (count != 0UL) {
#line 1429
    mdev->rs_failed = mdev->rs_failed + count;
#line 1431
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1431
    if (tmp___2 != 0) {
#line 1432
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1433
      put_ldev(mdev);
    } else {

    }
#line 1438
    wake_up = 1;
  } else {

  }
#line 1440
  spin_unlock_irq(& mdev->al_lock);
#line 1441
  if (wake_up != 0) {
#line 1442
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1443
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 112 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 164 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 166
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 168
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 169
  memset((void *)dst, 255, (size_t )len);
#line 171
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 172
  return;
}
}
#line 271 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 275
  tmp___0 = __bitmap_weight(src, nbits);
#line 275
  return (tmp___0);
}
}
#line 79 "include/linux/cpumask.h"
extern struct cpumask  const  * const  cpu_online_mask ;
#line 254 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 256
  tmp = cpumask_check(cpu);
#line 256
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 257
  return;
}
}
#line 307 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 309
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 310
  return;
}
}
#line 446 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 448
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 448
  return ((unsigned int )tmp);
}
}
#line 612
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 614
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 286 "include/linux/list.h"
__inline static void list_splice(struct list_head  const  *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 289
  tmp = list_empty(list);
#line 289
  if (tmp == 0) {
#line 290
    __list_splice(list, head, head->next);
  } else {

  }
#line 291
  return;
}
}
#line 18 "include/linux/rwlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 65 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 504 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 510
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 514
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 253 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 277
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 101 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 104
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 51 "include/trace/events/kmem.h"
__inline static void trace_kmalloc___4(unsigned long call_site , void const   *ptr ,
                                       size_t bytes_req , size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  long tmp ;
  struct tracepoint_func *it_func_ptr ;
  void *it_func ;
  void *__data ;
  struct tracepoint_func *_________p1 ;
  bool __warned ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 45
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 45
  if (tmp != 0L) {
#line 45
    goto do_trace;
  } else {

  }
#line 45
  return;
  do_trace: 
#line 45
  rcu_read_lock_sched_notrace();
#line 45
  _________p1 = *((struct tracepoint_func * volatile  *)(& __tracepoint_kmalloc.funcs));
#line 45
  tmp___0 = debug_lockdep_rcu_enabled();
#line 45
  if (tmp___0 != 0 && ! __warned) {
#line 45
    tmp___1 = rcu_read_lock_sched_held();
#line 45
    if (tmp___1 == 0 && 1) {
#line 45
      __warned = 1;
#line 45
      lockdep_rcu_dereference("include/trace/events/kmem.h", 51);
    } else {

    }
  } else {

  }
#line 45
  it_func_ptr = _________p1;
#line 45
  if ((unsigned long )it_func_ptr != (unsigned long )((struct tracepoint_func *)0)) {
    ldv_13622: 
#line 45
    it_func = it_func_ptr->func;
#line 45
    __data = it_func_ptr->data;
#line 45
    (*((void (*)(void * , unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))it_func))(__data,
                                                                                                   call_site,
                                                                                                   ptr,
                                                                                                   bytes_req,
                                                                                                   bytes_alloc,
                                                                                                   gfp_flags);
#line 45
    it_func_ptr = it_func_ptr + 1;
#line 45
    if ((unsigned long )it_func_ptr->func != (unsigned long )((void *)0)) {
#line 46
      goto ldv_13622;
    } else {

    }

  } else {

  }
#line 45
  rcu_read_lock_sched_notrace();
#line 47
  return;
}
}
#line 229 "include/linux/slub_def.h"
__inline static void *kmalloc_large___4(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 231
  tmp = get_order(size);
#line 231
  order = (unsigned int )tmp;
#line 232
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 232
  ret = (void *)tmp___0;
#line 234
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 235
  trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                    flags);
#line 237
  return (ret);
}
}
#line 240 "include/linux/slub_def.h"
__inline static void *kmalloc___4(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 244
  if (0) {
#line 245
    if (size > 8192UL) {
#line 246
      tmp = kmalloc_large___4(size, flags);
#line 246
      return (tmp);
    } else {

    }
#line 248
    if ((flags & 1U) == 0U) {
#line 249
      tmp___0 = kmalloc_slab(size);
#line 249
      s = tmp___0;
#line 251
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 252
        return (16);
      } else {

      }
#line 254
      ret = kmem_cache_alloc_notrace(s, flags);
#line 256
      trace_kmalloc___4((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                        flags);
#line 258
      return (ret);
    } else {

    }
  } else {

  }
#line 261
  tmp___1 = __kmalloc(size, flags);
#line 261
  return (tmp___1);
}
}
#line 321 "include/linux/slab.h"
__inline static void *kzalloc___2(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 323
  tmp = kmalloc___4(size, flags | 32768U);
#line 323
  return (tmp);
}
}
#line 207 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 207
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 207
  return (tmp);
}
}
#line 2002 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 2003
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 2004
extern struct block_device *bdget(dev_t  ) ;
#line 2008
extern void bdput(struct block_device * ) ;
#line 2043
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 1782 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2019
extern int wake_up_process(struct task_struct * ) ;
#line 14 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 397 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 403
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 590
extern struct gendisk *alloc_disk(int  ) ;
#line 592
extern void put_disk(struct gendisk * ) ;
#line 258 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 260
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 261
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 261
    return (tmp);
  } else {

  }
#line 262
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 670 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 806
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 807
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 808
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 811
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 839
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 854
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 164 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 588 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 590
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 590
  if (tmp != 0L) {
#line 590
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (590), "i" (12UL));
    ldv_44008: ;
#line 590
    goto ldv_44008;
  } else {

  }
#line 591
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 592
  return;
}
}
#line 601 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 603
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 604
  return;
}
}
#line 613 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 615
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 615
  if (tmp != 0L) {
#line 615
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (615), "i" (12UL));
    ldv_44023: ;
#line 615
    goto ldv_44023;
  } else {

  }
#line 616
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 617
  return;
}
}
#line 1167
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1176
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1182
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1187
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1192
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) ;
#line 1195
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1199
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1239
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1241
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1246
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1253
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1254
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1255
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1257
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1452 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1453 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1454 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1455 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1456 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1457 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1459 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1460 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1462 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1466
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1467
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1479
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1480
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1639
void drbd_nl_cleanup(void) ;
#line 1640
int drbd_nl_init(void) ;
#line 1641
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1740 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1742
  tmp = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1742
  if (tmp == 0) {
#line 1742
    goto ldv_45074;
  } else {

  }
#line 1742
  tmp___0 = get_current();
#line 1742
  __wait.flags = 0U;
#line 1742
  __wait.private = (void *)tmp___0;
#line 1742
  __wait.func = & autoremove_wake_function;
#line 1742
  __wait.task_list.next = & __wait.task_list;
#line 1742
  __wait.task_list.prev = & __wait.task_list;
  ldv_45077: 
#line 1742
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1742
  tmp___1 = test_and_set_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1742
  if (tmp___1 == 0) {
#line 1742
    goto ldv_45076;
  } else {

  }
#line 1742
  schedule();
#line 1742
  goto ldv_45077;
  ldv_45076: 
#line 1742
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_45074: ;
#line 1745
  return;
}
}
#line 1783 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  int tmp ;
  union drbd_state __ns ;

  {
#line 1785
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1787
  if (forcedetach == 0) {
#line 1788
    tmp = ___ratelimit(& drbd_ratelimit_state, "__drbd_chk_io_error_");
#line 1788
    if (tmp != 0) {
#line 1789
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s.\n",
              where);
    } else {

    }
#line 1790
    goto ldv_45100;
  } else {

  }
  case 2: ;
  case 1: 
#line 1795
  set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 1796
  if ((int )mdev->state.ldv_35955.disk > 2) {
#line 1797
    __ns.i = mdev->state.i;
#line 1797
    __ns.ldv_35955.disk = 2U;
#line 1797
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1798
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Local IO failed in %s. Detaching...\n",
            where);
  } else {

  }
#line 1801
  goto ldv_45100;
  }
  ldv_45100: ;
#line 1804
  return;
}
}
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____1(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;
  raw_spinlock_t *tmp ;

  {
#line 1817
  if (error != 0) {
#line 1819
    tmp = spinlock_check(& mdev->req_lock);
#line 1819
    flags = _raw_spin_lock_irqsave(tmp);
#line 1820
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1821
    spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1823
  return;
}
}
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1879
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1883
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1883
  if (tmp___1 != 0UL) {
#line 1883
    __min1 = 34359738368UL;
#line 1883
    tmp___0 = drbd_md_first_sector(bdev);
#line 1883
    __min2 = tmp___0;
#line 1883
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1883
    s = 0UL;
  }
#line 1886
  goto ldv_45141;
  case -2: 
#line 1888
  __min1___0 = 34359738368UL;
#line 1888
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1888
  __min2___0 = tmp___2;
#line 1888
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1891
  __min1___1 = s;
#line 1891
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1891
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1894
  goto ldv_45141;
  default: 
#line 1896
  __min1___2 = 8587575296UL;
#line 1896
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1896
  __min2___2 = tmp___3;
#line 1896
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_45141: ;
#line 1899
  return (s);
}
}
#line 1907 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  int tmp ;
  sector_t tmp___0 ;

  {
#line 1910
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1912
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1918
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1919
    tmp = ___ratelimit(& drbd_ratelimit_state, "drbd_md_ss__");
#line 1919
    if (tmp != 0) {
#line 1920
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bdev->backing_bdev==NULL\n");
#line 1921
      dump_stack();
    } else {

    }
#line 1923
    return (0UL);
  } else {

  }
#line 1925
  tmp___0 = drbd_get_capacity(bdev->backing_bdev);
#line 1925
  return ((sector_t )(((unsigned long long )tmp___0 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1928
  return (0UL);
  }
}
}
#line 1990 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1992
  _drbd_thread_stop(thi, 0, 0);
#line 1993
  return;
}
}
#line 1995 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1997
  _drbd_thread_stop(thi, 1, 0);
#line 1998
  return;
}
}
#line 2198 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2204
  switch ((unsigned int )s.ldv_35955.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2217
  goto ldv_45256;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2236
  return (0);
  }
  ldv_45256: ;
#line 2239
  switch ((unsigned int )s.ldv_35955.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2246
  goto ldv_45276;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2255
  return (0);
  }
  ldv_45276: ;
#line 2258
  return (1);
}
}
#line 2266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2268
  tmp = drbd_get_max_buffers(mdev);
#line 2268
  mxb = tmp;
#line 2270
  tmp___0 = is_susp(mdev->state);
#line 2270
  if (tmp___0 != 0) {
#line 2271
    return (0);
  } else {

  }
#line 2272
  tmp___1 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 2272
  if (tmp___1 != 0) {
#line 2273
    return (0);
  } else {

  }
#line 2280
  tmp___2 = drbd_state_is_stable___0(mdev->state);
#line 2280
  if (tmp___2 == 0) {
#line 2281
    return (0);
  } else {

  }
#line 2285
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2285
  if (tmp___3 > mxb) {
#line 2286
    return (0);
  } else {

  }
#line 2287
  tmp___4 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2287
  if (tmp___4 != 0) {
#line 2288
    return (0);
  } else {

  }
#line 2289
  return (1);
}
}
#line 2370 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2372
  sk = (mdev->data.socket)->sk;
#line 2373
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2374
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2375
  return;
}
}
#line 2377 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2384
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_45516;
  ldv_45515: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_45516: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_45515;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct mutex drbd_main_mutex  =    {{1}, {{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_main_mutex.wait_lock",
                                                                   0, 0UL}}}}, {& drbd_main_mutex.wait_list,
                                                                                & drbd_main_mutex.wait_list},
    0, 0, (void *)(& drbd_main_mutex), {0, {0, 0}, "drbd_main_mutex", 0, 0UL}};
#line 80
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 89
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 113 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    8U;
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 134
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {{{{{0U}, 3735899821U, 4294967295U, 0xffffffffffffffffUL, {0, {0, 0}, "drbd_ratelimit_state.lock",
                                                              0, 0UL}}}}, 1250, 5,
    0, 0, 0UL};
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations  const  drbd_ops  = 
#line 163
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 205
  tmp = kmalloc___4(56UL, 208U);
#line 205
  b = (struct drbd_tl_epoch *)tmp;
#line 206
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 207
    return (0);
  } else {

  }
#line 208
  INIT_LIST_HEAD(& b->requests);
#line 209
  INIT_LIST_HEAD(& b->w.list);
#line 210
  b->next = 0;
#line 211
  b->br_number = 4711U;
#line 212
  b->n_writes = 0;
#line 213
  b->w.cb = 0;
#line 215
  mdev->oldest_tle = b;
#line 216
  mdev->newest_tle = b;
#line 217
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 219
  mdev->tl_hash = 0;
#line 220
  mdev->tl_hash_s = 0U;
#line 222
  return (1);
}
}
#line 225 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 227
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 227
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            227);
  } else {

  }
#line 228
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 228
  if (tmp == 0) {
#line 228
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            228);
  } else {

  }
#line 229
  kfree((void const   *)mdev->oldest_tle);
#line 230
  mdev->oldest_tle = 0;
#line 231
  kfree((void const   *)mdev->unused_spare_tle);
#line 232
  mdev->unused_spare_tle = 0;
#line 233
  kfree((void const   *)mdev->tl_hash);
#line 234
  mdev->tl_hash = 0;
#line 235
  mdev->tl_hash_s = 0U;
#line 236
  return;
}
}
#line 245 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 249
  INIT_LIST_HEAD(& new->requests);
#line 250
  INIT_LIST_HEAD(& new->w.list);
#line 251
  new->w.cb = 0;
#line 252
  new->next = 0;
#line 253
  new->n_writes = 0;
#line 255
  newest_before = mdev->newest_tle;
#line 258
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 259
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 260
    (mdev->newest_tle)->next = new;
#line 261
    mdev->newest_tle = new;
  } else {

  }
#line 263
  return;
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  struct list_head  const  *__mptr ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 282
  spin_lock_irq(& mdev->req_lock);
#line 284
  b = mdev->oldest_tle;
#line 287
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 288
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, but no epoch in tl!?\n",
            barrier_nr);
#line 290
    goto bail;
  } else {

  }
#line 292
  if (b->br_number != barrier_nr) {
#line 293
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received, expected #%u!\n",
            barrier_nr, b->br_number);
#line 295
    goto bail;
  } else {

  }
#line 297
  if ((unsigned int )b->n_writes != set_size) {
#line 298
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BAD! BarrierAck #%u received with n_writes=%u, expected n_writes=%u!\n",
            barrier_nr, set_size, b->n_writes);
#line 300
    goto bail;
  } else {

  }
#line 304
  le = b->requests.next;
#line 304
  tle = le->next;
#line 304
  goto ldv_45744;
  ldv_45743: 
#line 305
  __mptr = (struct list_head  const  *)le;
#line 305
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 306
  _req_mod(r, barrier_acked);
#line 304
  le = tle;
#line 304
  tle = le->next;
  ldv_45744: ;
#line 304
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 305
    goto ldv_45743;
  } else {

  }
#line 321
  list_del_init(& b->requests);
#line 323
  nob = b->next;
#line 324
  tmp = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 324
  if (tmp != 0) {
#line 325
    _tl_add_barrier(mdev, b);
#line 326
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 327
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 331
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 331
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( nob != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              331);
    } else {

    }
#line 332
    mdev->oldest_tle = nob;
#line 333
    kfree((void const   *)b);
  }
#line 336
  spin_unlock_irq(& mdev->req_lock);
#line 337
  tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 337
  if (tmp___0 != 0) {
#line 337
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 337
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 337
  if (tmp___2 < 0) {
#line 337
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 337
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
            "tl_release", 337, tmp___1);
  } else {

  }
#line 339
  return;
  bail: 
#line 342
  spin_unlock_irq(& mdev->req_lock);
#line 343
  val.i = 0U;
#line 343
  val.ldv_35955.conn = 6U;
#line 343
  mask.i = 0U;
#line 343
  mask.ldv_35955.conn = 31U;
#line 343
  drbd_force_state(mdev, mask, val);
#line 345
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void _tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct drbd_tl_epoch **pn ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head carry_reads ;
  struct drbd_request *req ;
  int rv ;
  int n_writes ;
  int n_reads ;
  struct list_head  const  *__mptr ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 361
  b = mdev->oldest_tle;
#line 362
  pn = & mdev->oldest_tle;
#line 363
  goto ldv_45779;
  ldv_45778: 
#line 364
  n_writes = 0;
#line 365
  n_reads = 0;
#line 366
  INIT_LIST_HEAD(& carry_reads);
#line 367
  le = b->requests.next;
#line 367
  tle = le->next;
#line 367
  goto ldv_45771;
  ldv_45770: 
#line 368
  __mptr = (struct list_head  const  *)le;
#line 368
  req = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 369
  rv = _req_mod(req, what);
#line 371
  n_writes = (rv & 1) + n_writes;
#line 372
  n_reads = ((rv & 2) >> 1) + n_reads;
#line 367
  le = tle;
#line 367
  tle = le->next;
  ldv_45771: ;
#line 367
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 368
    goto ldv_45770;
  } else {

  }
#line 374
  tmp = b->next;
#line 376
  if (n_writes != 0) {
#line 377
    if ((unsigned int )what == 21U) {
#line 378
      b->n_writes = n_writes;
#line 379
      if ((unsigned long )b->w.cb == (unsigned long )((int (*)(struct drbd_conf * ,
                                                               struct drbd_work * ,
                                                               int  ))0)) {
#line 380
        b->w.cb = & w_send_barrier;
#line 381
        inc_ap_pending(mdev);
#line 382
        set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 385
      drbd_queue_work(& mdev->data.work, & b->w);
    } else {

    }
#line 387
    pn = & b->next;
  } else {
#line 389
    if (n_reads != 0) {
#line 390
      list_add(& carry_reads, & b->requests);
    } else {

    }
#line 393
    list_del(& b->requests);
#line 398
    if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * ,
                                                             struct drbd_work * ,
                                                             int  ))0)) {
#line 399
      tmp___0 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 399
      if (tmp___0 != 0) {
#line 399
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 399
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
      if (tmp___2 < 0) {
#line 399
        tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 399
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "in %s:%d: ap_pending_cnt = %d < 0 !\n",
                "_tl_restart", 399, tmp___1);
      } else {

      }
    } else {

    }
#line 401
    if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 403
      if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 403
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( tmp == NULL ) in %s:%d\n",
                (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
                403);
      } else {

      }
#line 404
      INIT_LIST_HEAD(& b->requests);
#line 405
      list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
#line 406
      INIT_LIST_HEAD(& b->w.list);
#line 407
      b->w.cb = 0;
#line 408
      b->br_number = random32();
#line 409
      b->n_writes = 0;
#line 411
      *pn = b;
#line 412
      goto ldv_45777;
    } else {

    }
#line 414
    *pn = tmp;
#line 415
    kfree((void const   *)b);
  }
#line 417
  b = tmp;
#line 418
  list_splice((struct list_head  const  *)(& carry_reads), & b->requests);
  ldv_45779: ;
#line 363
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 364
    goto ldv_45778;
  } else {

  }
  ldv_45777: ;
#line 368
  return;
}
}
#line 431 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int tmp ;
  struct list_head  const  *__mptr ;

  {
#line 436
  spin_lock_irq(& mdev->req_lock);
#line 438
  _tl_restart(mdev, connection_lost_while_pending);
#line 441
  tmp = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 441
  if (tmp == 0) {
#line 441
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            441);
  } else {

  }
#line 444
  le = mdev->out_of_sequence_requests.next;
#line 444
  tle = le->next;
#line 444
  goto ldv_45789;
  ldv_45788: 
#line 445
  __mptr = (struct list_head  const  *)le;
#line 445
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 448
  _req_mod(r, connection_lost_while_pending);
#line 444
  le = tle;
#line 444
  tle = le->next;
  ldv_45789: ;
#line 444
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 445
    goto ldv_45788;
  } else {

  }
#line 452
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 454
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 456
  spin_unlock_irq(& mdev->req_lock);
#line 457
  return;
}
}
#line 459 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_restart(struct drbd_conf *mdev , enum drbd_req_event what ) 
{ 


  {
#line 461
  spin_lock_irq(& mdev->req_lock);
#line 462
  _tl_restart(mdev, what);
#line 463
  spin_unlock_irq(& mdev->req_lock);
#line 464
  return;
}
}
#line 472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 475
  return (((((int )os.ldv_35955.conn > 9 && (int )ns.ldv_35955.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_35955.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 491
  tmp = spinlock_check(& mdev->req_lock);
#line 491
  flags = _raw_spin_lock_irqsave(tmp);
#line 492
  os = mdev->state;
#line 493
  ns.i = (os.i & ~ mask.i) | val.i;
#line 494
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 495
  ns = mdev->state;
#line 496
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 498
  return (rv);
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 510
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 511
  return;
}
}
#line 513
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 514
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 516
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) ;
#line 518
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  raw_spinlock_t *tmp___1 ;
  int tmp___2 ;

  {
#line 528
  tmp = test_and_clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 528
  if (tmp != 0) {
#line 529
    return (SS_CW_SUCCESS);
  } else {

  }
#line 531
  tmp___0 = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 531
  if (tmp___0 != 0) {
#line 532
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 534
  rv = 0;
#line 535
  tmp___1 = spinlock_check(& mdev->req_lock);
#line 535
  flags = _raw_spin_lock_irqsave(tmp___1);
#line 536
  os = mdev->state;
#line 537
  ns.i = (os.i & ~ mask.i) | val.i;
#line 538
  ns = sanitize_state(mdev, os, ns, 0);
#line 540
  tmp___2 = cl_wide_st_chg(mdev, os, ns);
#line 540
  if (tmp___2 == 0) {
#line 541
    rv = 4;
  } else {

  }
#line 542
  if (rv == 0) {
#line 543
    rv = is_valid_state(mdev, ns);
#line 544
    if (rv == 1) {
#line 545
      rv = is_valid_state_transition(mdev, ns, os);
#line 546
      if (rv == 1) {
#line 547
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 550
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 552
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 565 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  raw_spinlock_t *tmp ;
  int tmp___0 ;
  enum drbd_state_ret_codes tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  enum drbd_state_ret_codes tmp___3 ;
  raw_spinlock_t *tmp___4 ;
  int tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 574
  init_completion(& done);
#line 576
  if (((unsigned int )f & 8U) != 0U) {
#line 577
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 579
  tmp = spinlock_check(& mdev->req_lock);
#line 579
  flags = _raw_spin_lock_irqsave(tmp);
#line 580
  os = mdev->state;
#line 581
  ns.i = (os.i & ~ mask.i) | val.i;
#line 582
  ns = sanitize_state(mdev, os, ns, 0);
#line 584
  tmp___5 = cl_wide_st_chg(mdev, os, ns);
#line 584
  if (tmp___5 != 0) {
#line 585
    rv = is_valid_state(mdev, ns);
#line 586
    if (rv == 1) {
#line 587
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 588
    spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 590
    if (rv <= 0) {
#line 591
      if (((unsigned int )f & 2U) != 0U) {
#line 592
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 593
      goto abort;
    } else {

    }
#line 596
    drbd_state_lock___0(mdev);
#line 597
    tmp___0 = drbd_send_state_req(mdev, mask, val);
#line 597
    if (tmp___0 == 0) {
#line 598
      drbd_state_unlock(mdev);
#line 599
      rv = -10;
#line 600
      if (((unsigned int )f & 2U) != 0U) {
#line 601
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 602
      goto abort;
    } else {

    }
#line 605
    tmp___1 = _req_st_cond(mdev, mask, val);
#line 605
    rv = (int )tmp___1;
#line 605
    if (rv != 0) {
#line 605
      goto ldv_45861;
    } else {

    }
#line 605
    tmp___2 = get_current();
#line 605
    __wait.flags = 0U;
#line 605
    __wait.private = (void *)tmp___2;
#line 605
    __wait.func = & autoremove_wake_function;
#line 605
    __wait.task_list.next = & __wait.task_list;
#line 605
    __wait.task_list.prev = & __wait.task_list;
    ldv_45864: 
#line 605
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 605
    tmp___3 = _req_st_cond(mdev, mask, val);
#line 605
    rv = (int )tmp___3;
#line 605
    if (rv != 0) {
#line 605
      goto ldv_45863;
    } else {

    }
#line 605
    schedule();
#line 605
    goto ldv_45864;
    ldv_45863: 
#line 605
    finish_wait(& mdev->state_wait, & __wait);
    ldv_45861: ;
#line 608
    if (rv <= 0) {
#line 609
      drbd_state_unlock(mdev);
#line 610
      if (((unsigned int )f & 2U) != 0U) {
#line 611
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 612
      goto abort;
    } else {

    }
#line 614
    tmp___4 = spinlock_check(& mdev->req_lock);
#line 614
    flags = _raw_spin_lock_irqsave(tmp___4);
#line 615
    os = mdev->state;
#line 616
    ns.i = (os.i & ~ mask.i) | val.i;
#line 617
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 618
    drbd_state_unlock(mdev);
  } else {
#line 620
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 623
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 625
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 626
    tmp___6 = get_current();
#line 626
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 626
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              626);
    } else {

    }
#line 627
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 631
  if (((unsigned int )f & 8U) != 0U) {
#line 632
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 634
  return (rv);
}
}
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 652
  rv = drbd_req_state(mdev, mask, val, f);
#line 652
  if (rv != -18) {
#line 652
    goto ldv_45875;
  } else {

  }
#line 652
  tmp = get_current();
#line 652
  __wait.flags = 0U;
#line 652
  __wait.private = (void *)tmp;
#line 652
  __wait.func = & autoremove_wake_function;
#line 652
  __wait.task_list.next = & __wait.task_list;
#line 652
  __wait.task_list.prev = & __wait.task_list;
  ldv_45878: 
#line 652
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 652
  rv = drbd_req_state(mdev, mask, val, f);
#line 652
  if (rv != -18) {
#line 652
    goto ldv_45877;
  } else {

  }
#line 652
  schedule();
#line 652
  goto ldv_45878;
  ldv_45877: 
#line 652
  finish_wait(& mdev->state_wait, & __wait);
  ldv_45875: ;
#line 655
  return (rv);
}
}
#line 658 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 660
  tmp = is_susp(ns);
#line 660
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35955.pdsk);
#line 660
  tmp___1 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35955.disk);
#line 660
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_35955.peer);
#line 660
  tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35955.role);
#line 660
  tmp___4 = drbd_conn_str((enum drbd_conns )ns.ldv_35955.conn);
#line 660
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n",
          name, tmp___4, tmp___3, tmp___2, tmp___1, tmp___0, tmp != 0 ? 115 : 114,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
          (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 671
  return;
}
}
#line 674 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;

  {
#line 677
  if (err == -18) {
#line 678
    return;
  } else {

  }
#line 679
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 679
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "State change failed: %s\n",
          tmp);
#line 680
  print_st(mdev, (char *)" state", os);
#line 681
  print_st(mdev, (char *)"wanted", ns);
#line 682
  return;
}
}
#line 705 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 710
  rv = 1;
#line 712
  fp = FP_DONT_CARE;
#line 713
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 713
  if (tmp != 0) {
#line 714
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 715
    put_ldev(mdev);
  } else {

  }
#line 718
  tmp___0 = get_net_conf(mdev);
#line 718
  if (tmp___0 != 0) {
#line 719
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 721
      rv = -1;
    } else {

    }
#line 722
    put_net_conf(mdev);
  } else {

  }
#line 725
  if (rv <= 0) {

  } else
#line 727
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 728
    rv = -12;
  } else
#line 730
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35955.conn <= 9) && (int )ns.ldv_35955.disk <= 7) {
#line 731
    rv = -2;
  } else
#line 733
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_35955.conn <= 9) && (int )ns.ldv_35955.pdsk > 5) {
#line 735
    rv = -7;
  } else
#line 737
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35955.disk <= 4) && (int )ns.ldv_35955.pdsk <= 4) {
#line 738
    rv = -2;
  } else
#line 740
  if ((int )ns.ldv_35955.conn > 10 && (int )ns.ldv_35955.disk <= 3) {
#line 741
    rv = -4;
  } else
#line 743
  if ((int )ns.ldv_35955.conn > 10 && (int )ns.ldv_35955.pdsk <= 3) {
#line 744
    rv = -5;
  } else
#line 746
  if (((int )ns.ldv_35955.conn > 10 && (int )ns.ldv_35955.disk <= 7) && (int )ns.ldv_35955.pdsk <= 7) {
#line 747
    rv = -2;
  } else
#line 749
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 754
    rv = -6;
  } else
#line 756
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 758
    rv = -14;
  } else
#line 760
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 762
    rv = -17;
  } else {

  }
#line 764
  return (rv);
}
}
#line 773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 776
  rv = 1;
#line 778
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_35955.conn > 10) {
#line 780
    rv = -8;
  } else {

  }
#line 782
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 783
    rv = -9;
  } else {

  }
#line 785
  if ((int )ns.ldv_35955.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 786
    rv = -11;
  } else {

  }
#line 788
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_35955.conn <= 1) {
#line 789
    rv = -13;
  } else {

  }
#line 791
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_35955.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 792
    rv = -16;
  } else {

  }
#line 794
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 795
    rv = -18;
  } else {

  }
#line 797
  if ((int )ns.ldv_35955.conn == (int )os.ldv_35955.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 798
    rv = -18;
  } else {

  }
#line 800
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_35955.conn <= 9) {
#line 801
    rv = -15;
  } else {

  }
#line 803
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_35955.conn != (int )os.ldv_35955.conn) && (int )os.ldv_35955.conn > 10) {
#line 805
    rv = -8;
  } else {

  }
#line 807
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_35955.conn <= 9) {
#line 809
    rv = -15;
  } else {

  }
#line 811
  return (rv);
}
}
#line 824 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , char const   **warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  int tmp___0 ;

  {
#line 829
  fp = FP_DONT_CARE;
#line 830
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 830
  if (tmp != 0) {
#line 831
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 832
    put_ldev(mdev);
  } else {

  }
#line 836
  if (((int )ns.ldv_35955.conn > 2 && (int )ns.ldv_35955.conn <= 7) && (int )os.ldv_35955.conn <= 1) {
#line 838
    ns.ldv_35955.conn = os.ldv_35955.conn;
  } else {

  }
#line 842
  if (((((int )os.ldv_35955.conn > 2 && (int )os.ldv_35955.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) && (int )ns.ldv_35955.conn <= 7) {
#line 844
    ns.ldv_35955.conn = os.ldv_35955.conn;
  } else {

  }
#line 847
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 848
    ns.ldv_35955.disk = 0U;
  } else {

  }
#line 852
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) {
#line 853
    ns.ldv_35955.disk = 0U;
  } else {

  }
#line 856
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 857
    ns.ldv_35955.conn = os.ldv_35955.conn;
  } else {

  }
#line 859
  if ((int )ns.ldv_35955.conn <= 9) {
#line 860
    ns.ldv_35955.peer_isp = 0U;
#line 861
    ns.ldv_35955.peer = 0U;
#line 862
    if ((int )ns.ldv_35955.pdsk > 6 || (int )ns.ldv_35955.pdsk <= 3) {
#line 863
      ns.ldv_35955.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 867
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 868
    ns.ldv_35955.aftr_isp = 0U;
  } else {

  }
#line 871
  if (((int )os.ldv_35955.conn > 10 && (int )ns.ldv_35955.conn > 10) && ((int )ns.ldv_35955.disk <= 2 || (int )ns.ldv_35955.pdsk <= 2)) {
#line 873
    if ((unsigned long )warn_sync_abort != (unsigned long )((char const   **)0)) {
#line 874
      *warn_sync_abort = (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? "Online-verify" : "Resync";
    } else {

    }
#line 877
    ns.ldv_35955.conn = 10U;
  } else {

  }
#line 880
  if ((int )ns.ldv_35955.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 883
    switch ((int )ns.ldv_35955.conn) {
    case 14: ;
    case 21: 
#line 886
    ns.ldv_35955.disk = 5U;
#line 887
    goto ldv_45911;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 892
    ns.ldv_35955.disk = 8U;
#line 893
    goto ldv_45911;
    case 17: 
#line 895
    ns.ldv_35955.disk = 4U;
#line 896
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk state Inconsistent!\n");
#line 897
    goto ldv_45911;
    }
    ldv_45911: ;
#line 899
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 900
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set disk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 903
  if ((int )ns.ldv_35955.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 905
    switch ((int )ns.ldv_35955.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 910
    ns.ldv_35955.pdsk = 8U;
#line 911
    goto ldv_45921;
    case 13: ;
    case 20: 
#line 917
    ns.ldv_35955.pdsk = (int )os.ldv_35955.pdsk > 0 && (int )os.ldv_35955.pdsk <= 4 ? os.ldv_35955.pdsk : 5U;
#line 920
    goto ldv_45921;
    case 16: 
#line 922
    ns.ldv_35955.pdsk = 4U;
#line 923
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk Inconsistent!\n");
#line 924
    goto ldv_45921;
    }
    ldv_45921: ;
#line 926
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 927
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Implicitly set pdsk from Outdated to UpToDate\n");
    } else {

    }
  } else {

  }
#line 931
  if ((int )ns.ldv_35955.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 931
    tmp___0 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 931
    if (tmp___0 != 0) {
#line 933
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 934
        ns.ldv_35955.disk = mdev->new_state_tmp.ldv_35955.disk;
#line 935
        ns.ldv_35955.pdsk = mdev->new_state_tmp.ldv_35955.pdsk;
      } else {
#line 937
        dev_alert((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Connection lost while negotiating, no data!\n");
#line 938
        ns.ldv_35955.disk = 0U;
#line 939
        ns.ldv_35955.pdsk = 6U;
      }
#line 941
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 944
  if (((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35955.conn <= 9) && (int )ns.ldv_35955.pdsk > 5)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35955.conn > 9) || (int )os.ldv_35955.pdsk <= 5)) {
#line 947
    ns.ldv_35955.susp_fen = 1U;
  } else {

  }
#line 949
  if ((mdev->sync_conf.on_no_data == 1 && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35955.disk <= 7) && (int )ns.ldv_35955.pdsk <= 7)) && (((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35955.disk > 7) || (int )os.ldv_35955.pdsk > 7)) {
#line 952
    ns.ldv_35955.susp_nod = 1U;
  } else {

  }
#line 954
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 955
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 956
      ns.ldv_35955.conn = 20U;
    } else {

    }
#line 957
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 958
      ns.ldv_35955.conn = 21U;
    } else {

    }
  } else {
#line 960
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 961
      ns.ldv_35955.conn = 16U;
    } else {

    }
#line 962
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 963
      ns.ldv_35955.conn = 17U;
    } else {

    }
  }
#line 966
  return (ns);
}
}
#line 970 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 972
  if ((unsigned int )cs == 19U) {
#line 978
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 980
    bit = mdev->ov_start_sector >> 3;
#line 981
    if (mdev->rs_total <= bit) {
#line 982
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 984
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 986
  return;
}
}
#line 988 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_resume_al(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 990
  tmp = test_and_clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 990
  if (tmp != 0) {
#line 991
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resumed AL updates\n");
  } else {

  }
#line 992
  return;
}
}
#line 1003 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  char const   *warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  int tmp ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned long now ;
  int i ;
  u32 mdf ;
  int tmp___24 ;
  int tmp___25 ;
  void *tmp___26 ;

  {
#line 1008
  rv = 1;
#line 1009
  warn_sync_abort = 0;
#line 1012
  os = mdev->state;
#line 1014
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 1016
  if (ns.i == os.i) {
#line 1017
    return (2);
  } else {

  }
#line 1019
  if (((unsigned int )flags & 1U) == 0U) {
#line 1023
    rv = is_valid_state(mdev, ns);
#line 1024
    if (rv <= 0) {
#line 1028
      tmp = is_valid_state(mdev, os);
#line 1028
      if (tmp == rv) {
#line 1029
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 1031
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 1034
  if (rv <= 0) {
#line 1035
    if (((unsigned int )flags & 2U) != 0U) {
#line 1036
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 1037
    return (rv);
  } else {

  }
#line 1040
  if ((unsigned long )warn_sync_abort != (unsigned long )((char const   *)0)) {
#line 1041
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s aborted.\n",
             warn_sync_abort);
  } else {

  }
#line 1045
  pbp = (char *)(& pb);
#line 1046
  *pbp = 0;
#line 1047
  if ((int )ns.ldv_35955.role != (int )os.ldv_35955.role) {
#line 1047
    tmp___0 = drbd_role_str((enum drbd_role )ns.ldv_35955.role);
#line 1047
    tmp___1 = drbd_role_str((enum drbd_role )os.ldv_35955.role);
#line 1047
    tmp___2 = sprintf(pbp, "role( %s -> %s ) ", tmp___1, tmp___0);
#line 1047
    pbp = pbp + (unsigned long )tmp___2;
  } else {

  }
#line 1048
  if ((int )ns.ldv_35955.peer != (int )os.ldv_35955.peer) {
#line 1048
    tmp___3 = drbd_role_str((enum drbd_role )ns.ldv_35955.peer);
#line 1048
    tmp___4 = drbd_role_str((enum drbd_role )os.ldv_35955.peer);
#line 1048
    tmp___5 = sprintf(pbp, "peer( %s -> %s ) ", tmp___4, tmp___3);
#line 1048
    pbp = pbp + (unsigned long )tmp___5;
  } else {

  }
#line 1049
  if ((int )ns.ldv_35955.conn != (int )os.ldv_35955.conn) {
#line 1049
    tmp___6 = drbd_conn_str((enum drbd_conns )ns.ldv_35955.conn);
#line 1049
    tmp___7 = drbd_conn_str((enum drbd_conns )os.ldv_35955.conn);
#line 1049
    tmp___8 = sprintf(pbp, "conn( %s -> %s ) ", tmp___7, tmp___6);
#line 1049
    pbp = pbp + (unsigned long )tmp___8;
  } else {

  }
#line 1050
  if ((int )ns.ldv_35955.disk != (int )os.ldv_35955.disk) {
#line 1050
    tmp___9 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35955.disk);
#line 1050
    tmp___10 = drbd_disk_str((enum drbd_disk_state )os.ldv_35955.disk);
#line 1050
    tmp___11 = sprintf(pbp, "disk( %s -> %s ) ", tmp___10, tmp___9);
#line 1050
    pbp = pbp + (unsigned long )tmp___11;
  } else {

  }
#line 1051
  if ((int )ns.ldv_35955.pdsk != (int )os.ldv_35955.pdsk) {
#line 1051
    tmp___12 = drbd_disk_str((enum drbd_disk_state )ns.ldv_35955.pdsk);
#line 1051
    tmp___13 = drbd_disk_str((enum drbd_disk_state )os.ldv_35955.pdsk);
#line 1051
    tmp___14 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___13, tmp___12);
#line 1051
    pbp = pbp + (unsigned long )tmp___14;
  } else {

  }
#line 1052
  tmp___18 = is_susp(ns);
#line 1052
  tmp___19 = is_susp(os);
#line 1052
  if (tmp___18 != tmp___19) {
#line 1053
    tmp___15 = is_susp(ns);
#line 1053
    tmp___16 = is_susp(os);
#line 1053
    tmp___17 = sprintf(pbp, "susp( %s -> %s ) ", tmp___16 != 0 ? (char *)"1" : (char *)"0",
                       tmp___15 != 0 ? (char *)"1" : (char *)"0");
#line 1053
    pbp = pbp + (unsigned long )tmp___17;
  } else {

  }
#line 1056
  if ((int )ns.ldv_35955.aftr_isp != (int )os.ldv_35955.aftr_isp) {
#line 1056
    tmp___20 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1056
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 1057
  if ((int )ns.ldv_35955.peer_isp != (int )os.ldv_35955.peer_isp) {
#line 1057
    tmp___21 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1057
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 1058
  if ((int )ns.ldv_35955.user_isp != (int )os.ldv_35955.user_isp) {
#line 1058
    tmp___22 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 1058
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 1059
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s\n", (char *)(& pb));
#line 1070
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1070
    tmp___23 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1070
    if (tmp___23 == 0) {
#line 1074
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1080
  if (((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U)) {
#line 1082
    atomic_inc(& mdev->local_cnt);
  } else {

  }
#line 1084
  mdev->state = ns;
#line 1085
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1086
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1089
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_35955.conn <= 9) {
#line 1091
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1093
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Online Verify reached sector %llu\n",
              (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1097
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1099
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Syncer continues.\n");
#line 1100
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time[mdev->rs_last_mark]);
#line 1102
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1103
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1106
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1108
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync suspended\n");
#line 1109
    mdev->rs_mark_time[mdev->rs_last_mark] = jiffies;
  } else {

  }
#line 1112
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1114
    now = jiffies;
#line 1117
    mdev->ov_position = 0UL;
#line 1118
    mdev->rs_total = drbd_bm_bits(mdev);
#line 1119
    if (mdev->agreed_pro_version > 89) {
#line 1120
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_35955.conn);
    } else {
#line 1122
      mdev->ov_start_sector = 0UL;
    }
#line 1123
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1125
    mdev->rs_start = now;
#line 1126
    mdev->rs_last_events = 0;
#line 1127
    mdev->rs_last_sect_ev = 0;
#line 1128
    mdev->ov_last_oos_size = 0UL;
#line 1129
    mdev->ov_last_oos_start = 0UL;
#line 1131
    i = 0;
#line 1131
    goto ldv_45948;
    ldv_45947: 
#line 1132
    mdev->rs_mark_left[i] = mdev->rs_total;
#line 1133
    mdev->rs_mark_time[i] = now;
#line 1131
    i = i + 1;
    ldv_45948: ;
#line 1131
    if (i <= 7) {
#line 1132
      goto ldv_45947;
    } else {

    }

#line 1136
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1137
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting Online Verify from sector %llu\n",
                (unsigned long long )mdev->ov_position);
#line 1139
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1143
  tmp___25 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1143
  if (tmp___25 != 0) {
#line 1144
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1148
    tmp___24 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1148
    if (tmp___24 != 0) {
#line 1149
      mdf = mdf | 64U;
    } else {

    }
#line 1150
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U || ((int )mdev->state.ldv_35955.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 4U)) {
#line 1152
      mdf = mdf | 2U;
    } else {

    }
#line 1153
    if ((int )mdev->state.ldv_35955.conn > 9) {
#line 1154
      mdf = mdf | 4U;
    } else {

    }
#line 1155
    if ((int )mdev->state.ldv_35955.disk > 4) {
#line 1156
      mdf = mdf | 1U;
    } else {

    }
#line 1157
    if ((int )mdev->state.ldv_35955.disk > 5) {
#line 1158
      mdf = mdf | 16U;
    } else {

    }
#line 1159
    if ((int )mdev->state.ldv_35955.pdsk <= 5 && (int )mdev->state.ldv_35955.pdsk > 3) {
#line 1160
      mdf = mdf | 32U;
    } else {

    }
#line 1161
    if ((mdev->ldev)->md.flags != mdf) {
#line 1162
      (mdev->ldev)->md.flags = mdf;
#line 1163
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1165
    if ((int )os.ldv_35955.disk <= 6 && (int )ns.ldv_35955.disk > 6) {
#line 1166
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1167
    put_ldev(mdev);
  } else {

  }
#line 1171
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1173
    set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1176
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1177
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1180
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1181
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1184
  if (((int )os.ldv_35955.conn > 7 && (int )ns.ldv_35955.conn <= 7) && (int )ns.ldv_35955.conn > 2) {
#line 1186
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1189
  if ((int )os.ldv_35955.conn <= 9 && (int )ns.ldv_35955.conn > 9) {
#line 1190
    drbd_resume_al(mdev);
  } else {

  }
#line 1192
  tmp___26 = kmalloc___4(48UL, 32U);
#line 1192
  ascw = (struct after_state_chg_work *)tmp___26;
#line 1193
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1194
    ascw->os = os;
#line 1195
    ascw->ns = ns;
#line 1196
    ascw->flags = flags;
#line 1197
    ascw->w.cb = & w_after_state_ch;
#line 1198
    ascw->done = done;
#line 1199
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1201
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Could not kmalloc an ascw\n");
  }
#line 1204
  return (rv);
}
}
#line 1207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;

  {
#line 1210
  __mptr = (struct drbd_work  const  *)w;
#line 1210
  ascw = (struct after_state_chg_work *)__mptr;
#line 1211
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1212
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1213
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1213
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( ascw->done != NULL ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1213);
    } else {

    }
#line 1214
    complete(ascw->done);
  } else {

  }
#line 1216
  kfree((void const   *)ascw);
#line 1218
  return (1);
}
}
#line 1221 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1223
  if (rv != 0) {
#line 1224
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the bitmap failed not starting resync.\n");
#line 1225
    val.i = 0U;
#line 1225
    val.ldv_35955.conn = 10U;
#line 1225
    mask.i = 0U;
#line 1225
    mask.ldv_35955.conn = 31U;
#line 1225
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1226
    return;
  } else {

  }
#line 1229
  switch ((int )mdev->state.ldv_35955.conn) {
  case 12: 
#line 1231
  val___0.i = 0U;
#line 1231
  val___0.ldv_35955.conn = 15U;
#line 1231
  mask___0.i = 0U;
#line 1231
  mask___0.ldv_35955.conn = 31U;
#line 1231
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1232
  goto ldv_45972;
  case 11: 
#line 1234
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1235
  goto ldv_45972;
  }
  ldv_45972: ;
#line 1238
  return;
}
}
#line 1246 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  enum drbd_req_event what ;
  union drbd_state nsm ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  enum drbd_io_error_p eh ;
  int was_io_error ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;

  {
#line 1250
  what = nothing;
#line 1251
  nsm.i = 4294967295U;
#line 1253
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1254
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 1255
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1256
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1259
  fp = FP_DONT_CARE;
#line 1260
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1260
  if (tmp != 0) {
#line 1261
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1262
    put_ldev(mdev);
  } else {

  }
#line 1266
  drbd_bcast_state(mdev, ns);
#line 1268
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_35955.disk > 7) || (int )os.ldv_35955.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_35955.disk <= 7) && (int )ns.ldv_35955.pdsk <= 7)) {
#line 1270
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1275
  nsm.i = 4294967295U;
#line 1276
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1277
    if ((int )os.ldv_35955.conn <= 9 && (int )ns.ldv_35955.conn > 9) {
#line 1278
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1279
        what = resend;
#line 1279
        nsm.ldv_35955.susp_nod = 0U;
      } else {
#line 1281
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unexpected Resynd going on!\n");
      }
    } else {

    }
#line 1284
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 2U && (int )ns.ldv_35955.disk > 1) {
#line 1285
      what = restart_frozen_disk_io;
#line 1285
      nsm.ldv_35955.susp_nod = 0U;
    } else {

    }
  } else {

  }
#line 1289
  if ((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1291
    if ((int )os.ldv_35955.pdsk > 5 && (int )ns.ldv_35955.pdsk <= 5) {
#line 1292
      tl_clear(mdev);
#line 1293
      tmp___0 = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1293
      if (tmp___0 != 0) {
#line 1294
        drbd_uuid_new_current(mdev);
#line 1295
        clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 1297
      spin_lock_irq(& mdev->req_lock);
#line 1298
      __ns.i = mdev->state.i;
#line 1298
      __ns.ldv_35955.susp_fen = 0U;
#line 1298
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1299
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
#line 1302
    if ((int )os.ldv_35955.conn <= 9 && (int )ns.ldv_35955.conn > 9) {
#line 1303
      clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
#line 1304
      what = resend;
#line 1305
      nsm.ldv_35955.susp_fen = 0U;
    } else {

    }
  } else {

  }
#line 1309
  if ((unsigned int )what != 24U) {
#line 1310
    spin_lock_irq(& mdev->req_lock);
#line 1311
    _tl_restart(mdev, what);
#line 1312
    nsm.i = nsm.i & mdev->state.i;
#line 1313
    _drbd_set_state(mdev, nsm, CS_VERBOSE, 0);
#line 1314
    spin_unlock_irq(& mdev->req_lock);
  } else {

  }
#line 1318
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_35955.pdsk > 0) {
#line 1319
    drbd_send_uuids(mdev);
#line 1320
    drbd_send_state(mdev);
  } else {

  }
#line 1322
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1323
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1326
  if ((((int )os.ldv_35955.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_35955.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1332
    tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1332
    if (tmp___2 != 0) {
#line 1333
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_35955.disk > 7) {
#line 1335
        tmp___1 = is_susp(mdev->state);
#line 1335
        if (tmp___1 != 0) {
#line 1336
          set_bit(27U, (unsigned long volatile   *)(& mdev->flags));
        } else {
#line 1338
          drbd_uuid_new_current(mdev);
#line 1339
          drbd_send_uuids(mdev);
        }
      } else {

      }
#line 1342
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1346
  if ((int )ns.ldv_35955.pdsk <= 3) {
#line 1346
    tmp___3 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1346
    if (tmp___3 != 0) {
#line 1347
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1348
        drbd_uuid_new_current(mdev);
#line 1349
        drbd_send_uuids(mdev);
      } else {

      }
#line 1353
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1354
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1355
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1359
  if (((int )ns.ldv_35955.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1361
    drbd_send_sizes(mdev, 0, 0);
#line 1362
    drbd_send_uuids(mdev);
#line 1363
    drbd_send_state(mdev);
  } else {

  }
#line 1367
  if ((int )ns.ldv_35955.conn > 9 && ((int )os.ldv_35955.aftr_isp != (int )ns.ldv_35955.aftr_isp || (int )os.ldv_35955.user_isp != (int )ns.ldv_35955.user_isp)) {
#line 1370
    drbd_send_state(mdev);
  } else {

  }
#line 1373
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1375
    suspend_other_sg(mdev);
  } else {

  }
#line 1379
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_35955.conn > 9) {
#line 1380
    drbd_send_state(mdev);
  } else {

  }
#line 1383
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1385
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1388
  if ((((int )os.ldv_35955.conn <= 9 && (int )ns.ldv_35955.conn <= 9) && (int )os.ldv_35955.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1390
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1394
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 4U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1400
    eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1401
    was_io_error = test_and_clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 1406
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 1407
      tmp___4 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.disk);
#line 1407
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s during detach\n",
              tmp___4);
    } else {

    }
#line 1411
    tmp___5 = drbd_send_state(mdev);
#line 1411
    if (tmp___5 != 0) {
#line 1412
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I am detaching my disk\n");
    } else {
#line 1414
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for detaching disk failed\n");
    }
#line 1416
    drbd_rs_cancel_all(mdev);
#line 1421
    drbd_md_sync(mdev);
#line 1422
    put_ldev(mdev);
#line 1424
    if (was_io_error != 0 && (unsigned int )eh == 1U) {
#line 1425
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1431
  if ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1434
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 0U) {
#line 1435
      tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_35955.disk);
#line 1435
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: disk is %s while going diskless\n",
              tmp___6);
    } else {

    }
#line 1439
    mdev->rs_total = 0UL;
#line 1440
    mdev->rs_failed = 0UL;
#line 1441
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1443
    tmp___7 = drbd_send_state(mdev);
#line 1443
    if (tmp___7 != 0) {
#line 1444
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Notified peer that I\'m now diskless.\n");
    } else {
#line 1446
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Sending state for being diskless failed\n");
    }
#line 1449
    put_ldev(mdev);
  } else {

  }
#line 1453
  if ((int )ns.ldv_35955.disk > 3 && (int )ns.ldv_35955.pdsk > 3) {
#line 1453
    tmp___8 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1453
    if (tmp___8 != 0) {
#line 1455
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1456
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1460
  if ((((int )os.ldv_35955.conn > 10 && (int )ns.ldv_35955.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1463
    resume_next_sg(mdev);
  } else {

  }
#line 1467
  if (((int )os.ldv_35955.disk <= 7 && (int )os.ldv_35955.conn > 15) && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1468
    drbd_send_state(mdev);
  } else {

  }
#line 1471
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1471
    tmp___9 = is_susp(ns);
#line 1471
    if (tmp___9 == 0) {
#line 1471
      if ((unsigned long )mdev->tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1472
        drbd_free_tl_hash(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1475
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1476
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1480
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1483
    if ((int )os.ldv_35955.aftr_isp != (int )ns.ldv_35955.aftr_isp) {
#line 1484
      resume_next_sg(mdev);
    } else {

    }
#line 1486
    tmp___10 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1486
    if (tmp___10 != 0) {
#line 1487
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1490
  drbd_md_sync(mdev);
#line 1491
  return;
}
}
#line 1494 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 1496
  thi = (struct drbd_thread *)arg;
#line 1497
  mdev = thi->mdev;
  restart: 
#line 1502
  retval = (*(thi->function))(thi);
#line 1504
  tmp = spinlock_check(& thi->t_lock);
#line 1504
  flags = _raw_spin_lock_irqsave(tmp);
#line 1516
  if ((unsigned int )thi->t_state == 3U) {
#line 1517
    tmp___0 = get_current();
#line 1517
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s\n",
              (char *)(& tmp___0->comm));
#line 1518
    thi->t_state = Running;
#line 1519
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1520
    goto restart;
  } else {

  }
#line 1523
  thi->task = 0;
#line 1524
  thi->t_state = None;
#line 1525
  __asm__  volatile   ("mfence": : : "memory");
#line 1526
  complete(& thi->stop);
#line 1527
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1529
  tmp___1 = get_current();
#line 1529
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Terminating %s\n",
            (char *)(& tmp___1->comm));
#line 1532
  ldv_module_put_1(& __this_module);
#line 1533
  return (retval);
}
}
#line 1536 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1539
  spinlock_check(& thi->t_lock);
#line 1539
  __raw_spin_lock_init(& thi->t_lock.ldv_5793.rlock, "&(&thi->t_lock)->rlock", & __key);
#line 1540
  thi->task = 0;
#line 1541
  thi->t_state = None;
#line 1542
  thi->function = func;
#line 1543
  thi->mdev = mdev;
#line 1544
  return;
}
}
#line 1546 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  struct task_struct *tmp___3 ;
  unsigned int tmp___4 ;
  long tmp___5 ;
  raw_spinlock_t *tmp___6 ;
  struct task_struct *tmp___7 ;
  struct task_struct *tmp___8 ;

  {
#line 1548
  mdev = thi->mdev;
#line 1552
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1559
  tmp = spinlock_check(& thi->t_lock);
#line 1559
  flags = _raw_spin_lock_irqsave(tmp);
#line 1561
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1563
  tmp___0 = get_current();
#line 1563
  tmp___1 = get_current();
#line 1563
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Starting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___1->comm), tmp___0->pid);
#line 1567
  tmp___2 = ldv_try_module_get_2(& __this_module);
#line 1567
  if (tmp___2 == 0) {
#line 1568
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to get module reference in drbd_thread_start\n");
#line 1569
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1570
    return (0);
  } else {

  }
#line 1573
  init_completion(& thi->stop);
#line 1574
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1574
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( thi->task == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1574);
  } else {

  }
#line 1575
  thi->reset_cpu_mask = 1;
#line 1576
  thi->t_state = Running;
#line 1577
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1578
  tmp___3 = get_current();
#line 1578
  flush_signals(tmp___3);
#line 1580
  tmp___4 = mdev_to_minor(mdev);
#line 1580
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___4, me);
#line 1583
  tmp___5 = IS_ERR((void const   *)nt);
#line 1583
  if (tmp___5 != 0L) {
#line 1584
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Couldn\'t start thread\n");
#line 1586
    ldv_module_put_3(& __this_module);
#line 1587
    return (0);
  } else {

  }
#line 1589
  tmp___6 = spinlock_check(& thi->t_lock);
#line 1589
  flags = _raw_spin_lock_irqsave(tmp___6);
#line 1590
  thi->task = nt;
#line 1591
  thi->t_state = Running;
#line 1592
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1593
  wake_up_process(nt);
#line 1594
  goto ldv_46020;
  case 2U: 
#line 1596
  thi->t_state = Restarting;
#line 1597
  tmp___7 = get_current();
#line 1597
  tmp___8 = get_current();
#line 1597
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Restarting %s thread (from %s [%d])\n",
            me, (char *)(& tmp___8->comm), tmp___7->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1603
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1604
  goto ldv_46020;
  }
  ldv_46020: ;
#line 1607
  return (1);
}
}
#line 1611 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  raw_spinlock_t *tmp ;
  struct task_struct *tmp___0 ;

  {
#line 1615
  ns = restart != 0 ? Restarting : Exiting;
#line 1618
  tmp = spinlock_check(& thi->t_lock);
#line 1618
  flags = _raw_spin_lock_irqsave(tmp);
#line 1620
  if ((unsigned int )thi->t_state == 0U) {
#line 1621
    spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1622
    if (restart != 0) {
#line 1623
      drbd_thread_start(thi);
    } else {

    }
#line 1624
    return;
  } else {

  }
#line 1627
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1628
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1629
      spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1630
      return;
    } else {

    }
#line 1633
    thi->t_state = ns;
#line 1634
    __asm__  volatile   ("mfence": : : "memory");
#line 1635
    init_completion(& thi->stop);
#line 1636
    tmp___0 = get_current();
#line 1636
    if ((unsigned long )thi->task != (unsigned long )tmp___0) {
#line 1637
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1641
  spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1643
  if (wait != 0) {
#line 1644
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1645
  return;
}
}
#line 1655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1660
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1660
  if (tmp != 0U) {
#line 1661
    return;
  } else {

  }
#line 1663
  tmp___0 = mdev_to_minor(mdev);
#line 1663
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1663
  ord = (int )(tmp___0 % tmp___1);
#line 1664
  cpu = -1;
#line 1664
  goto ldv_46041;
  ldv_46040: 
#line 1665
  tmp___2 = ord;
#line 1665
  ord = ord - 1;
#line 1665
  if (tmp___2 == 0) {
#line 1666
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1667
    return;
  } else {

  }
  ldv_46041: 
#line 1664
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1664
  cpu = (int )tmp___3;
#line 1664
  if (cpu < nr_cpu_ids) {
#line 1665
    goto ldv_46040;
  } else {

  }
#line 1671
  cpumask_setall(mdev->cpu_mask);
#line 1672
  return;
}
}
#line 1681 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;

  {
#line 1683
  tmp = get_current();
#line 1683
  p = tmp;
#line 1684
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1689
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1689
  if (_b != 0) {
#line 1689
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_thread_current_set_cpu", (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1689);
  } else {

  }
#line 1689
  if (_b != 0) {
#line 1690
    return;
  } else {

  }
#line 1691
  if (thi->reset_cpu_mask == 0) {
#line 1692
    return;
  } else {

  }
#line 1693
  thi->reset_cpu_mask = 0;
#line 1694
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1695
  return;
}
}
#line 1699 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header80 *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  int _b___0 ;
  __u16 tmp ;
  __u16 tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1705
  _b = (unsigned long )h == (unsigned long )((struct p_header80 *)0);
#line 1705
  if (_b != 0) {
#line 1705
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!h", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1705);
  } else {

  }
#line 1705
  if (_b != 0) {
#line 1705
    return (0);
  } else {

  }
#line 1706
  _b___0 = size == 0UL;
#line 1706
  if (_b___0 != 0) {
#line 1706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_cmd", (char *)"!size", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            1706);
  } else {

  }
#line 1706
  if (_b___0 != 0) {
#line 1706
    return (0);
  } else {

  }
#line 1708
  h->magic = 1728214147U;
#line 1709
  tmp = __fswab16((int )((__u16 )cmd));
#line 1709
  h->command = tmp;
#line 1710
  tmp___0 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1710
  h->length = tmp___0;
#line 1712
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1714
  ok = (size_t )sent == size;
#line 1715
  if (ok == 0) {
#line 1716
    tmp___1 = cmdname(cmd);
#line 1716
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "short sent %s size=%d sent=%d\n",
            tmp___1, (int )size, sent);
  } else {

  }
#line 1718
  return (ok);
}
}
#line 1724 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header80 *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1727
  ok = 0;
#line 1730
  if (use_data_socket != 0) {
#line 1731
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1732
    sock = mdev->data.socket;
  } else {
#line 1734
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1735
    sock = mdev->meta.socket;
  }
#line 1740
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1740
  if (tmp != 0L) {
#line 1741
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1743
  if (use_data_socket != 0) {
#line 1744
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1746
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1747
  return (ok);
}
}
#line 1750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header80 h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1756
  h.magic = 1728214147U;
#line 1757
  tmp = __fswab16((int )((__u16 )cmd));
#line 1757
  h.command = tmp;
#line 1758
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1758
  h.length = tmp___0;
#line 1760
  tmp___1 = drbd_get_data_sock(mdev);
#line 1760
  if (tmp___1 == 0) {
#line 1761
    return (0);
  } else {

  }
#line 1763
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1763
  ok = tmp___2 == 8;
#line 1765
  if (ok != 0) {
#line 1765
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1765
    if ((size_t )tmp___3 == size) {
#line 1765
      tmp___4 = 1;
    } else {
#line 1765
      tmp___4 = 0;
    }
  } else {
#line 1765
    tmp___4 = 0;
  }
#line 1765
  ok = tmp___4;
#line 1768
  drbd_put_data_sock(mdev);
#line 1770
  return (ok);
}
}
#line 1773 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_95 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  long tmp___6 ;

  {
#line 1778
  apv = mdev->agreed_pro_version;
#line 1780
  if (apv > 87) {
#line 1780
    if (apv == 88) {
#line 1780
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1780
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1780
      tmp___0 = apv <= 94 ? 140 : 156;
    }
#line 1780
    size = tmp___0;
  } else {
#line 1780
    size = 12;
  }
#line 1789
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1790
  sock = mdev->data.socket;
#line 1792
  tmp___6 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1792
  if (tmp___6 != 0L) {
#line 1793
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1795
    p = & mdev->data.sbuf.rs_param_95;
#line 1798
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1800
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1800
    p->rate = tmp___1;
#line 1801
    tmp___2 = __fswab32((__u32 )sc->c_plan_ahead);
#line 1801
    p->c_plan_ahead = tmp___2;
#line 1802
    tmp___3 = __fswab32((__u32 )sc->c_delay_target);
#line 1802
    p->c_delay_target = tmp___3;
#line 1803
    tmp___4 = __fswab32((__u32 )sc->c_fill_target);
#line 1803
    p->c_fill_target = tmp___4;
#line 1804
    tmp___5 = __fswab32((__u32 )sc->c_max_rate);
#line 1804
    p->c_max_rate = tmp___5;
#line 1806
    if (apv > 87) {
#line 1807
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1808
    if (apv > 88) {
#line 1809
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1811
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1813
    rv = 0;
  }
#line 1815
  mutex_unlock(& mdev->data.mutex);
#line 1817
  return (rv);
}
}
#line 1820 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int cf ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1825
  size = 32;
#line 1827
  if (mdev->agreed_pro_version > 86) {
#line 1828
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1828
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1832
  tmp___0 = kmalloc___4((size_t )size, 16U);
#line 1832
  p = (struct p_protocol *)tmp___0;
#line 1833
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1834
    return (0);
  } else {

  }
#line 1836
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1836
  p->protocol = tmp___1;
#line 1837
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1837
  p->after_sb_0p = tmp___2;
#line 1838
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1838
  p->after_sb_1p = tmp___3;
#line 1839
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1839
  p->after_sb_2p = tmp___4;
#line 1840
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1840
  p->two_primaries = tmp___5;
#line 1842
  cf = 0;
#line 1843
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1844
    cf = cf | 1;
  } else {

  }
#line 1845
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1846
    if (mdev->agreed_pro_version > 91) {
#line 1847
      cf = cf | 2;
    } else {
#line 1849
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "--dry-run is not supported by peer");
#line 1850
      kfree((void const   *)p);
#line 1851
      return (0);
    }
  } else {

  }
#line 1854
  tmp___6 = __fswab32((__u32 )cf);
#line 1854
  p->conn_flags = tmp___6;
#line 1856
  if (mdev->agreed_pro_version > 86) {
#line 1857
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1859
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header80 *)p, (size_t )size);
#line 1861
  kfree((void const   *)p);
#line 1862
  return (rv);
}
}
#line 1865 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1870
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1870
  if (tmp == 0) {
#line 1871
    return (1);
  } else {

  }
#line 1873
  i = 0;
#line 1873
  goto ldv_46107;
  ldv_46106: ;
#line 1874
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1874
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1874
    p.uuid[i] = tmp___0;
  } else {
#line 1874
    p.uuid[i] = 0ULL;
  }
#line 1873
  i = i + 1;
  ldv_46107: ;
#line 1873
  if (i <= 3) {
#line 1874
    goto ldv_46106;
  } else {

  }
#line 1876
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1877
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1877
  p.uuid[4] = tmp___1;
#line 1878
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1879
  tmp___2 = constant_test_bit(11U, (unsigned long const volatile   *)(& mdev->flags));
#line 1879
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1880
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 2009UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1881
  tmp___3 = __fswab64(uuid_flags);
#line 1881
  p.uuid[5] = tmp___3;
#line 1883
  put_ldev(mdev);
#line 1885
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header80 *)(& p), 56UL);
#line 1885
  return (tmp___4);
}
}
#line 1889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1891
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1891
  return (tmp);
}
}
#line 1894 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1896
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1896
  return (tmp);
}
}
#line 1900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1904
  tmp = __fswab64(val);
#line 1904
  p.uuid = tmp;
#line 1906
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header80 *)(& p), 16UL);
#line 1906
  return (tmp___0);
}
}
#line 1910 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply , enum dds_flags flags ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  unsigned int tmp___5 ;
  __u32 tmp___6 ;
  __u16 tmp___7 ;
  __u16 tmp___8 ;

  {
#line 1917
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1917
  if (tmp != 0) {
#line 1918
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1918
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              1918);
    } else {

    }
#line 1919
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1920
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1921
    q_order_type = drbd_queue_order_type(mdev);
#line 1922
    put_ldev(mdev);
  } else {
#line 1924
    d_size = 0UL;
#line 1925
    u_size = 0UL;
#line 1926
    q_order_type = 0;
  }
#line 1929
  tmp___0 = __fswab64((__u64 )d_size);
#line 1929
  p.d_size = tmp___0;
#line 1930
  tmp___1 = __fswab64((__u64 )u_size);
#line 1930
  p.u_size = tmp___1;
#line 1931
  if (trigger_reply == 0) {
#line 1931
    tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 1931
    tmp___3 = (__u64 )tmp___2;
  } else {
#line 1931
    tmp___3 = 0ULL;
  }
#line 1931
  tmp___4 = __fswab64(tmp___3);
#line 1931
  p.c_size = tmp___4;
#line 1932
  tmp___5 = queue_max_segment_size(mdev->rq_queue);
#line 1932
  tmp___6 = __fswab32(tmp___5);
#line 1932
  p.max_segment_size = tmp___6;
#line 1933
  tmp___7 = __fswab16((int )((__u16 )q_order_type));
#line 1933
  p.queue_order_type = tmp___7;
#line 1934
  tmp___8 = __fswab16((int )((__u16 )flags));
#line 1934
  p.dds_flags = tmp___8;
#line 1936
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header80 *)(& p), 40UL);
#line 1938
  return (ok);
}
}
#line 1945 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1949
  ok = 0;
#line 1953
  drbd_state_lock___0(mdev);
#line 1955
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1957
  tmp = __fswab32(mdev->state.i);
#line 1957
  p.state = tmp;
#line 1958
  sock = mdev->data.socket;
#line 1960
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1960
  if (tmp___0 != 0L) {
#line 1961
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header80 *)(& p), 12UL, 0U);
  } else {

  }
#line 1965
  mutex_unlock(& mdev->data.mutex);
#line 1967
  drbd_state_unlock(mdev);
#line 1968
  return (ok);
}
}
#line 1971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1976
  tmp = __fswab32(mask.i);
#line 1976
  p.mask = tmp;
#line 1977
  tmp___0 = __fswab32(val.i);
#line 1977
  p.val = tmp___0;
#line 1979
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header80 *)(& p), 16UL);
#line 1979
  return (tmp___1);
}
}
#line 1983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1987
  tmp = __fswab32((__u32 )retcode);
#line 1987
  p.retcode = tmp;
#line 1989
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header80 *)(& p),
                          12UL);
#line 1989
  return (tmp___0);
}
}
#line 1993 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 2006
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 2008
    return (0);
  } else {

  }
#line 2010
  if (c->bit_offset >= c->bm_bits) {
#line 2011
    return (0);
  } else {

  }
#line 2014
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 2015
  memset((void *)(& p->code), 0, 4087UL);
#line 2017
  plain_bits = 0UL;
#line 2022
  toggle = 2U;
  ldv_46161: ;
#line 2027
  if (toggle == 0U) {
#line 2027
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 2027
    tmp = tmp___0;
  } else {
#line 2027
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 2027
    tmp = tmp___1;
  }
#line 2029
  if (tmp == 0xffffffffffffffffUL) {
#line 2030
    tmp = c->bm_bits;
  } else {

  }
#line 2031
  rl = tmp - c->bit_offset;
#line 2033
  if (toggle == 2U) {
#line 2034
    if (rl == 0UL) {
#line 2037
      DCBP_set_start(p, 1);
#line 2039
      toggle = toggle == 0U;
#line 2040
      goto ldv_46159;
    } else {

    }
#line 2042
    DCBP_set_start(p, 0);
  } else {

  }
#line 2047
  if (rl == 0UL) {
#line 2048
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
            toggle, c->bit_offset);
#line 2050
    return (-1);
  } else {

  }
#line 2053
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 2054
  if (bits == -105) {
#line 2055
    goto ldv_46160;
  } else {

  }
#line 2056
  if (bits <= 0) {
#line 2057
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "error while encoding bitmap: %d\n",
            bits);
#line 2058
    return (0);
  } else {

  }
#line 2061
  toggle = toggle == 0U;
#line 2062
  plain_bits = plain_bits + rl;
#line 2063
  c->bit_offset = tmp;
  ldv_46159: ;
#line 2064
  if (c->bit_offset < c->bm_bits) {
#line 2065
    goto ldv_46161;
  } else {

  }
  ldv_46160: 
#line 2066
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 2068
  if ((unsigned long )(len << 3) > plain_bits) {
#line 2071
    c->bit_offset = c->bit_offset - plain_bits;
#line 2072
    bm_xfer_ctx_bit_to_word_offset(c);
#line 2073
    c->bit_offset = c->word_offset * 64UL;
#line 2074
    return (0);
  } else {

  }
#line 2079
  bm_xfer_ctx_bit_to_word_offset(c);
#line 2082
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 2084
  return ((int )len);
}
}
#line 2088 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_30994 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header80 *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 2091
  p = (struct p_compressed_bm *)h;
#line 2096
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 2098
  if (len < 0) {
#line 2099
    return (FAILED);
  } else {

  }
#line 2101
  if (len != 0) {
#line 2102
    DCBP_set_code(p, RLE_VLI_Bits);
#line 2103
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 2106
    c->packets[0] = c->packets[0] + 1U;
#line 2107
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 2109
    if (c->bit_offset >= c->bm_bits) {
#line 2110
      len = 0;
    } else {

    }
  } else {
#line 2114
    __min1 = 511UL;
#line 2114
    __min2 = c->bm_words - c->word_offset;
#line 2114
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 2115
    len = (int )((unsigned int )num_words * 8U);
#line 2116
    if (len != 0) {
#line 2117
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 2118
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 2120
    c->word_offset = c->word_offset + num_words;
#line 2121
    c->bit_offset = c->word_offset * 64UL;
#line 2123
    c->packets[1] = c->packets[1] + 1U;
#line 2124
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 2126
    if (c->bit_offset > c->bm_bits) {
#line 2127
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 2129
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 2131
  if (ok == 2) {
#line 2132
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 2133
  return ((enum ldv_30994 )ok);
}
}
#line 2137 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header80 *p ;
  int ret ;
  int _b ;
  unsigned long tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___3 ;
  size_t tmp___4 ;
  enum ldv_30994 tmp___5 ;

  {
#line 2143
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 2143
  if (_b != 0) {
#line 2143
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "_drbd_send_bitmap", (char *)"!mdev->bitmap", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2143);
  } else {

  }
#line 2143
  if (_b != 0) {
#line 2143
    return (0);
  } else {

  }
#line 2147
  tmp = __get_free_pages(16U, 0U);
#line 2147
  p = (struct p_header80 *)tmp;
#line 2148
  if ((unsigned long )p == (unsigned long )((struct p_header80 *)0)) {
#line 2149
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "failed to allocate one page buffer in %s\n",
            "_drbd_send_bitmap");
#line 2150
    return (0);
  } else {

  }
#line 2153
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2153
  if (tmp___2 != 0) {
#line 2154
    tmp___1 = drbd_md_test_flag(mdev->ldev, 8);
#line 2154
    if (tmp___1 != 0) {
#line 2155
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, MDF_FullSync was set.\n");
#line 2156
      drbd_bm_set_all(mdev);
#line 2157
      tmp___0 = drbd_bm_write(mdev);
#line 2157
      if (tmp___0 != 0) {
#line 2161
        dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to write bitmap to disk!\n");
      } else {
#line 2163
        drbd_md_clear_flag(mdev, 8);
#line 2164
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2167
    put_ldev(mdev);
  } else {

  }
#line 2170
  tmp___3 = drbd_bm_bits(mdev);
#line 2170
  tmp___4 = drbd_bm_words(mdev);
#line 2170
  __constr_expr_0.bm_bits = tmp___3;
#line 2170
  __constr_expr_0.bm_words = tmp___4;
#line 2170
  __constr_expr_0.bit_offset = 0UL;
#line 2170
  __constr_expr_0.word_offset = 0UL;
#line 2170
  __constr_expr_0.packets[0] = 0U;
#line 2170
  __constr_expr_0.packets[1] = 0U;
#line 2170
  __constr_expr_0.bytes[0] = 0U;
#line 2170
  __constr_expr_0.bytes[1] = 0U;
#line 2170
  c = __constr_expr_0;
  ldv_46188: 
#line 2176
  tmp___5 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2176
  ret = (int )tmp___5;
#line 2177
  if (ret == 0) {
#line 2178
    goto ldv_46188;
  } else {

  }
#line 2179
  free_pages((unsigned long )p, 0U);
#line 2180
  return (ret == 2);
}
}
#line 2183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2187
  tmp = drbd_get_data_sock(mdev);
#line 2187
  if (tmp == 0) {
#line 2188
    return (-1);
  } else {

  }
#line 2189
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2189
  err = tmp___0 == 0;
#line 2190
  drbd_put_data_sock(mdev);
#line 2191
  return (err);
}
}
#line 2194 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2199
  p.barrier = barrier_nr;
#line 2200
  tmp = __fswab32(set_size);
#line 2200
  p.set_size = tmp;
#line 2202
  if ((int )mdev->state.ldv_35955.conn <= 9) {
#line 2203
    return (0);
  } else {

  }
#line 2204
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header80 *)(& p), 16UL);
#line 2206
  return (ok);
}
}
#line 2217 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2225
  p.sector = sector;
#line 2226
  p.block_id = block_id;
#line 2227
  p.blksize = blksize;
#line 2228
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2228
  tmp___0 = __fswab32((__u32 )tmp);
#line 2228
  p.seq_num = tmp___0;
#line 2230
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_35955.conn <= 9) {
#line 2231
    return (0);
  } else {

  }
#line 2232
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header80 *)(& p), 32UL);
#line 2234
  return (ok);
}
}
#line 2240 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ,
                     int data_size ) 
{ 
  unsigned int tmp ;
  unsigned int tmp___0 ;
  __u32 tmp___1 ;
  int tmp___2 ;

  {
#line 2243
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2243
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 2243
    tmp___0 = tmp;
  } else {
#line 2243
    tmp___0 = 0U;
  }
#line 2243
  data_size = (int )((unsigned int )data_size - tmp___0);
#line 2245
  tmp___1 = __fswab32((__u32 )data_size);
#line 2245
  tmp___2 = _drbd_send_ack(mdev, cmd, dp->sector, tmp___1, dp->block_id);
#line 2245
  return (tmp___2);
}
}
#line 2249 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2252
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2252
  return (tmp);
}
}
#line 2261 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2264
  tmp = __fswab32(e->size);
#line 2264
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2264
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->ldv_43398.block_id);
#line 2264
  return (tmp___1);
}
}
#line 2272 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2275
  tmp = __fswab64(block_id);
#line 2275
  tmp___0 = __fswab32((__u32 )blksize);
#line 2275
  tmp___1 = __fswab64((__u64 )sector);
#line 2275
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2275
  return (tmp___2);
}
}
#line 2281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2287
  tmp = __fswab64((__u64 )sector);
#line 2287
  p.sector = tmp;
#line 2288
  p.block_id = block_id;
#line 2289
  tmp___0 = __fswab32((__u32 )size);
#line 2289
  p.blksize = tmp___0;
#line 2291
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header80 *)(& p),
                     32UL);
#line 2293
  return (ok);
}
}
#line 2296 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2304
  tmp = __fswab64((__u64 )sector);
#line 2304
  p.sector = tmp;
#line 2305
  p.block_id = 1728263026ULL;
#line 2306
  tmp___0 = __fswab32((__u32 )size);
#line 2306
  p.blksize = tmp___0;
#line 2308
  p.head.magic = 1728214147U;
#line 2309
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2309
  p.head.command = tmp___1;
#line 2310
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2310
  p.head.length = tmp___2;
#line 2312
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2314
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2314
  ok = tmp___3 == 32;
#line 2315
  if (ok != 0) {
#line 2315
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2315
    if (tmp___4 == digest_size) {
#line 2315
      tmp___5 = 1;
    } else {
#line 2315
      tmp___5 = 0;
    }
  } else {
#line 2315
    tmp___5 = 0;
  }
#line 2315
  ok = tmp___5;
#line 2317
  mutex_unlock(& mdev->data.mutex);
#line 2319
  return (ok);
}
}
#line 2322 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2327
  tmp = __fswab64((__u64 )sector);
#line 2327
  p.sector = tmp;
#line 2328
  p.block_id = 1728261953ULL;
#line 2329
  tmp___0 = __fswab32((__u32 )size);
#line 2329
  p.blksize = tmp___0;
#line 2331
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header80 *)(& p), 32UL);
#line 2333
  return (ok);
}
}
#line 2340 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;

  {
#line 2345
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2345
    tmp___0 = 1;
  } else {
#line 2345
    tmp = get_t_state(& mdev->asender);
#line 2345
    if ((unsigned int )tmp != 1U) {
#line 2345
      tmp___0 = 1;
    } else
#line 2345
    if ((int )mdev->state.ldv_35955.conn <= 9) {
#line 2345
      tmp___0 = 1;
    } else {
#line 2345
      tmp___0 = 0;
    }
  }
#line 2345
  drop_it = tmp___0;
#line 2350
  if (drop_it != 0) {
#line 2351
    return (1);
  } else {

  }
#line 2353
  mdev->ko_count = mdev->ko_count - 1U;
#line 2353
  drop_it = mdev->ko_count == 0U;
#line 2354
  if (drop_it == 0) {
#line 2355
    tmp___1 = get_current();
#line 2355
    tmp___2 = get_current();
#line 2355
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "[%s/%d] sock_sendmsg time expired, ko = %u\n",
            (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2357
    request_ping(mdev);
  } else {

  }
#line 2360
  return (drop_it);
}
}
#line 2384 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2387
  tmp = kmap(page);
#line 2387
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      msg_flags);
#line 2387
  sent = tmp___0;
#line 2388
  kunmap(page);
#line 2389
  if ((size_t )sent == size) {
#line 2390
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2391
  return ((size_t )sent == size);
}
}
#line 2394 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size , unsigned int msg_flags ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  struct thread_info *tmp___6 ;
  long tmp___7 ;

  {
#line 2397
  tmp = current_thread_info();
#line 2397
  oldfs = tmp->addr_limit;
#line 2399
  len = (int )size;
#line 2407
  if (disable_sendpage != 0) {
#line 2408
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2408
    return (tmp___0);
  } else {
#line 2407
    tmp___1 = page_count(page);
#line 2407
    if (tmp___1 <= 0) {
#line 2408
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2408
      return (tmp___0);
    } else {
#line 2407
      tmp___2 = PageSlab(page);
#line 2407
      if (tmp___2 != 0) {
#line 2408
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size, msg_flags);
#line 2408
        return (tmp___0);
      } else {

      }
    }
  }
#line 2410
  msg_flags = msg_flags | 16384U;
#line 2411
  drbd_update_congested(mdev);
#line 2412
  tmp___3 = current_thread_info();
#line 2412
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2412
  tmp___3->addr_limit = __constr_expr_0;
  ldv_46287: 
#line 2414
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, (int )msg_flags);
#line 2414
  sent = (int )tmp___4;
#line 2417
  if (sent == -11) {
#line 2418
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2418
    if (tmp___5 != 0) {
#line 2420
      goto ldv_46284;
    } else {
#line 2422
      goto ldv_46285;
    }
  } else {

  }
#line 2424
  if (sent <= 0) {
#line 2425
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s: size=%d len=%d sent=%d\n",
             "_drbd_send_page", (int )size, len, sent);
#line 2427
    goto ldv_46284;
  } else {

  }
#line 2429
  len = len - sent;
#line 2430
  offset = offset + sent;
  ldv_46285: ;
#line 2431
  if (len > 0) {
#line 2432
    goto ldv_46287;
  } else {

  }
  ldv_46284: 
#line 2432
  tmp___6 = current_thread_info();
#line 2432
  tmp___6->addr_limit = oldfs;
#line 2433
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2435
  ok = len == 0;
#line 2436
  tmp___7 = __builtin_expect(ok != 0, 1L);
#line 2436
  if (tmp___7 != 0L) {
#line 2437
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2438
  return (ok);
}
}
#line 2441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2446
  bvec = bio->bi_io_vec;
#line 2446
  i = 0;
#line 2446
  goto ldv_46295;
  ldv_46294: 
#line 2447
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                           (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2447
  if (tmp == 0) {
#line 2450
    return (0);
  } else {

  }
#line 2446
  bvec = bvec + 1;
#line 2446
  i = i + 1;
  ldv_46295: ;
#line 2446
  if ((int )bio->bi_vcnt > i) {
#line 2447
    goto ldv_46294;
  } else {

  }

#line 2452
  return (1);
}
}
#line 2455 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2460
  bvec = bio->bi_io_vec;
#line 2460
  i = 0;
#line 2460
  goto ldv_46304;
  ldv_46303: 
#line 2461
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len,
                        (int )bio->bi_vcnt + -1 == i ? 0U : 32768U);
#line 2461
  if (tmp == 0) {
#line 2464
    return (0);
  } else {

  }
#line 2460
  bvec = bvec + 1;
#line 2460
  i = i + 1;
  ldv_46304: ;
#line 2460
  if ((int )bio->bi_vcnt > i) {
#line 2461
    goto ldv_46303;
  } else {

  }

#line 2466
  return (1);
}
}
#line 2469 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct page *page ;
  unsigned int len ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  struct page *tmp ;
  int tmp___0 ;
  struct page *tmp___1 ;

  {
#line 2471
  page = e->pages;
#line 2472
  len = e->size;
#line 2474
  goto ldv_46318;
  ldv_46317: 
#line 2475
  __min1 = len;
#line 2475
  __min2 = 4096U;
#line 2475
  l = __min1 < __min2 ? __min1 : __min2;
#line 2476
  tmp = page_chain_next(page);
#line 2476
  tmp___0 = _drbd_send_page(mdev, page, 0, (size_t )l, (unsigned long )tmp != (unsigned long )((struct page *)0) ? 32768U : 0U);
#line 2476
  if (tmp___0 == 0) {
#line 2478
    return (0);
  } else {

  }
#line 2479
  len = len - l;
#line 2474
  page = page_chain_next(page);
  ldv_46318: ;
#line 2474
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2474
    tmp___1 = page_chain_next(page);
#line 2474
    __builtin_prefetch((void const   *)tmp___1);
#line 2474
    if (1 != 0) {
#line 2475
      goto ldv_46317;
    } else {
#line 2477
      goto ldv_46319;
    }
  } else {

  }
  ldv_46319: ;
#line 2481
  return (1);
}
}
#line 2484 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static u32 bio_flags_to_wire(struct drbd_conf *mdev , unsigned long bi_rw ) 
{ 


  {
#line 2486
  if (mdev->agreed_pro_version > 94) {
#line 2487
    return ((u32 )((((((bi_rw & 32UL) != 0UL ? 2 : 0) | ((bi_rw & 512UL) != 0UL ? 8 : 0)) | ((bi_rw & 16384UL) != 0UL ? 16 : 0)) | ((bi_rw & 33554432UL) != 0UL ? 32 : 0)) | ((bi_rw & 128UL) != 0UL ? 64 : 0)));
  } else {
#line 2493
    return ((bi_rw & 544UL) != 0UL ? 2U : 0U);
  }
}
}
#line 2499 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u32 tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int tmp___7 ;

  {
#line 2501
  ok = 1;
#line 2503
  dp_flags = 0U;
#line 2507
  tmp = drbd_get_data_sock(mdev);
#line 2507
  if (tmp == 0) {
#line 2508
    return (0);
  } else {

  }
#line 2510
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2510
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2510
    dgs = (int )tmp___0;
  } else {
#line 2510
    dgs = 0;
  }
#line 2513
  if (req->size <= 32768U) {
#line 2514
    p.head.h80.magic = 1728214147U;
#line 2515
    p.head.h80.command = 0U;
#line 2516
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2516
    p.head.h80.length = tmp___1;
  } else {
#line 2519
    p.head.h95.magic = 23171U;
#line 2520
    p.head.h95.command = 0U;
#line 2521
    tmp___2 = __fswab32((req->size + (__u32 )dgs) + 24U);
#line 2521
    p.head.h95.length = tmp___2;
  }
#line 2525
  tmp___3 = __fswab64((__u64 )req->sector);
#line 2525
  p.sector = tmp___3;
#line 2526
  p.block_id = (u64 )req;
#line 2527
  tmp___4 = atomic_add_return(1, & mdev->packet_seq);
#line 2527
  req->seq_num = tmp___4;
#line 2527
  tmp___5 = __fswab32((__u32 )tmp___4);
#line 2527
  p.seq_num = tmp___5;
#line 2530
  dp_flags = bio_flags_to_wire(mdev, (req->master_bio)->bi_rw);
#line 2532
  if ((int )mdev->state.ldv_35955.conn > 15 && (int )mdev->state.ldv_35955.conn <= 21) {
#line 2534
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2536
  tmp___6 = __fswab32(dp_flags);
#line 2536
  p.dp_flags = tmp___6;
#line 2537
  set_bit(4U, (unsigned long volatile   *)(& mdev->flags));
#line 2538
  tmp___7 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2538
  ok = tmp___7 == 32;
#line 2540
  if (ok != 0 && dgs != 0) {
#line 2541
    dgb = mdev->int_dig_out;
#line 2542
    drbd_csum_bio(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2543
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2545
  if (ok != 0) {
#line 2546
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2547
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2549
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2552
  drbd_put_data_sock(mdev);
#line 2554
  return (ok);
}
}
#line 2561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  __u32 tmp___3 ;
  __u64 tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;

  {
#line 2569
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2569
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2569
    dgs = (int )tmp;
  } else {
#line 2569
    dgs = 0;
  }
#line 2572
  if (e->size <= 32768U) {
#line 2573
    p.head.h80.magic = 1728214147U;
#line 2574
    tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2574
    p.head.h80.command = tmp___0;
#line 2575
    tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2575
    p.head.h80.length = tmp___1;
  } else {
#line 2578
    p.head.h95.magic = 23171U;
#line 2579
    tmp___2 = __fswab16((int )((__u16 )cmd));
#line 2579
    p.head.h95.command = tmp___2;
#line 2580
    tmp___3 = __fswab32((e->size + (__u32 )dgs) + 24U);
#line 2580
    p.head.h95.length = tmp___3;
  }
#line 2584
  tmp___4 = __fswab64((__u64 )e->sector);
#line 2584
  p.sector = tmp___4;
#line 2585
  p.block_id = e->ldv_43398.block_id;
#line 2592
  tmp___5 = drbd_get_data_sock(mdev);
#line 2592
  if (tmp___5 == 0) {
#line 2593
    return (0);
  } else {

  }
#line 2595
  tmp___6 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, dgs != 0 ? 32768U : 0U);
#line 2595
  ok = tmp___6 == 32;
#line 2596
  if (ok != 0 && dgs != 0) {
#line 2597
    dgb = mdev->int_dig_out;
#line 2598
    drbd_csum_ee(mdev, mdev->integrity_w_tfm, e, dgb);
#line 2599
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 0U);
  } else {

  }
#line 2601
  if (ok != 0) {
#line 2602
    ok = _drbd_send_zc_ee(mdev, e);
  } else {

  }
#line 2604
  drbd_put_data_sock(mdev);
#line 2606
  return (ok);
}
}
#line 2625 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  struct task_struct *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2630
  sent = 0;
#line 2632
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2633
    return (-1000);
  } else {

  }
#line 2637
  iov.iov_base = buf;
#line 2638
  iov.iov_len = size;
#line 2640
  msg.msg_name = 0;
#line 2641
  msg.msg_namelen = 0;
#line 2642
  msg.msg_control = 0;
#line 2643
  msg.msg_controllen = 0UL;
#line 2644
  msg.msg_flags = msg_flags | 16384U;
#line 2646
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2647
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2648
    drbd_update_congested(mdev);
  } else {

  }
  ldv_46355: 
#line 2660
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2661
  if (rv == -11) {
#line 2662
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2662
    if (tmp != 0) {
#line 2663
      goto ldv_46353;
    } else {
#line 2665
      goto ldv_46354;
    }
  } else {

  }
#line 2667
  if (rv == 0) {
#line 2667
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( rv != 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2667);
  } else {

  }
#line 2668
  if (rv == -4) {
#line 2669
    tmp___0 = get_current();
#line 2669
    flush_signals(tmp___0);
#line 2670
    rv = 0;
  } else {

  }
#line 2672
  if (rv < 0) {
#line 2673
    goto ldv_46353;
  } else {

  }
#line 2674
  sent = sent + rv;
#line 2675
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2676
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_46354: ;
#line 2677
  if ((size_t )sent < size) {
#line 2678
    goto ldv_46355;
  } else {

  }
  ldv_46353: ;
#line 2679
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2680
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2682
  if (rv <= 0) {
#line 2683
    if (rv != -11) {
#line 2684
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%s_sendmsg returned %d\n",
              (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
              rv);
#line 2687
      val.i = 0U;
#line 2687
      val.ldv_35955.conn = 4U;
#line 2687
      mask.i = 0U;
#line 2687
      mask.ldv_35955.conn = 31U;
#line 2687
      drbd_force_state(mdev, mask, val);
    } else {
#line 2689
      val___0.i = 0U;
#line 2689
      val___0.ldv_35955.conn = 3U;
#line 2689
      mask___0.i = 0U;
#line 2689
      mask___0.ldv_35955.conn = 31U;
#line 2689
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2692
  return (sent);
}
}
#line 2695 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;
  raw_spinlock_t *tmp ;

  {
#line 2697
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2699
  rv = 0;
#line 2701
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2702
  tmp = spinlock_check(& mdev->req_lock);
#line 2702
  flags = _raw_spin_lock_irqsave(tmp);
#line 2706
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2707
    if ((mode & 2U) != 0U) {
#line 2708
      rv = -30;
    } else
#line 2709
    if (allow_oos == 0) {
#line 2710
      rv = -124;
    } else {

    }
  } else {

  }
#line 2713
  if (rv == 0) {
#line 2714
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2715
  spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2716
  mutex_unlock(& drbd_main_mutex);
#line 2718
  return (rv);
}
}
#line 2721 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2723
  mdev = (struct drbd_conf *)gd->private_data;
#line 2724
  mutex_lock_nested(& drbd_main_mutex, 0U);
#line 2725
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2726
  mutex_unlock(& drbd_main_mutex);
#line 2727
  return (0);
}
}
#line 2730 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  int tmp ;
  int tmp___0 ;

  {
#line 2732
  mdev = (struct drbd_conf *)q->queuedata;
#line 2735
  spin_lock_irq(q->queue_lock);
#line 2736
  blk_remove_plug(q);
#line 2737
  spin_unlock_irq(q->queue_lock);
#line 2740
  spin_lock_irq(& mdev->req_lock);
#line 2741
  if ((int )mdev->state.ldv_35955.pdsk > 3 && (int )mdev->state.ldv_35955.conn > 9) {
#line 2742
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 2742
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
              2742);
    } else {

    }
#line 2743
    tmp___0 = test_and_clear_bit(4, (unsigned long volatile   *)(& mdev->flags));
#line 2743
    if (tmp___0 != 0) {
#line 2748
      tmp = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2748
      if (tmp != 0) {
#line 2749
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2753
  spin_unlock_irq(& mdev->req_lock);
#line 2755
  if ((int )mdev->state.ldv_35955.disk > 3) {
#line 2756
    drbd_kick_lo(mdev);
  } else {

  }
#line 2757
  return;
}
}
#line 2759 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct syncer_conf __constr_expr_0 ;
  union drbd_state __constr_expr_1 ;

  {
#line 2763
  __constr_expr_0.rate = 250;
#line 2763
  __constr_expr_0.after = -1;
#line 2763
  __constr_expr_0.al_extents = 127;
#line 2763
  __constr_expr_0.verify_alg[0] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[1] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[2] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[3] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[4] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[5] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[6] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[7] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[8] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[9] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[10] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[11] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[12] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[13] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[14] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[15] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[16] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[17] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[18] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[19] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[20] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[21] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[22] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[23] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[24] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[25] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[26] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[27] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[28] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[29] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[30] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[31] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[32] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[33] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[34] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[35] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[36] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[37] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[38] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[39] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[40] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[41] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[42] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[43] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[44] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[45] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[46] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[47] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[48] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[49] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[50] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[51] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[52] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[53] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[54] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[55] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[56] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[57] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[58] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[59] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[60] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[61] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[62] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg[63] = (unsigned char)0;
#line 2763
  __constr_expr_0.verify_alg_len = 0;
#line 2763
  __constr_expr_0.cpu_mask[0] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[1] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[2] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[3] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[4] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[5] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[6] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[7] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[8] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[9] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[10] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[11] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[12] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[13] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[14] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[15] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[16] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[17] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[18] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[19] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[20] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[21] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[22] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[23] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[24] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[25] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[26] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[27] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[28] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[29] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[30] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask[31] = (unsigned char)0;
#line 2763
  __constr_expr_0.cpu_mask_len = 0;
#line 2763
  __constr_expr_0.csums_alg[0] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[1] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[2] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[3] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[4] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[5] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[6] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[7] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[8] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[9] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[10] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[11] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[12] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[13] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[14] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[15] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[16] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[17] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[18] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[19] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[20] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[21] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[22] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[23] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[24] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[25] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[26] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[27] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[28] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[29] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[30] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[31] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[32] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[33] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[34] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[35] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[36] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[37] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[38] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[39] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[40] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[41] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[42] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[43] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[44] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[45] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[46] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[47] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[48] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[49] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[50] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[51] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[52] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[53] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[54] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[55] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[56] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[57] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[58] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[59] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[60] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[61] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[62] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg[63] = (unsigned char)0;
#line 2763
  __constr_expr_0.csums_alg_len = 0;
#line 2763
  __constr_expr_0.use_rle = 0U;
#line 2763
  __constr_expr_0.on_no_data = 0;
#line 2763
  __constr_expr_0.c_plan_ahead = 0;
#line 2763
  __constr_expr_0.c_delay_target = 10;
#line 2763
  __constr_expr_0.c_fill_target = 0;
#line 2763
  __constr_expr_0.c_max_rate = 102400;
#line 2763
  __constr_expr_0.c_min_rate = 4096;
#line 2763
  mdev->sync_conf = __constr_expr_0;
#line 2781
  __constr_expr_1.ldv_35955.role = 2U;
#line 2781
  __constr_expr_1.ldv_35955.peer = 0U;
#line 2781
  __constr_expr_1.ldv_35955.conn = 0U;
#line 2781
  __constr_expr_1.ldv_35955.disk = 0U;
#line 2781
  __constr_expr_1.ldv_35955.pdsk = 6U;
#line 2781
  __constr_expr_1.ldv_35955.susp = 0U;
#line 2781
  __constr_expr_1.ldv_35955.aftr_isp = (unsigned char)0;
#line 2781
  __constr_expr_1.ldv_35955.peer_isp = (unsigned char)0;
#line 2781
  __constr_expr_1.ldv_35955.user_isp = (unsigned char)0;
#line 2781
  __constr_expr_1.ldv_35955.susp_nod = 0U;
#line 2781
  __constr_expr_1.ldv_35955.susp_fen = 0U;
#line 2781
  __constr_expr_1.ldv_35955._pad = (unsigned short)0;
#line 2781
  mdev->state = __constr_expr_1;
#line 2782
  return;
}
}
#line 2793 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;
  struct lock_class_key __key___16 ;

  {
#line 2798
  drbd_set_defaults(mdev);
#line 2800
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2801
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2802
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2803
  atomic_set(& mdev->unacked_cnt, 0);
#line 2804
  atomic_set(& mdev->local_cnt, 0);
#line 2805
  atomic_set(& mdev->net_cnt, 0);
#line 2806
  atomic_set(& mdev->packet_seq, 0);
#line 2807
  atomic_set(& mdev->pp_in_use, 0);
#line 2808
  atomic_set(& mdev->pp_in_use_by_net, 0);
#line 2809
  atomic_set(& mdev->rs_sect_in, 0);
#line 2810
  atomic_set(& mdev->rs_sect_ev, 0);
#line 2812
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2813
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2814
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2815
  sema_init(& mdev->data.work.s, 0);
#line 2816
  sema_init(& mdev->meta.work.s, 0);
#line 2817
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2819
  spinlock_check(& mdev->data.work.q_lock);
#line 2819
  __raw_spin_lock_init(& mdev->data.work.q_lock.ldv_5793.rlock, "&(&mdev->data.work.q_lock)->rlock",
                       & __key___3);
#line 2820
  spinlock_check(& mdev->meta.work.q_lock);
#line 2820
  __raw_spin_lock_init(& mdev->meta.work.q_lock.ldv_5793.rlock, "&(&mdev->meta.work.q_lock)->rlock",
                       & __key___4);
#line 2822
  spinlock_check(& mdev->al_lock);
#line 2822
  __raw_spin_lock_init(& mdev->al_lock.ldv_5793.rlock, "&(&mdev->al_lock)->rlock",
                       & __key___5);
#line 2823
  spinlock_check(& mdev->req_lock);
#line 2823
  __raw_spin_lock_init(& mdev->req_lock.ldv_5793.rlock, "&(&mdev->req_lock)->rlock",
                       & __key___6);
#line 2824
  spinlock_check(& mdev->peer_seq_lock);
#line 2824
  __raw_spin_lock_init(& mdev->peer_seq_lock.ldv_5793.rlock, "&(&mdev->peer_seq_lock)->rlock",
                       & __key___7);
#line 2825
  spinlock_check(& mdev->epoch_lock);
#line 2825
  __raw_spin_lock_init(& mdev->epoch_lock.ldv_5793.rlock, "&(&mdev->epoch_lock)->rlock",
                       & __key___8);
#line 2827
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2828
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2829
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2830
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2831
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2832
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2833
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2834
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2835
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2836
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2837
  INIT_LIST_HEAD(& mdev->go_diskless.list);
#line 2838
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2839
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2841
  mdev->resync_work.cb = & w_resync_inactive;
#line 2842
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2843
  mdev->go_diskless.cb = & w_go_diskless;
#line 2844
  mdev->md_sync_work.cb = & w_md_sync;
#line 2845
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2846
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2847
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2848
  mdev->resync_timer.function = & resync_timer_fn;
#line 2849
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2850
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2851
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2853
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2854
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2855
  __init_waitqueue_head(& mdev->net_cnt_wait, & __key___13);
#line 2856
  __init_waitqueue_head(& mdev->ee_wait, & __key___14);
#line 2857
  __init_waitqueue_head(& mdev->al_wait, & __key___15);
#line 2858
  __init_waitqueue_head(& mdev->seq_wait, & __key___16);
#line 2860
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2861
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2862
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2864
  mdev->agreed_pro_version = 95;
#line 2865
  mdev->write_ordering = WO_bdev_flush;
#line 2866
  mdev->resync_wenr = 4294967295U;
#line 2867
  return;
}
}
#line 2869 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  int i ;
  int tmp ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  unsigned int tmp___2 ;
  unsigned int tmp___3 ;
  unsigned int tmp___4 ;
  unsigned int tmp___5 ;
  sector_t tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;

  {
#line 2872
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2873
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: receiver t_state == %d expected 0.\n",
            (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2877
  tmp___0 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2877
  if (tmp___0 != 0) {
#line 2878
    tmp = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2878
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "epoch_size:%d\n",
            tmp);
  } else {

  }
#line 2879
  tmp___9 = 0UL;
#line 2879
  mdev->rs_failed = tmp___9;
#line 2879
  tmp___8 = tmp___9;
#line 2879
  mdev->rs_total = tmp___8;
#line 2879
  tmp___7 = tmp___8;
#line 2879
  mdev->rs_start = tmp___7;
#line 2879
  tmp___6 = tmp___7;
#line 2879
  mdev->p_size = tmp___6;
#line 2879
  tmp___5 = (unsigned int )tmp___6;
#line 2879
  mdev->writ_cnt = tmp___5;
#line 2879
  tmp___4 = tmp___5;
#line 2879
  mdev->send_cnt = tmp___4;
#line 2879
  tmp___3 = tmp___4;
#line 2879
  mdev->recv_cnt = tmp___3;
#line 2879
  tmp___2 = tmp___3;
#line 2879
  mdev->read_cnt = tmp___2;
#line 2879
  tmp___1 = tmp___2;
#line 2879
  mdev->bm_writ_cnt = tmp___1;
#line 2879
  mdev->al_writ_cnt = tmp___1;
#line 2889
  mdev->rs_last_events = 0;
#line 2890
  mdev->rs_last_sect_ev = 0;
#line 2891
  i = 0;
#line 2891
  goto ldv_46414;
  ldv_46413: 
#line 2892
  mdev->rs_mark_left[i] = 0UL;
#line 2893
  mdev->rs_mark_time[i] = 0UL;
#line 2891
  i = i + 1;
  ldv_46414: ;
#line 2891
  if (i <= 7) {
#line 2892
    goto ldv_46413;
  } else {

  }

#line 2895
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2895
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->net_conf == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2895);
  } else {

  }
#line 2897
  drbd_set_my_capacity(mdev, 0UL);
#line 2898
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2900
    drbd_bm_resize(mdev, 0UL, 1);
#line 2901
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2904
  drbd_free_resources(mdev);
#line 2905
  clear_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 2911
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2911
  if (tmp___10 == 0) {
#line 2911
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2911);
  } else {

  }
#line 2912
  tmp___11 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2912
  if (tmp___11 == 0) {
#line 2912
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2912);
  } else {

  }
#line 2913
  tmp___12 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2913
  if (tmp___12 == 0) {
#line 2913
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2913);
  } else {

  }
#line 2914
  tmp___13 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2914
  if (tmp___13 == 0) {
#line 2914
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2914);
  } else {

  }
#line 2915
  tmp___14 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2915
  if (tmp___14 == 0) {
#line 2915
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2915);
  } else {

  }
#line 2916
  tmp___15 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2916
  if (tmp___15 == 0) {
#line 2916
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2916);
  } else {

  }
#line 2917
  tmp___16 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2917
  if (tmp___16 == 0) {
#line 2917
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2917);
  } else {

  }
#line 2918
  tmp___17 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2918
  if (tmp___17 == 0) {
#line 2918
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2918);
  } else {

  }
#line 2919
  tmp___18 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2919
  if (tmp___18 == 0) {
#line 2919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2919);
  } else {

  }
#line 2920
  tmp___19 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2920
  if (tmp___19 == 0) {
#line 2920
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2920);
  } else {

  }
#line 2921
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->go_diskless.list));
#line 2921
  if (tmp___20 == 0) {
#line 2921
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->go_diskless.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            2921);
  } else {

  }
#line 2922
  return;
}
}
#line 2925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2929
  goto ldv_46421;
  ldv_46420: 
#line 2930
  page = drbd_pp_pool;
#line 2931
  drbd_pp_pool = (struct page *)page->ldv_12266.ldv_12263.private;
#line 2932
  __free_pages(page, 0U);
#line 2933
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_46421: ;
#line 2929
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2930
    goto ldv_46420;
  } else {

  }

#line 2938
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2939
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2940
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2941
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2942
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2943
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2944
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2945
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2946
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2947
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2948
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2949
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2951
  drbd_ee_mempool = 0;
#line 2952
  drbd_request_mempool = 0;
#line 2953
  drbd_ee_cache = 0;
#line 2954
  drbd_request_cache = 0;
#line 2955
  drbd_bm_ext_cache = 0;
#line 2956
  drbd_al_ext_cache = 0;
#line 2958
  return;
}
}
#line 2961 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2964
  number = (int const   )(minor_count * 32U);
#line 2968
  drbd_request_mempool = 0;
#line 2969
  drbd_ee_cache = 0;
#line 2970
  drbd_request_cache = 0;
#line 2971
  drbd_bm_ext_cache = 0;
#line 2972
  drbd_al_ext_cache = 0;
#line 2973
  drbd_pp_pool = 0;
#line 2976
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2978
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2979
    goto Enomem;
  } else {

  }
#line 2981
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2983
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2984
    goto Enomem;
  } else {

  }
#line 2986
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2988
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2989
    goto Enomem;
  } else {

  }
#line 2991
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2993
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2994
    goto Enomem;
  } else {

  }
#line 2997
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2999
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 3000
    goto Enomem;
  } else {

  }
#line 3002
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 3004
  if ((unsigned long )drbd_ee_mempool == (unsigned long )((mempool_t *)0)) {
#line 3005
    goto Enomem;
  } else {

  }
#line 3008
  spinlock_check(& drbd_pp_lock);
#line 3008
  __raw_spin_lock_init(& drbd_pp_lock.ldv_5793.rlock, "&(&drbd_pp_lock)->rlock", & __key);
#line 3010
  i = 0;
#line 3010
  goto ldv_46432;
  ldv_46431: 
#line 3011
  page = alloc_pages(131282U, 0U);
#line 3012
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 3013
    goto Enomem;
  } else {

  }
#line 3014
  page->ldv_12266.ldv_12263.private = (unsigned long )drbd_pp_pool;
#line 3015
  drbd_pp_pool = page;
#line 3010
  i = i + 1;
  ldv_46432: ;
#line 3010
  if (i < number) {
#line 3011
    goto ldv_46431;
  } else {

  }
#line 3017
  drbd_pp_vacant = number;
#line 3019
  return (0);
  Enomem: 
#line 3022
  drbd_destroy_mempools();
#line 3023
  return (-12);
}
}
#line 3026 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 3033
  return (0);
}
}
#line 3036 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 3040 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;

  {
#line 3044
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 3045
  if (rr != 0) {
#line 3046
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in active list found!\n",
            rr);
  } else {

  }
#line 3048
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 3049
  if (rr != 0) {
#line 3050
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in sync list found!\n",
            rr);
  } else {

  }
#line 3052
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 3053
  if (rr != 0) {
#line 3054
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in read list found!\n",
            rr);
  } else {

  }
#line 3056
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 3057
  if (rr != 0) {
#line 3058
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in done list found!\n",
            rr);
  } else {

  }
#line 3060
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 3061
  if (rr != 0) {
#line 3062
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "%d EEs in net list found!\n",
            rr);
  } else {

  }
#line 3063
  return;
}
}
#line 3067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  struct list_head *lp ;
  int _b ;
  int tmp___0 ;

  {
#line 3069
  tmp = minor_to_mdev(minor);
#line 3069
  mdev = tmp;
#line 3071
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3072
    return;
  } else {

  }
#line 3075
  if (mdev->open_cnt != 0) {
#line 3076
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open_cnt = %d in %s:%u",
            mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3077);
  } else {

  }
#line 3079
  tmp___0 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 3079
  _b = tmp___0 == 0;
#line 3079
  if (_b != 0) {
#line 3079
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_delete_device", (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3079);
  } else {

  }
#line 3079
  if (_b != 0) {
#line 3081
    lp = mdev->data.work.q.next;
#line 3081
    goto ldv_46453;
    ldv_46452: 
#line 3082
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "lp = %p\n",
            lp);
#line 3081
    lp = lp->next;
    ldv_46453: 
#line 3081
    __builtin_prefetch((void const   *)lp->next);
#line 3081
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 3082
      goto ldv_46452;
    } else {

    }

  } else {

  }
#line 3087
  del_gendisk(mdev->vdisk);
#line 3092
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 3093
    bdput(mdev->this_bdev);
  } else {

  }
#line 3095
  drbd_free_resources(mdev);
#line 3097
  drbd_release_ee_lists(mdev);
#line 3100
  kfree((void const   *)mdev->ee_hash);
#line 3106
  lc_destroy(mdev->act_log);
#line 3107
  lc_destroy(mdev->resync);
#line 3109
  kfree((void const   *)mdev->p_uuid);
#line 3112
  kfree((void const   *)mdev->int_dig_out);
#line 3113
  kfree((void const   *)mdev->int_dig_in);
#line 3114
  kfree((void const   *)mdev->int_dig_vv);
#line 3119
  drbd_free_mdev(mdev);
#line 3120
  return;
}
}
#line 3122 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 3126
  unregister_reboot_notifier(& drbd_notifier);
#line 3128
  drbd_nl_cleanup();
#line 3130
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 3131
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 3132
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 3133
    i = minor_count;
#line 3134
    goto ldv_46460;
    ldv_46459: 
#line 3135
    drbd_delete_device(i);
    ldv_46460: 
#line 3134
    tmp = i;
#line 3134
    i = i - 1U;
#line 3134
    if (tmp != 0U) {
#line 3135
      goto ldv_46459;
    } else {

    }
#line 3136
    drbd_destroy_mempools();
  } else {

  }
#line 3139
  kfree((void const   *)minor_table);
#line 3141
  unregister_blkdev(147U, "drbd");
#line 3143
  printk("<6>drbd: module cleanup done.\n");
#line 3144
  return;
}
}
#line 3153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3155
  mdev = (struct drbd_conf *)congested_data;
#line 3157
  reason = 45;
#line 3158
  r = 0;
#line 3160
  tmp = __inc_ap_bio_cond___0(mdev);
#line 3160
  if (tmp == 0) {
#line 3162
    r = bdi_bits;
#line 3163
    reason = 100;
#line 3164
    goto out;
  } else {

  }
#line 3167
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3167
  if (tmp___0 != 0) {
#line 3168
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 3169
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 3170
    put_ldev(mdev);
#line 3171
    if (r != 0) {
#line 3172
      reason = 98;
    } else {

    }
  } else {

  }
#line 3175
  if ((bdi_bits & 4) != 0) {
#line 3175
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 3175
    if (tmp___1 != 0) {
#line 3176
      r = r | 4;
#line 3177
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 3181
  mdev->congestion_reason = reason;
#line 3182
  return (r);
}
}
#line 3185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 3192
  tmp = kzalloc___2(4560UL, 208U);
#line 3192
  mdev = (struct drbd_conf *)tmp;
#line 3193
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 3194
    return (0);
  } else {

  }
#line 3195
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 3195
  if (tmp___0) {
#line 3195
    tmp___1 = 0;
  } else {
#line 3195
    tmp___1 = 1;
  }
#line 3195
  if (tmp___1) {
#line 3196
    goto out_no_cpumask;
  } else {

  }
#line 3198
  mdev->minor = minor;
#line 3200
  drbd_init_set_defaults(mdev);
#line 3202
  q = blk_alloc_queue(208U);
#line 3203
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 3204
    goto out_no_q;
  } else {

  }
#line 3205
  mdev->rq_queue = q;
#line 3206
  q->queuedata = (void *)mdev;
#line 3208
  disk = alloc_disk(1);
#line 3209
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 3210
    goto out_no_disk;
  } else {

  }
#line 3211
  mdev->vdisk = disk;
#line 3213
  set_disk_ro(disk, 1);
#line 3215
  disk->queue = q;
#line 3216
  disk->major = 147;
#line 3217
  disk->first_minor = (int )minor;
#line 3218
  disk->fops = & drbd_ops;
#line 3219
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 3220
  disk->private_data = (void *)mdev;
#line 3222
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3224
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3226
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3227
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3229
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3230
  blk_queue_max_segment_size(q, 131072U);
#line 3231
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3232
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3233
  q->queue_lock = & mdev->req_lock;
#line 3235
  q->unplug_fn = & drbd_unplug_fn;
#line 3237
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3238
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3239
    goto out_no_io_page;
  } else {

  }
#line 3241
  tmp___2 = drbd_bm_init(mdev);
#line 3241
  if (tmp___2 != 0) {
#line 3242
    goto out_no_bitmap;
  } else {

  }
#line 3244
  tmp___3 = tl_init(mdev);
#line 3244
  if (tmp___3 == 0) {
#line 3245
    goto out_no_tl;
  } else {

  }
#line 3247
  tmp___4 = kzalloc___2(120UL, 208U);
#line 3247
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3248
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3249
    goto out_no_app_reads;
  } else {

  }
#line 3251
  tmp___5 = kzalloc___2(40UL, 208U);
#line 3251
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3252
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3253
    goto out_no_epoch;
  } else {

  }
#line 3255
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3256
  mdev->epochs = 1U;
#line 3258
  return (mdev);
  out_no_epoch: 
#line 3263
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3265
  tl_cleanup(mdev);
  out_no_tl: 
#line 3267
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3269
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3271
  put_disk(disk);
  out_no_disk: 
#line 3273
  blk_cleanup_queue(q);
  out_no_q: 
#line 3275
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3277
  kfree((void const   *)mdev);
#line 3278
  return (0);
}
}
#line 3283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3285
  kfree((void const   *)mdev->current_epoch);
#line 3286
  kfree((void const   *)mdev->app_reads_hash);
#line 3287
  tl_cleanup(mdev);
#line 3288
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3289
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3290
  __free_pages(mdev->md_io_page, 0U);
#line 3291
  put_disk(mdev->vdisk);
#line 3292
  blk_cleanup_queue(mdev->rq_queue);
#line 3293
  free_cpumask_var(mdev->cpu_mask);
#line 3294
  kfree((void const   *)mdev);
#line 3295
  return;
}
}
#line 3298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3309
  if (minor_count == 0U || minor_count > 255U) {
#line 3310
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3313
    return (-22);
  } else {

  }
#line 3319
  err = drbd_nl_init();
#line 3320
  if (err != 0) {
#line 3321
    return (err);
  } else {

  }
#line 3323
  err = register_blkdev(147U, "drbd");
#line 3324
  if (err != 0) {
#line 3325
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3328
    return (err);
  } else {

  }
#line 3331
  register_reboot_notifier(& drbd_notifier);
#line 3336
  err = -12;
#line 3338
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3340
  drbd_proc = 0;
#line 3341
  tmp = kzalloc___2((unsigned long )minor_count * 8UL, 208U);
#line 3341
  minor_table = (struct drbd_conf **)tmp;
#line 3343
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3344
    goto Enomem;
  } else {

  }
#line 3346
  err = drbd_create_mempools();
#line 3347
  if (err != 0) {
#line 3348
    goto Enomem;
  } else {

  }
#line 3350
  drbd_proc = proc_create_data("drbd", 33060U, 0, & drbd_proc_fops, 0);
#line 3351
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3352
    printk("<3>drbd: unable to register proc file\n");
#line 3353
    goto Enomem;
  } else {

  }
#line 3356
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3358
  printk("<6>drbd: initialized. Version: 8.3.9 (api:%d/proto:%d-%d)\n", 88, 86, 95);
#line 3361
  tmp___0 = drbd_buildtag();
#line 3361
  printk("<6>drbd: %s\n", tmp___0);
#line 3362
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3364
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3366
  return (0);
  Enomem: 
#line 3369
  drbd_cleanup();
#line 3370
  if (err == -12) {
#line 3372
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3374
    printk("<3>drbd: initialization failure\n");
  }
#line 3375
  return (err);
}
}
#line 3378 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3380
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3381
    return;
  } else {

  }
#line 3383
  bd_release(ldev->backing_bdev);
#line 3384
  bd_release(ldev->md_bdev);
#line 3386
  fput(ldev->lo_file);
#line 3387
  fput(ldev->md_file);
#line 3389
  kfree((void const   *)ldev);
#line 3390
  return;
}
}
#line 3392 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3394
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3395
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3396
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3397
    sock_release(mdev->data.socket);
#line 3398
    mdev->data.socket = 0;
#line 3399
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 3401
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3402
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 3403
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3404
    sock_release(mdev->meta.socket);
#line 3405
    mdev->meta.socket = 0;
#line 3406
    mutex_unlock(& mdev->meta.mutex);
  } else {

  }
#line 3408
  return;
}
}
#line 3411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3413
  crypto_free_hash(mdev->csums_tfm);
#line 3414
  mdev->csums_tfm = 0;
#line 3415
  crypto_free_hash(mdev->verify_tfm);
#line 3416
  mdev->verify_tfm = 0;
#line 3417
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3418
  mdev->cram_hmac_tfm = 0;
#line 3419
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3420
  mdev->integrity_w_tfm = 0;
#line 3421
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3422
  mdev->integrity_r_tfm = 0;
#line 3424
  drbd_free_sock(mdev);
#line 3426
  drbd_free_bc(mdev->ldev);
#line 3426
  mdev->ldev = 0;
#line 3427
  return;
}
}
#line 3454 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  sector_t tmp___11 ;
  int tmp___12 ;
  sector_t tmp___13 ;

  {
#line 3460
  del_timer(& mdev->md_sync_timer);
#line 3462
  tmp = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3462
  if (tmp == 0) {
#line 3463
    return;
  } else {

  }
#line 3467
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3467
  if (tmp___0 == 0) {
#line 3468
    return;
  } else {

  }
#line 3470
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3471
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3471
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3472
  memset((void *)buffer, 0, 512UL);
#line 3474
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3474
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3474
  buffer->la_size = tmp___3;
#line 3475
  i = 0;
#line 3475
  goto ldv_46524;
  ldv_46523: 
#line 3476
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3476
  buffer->uuid[i] = tmp___4;
#line 3475
  i = i + 1;
  ldv_46524: ;
#line 3475
  if (i <= 3) {
#line 3476
    goto ldv_46523;
  } else {

  }
#line 3477
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3477
  buffer->flags = tmp___5;
#line 3478
  buffer->magic = 1795323011U;
#line 3480
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3480
  buffer->md_size_sect = tmp___6;
#line 3481
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3481
  buffer->al_offset = tmp___7;
#line 3482
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3482
  buffer->al_nr_extents = tmp___8;
#line 3483
  buffer->bm_bytes_per_bit = 1048576U;
#line 3484
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3484
  buffer->device_uuid = tmp___9;
#line 3486
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3486
  buffer->bm_offset = tmp___10;
#line 3488
  tmp___11 = drbd_md_ss__(mdev, mdev->ldev);
#line 3488
  if ((unsigned long long )tmp___11 != (mdev->ldev)->md.md_offset) {
#line 3488
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3488);
  } else {

  }
#line 3489
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3491
  tmp___12 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3491
  if (tmp___12 == 0) {
#line 3493
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "meta data update failed!\n");
#line 3494
    drbd_chk_io_error____1(mdev, 1, 1, "drbd_md_sync");
  } else {

  }
#line 3499
  tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 3499
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___13;
#line 3501
  mutex_unlock(& mdev->md_io_mutex);
#line 3502
  put_ldev(mdev);
#line 3503
  return;
}
}
#line 3513 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u64 tmp___11 ;
  __u64 tmp___12 ;
  __u32 tmp___13 ;
  __u32 tmp___14 ;
  __u64 tmp___15 ;

  {
#line 3516
  rv = 101;
#line 3518
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3518
  if (tmp == 0) {
#line 3519
    return (118);
  } else {

  }
#line 3521
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3522
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3522
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3524
  tmp___1 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3524
  if (tmp___1 == 0) {
#line 3527
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata.\n");
#line 3528
    rv = 118;
#line 3529
    goto err;
  } else {

  }
#line 3532
  tmp___2 = __fswab32(buffer->magic);
#line 3532
  if (tmp___2 != 2205418091U) {
#line 3533
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Error while reading metadata, magic not found.\n");
#line 3534
    rv = 119;
#line 3535
    goto err;
  } else {

  }
#line 3537
  tmp___4 = __fswab32(buffer->al_offset);
#line 3537
  if (tmp___4 != (unsigned int )bdev->md.al_offset) {
#line 3538
    tmp___3 = __fswab32(buffer->al_offset);
#line 3538
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected al_offset: %d (expected %d)\n",
            tmp___3, bdev->md.al_offset);
#line 3540
    rv = 119;
#line 3541
    goto err;
  } else {

  }
#line 3543
  tmp___6 = __fswab32(buffer->bm_offset);
#line 3543
  if (tmp___6 != (unsigned int )bdev->md.bm_offset) {
#line 3544
    tmp___5 = __fswab32(buffer->bm_offset);
#line 3544
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_offset: %d (expected %d)\n",
            tmp___5, bdev->md.bm_offset);
#line 3546
    rv = 119;
#line 3547
    goto err;
  } else {

  }
#line 3549
  tmp___8 = __fswab32(buffer->md_size_sect);
#line 3549
  if (tmp___8 != bdev->md.md_size_sect) {
#line 3550
    tmp___7 = __fswab32(buffer->md_size_sect);
#line 3550
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected md_size: %u (expected %u)\n",
            tmp___7, bdev->md.md_size_sect);
#line 3552
    rv = 119;
#line 3553
    goto err;
  } else {

  }
#line 3556
  tmp___10 = __fswab32(buffer->bm_bytes_per_bit);
#line 3556
  if (tmp___10 != 4096U) {
#line 3557
    tmp___9 = __fswab32(buffer->bm_bytes_per_bit);
#line 3557
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "unexpected bm_bytes_per_bit: %u (expected %u)\n",
            tmp___9, 4096);
#line 3559
    rv = 119;
#line 3560
    goto err;
  } else {

  }
#line 3563
  tmp___11 = __fswab64(buffer->la_size);
#line 3563
  bdev->md.la_size_sect = tmp___11;
#line 3564
  i = 0;
#line 3564
  goto ldv_46536;
  ldv_46535: 
#line 3565
  tmp___12 = __fswab64(buffer->uuid[i]);
#line 3565
  bdev->md.uuid[i] = tmp___12;
#line 3564
  i = i + 1;
  ldv_46536: ;
#line 3564
  if (i <= 3) {
#line 3565
    goto ldv_46535;
  } else {

  }
#line 3566
  tmp___13 = __fswab32(buffer->flags);
#line 3566
  bdev->md.flags = tmp___13;
#line 3567
  tmp___14 = __fswab32(buffer->al_nr_extents);
#line 3567
  mdev->sync_conf.al_extents = (int )tmp___14;
#line 3568
  tmp___15 = __fswab64(buffer->device_uuid);
#line 3568
  bdev->md.device_uuid = tmp___15;
#line 3570
  if (mdev->sync_conf.al_extents <= 6) {
#line 3571
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3574
  mutex_unlock(& mdev->md_io_mutex);
#line 3575
  put_ldev(mdev);
#line 3577
  return (rv);
}
}
#line 3580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void debug_drbd_uuid(struct drbd_conf *mdev , enum drbd_uuid_index index ) 
{ 
  char *uuid_str[6U] ;
  struct _ddebug descriptor ;
  long tmp ;

  {
#line 3582
  uuid_str[0] = (char *)"CURRENT";
#line 3582
  uuid_str[1] = (char *)"BITMAP";
#line 3582
  uuid_str[2] = (char *)"HISTORY_START";
#line 3582
  uuid_str[3] = (char *)"HISTORY_END";
#line 3582
  uuid_str[4] = (char *)"SIZE";
#line 3582
  uuid_str[5] = (char *)"FLAGS";
#line 3591
  if ((unsigned int )index > 5U) {
#line 3592
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid_index >= EXTENDED_SIZE\n");
#line 3593
    return;
  } else {

  }
#line 3596
  descriptor.modname = "drbd";
#line 3596
  descriptor.function = "debug_drbd_uuid";
#line 3596
  descriptor.filename = "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared";
#line 3596
  descriptor.format = " uuid[%s] now %016llX\n";
#line 3596
  descriptor.lineno = 3598U;
#line 3596
  descriptor.flags = 0U;
#line 3596
  descriptor.enabled = (char)0;
#line 3596
  tmp = __builtin_expect((int )((signed char )descriptor.enabled) != 0, 0L);
#line 3596
  if (tmp != 0L) {
#line 3596
    goto do_printk___0;
  } else {

  }
#line 3596
  goto out___0;
  do_printk___0: 
#line 3596
  dev_printk("<7>", (struct device  const  *)(& (mdev->vdisk)->part0.__dev), " uuid[%s] now %016llX\n",
             uuid_str[(unsigned int )index], (mdev->ldev)->md.uuid[(unsigned int )index]);
  out___0: ;
#line 3598
  return;
}
}
#line 3620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3622
  tmp = test_and_set_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 3622
  if (tmp == 0) {
#line 3623
    mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
  } else {

  }
#line 3624
  return;
}
}
#line 3627 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3631
  i = 2;
#line 3631
  goto ldv_46555;
  ldv_46554: 
#line 3632
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3633
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )(i + 1));
#line 3631
  i = i + 1;
  ldv_46555: ;
#line 3631
  if (i <= 2) {
#line 3632
    goto ldv_46554;
  } else {

  }

#line 3636
  return;
}
}
#line 3637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3639
  if (idx == 0) {
#line 3640
    if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 3641
      val = val | 1ULL;
    } else {
#line 3643
      val = val & 0xfffffffffffffffeULL;
    }
#line 3645
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3648
  (mdev->ldev)->md.uuid[idx] = val;
#line 3649
  debug_drbd_uuid(mdev, (enum drbd_uuid_index )idx);
#line 3650
  drbd_md_mark_dirty(mdev);
#line 3651
  return;
}
}
#line 3654 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3656
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3657
    drbd_uuid_move_history(mdev);
#line 3658
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
#line 3659
    debug_drbd_uuid(mdev, UI_HISTORY_START);
  } else {

  }
#line 3661
  _drbd_uuid_set(mdev, idx, val);
#line 3662
  return;
}
}
#line 3671 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;

  {
#line 3675
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Creating new current UUID\n");
#line 3676
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3676
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3676);
  } else {

  }
#line 3677
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3678
  debug_drbd_uuid(mdev, UI_BITMAP);
#line 3680
  get_random_bytes((void *)(& val), 8);
#line 3681
  _drbd_uuid_set(mdev, 0, val);
#line 3683
  drbd_md_sync(mdev);
#line 3684
  return;
}
}
#line 3686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 3688
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3689
    return;
  } else {

  }
#line 3691
  if (val == 0ULL) {
#line 3692
    drbd_uuid_move_history(mdev);
#line 3693
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3694
    (mdev->ldev)->md.uuid[1] = 0ULL;
#line 3695
    debug_drbd_uuid(mdev, UI_HISTORY_START);
#line 3696
    debug_drbd_uuid(mdev, UI_BITMAP);
  } else {
#line 3698
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3699
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "bm UUID already set");
    } else {

    }
#line 3701
    (mdev->ldev)->md.uuid[1] = val;
#line 3702
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 3704
    debug_drbd_uuid(mdev, UI_BITMAP);
  }
#line 3706
  drbd_md_mark_dirty(mdev);
#line 3707
  return;
}
}
#line 3715 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3717
  rv = -5;
#line 3719
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3719
  if (tmp != 0) {
#line 3720
    drbd_md_set_flag(mdev, 8);
#line 3721
    drbd_md_sync(mdev);
#line 3722
    drbd_bm_set_all(mdev);
#line 3724
    rv = drbd_bm_write(mdev);
#line 3726
    if (rv == 0) {
#line 3727
      drbd_md_clear_flag(mdev, 8);
#line 3728
      drbd_md_sync(mdev);
    } else {

    }
#line 3731
    put_ldev(mdev);
  } else {

  }
#line 3734
  return (rv);
}
}
#line 3743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3745
  rv = -5;
#line 3747
  drbd_resume_al(mdev);
#line 3748
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3748
  if (tmp != 0) {
#line 3749
    drbd_bm_clear_all(mdev);
#line 3750
    rv = drbd_bm_write(mdev);
#line 3751
    put_ldev(mdev);
  } else {

  }
#line 3754
  return (rv);
}
}
#line 3757 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  int tmp ;

  {
#line 3759
  __mptr = (struct drbd_work  const  *)w;
#line 3759
  work = (struct bm_io_work *)__mptr;
#line 3762
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3762
  if (tmp != 0) {
#line 3762
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3762);
  } else {

  }
#line 3764
  drbd_bm_lock(mdev, work->why);
#line 3765
  rv = (*(work->io_fn))(mdev);
#line 3766
  drbd_bm_unlock(mdev);
#line 3768
  clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
#line 3769
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3771
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3772
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3774
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 3775
  work->why = 0;
#line 3777
  return (1);
}
}
#line 3780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_ldev_destroy(struct drbd_conf *mdev ) 
{ 


  {
#line 3782
  lc_destroy(mdev->resync);
#line 3783
  mdev->resync = 0;
#line 3784
  lc_destroy(mdev->act_log);
#line 3785
  mdev->act_log = 0;
#line 3786
  drbd_free_bc(mdev->ldev);
#line 3786
  mdev->ldev = 0;
#line 3790
  if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 3791
    __free_pages(mdev->md_io_tmpp, 0U);
#line 3792
    mdev->md_io_tmpp = 0;
  } else {

  }
#line 3794
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3795
  return;
}
}
#line 3797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_go_diskless(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3799
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3799
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3799);
  } else {

  }
#line 3804
  val.i = 0U;
#line 3804
  val.ldv_35955.disk = 0U;
#line 3804
  mask.i = 0U;
#line 3804
  mask.ldv_35955.disk = 15U;
#line 3804
  drbd_force_state(mdev, mask, val);
#line 3805
  return (1);
}
}
#line 3808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_go_diskless(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 3810
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) != 4U) {
#line 3810
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.disk == D_FAILED ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3810);
  } else {

  }
#line 3811
  tmp = test_and_set_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3811
  if (tmp == 0) {
#line 3812
    drbd_queue_work(& mdev->data.work, & mdev->go_diskless);
  } else {

  }
#line 3813
  return;
}
}
#line 3827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 3832
  tmp = get_current();
#line 3832
  if ((unsigned long )tmp != (unsigned long )mdev->worker.task) {
#line 3832
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current == mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3832);
  } else {

  }
#line 3834
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 3834
  if (tmp___0 != 0) {
#line 3834
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3834);
  } else {

  }
#line 3835
  tmp___1 = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 3835
  if (tmp___1 != 0) {
#line 3835
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3835);
  } else {

  }
#line 3836
  tmp___2 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3836
  if (tmp___2 == 0) {
#line 3836
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3836);
  } else {

  }
#line 3837
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3838
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME going to queue \'%s\' but \'%s\' still pending?\n",
            why, mdev->bm_io_work.why);
  } else {

  }
#line 3841
  mdev->bm_io_work.io_fn = io_fn;
#line 3842
  mdev->bm_io_work.done = done;
#line 3843
  mdev->bm_io_work.why = why;
#line 3845
  set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 3846
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3846
  if (tmp___4 == 0) {
#line 3847
    tmp___3 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3847
    if (tmp___3 != 0) {
#line 3848
      set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 3849
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3851
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "FIXME avoided double queuing bm_io_work\n");
    }
  } else {

  }
#line 3852
  return;
}
}
#line 3864 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  struct task_struct *tmp ;

  {
#line 3868
  tmp = get_current();
#line 3868
  if ((unsigned long )tmp == (unsigned long )mdev->worker.task) {
#line 3868
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( current != mdev->worker.task ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
            3868);
  } else {

  }
#line 3870
  drbd_suspend_io(mdev);
#line 3872
  drbd_bm_lock(mdev, why);
#line 3873
  rv = (*io_fn)(mdev);
#line 3874
  drbd_bm_unlock(mdev);
#line 3876
  drbd_resume_io(mdev);
#line 3878
  return (rv);
}
}
#line 3881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3883
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3884
    drbd_md_mark_dirty(mdev);
#line 3885
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3887
  return;
}
}
#line 3889 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3891
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3892
    drbd_md_mark_dirty(mdev);
#line 3893
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3895
  return;
}
}
#line 3896 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3898
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3901 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3903
  mdev = (struct drbd_conf *)data;
#line 3905
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3906
  return;
}
}
#line 3908 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 


  {
#line 3910
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "md_sync_timer expired! Worker calls drbd_md_sync().\n");
#line 3915
  drbd_md_sync(mdev);
#line 3916
  return (1);
}
}
#line 3936 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  long refresh ;
  unsigned long tmp ;
  __u32 tmp___0 ;

  {
#line 3940
  tmp = rsp->count;
#line 3940
  rsp->count = rsp->count - 1UL;
#line 3940
  if (tmp == 0UL) {
#line 3941
    get_random_bytes((void *)(& refresh), 8);
#line 3942
    rsp->state = rsp->state + (unsigned long )refresh;
#line 3943
    rsp->count = 10000UL;
  } else {

  }
#line 3945
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3946
  tmp___0 = __fswahw32((__u32 )rsp->state);
#line 3946
  return ((unsigned long )tmp___0);
}
}
#line 3950 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[10U] ;

  {
#line 3951
  _faults[0] = (char *)"Meta-data write";
#line 3951
  _faults[1] = (char *)"Meta-data read";
#line 3951
  _faults[2] = (char *)"Resync write";
#line 3951
  _faults[3] = (char *)"Resync read";
#line 3951
  _faults[4] = (char *)"Data write";
#line 3951
  _faults[5] = (char *)"Data read";
#line 3951
  _faults[6] = (char *)"Data read ahead";
#line 3951
  _faults[7] = (char *)"BM allocation";
#line 3951
  _faults[8] = (char *)"EE allocation";
#line 3951
  _faults[9] = (char *)"receive data corruption";
#line 3964
  return (type <= 9U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3968 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  int tmp___3 ;

  {
#line 3970
  rrs.state = 0UL;
#line 3970
  rrs.count = 0UL;
#line 3972
  if (fault_devs == 0) {
#line 3972
    goto _L;
  } else {
#line 3972
    tmp = mdev_to_minor(mdev);
#line 3972
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3972
      tmp___0 = _drbd_fault_random(& rrs);
#line 3972
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3972
        tmp___1 = 1;
      } else {
#line 3972
        tmp___1 = 0;
      }
    } else {
#line 3972
      tmp___1 = 0;
    }
  }
#line 3972
  ret = (unsigned int )tmp___1;
#line 3977
  if (ret != 0U) {
#line 3978
    fault_count = fault_count + 1;
#line 3980
    tmp___3 = ___ratelimit(& drbd_ratelimit_state, "_drbd_insert_fault");
#line 3980
    if (tmp___3 != 0) {
#line 3981
      tmp___2 = _drbd_fault_str(type);
#line 3981
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "***Simulating %s failure\n",
               tmp___2);
    } else {

    }
  } else {

  }
#line 3985
  return (ret);
}
}
#line 3989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3994
  buildtag[0] = '\000';
#line 3994
  tmp = 1U;
#line 3994
  while (1) {
#line 3994
    if (tmp >= 38U) {
#line 3994
      break;
    } else {

    }
#line 3994
    buildtag[tmp] = (char)0;
#line 3994
    tmp = tmp + 1U;
  }
#line 3996
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3998
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3999
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 4002
      buildtag[0] = 98;
    }
  } else {

  }
#line 4005
  return ((char const   *)(& buildtag));
}
}
#line 4053 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_65_p1 ;
  int res_drbd_open_65 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_66_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_73_p1 ;
  void *var_drbd_notify_sys_73_p2 ;
  unsigned long var_md_sync_timer_fn_103_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 4302
  ldv_s_drbd_ops_block_device_operations = 0;
#line 4249
  LDV_IN_INTERRUPT = 1;
#line 4258
  ldv_initialize();
#line 4285
  ldv_handler_precall();
#line 4286
  tmp = drbd_init();
#line 4286
  if (tmp != 0) {
#line 4287
    goto ldv_final;
  } else {

  }
#line 4309
  goto ldv_46731;
  ldv_46730: 
#line 4313
  tmp___0 = nondet_int();
#line 4313
  switch (tmp___0) {
  case 0: ;
#line 4318
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4344
    ldv_handler_precall();
#line 4345
    res_drbd_open_65 = drbd_open(var_group1, var_drbd_open_65_p1);
#line 4346
    ldv_check_return_value(res_drbd_open_65);
#line 4347
    if (res_drbd_open_65 != 0) {
#line 4348
      goto ldv_module_exit;
    } else {

    }
#line 4366
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4372
  goto ldv_46725;
  case 1: ;
#line 4376
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4402
    ldv_handler_precall();
#line 4403
    drbd_release(var_group2, var_drbd_release_66_p1);
#line 4421
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4427
  goto ldv_46725;
  case 2: 
#line 4457
  ldv_handler_precall();
#line 4458
  drbd_notify_sys(var_group3, var_drbd_notify_sys_73_p1, var_drbd_notify_sys_73_p2);
#line 4482
  goto ldv_46725;
  case 3: 
#line 4518
  ldv_handler_precall();
#line 4519
  md_sync_timer_fn(var_md_sync_timer_fn_103_p0);
#line 4537
  goto ldv_46725;
  default: ;
#line 4538
  goto ldv_46725;
  }
  ldv_46725: ;
  ldv_46731: 
#line 4309
  tmp___1 = nondet_int();
#line 4309
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 4311
    goto ldv_46730;
  } else {

  }

  ldv_module_exit: 
#line 4571
  ldv_handler_precall();
#line 4572
  drbd_cleanup();
  ldv_final: 
#line 4592
  ldv_check_final_state();
#line 4595
  return;
}
}
#line 4599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4604
  ldv_module_put(ldv_func_arg1);
#line 4605
  return;
}
}
#line 4607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4612
  tmp = ldv_try_module_get(module);
#line 4612
  return (tmp);
}
}
#line 4615 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4620
  ldv_module_put(ldv_func_arg1);
#line 4621
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Need access to UpToDate data",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 219 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 92 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 124
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 174 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 180
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 181
  __len = (size_t )len;
#line 181
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 184
  return;
}
}
#line 228 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 234
  tmp = __bitmap_equal(src1, src2, nbits);
#line 234
  return (tmp);
}
}
#line 393 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 396
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 396
  return (tmp != 0);
}
}
#line 482 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 485
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 486
  return;
}
}
#line 70 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 74
extern void call_usermodehelper_setfns(struct subprocess_info * , int (*)(struct subprocess_info * ) ,
                                       void (*)(struct subprocess_info * ) , void * ) ;
#line 80
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 87 "include/linux/kmod.h"
__inline static int call_usermodehelper_fns(char *path , char **argv , char **envp ,
                                            enum umh_wait wait , int (*init)(struct subprocess_info * ) ,
                                            void (*cleanup)(struct subprocess_info * ) ,
                                            void *data ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 93
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 95
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 97
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 98
    return (-12);
  } else {

  }
#line 100
  call_usermodehelper_setfns(info, init, cleanup, data);
#line 102
  tmp = call_usermodehelper_exec(info, wait);
#line 102
  return (tmp);
}
}
#line 106 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  int tmp ;

  {
#line 108
  tmp = call_usermodehelper_fns(path, argv, envp, wait, 0, 0, 0);
#line 108
  return (tmp);
}
}
#line 209 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 504 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 510
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 514
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1976 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 2042
extern int bd_claim(struct block_device * , void * ) ;
#line 131 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 132
extern void cn_del_callback(struct cb_id * ) ;
#line 133
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 396 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 809 "include/linux/blkdev.h"
extern void blk_queue_max_hw_sectors(struct request_queue * , unsigned int  ) ;
#line 810
extern void blk_queue_max_segments(struct request_queue * , unsigned short  ) ;
#line 814
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 823
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 836
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 925 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 927
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1879
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1883
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1883
  if (tmp___1 != 0UL) {
#line 1883
    __min1 = 34359738368UL;
#line 1883
    tmp___0 = drbd_md_first_sector(bdev);
#line 1883
    __min2 = tmp___0;
#line 1883
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1883
    s = 0UL;
  }
#line 1886
  goto ldv_44478;
  case -2: 
#line 1888
  __min1___0 = 34359738368UL;
#line 1888
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1888
  __min2___0 = tmp___2;
#line 1888
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1891
  __min1___1 = s;
#line 1891
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1891
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1894
  goto ldv_44478;
  default: 
#line 1896
  __min1___2 = 8587575296UL;
#line 1896
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1896
  __min2___2 = tmp___3;
#line 1896
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_44478: ;
#line 1899
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[81U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"primary_force", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}, 
        {"resize_force", 32768, 4}, 
        {"no_resync", 40960, 4}, 
        {"dry_run", 40960, 4}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"on_no_data", 0, 4}, 
        {"c_plan_ahead", 0, 4}, 
        {"c_delay_target", 0, 4}, 
        {"c_fill_target", 0, 4}, 
        {"c_max_rate", 0, 4}, 
        {"c_min_rate", 0, 4}};
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 52
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 53
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 14
  goto ldv_45221;
  ldv_45220: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->primary_force = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_45218;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_45218: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_45221: 
#line 14
  tmp___1 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 14
  tag = (int )tmp___2;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_45220;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  unsigned short *tmp___5 ;
  u16 tmp___6 ;

  {
#line 20
  goto ldv_45282;
  ldv_45281: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_45250;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_45250;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_45250;
  case 5: 
#line 20
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___1;
#line 20
  goto ldv_45250;
  case 6: 
#line 20
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___2;
#line 20
  goto ldv_45250;
  case 7: 
#line 20
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___3;
#line 20
  goto ldv_45250;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_45250;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_45250;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_45250;
  case 56: 
#line 20
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___4;
#line 20
  goto ldv_45250;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_45250;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_45250;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_45250: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_45282: 
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___6 = get_unaligned_le16((void const   *)tmp___5);
#line 20
  tag = (int )tmp___6;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_45281;
  } else {

  }

#line 20
  return (1);
}
}
#line 67
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 67 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  u32 tmp___10 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  unsigned short *tmp___16 ;
  u16 tmp___17 ;

  {
#line 38
  goto ldv_45385;
  ldv_45384: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_45320;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_45320;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_45320;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_45320;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_45320;
  case 14: 
#line 38
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___1;
#line 38
  goto ldv_45320;
  case 15: 
#line 38
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___2;
#line 38
  goto ldv_45320;
  case 16: 
#line 38
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___3;
#line 38
  goto ldv_45320;
  case 17: 
#line 38
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___4;
#line 38
  goto ldv_45320;
  case 18: 
#line 38
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___5;
#line 38
  goto ldv_45320;
  case 19: 
#line 38
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___6;
#line 38
  goto ldv_45320;
  case 20: 
#line 38
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___7;
#line 38
  goto ldv_45320;
  case 21: 
#line 38
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___8;
#line 38
  goto ldv_45320;
  case 22: 
#line 38
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___9;
#line 38
  goto ldv_45320;
  case 24: 
#line 38
  tmp___10 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___10;
#line 38
  goto ldv_45320;
  case 25: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___11;
#line 38
  goto ldv_45320;
  case 26: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___12;
#line 38
  goto ldv_45320;
  case 39: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___13;
#line 38
  goto ldv_45320;
  case 40: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___14;
#line 38
  goto ldv_45320;
  case 67: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___15;
#line 38
  goto ldv_45320;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  case 70: 
#line 38
  arg->dry_run = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_45320;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_45320: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_45385: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___17 = get_unaligned_le16((void const   *)tmp___16);
#line 38
  tag = (int )tmp___17;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_45384;
  } else {

  }

#line 38
  return (1);
}
}
#line 75
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 75 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 71
  goto ldv_45419;
  ldv_45418: 
#line 71
  tmp = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 71
  dlen = (int )tmp___0;
#line 71
  switch (tag & 8191) {
  case 29: 
#line 71
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 71
  goto ldv_45414;
  case 68: 
#line 71
  arg->resize_force = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_45414;
  case 69: 
#line 71
  arg->no_resync = (int )((signed char )*((char *)tags)) != 0;
#line 71
  goto ldv_45414;
  default: ;
#line 71
  if ((tag & 8192) != 0) {
#line 71
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 71
    return (0);
  } else {

  }
  }
  ldv_45414: 
#line 71
  tags = tags + (unsigned long )dlen;
  ldv_45419: 
#line 71
  tmp___1 = tags;
#line 71
  tags = tags + 1;
#line 71
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 71
  tag = (int )tmp___2;
#line 71
  if (tag != 0) {
#line 72
    goto ldv_45418;
  } else {

  }

#line 71
  return (1);
}
}
#line 96
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 96 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  u32 tmp___4 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  u32 tmp___9 ;
  unsigned short *tmp___10 ;
  u16 tmp___11 ;

  {
#line 77
  goto ldv_45475;
  ldv_45474: 
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 77
  dlen = (int )tmp___0;
#line 77
  switch (tag & 8191) {
  case 30: 
#line 77
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->rate = (int )tmp___1;
#line 77
  goto ldv_45433;
  case 31: 
#line 77
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->after = (int )tmp___2;
#line 77
  goto ldv_45433;
  case 32: 
#line 77
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->al_extents = (int )tmp___3;
#line 77
  goto ldv_45433;
  case 52: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"verify_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->verify_alg_len = dlen;
#line 77
  __min1 = (size_t )dlen;
#line 77
  __min2 = 64UL;
#line 77
  __len = __min1 < __min2 ? __min1 : __min2;
#line 77
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 77
  goto ldv_45433;
  case 51: ;
#line 77
  if (dlen > 32) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"cpu_mask", dlen, 32U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->cpu_mask_len = dlen;
#line 77
  __min1___0 = (size_t )dlen;
#line 77
  __min2___0 = 32UL;
#line 77
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 77
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 77
  goto ldv_45433;
  case 64: ;
#line 77
  if (dlen > 64) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "arg too long: %s (%u wanted, max len: %u bytes)\n",
            (char *)"csums_alg", dlen, 64U);
#line 77
    return (0);
  } else {

  }
#line 77
  arg->csums_alg_len = dlen;
#line 77
  __min1___1 = (size_t )dlen;
#line 77
  __min2___1 = 64UL;
#line 77
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 77
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 77
  goto ldv_45433;
  case 65: 
#line 77
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 77
  goto ldv_45433;
  case 75: 
#line 77
  tmp___4 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->on_no_data = (int )tmp___4;
#line 77
  goto ldv_45433;
  case 76: 
#line 77
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_plan_ahead = (int )tmp___5;
#line 77
  goto ldv_45433;
  case 77: 
#line 77
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_delay_target = (int )tmp___6;
#line 77
  goto ldv_45433;
  case 78: 
#line 77
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_fill_target = (int )tmp___7;
#line 77
  goto ldv_45433;
  case 79: 
#line 77
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_max_rate = (int )tmp___8;
#line 77
  goto ldv_45433;
  case 80: 
#line 77
  tmp___9 = get_unaligned_le32((void const   *)tags);
#line 77
  arg->c_min_rate = (int )tmp___9;
#line 77
  goto ldv_45433;
  default: ;
#line 77
  if ((tag & 8192) != 0) {
#line 77
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 77
    return (0);
  } else {

  }
  }
  ldv_45433: 
#line 77
  tags = tags + (unsigned long )dlen;
  ldv_45475: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  tmp___11 = get_unaligned_le16((void const   *)tmp___10);
#line 77
  tag = (int )tmp___11;
#line 77
  if (tag != 0) {
#line 78
    goto ldv_45474;
  } else {

  }

#line 77
  return (1);
}
}
#line 140
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 140 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 138
  goto ldv_45774;
  ldv_45773: 
#line 138
  tmp = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 138
  dlen = (int )tmp___0;
#line 138
  switch (tag & 8191) {
  case 66: 
#line 138
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 138
  goto ldv_45771;
  default: ;
#line 138
  if ((tag & 8192) != 0) {
#line 138
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 138
    return (0);
  } else {

  }
  }
  ldv_45771: 
#line 138
  tags = tags + (unsigned long )dlen;
  ldv_45774: 
#line 138
  tmp___1 = tags;
#line 138
  tags = tags + 1;
#line 138
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 138
  tag = (int )tmp___2;
#line 138
  if (tag != 0) {
#line 139
    goto ldv_45773;
  } else {

  }

#line 138
  return (1);
}
}
#line 144
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 144 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  unsigned short *tmp___1 ;
  u16 tmp___2 ;

  {
#line 142
  goto ldv_45791;
  ldv_45790: 
#line 142
  tmp = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 142
  dlen = (int )tmp___0;
#line 142
  switch (tag & 8191) {
  case 63: 
#line 142
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 142
  goto ldv_45788;
  default: ;
#line 142
  if ((tag & 8192) != 0) {
#line 142
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Unknown tag: %d\n",
            tag & 8191);
#line 142
    return (0);
  } else {

  }
  }
  ldv_45788: 
#line 142
  tags = tags + (unsigned long )dlen;
  ldv_45791: 
#line 142
  tmp___1 = tags;
#line 142
  tags = tags + 1;
#line 142
  tmp___2 = get_unaligned_le16((void const   *)tmp___1);
#line 142
  tag = (int )tmp___2;
#line 142
  if (tag != 0) {
#line 143
    goto ldv_45790;
  } else {

  }

#line 142
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_45836;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_45836;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_45836;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_45836;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45836;
  }
  ldv_45836: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_45843;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_45843;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_45843;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_45843;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45843;
  }
  ldv_45843: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_45850;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_45850;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45850;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_45850;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45850;
  }
  ldv_45850: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_45857;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_45857;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_45857;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_45857;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45857;
  }
  ldv_45857: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_45864;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_45864;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45864;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_45864;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45864;
  }
  ldv_45864: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_45874;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_45874;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_45874;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_45874;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45874;
  }
  ldv_45874: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_45881;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_45881;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45881;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_45881;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45881;
  }
  ldv_45881: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_45891;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_45891;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_45891;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_45891;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45891;
  }
  ldv_45891: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_45898;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_45898;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_45898;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_45898;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45898;
  }
  ldv_45898: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_45905;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_45905;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45905;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_45905;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45905;
  }
  ldv_45905: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_45912;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_45912;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_45912;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_45912;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45912;
  }
  ldv_45912: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_45919;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_45919;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_45919;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_45919;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45919;
  }
  ldv_45919: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_45926;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_45926;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45926;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_45926;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45926;
  }
  ldv_45926: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_45933;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_45933;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_45933;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_45933;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45933;
  }
  ldv_45933: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_45940;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_45940;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_45940;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_45940;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45940;
  }
  ldv_45940: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_45947;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_45947;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45947;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_45947;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45947;
  }
  ldv_45947: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_45954;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_45954;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_45954;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_45954;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45954;
  }
  ldv_45954: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_45961;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_45961;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_45961;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_45961;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45961;
  }
  ldv_45961: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_45968;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_45968;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_45968;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_45968;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45968;
  }
  ldv_45968: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_45975;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_45975;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_45975;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_45975;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45975;
  }
  ldv_45975: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_45982;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_45982;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_45982;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_45982;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45982;
  }
  ldv_45982: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_45989;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_45989;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_45989;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_45989;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45989;
  }
  ldv_45989: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_45996;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_45996;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_45996;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_45996;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_45996;
  }
  ldv_45996: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_46003;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_46003;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_46003;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_46003;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46003;
  }
  ldv_46003: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_46010;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_46010;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_46010;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_46010;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46010;
  }
  ldv_46010: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_46017;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_46017;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_46017;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_46017;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46017;
  }
  ldv_46017: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_46024;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_46024;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_46024;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_46024;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46024;
  }
  ldv_46024: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_46031;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_46031;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_46031;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_46031;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46031;
  }
  ldv_46031: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_46038;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_46038;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_46038;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_46038;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_46038;
  }
  ldv_46038: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 67
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 67 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;
  void *__gu_p___66 ;
  unsigned short *tmp___51 ;
  void *__gu_p___67 ;
  unsigned short *tmp___52 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_46063;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_46063;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_46063;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_46063;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46063;
  }
  ldv_46063: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_46070;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_46070;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_46070;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_46070;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46070;
  }
  ldv_46070: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_46080;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_46080;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_46080;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_46080;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46080;
  }
  ldv_46080: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_46087;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_46087;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_46087;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_46087;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46087;
  }
  ldv_46087: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_46097;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_46097;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_46097;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_46097;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46097;
  }
  ldv_46097: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_46104;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_46104;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_46104;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_46104;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46104;
  }
  ldv_46104: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_46114;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_46114;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_46114;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_46114;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46114;
  }
  ldv_46114: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_46121;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_46121;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_46121;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_46121;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46121;
  }
  ldv_46121: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_46131;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_46131;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_46131;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_46131;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46131;
  }
  ldv_46131: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_46138;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_46138;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_46138;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_46138;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46138;
  }
  ldv_46138: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_46148;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_46148;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_46148;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_46148;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46148;
  }
  ldv_46148: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_46155;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_46155;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_46155;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_46155;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46155;
  }
  ldv_46155: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_46162;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_46162;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_46162;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_46162;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46162;
  }
  ldv_46162: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_46169;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_46169;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_46169;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_46169;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46169;
  }
  ldv_46169: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_46176;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_46176;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_46176;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_46176;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46176;
  }
  ldv_46176: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_46183;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_46183;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_46183;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_46183;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46183;
  }
  ldv_46183: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_46190;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_46190;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_46190;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_46190;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46190;
  }
  ldv_46190: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_46197;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_46197;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_46197;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_46197;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46197;
  }
  ldv_46197: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_46204;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_46204;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_46204;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_46204;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46204;
  }
  ldv_46204: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_46211;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_46211;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_46211;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_46211;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46211;
  }
  ldv_46211: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_46218;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_46218;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_46218;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_46218;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46218;
  }
  ldv_46218: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_46225;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_46225;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_46225;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_46225;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46225;
  }
  ldv_46225: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_46232;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_46232;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_46232;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_46232;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46232;
  }
  ldv_46232: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_46239;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_46239;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_46239;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_46239;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46239;
  }
  ldv_46239: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_46246;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_46246;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_46246;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_46246;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46246;
  }
  ldv_46246: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_46253;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_46253;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_46253;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_46253;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46253;
  }
  ldv_46253: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_46260;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_46260;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_46260;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_46260;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46260;
  }
  ldv_46260: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_46267;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_46267;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_46267;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_46267;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46267;
  }
  ldv_46267: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_46274;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_46274;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_46274;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_46274;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46274;
  }
  ldv_46274: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_46281;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_46281;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_46281;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_46281;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46281;
  }
  ldv_46281: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_46288;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_46288;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_46288;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_46288;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46288;
  }
  ldv_46288: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_46295;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_46295;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_46295;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_46295;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46295;
  }
  ldv_46295: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_46302;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_46302;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_46302;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_46302;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46302;
  }
  ldv_46302: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_46309;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_46309;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_46309;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_46309;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46309;
  }
  ldv_46309: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_46316;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_46316;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_46316;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_46316;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46316;
  }
  ldv_46316: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_46323;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_46323;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_46323;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_46323;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46323;
  }
  ldv_46323: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_46330;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_46330;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_46330;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_46330;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46330;
  }
  ldv_46330: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_46337;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_46337;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_46337;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_46337;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46337;
  }
  ldv_46337: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_46344;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_46344;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_46344;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_46344;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46344;
  }
  ldv_46344: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_46351;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_46351;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_46351;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_46351;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46351;
  }
  ldv_46351: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_46358;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_46358;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_46358;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_46358;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46358;
  }
  ldv_46358: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_46365;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_46365;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_46365;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_46365;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46365;
  }
  ldv_46365: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_46372;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_46372;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_46372;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_46372;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46372;
  }
  ldv_46372: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_46379;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_46379;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_46379;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_46379;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46379;
  }
  ldv_46379: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_46386;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_46386;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_46386;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_46386;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46386;
  }
  ldv_46386: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_46393;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_46393;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_46393;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_46393;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46393;
  }
  ldv_46393: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_46400;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_46400;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_46400;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_46400;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46400;
  }
  ldv_46400: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_46407;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_46407;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_46407;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_46407;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46407;
  }
  ldv_46407: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_46414;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_46414;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_46414;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_46414;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46414;
  }
  ldv_46414: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_46421;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_46421;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_46421;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_46421;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46421;
  }
  ldv_46421: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_46428;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_46428;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_46428;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_46428;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46428;
  }
  ldv_46428: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_46435;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_46435;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_46435;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_46435;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46435;
  }
  ldv_46435: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_46442;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_46442;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_46442;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_46442;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46442;
  }
  ldv_46442: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_46449;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_46449;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_46449;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_46449;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46449;
  }
  ldv_46449: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_46456;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_46456;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_46456;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_46456;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46456;
  }
  ldv_46456: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_46463;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_46463;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_46463;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_46463;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46463;
  }
  ldv_46463: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_46470;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_46470;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_46470;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_46470;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46470;
  }
  ldv_46470: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_46477;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_46477;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_46477;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_46477;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46477;
  }
  ldv_46477: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_46484;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_46484;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_46484;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_46484;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46484;
  }
  ldv_46484: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_46491;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_46491;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_46491;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_46491;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46491;
  }
  ldv_46491: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_46498;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_46498;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_46498;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_46498;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46498;
  }
  ldv_46498: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_46505;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_46505;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_46505;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_46505;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46505;
  }
  ldv_46505: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_46512;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_46512;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_46512;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_46512;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46512;
  }
  ldv_46512: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_46519;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_46519;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_46519;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_46519;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46519;
  }
  ldv_46519: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_46526;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_46526;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_46526;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_46526;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46526;
  }
  ldv_46526: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_46533;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_46533;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_46533;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_46533;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46533;
  }
  ldv_46533: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_46540;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_46540;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_46540;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_46540;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46540;
  }
  ldv_46540: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  tmp___51 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___66 = (void *)tmp___51;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___66) = 70U;
#line 38
  goto ldv_46547;
  case 2UL: 
#line 38
  put_unaligned_le16(41030, __gu_p___66);
#line 38
  goto ldv_46547;
  case 4UL: 
#line 38
  put_unaligned_le32(41030U, __gu_p___66);
#line 38
  goto ldv_46547;
  case 8UL: 
#line 38
  put_unaligned_le64(41030ULL, __gu_p___66);
#line 38
  goto ldv_46547;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46547;
  }
  ldv_46547: 
#line 38
  tmp___52 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___67 = (void *)tmp___52;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___67) = 1U;
#line 38
  goto ldv_46554;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___67);
#line 38
  goto ldv_46554;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___67);
#line 38
  goto ldv_46554;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___67);
#line 38
  goto ldv_46554;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_46554;
  }
  ldv_46554: 
#line 38
  *((char *)tags) = (char )arg->dry_run;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 96
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 96 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;
  void *__gu_p___16 ;
  unsigned short *tmp___13 ;
  void *__gu_p___17 ;
  unsigned short *tmp___14 ;
  void *__gu_p___18 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  void *__gu_p___22 ;
  unsigned short *tmp___17 ;
  void *__gu_p___23 ;
  unsigned short *tmp___18 ;
  void *__gu_p___24 ;
  void *__gu_p___25 ;
  unsigned short *tmp___19 ;
  void *__gu_p___26 ;
  unsigned short *tmp___20 ;
  void *__gu_p___27 ;
  void *__gu_p___28 ;
  unsigned short *tmp___21 ;
  void *__gu_p___29 ;
  unsigned short *tmp___22 ;
  void *__gu_p___30 ;
  void *__gu_p___31 ;
  unsigned short *tmp___23 ;
  void *__gu_p___32 ;
  unsigned short *tmp___24 ;
  void *__gu_p___33 ;

  {
#line 77
  tmp = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p = (void *)tmp;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p) = 30U;
#line 77
  goto ldv_46637;
  case 2UL: 
#line 77
  put_unaligned_le16(30, __gu_p);
#line 77
  goto ldv_46637;
  case 4UL: 
#line 77
  put_unaligned_le32(30U, __gu_p);
#line 77
  goto ldv_46637;
  case 8UL: 
#line 77
  put_unaligned_le64(30ULL, __gu_p);
#line 77
  goto ldv_46637;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46637;
  }
  ldv_46637: 
#line 77
  tmp___0 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___0 = (void *)tmp___0;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___0) = 4U;
#line 77
  goto ldv_46644;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___0);
#line 77
  goto ldv_46644;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___0);
#line 77
  goto ldv_46644;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___0);
#line 77
  goto ldv_46644;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46644;
  }
  ldv_46644: 
#line 77
  __gu_p___1 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 77
  goto ldv_46651;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 77
  goto ldv_46651;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 77
  goto ldv_46651;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 77
  goto ldv_46651;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46651;
  }
  ldv_46651: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___1 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___2 = (void *)tmp___1;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___2) = 31U;
#line 77
  goto ldv_46658;
  case 2UL: 
#line 77
  put_unaligned_le16(31, __gu_p___2);
#line 77
  goto ldv_46658;
  case 4UL: 
#line 77
  put_unaligned_le32(31U, __gu_p___2);
#line 77
  goto ldv_46658;
  case 8UL: 
#line 77
  put_unaligned_le64(31ULL, __gu_p___2);
#line 77
  goto ldv_46658;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46658;
  }
  ldv_46658: 
#line 77
  tmp___2 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___3 = (void *)tmp___2;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___3) = 4U;
#line 77
  goto ldv_46665;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___3);
#line 77
  goto ldv_46665;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___3);
#line 77
  goto ldv_46665;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___3);
#line 77
  goto ldv_46665;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46665;
  }
  ldv_46665: 
#line 77
  __gu_p___4 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 77
  goto ldv_46672;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 77
  goto ldv_46672;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 77
  goto ldv_46672;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 77
  goto ldv_46672;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46672;
  }
  ldv_46672: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___3 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___5 = (void *)tmp___3;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___5) = 32U;
#line 77
  goto ldv_46679;
  case 2UL: 
#line 77
  put_unaligned_le16(32, __gu_p___5);
#line 77
  goto ldv_46679;
  case 4UL: 
#line 77
  put_unaligned_le32(32U, __gu_p___5);
#line 77
  goto ldv_46679;
  case 8UL: 
#line 77
  put_unaligned_le64(32ULL, __gu_p___5);
#line 77
  goto ldv_46679;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46679;
  }
  ldv_46679: 
#line 77
  tmp___4 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___6 = (void *)tmp___4;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___6) = 4U;
#line 77
  goto ldv_46686;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___6);
#line 77
  goto ldv_46686;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___6);
#line 77
  goto ldv_46686;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___6);
#line 77
  goto ldv_46686;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46686;
  }
  ldv_46686: 
#line 77
  __gu_p___7 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 77
  goto ldv_46693;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 77
  goto ldv_46693;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46693;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 77
  goto ldv_46693;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46693;
  }
  ldv_46693: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___5 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___8 = (void *)tmp___5;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___8) = 52U;
#line 77
  goto ldv_46700;
  case 2UL: 
#line 77
  put_unaligned_le16(49204, __gu_p___8);
#line 77
  goto ldv_46700;
  case 4UL: 
#line 77
  put_unaligned_le32(49204U, __gu_p___8);
#line 77
  goto ldv_46700;
  case 8UL: 
#line 77
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 77
  goto ldv_46700;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46700;
  }
  ldv_46700: 
#line 77
  tmp___6 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___9 = (void *)tmp___6;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 77
  goto ldv_46707;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 77
  goto ldv_46707;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46707;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 77
  goto ldv_46707;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46707;
  }
  ldv_46707: 
#line 77
  __len = (size_t )arg->verify_alg_len;
#line 77
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 77
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 77
  tmp___7 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___10 = (void *)tmp___7;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___10) = 51U;
#line 77
  goto ldv_46717;
  case 2UL: 
#line 77
  put_unaligned_le16(49203, __gu_p___10);
#line 77
  goto ldv_46717;
  case 4UL: 
#line 77
  put_unaligned_le32(49203U, __gu_p___10);
#line 77
  goto ldv_46717;
  case 8UL: 
#line 77
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 77
  goto ldv_46717;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46717;
  }
  ldv_46717: 
#line 77
  tmp___8 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___11 = (void *)tmp___8;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 77
  goto ldv_46724;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 77
  goto ldv_46724;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46724;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 77
  goto ldv_46724;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46724;
  }
  ldv_46724: 
#line 77
  __len___0 = (size_t )arg->cpu_mask_len;
#line 77
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 77
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 77
  tmp___9 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___12 = (void *)tmp___9;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___12) = 64U;
#line 77
  goto ldv_46734;
  case 2UL: 
#line 77
  put_unaligned_le16(49216, __gu_p___12);
#line 77
  goto ldv_46734;
  case 4UL: 
#line 77
  put_unaligned_le32(49216U, __gu_p___12);
#line 77
  goto ldv_46734;
  case 8UL: 
#line 77
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 77
  goto ldv_46734;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46734;
  }
  ldv_46734: 
#line 77
  tmp___10 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___13 = (void *)tmp___10;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 77
  goto ldv_46741;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 77
  goto ldv_46741;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46741;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 77
  goto ldv_46741;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46741;
  }
  ldv_46741: 
#line 77
  __len___1 = (size_t )arg->csums_alg_len;
#line 77
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 77
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 77
  tmp___11 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___14 = (void *)tmp___11;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___14) = 65U;
#line 77
  goto ldv_46751;
  case 2UL: 
#line 77
  put_unaligned_le16(32833, __gu_p___14);
#line 77
  goto ldv_46751;
  case 4UL: 
#line 77
  put_unaligned_le32(32833U, __gu_p___14);
#line 77
  goto ldv_46751;
  case 8UL: 
#line 77
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 77
  goto ldv_46751;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46751;
  }
  ldv_46751: 
#line 77
  tmp___12 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___15 = (void *)tmp___12;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___15) = 1U;
#line 77
  goto ldv_46758;
  case 2UL: 
#line 77
  put_unaligned_le16(1, __gu_p___15);
#line 77
  goto ldv_46758;
  case 4UL: 
#line 77
  put_unaligned_le32(1U, __gu_p___15);
#line 77
  goto ldv_46758;
  case 8UL: 
#line 77
  put_unaligned_le64(1ULL, __gu_p___15);
#line 77
  goto ldv_46758;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46758;
  }
  ldv_46758: 
#line 77
  *((char *)tags) = (char )arg->use_rle;
#line 77
  tags = tags + 1U;
#line 77
  tmp___13 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___16 = (void *)tmp___13;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___16) = 75U;
#line 77
  goto ldv_46765;
  case 2UL: 
#line 77
  put_unaligned_le16(75, __gu_p___16);
#line 77
  goto ldv_46765;
  case 4UL: 
#line 77
  put_unaligned_le32(75U, __gu_p___16);
#line 77
  goto ldv_46765;
  case 8UL: 
#line 77
  put_unaligned_le64(75ULL, __gu_p___16);
#line 77
  goto ldv_46765;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46765;
  }
  ldv_46765: 
#line 77
  tmp___14 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___17 = (void *)tmp___14;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___17) = 4U;
#line 77
  goto ldv_46772;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___17);
#line 77
  goto ldv_46772;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___17);
#line 77
  goto ldv_46772;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___17);
#line 77
  goto ldv_46772;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46772;
  }
  ldv_46772: 
#line 77
  __gu_p___18 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___18) = (unsigned char )arg->on_no_data;
#line 77
  goto ldv_46779;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->on_no_data), __gu_p___18);
#line 77
  goto ldv_46779;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46779;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->on_no_data, __gu_p___18);
#line 77
  goto ldv_46779;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46779;
  }
  ldv_46779: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___15 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___19 = (void *)tmp___15;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___19) = 76U;
#line 77
  goto ldv_46786;
  case 2UL: 
#line 77
  put_unaligned_le16(76, __gu_p___19);
#line 77
  goto ldv_46786;
  case 4UL: 
#line 77
  put_unaligned_le32(76U, __gu_p___19);
#line 77
  goto ldv_46786;
  case 8UL: 
#line 77
  put_unaligned_le64(76ULL, __gu_p___19);
#line 77
  goto ldv_46786;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46786;
  }
  ldv_46786: 
#line 77
  tmp___16 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___20 = (void *)tmp___16;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___20) = 4U;
#line 77
  goto ldv_46793;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___20);
#line 77
  goto ldv_46793;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___20);
#line 77
  goto ldv_46793;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___20);
#line 77
  goto ldv_46793;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46793;
  }
  ldv_46793: 
#line 77
  __gu_p___21 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___21) = (unsigned char )arg->c_plan_ahead;
#line 77
  goto ldv_46800;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_plan_ahead), __gu_p___21);
#line 77
  goto ldv_46800;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46800;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_plan_ahead, __gu_p___21);
#line 77
  goto ldv_46800;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46800;
  }
  ldv_46800: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___17 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___22 = (void *)tmp___17;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___22) = 77U;
#line 77
  goto ldv_46807;
  case 2UL: 
#line 77
  put_unaligned_le16(77, __gu_p___22);
#line 77
  goto ldv_46807;
  case 4UL: 
#line 77
  put_unaligned_le32(77U, __gu_p___22);
#line 77
  goto ldv_46807;
  case 8UL: 
#line 77
  put_unaligned_le64(77ULL, __gu_p___22);
#line 77
  goto ldv_46807;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46807;
  }
  ldv_46807: 
#line 77
  tmp___18 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___23 = (void *)tmp___18;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___23) = 4U;
#line 77
  goto ldv_46814;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___23);
#line 77
  goto ldv_46814;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___23);
#line 77
  goto ldv_46814;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___23);
#line 77
  goto ldv_46814;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46814;
  }
  ldv_46814: 
#line 77
  __gu_p___24 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___24) = (unsigned char )arg->c_delay_target;
#line 77
  goto ldv_46821;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_delay_target), __gu_p___24);
#line 77
  goto ldv_46821;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46821;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_delay_target, __gu_p___24);
#line 77
  goto ldv_46821;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46821;
  }
  ldv_46821: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___19 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___25 = (void *)tmp___19;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___25) = 78U;
#line 77
  goto ldv_46828;
  case 2UL: 
#line 77
  put_unaligned_le16(78, __gu_p___25);
#line 77
  goto ldv_46828;
  case 4UL: 
#line 77
  put_unaligned_le32(78U, __gu_p___25);
#line 77
  goto ldv_46828;
  case 8UL: 
#line 77
  put_unaligned_le64(78ULL, __gu_p___25);
#line 77
  goto ldv_46828;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46828;
  }
  ldv_46828: 
#line 77
  tmp___20 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___26 = (void *)tmp___20;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___26) = 4U;
#line 77
  goto ldv_46835;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___26);
#line 77
  goto ldv_46835;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___26);
#line 77
  goto ldv_46835;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___26);
#line 77
  goto ldv_46835;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46835;
  }
  ldv_46835: 
#line 77
  __gu_p___27 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___27) = (unsigned char )arg->c_fill_target;
#line 77
  goto ldv_46842;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_fill_target), __gu_p___27);
#line 77
  goto ldv_46842;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46842;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_fill_target, __gu_p___27);
#line 77
  goto ldv_46842;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46842;
  }
  ldv_46842: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___21 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___28 = (void *)tmp___21;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___28) = 79U;
#line 77
  goto ldv_46849;
  case 2UL: 
#line 77
  put_unaligned_le16(79, __gu_p___28);
#line 77
  goto ldv_46849;
  case 4UL: 
#line 77
  put_unaligned_le32(79U, __gu_p___28);
#line 77
  goto ldv_46849;
  case 8UL: 
#line 77
  put_unaligned_le64(79ULL, __gu_p___28);
#line 77
  goto ldv_46849;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46849;
  }
  ldv_46849: 
#line 77
  tmp___22 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___29 = (void *)tmp___22;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___29) = 4U;
#line 77
  goto ldv_46856;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___29);
#line 77
  goto ldv_46856;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___29);
#line 77
  goto ldv_46856;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___29);
#line 77
  goto ldv_46856;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46856;
  }
  ldv_46856: 
#line 77
  __gu_p___30 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___30) = (unsigned char )arg->c_max_rate;
#line 77
  goto ldv_46863;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_max_rate), __gu_p___30);
#line 77
  goto ldv_46863;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46863;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_max_rate, __gu_p___30);
#line 77
  goto ldv_46863;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46863;
  }
  ldv_46863: 
#line 77
  tags = tags + 4U;
#line 77
  tmp___23 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___31 = (void *)tmp___23;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___31) = 80U;
#line 77
  goto ldv_46870;
  case 2UL: 
#line 77
  put_unaligned_le16(80, __gu_p___31);
#line 77
  goto ldv_46870;
  case 4UL: 
#line 77
  put_unaligned_le32(80U, __gu_p___31);
#line 77
  goto ldv_46870;
  case 8UL: 
#line 77
  put_unaligned_le64(80ULL, __gu_p___31);
#line 77
  goto ldv_46870;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46870;
  }
  ldv_46870: 
#line 77
  tmp___24 = tags;
#line 77
  tags = tags + 1;
#line 77
  __gu_p___32 = (void *)tmp___24;
#line 77
  switch (2UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___32) = 4U;
#line 77
  goto ldv_46877;
  case 2UL: 
#line 77
  put_unaligned_le16(4, __gu_p___32);
#line 77
  goto ldv_46877;
  case 4UL: 
#line 77
  put_unaligned_le32(4U, __gu_p___32);
#line 77
  goto ldv_46877;
  case 8UL: 
#line 77
  put_unaligned_le64(4ULL, __gu_p___32);
#line 77
  goto ldv_46877;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46877;
  }
  ldv_46877: 
#line 77
  __gu_p___33 = (void *)tags;
#line 77
  switch (4UL) {
  case 1UL: 
#line 77
  *((u8 *)__gu_p___33) = (unsigned char )arg->c_min_rate;
#line 77
  goto ldv_46884;
  case 2UL: 
#line 77
  put_unaligned_le16((int )((unsigned short )arg->c_min_rate), __gu_p___33);
#line 77
  goto ldv_46884;
  case 4UL: 
#line 77
  put_unaligned_le32((unsigned int )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46884;
  case 8UL: 
#line 77
  put_unaligned_le64((unsigned long long )arg->c_min_rate, __gu_p___33);
#line 77
  goto ldv_46884;
  default: 
#line 77
  __bad_unaligned_access_size();
#line 77
  goto ldv_46884;
  }
  ldv_46884: 
#line 77
  tags = tags + 4U;
#line 77
  return (tags);
}
}
#line 108
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 108 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 106
  tmp = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p = (void *)tmp;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p) = 33U;
#line 106
  goto ldv_46972;
  case 2UL: 
#line 106
  put_unaligned_le16(33, __gu_p);
#line 106
  goto ldv_46972;
  case 4UL: 
#line 106
  put_unaligned_le32(33U, __gu_p);
#line 106
  goto ldv_46972;
  case 8UL: 
#line 106
  put_unaligned_le64(33ULL, __gu_p);
#line 106
  goto ldv_46972;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46972;
  }
  ldv_46972: 
#line 106
  tmp___0 = tags;
#line 106
  tags = tags + 1;
#line 106
  __gu_p___0 = (void *)tmp___0;
#line 106
  switch (2UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___0) = 4U;
#line 106
  goto ldv_46979;
  case 2UL: 
#line 106
  put_unaligned_le16(4, __gu_p___0);
#line 106
  goto ldv_46979;
  case 4UL: 
#line 106
  put_unaligned_le32(4U, __gu_p___0);
#line 106
  goto ldv_46979;
  case 8UL: 
#line 106
  put_unaligned_le64(4ULL, __gu_p___0);
#line 106
  goto ldv_46979;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46979;
  }
  ldv_46979: 
#line 106
  __gu_p___1 = (void *)tags;
#line 106
  switch (4UL) {
  case 1UL: 
#line 106
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 106
  goto ldv_46986;
  case 2UL: 
#line 106
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 106
  goto ldv_46986;
  case 4UL: 
#line 106
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46986;
  case 8UL: 
#line 106
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 106
  goto ldv_46986;
  default: 
#line 106
  __bad_unaligned_access_size();
#line 106
  goto ldv_46986;
  }
  ldv_46986: 
#line 106
  tags = tags + 4U;
#line 106
  return (tags);
}
}
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 142
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 146
  envp[0] = (char *)"HOME=/";
#line 146
  envp[1] = (char *)"TERM=linux";
#line 146
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 146
  envp[3] = 0;
#line 146
  envp[4] = 0;
#line 146
  envp[5] = 0;
#line 154
  argv[0] = (char *)(& usermode_helper);
#line 154
  argv[1] = cmd;
#line 154
  argv[2] = (char *)(& mb);
#line 154
  argv[3] = 0;
#line 157
  tmp = mdev_to_minor(mdev);
#line 157
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 159
  tmp___0 = get_net_conf(mdev);
#line 159
  if (tmp___0 != 0) {
#line 160
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 162
    afs = (char *)"ipv6";
#line 163
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 165
    goto ldv_47307;
    case 2: 
#line 167
    afs = (char *)"ipv4";
#line 168
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 170
    goto ldv_47307;
    default: 
#line 172
    afs = (char *)"ssocks";
#line 173
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_47307: 
#line 176
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 177
    envp[3] = (char *)(& af);
#line 178
    envp[4] = (char *)(& ad);
#line 179
    put_net_conf(mdev);
  } else {

  }
#line 184
  drbd_md_sync(mdev);
#line 186
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s\n",
            (char *)(& usermode_helper), cmd, (char *)(& mb));
#line 188
  drbd_bcast_ev_helper(mdev, cmd);
#line 189
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 190
  if (ret != 0) {
#line 191
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
             (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 195
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "helper command: %s %s %s exit code %u (0x%x)\n",
              (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255,
              ret);
  }
#line 199
  if (ret < 0) {
#line 200
    ret = 0;
  } else {

  }
#line 202
  return (ret);
}
}
#line 205 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 212
  if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 212
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            212);
  } else {

  }
#line 214
  tmp = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 214
  if (tmp != 0) {
#line 215
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 216
    put_ldev(mdev);
  } else {
#line 218
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Not fencing peer, I\'m not even Consistent myself.\n");
#line 219
    nps = (enum drbd_disk_state )mdev->state.ldv_35955.pdsk;
#line 220
    goto out;
  }
#line 223
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 225
  switch ((r >> 8) & 255) {
  case 3: 
#line 227
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 228
  nps = D_INCONSISTENT;
#line 229
  goto ldv_47319;
  case 4: 
#line 231
  ex_to_string = (char *)"peer was fenced";
#line 232
  nps = D_OUTDATED;
#line 233
  goto ldv_47319;
  case 5: ;
#line 235
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 16U) {
#line 237
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 238
    nps = D_OUTDATED;
  } else {
#line 240
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 241
    nps = (enum drbd_disk_state )mdev->state.ldv_35955.pdsk;
  }
#line 243
  goto ldv_47319;
  case 6: 
#line 247
  ex_to_string = (char *)"peer is active";
#line 248
  dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Peer is primary, outdating myself.\n");
#line 249
  nps = D_UNKNOWN;
#line 250
  val.i = 0U;
#line 250
  val.ldv_35955.disk = 5U;
#line 250
  mask.i = 0U;
#line 250
  mask.ldv_35955.disk = 15U;
#line 250
  _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 251
  goto ldv_47319;
  case 7: ;
#line 253
  if ((unsigned int )fp != 2U) {
#line 254
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer() = 7 && fencing != Stonith !!!\n");
  } else {

  }
#line 255
  ex_to_string = (char *)"peer was stonithed";
#line 256
  nps = D_OUTDATED;
#line 257
  goto ldv_47319;
  default: 
#line 260
  nps = D_UNKNOWN;
#line 261
  dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper broken, returned %d\n",
          (r >> 8) & 255);
#line 262
  return (nps);
  }
  ldv_47319: 
#line 265
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "fence-peer helper returned %d (%s)\n",
            (r >> 8) & 255, ex_to_string);
  out: ;
#line 269
  if ((unsigned int )*((unsigned char *)mdev + 2014UL) != 0U && (unsigned int )nps > 5U) {
#line 272
    val___0.i = 0U;
#line 272
    val___0.ldv_35955.susp_fen = 0U;
#line 272
    mask___0.i = 0U;
#line 272
    mask___0.ldv_35955.susp_fen = 1U;
#line 272
    _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
  } else {

  }
#line 275
  return (nps);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int _try_outdate_peer_async(void *data ) 
{ 
  struct drbd_conf *mdev ;
  enum drbd_disk_state nps ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 280
  mdev = (struct drbd_conf *)data;
#line 283
  nps = drbd_try_outdate_peer(mdev);
#line 284
  val.i = 0U;
#line 284
  val.ldv_35955.pdsk = (unsigned char )nps;
#line 284
  mask.i = 0U;
#line 284
  mask.ldv_35955.pdsk = 15U;
#line 284
  drbd_request_state(mdev, mask, val);
#line 286
  return (0);
}
}
#line 289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_try_outdate_peer_async(struct drbd_conf *mdev ) 
{ 
  struct task_struct *opa ;
  struct task_struct *__k ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;

  {
#line 293
  tmp = mdev_to_minor(mdev);
#line 293
  tmp___0 = kthread_create(& _try_outdate_peer_async, (void *)mdev, "drbd%d_a_helper",
                           tmp);
#line 293
  __k = tmp___0;
#line 293
  tmp___1 = IS_ERR((void const   *)__k);
#line 293
  if (tmp___1 == 0L) {
#line 293
    wake_up_process(__k);
  } else {

  }
#line 293
  opa = __k;
#line 294
  tmp___2 = IS_ERR((void const   *)opa);
#line 294
  if (tmp___2 != 0L) {
#line 295
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "out of mem, failed to invoke fence-peer helper\n");
  } else {

  }
#line 296
  return;
}
}
#line 298 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 300
  max_tries = 4;
#line 301
  r = 0;
#line 302
  try = 0;
#line 303
  forced = 0;
#line 307
  if ((unsigned int )new_role == 1U) {
#line 308
    request_ping(mdev);
  } else {

  }
#line 310
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 312
  mask.i = 0U;
#line 312
  mask.ldv_35955.role = 3U;
#line 313
  val.i = 0U;
#line 313
  val.ldv_35955.role = (unsigned char )new_role;
#line 315
  goto ldv_47360;
  ldv_47363: 
#line 316
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 320
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 321
    val.ldv_35955.pdsk = 0U;
#line 322
    mask.ldv_35955.pdsk = 0U;
#line 323
    goto ldv_47360;
  } else {

  }
#line 326
  if ((r == -2 && force != 0) && ((int )mdev->state.ldv_35955.disk <= 7 && (int )mdev->state.ldv_35955.disk > 3)) {
#line 329
    mask.ldv_35955.disk = 15U;
#line 330
    val.ldv_35955.disk = 8U;
#line 331
    forced = 1;
#line 332
    goto ldv_47360;
  } else {

  }
#line 335
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 2013UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 337
    if (*((unsigned int *)mdev + 503UL) != 49152U) {
#line 337
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n",
              (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
              337);
    } else {

    }
#line 338
    nps = drbd_try_outdate_peer(mdev);
#line 340
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 341
      val.ldv_35955.disk = 8U;
#line 342
      mask.ldv_35955.disk = 15U;
    } else {

    }
#line 345
    val.ldv_35955.pdsk = (unsigned char )nps;
#line 346
    mask.ldv_35955.pdsk = 15U;
#line 348
    goto ldv_47360;
  } else {

  }
#line 351
  if (r == 2) {
#line 352
    goto fail;
  } else {

  }
#line 353
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 354
    nps = drbd_try_outdate_peer(mdev);
#line 356
    if (force != 0 && (unsigned int )nps > 5U) {
#line 357
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced into split brain situation!\n");
#line 358
      nps = D_OUTDATED;
    } else {

    }
#line 361
    mask.ldv_35955.pdsk = 15U;
#line 362
    val.ldv_35955.pdsk = (unsigned char )nps;
#line 364
    goto ldv_47360;
  } else {

  }
#line 366
  if (r == -1) {
#line 369
    tmp = get_current();
#line 369
    tmp->state = 1L;
#line 370
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 371
    if (try < max_tries) {
#line 372
      try = max_tries + -1;
    } else {

    }
#line 373
    goto ldv_47360;
  } else {

  }
#line 375
  if (r <= 0) {
#line 376
    r = _drbd_request_state(mdev, mask, val, 6);
#line 378
    if (r <= 0) {
#line 379
      goto fail;
    } else {

    }
  } else {

  }
#line 381
  goto ldv_47362;
  ldv_47360: 
#line 315
  tmp___0 = try;
#line 315
  try = try + 1;
#line 315
  if (tmp___0 < max_tries) {
#line 316
    goto ldv_47363;
  } else {

  }
  ldv_47362: ;
#line 384
  if (r <= 0) {
#line 385
    goto fail;
  } else {

  }
#line 387
  if (forced != 0) {
#line 388
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Forced to consider local data as UpToDate!\n");
  } else {

  }
#line 391
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___1 == 0) {
#line 391
    goto ldv_47364;
  } else {

  }
#line 391
  tmp___2 = get_current();
#line 391
  __wait.flags = 0U;
#line 391
  __wait.private = (void *)tmp___2;
#line 391
  __wait.func = & autoremove_wake_function;
#line 391
  __wait.task_list.next = & __wait.task_list;
#line 391
  __wait.task_list.prev = & __wait.task_list;
  ldv_47367: 
#line 391
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 391
  tmp___3 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 391
  if (tmp___3 == 0) {
#line 391
    goto ldv_47366;
  } else {

  }
#line 391
  schedule();
#line 391
  goto ldv_47367;
  ldv_47366: 
#line 391
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47364: ;
#line 393
  if ((unsigned int )new_role == 2U) {
#line 394
    set_disk_ro(mdev->vdisk, 1);
#line 395
    tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 395
    if (tmp___4 != 0) {
#line 396
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 397
      put_ldev(mdev);
    } else {

    }
  } else {
#line 400
    tmp___5 = get_net_conf(mdev);
#line 400
    if (tmp___5 != 0) {
#line 401
      (mdev->net_conf)->want_lose = 0U;
#line 402
      put_net_conf(mdev);
    } else {

    }
#line 404
    set_disk_ro(mdev->vdisk, 0);
#line 405
    tmp___6 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 405
    if (tmp___6 != 0) {
#line 406
      if ((((int )mdev->state.ldv_35955.conn <= 9 || (int )mdev->state.ldv_35955.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 409
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 411
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 412
      put_ldev(mdev);
    } else {

    }
  }
#line 416
  if ((unsigned int )new_role == 2U) {
#line 416
    tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 416
    if (tmp___7 != 0) {
#line 417
      drbd_al_to_on_disk_bm(mdev);
#line 418
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 421
  if ((int )mdev->state.ldv_35955.conn > 8) {
#line 423
    if (forced != 0) {
#line 424
      drbd_send_uuids(mdev);
    } else {

    }
#line 425
    drbd_send_state(mdev);
  } else {

  }
#line 428
  drbd_md_sync(mdev);
#line 430
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 432
  mutex_unlock(& mdev->state_mutex);
#line 433
  return (r);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(int minor , int create ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 440
  if ((unsigned int )minor >= minor_count) {
#line 441
    return (0);
  } else {

  }
#line 443
  mdev = minor_to_mdev((unsigned int )minor);
#line 445
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && create != 0) {
#line 446
    disk = 0;
#line 447
    mdev = drbd_new_device((unsigned int )minor);
#line 449
    spin_lock_irq(& drbd_pp_lock);
#line 450
    if ((unsigned long )*(minor_table + (unsigned long )minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 451
      *(minor_table + (unsigned long )minor) = mdev;
#line 452
      disk = mdev->vdisk;
#line 453
      mdev = 0;
    } else {

    }
#line 455
    spin_unlock_irq(& drbd_pp_lock);
#line 457
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 460
      add_disk(disk);
    } else {
#line 462
      drbd_free_mdev(mdev);
    }
#line 464
    mdev = minor_to_mdev((unsigned int )minor);
  } else {

  }
#line 467
  return (mdev);
}
}
#line 470 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 475
  memset((void *)(& primary_args), 0, 4UL);
#line 476
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 476
  if (tmp == 0) {
#line 477
    reply->ret_code = 126;
#line 478
    return (0);
  } else {

  }
#line 481
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.primary_force);
#line 484
  return (0);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 490
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 492
  return (0);
}
}
#line 497 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 500
  md_size_sect = 0UL;
#line 501
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 504
  bdev->md.md_size_sect = 262144U;
#line 505
  tmp = drbd_md_ss__(mdev, bdev);
#line 505
  bdev->md.md_offset = (u64 )tmp;
#line 506
  bdev->md.al_offset = 8;
#line 507
  bdev->md.bm_offset = 72;
#line 508
  goto ldv_47391;
  case -2: 
#line 511
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 511
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 512
  bdev->md.md_offset = 0ULL;
#line 513
  bdev->md.al_offset = 8;
#line 514
  bdev->md.bm_offset = 72;
#line 515
  goto ldv_47391;
  case -1: ;
  case -3: 
#line 518
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 518
  bdev->md.md_offset = (u64 )tmp___1;
#line 520
  bdev->md.al_offset = -64;
#line 522
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 523
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 524
  md_size_sect = md_size_sect >> 15;
#line 525
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 529
  md_size_sect = md_size_sect + 72UL;
#line 531
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 533
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 534
  goto ldv_47391;
  }
  ldv_47391: ;
#line 537
  return;
}
}
#line 538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 541
  units[0] = 75;
#line 541
  units[1] = 77;
#line 541
  units[2] = 71;
#line 541
  units[3] = 84;
#line 541
  units[4] = 80;
#line 541
  units[5] = 69;
#line 542
  base = 0;
#line 543
  goto ldv_47402;
  ldv_47401: 
#line 545
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 546
  base = base + 1;
  ldv_47402: ;
#line 543
  if (size > 9999ULL) {
#line 544
    goto ldv_47401;
  } else {

  }
#line 548
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 550
  return (buf);
}
}
#line 566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  int tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;

  {
#line 568
  set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
#line 569
  tmp = is_susp(mdev->state);
#line 569
  if (tmp != 0) {
#line 570
    return;
  } else {

  }
#line 571
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 571
  if (tmp___0 == 0) {
#line 571
    goto ldv_47407;
  } else {

  }
#line 571
  tmp___1 = get_current();
#line 571
  __wait.flags = 0U;
#line 571
  __wait.private = (void *)tmp___1;
#line 571
  __wait.func = & autoremove_wake_function;
#line 571
  __wait.task_list.next = & __wait.task_list;
#line 571
  __wait.task_list.prev = & __wait.task_list;
  ldv_47410: 
#line 571
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 571
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 571
  if (tmp___2 == 0) {
#line 571
    goto ldv_47409;
  } else {

  }
#line 571
  schedule();
#line 571
  goto ldv_47410;
  ldv_47409: 
#line 571
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47407: ;
#line 574
  return;
}
}
#line 574 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 576
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 577
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 578
  return;
}
}
#line 587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev , enum dds_flags flags ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  long tmp___3 ;
  char *tmp___4 ;
  sector_t tmp___5 ;
  sector_t tmp___6 ;
  sector_t tmp___7 ;
  int tmp___8 ;

  {
#line 595
  rv = 0;
#line 606
  drbd_suspend_io(mdev);
#line 609
  tmp = lc_try_lock(mdev->act_log);
#line 609
  if (tmp != 0) {
#line 609
    goto ldv_47426;
  } else {

  }
#line 609
  tmp___0 = get_current();
#line 609
  __wait.flags = 0U;
#line 609
  __wait.private = (void *)tmp___0;
#line 609
  __wait.func = & autoremove_wake_function;
#line 609
  __wait.task_list.next = & __wait.task_list;
#line 609
  __wait.task_list.prev = & __wait.task_list;
  ldv_47429: 
#line 609
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 609
  tmp___1 = lc_try_lock(mdev->act_log);
#line 609
  if (tmp___1 != 0) {
#line 609
    goto ldv_47428;
  } else {

  }
#line 609
  schedule();
#line 609
  goto ldv_47429;
  ldv_47428: 
#line 609
  finish_wait(& mdev->al_wait, & __wait);
  ldv_47426: 
#line 611
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 612
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 613
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 616
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 618
  size = drbd_new_dev_size(mdev, mdev->ldev, (int )flags & 1);
#line 620
  tmp___5 = drbd_get_capacity(mdev->this_bdev);
#line 620
  if (tmp___5 != size) {
#line 620
    goto _L;
  } else {
#line 620
    tmp___6 = drbd_bm_capacity(mdev);
#line 620
    if (tmp___6 != size) {
      _L: /* CIL Label */ 
#line 623
      err = drbd_bm_resize(mdev, size, ((unsigned int )flags & 2U) == 0U);
#line 624
      tmp___3 = __builtin_expect(err != 0, 0L);
#line 624
      if (tmp___3 != 0L) {
#line 626
        tmp___2 = drbd_bm_capacity(mdev);
#line 626
        size = tmp___2 >> 1;
#line 627
        if (size == 0UL) {
#line 628
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "OUT OF MEMORY! Could not allocate bitmap!\n");
        } else {
#line 631
          dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                  size);
        }
#line 635
        rv = dev_size_error;
      } else {

      }
#line 638
      drbd_set_my_capacity(mdev, size);
#line 639
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 640
      tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 640
      _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "size = %s (%llu KB)\n",
                tmp___4, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 643
  if ((int )rv == -1) {
#line 644
    goto out;
  } else {

  }
#line 646
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 648
  tmp___7 = drbd_md_first_sector(mdev->ldev);
#line 648
  md_moved = tmp___7 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 651
  if (la_size_changed != 0 || md_moved != 0) {
#line 652
    drbd_al_shrink(mdev);
#line 653
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing the whole bitmap, %s\n",
              la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 656
    tmp___8 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 656
    rv = (enum determine_dev_size )tmp___8;
#line 657
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 660
  if (size > la_size) {
#line 661
    rv = grew;
  } else {

  }
#line 662
  if (size < la_size) {
#line 663
    rv = shrunk;
  } else {

  }
  out: 
#line 665
  lc_unlock(mdev->act_log);
#line 666
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 667
  drbd_resume_io(mdev);
#line 669
  return (rv);
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           int assume_peer_has_space ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;

  {
#line 675
  p_size = mdev->p_size;
#line 676
  la_size = (sector_t )bdev->md.la_size_sect;
#line 678
  u_size = (sector_t )bdev->dc.disk_size;
#line 679
  size = 0UL;
#line 681
  m_size = drbd_get_max_capacity___1(bdev);
#line 683
  if ((int )mdev->state.ldv_35955.conn <= 9 && assume_peer_has_space != 0) {
#line 684
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resize while not connected was forced by the user!\n");
#line 685
    p_size = m_size;
  } else {

  }
#line 688
  if (p_size != 0UL && m_size != 0UL) {
#line 689
    __min1 = p_size;
#line 689
    __min2 = m_size;
#line 689
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 691
  if (la_size != 0UL) {
#line 692
    size = la_size;
#line 693
    if (m_size != 0UL && m_size < size) {
#line 694
      size = m_size;
    } else {

    }
#line 695
    if (p_size != 0UL && p_size < size) {
#line 696
      size = p_size;
    } else {

    }
  } else {
#line 698
    if (m_size != 0UL) {
#line 699
      size = m_size;
    } else {

    }
#line 700
    if (p_size != 0UL) {
#line 701
      size = p_size;
    } else {

    }
  }
#line 705
  if (size == 0UL) {
#line 706
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Both nodes diskless!\n");
  } else {

  }
#line 708
  if (u_size != 0UL) {
#line 709
    if (u_size > size) {
#line 710
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Requested disk size is too big (%lu > %lu)\n",
              u_size >> 1, size >> 1);
    } else {
#line 713
      size = u_size;
    }
  } else {

  }
#line 716
  return (size);
}
}
#line 727 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;

  {
#line 734
  _b = mdev->sync_conf.al_extents <= 6;
#line 734
  if (_b != 0) {
#line 734
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            734);
  } else {

  }
#line 734
  if (_b != 0) {
#line 735
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 737
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 739
    return (0);
  } else {

  }
#line 741
  in_use = 0U;
#line 742
  t = mdev->act_log;
#line 743
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 746
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 747
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Cannot allocate act_log lru!\n");
#line 748
    return (-12);
  } else {

  }
#line 750
  spin_lock_irq(& mdev->al_lock);
#line 751
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 752
    i = 0;
#line 752
    goto ldv_47457;
    ldv_47456: 
#line 753
    e = lc_element_by_index(t, (unsigned int )i);
#line 754
    if (e->refcnt != 0U) {
#line 755
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refcnt(%d)==%d\n",
              e->lc_number, e->refcnt);
    } else {

    }
#line 757
    in_use = e->refcnt + in_use;
#line 752
    i = i + 1;
    ldv_47457: ;
#line 752
    if ((unsigned int )i < t->nr_elements) {
#line 753
      goto ldv_47456;
    } else {

    }

  } else {

  }
#line 760
  if (in_use == 0U) {
#line 761
    mdev->act_log = n;
  } else {

  }
#line 762
  spin_unlock_irq(& mdev->al_lock);
#line 763
  if (in_use != 0U) {
#line 764
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Activity log still in use!\n");
#line 765
    lc_destroy(n);
#line 766
    return (-16);
  } else
#line 768
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 769
    lc_destroy(t);
  } else {

  }
#line 771
  drbd_md_mark_dirty(mdev);
#line 772
  return (0);
}
}
#line 775 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  unsigned int tmp___1 ;

  {
#line 777
  q = mdev->rq_queue;
#line 778
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 779
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 781
  tmp = queue_max_sectors(b);
#line 781
  tmp___0 = queue_logical_block_size(b);
#line 781
  _min1 = tmp * (unsigned int )tmp___0;
#line 781
  _min2 = max_seg_s;
#line 781
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 783
  blk_queue_max_hw_sectors(q, max_seg_s >> 9);
#line 784
  blk_queue_max_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 785
  blk_queue_max_segment_size(q, max_seg_s);
#line 786
  blk_queue_logical_block_size(q, 512);
#line 787
  blk_queue_segment_boundary(q, 4095UL);
#line 788
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 790
  tmp___1 = queue_max_segment_size(q);
#line 790
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max_segment_size ( = BIO size ) = %u\n",
            tmp___1);
#line 792
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 793
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
              q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 796
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 798
  return;
}
}
#line 807 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 809
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 809
  if (tmp == 0) {
#line 809
    goto ldv_47472;
  } else {

  }
#line 809
  tmp___0 = get_current();
#line 809
  __wait.flags = 0U;
#line 809
  __wait.private = (void *)tmp___0;
#line 809
  __wait.func = & autoremove_wake_function;
#line 809
  __wait.task_list.next = & __wait.task_list;
#line 809
  __wait.task_list.prev = & __wait.task_list;
  ldv_47475: 
#line 809
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 809
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 809
  if (tmp___1 == 0) {
#line 809
    goto ldv_47474;
  } else {

  }
#line 809
  schedule();
#line 809
  goto ldv_47475;
  ldv_47474: 
#line 809
  finish_wait(& mdev->state_wait, & __wait);
  ldv_47472: 
#line 810
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 810
  if (tmp___2 == 0) {
#line 810
    goto ldv_47476;
  } else {

  }
#line 810
  tmp___3 = get_current();
#line 810
  __wait___0.flags = 0U;
#line 810
  __wait___0.private = (void *)tmp___3;
#line 810
  __wait___0.func = & autoremove_wake_function;
#line 810
  __wait___0.task_list.next = & __wait___0.task_list;
#line 810
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_47479: 
#line 810
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 810
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 810
  if (tmp___4 == 0) {
#line 810
    goto ldv_47478;
  } else {

  }
#line 810
  schedule();
#line 810
  goto ldv_47479;
  ldv_47478: 
#line 810
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_47476: 
#line 811
  drbd_thread_start(& mdev->worker);
#line 812
  drbd_flush_workqueue(mdev);
#line 813
  return;
}
}
#line 818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 820
  spin_lock_irq(& mdev->req_lock);
#line 821
  if (((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U && (unsigned int )*((unsigned short *)mdev + 1006UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 2012UL) == 2U) {
#line 824
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 825
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 827
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 828
  spin_unlock_irq(& mdev->req_lock);
#line 829
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 830
  return;
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_suspend_al(struct drbd_conf *mdev ) 
{ 
  int s ;
  int tmp ;
  int tmp___0 ;

  {
#line 835
  s = 0;
#line 837
  tmp = lc_try_lock(mdev->act_log);
#line 837
  if (tmp != 0) {
#line 838
    drbd_al_shrink(mdev);
#line 839
    lc_unlock(mdev->act_log);
  } else {
#line 841
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Failed to lock al in drbd_suspend_al()\n");
#line 842
    return;
  }
#line 845
  spin_lock_irq(& mdev->req_lock);
#line 846
  if ((int )mdev->state.ldv_35955.conn <= 9) {
#line 847
    tmp___0 = test_and_set_bit(28, (unsigned long volatile   *)(& mdev->flags));
#line 847
    s = tmp___0 == 0;
  } else {

  }
#line 849
  spin_unlock_irq(& mdev->req_lock);
#line 851
  if (s != 0) {
#line 852
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Suspended AL updates\n");
  } else {

  }
#line 853
  return;
}
}
#line 857 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  unsigned int max_seg_s ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  int tmp___3 ;
  int prot ;
  int tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  long tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  sector_t tmp___14 ;
  sector_t tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned short tmp___23 ;
  struct page *page ;
  struct page *tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  sector_t tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  unsigned long tmp___38 ;
  unsigned long tmp___39 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 864
  nbc = 0;
#line 866
  resync_lru = 0;
#line 870
  cp_discovered = 0;
#line 873
  drbd_reconfig_start(mdev);
#line 876
  if ((int )mdev->state.ldv_35955.disk > 0) {
#line 877
    retcode = ERR_DISK_CONFIGURED;
#line 878
    goto fail;
  } else {

  }
#line 884
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 884
  if (tmp == 0) {
#line 884
    goto ldv_47507;
  } else {

  }
#line 884
  tmp___0 = get_current();
#line 884
  __wait.flags = 0U;
#line 884
  __wait.private = (void *)tmp___0;
#line 884
  __wait.func = & autoremove_wake_function;
#line 884
  __wait.task_list.next = & __wait.task_list;
#line 884
  __wait.task_list.prev = & __wait.task_list;
  ldv_47510: 
#line 884
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 884
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 884
  if (tmp___1 == 0) {
#line 884
    goto ldv_47509;
  } else {

  }
#line 884
  schedule();
#line 884
  goto ldv_47510;
  ldv_47509: 
#line 884
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_47507: 
#line 887
  tmp___2 = kzalloc___2(408UL, 208U);
#line 887
  nbc = (struct drbd_backing_dev *)tmp___2;
#line 888
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 889
    retcode = ERR_NOMEM;
#line 890
    goto fail;
  } else {

  }
#line 893
  nbc->dc.disk_size = 0ULL;
#line 894
  nbc->dc.on_io_error = 0;
#line 895
  nbc->dc.fencing = 0;
#line 896
  nbc->dc.max_bio_bvecs = 0;
#line 898
  tmp___3 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 898
  if (tmp___3 == 0) {
#line 899
    retcode = ERR_MANDATORY_TAG;
#line 900
    goto fail;
  } else {

  }
#line 903
  if (nbc->dc.meta_dev_idx < -3) {
#line 904
    retcode = ERR_MD_IDX_INVALID;
#line 905
    goto fail;
  } else {

  }
#line 908
  tmp___4 = get_net_conf(mdev);
#line 908
  if (tmp___4 != 0) {
#line 909
    prot = (mdev->net_conf)->wire_protocol;
#line 910
    put_net_conf(mdev);
#line 911
    if (nbc->dc.fencing == 2 && prot == 1) {
#line 912
      retcode = ERR_STONITH_AND_PROT_A;
#line 913
      goto fail;
    } else {

    }
  } else {

  }
#line 917
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 918
  tmp___6 = IS_ERR((void const   *)nbc->lo_file);
#line 918
  if (tmp___6 != 0L) {
#line 919
    tmp___5 = PTR_ERR((void const   *)nbc->lo_file);
#line 919
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.backing_dev), tmp___5);
#line 921
    nbc->lo_file = 0;
#line 922
    retcode = ERR_OPEN_DISK;
#line 923
    goto fail;
  } else {

  }
#line 926
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 928
  if (((int )inode->i_mode & 61440) != 24576) {
#line 929
    retcode = ERR_DISK_NOT_BDEV;
#line 930
    goto fail;
  } else {

  }
#line 933
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 934
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 934
  if (tmp___8 != 0L) {
#line 935
    tmp___7 = PTR_ERR((void const   *)nbc->md_file);
#line 935
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "open(\"%s\") failed with %ld\n",
            (unsigned char *)(& nbc->dc.meta_dev), tmp___7);
#line 937
    nbc->md_file = 0;
#line 938
    retcode = ERR_OPEN_MD_DISK;
#line 939
    goto fail;
  } else {

  }
#line 942
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 944
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 945
    retcode = ERR_MD_NOT_BDEV;
#line 946
    goto fail;
  } else {

  }
#line 949
  nbc->backing_bdev = inode->ldv_23364.i_bdev;
#line 950
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 950
  if (tmp___9 != 0) {
#line 951
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 956
    retcode = ERR_BDCLAIM_DISK;
#line 957
    goto fail;
  } else {

  }
#line 960
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 963
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 964
    retcode = ERR_NOMEM;
#line 965
    goto release_bdev_fail;
  } else {

  }
#line 975
  nbc->md_bdev = inode2->ldv_23364.i_bdev;
#line 976
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 976
  if (tmp___10 != 0) {
#line 978
    retcode = ERR_BDCLAIM_MD_DISK;
#line 979
    goto release_bdev_fail;
  } else {

  }
#line 982
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 985
    retcode = ERR_MD_IDX_INVALID;
#line 986
    goto release_bdev2_fail;
  } else {

  }
#line 990
  drbd_md_set_sector_offsets(mdev, nbc);
#line 992
  tmp___12 = drbd_get_max_capacity___1(nbc);
#line 992
  if ((unsigned long long )tmp___12 < nbc->dc.disk_size) {
#line 993
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 993
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "max capacity %llu smaller than disk size %llu\n",
            (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 996
    retcode = ERR_DISK_TO_SMALL;
#line 997
    goto release_bdev2_fail;
  } else {

  }
#line 1000
  if (nbc->dc.meta_dev_idx < 0) {
#line 1001
    max_possible_sectors = 34359738368UL;
#line 1003
    min_md_device_sectors = 2048UL;
  } else {
#line 1005
    max_possible_sectors = 8587575296UL;
#line 1006
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 1009
  tmp___13 = drbd_get_capacity(nbc->md_bdev);
#line 1009
  if (tmp___13 < min_md_device_sectors) {
#line 1010
    retcode = ERR_MD_DISK_TO_SMALL;
#line 1011
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
             (unsigned long long )min_md_device_sectors);
#line 1014
    goto release_bdev2_fail;
  } else {

  }
#line 1019
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 1019
  tmp___15 = drbd_get_capacity(mdev->this_bdev);
#line 1019
  if (tmp___14 < tmp___15) {
#line 1021
    retcode = ERR_DISK_TO_SMALL;
#line 1022
    goto release_bdev2_fail;
  } else {

  }
#line 1025
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 1027
  if (nbc->known_size > max_possible_sectors) {
#line 1028
    dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
             (unsigned long long )max_possible_sectors);
#line 1031
    if (nbc->dc.meta_dev_idx >= 0) {
#line 1032
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "==>> using internal or flexible meta data may help <<==\n");
    } else {

    }
  } else {

  }
#line 1036
  drbd_suspend_io(mdev);
#line 1038
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1038
  if (tmp___16 == 0) {
#line 1038
    goto ldv_47514;
  } else {
#line 1038
    tmp___17 = is_susp(mdev->state);
#line 1038
    if (tmp___17 != 0) {
#line 1038
      goto ldv_47514;
    } else {

    }
  }
#line 1038
  tmp___18 = get_current();
#line 1038
  __wait___0.flags = 0U;
#line 1038
  __wait___0.private = (void *)tmp___18;
#line 1038
  __wait___0.func = & autoremove_wake_function;
#line 1038
  __wait___0.task_list.next = & __wait___0.task_list;
#line 1038
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_47517: 
#line 1038
  prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 1038
  tmp___19 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 1038
  if (tmp___19 == 0) {
#line 1038
    goto ldv_47516;
  } else {
#line 1038
    tmp___20 = is_susp(mdev->state);
#line 1038
    if (tmp___20 != 0) {
#line 1038
      goto ldv_47516;
    } else {

    }
  }
#line 1038
  schedule();
#line 1038
  goto ldv_47517;
  ldv_47516: 
#line 1038
  finish_wait(& mdev->misc_wait, & __wait___0);
  ldv_47514: 
#line 1040
  drbd_flush_workqueue(mdev);
#line 1042
  val.i = 0U;
#line 1042
  val.ldv_35955.disk = 1U;
#line 1042
  mask.i = 0U;
#line 1042
  mask.ldv_35955.disk = 15U;
#line 1042
  tmp___21 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1042
  retcode = (enum drbd_ret_codes )tmp___21;
#line 1043
  drbd_resume_io(mdev);
#line 1044
  if ((unsigned int )retcode == 0U) {
#line 1045
    goto release_bdev2_fail;
  } else {

  }
#line 1047
  tmp___22 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 1047
  if (tmp___22 == 0) {
#line 1048
    goto force_diskless;
  } else {

  }
#line 1050
  drbd_md_set_sector_offsets(mdev, nbc);
#line 1053
  tmp___23 = bdev_logical_block_size(nbc->md_bdev);
#line 1053
  logical_block_size = (int )tmp___23;
#line 1054
  if (logical_block_size == 0) {
#line 1055
    logical_block_size = 512;
  } else {

  }
#line 1057
  if (logical_block_size != 512) {
#line 1058
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 1059
      tmp___24 = alloc_pages(16U, 0U);
#line 1059
      page = tmp___24;
#line 1060
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 1061
        goto force_diskless_dec;
      } else {

      }
#line 1063
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Meta data\'s bdev logical_block_size = %d != %d\n",
               logical_block_size, 512);
#line 1065
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Workaround engaged (has performance impact).\n");
#line 1067
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1071
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1072
    tmp___25 = drbd_bm_init(mdev);
#line 1072
    if (tmp___25 != 0) {
#line 1073
      retcode = ERR_NOMEM;
#line 1074
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1078
  tmp___26 = drbd_md_read(mdev, nbc);
#line 1078
  retcode = (enum drbd_ret_codes )tmp___26;
#line 1079
  if ((unsigned int )retcode != 101U) {
#line 1080
    goto force_diskless_dec;
  } else {

  }
#line 1082
  if (((int )mdev->state.ldv_35955.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 1085
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Can only attach to data with current UUID=%016llX\n",
            mdev->ed_uuid);
#line 1087
    retcode = ERR_DATA_NOT_CURRENT;
#line 1088
    goto force_diskless_dec;
  } else {

  }
#line 1092
  tmp___27 = drbd_check_al_size(mdev);
#line 1092
  if (tmp___27 != 0) {
#line 1093
    retcode = ERR_NOMEM;
#line 1094
    goto force_diskless_dec;
  } else {

  }
#line 1098
  tmp___28 = drbd_md_test_flag(nbc, 1);
#line 1098
  if (tmp___28 != 0) {
#line 1098
    tmp___29 = drbd_new_dev_size(mdev, nbc, 0);
#line 1098
    if ((unsigned long long )tmp___29 < nbc->md.la_size_sect) {
#line 1100
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "refusing to truncate a consistent device\n");
#line 1101
      retcode = ERR_DISK_TO_SMALL;
#line 1102
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 1105
  tmp___30 = drbd_al_read_log(mdev, nbc);
#line 1105
  if (tmp___30 == 0) {
#line 1106
    retcode = ERR_IO_MD_DISK;
#line 1107
    goto force_diskless_dec;
  } else {

  }
#line 1112
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1113
    set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1115
    clear_bit(14, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1121
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1121
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT( mdev->ldev == NULL ) in %s:%d\n",
            (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1121);
  } else {

  }
#line 1122
  mdev->ldev = nbc;
#line 1123
  mdev->resync = resync_lru;
#line 1124
  nbc = 0;
#line 1125
  resync_lru = 0;
#line 1127
  mdev->write_ordering = WO_bdev_flush;
#line 1128
  drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 1130
  tmp___31 = drbd_md_test_flag(mdev->ldev, 64);
#line 1130
  if (tmp___31 != 0) {
#line 1131
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1133
    clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1135
  tmp___32 = drbd_md_test_flag(mdev->ldev, 2);
#line 1135
  if (tmp___32 != 0 && ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U || (unsigned int )*((unsigned char *)mdev + 2014UL) == 0U)) {
#line 1137
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 1138
    cp_discovered = 1;
  } else {

  }
#line 1141
  mdev->send_cnt = 0U;
#line 1142
  mdev->recv_cnt = 0U;
#line 1143
  mdev->read_cnt = 0U;
#line 1144
  mdev->writ_cnt = 0U;
#line 1146
  max_seg_s = 131072U;
#line 1147
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1152
    if (mdev->agreed_pro_version <= 93) {
#line 1153
      max_seg_s = queue_max_segment_size(mdev->rq_queue);
    } else
#line 1154
    if (mdev->agreed_pro_version == 94) {
#line 1155
      max_seg_s = 32768U;
    } else {

    }
  } else {

  }
#line 1159
  drbd_setup_queue_param(mdev, max_seg_s);
#line 1175
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 1176
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) != 1U) {
#line 1176
    tmp___33 = drbd_md_test_flag(mdev->ldev, 2);
#line 1176
    if (tmp___33 != 0) {
#line 1176
      tmp___34 = drbd_md_test_flag(mdev->ldev, 4);
#line 1176
      if (tmp___34 == 0) {
#line 1179
        set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1181
  dd = drbd_determin_dev_size(mdev, 0);
#line 1182
  if ((int )dd == -1) {
#line 1183
    retcode = ERR_NOMEM_BITMAP;
#line 1184
    goto force_diskless_dec;
  } else
#line 1185
  if ((int )dd == 2) {
#line 1186
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1188
  tmp___37 = drbd_md_test_flag(mdev->ldev, 8);
#line 1188
  if (tmp___37 != 0) {
#line 1189
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Assuming that all blocks are out of sync (aka FullSync)\n");
#line 1191
    tmp___35 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1191
    if (tmp___35 != 0) {
#line 1192
      retcode = ERR_IO_MD_DISK;
#line 1193
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1196
    tmp___36 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1196
    if (tmp___36 < 0) {
#line 1197
      retcode = ERR_IO_MD_DISK;
#line 1198
      goto force_diskless_dec;
    } else {

    }
  }
#line 1202
  if (cp_discovered != 0) {
#line 1203
    drbd_al_apply_to_bm(mdev);
#line 1204
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1207
  tmp___38 = _drbd_bm_total_weight(mdev);
#line 1207
  tmp___39 = drbd_bm_bits(mdev);
#line 1207
  if (tmp___38 == tmp___39) {
#line 1208
    drbd_suspend_al(mdev);
  } else {

  }
#line 1210
  spin_lock_irq(& mdev->req_lock);
#line 1211
  os = mdev->state;
#line 1212
  ns.i = os.i;
#line 1218
  tmp___41 = drbd_md_test_flag(mdev->ldev, 1);
#line 1218
  if (tmp___41 != 0) {
#line 1219
    tmp___40 = drbd_md_test_flag(mdev->ldev, 16);
#line 1219
    if (tmp___40 != 0) {
#line 1220
      ns.ldv_35955.disk = 7U;
    } else {
#line 1222
      ns.ldv_35955.disk = 5U;
    }
  } else {
#line 1224
    ns.ldv_35955.disk = 4U;
  }
#line 1227
  tmp___42 = drbd_md_test_flag(mdev->ldev, 32);
#line 1227
  if (tmp___42 != 0) {
#line 1228
    ns.ldv_35955.pdsk = 5U;
  } else {

  }
#line 1230
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1232
    ns.ldv_35955.disk = 8U;
  } else {

  }
#line 1241
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1242
    mdev->new_state_tmp.i = ns.i;
#line 1243
    ns.i = os.i;
#line 1244
    ns.ldv_35955.disk = 3U;
#line 1249
    kfree((void const   *)mdev->p_uuid);
#line 1250
    mdev->p_uuid = 0;
  } else {

  }
#line 1253
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1254
  ns = mdev->state;
#line 1255
  spin_unlock_irq(& mdev->req_lock);
#line 1257
  if (rv <= 0) {
#line 1258
    goto force_diskless_dec;
  } else {

  }
#line 1260
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1261
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1263
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1265
  drbd_md_mark_dirty(mdev);
#line 1266
  drbd_md_sync(mdev);
#line 1268
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1269
  put_ldev(mdev);
#line 1270
  reply->ret_code = (int )retcode;
#line 1271
  drbd_reconfig_done(mdev);
#line 1272
  return (0);
  force_diskless_dec: 
#line 1275
  put_ldev(mdev);
  force_diskless: 
#line 1277
  val___0.i = 0U;
#line 1277
  val___0.ldv_35955.disk = 2U;
#line 1277
  mask___0.i = 0U;
#line 1277
  mask___0.ldv_35955.disk = 15U;
#line 1277
  drbd_force_state(mdev, mask___0, val___0);
#line 1278
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1280
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1281
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1283
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1284
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1286
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1287
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1288
      fput(nbc->lo_file);
    } else {

    }
#line 1289
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1290
      fput(nbc->md_file);
    } else {

    }
#line 1291
    kfree((void const   *)nbc);
  } else {

  }
#line 1293
  lc_destroy(resync_lru);
#line 1295
  reply->ret_code = (int )retcode;
#line 1296
  drbd_reconfig_done(mdev);
#line 1297
  return (0);
}
}
#line 1305 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1308
  drbd_suspend_io(mdev);
#line 1309
  val.i = 0U;
#line 1309
  val.ldv_35955.disk = 0U;
#line 1309
  mask.i = 0U;
#line 1309
  mask.ldv_35955.disk = 15U;
#line 1309
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1310
  if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U) {
#line 1311
    tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1311
    if (tmp == 0) {
#line 1311
      goto ldv_47538;
    } else {

    }
#line 1311
    tmp___0 = get_current();
#line 1311
    __wait.flags = 0U;
#line 1311
    __wait.private = (void *)tmp___0;
#line 1311
    __wait.func = & autoremove_wake_function;
#line 1311
    __wait.task_list.next = & __wait.task_list;
#line 1311
    __wait.task_list.prev = & __wait.task_list;
    ldv_47541: 
#line 1311
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1311
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1311
    if (tmp___1 == 0) {
#line 1311
      goto ldv_47540;
    } else {

    }
#line 1311
    schedule();
#line 1311
    goto ldv_47541;
    ldv_47540: 
#line 1311
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_47538: ;
  } else {

  }
#line 1312
  drbd_resume_io(mdev);
#line 1313
  return (0);
}
}
#line 1316 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  enum drbd_fencing_p fp ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  long tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  struct crypto_tfm *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  void *tmp___12 ;
  void *tmp___13 ;
  unsigned int tmp___14 ;
  int tmp___15 ;
  union drbd_state __ns ;
  int tmp___16 ;

  {
#line 1321
  new_conf = 0;
#line 1322
  tfm = 0;
#line 1323
  integrity_w_tfm = 0;
#line 1324
  integrity_r_tfm = 0;
#line 1325
  new_tl_hash = 0;
#line 1326
  new_ee_hash = 0;
#line 1329
  int_dig_out = 0;
#line 1330
  int_dig_in = 0;
#line 1331
  int_dig_vv = 0;
#line 1334
  drbd_reconfig_start(mdev);
#line 1336
  if ((int )mdev->state.ldv_35955.conn > 0) {
#line 1337
    retcode = ERR_NET_CONFIGURED;
#line 1338
    goto fail;
  } else {

  }
#line 1342
  tmp = kzalloc___2(532UL, 208U);
#line 1342
  new_conf = (struct net_conf *)tmp;
#line 1343
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1344
    retcode = ERR_NOMEM;
#line 1345
    goto fail;
  } else {

  }
#line 1348
  new_conf->timeout = 60;
#line 1349
  new_conf->try_connect_int = 10;
#line 1350
  new_conf->ping_int = 10;
#line 1351
  new_conf->max_epoch_size = 2048;
#line 1352
  new_conf->max_buffers = 2048;
#line 1353
  new_conf->unplug_watermark = 128;
#line 1354
  new_conf->sndbuf_size = 0;
#line 1355
  new_conf->rcvbuf_size = 0;
#line 1356
  new_conf->ko_count = 0;
#line 1357
  new_conf->after_sb_0p = 0;
#line 1358
  new_conf->after_sb_1p = 0;
#line 1359
  new_conf->after_sb_2p = 0;
#line 1360
  new_conf->want_lose = 0U;
#line 1361
  new_conf->two_primaries = 0U;
#line 1362
  new_conf->wire_protocol = 3;
#line 1363
  new_conf->ping_timeo = 5;
#line 1364
  new_conf->rr_conflict = 0;
#line 1366
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1366
  if (tmp___0 == 0) {
#line 1367
    retcode = ERR_MANDATORY_TAG;
#line 1368
    goto fail;
  } else {

  }
#line 1371
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1373
    retcode = ERR_NOT_PROTO_C;
#line 1374
    goto fail;
  } else {

  }
#line 1377
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1377
  if (tmp___1 != 0) {
#line 1378
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1379
    put_ldev(mdev);
#line 1380
    if (new_conf->wire_protocol == 1 && (unsigned int )fp == 2U) {
#line 1381
      retcode = ERR_STONITH_AND_PROT_A;
#line 1382
      goto fail;
    } else {

    }
  } else {

  }
#line 1386
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1387
    retcode = ERR_DISCARD;
#line 1388
    goto fail;
  } else {

  }
#line 1391
  retcode = NO_ERROR;
#line 1393
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1394
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1395
  i = 0;
#line 1395
  goto ldv_47568;
  ldv_47567: 
#line 1396
  odev = minor_to_mdev((unsigned int )i);
#line 1397
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1398
    goto ldv_47566;
  } else {

  }
#line 1399
  tmp___4 = get_net_conf(odev);
#line 1399
  if (tmp___4 != 0) {
#line 1400
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1401
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1401
      tmp___2 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1401
      if (tmp___2 == 0) {
#line 1403
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1405
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1406
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1406
      tmp___3 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1406
      if (tmp___3 == 0) {
#line 1408
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1410
    put_net_conf(odev);
#line 1411
    if ((unsigned int )retcode != 101U) {
#line 1412
      goto fail;
    } else {

    }
  } else {

  }
  ldv_47566: 
#line 1395
  i = i + 1;
  ldv_47568: ;
#line 1395
  if ((unsigned int )i < minor_count) {
#line 1396
    goto ldv_47567;
  } else {

  }

#line 1416
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1417
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1419
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1420
    tmp___5 = IS_ERR((void const   *)tfm);
#line 1420
    if (tmp___5 != 0L) {
#line 1421
      tfm = 0;
#line 1422
      retcode = ERR_AUTH_ALG;
#line 1423
      goto fail;
    } else {

    }
#line 1426
    tmp___6 = crypto_hash_tfm(tfm);
#line 1426
    tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 1426
    if (tmp___7 == 0) {
#line 1427
      retcode = ERR_AUTH_ALG_ND;
#line 1428
      goto fail;
    } else {

    }
  } else {

  }
#line 1432
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1433
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1434
    tmp___8 = IS_ERR((void const   *)integrity_w_tfm);
#line 1434
    if (tmp___8 != 0L) {
#line 1435
      integrity_w_tfm = 0;
#line 1436
      retcode = ERR_INTEGRITY_ALG;
#line 1437
      goto fail;
    } else {

    }
#line 1440
    tmp___9 = crypto_hash_tfm(integrity_w_tfm);
#line 1440
    tmp___10 = drbd_crypto_is_hash(tmp___9);
#line 1440
    if (tmp___10 == 0) {
#line 1441
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1442
      goto fail;
    } else {

    }
#line 1445
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1446
    tmp___11 = IS_ERR((void const   *)integrity_r_tfm);
#line 1446
    if (tmp___11 != 0L) {
#line 1447
      integrity_r_tfm = 0;
#line 1448
      retcode = ERR_INTEGRITY_ALG;
#line 1449
      goto fail;
    } else {

    }
  } else {

  }
#line 1453
  ns = new_conf->max_epoch_size / 8;
#line 1454
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1455
    tmp___12 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1455
    new_tl_hash = (struct hlist_head *)tmp___12;
#line 1456
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1457
      retcode = ERR_NOMEM;
#line 1458
      goto fail;
    } else {

    }
  } else {

  }
#line 1462
  ns = new_conf->max_buffers / 8;
#line 1463
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1464
    tmp___13 = kzalloc___2((unsigned long )ns * 8UL, 208U);
#line 1464
    new_ee_hash = (struct hlist_head *)tmp___13;
#line 1465
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1466
      retcode = ERR_NOMEM;
#line 1467
      goto fail;
    } else {

    }
  } else {

  }
#line 1471
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1473
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1474
    tmp___14 = crypto_hash_digestsize(integrity_w_tfm);
#line 1474
    i = (int )tmp___14;
#line 1475
    int_dig_out = kmalloc___4((size_t )i, 208U);
#line 1476
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1477
      retcode = ERR_NOMEM;
#line 1478
      goto fail;
    } else {

    }
#line 1480
    int_dig_in = kmalloc___4((size_t )i, 208U);
#line 1481
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1482
      retcode = ERR_NOMEM;
#line 1483
      goto fail;
    } else {

    }
#line 1485
    int_dig_vv = kmalloc___4((size_t )i, 208U);
#line 1486
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1487
      retcode = ERR_NOMEM;
#line 1488
      goto fail;
    } else {

    }
  } else {

  }
#line 1492
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1493
    tmp___15 = drbd_bm_init(mdev);
#line 1493
    if (tmp___15 != 0) {
#line 1494
      retcode = ERR_NOMEM;
#line 1495
      goto fail;
    } else {

    }
  } else {

  }
#line 1499
  drbd_flush_workqueue(mdev);
#line 1500
  spin_lock_irq(& mdev->req_lock);
#line 1501
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1502
    retcode = ERR_NET_CONFIGURED;
#line 1503
    spin_unlock_irq(& mdev->req_lock);
#line 1504
    goto fail;
  } else {

  }
#line 1506
  mdev->net_conf = new_conf;
#line 1508
  mdev->send_cnt = 0U;
#line 1509
  mdev->recv_cnt = 0U;
#line 1511
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1512
    kfree((void const   *)mdev->tl_hash);
#line 1513
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1514
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1517
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1518
    kfree((void const   *)mdev->ee_hash);
#line 1519
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1520
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1523
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1524
  mdev->cram_hmac_tfm = tfm;
#line 1526
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1527
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1529
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1530
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1532
  kfree((void const   *)mdev->int_dig_out);
#line 1533
  kfree((void const   *)mdev->int_dig_in);
#line 1534
  kfree((void const   *)mdev->int_dig_vv);
#line 1535
  mdev->int_dig_out = int_dig_out;
#line 1536
  mdev->int_dig_in = int_dig_in;
#line 1537
  mdev->int_dig_vv = int_dig_vv;
#line 1538
  __ns.i = mdev->state.i;
#line 1538
  __ns.ldv_35955.conn = 2U;
#line 1538
  tmp___16 = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1538
  retcode = (enum drbd_ret_codes )tmp___16;
#line 1539
  spin_unlock_irq(& mdev->req_lock);
#line 1541
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1542
  reply->ret_code = (int )retcode;
#line 1543
  drbd_reconfig_done(mdev);
#line 1544
  return (0);
  fail: 
#line 1547
  kfree((void const   *)int_dig_out);
#line 1548
  kfree((void const   *)int_dig_in);
#line 1549
  kfree((void const   *)int_dig_vv);
#line 1550
  crypto_free_hash(tfm);
#line 1551
  crypto_free_hash(integrity_w_tfm);
#line 1552
  crypto_free_hash(integrity_r_tfm);
#line 1553
  kfree((void const   *)new_tl_hash);
#line 1554
  kfree((void const   *)new_ee_hash);
#line 1555
  kfree((void const   *)new_conf);
#line 1557
  reply->ret_code = (int )retcode;
#line 1558
  drbd_reconfig_done(mdev);
#line 1559
  return (0);
}
}
#line 1562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1567
  val.i = 0U;
#line 1567
  val.ldv_35955.conn = 1U;
#line 1567
  mask.i = 0U;
#line 1567
  mask.ldv_35955.conn = 31U;
#line 1567
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1569
  if (retcode == 2) {
#line 1570
    goto done;
  } else
#line 1571
  if (retcode == -9) {
#line 1572
    goto done;
  } else
#line 1573
  if (retcode == -7) {
#line 1576
    val___0.i = 0U;
#line 1576
    val___0.ldv_35955.conn = 1U;
#line 1576
    val___0.ldv_35955.pdsk = 5U;
#line 1575
    mask___0.i = 0U;
#line 1575
    mask___0.ldv_35955.conn = 31U;
#line 1576
    mask___0.ldv_35955.pdsk = 15U;
#line 1576
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1577
  if (retcode == -10) {
#line 1580
    val___1.i = 0U;
#line 1580
    val___1.ldv_35955.conn = 1U;
#line 1580
    val___1.ldv_35955.disk = 5U;
#line 1579
    mask___1.i = 0U;
#line 1579
    mask___1.ldv_35955.conn = 31U;
#line 1580
    mask___1.ldv_35955.disk = 15U;
#line 1580
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1582
    if (retcode == -11 || retcode == -16) {
#line 1583
      val___2.i = 0U;
#line 1583
      val___2.ldv_35955.conn = 1U;
#line 1583
      mask___2.i = 0U;
#line 1583
      mask___2.ldv_35955.conn = 31U;
#line 1583
      drbd_force_state(mdev, mask___2, val___2);
#line 1584
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1588
  if (retcode <= 0) {
#line 1589
    goto fail;
  } else {

  }
#line 1591
  __ret = 0;
#line 1591
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 16U) {
#line 1591
    tmp = get_current();
#line 1591
    __wait.flags = 0U;
#line 1591
    __wait.private = (void *)tmp;
#line 1591
    __wait.func = & autoremove_wake_function;
#line 1591
    __wait.task_list.next = & __wait.task_list;
#line 1591
    __wait.task_list.prev = & __wait.task_list;
    ldv_47600: 
#line 1591
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1591
    if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 16U) {
#line 1591
      goto ldv_47598;
    } else {

    }
#line 1591
    tmp___0 = get_current();
#line 1591
    tmp___1 = signal_pending(tmp___0);
#line 1591
    if (tmp___1 == 0) {
#line 1591
      schedule();
#line 1591
      goto ldv_47599;
    } else {

    }
#line 1591
    __ret = -512;
#line 1591
    goto ldv_47598;
    ldv_47599: ;
#line 1591
    goto ldv_47600;
    ldv_47598: 
#line 1591
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1591
  if (__ret != 0) {
#line 1595
    retcode = 129;
#line 1596
    goto fail;
  } else {

  }
  done: 
#line 1600
  retcode = 101;
  fail: 
#line 1602
  drbd_md_sync(mdev);
#line 1603
  reply->ret_code = retcode;
#line 1604
  return (0);
}
}
#line 1607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1611
  _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Resync of new storage after online grow\n");
#line 1612
  if ((int )mdev->state.ldv_35955.role != (int )mdev->state.ldv_35955.peer) {
#line 1613
    iass = (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U;
  } else {
#line 1615
    iass = constant_test_bit(6U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1617
  if (iass != 0) {
#line 1618
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1620
    val.i = 0U;
#line 1620
    val.ldv_35955.conn = 15U;
#line 1620
    mask.i = 0U;
#line 1620
    mask.ldv_35955.conn = 31U;
#line 1620
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1622
  return;
}
}
#line 1623 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  enum determine_dev_size dd ;
  enum dds_flags ddsf ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1627
  retcode = 101;
#line 1631
  memset((void *)(& rs), 0, 16UL);
#line 1632
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1632
  if (tmp == 0) {
#line 1633
    retcode = 126;
#line 1634
    goto fail;
  } else {

  }
#line 1637
  if ((int )mdev->state.ldv_35955.conn > 10) {
#line 1638
    retcode = 130;
#line 1639
    goto fail;
  } else {

  }
#line 1642
  if ((unsigned int )*((unsigned char *)mdev + 2012UL) == 2U && (unsigned int )*((unsigned char *)mdev + 2012UL) == 8U) {
#line 1644
    retcode = 131;
#line 1645
    goto fail;
  } else {

  }
#line 1648
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1648
  if (tmp___0 == 0) {
#line 1649
    retcode = 138;
#line 1650
    goto fail;
  } else {

  }
#line 1653
  if ((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U && mdev->agreed_pro_version <= 92) {
#line 1654
    retcode = 153;
#line 1655
    goto fail;
  } else {

  }
#line 1658
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1658
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1659
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
  } else {

  }
#line 1661
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1662
  ddsf = (enum dds_flags )(((unsigned int )*((unsigned char *)(& rs) + 8UL) != 0U) | ((int )*((unsigned char *)(& rs) + 8UL) & 2));
#line 1663
  dd = drbd_determin_dev_size(mdev, ddsf);
#line 1664
  drbd_md_sync(mdev);
#line 1665
  put_ldev(mdev);
#line 1666
  if ((int )dd == -1) {
#line 1667
    retcode = 140;
#line 1668
    goto fail;
  } else {

  }
#line 1671
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U) {
#line 1672
    if ((int )dd == 2) {
#line 1673
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1675
    drbd_send_uuids(mdev);
#line 1676
    drbd_send_sizes(mdev, 1, ddsf);
  } else {

  }
  fail: 
#line 1680
  reply->ret_code = retcode;
#line 1681
  return (0);
}
}
#line 1684 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  int *rs_plan_s ;
  int fifo_size ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  int _b ;
  int _b___0 ;
  void *tmp___10 ;
  int tmp___11 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  bool tmp___15 ;
  int tmp___16 ;

  {
#line 1687
  retcode = 101;
#line 1691
  verify_tfm = 0;
#line 1692
  csums_tfm = 0;
#line 1695
  rs_plan_s = 0;
#line 1698
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1698
  if (tmp) {
#line 1698
    tmp___0 = 0;
  } else {
#line 1698
    tmp___0 = 1;
  }
#line 1698
  if (tmp___0) {
#line 1699
    retcode = 122;
#line 1700
    goto fail;
  } else {

  }
#line 1703
  if ((nlp->flags & 2) != 0) {
#line 1704
    memset((void *)(& sc), 0, 212UL);
#line 1705
    sc.rate = 250;
#line 1706
    sc.after = -1;
#line 1707
    sc.al_extents = 127;
#line 1708
    sc.on_no_data = 0;
#line 1709
    sc.c_plan_ahead = 0;
#line 1710
    sc.c_delay_target = 10;
#line 1711
    sc.c_fill_target = 0;
#line 1712
    sc.c_max_rate = 102400;
#line 1713
    sc.c_min_rate = 4096;
  } else {
#line 1715
    __len = 212UL;
#line 1715
    if (__len > 63UL) {
#line 1715
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1715
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1717
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1717
  if (tmp___1 == 0) {
#line 1718
    retcode = 126;
#line 1719
    goto fail;
  } else {

  }
#line 1723
  rsr = (((unsigned int )*((unsigned short *)mdev + 1006UL) == 256U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 1006UL) == 336U;
#line 1728
  if (rsr != 0) {
#line 1728
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1728
    if (tmp___2 != 0) {
#line 1729
      retcode = 148;
#line 1730
      goto fail;
    } else {

    }
  } else {

  }
#line 1733
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1734
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1735
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1735
    if (tmp___3 != 0L) {
#line 1736
      csums_tfm = 0;
#line 1737
      retcode = 144;
#line 1738
      goto fail;
    } else {

    }
#line 1741
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1741
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1741
    if (tmp___5 == 0) {
#line 1742
      retcode = 145;
#line 1743
      goto fail;
    } else {

    }
  } else {

  }
#line 1748
  ovr = (unsigned int )*((unsigned short *)mdev + 1006UL) == 288U || (unsigned int )*((unsigned short *)mdev + 1006UL) == 304U;
#line 1750
  if (ovr != 0) {
#line 1751
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1751
    if (tmp___6 != 0) {
#line 1752
      retcode = 149;
#line 1753
      goto fail;
    } else {

    }
  } else {

  }
#line 1757
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1758
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1759
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1759
    if (tmp___7 != 0L) {
#line 1760
      verify_tfm = 0;
#line 1761
      retcode = 146;
#line 1762
      goto fail;
    } else {

    }
#line 1765
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1765
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1765
    if (tmp___9 == 0) {
#line 1766
      retcode = 147;
#line 1767
      goto fail;
    } else {

    }
  } else {

  }
#line 1772
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1773
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1775
    if (err != 0) {
#line 1776
      dev_warn((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "__bitmap_parse() failed with %d\n",
               err);
#line 1777
      retcode = 143;
#line 1778
      goto fail;
    } else {

    }
  } else {

  }
#line 1782
  _b = sc.rate <= 0;
#line 1782
  if (_b != 0) {
#line 1782
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1782);
  } else {

  }
#line 1782
  if (_b != 0) {
#line 1782
    sc.rate = 1;
  } else {

  }
#line 1783
  _b___0 = sc.al_extents <= 6;
#line 1783
  if (_b___0 != 0) {
#line 1783
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "ASSERT FAILED: %s: (%s) in %s:%d\n",
            "drbd_nl_syncer_conf", (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
            1783);
  } else {

  }
#line 1783
  if (_b___0 != 0) {
#line 1783
    sc.al_extents = 127;
  } else {

  }
#line 1785
  if (sc.al_extents > 3843) {
#line 1786
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "sc.al_extents > %d\n",
            3843);
#line 1787
    sc.al_extents = 3843;
  } else {

  }
#line 1794
  if (sc.after >= 0) {
#line 1795
    ensure_mdev(sc.after, 1);
  } else {

  }
#line 1800
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1801
  if (retcode != 101) {
#line 1802
    goto fail;
  } else {

  }
#line 1804
  fifo_size = (sc.c_plan_ahead * 250) / 250;
#line 1805
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size && fifo_size > 0) {
#line 1806
    tmp___10 = kzalloc___2((unsigned long )fifo_size * 4UL, 208U);
#line 1806
    rs_plan_s = (int *)tmp___10;
#line 1807
    if ((unsigned long )rs_plan_s == (unsigned long )((int *)0)) {
#line 1808
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "kmalloc of fifo_buffer failed");
#line 1809
      retcode = 122;
#line 1810
      goto fail;
    } else {

    }
  } else {

  }
#line 1816
  spin_lock(& mdev->peer_seq_lock);
#line 1817
  mdev->sync_conf = sc;
#line 1819
  if (rsr == 0) {
#line 1820
    crypto_free_hash(mdev->csums_tfm);
#line 1821
    mdev->csums_tfm = csums_tfm;
#line 1822
    csums_tfm = 0;
  } else {

  }
#line 1825
  if (ovr == 0) {
#line 1826
    crypto_free_hash(mdev->verify_tfm);
#line 1827
    mdev->verify_tfm = verify_tfm;
#line 1828
    verify_tfm = 0;
  } else {

  }
#line 1831
  if ((unsigned int )fifo_size != mdev->rs_plan_s.size) {
#line 1832
    kfree((void const   *)mdev->rs_plan_s.values);
#line 1833
    mdev->rs_plan_s.values = rs_plan_s;
#line 1834
    mdev->rs_plan_s.size = (unsigned int )fifo_size;
#line 1835
    mdev->rs_planed = 0;
#line 1836
    rs_plan_s = 0;
  } else {

  }
#line 1839
  spin_unlock(& mdev->peer_seq_lock);
#line 1841
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1841
  if (tmp___14 != 0) {
#line 1842
    tmp___11 = lc_try_lock(mdev->act_log);
#line 1842
    if (tmp___11 != 0) {
#line 1842
      goto ldv_47644;
    } else {

    }
#line 1842
    tmp___12 = get_current();
#line 1842
    __wait.flags = 0U;
#line 1842
    __wait.private = (void *)tmp___12;
#line 1842
    __wait.func = & autoremove_wake_function;
#line 1842
    __wait.task_list.next = & __wait.task_list;
#line 1842
    __wait.task_list.prev = & __wait.task_list;
    ldv_47647: 
#line 1842
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1842
    tmp___13 = lc_try_lock(mdev->act_log);
#line 1842
    if (tmp___13 != 0) {
#line 1842
      goto ldv_47646;
    } else {

    }
#line 1842
    schedule();
#line 1842
    goto ldv_47647;
    ldv_47646: 
#line 1842
    finish_wait(& mdev->al_wait, & __wait);
    ldv_47644: 
#line 1843
    drbd_al_shrink(mdev);
#line 1844
    err = drbd_check_al_size(mdev);
#line 1845
    lc_unlock(mdev->act_log);
#line 1846
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1848
    put_ldev(mdev);
#line 1849
    drbd_md_sync(mdev);
#line 1851
    if (err != 0) {
#line 1852
      retcode = 122;
#line 1853
      goto fail;
    } else {

    }
  } else {

  }
#line 1857
  if ((int )mdev->state.ldv_35955.conn > 9) {
#line 1858
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1860
  tmp___15 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1860
  if (tmp___15) {
#line 1860
    tmp___16 = 0;
  } else {
#line 1860
    tmp___16 = 1;
  }
#line 1860
  if (tmp___16) {
#line 1861
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1862
    drbd_calc_cpu_mask(mdev);
#line 1863
    mdev->receiver.reset_cpu_mask = 1;
#line 1864
    mdev->asender.reset_cpu_mask = 1;
#line 1865
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1868
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1870
  kfree((void const   *)rs_plan_s);
#line 1871
  free_cpumask_var(new_cpu_mask);
#line 1872
  crypto_free_hash(csums_tfm);
#line 1873
  crypto_free_hash(verify_tfm);
#line 1874
  reply->ret_code = retcode;
#line 1875
  return (0);
}
}
#line 1878 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1883
  val.i = 0U;
#line 1883
  val.ldv_35955.conn = 12U;
#line 1883
  mask.i = 0U;
#line 1883
  mask.ldv_35955.conn = 31U;
#line 1883
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1885
  if (retcode <= 0 && retcode != -15) {
#line 1886
    val___0.i = 0U;
#line 1886
    val___0.ldv_35955.conn = 12U;
#line 1886
    mask___0.i = 0U;
#line 1886
    mask___0.ldv_35955.conn = 31U;
#line 1886
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1888
  goto ldv_47670;
  ldv_47669: 
#line 1889
  spin_lock_irq(& mdev->req_lock);
#line 1890
  if ((int )mdev->state.ldv_35955.conn <= 9) {
#line 1891
    __ns.i = mdev->state.i;
#line 1891
    __ns.ldv_35955.disk = 4U;
#line 1891
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1892
  spin_unlock_irq(& mdev->req_lock);
#line 1894
  if (retcode != -15) {
#line 1895
    goto ldv_47664;
  } else {

  }
#line 1897
  val___1.i = 0U;
#line 1897
  val___1.ldv_35955.conn = 12U;
#line 1897
  mask___1.i = 0U;
#line 1897
  mask___1.ldv_35955.conn = 31U;
#line 1897
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_47670: ;
#line 1888
  if (retcode == -15) {
#line 1889
    goto ldv_47669;
  } else {

  }
  ldv_47664: 
#line 1900
  reply->ret_code = retcode;
#line 1901
  return (0);
}
}
#line 1904 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_bmio_set_susp_al(struct drbd_conf *mdev ) 
{ 
  int rv ;

  {
#line 1908
  rv = drbd_bmio_set_n_write(mdev);
#line 1909
  drbd_suspend_al(mdev);
#line 1910
  return (rv);
}
}
#line 1913 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1918
  val.i = 0U;
#line 1918
  val.ldv_35955.conn = 11U;
#line 1918
  mask.i = 0U;
#line 1918
  mask.ldv_35955.conn = 31U;
#line 1918
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1920
  if (retcode <= 0) {
#line 1921
    if (retcode == -15 && (unsigned int )*((unsigned char *)mdev + 2012UL) == 1U) {
#line 1924
      val___0.i = 0U;
#line 1924
      val___0.ldv_35955.pdsk = 4U;
#line 1924
      mask___0.i = 0U;
#line 1924
      mask___0.ldv_35955.pdsk = 15U;
#line 1924
      retcode = drbd_request_state(mdev, mask___0, val___0);
#line 1925
      if (retcode > 0) {
#line 1927
        tmp = drbd_bitmap_io(mdev, & drbd_bmio_set_susp_al, (char *)"set_n_write from invalidate_peer");
#line 1927
        if (tmp != 0) {
#line 1929
          retcode = 118;
        } else {

        }
      } else {

      }
    } else {
#line 1932
      val___1.i = 0U;
#line 1932
      val___1.ldv_35955.conn = 11U;
#line 1932
      mask___1.i = 0U;
#line 1932
      mask___1.ldv_35955.conn = 31U;
#line 1932
      retcode = drbd_request_state(mdev, mask___1, val___1);
    }
  } else {

  }
#line 1935
  reply->ret_code = retcode;
#line 1936
  return (0);
}
}
#line 1939 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1942
  retcode = 101;
#line 1944
  val.i = 0U;
#line 1944
  val.ldv_35955.user_isp = 1U;
#line 1944
  mask.i = 0U;
#line 1944
  mask.ldv_35955.user_isp = 1U;
#line 1944
  tmp = drbd_request_state(mdev, mask, val);
#line 1944
  if (tmp == 2) {
#line 1945
    retcode = 134;
  } else {

  }
#line 1947
  reply->ret_code = retcode;
#line 1948
  return (0);
}
}
#line 1951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1954
  retcode = 101;
#line 1956
  val.i = 0U;
#line 1956
  val.ldv_35955.user_isp = 0U;
#line 1956
  mask.i = 0U;
#line 1956
  mask.ldv_35955.user_isp = 1U;
#line 1956
  tmp = drbd_request_state(mdev, mask, val);
#line 1956
  if (tmp == 2) {
#line 1957
    retcode = 135;
  } else {

  }
#line 1959
  reply->ret_code = retcode;
#line 1960
  return (0);
}
}
#line 1963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1966
  val.i = 0U;
#line 1966
  val.ldv_35955.susp = 1U;
#line 1966
  mask.i = 0U;
#line 1966
  mask.ldv_35955.susp = 1U;
#line 1966
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1968
  return (0);
}
}
#line 1971 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1974
  tmp = constant_test_bit(27U, (unsigned long const volatile   *)(& mdev->flags));
#line 1974
  if (tmp != 0) {
#line 1975
    drbd_uuid_new_current(mdev);
#line 1976
    clear_bit(27, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1978
  drbd_suspend_io(mdev);
#line 1979
  val.i = 0U;
#line 1979
  val.ldv_35955.susp = 0U;
#line 1979
  val.ldv_35955.susp_nod = 0U;
#line 1979
  val.ldv_35955.susp_fen = 0U;
#line 1979
  mask.i = 0U;
#line 1979
  mask.ldv_35955.susp = 1U;
#line 1979
  mask.ldv_35955.susp_nod = 1U;
#line 1979
  mask.ldv_35955.susp_fen = 1U;
#line 1979
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1980
  if (reply->ret_code == 1) {
#line 1981
    if ((int )mdev->state.ldv_35955.conn <= 9) {
#line 1982
      tl_clear(mdev);
    } else {

    }
#line 1983
    if ((unsigned int )*((unsigned char *)mdev + 2013UL) == 0U || (unsigned int )*((unsigned char *)mdev + 2013UL) == 4U) {
#line 1984
      tl_restart(mdev, fail_frozen_disk_io);
    } else {

    }
  } else {

  }
#line 1986
  drbd_resume_io(mdev);
#line 1988
  return (0);
}
}
#line 1991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1994
  val.i = 0U;
#line 1994
  val.ldv_35955.disk = 5U;
#line 1994
  mask.i = 0U;
#line 1994
  mask.ldv_35955.disk = 15U;
#line 1994
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1995
  return (0);
}
}
#line 1998 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 2003
  tl = (unsigned short *)(& reply->tag_list);
#line 2005
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2005
  if (tmp != 0) {
#line 2006
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 2007
    put_ldev(mdev);
  } else {

  }
#line 2010
  tmp___0 = get_net_conf(mdev);
#line 2010
  if (tmp___0 != 0) {
#line 2011
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 2012
    put_net_conf(mdev);
  } else {

  }
#line 2014
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 2016
  tmp___1 = tl;
#line 2016
  tl = tl + 1;
#line 2016
  __gu_p = (void *)tmp___1;
#line 2016
  switch (2UL) {
  case 1UL: 
#line 2016
  *((u8 *)__gu_p) = 0U;
#line 2016
  goto ldv_47748;
  case 2UL: 
#line 2016
  put_unaligned_le16(0, __gu_p);
#line 2016
  goto ldv_47748;
  case 4UL: 
#line 2016
  put_unaligned_le32(0U, __gu_p);
#line 2016
  goto ldv_47748;
  case 8UL: 
#line 2016
  put_unaligned_le64(0ULL, __gu_p);
#line 2016
  goto ldv_47748;
  default: 
#line 2016
  __bad_unaligned_access_size();
#line 2016
  goto ldv_47748;
  }
  ldv_47748: ;
#line 2018
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2021 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2024
  tl = (unsigned short *)(& reply->tag_list);
#line 2025
  s = mdev->state;
#line 2029
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 2032
  if ((int )s.ldv_35955.conn > 15 && (int )s.ldv_35955.conn <= 21) {
#line 2033
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2033
    if (tmp != 0) {
#line 2034
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2035
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2036
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 2039
  tmp___0 = tl;
#line 2039
  tl = tl + 1;
#line 2039
  __gu_p = (void *)tmp___0;
#line 2039
  switch (2UL) {
  case 1UL: 
#line 2039
  *((u8 *)__gu_p) = 0U;
#line 2039
  goto ldv_47764;
  case 2UL: 
#line 2039
  put_unaligned_le16(0, __gu_p);
#line 2039
  goto ldv_47764;
  case 4UL: 
#line 2039
  put_unaligned_le32(0U, __gu_p);
#line 2039
  goto ldv_47764;
  case 8UL: 
#line 2039
  put_unaligned_le64(0ULL, __gu_p);
#line 2039
  goto ldv_47764;
  default: 
#line 2039
  __bad_unaligned_access_size();
#line 2039
  goto ldv_47764;
  }
  ldv_47764: ;
#line 2041
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2044 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2049
  tl = (unsigned short *)(& reply->tag_list);
#line 2051
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2051
  if (tmp != 0) {
#line 2052
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 2053
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 2054
    put_ldev(mdev);
  } else {

  }
#line 2056
  tmp___0 = tl;
#line 2056
  tl = tl + 1;
#line 2056
  __gu_p = (void *)tmp___0;
#line 2056
  switch (2UL) {
  case 1UL: 
#line 2056
  *((u8 *)__gu_p) = 0U;
#line 2056
  goto ldv_47777;
  case 2UL: 
#line 2056
  put_unaligned_le16(0, __gu_p);
#line 2056
  goto ldv_47777;
  case 4UL: 
#line 2056
  put_unaligned_le32(0U, __gu_p);
#line 2056
  goto ldv_47777;
  case 8UL: 
#line 2056
  put_unaligned_le64(0ULL, __gu_p);
#line 2056
  goto ldv_47777;
  default: 
#line 2056
  __bad_unaligned_access_size();
#line 2056
  goto ldv_47777;
  }
  ldv_47777: ;
#line 2058
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2067 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 2073
  tl = (unsigned short *)(& reply->tag_list);
#line 2075
  if (*((unsigned int *)mdev + 503UL) != 40960U) {
#line 2075
    tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2075
    rv = tmp != 0;
  } else {
#line 2075
    rv = 2;
  }
#line 2078
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 2079
  tmp___0 = tl;
#line 2079
  tl = tl + 1;
#line 2079
  __gu_p = (void *)tmp___0;
#line 2079
  switch (2UL) {
  case 1UL: 
#line 2079
  *((u8 *)__gu_p) = 0U;
#line 2079
  goto ldv_47791;
  case 2UL: 
#line 2079
  put_unaligned_le16(0, __gu_p);
#line 2079
  goto ldv_47791;
  case 4UL: 
#line 2079
  put_unaligned_le32(0U, __gu_p);
#line 2079
  goto ldv_47791;
  case 8UL: 
#line 2079
  put_unaligned_le64(0ULL, __gu_p);
#line 2079
  goto ldv_47791;
  default: 
#line 2079
  __bad_unaligned_access_size();
#line 2079
  goto ldv_47791;
  }
  ldv_47791: ;
#line 2081
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 2084 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2088
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 2091
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2091
  if (tmp == 0) {
#line 2092
    reply->ret_code = 126;
#line 2093
    return (0);
  } else {

  }
#line 2096
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 2097
  val.i = 0U;
#line 2097
  val.ldv_35955.conn = 18U;
#line 2097
  mask.i = 0U;
#line 2097
  mask.ldv_35955.conn = 31U;
#line 2097
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 2098
  return (0);
}
}
#line 2102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  union drbd_state __ns ;

  {
#line 2105
  retcode = 101;
#line 2106
  skip_initial_sync = 0;
#line 2111
  memset((void *)(& args), 0, 4UL);
#line 2112
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 2112
  if (tmp == 0) {
#line 2113
    reply->ret_code = 126;
#line 2114
    return (0);
  } else {

  }
#line 2117
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 2119
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2119
  if (tmp___0 == 0) {
#line 2120
    retcode = 138;
#line 2121
    goto out;
  } else {

  }
#line 2125
  if ((((unsigned int )*((unsigned short *)mdev + 1006UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2127
    _dev_info((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Preparing to skip initial sync\n");
#line 2128
    skip_initial_sync = 1;
  } else
#line 2129
  if ((unsigned int )*((unsigned short *)mdev + 1006UL) != 0U) {
#line 2130
    retcode = 151;
#line 2131
    goto out_dec;
  } else {

  }
#line 2134
  drbd_uuid_set(mdev, 1, 0ULL);
#line 2135
  drbd_uuid_new_current(mdev);
#line 2137
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 2138
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 2139
    if (err != 0) {
#line 2140
      dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "Writing bitmap failed with %d\n",
              err);
#line 2141
      retcode = 118;
    } else {

    }
#line 2143
    if (skip_initial_sync != 0) {
#line 2144
      drbd_send_uuids_skip_initial_sync(mdev);
#line 2145
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2146
      spin_lock_irq(& mdev->req_lock);
#line 2147
      __ns.i = mdev->state.i;
#line 2147
      __ns.ldv_35955.disk = 8U;
#line 2147
      __ns.ldv_35955.pdsk = 8U;
#line 2147
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2149
      spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 2153
  drbd_md_sync(mdev);
  out_dec: 
#line 2155
  put_ldev(mdev);
  out: 
#line 2157
  mutex_unlock(& mdev->state_mutex);
#line 2159
  reply->ret_code = retcode;
#line 2160
  return (0);
}
}
#line 2170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 2170
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1288}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2201 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2203
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2209
  reply_size = 34;
#line 2213
  tmp = ldv_try_module_get_2(& __this_module);
#line 2213
  if (tmp == 0) {
#line 2214
    printk("<3>drbd: try_module_get() failed!\n");
#line 2215
    return;
  } else {

  }
#line 2218
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2219
    retcode = 152;
#line 2220
    goto fail;
  } else {

  }
#line 2223
  mdev = ensure_mdev((int )nlp->drbd_minor, nlp->flags & 1);
#line 2225
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2226
    retcode = 127;
#line 2227
    goto fail;
  } else {

  }
#line 2230
  if (nlp->packet_type > 26) {
#line 2231
    retcode = 137;
#line 2232
    goto fail;
  } else {

  }
#line 2235
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2238
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2239
    retcode = 137;
#line 2240
    goto fail;
  } else {

  }
#line 2243
  reply_size = cm->reply_body_size + reply_size;
#line 2246
  tmp___0 = kmalloc___4((size_t )reply_size, 208U);
#line 2246
  cn_reply = (struct cn_msg *)tmp___0;
#line 2247
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2248
    retcode = 122;
#line 2249
    goto fail;
  } else {

  }
#line 2251
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2253
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2255
  reply->minor = nlp->drbd_minor;
#line 2256
  reply->ret_code = 101;
#line 2259
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2261
  cn_reply->id = req->id;
#line 2262
  cn_reply->seq = req->seq;
#line 2263
  cn_reply->ack = req->ack + 1U;
#line 2264
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2265
  cn_reply->flags = 0U;
#line 2267
  rr = cn_netlink_send(cn_reply, 8U, 208U);
#line 2268
  if (rr != 0 && rr != -3) {
#line 2269
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2271
  kfree((void const   *)cn_reply);
#line 2272
  ldv_module_put_5(& __this_module);
#line 2273
  return;
  fail: 
#line 2275
  drbd_nl_send_reply(req, retcode);
#line 2276
  ldv_module_put_6(& __this_module);
#line 2277
  return;
}
}
#line 2279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2285
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2286
  len = (int )len < (int )l ? len : l;
#line 2287
  tmp = tl;
#line 2287
  tl = tl + 1;
#line 2287
  __gu_p = (void *)tmp;
#line 2287
  switch (2UL) {
  case 1UL: 
#line 2287
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2287
  goto ldv_47850;
  case 2UL: 
#line 2287
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2287
  goto ldv_47850;
  case 4UL: 
#line 2287
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2287
  goto ldv_47850;
  case 8UL: 
#line 2287
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2287
  goto ldv_47850;
  default: 
#line 2287
  __bad_unaligned_access_size();
#line 2287
  goto ldv_47850;
  }
  ldv_47850: 
#line 2288
  tmp___0 = tl;
#line 2288
  tl = tl + 1;
#line 2288
  __gu_p___0 = (void *)tmp___0;
#line 2288
  switch (2UL) {
  case 1UL: 
#line 2288
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2288
  goto ldv_47857;
  case 2UL: 
#line 2288
  put_unaligned_le16((int )len, __gu_p___0);
#line 2288
  goto ldv_47857;
  case 4UL: 
#line 2288
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2288
  goto ldv_47857;
  case 8UL: 
#line 2288
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2288
  goto ldv_47857;
  default: 
#line 2288
  __bad_unaligned_access_size();
#line 2288
  goto ldv_47857;
  }
  ldv_47857: 
#line 2289
  __len = (size_t )len;
#line 2289
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2290
  tl = tl + (unsigned long )len;
#line 2291
  if (nul_terminated != 0) {
#line 2292
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2293
  return (tl);
}
}
#line 2297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2299
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2299
  return (tmp);
}
}
#line 2303 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2305
  tmp = strlen(str);
#line 2305
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2305
  return (tmp___0);
}
}
#line 2309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2311
  tmp = tl;
#line 2311
  tl = tl + 1;
#line 2311
  __gu_p = (void *)tmp;
#line 2311
  switch (2UL) {
  case 1UL: 
#line 2311
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2311
  goto ldv_47883;
  case 2UL: 
#line 2311
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2311
  goto ldv_47883;
  case 4UL: 
#line 2311
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2311
  goto ldv_47883;
  case 8UL: 
#line 2311
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2311
  goto ldv_47883;
  default: 
#line 2311
  __bad_unaligned_access_size();
#line 2311
  goto ldv_47883;
  }
  ldv_47883: ;
#line 2312
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2314
  tmp___0 = tl;
#line 2314
  tl = tl + 1;
#line 2314
  __gu_p___0 = (void *)tmp___0;
#line 2314
  switch (2UL) {
  case 1UL: 
#line 2314
  *((u8 *)__gu_p___0) = 4U;
#line 2314
  goto ldv_47891;
  case 2UL: 
#line 2314
  put_unaligned_le16(4, __gu_p___0);
#line 2314
  goto ldv_47891;
  case 4UL: 
#line 2314
  put_unaligned_le32(4U, __gu_p___0);
#line 2314
  goto ldv_47891;
  case 8UL: 
#line 2314
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2314
  goto ldv_47891;
  default: 
#line 2314
  __bad_unaligned_access_size();
#line 2314
  goto ldv_47891;
  }
  ldv_47891: 
#line 2315
  __gu_p___1 = (void *)tl;
#line 2315
  switch (4UL) {
  case 1UL: 
#line 2315
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2315
  goto ldv_47898;
  case 2UL: 
#line 2315
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2315
  goto ldv_47898;
  case 4UL: 
#line 2315
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2315
  goto ldv_47898;
  case 8UL: 
#line 2315
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2315
  goto ldv_47898;
  default: 
#line 2315
  __bad_unaligned_access_size();
#line 2315
  goto ldv_47898;
  }
  ldv_47898: 
#line 2316
  tl = tl + 4U;
#line 2317
  goto ldv_47903;
  case 16384U: 
#line 2319
  tmp___1 = tl;
#line 2319
  tl = tl + 1;
#line 2319
  __gu_p___2 = (void *)tmp___1;
#line 2319
  switch (2UL) {
  case 1UL: 
#line 2319
  *((u8 *)__gu_p___2) = 8U;
#line 2319
  goto ldv_47907;
  case 2UL: 
#line 2319
  put_unaligned_le16(8, __gu_p___2);
#line 2319
  goto ldv_47907;
  case 4UL: 
#line 2319
  put_unaligned_le32(8U, __gu_p___2);
#line 2319
  goto ldv_47907;
  case 8UL: 
#line 2319
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2319
  goto ldv_47907;
  default: 
#line 2319
  __bad_unaligned_access_size();
#line 2319
  goto ldv_47907;
  }
  ldv_47907: 
#line 2320
  __gu_p___3 = (void *)tl;
#line 2320
  switch (8UL) {
  case 1UL: 
#line 2320
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2320
  goto ldv_47914;
  case 2UL: 
#line 2320
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2320
  goto ldv_47914;
  case 4UL: 
#line 2320
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2320
  goto ldv_47914;
  case 8UL: 
#line 2320
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2320
  goto ldv_47914;
  default: 
#line 2320
  __bad_unaligned_access_size();
#line 2320
  goto ldv_47914;
  }
  ldv_47914: 
#line 2321
  tl = tl + 8U;
#line 2322
  goto ldv_47903;
  default: ;
  }
  ldv_47903: ;
#line 2327
  return (tl);
}
}
#line 2330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2336
  cn_reply = (struct cn_msg *)(& buffer);
#line 2337
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2339
  tl = (unsigned short *)(& reply->tag_list);
#line 2343
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2345
  tmp = tl;
#line 2345
  tl = tl + 1;
#line 2345
  __gu_p = (void *)tmp;
#line 2345
  switch (2UL) {
  case 1UL: 
#line 2345
  *((u8 *)__gu_p) = 0U;
#line 2345
  goto ldv_47930;
  case 2UL: 
#line 2345
  put_unaligned_le16(0, __gu_p);
#line 2345
  goto ldv_47930;
  case 4UL: 
#line 2345
  put_unaligned_le32(0U, __gu_p);
#line 2345
  goto ldv_47930;
  case 8UL: 
#line 2345
  put_unaligned_le64(0ULL, __gu_p);
#line 2345
  goto ldv_47930;
  default: 
#line 2345
  __bad_unaligned_access_size();
#line 2345
  goto ldv_47930;
  }
  ldv_47930: 
#line 2347
  cn_reply->id.idx = 8U;
#line 2348
  cn_reply->id.val = 1U;
#line 2350
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2350
  cn_reply->seq = (__u32 )tmp___0;
#line 2351
  cn_reply->ack = 0U;
#line 2352
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2354
  cn_reply->flags = 0U;
#line 2356
  reply->packet_type = 17;
#line 2357
  reply->minor = mdev_to_minor(mdev);
#line 2358
  reply->ret_code = 101;
#line 2360
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2361
  return;
}
}
#line 2363 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2369
  cn_reply = (struct cn_msg *)(& buffer);
#line 2370
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2372
  tl = (unsigned short *)(& reply->tag_list);
#line 2376
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2377
  tmp = tl;
#line 2377
  tl = tl + 1;
#line 2377
  __gu_p = (void *)tmp;
#line 2377
  switch (2UL) {
  case 1UL: 
#line 2377
  *((u8 *)__gu_p) = 0U;
#line 2377
  goto ldv_47945;
  case 2UL: 
#line 2377
  put_unaligned_le16(0, __gu_p);
#line 2377
  goto ldv_47945;
  case 4UL: 
#line 2377
  put_unaligned_le32(0U, __gu_p);
#line 2377
  goto ldv_47945;
  case 8UL: 
#line 2377
  put_unaligned_le64(0ULL, __gu_p);
#line 2377
  goto ldv_47945;
  default: 
#line 2377
  __bad_unaligned_access_size();
#line 2377
  goto ldv_47945;
  }
  ldv_47945: 
#line 2379
  cn_reply->id.idx = 8U;
#line 2380
  cn_reply->id.val = 1U;
#line 2382
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2382
  cn_reply->seq = (__u32 )tmp___0;
#line 2383
  cn_reply->ack = 0U;
#line 2384
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2386
  cn_reply->flags = 0U;
#line 2388
  reply->packet_type = 20;
#line 2389
  reply->minor = mdev_to_minor(mdev);
#line 2390
  reply->ret_code = 101;
#line 2392
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2393
  return;
}
}
#line 2395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  struct page *page ;
  unsigned int len ;
  void *tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  void *__gu_p___0 ;
  unsigned short *tmp___1 ;
  void *d ;
  void *tmp___2 ;
  unsigned int l ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  size_t __len ;
  void *__ret ;
  struct page *tmp___3 ;
  void *__gu_p___1 ;
  unsigned short *tmp___4 ;
  int tmp___5 ;

  {
#line 2406
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2407
    return;
  } else {

  }
#line 2408
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2409
    return;
  } else {

  }
#line 2417
  tmp = kmalloc___4(33026UL, 16U);
#line 2417
  cn_reply = (struct cn_msg *)tmp;
#line 2424
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2425
    dev_err((struct device  const  *)(& (mdev->vdisk)->part0.__dev), "could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
            (unsigned long long )e->sector, e->size);
#line 2427
    return;
  } else {

  }
#line 2430
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2431
  tl = (unsigned short *)(& reply->tag_list);
#line 2433
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2434
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2435
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2436
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2437
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->ldv_43398.block_id));
#line 2439
  tmp___0 = tl;
#line 2439
  tl = tl + 1;
#line 2439
  __gu_p = (void *)tmp___0;
#line 2439
  switch (2UL) {
  case 1UL: 
#line 2439
  *((u8 *)__gu_p) = 50U;
#line 2439
  goto ldv_47965;
  case 2UL: 
#line 2439
  put_unaligned_le16(49202, __gu_p);
#line 2439
  goto ldv_47965;
  case 4UL: 
#line 2439
  put_unaligned_le32(49202U, __gu_p);
#line 2439
  goto ldv_47965;
  case 8UL: 
#line 2439
  put_unaligned_le64(49202ULL, __gu_p);
#line 2439
  goto ldv_47965;
  default: 
#line 2439
  __bad_unaligned_access_size();
#line 2439
  goto ldv_47965;
  }
  ldv_47965: 
#line 2440
  tmp___1 = tl;
#line 2440
  tl = tl + 1;
#line 2440
  __gu_p___0 = (void *)tmp___1;
#line 2440
  switch (2UL) {
  case 1UL: 
#line 2440
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2440
  goto ldv_47972;
  case 2UL: 
#line 2440
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2440
  goto ldv_47972;
  case 4UL: 
#line 2440
  put_unaligned_le32(e->size, __gu_p___0);
#line 2440
  goto ldv_47972;
  case 8UL: 
#line 2440
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2440
  goto ldv_47972;
  default: 
#line 2440
  __bad_unaligned_access_size();
#line 2440
  goto ldv_47972;
  }
  ldv_47972: 
#line 2442
  len = e->size;
#line 2443
  page = e->pages;
#line 2444
  goto ldv_47987;
  ldv_47986: 
#line 2445
  tmp___2 = __kmap_atomic(page);
#line 2445
  d = tmp___2;
#line 2446
  __min1 = len;
#line 2446
  __min2 = 4096U;
#line 2446
  l = __min1 < __min2 ? __min1 : __min2;
#line 2447
  __len = (size_t )l;
#line 2447
  __ret = __builtin_memcpy((void *)tl, (void const   *)d, __len);
#line 2448
  __kunmap_atomic(d);
#line 2449
  tl = tl + (unsigned long )l;
#line 2450
  len = len - l;
#line 2444
  page = page_chain_next(page);
  ldv_47987: ;
#line 2444
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 2444
    tmp___3 = page_chain_next(page);
#line 2444
    __builtin_prefetch((void const   *)tmp___3);
#line 2444
    if (1 != 0) {
#line 2445
      goto ldv_47986;
    } else {
#line 2447
      goto ldv_47988;
    }
  } else {

  }
  ldv_47988: 
#line 2452
  tmp___4 = tl;
#line 2452
  tl = tl + 1;
#line 2452
  __gu_p___1 = (void *)tmp___4;
#line 2452
  switch (2UL) {
  case 1UL: 
#line 2452
  *((u8 *)__gu_p___1) = 0U;
#line 2452
  goto ldv_47991;
  case 2UL: 
#line 2452
  put_unaligned_le16(0, __gu_p___1);
#line 2452
  goto ldv_47991;
  case 4UL: 
#line 2452
  put_unaligned_le32(0U, __gu_p___1);
#line 2452
  goto ldv_47991;
  case 8UL: 
#line 2452
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2452
  goto ldv_47991;
  default: 
#line 2452
  __bad_unaligned_access_size();
#line 2452
  goto ldv_47991;
  }
  ldv_47991: 
#line 2454
  cn_reply->id.idx = 8U;
#line 2455
  cn_reply->id.val = 1U;
#line 2457
  tmp___5 = atomic_add_return(1, & drbd_nl_seq);
#line 2457
  cn_reply->seq = (__u32 )tmp___5;
#line 2458
  cn_reply->ack = 0U;
#line 2459
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2461
  cn_reply->flags = 0U;
#line 2463
  reply->packet_type = 24;
#line 2464
  reply->minor = mdev_to_minor(mdev);
#line 2465
  reply->ret_code = 101;
#line 2467
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2468
  kfree((void const   *)cn_reply);
#line 2469
  return;
}
}
#line 2471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2477
  cn_reply = (struct cn_msg *)(& buffer);
#line 2478
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2480
  tl = (unsigned short *)(& reply->tag_list);
#line 2485
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2485
  if (tmp == 0) {
#line 2486
    return;
  } else {

  }
#line 2487
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2488
  put_ldev(mdev);
#line 2490
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2491
  tmp___0 = tl;
#line 2491
  tl = tl + 1;
#line 2491
  __gu_p = (void *)tmp___0;
#line 2491
  switch (2UL) {
  case 1UL: 
#line 2491
  *((u8 *)__gu_p) = 0U;
#line 2491
  goto ldv_48007;
  case 2UL: 
#line 2491
  put_unaligned_le16(0, __gu_p);
#line 2491
  goto ldv_48007;
  case 4UL: 
#line 2491
  put_unaligned_le32(0U, __gu_p);
#line 2491
  goto ldv_48007;
  case 8UL: 
#line 2491
  put_unaligned_le64(0ULL, __gu_p);
#line 2491
  goto ldv_48007;
  default: 
#line 2491
  __bad_unaligned_access_size();
#line 2491
  goto ldv_48007;
  }
  ldv_48007: 
#line 2493
  cn_reply->id.idx = 8U;
#line 2494
  cn_reply->id.val = 1U;
#line 2496
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2496
  cn_reply->seq = (__u32 )tmp___1;
#line 2497
  cn_reply->ack = 0U;
#line 2498
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2500
  cn_reply->flags = 0U;
#line 2502
  reply->packet_type = 23;
#line 2503
  reply->minor = mdev_to_minor(mdev);
#line 2504
  reply->ret_code = 101;
#line 2506
  cn_netlink_send(cn_reply, 8U, 16U);
#line 2507
  return;
}
}
#line 2509 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2512
  try = 10;
#line 2514
  cn_id_drbd.val = 1U;
  ldv_48019: 
#line 2516
  cn_id_drbd.idx = cn_idx;
#line 2517
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2518
  if (err == 0) {
#line 2519
    goto ldv_48018;
  } else {

  }
#line 2520
  cn_idx = cn_idx + 6977U;
#line 2521
  tmp = try;
#line 2521
  try = try - 1;
#line 2521
  if (tmp != 0) {
#line 2522
    goto ldv_48019;
  } else {

  }
  ldv_48018: ;
#line 2523
  if (err != 0) {
#line 2524
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2525
    return (err);
  } else {

  }
#line 2528
  return (0);
}
}
#line 2531 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2535
  cn_id_drbd.idx = cn_idx;
#line 2536
  cn_id_drbd.val = 1U;
#line 2538
  cn_del_callback(& cn_id_drbd);
#line 2539
  return;
}
}
#line 2541 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2544
  cn_reply = (struct cn_msg *)(& buffer);
#line 2545
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2549
  cn_reply->id = req->id;
#line 2551
  cn_reply->seq = req->seq;
#line 2552
  cn_reply->ack = req->ack + 1U;
#line 2553
  cn_reply->len = 12U;
#line 2554
  cn_reply->flags = 0U;
#line 2556
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2557
  reply->ret_code = ret_code;
#line 2559
  rr = cn_netlink_send(cn_reply, 8U, 16U);
#line 2560
  if (rr != 0 && rr != -3) {
#line 2561
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2562
  return;
}
}
#line 2572 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2577
  ldv_module_put(ldv_func_arg1);
#line 2578
  return;
}
}
#line 2580 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2585
  ldv_module_put(ldv_func_arg1);
#line 2586
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
