/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 19 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 20 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 23 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 26 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 29 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 30 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 43 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 46 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 48 "include/asm-generic/int-ll64.h"
typedef int s32;
#line 49 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 51 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 52 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 11 "include/asm-generic/types.h"
typedef unsigned short umode_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/types.h"
typedef u64 dma_addr_t;
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_nlink_t;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_off_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 18 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 23 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_nlink_t nlink_t;
#line 25 "include/linux/types.h"
typedef __kernel_off_t off_t;
#line 26 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 31 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 36 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 37 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 50 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 59 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 64 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 74 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 107 "include/linux/types.h"
typedef __s32 int32_t;
#line 113 "include/linux/types.h"
typedef __u32 uint32_t;
#line 138 "include/linux/types.h"
typedef unsigned long sector_t;
#line 139 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 168 "include/linux/types.h"
typedef __u16 __le16;
#line 169 "include/linux/types.h"
typedef __u16 __be16;
#line 171 "include/linux/types.h"
typedef __u32 __be32;
#line 176 "include/linux/types.h"
typedef __u32 __wsum;
#line 179 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 180 "include/linux/types.h"
typedef unsigned int fmode_t;
#line 192 "include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int volatile   counter ;
};
#line 192 "include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 197 "include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long volatile   counter ;
};
#line 197 "include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 206
struct task_struct;
#line 207
struct mm_struct;
#line 213 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/segment.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 138 "include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 237 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ptrace.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
union __anonunion_ldv_1161_8 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};
#line 203 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_ldv_1161_8 ldv_1161 ;
};
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/alternative.h"
struct module;
#line 74 "include/linux/log2.h"
struct ratelimit_state {
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};
#line 44 "include/linux/dynamic_debug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 110 "include/linux/kernel.h"
struct completion;
#line 210
struct pid;
#line 13 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 14 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 18 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 187 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_11 {
   pgdval_t pgd ;
};
#line 189 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_11 pgd_t;
#line 277
struct page;
#line 285
struct file;
#line 298
struct seq_file;
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2078_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_ldv_2093_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned char base1 ;
   unsigned char type : 4 ;
   unsigned char s : 1 ;
   unsigned char dpl : 2 ;
   unsigned char p : 1 ;
   unsigned char limit : 4 ;
   unsigned char avl : 1 ;
   unsigned char l : 1 ;
   unsigned char d : 1 ;
   unsigned char g : 1 ;
   unsigned char base2 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
union __anonunion_ldv_2094_14 {
   struct __anonstruct_ldv_2078_15 ldv_2078 ;
   struct __anonstruct_ldv_2093_16 ldv_2093 ;
};
#line 331 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/pgtable_types.h"
struct desc_struct {
   union __anonunion_ldv_2094_14 ldv_2094 ;
};
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/desc_defs.h"
enum km_type {
    KM_BOUNCE_READ = 0,
    KM_SKB_SUNRPC_DATA = 1,
    KM_SKB_DATA_SOFTIRQ = 2,
    KM_USER0 = 3,
    KM_USER1 = 4,
    KM_BIO_SRC_IRQ = 5,
    KM_BIO_DST_IRQ = 6,
    KM_PTE0 = 7,
    KM_PTE1 = 8,
    KM_IRQ0 = 9,
    KM_IRQ1 = 10,
    KM_SOFTIRQ0 = 11,
    KM_SOFTIRQ1 = 12,
    KM_SYNC_ICACHE = 13,
    KM_SYNC_DCACHE = 14,
    KM_UML_USERCOPY = 15,
    KM_IRQ_PTE = 16,
    KM_NMI = 17,
    KM_NMI_PTE = 18,
    KM_TYPE_NR = 19
} ;
#line 121
struct thread_struct;
#line 123
struct cpumask;
#line 319 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/paravirt_types.h"
struct raw_spinlock;
#line 290 "include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[64U] ;
};
#line 13 "include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 591 "include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/ds.h"
struct exec_domain;
#line 90 "include/linux/personality.h"
struct map_segment;
#line 90 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 151 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4648_20 {
   u64 rip ;
   u64 rdp ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_ldv_4654_21 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4655_19 {
   struct __anonstruct_ldv_4648_20 ldv_4648 ;
   struct __anonstruct_ldv_4654_21 ldv_4654 ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union __anonunion_ldv_4664_22 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_ldv_4655_19 ldv_4655 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_ldv_4664_22 ldv_4664 ;
};
#line 335 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct ymmh_struct {
   u32 ymmh_space[64U] ;
};
#line 361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_hdr_struct {
   u64 xstate_bv ;
   u64 reserved1[2U] ;
   u64 reserved2[5U] ;
};
#line 367 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct xsave_struct {
   struct i387_fxsave_struct i387 ;
   struct xsave_hdr_struct xsave_hdr ;
   struct ymmh_struct ymmh ;
};
#line 373 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
   struct xsave_struct xsave ;
};
#line 423
struct kmem_cache;
#line 424
struct ds_context;
#line 424 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   struct ds_context *ds_ctx ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_24 {
   unsigned long seg ;
};
#line 627 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_24 mm_segment_t;
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 327 "include/linux/list.h"
struct hlist_node;
#line 327 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 543 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct timespec;
#line 113
struct compat_timespec;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_ldv_5140_26 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_nanosleep_28 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 114
struct pollfd;
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct __anonstruct_poll_29 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
union __anonunion_ldv_5163_25 {
   struct __anonstruct_ldv_5140_26 ldv_5140 ;
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_29 poll ;
};
#line 114 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion_ldv_5163_25 ldv_5163 ;
};
#line 23 "include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
#line 131 "include/asm-generic/atomic-long.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
   int uaccess_err ;
};
#line 8 "include/linux/bottom_half.h"
struct raw_spinlock {
   unsigned int slock ;
};
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_30 {
   unsigned int lock ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_30 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 56 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 24 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 38 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 42 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 127 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
   unsigned long ip ;
};
#line 170 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned short class_idx : 13 ;
   unsigned char irq_context : 2 ;
   unsigned char trylock : 1 ;
   unsigned char read : 2 ;
   unsigned char check : 2 ;
   unsigned char hardirqs_off : 1 ;
   unsigned short references : 11 ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_31 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_31 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_32 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_32 rwlock_t;
#line 35 "include/linux/seqlock.h"
struct __anonstruct_seqlock_t_33 {
   unsigned int sequence ;
   spinlock_t lock ;
};
#line 35 "include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_33 seqlock_t;
#line 169 "include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};
#line 267 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 98 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_34 {
   unsigned long bits[8U] ;
};
#line 98 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_34 nodemask_t;
#line 643 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 63 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};
#line 154
struct rw_semaphore;
#line 156 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 752 "include/linux/mmzone.h"
struct ctl_table;
#line 165 "include/linux/ioport.h"
struct device;
#line 310 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 85 "include/linux/debugobjects.h"
struct tvec_base;
#line 86 "include/linux/debugobjects.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
   struct lockdep_map lockdep_map ;
};
#line 240 "include/linux/timer.h"
struct hrtimer;
#line 241
enum hrtimer_restart;
#line 253
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 36 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 45 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 46 "include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device * ) ;
   void (*complete)(struct device * ) ;
   int (*suspend)(struct device * ) ;
   int (*resume)(struct device * ) ;
   int (*freeze)(struct device * ) ;
   int (*thaw)(struct device * ) ;
   int (*poweroff)(struct device * ) ;
   int (*restore)(struct device * ) ;
   int (*suspend_noirq)(struct device * ) ;
   int (*resume_noirq)(struct device * ) ;
   int (*freeze_noirq)(struct device * ) ;
   int (*thaw_noirq)(struct device * ) ;
   int (*poweroff_noirq)(struct device * ) ;
   int (*restore_noirq)(struct device * ) ;
   int (*runtime_suspend)(struct device * ) ;
   int (*runtime_resume)(struct device * ) ;
   int (*runtime_idle)(struct device * ) ;
};
#line 215
enum dpm_state {
    DPM_INVALID = 0,
    DPM_ON = 1,
    DPM_PREPARING = 2,
    DPM_RESUMING = 3,
    DPM_SUSPENDING = 4,
    DPM_OFF = 5,
    DPM_OFF_IRQ = 6
} ;
#line 225
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
} ;
#line 232
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_RESUME = 3
} ;
#line 239 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   enum dpm_state status ;
   struct list_head entry ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   spinlock_t lock ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned char disable_depth : 3 ;
   unsigned char ignore_children : 1 ;
   unsigned char idle_notification : 1 ;
   unsigned char request_pending : 1 ;
   unsigned char deferred_resume : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_99 {
   void *ldt ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 16 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_99 mm_context_t;
#line 15 "include/linux/smp.h"
struct call_single_data {
   struct list_head list ;
   void (*func)(void * ) ;
   void *info ;
   u16 flags ;
   u16 priv ;
};
#line 49 "include/linux/topology.h"
struct vm_area_struct;
#line 33 "include/linux/kmod.h"
struct key;
#line 254 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/elf.h"
struct linux_binprm;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 180 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 188 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 406
struct kobject;
#line 407 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 75 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 81
struct sysfs_dirent;
#line 131 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 48 "include/linux/kobject.h"
struct kset;
#line 48
struct kobj_type;
#line 48 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   struct kref kref ;
   unsigned char state_initialized : 1 ;
   unsigned char state_in_sysfs : 1 ;
   unsigned char state_add_uevent_sent : 1 ;
   unsigned char state_remove_uevent_sent : 1 ;
   unsigned char uevent_suppress : 1 ;
};
#line 106 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 112 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 119 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 136 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 210
struct kernel_param;
#line 38 "include/linux/moduleparam.h"
struct kparam_string;
#line 38
struct kparam_array;
#line 38 "include/linux/moduleparam.h"
union __anonunion_ldv_10170_109 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 38 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   u16 perm ;
   u16 flags ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   union __anonunion_ldv_10170_109 ldv_10170 ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 61 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   * , struct kernel_param * ) ;
   int (*get)(char * , struct kernel_param * ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 243 "include/linux/moduleparam.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 91 "include/linux/completion.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 306 "include/linux/rcupdate.h"
struct tracepoint;
#line 307 "include/linux/rcupdate.h"
struct tracepoint {
   char const   *name ;
   int state ;
   void (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   void **funcs ;
};
#line 79 "include/linux/kmemleak.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[18U] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 57 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 67 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(void * ) ;
   int inuse ;
   int align ;
   unsigned long min_partial ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[512U] ;
   struct kmem_cache_cpu *cpu_slab[4096U] ;
};
#line 155 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/local.h"
struct mod_arch_specific {

};
#line 100 "include/trace/events/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 46 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 58
struct module_param_attrs;
#line 58 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
};
#line 70
struct exception_table_entry;
#line 179
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 185
struct module_sect_attrs;
#line 185
struct module_notes_attrs;
#line 185
struct ftrace_event_call;
#line 185 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned long const   *crcs ;
   unsigned int num_syms ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned long const   *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct tracepoint *tracepoints ;
   unsigned int num_tracepoints ;
   char const   **trace_bprintk_fmt_start ;
   unsigned int num_trace_bprintk_fmt ;
   struct ftrace_event_call *trace_events ;
   unsigned int num_trace_events ;
   unsigned long *ftrace_callsites ;
   unsigned int num_ftrace_callsites ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   char *refptr ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};
#line 542
struct device_driver;
#line 99 "include/linux/connector.h"
struct hlist_nulls_node;
#line 99 "include/linux/connector.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 20 "include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 16 "include/linux/socket.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 34 "include/linux/socket.h"
typedef unsigned short sa_family_t;
#line 35 "include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 "include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iovec *msg_iov ;
   __kernel_size_t msg_iovlen ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
};
#line 132 "include/linux/socket.h"
struct ucred {
   __u32 pid ;
   __u32 uid ;
   __u32 gid ;
};
#line 41 "include/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_111 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 41 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_111 sync_serial_settings;
#line 48 "include/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_112 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 48 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_112 te1_settings;
#line 53 "include/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_113 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 53 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_113 raw_hdlc_proto;
#line 63 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_114 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 63 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_114 fr_proto;
#line 67 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_115 {
   unsigned int dlci ;
};
#line 67 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_115 fr_proto_pvc;
#line 72 "include/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_116 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 72 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_116 fr_proto_pvc_info;
#line 77 "include/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_117 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 77 "include/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_117 cisco_proto;
#line 93 "include/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 137 "include/linux/if.h"
union __anonunion_ifs_ifsu_118 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 137 "include/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_118 ifs_ifsu ;
};
#line 156 "include/linux/if.h"
union __anonunion_ifr_ifrn_119 {
   char ifrn_name[16U] ;
};
#line 156 "include/linux/if.h"
union __anonunion_ifr_ifru_120 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 156 "include/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_119 ifr_ifrn ;
   union __anonunion_ifr_ifru_120 ifr_ifru ;
};
#line 122 "include/linux/if_ether.h"
struct prio_tree_node;
#line 122 "include/linux/if_ether.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111 "include/linux/prio_tree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 164
struct address_space;
#line 28 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_12025_123 {
   u16 inuse ;
   u16 objects ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12026_122 {
   atomic_t _mapcount ;
   struct __anonstruct_ldv_12025_123 ldv_12025 ;
};
#line 29 "include/linux/mm_types.h"
struct __anonstruct_ldv_12031_125 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12035_124 {
   struct __anonstruct_ldv_12031_125 ldv_12031 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 29 "include/linux/mm_types.h"
union __anonunion_ldv_12039_126 {
   unsigned long index ;
   void *freelist ;
};
#line 29 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_12026_122 ldv_12026 ;
   union __anonunion_ldv_12035_124 ldv_12035 ;
   union __anonunion_ldv_12039_126 ldv_12039 ;
   struct list_head lru ;
};
#line 127 "include/linux/mm_types.h"
struct __anonstruct_vm_set_128 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 127 "include/linux/mm_types.h"
union __anonunion_shared_127 {
   struct __anonstruct_vm_set_128 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 127
struct anon_vma;
#line 127
struct vm_operations_struct;
#line 127
struct mempolicy;
#line 127 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_127 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct  const  *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 189 "include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 195 "include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 201
struct linux_binfmt;
#line 201
struct mmu_notifier_mm;
#line 201 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[44U] ;
   struct linux_binfmt *binfmt ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct hlist_head ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
};
#line 108 "include/linux/kmemcheck.h"
enum ldv_12147 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
} ;
#line 51 "include/linux/net.h"
typedef enum ldv_12147 socket_state;
#line 137 "include/asm-generic/fcntl.h"
struct poll_table_struct;
#line 138
struct pipe_inode_info;
#line 139
struct inode;
#line 140
struct net;
#line 157
struct fasync_struct;
#line 157
struct sock;
#line 157
struct proto_ops;
#line 157 "include/asm-generic/fcntl.h"
struct socket {
   socket_state state ;
   int type_begin[0U] ;
   short type ;
   int type_end[0U] ;
   unsigned long flags ;
   struct fasync_struct *fasync_list ;
   wait_queue_head_t wait ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops  const  *ops ;
};
#line 147 "include/linux/net.h"
struct kiocb;
#line 148 "include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket * ) ;
   int (*bind)(struct socket * , struct sockaddr * , int  ) ;
   int (*connect)(struct socket * , struct sockaddr * , int  , int  ) ;
   int (*socketpair)(struct socket * , struct socket * ) ;
   int (*accept)(struct socket * , struct socket * , int  ) ;
   int (*getname)(struct socket * , struct sockaddr * , int * , int  ) ;
   unsigned int (*poll)(struct file * , struct socket * , struct poll_table_struct * ) ;
   int (*ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct socket * , unsigned int  , unsigned long  ) ;
   int (*listen)(struct socket * , int  ) ;
   int (*shutdown)(struct socket * , int  ) ;
   int (*setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct socket * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct socket * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct socket * , struct msghdr * , size_t  , int  ) ;
   int (*mmap)(struct file * , struct socket * , struct vm_area_struct * ) ;
   ssize_t (*sendpage)(struct socket * , struct page * , int  , size_t  , int  ) ;
   ssize_t (*splice_read)(struct socket * , loff_t * , struct pipe_inode_info * ,
                          size_t  , unsigned int  ) ;
};
#line 840 "include/linux/sysctl.h"
struct nsproxy;
#line 841
struct ctl_table_root;
#line 842 "include/linux/sysctl.h"
struct ctl_table_set {
   struct list_head list ;
   struct ctl_table_set *parent ;
   int (*is_seen)(struct ctl_table_set * ) ;
};
#line 957
struct ctl_table_header;
#line 975 "include/linux/sysctl.h"
typedef int ctl_handler(struct ctl_table * , void * , size_t * , void * , size_t  );
#line 979 "include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table * , int  , void * , size_t * , loff_t * );
#line 1008 "include/linux/sysctl.h"
struct ctl_table {
   int ctl_name ;
   char const   *procname ;
   void *data ;
   int maxlen ;
   mode_t mode ;
   struct ctl_table *child ;
   struct ctl_table *parent ;
   proc_handler *proc_handler ;
   ctl_handler *strategy ;
   void *extra1 ;
   void *extra2 ;
};
#line 1065 "include/linux/sysctl.h"
struct ctl_table_root {
   struct list_head root_list ;
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root * , struct nsproxy * ) ;
   int (*permissions)(struct ctl_table_root * , struct nsproxy * , struct ctl_table * ) ;
};
#line 1073 "include/linux/sysctl.h"
struct ctl_table_header {
   struct ctl_table *ctl_table ;
   struct list_head ctl_entry ;
   int used ;
   int count ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_table *attached_by ;
   struct ctl_table *attached_to ;
   struct ctl_table_header *parent ;
};
#line 176 "include/linux/textsearch.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 161 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 108 "include/net/checksum.h"
struct sk_buff;
#line 120
struct klist_node;
#line 37 "include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};
#line 67 "include/linux/klist.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 48 "include/linux/semaphore.h"
struct dma_map_ops;
#line 48 "include/linux/semaphore.h"
struct dev_archdata {
   void *acpi_handle ;
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};
#line 17 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct device_private;
#line 18
struct driver_private;
#line 19
struct class;
#line 20
struct class_private;
#line 21
struct bus_type;
#line 22
struct bus_type_private;
#line 23 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 50 "include/linux/device.h"
struct device_attribute;
#line 50
struct driver_attribute;
#line 50 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct bus_type_private *p ;
};
#line 121 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct attribute_group  const  **groups ;
   struct dev_pm_ops  const  *pm ;
   struct driver_private *p ;
};
#line 151 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 181
struct class_attribute;
#line 181 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
   struct class_private *p ;
};
#line 208
struct device_type;
#line 247 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 279 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group  const  **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   char *(*devnode)(struct device * , mode_t * ) ;
   void (*release)(struct device * ) ;
   struct dev_pm_ops  const  *pm ;
};
#line 306 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 367 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 376
struct dma_coherent_mem;
#line 376 "include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const   *init_name ;
   struct device_type *type ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   dev_t devt ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group  const  **groups ;
   void (*release)(struct device * ) ;
};
#line 34 "include/linux/bug.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};
#line 65 "include/linux/dma-attrs.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 16 "include/asm-generic/scatterlist.h"
struct file_ra_state;
#line 17
struct user_struct;
#line 18
struct writeback_control;
#line 19
struct rlimit;
#line 157 "include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *page ;
};
#line 174 "include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct * ) ;
   void (*close)(struct vm_area_struct * ) ;
   int (*fault)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*page_mkwrite)(struct vm_area_struct * , struct vm_fault * ) ;
   int (*access)(struct vm_area_struct * , unsigned long  , void * , int  , int  ) ;
   int (*set_policy)(struct vm_area_struct * , struct mempolicy * ) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct * , unsigned long  ) ;
   int (*migrate)(struct vm_area_struct * , nodemask_t const   * , nodemask_t const   * ,
                  unsigned long  ) ;
};
#line 266 "include/linux/scatterlist.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
} ;
#line 273 "include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc_coherent)(struct device * , size_t  , dma_addr_t * , gfp_t  ) ;
   void (*free_coherent)(struct device * , size_t  , void * , dma_addr_t  ) ;
   dma_addr_t (*map_page)(struct device * , struct page * , unsigned long  , size_t  ,
                          enum dma_data_direction  , struct dma_attrs * ) ;
   void (*unmap_page)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ,
                      struct dma_attrs * ) ;
   int (*map_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                 struct dma_attrs * ) ;
   void (*unmap_sg)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ,
                    struct dma_attrs * ) ;
   void (*sync_single_for_cpu)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_for_device)(struct device * , dma_addr_t  , size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_cpu)(struct device * , dma_addr_t  , unsigned long  ,
                                     size_t  , enum dma_data_direction  ) ;
   void (*sync_single_range_for_device)(struct device * , dma_addr_t  , unsigned long  ,
                                        size_t  , enum dma_data_direction  ) ;
   void (*sync_sg_for_cpu)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   void (*sync_sg_for_device)(struct device * , struct scatterlist * , int  , enum dma_data_direction  ) ;
   int (*mapping_error)(struct device * , dma_addr_t  ) ;
   int (*dma_supported)(struct device * , u64  ) ;
   int (*set_dma_mask)(struct device * , u64  ) ;
   int is_phys ;
};
#line 33 "include/linux/dmaengine.h"
typedef s32 dma_cookie_t;
#line 631
struct hrtimer_clock_base;
#line 632
struct hrtimer_cpu_base;
#line 641
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 646 "include/linux/dmaengine.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t _expires ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};
#line 128 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
};
#line 152 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 469
struct net_device;
#line 470 "include/linux/hrtimer.h"
struct nf_conntrack {
   atomic_t use ;
};
#line 102 "include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   struct net_device *physindev ;
   struct net_device *physoutdev ;
   unsigned int mask ;
   unsigned long data[4U] ;
};
#line 112 "include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 253 "include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 254
struct sec_path;
#line 254 "include/linux/skbuff.h"
struct __anonstruct_ldv_17577_132 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 254 "include/linux/skbuff.h"
union __anonunion_ldv_17578_131 {
   __wsum csum ;
   struct __anonstruct_ldv_17577_132 ldv_17577 ;
};
#line 254 "include/linux/skbuff.h"
struct sk_buff {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   struct sock *sk ;
   ktime_t tstamp ;
   struct net_device *dev ;
   unsigned long _skb_dst ;
   struct sec_path *sp ;
   char cb[48U] ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   union __anonunion_ldv_17578_131 ldv_17578 ;
   __u32 priority ;
   int flags1_begin[0U] ;
   unsigned char local_df : 1 ;
   unsigned char cloned : 1 ;
   unsigned char ip_summed : 2 ;
   unsigned char nohdr : 1 ;
   unsigned char nfctinfo : 3 ;
   unsigned char pkt_type : 3 ;
   unsigned char fclone : 2 ;
   unsigned char ipvs_property : 1 ;
   unsigned char peeked : 1 ;
   unsigned char nf_trace : 1 ;
   int flags1_end[0U] ;
   __be16 protocol ;
   void (*destructor)(struct sk_buff * ) ;
   struct nf_conntrack *nfct ;
   struct sk_buff *nfct_reasm ;
   struct nf_bridge_info *nf_bridge ;
   int iif ;
   __u16 queue_mapping ;
   __u16 tc_index ;
   __u16 tc_verd ;
   int flags2_begin[0U] ;
   unsigned char ndisc_nodetype : 2 ;
   int flags2_end[0U] ;
   dma_cookie_t dma_cookie ;
   __u32 secmark ;
   __u32 mark ;
   __u16 vlan_tci ;
   sk_buff_data_t transport_header ;
   sk_buff_data_t network_header ;
   sk_buff_data_t mac_header ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};
#line 425
struct dst_entry;
#line 435
struct rtable;
#line 394 "include/linux/rculist.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 reserved2 ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};
#line 51 "include/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char reserved1[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 69 "include/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 84 "include/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 92 "include/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 101 "include/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 197 "include/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 219 "include/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 258 "include/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 267 "include/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 284 "include/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 306 "include/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 313 "include/linux/ethtool.h"
struct ethtool_rawip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __u8 hdata[64U] ;
};
#line 319 "include/linux/ethtool.h"
struct ethtool_ether_spec {
   __be16 ether_type ;
   __u8 frame_size ;
   __u8 eframe[16U] ;
};
#line 325 "include/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 337 "include/linux/ethtool.h"
union __anonunion_h_u_133 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 337 "include/linux/ethtool.h"
union __anonunion_m_u_134 {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_rawip4_spec raw_ip4_spec ;
   struct ethtool_ether_spec ether_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   __u8 hdata[64U] ;
};
#line 337 "include/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union __anonunion_h_u_133 h_u ;
   union __anonunion_m_u_134 m_u ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 354 "include/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};
#line 368 "include/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 396 "include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device * , struct ethtool_cmd * ) ;
   int (*set_settings)(struct net_device * , struct ethtool_cmd * ) ;
   void (*get_drvinfo)(struct net_device * , struct ethtool_drvinfo * ) ;
   int (*get_regs_len)(struct net_device * ) ;
   void (*get_regs)(struct net_device * , struct ethtool_regs * , void * ) ;
   void (*get_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   int (*set_wol)(struct net_device * , struct ethtool_wolinfo * ) ;
   u32 (*get_msglevel)(struct net_device * ) ;
   void (*set_msglevel)(struct net_device * , u32  ) ;
   int (*nway_reset)(struct net_device * ) ;
   u32 (*get_link)(struct net_device * ) ;
   int (*get_eeprom_len)(struct net_device * ) ;
   int (*get_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*set_eeprom)(struct net_device * , struct ethtool_eeprom * , u8 * ) ;
   int (*get_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   int (*set_coalesce)(struct net_device * , struct ethtool_coalesce * ) ;
   void (*get_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   int (*set_ringparam)(struct net_device * , struct ethtool_ringparam * ) ;
   void (*get_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   int (*set_pauseparam)(struct net_device * , struct ethtool_pauseparam * ) ;
   u32 (*get_rx_csum)(struct net_device * ) ;
   int (*set_rx_csum)(struct net_device * , u32  ) ;
   u32 (*get_tx_csum)(struct net_device * ) ;
   int (*set_tx_csum)(struct net_device * , u32  ) ;
   u32 (*get_sg)(struct net_device * ) ;
   int (*set_sg)(struct net_device * , u32  ) ;
   u32 (*get_tso)(struct net_device * ) ;
   int (*set_tso)(struct net_device * , u32  ) ;
   void (*self_test)(struct net_device * , struct ethtool_test * , u64 * ) ;
   void (*get_strings)(struct net_device * , u32  , u8 * ) ;
   int (*phys_id)(struct net_device * , u32  ) ;
   void (*get_ethtool_stats)(struct net_device * , struct ethtool_stats * , u64 * ) ;
   int (*begin)(struct net_device * ) ;
   void (*complete)(struct net_device * ) ;
   u32 (*get_ufo)(struct net_device * ) ;
   int (*set_ufo)(struct net_device * , u32  ) ;
   u32 (*get_flags)(struct net_device * ) ;
   int (*set_flags)(struct net_device * , u32  ) ;
   u32 (*get_priv_flags)(struct net_device * ) ;
   int (*set_priv_flags)(struct net_device * , u32  ) ;
   int (*get_sset_count)(struct net_device * , int  ) ;
   int (*self_test_count)(struct net_device * ) ;
   int (*get_stats_count)(struct net_device * ) ;
   int (*get_rxnfc)(struct net_device * , struct ethtool_rxnfc * , void * ) ;
   int (*set_rxnfc)(struct net_device * , struct ethtool_rxnfc * ) ;
   int (*flash_device)(struct net_device * , struct ethtool_flash * ) ;
};
#line 506
struct prot_inuse;
#line 507 "include/linux/ethtool.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};
#line 38 "include/net/snmp.h"
struct ipstats_mib {
   unsigned long mibs[31U] ;
};
#line 75 "include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 83 "include/net/snmp.h"
struct icmpmsg_mib {
   unsigned long mibs[512U] ;
};
#line 88 "include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[4U] ;
};
#line 94 "include/net/snmp.h"
struct icmpv6msg_mib {
   unsigned long mibs[512U] ;
};
#line 99 "include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[15U] ;
};
#line 106 "include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[7U] ;
};
#line 112 "include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[75U] ;
};
#line 118 "include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[26U] ;
};
#line 124
struct proc_dir_entry;
#line 124 "include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics[2U] ;
   struct ipstats_mib *ip_statistics[2U] ;
   struct linux_mib *net_statistics[2U] ;
   struct udp_mib *udp_statistics[2U] ;
   struct udp_mib *udplite_statistics[2U] ;
   struct icmp_mib *icmp_statistics[2U] ;
   struct icmpmsg_mib *icmpmsg_statistics[2U] ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6[2U] ;
   struct udp_mib *udplite_stats_in6[2U] ;
   struct ipstats_mib *ipv6_statistics[2U] ;
   struct icmpv6_mib *icmpv6_statistics[2U] ;
   struct icmpv6msg_mib *icmpv6msg_statistics[2U] ;
   struct linux_xfrm_mib *xfrm_statistics[2U] ;
};
#line 26 "include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 12 "include/net/netns/unix.h"
struct netns_packet {
   rwlock_t sklist_lock ;
   struct hlist_head sklist ;
};
#line 14 "include/net/netns/packet.h"
struct netns_frags {
   int nqueues ;
   atomic_t mem ;
   struct list_head lru_list ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};
#line 72 "include/net/inet_frag.h"
struct ipv4_devconf;
#line 73
struct fib_rules_ops;
#line 74
struct xt_table;
#line 74
struct mfc_cache;
#line 74
struct vif_device;
#line 74 "include/net/inet_frag.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   struct hlist_head *fib_table_hash ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *tcp_sock ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   struct hlist_head *nat_bysource ;
   int nat_vmalloced ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   int sysctl_rt_cache_rebuild_count ;
   int current_rt_cache_rebuild_count ;
   struct timer_list rt_secret_timer ;
   atomic_t rt_genid ;
   struct sock *mroute_sk ;
   struct mfc_cache **mfc_cache_array ;
   struct vif_device *vif_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 70 "include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   __be16 protocol ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops * ) ;
   struct dst_entry *(*check)(struct dst_entry * , __u32  ) ;
   void (*destroy)(struct dst_entry * ) ;
   void (*ifdown)(struct dst_entry * , struct net_device * , int  ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry * ) ;
   void (*link_failure)(struct sk_buff * ) ;
   void (*update_pmtu)(struct dst_entry * , u32  ) ;
   int (*local_out)(struct sk_buff * ) ;
   atomic_t entries ;
   struct kmem_cache *kmem_cachep ;
};
#line 28 "include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *table ;
   struct ctl_table_header *frags_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int icmpv6_time ;
};
#line 29 "include/net/netns/ipv6.h"
struct ipv6_devconf;
#line 29
struct rt6_info;
#line 29
struct rt6_statistics;
#line 29
struct fib6_table;
#line 29
struct mfc6_cache;
#line 29
struct mif_device;
#line 29 "include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mroute6_sk ;
   struct mfc6_cache **mfc6_cache_array ;
   struct mif_device *vif6_table ;
   int maxvif ;
   atomic_t cache_resolve_queue_len ;
   int mroute_do_assert ;
   int mroute_do_pim ;
   int mroute_reg_vif_num ;
};
#line 70 "include/net/netns/ipv6.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 318 "include/linux/in.h"
union __anonunion_in6_u_135 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 318 "include/linux/in.h"
struct in6_addr {
   union __anonunion_in6_u_135 in6_u ;
};
#line 237 "include/linux/netfilter.h"
struct flowi;
#line 298 "include/linux/netfilter.h"
struct __anonstruct_ip4_u_137 {
   __be32 daddr ;
   __be32 saddr ;
   __u8 tos ;
   __u8 scope ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_ip6_u_138 {
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_dn_u_139 {
   __le16 daddr ;
   __le16 saddr ;
   __u8 scope ;
};
#line 298 "include/linux/netfilter.h"
union __anonunion_nl_u_136 {
   struct __anonstruct_ip4_u_137 ip4_u ;
   struct __anonstruct_ip6_u_138 ip6_u ;
   struct __anonstruct_dn_u_139 dn_u ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_ports_141 {
   __be16 sport ;
   __be16 dport ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_icmpt_142 {
   __u8 type ;
   __u8 code ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_dnports_143 {
   __le16 sport ;
   __le16 dport ;
};
#line 298 "include/linux/netfilter.h"
struct __anonstruct_mht_144 {
   __u8 type ;
};
#line 298 "include/linux/netfilter.h"
union __anonunion_uli_u_140 {
   struct __anonstruct_ports_141 ports ;
   struct __anonstruct_icmpt_142 icmpt ;
   struct __anonstruct_dnports_143 dnports ;
   __be32 spi ;
   struct __anonstruct_mht_144 mht ;
};
#line 298 "include/linux/netfilter.h"
struct flowi {
   int oif ;
   int iif ;
   __u32 mark ;
   union __anonunion_nl_u_136 nl_u ;
   __u8 proto ;
   __u8 flags ;
   union __anonunion_uli_u_140 uli_u ;
   __u32 secid ;
};
#line 89 "include/linux/kdev_t.h"
struct nameidata;
#line 90
struct path;
#line 91
struct vfsmount;
#line 92 "include/linux/kdev_t.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
union __anonunion_d_u_145 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 77
struct dentry_operations;
#line 77
struct super_block;
#line 77 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   int d_mounted ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_145 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations  const  *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   unsigned char d_iname[32U] ;
};
#line 126 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 382 "include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 193
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 200
struct pid_namespace;
#line 200 "include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 101 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 570 "include/linux/capability.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 38 "include/linux/fiemap.h"
struct export_operations;
#line 39
struct hd_geometry;
#line 40
struct kstatfs;
#line 41
struct cred;
#line 411 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 470 "include/linux/fs.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 117 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 150 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156
struct dquot;
#line 182 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 183 "include/linux/quota.h"
typedef long long qsize_t;
#line 186 "include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 208
struct quota_format_type;
#line 209 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   void *dqi_priv ;
};
#line 251 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 279 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 293 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , qsize_t  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , qsize_t  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   struct dquot *(*alloc_dquot)(struct super_block * , int  ) ;
   void (*destroy_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
   int (*reserve_space)(struct inode * , qsize_t  , int  ) ;
   int (*claim_space)(struct inode * , qsize_t  ) ;
   void (*release_rsv)(struct inode * , qsize_t  ) ;
   qsize_t (*get_reserved_space)(struct inode * ) ;
};
#line 319 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 334 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 378 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 560 "include/linux/fs.h"
union __anonunion_arg_148 {
   char *buf ;
   void *data ;
};
#line 560 "include/linux/fs.h"
struct __anonstruct_read_descriptor_t_147 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_148 arg ;
   int error ;
};
#line 560 "include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_147 read_descriptor_t;
#line 563 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
   int (*is_partially_uptodate)(struct page * , read_descriptor_t * , unsigned long  ) ;
   int (*error_remove_page)(struct address_space * , struct page * ) ;
};
#line 612
struct backing_dev_info;
#line 613 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 634
struct hd_struct;
#line 634
struct gendisk;
#line 634 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};
#line 702
struct posix_acl;
#line 703
struct inode_operations;
#line 703
struct file_operations;
#line 703
struct file_lock;
#line 703
struct cdev;
#line 703 "include/linux/fs.h"
union __anonunion_ldv_20854_149 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 703 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   blkcnt_t i_blocks ;
   unsigned int i_blkbits ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_20854_149 ldv_20854 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_mark_entries ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   void *i_private ;
};
#line 871 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 879 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 902 "include/linux/fs.h"
union __anonunion_f_u_150 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 902 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_150 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred  const  *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 1025
struct files_struct;
#line 1025 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 1026 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 1031 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_152 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_151 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_152 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations  const  *fl_ops ;
   struct lock_manager_operations  const  *fl_lmops ;
   union __anonunion_fl_u_151 fl_u ;
};
#line 1134 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1311
struct file_system_type;
#line 1311
struct super_operations;
#line 1311
struct xattr_handler;
#line 1311
struct mtd_info;
#line 1311 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations  const  *dq_op ;
   struct quotactl_ops  const  *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_need_sync ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct list_head s_dentry_lru ;
   int s_nr_dentry_unused ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1429 "include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1467
struct block_device_operations;
#line 1468 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1508 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  ) ;
   int (*check_acl)(struct inode * , int  ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
   int (*fiemap)(struct inode * , struct fiemap_extent_info * , u64  , u64  ) ;
};
#line 1551 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   int (*freeze_fs)(struct super_block * ) ;
   int (*unfreeze_fs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
   int (*bdev_try_to_free_page)(struct super_block * , struct page * , gfp_t  ) ;
};
#line 1735 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 2194
struct bio;
#line 46 "include/linux/proc_fs.h"
typedef int read_proc_t(char * , char ** , off_t  , int  , int * , void * );
#line 48 "include/linux/proc_fs.h"
typedef int write_proc_t(struct file * , char const   * , unsigned long  , void * );
#line 49 "include/linux/proc_fs.h"
struct proc_dir_entry {
   unsigned int low_ino ;
   unsigned short namelen ;
   char const   *name ;
   mode_t mode ;
   nlink_t nlink ;
   uid_t uid ;
   gid_t gid ;
   loff_t size ;
   struct inode_operations  const  *proc_iops ;
   struct file_operations  const  *proc_fops ;
   struct proc_dir_entry *next ;
   struct proc_dir_entry *parent ;
   struct proc_dir_entry *subdir ;
   void *data ;
   read_proc_t *read_proc ;
   write_proc_t *write_proc ;
   atomic_t count ;
   int pde_users ;
   spinlock_t pde_unload_lock ;
   struct completion *pde_unload_completion ;
   struct list_head pde_openers ;
};
#line 352 "include/linux/netfilter.h"
struct ebt_table;
#line 353 "include/linux/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 18 "include/net/netns/x_tables.h"
struct ip_conntrack_stat;
#line 18 "include/net/netns/x_tables.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
   struct ip_conntrack_stat *stat ;
   int sysctl_events ;
   unsigned int sysctl_events_retry_timeout ;
   int sysctl_acct ;
   int sysctl_checksum ;
   unsigned int sysctl_log_invalid ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   int hash_vmalloc ;
   int expect_vmalloc ;
};
#line 465 "include/linux/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
};
#line 15 "include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   wait_queue_head_t km_waitq ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[6U] ;
   struct xfrm_policy_hash policy_bydst[6U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct sock *nlsk ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
};
#line 54
struct net_generic;
#line 55 "include/net/netns/xfrm.h"
struct net {
   atomic_t count ;
   struct list_head list ;
   struct work_struct work ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct net_device *loopback_dev ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct list_head rules_ops ;
   spinlock_t rules_mod_lock ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_dccp dccp ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_xfrm xfrm ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
};
#line 88 "include/net/net_namespace.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations  const  *op ;
   void *private ;
};
#line 28 "include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file * , loff_t * ) ;
   void (*stop)(struct seq_file * , void * ) ;
   void *(*next)(struct seq_file * , void * , loff_t * ) ;
   int (*show)(struct seq_file * , void * ) ;
};
#line 59 "include/net/dsa.h"
struct dcbnl_rtnl_ops {
   u8 (*getstate)(struct net_device * ) ;
   u8 (*setstate)(struct net_device * , u8  ) ;
   void (*getpermhwaddr)(struct net_device * , u8 * ) ;
   void (*setpgtccfgtx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgtx)(struct net_device * , int  , u8  ) ;
   void (*setpgtccfgrx)(struct net_device * , int  , u8  , u8  , u8  , u8  ) ;
   void (*setpgbwgcfgrx)(struct net_device * , int  , u8  ) ;
   void (*getpgtccfgtx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgtx)(struct net_device * , int  , u8 * ) ;
   void (*getpgtccfgrx)(struct net_device * , int  , u8 * , u8 * , u8 * , u8 * ) ;
   void (*getpgbwgcfgrx)(struct net_device * , int  , u8 * ) ;
   void (*setpfccfg)(struct net_device * , int  , u8  ) ;
   void (*getpfccfg)(struct net_device * , int  , u8 * ) ;
   u8 (*setall)(struct net_device * ) ;
   u8 (*getcap)(struct net_device * , int  , u8 * ) ;
   u8 (*getnumtcs)(struct net_device * , int  , u8 * ) ;
   u8 (*setnumtcs)(struct net_device * , int  , u8  ) ;
   u8 (*getpfcstate)(struct net_device * ) ;
   void (*setpfcstate)(struct net_device * , u8  ) ;
   void (*getbcncfg)(struct net_device * , int  , u32 * ) ;
   void (*setbcncfg)(struct net_device * , int  , u32  ) ;
   void (*getbcnrp)(struct net_device * , int  , u8 * ) ;
   void (*setbcnrp)(struct net_device * , int  , u8  ) ;
   u8 (*setapp)(struct net_device * , u8  , u16  , u8  ) ;
   u8 (*getapp)(struct net_device * , u8  , u16  ) ;
};
#line 54 "include/net/dcbnl.h"
struct vlan_group;
#line 55
struct netpoll_info;
#line 56
struct wireless_dev;
#line 57
enum netdev_tx {
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 1,
    NETDEV_TX_LOCKED = -1
} ;
#line 88 "include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 89 "include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 170
struct neighbour;
#line 171
struct neigh_parms;
#line 191 "include/linux/netdevice.h"
struct dev_addr_list {
   struct dev_addr_list *next ;
   u8 da_addr[32U] ;
   u8 da_addrlen ;
   u8 da_synced ;
   int da_users ;
   int da_gusers ;
};
#line 224 "include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 229 "include/linux/netdevice.h"
struct hh_cache {
   struct hh_cache *hh_next ;
   atomic_t hh_refcnt ;
   __be16 hh_type ;
   u16 hh_len ;
   int (*hh_output)(struct sk_buff * ) ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 257 "include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff * , struct net_device * , unsigned short  , void const   * ,
                 void const   * , unsigned int  ) ;
   int (*parse)(struct sk_buff  const  * , unsigned char * ) ;
   int (*rebuild)(struct sk_buff * ) ;
   int (*cache)(struct neighbour  const  * , struct hh_cache * ) ;
   void (*cache_update)(struct hh_cache * , struct net_device  const  * , unsigned char const   * ) ;
};
#line 464
struct Qdisc;
#line 464 "include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   unsigned long state ;
   struct Qdisc *qdisc_sleeping ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long tx_bytes ;
   unsigned long tx_packets ;
   unsigned long tx_dropped ;
};
#line 487 "include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device * ) ;
   void (*ndo_uninit)(struct net_device * ) ;
   int (*ndo_open)(struct net_device * ) ;
   int (*ndo_stop)(struct net_device * ) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff * , struct net_device * ) ;
   u16 (*ndo_select_queue)(struct net_device * , struct sk_buff * ) ;
   void (*ndo_change_rx_flags)(struct net_device * , int  ) ;
   void (*ndo_set_rx_mode)(struct net_device * ) ;
   void (*ndo_set_multicast_list)(struct net_device * ) ;
   int (*ndo_set_mac_address)(struct net_device * , void * ) ;
   int (*ndo_validate_addr)(struct net_device * ) ;
   int (*ndo_do_ioctl)(struct net_device * , struct ifreq * , int  ) ;
   int (*ndo_set_config)(struct net_device * , struct ifmap * ) ;
   int (*ndo_change_mtu)(struct net_device * , int  ) ;
   int (*ndo_neigh_setup)(struct net_device * , struct neigh_parms * ) ;
   void (*ndo_tx_timeout)(struct net_device * ) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device * ) ;
   void (*ndo_vlan_rx_register)(struct net_device * , struct vlan_group * ) ;
   void (*ndo_vlan_rx_add_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_vlan_rx_kill_vid)(struct net_device * , unsigned short  ) ;
   void (*ndo_poll_controller)(struct net_device * ) ;
   int (*ndo_fcoe_enable)(struct net_device * ) ;
   int (*ndo_fcoe_disable)(struct net_device * ) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device * , u16  , struct scatterlist * , unsigned int  ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device * , u16  ) ;
};
#line 638
enum ldv_18141 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
} ;
#line 647
struct iw_handler_def;
#line 647
struct iw_public_data;
#line 647
struct net_bridge_port;
#line 647
struct macvlan_port;
#line 647
struct garp_port;
#line 647
struct rtnl_link_ops;
#line 647 "include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   unsigned int irq ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   unsigned long features ;
   int ifindex ;
   int iflink ;
   struct net_device_stats stats ;
   struct iw_handler_def  const  *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops  const  *netdev_ops ;
   struct ethtool_ops  const  *ethtool_ops ;
   struct header_ops  const  *header_ops ;
   unsigned int flags ;
   unsigned short gflags ;
   unsigned short priv_flags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   struct net_device *master ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_len ;
   unsigned short dev_id ;
   struct netdev_hw_addr_list uc ;
   int uc_promisc ;
   spinlock_t addr_list_lock ;
   struct dev_addr_list *mc_list ;
   int mc_count ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   void *dsa_ptr ;
   void *atalk_ptr ;
   void *ip_ptr ;
   void *dn_ptr ;
   void *ip6_ptr ;
   void *ec_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_hw_addr_list dev_addrs ;
   unsigned char broadcast[32U] ;
   struct netdev_queue rx_queue ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   unsigned long trans_start ;
   int watchdog_timeo ;
   struct timer_list watchdog_timer ;
   atomic_t refcnt ;
   struct list_head todo_list ;
   struct hlist_node index_hlist ;
   struct net_device *link_watch_next ;
   enum ldv_18141 reg_state ;
   void (*destructor)(struct net_device * ) ;
   struct netpoll_info *npinfo ;
   struct net *nd_net ;
   void *ml_priv ;
   struct net_bridge_port *br_port ;
   struct macvlan_port *macvlan_port ;
   struct garp_port *garp_port ;
   struct device dev ;
   struct attribute_group  const  *sysfs_groups[3U] ;
   struct rtnl_link_ops  const  *rtnl_link_ops ;
   unsigned long vlan_features ;
   unsigned int gso_max_size ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   unsigned int fcoe_ddp_xid ;
};
#line 1069
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
} ;
#line 16 "include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;
#line 144 "include/linux/irq.h"
struct timer_rand_state;
#line 146
struct irqaction;
#line 81 "include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int  , void * ) ;
   unsigned long flags ;
   char const   *name ;
   void *dev_id ;
   struct irqaction *next ;
   int irq ;
   struct proc_dir_entry *dir ;
   irqreturn_t (*thread_fn)(int  , void * ) ;
   struct task_struct *thread ;
   unsigned long thread_flags ;
};
#line 2016 "include/linux/netdevice.h"
struct linux_binprm {
   char buf[128U] ;
   struct vm_area_struct *vma ;
   struct mm_struct *mm ;
   unsigned long p ;
   unsigned char cred_prepared : 1 ;
   unsigned char cap_effective : 1 ;
   unsigned int recursion_depth ;
   struct file *file ;
   struct cred *cred ;
   int unsafe ;
   unsigned int per_clear ;
   int argc ;
   int envc ;
   char *filename ;
   char *interp ;
   unsigned int interp_flags ;
   unsigned int interp_data ;
   unsigned long loader ;
   unsigned long exec ;
};
#line 61 "include/linux/binfmts.h"
struct linux_binfmt {
   struct list_head lh ;
   struct module *module ;
   int (*load_binary)(struct linux_binprm * , struct pt_regs * ) ;
   int (*load_shlib)(struct file * ) ;
   int (*core_dump)(long  , struct pt_regs * , struct file * , unsigned long  ) ;
   unsigned long min_coredump ;
   int hasvdso ;
};
#line 125
struct siginfo;
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_155 {
   unsigned long sig[1U] ;
};
#line 32 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_155 sigset_t;
#line 17 "include/asm-generic/signal-defs.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 126 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 185 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_157 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_158 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_159 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_160 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_161 {
   void *_addr ;
   short _addr_lsb ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_162 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_156 {
   int _pad[28U] ;
   struct __anonstruct__kill_157 _kill ;
   struct __anonstruct__timer_158 _timer ;
   struct __anonstruct__rt_159 _rt ;
   struct __anonstruct__sigchld_160 _sigchld ;
   struct __anonstruct__sigfault_161 _sigfault ;
   struct __anonstruct__sigpoll_162 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_156 _sifields ;
};
#line 94 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 42 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 113 "include/linux/sem.h"
struct sem_undo_list;
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct list_head list_proc ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 26 "include/asm-generic/cputime.h"
struct percpu_counter {
   spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 45 "include/linux/proportions.h"
struct prop_local_percpu {
   struct percpu_counter events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 90 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   unsigned long period ;
   int shift ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_165 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_165 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 86 "include/linux/plist.h"
struct plist_node {
   int prio ;
   struct plist_head plist ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 98 "include/linux/rtmutex.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 45 "include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 29 "include/linux/key.h"
typedef int32_t key_serial_t;
#line 32 "include/linux/key.h"
typedef uint32_t key_perm_t;
#line 33
struct signal_struct;
#line 34
struct key_type;
#line 36
struct keyring_list;
#line 115
struct key_user;
#line 115 "include/linux/key.h"
union __anonunion_ldv_26414_166 {
   time_t expiry ;
   time_t revoked_at ;
};
#line 115 "include/linux/key.h"
union __anonunion_type_data_167 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
};
#line 115 "include/linux/key.h"
union __anonunion_payload_168 {
   unsigned long value ;
   void *data ;
   struct keyring_list *subscriptions ;
};
#line 115 "include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   struct rb_node serial_node ;
   struct key_type *type ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_ldv_26414_166 ldv_26414 ;
   uid_t uid ;
   gid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   char *description ;
   union __anonunion_type_data_167 type_data ;
   union __anonunion_payload_168 payload ;
};
#line 291
struct audit_context;
#line 69 "include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   gid_t small_block[32U] ;
   gid_t *blocks[0U] ;
};
#line 77 "include/linux/cred.h"
struct thread_group_cred {
   atomic_t usage ;
   pid_t tgid ;
   spinlock_t lock ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct rcu_head rcu ;
};
#line 91 "include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   uid_t uid ;
   gid_t gid ;
   uid_t suid ;
   gid_t sgid ;
   uid_t euid ;
   gid_t egid ;
   uid_t fsuid ;
   gid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   struct thread_group_cred *tgcred ;
   void *security ;
   struct user_struct *user ;
   struct group_info *group_info ;
   struct rcu_head rcu ;
};
#line 263
struct futex_pi_state;
#line 264
struct robust_list_head;
#line 265
struct fs_struct;
#line 266
struct bts_context;
#line 267
struct perf_event_context;
#line 151 "include/linux/sched.h"
struct cfs_rq;
#line 152
struct task_group;
#line 355
struct user_namespace;
#line 44 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 106
struct kioctx;
#line 107 "include/linux/aio_abi.h"
union __anonunion_ki_obj_169 {
   void *user ;
   struct task_struct *tsk ;
};
#line 107
struct eventfd_ctx;
#line 107 "include/linux/aio_abi.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_169 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct eventfd_ctx *ki_eventfd ;
};
#line 163 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 179 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct hlist_node list ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
   struct rcu_head rcu_head ;
};
#line 445 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 487 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 495 "include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};
#line 502 "include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};
#line 519 "include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime cputime ;
   int running ;
   spinlock_t lock ;
};
#line 555
struct tty_struct;
#line 555
struct taskstats;
#line 555
struct tty_audit_buf;
#line 555 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   int oom_adj ;
};
#line 697 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct user_namespace *user_ns ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct delayed_work work ;
   atomic_long_t locked_vm ;
};
#line 747
struct reclaim_state;
#line 748 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 766 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   struct timespec freepages_start ;
   struct timespec freepages_end ;
   u64 freepages_delay ;
   u32 freepages_count ;
};
#line 808
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 891 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   unsigned int cpu_power ;
   unsigned long cpumask[0U] ;
};
#line 918
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 932 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   unsigned int smt_gain ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   u64 last_update ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
   char *name ;
   unsigned long span[0U] ;
};
#line 1030
struct io_context;
#line 1053
struct rq;
#line 1054 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * , int  ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   int (*select_task_rq)(struct task_struct * , int  , int  ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*pre_schedule)(struct rq * , struct task_struct * ) ;
   void (*post_schedule)(struct rq * ) ;
   void (*task_wake_up)(struct rq * , struct task_struct * ) ;
   void (*set_cpus_allowed)(struct task_struct * , struct cpumask  const  * ) ;
   void (*rq_online)(struct rq * ) ;
   void (*rq_offline)(struct rq * ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * , int  ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
   void (*switched_from)(struct rq * , struct task_struct * , int  ) ;
   void (*switched_to)(struct rq * , struct task_struct * , int  ) ;
   void (*prio_changed)(struct rq * , struct task_struct * , int  , int  ) ;
   unsigned int (*get_rr_interval)(struct task_struct * ) ;
   void (*moved_group)(struct task_struct * ) ;
};
#line 1116 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 1121 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 nr_migrations ;
   u64 start_runtime ;
   u64 avg_wakeup ;
   u64 avg_running ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1195
struct rt_rq;
#line 1195 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned int time_slice ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1212
struct css_set;
#line 1212
struct compat_robust_list_head;
#line 1212
struct ftrace_ret_stack;
#line 1212 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   unsigned char in_execve : 1 ;
   unsigned char in_iowait : 1 ;
   unsigned char sched_reset_on_fork : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct bts_context *bts ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred  const  *real_cred ;
   struct cred  const  *cred ;
   struct mutex cred_guard_mutex ;
   struct cred *replacement_session_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   struct irqaction *irqaction ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   struct list_head *scm_work_list ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned long stack_start ;
};
#line 81 "include/linux/security.h"
struct xfrm_policy;
#line 82
struct xfrm_state;
#line 100
struct request_sock;
#line 3128 "include/linux/security.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 39 "include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   unsigned int len ;
   struct rcu_head rcu ;
   struct sock_filter insns[0U] ;
};
#line 95 "include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 32 "include/linux/poll.h"
struct poll_table_struct {
   void (*qproc)(struct file * , wait_queue_head_t * , struct poll_table_struct * ) ;
   unsigned long key ;
};
#line 118 "include/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 791 "include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};
#line 24 "include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const   *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device * ) ;
   int maxtype ;
   struct nla_policy  const  *policy ;
   int (*validate)(struct nlattr ** , struct nlattr ** ) ;
   int (*newlink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   int (*changelink)(struct net_device * , struct nlattr ** , struct nlattr ** ) ;
   void (*dellink)(struct net_device * ) ;
   size_t (*get_size)(struct net_device  const  * ) ;
   int (*fill_info)(struct sk_buff * , struct net_device  const  * ) ;
   size_t (*get_xstats_size)(struct net_device  const  * ) ;
   int (*fill_xstats)(struct sk_buff * , struct net_device  const  * ) ;
   int (*get_tx_queues)(struct net * , struct nlattr ** , unsigned int * , unsigned int * ) ;
};
#line 88
struct neigh_table;
#line 88 "include/net/rtnetlink.h"
struct neigh_parms {
   struct net *net ;
   struct net_device *dev ;
   struct neigh_parms *next ;
   int (*neigh_setup)(struct neighbour * ) ;
   void (*neigh_cleanup)(struct neighbour * ) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct rcu_head rcu_head ;
   int base_reachable_time ;
   int retrans_time ;
   int gc_staletime ;
   int reachable_time ;
   int delay_probe_time ;
   int queue_len ;
   int ucast_probes ;
   int app_probes ;
   int mcast_probes ;
   int anycast_delay ;
   int proxy_delay ;
   int proxy_qlen ;
   int locktime ;
};
#line 72 "include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};
#line 92
struct neigh_ops;
#line 92 "include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   struct net_device *dev ;
   unsigned long used ;
   unsigned long confirmed ;
   unsigned long updated ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   atomic_t probes ;
   rwlock_t lock ;
   unsigned char ha[32U] ;
   struct hh_cache *hh ;
   atomic_t refcnt ;
   int (*output)(struct sk_buff * ) ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   struct neigh_ops  const  *ops ;
   u8 primary_key[0U] ;
};
#line 124 "include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour * , struct sk_buff * ) ;
   void (*error_report)(struct neighbour * , struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   int (*connected_output)(struct sk_buff * ) ;
   int (*hh_output)(struct sk_buff * ) ;
   int (*queue_xmit)(struct sk_buff * ) ;
};
#line 135 "include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   struct net *net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};
#line 146 "include/net/neighbour.h"
struct neigh_table {
   struct neigh_table *next ;
   int family ;
   int entry_size ;
   int key_len ;
   __u32 (*hash)(void const   * , struct net_device  const  * ) ;
   int (*constructor)(struct neighbour * ) ;
   int (*pconstructor)(struct pneigh_entry * ) ;
   void (*pdestructor)(struct pneigh_entry * ) ;
   void (*proxy_redo)(struct sk_buff * ) ;
   char *id ;
   struct neigh_parms parms ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct kmem_cache *kmem_cachep ;
   struct neigh_statistics *stats ;
   struct neighbour **hash_buckets ;
   unsigned int hash_mask ;
   __u32 hash_rnd ;
   struct pneigh_entry **phash_buckets ;
};
#line 361
struct dn_route;
#line 361 "include/net/neighbour.h"
union __anonunion_ldv_31002_174 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};
#line 361 "include/net/neighbour.h"
struct dst_entry {
   struct rcu_head rcu_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   short error ;
   short obsolete ;
   int flags ;
   unsigned long expires ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   unsigned int rate_tokens ;
   unsigned long rate_last ;
   struct dst_entry *path ;
   struct neighbour *neighbour ;
   struct hh_cache *hh ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff * ) ;
   int (*output)(struct sk_buff * ) ;
   struct dst_ops *ops ;
   u32 metrics[13U] ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_ldv_31002_174 ldv_31002 ;
};
#line 99 "include/net/sock.h"
struct __anonstruct_socket_lock_t_175 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 99 "include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_175 socket_lock_t;
#line 99
struct proto;
#line 100 "include/net/sock.h"
union __anonunion_ldv_31124_176 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 100 "include/net/sock.h"
struct sock_common {
   union __anonunion_ldv_31124_176 ldv_31124 ;
   atomic_t skc_refcnt ;
   unsigned int skc_hash ;
   unsigned short skc_family ;
   unsigned char volatile   skc_state ;
   unsigned char skc_reuse ;
   int skc_bound_dev_if ;
   struct hlist_node skc_bind_node ;
   struct proto *skc_prot ;
   struct net *skc_net ;
};
#line 142 "include/net/sock.h"
struct __anonstruct_sk_backlog_177 {
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 142 "include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   int flags_begin[0U] ;
   unsigned char sk_shutdown : 2 ;
   unsigned char sk_no_check : 2 ;
   unsigned char sk_userlocks : 4 ;
   unsigned char sk_protocol ;
   unsigned short sk_type ;
   int flags_end[0U] ;
   int sk_rcvbuf ;
   socket_lock_t sk_lock ;
   struct __anonstruct_sk_backlog_177 sk_backlog ;
   wait_queue_head_t *sk_sleep ;
   struct dst_entry *sk_dst_cache ;
   struct xfrm_policy *sk_policy[2U] ;
   rwlock_t sk_dst_lock ;
   atomic_t sk_rmem_alloc ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_receive_queue ;
   struct sk_buff_head sk_write_queue ;
   struct sk_buff_head sk_async_wait_queue ;
   int sk_wmem_queued ;
   int sk_forward_alloc ;
   gfp_t sk_allocation ;
   int sk_route_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   int sk_rcvlowat ;
   unsigned long sk_flags ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   atomic_t sk_drops ;
   unsigned short sk_ack_backlog ;
   unsigned short sk_max_ack_backlog ;
   __u32 sk_priority ;
   struct ucred sk_peercred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct sk_filter *sk_filter ;
   void *sk_protinfo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page *sk_sndmsg_page ;
   struct sk_buff *sk_send_head ;
   __u32 sk_sndmsg_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   void (*sk_state_change)(struct sock * ) ;
   void (*sk_data_ready)(struct sock * , int  ) ;
   void (*sk_write_space)(struct sock * ) ;
   void (*sk_error_report)(struct sock * ) ;
   int (*sk_backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*sk_destruct)(struct sock * ) ;
};
#line 600
struct request_sock_ops;
#line 601
struct timewait_sock_ops;
#line 602
struct inet_hashinfo;
#line 603
struct raw_hashinfo;
#line 604
struct udp_table;
#line 604 "include/net/sock.h"
union __anonunion_h_178 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};
#line 604 "include/net/sock.h"
struct proto {
   void (*close)(struct sock * , long  ) ;
   int (*connect)(struct sock * , struct sockaddr * , int  ) ;
   int (*disconnect)(struct sock * , int  ) ;
   struct sock *(*accept)(struct sock * , int  , int * ) ;
   int (*ioctl)(struct sock * , int  , unsigned long  ) ;
   int (*init)(struct sock * ) ;
   void (*destroy)(struct sock * ) ;
   void (*shutdown)(struct sock * , int  ) ;
   int (*setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*compat_setsockopt)(struct sock * , int  , int  , char * , unsigned int  ) ;
   int (*compat_getsockopt)(struct sock * , int  , int  , char * , int * ) ;
   int (*sendmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  ) ;
   int (*recvmsg)(struct kiocb * , struct sock * , struct msghdr * , size_t  , int  ,
                  int  , int * ) ;
   int (*sendpage)(struct sock * , struct page * , int  , size_t  , int  ) ;
   int (*bind)(struct sock * , struct sockaddr * , int  ) ;
   int (*backlog_rcv)(struct sock * , struct sk_buff * ) ;
   void (*hash)(struct sock * ) ;
   void (*unhash)(struct sock * ) ;
   int (*get_port)(struct sock * , unsigned short  ) ;
   unsigned int inuse_idx ;
   void (*enter_memory_pressure)(struct sock * ) ;
   atomic_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   int *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_178 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
};
#line 171 "include/linux/drbd.h"
enum drbd_disk_state {
    D_DISKLESS = 0,
    D_ATTACHING = 1,
    D_FAILED = 2,
    D_NEGOTIATING = 3,
    D_INCONSISTENT = 4,
    D_OUTDATED = 5,
    D_UNKNOWN = 6,
    D_CONSISTENT = 7,
    D_UP_TO_DATE = 8,
    D_MASK = 15
} ;
#line 184 "include/linux/drbd.h"
struct __anonstruct_ldv_32167_179 {
   unsigned char role : 2 ;
   unsigned char peer : 2 ;
   unsigned char conn : 5 ;
   unsigned char disk : 4 ;
   unsigned char pdsk : 4 ;
   unsigned char susp : 1 ;
   unsigned char aftr_isp : 1 ;
   unsigned char peer_isp : 1 ;
   unsigned char user_isp : 1 ;
   unsigned short _pad : 11 ;
};
#line 184 "include/linux/drbd.h"
union drbd_state {
   struct __anonstruct_ldv_32167_179 ldv_32167 ;
   unsigned int i ;
};
#line 108 "include/linux/uaccess.h"
struct crypto_ablkcipher;
#line 109
struct crypto_async_request;
#line 110
struct crypto_aead;
#line 111
struct crypto_blkcipher;
#line 112
struct crypto_hash;
#line 113
struct crypto_rng;
#line 114
struct crypto_tfm;
#line 115
struct crypto_type;
#line 116
struct aead_givcrypt_request;
#line 117
struct skcipher_givcrypt_request;
#line 125 "include/linux/crypto.h"
struct crypto_async_request {
   struct list_head list ;
   void (*complete)(struct crypto_async_request * , int  ) ;
   void *data ;
   struct crypto_tfm *tfm ;
   u32 flags ;
};
#line 134 "include/linux/crypto.h"
struct ablkcipher_request {
   struct crypto_async_request base ;
   unsigned int nbytes ;
   void *info ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 147 "include/linux/crypto.h"
struct aead_request {
   struct crypto_async_request base ;
   unsigned int assoclen ;
   unsigned int cryptlen ;
   u8 *iv ;
   struct scatterlist *assoc ;
   struct scatterlist *src ;
   struct scatterlist *dst ;
   void *__ctx[] ;
};
#line 173 "include/linux/crypto.h"
struct blkcipher_desc {
   struct crypto_blkcipher *tfm ;
   void *info ;
   u32 flags ;
};
#line 187 "include/linux/crypto.h"
struct hash_desc {
   struct crypto_hash *tfm ;
   u32 flags ;
};
#line 192 "include/linux/crypto.h"
struct ablkcipher_alg {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 211 "include/linux/crypto.h"
struct aead_alg {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*setauthsize)(struct crypto_aead * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   char const   *geniv ;
   unsigned int ivsize ;
   unsigned int maxauthsize ;
};
#line 226 "include/linux/crypto.h"
struct blkcipher_alg {
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   char const   *geniv ;
   unsigned int min_keysize ;
   unsigned int max_keysize ;
   unsigned int ivsize ;
};
#line 243 "include/linux/crypto.h"
struct cipher_alg {
   unsigned int cia_min_keysize ;
   unsigned int cia_max_keysize ;
   int (*cia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cia_encrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cia_decrypt)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 252 "include/linux/crypto.h"
struct digest_alg {
   unsigned int dia_digestsize ;
   void (*dia_init)(struct crypto_tfm * ) ;
   void (*dia_update)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*dia_final)(struct crypto_tfm * , u8 * ) ;
   int (*dia_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
};
#line 261 "include/linux/crypto.h"
struct hash_alg {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 275 "include/linux/crypto.h"
struct compress_alg {
   int (*coa_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*coa_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 281 "include/linux/crypto.h"
struct rng_alg {
   int (*rng_make_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
   unsigned int seedsize ;
};
#line 290 "include/linux/crypto.h"
union __anonunion_cra_u_180 {
   struct ablkcipher_alg ablkcipher ;
   struct aead_alg aead ;
   struct blkcipher_alg blkcipher ;
   struct cipher_alg cipher ;
   struct digest_alg digest ;
   struct hash_alg hash ;
   struct compress_alg compress ;
   struct rng_alg rng ;
};
#line 290 "include/linux/crypto.h"
struct crypto_alg {
   struct list_head cra_list ;
   struct list_head cra_users ;
   u32 cra_flags ;
   unsigned int cra_blocksize ;
   unsigned int cra_ctxsize ;
   unsigned int cra_alignmask ;
   int cra_priority ;
   atomic_t cra_refcnt ;
   char cra_name[64U] ;
   char cra_driver_name[64U] ;
   struct crypto_type  const  *cra_type ;
   union __anonunion_cra_u_180 cra_u ;
   int (*cra_init)(struct crypto_tfm * ) ;
   void (*cra_exit)(struct crypto_tfm * ) ;
   void (*cra_destroy)(struct crypto_alg * ) ;
   struct module *cra_module ;
};
#line 346 "include/linux/crypto.h"
struct ablkcipher_tfm {
   int (*setkey)(struct crypto_ablkcipher * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct ablkcipher_request * ) ;
   int (*decrypt)(struct ablkcipher_request * ) ;
   int (*givencrypt)(struct skcipher_givcrypt_request * ) ;
   int (*givdecrypt)(struct skcipher_givcrypt_request * ) ;
   struct crypto_ablkcipher *base ;
   unsigned int ivsize ;
   unsigned int reqsize ;
};
#line 366 "include/linux/crypto.h"
struct aead_tfm {
   int (*setkey)(struct crypto_aead * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct aead_request * ) ;
   int (*decrypt)(struct aead_request * ) ;
   int (*givencrypt)(struct aead_givcrypt_request * ) ;
   int (*givdecrypt)(struct aead_givcrypt_request * ) ;
   struct crypto_aead *base ;
   unsigned int ivsize ;
   unsigned int authsize ;
   unsigned int reqsize ;
};
#line 381 "include/linux/crypto.h"
struct blkcipher_tfm {
   void *iv ;
   int (*setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   int (*encrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
   int (*decrypt)(struct blkcipher_desc * , struct scatterlist * , struct scatterlist * ,
                  unsigned int  ) ;
};
#line 390 "include/linux/crypto.h"
struct cipher_tfm {
   int (*cit_setkey)(struct crypto_tfm * , u8 const   * , unsigned int  ) ;
   void (*cit_encrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
   void (*cit_decrypt_one)(struct crypto_tfm * , u8 * , u8 const   * ) ;
};
#line 398 "include/linux/crypto.h"
struct hash_tfm {
   int (*init)(struct hash_desc * ) ;
   int (*update)(struct hash_desc * , struct scatterlist * , unsigned int  ) ;
   int (*final)(struct hash_desc * , u8 * ) ;
   int (*digest)(struct hash_desc * , struct scatterlist * , unsigned int  , u8 * ) ;
   int (*setkey)(struct crypto_hash * , u8 const   * , unsigned int  ) ;
   unsigned int digestsize ;
};
#line 410 "include/linux/crypto.h"
struct compress_tfm {
   int (*cot_compress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                       unsigned int * ) ;
   int (*cot_decompress)(struct crypto_tfm * , u8 const   * , unsigned int  , u8 * ,
                         unsigned int * ) ;
};
#line 417 "include/linux/crypto.h"
struct rng_tfm {
   int (*rng_gen_random)(struct crypto_rng * , u8 * , unsigned int  ) ;
   int (*rng_reset)(struct crypto_rng * , u8 * , unsigned int  ) ;
};
#line 425 "include/linux/crypto.h"
union __anonunion_crt_u_181 {
   struct ablkcipher_tfm ablkcipher ;
   struct aead_tfm aead ;
   struct blkcipher_tfm blkcipher ;
   struct cipher_tfm cipher ;
   struct hash_tfm hash ;
   struct compress_tfm compress ;
   struct rng_tfm rng ;
};
#line 425 "include/linux/crypto.h"
struct crypto_tfm {
   u32 crt_flags ;
   union __anonunion_crt_u_181 crt_u ;
   void (*exit)(struct crypto_tfm * ) ;
   struct crypto_alg *__crt_alg ;
   void *__crt_ctx[] ;
};
#line 454 "include/linux/crypto.h"
struct crypto_ablkcipher {
   struct crypto_tfm base ;
};
#line 458 "include/linux/crypto.h"
struct crypto_aead {
   struct crypto_tfm base ;
};
#line 462 "include/linux/crypto.h"
struct crypto_blkcipher {
   struct crypto_tfm base ;
};
#line 474 "include/linux/crypto.h"
struct crypto_hash {
   struct crypto_tfm base ;
};
#line 478 "include/linux/crypto.h"
struct crypto_rng {
   struct crypto_tfm base ;
};
#line 142 "include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock * , struct request_sock * ) ;
   void (*send_ack)(struct sock * , struct sk_buff * , struct request_sock * ) ;
   void (*send_reset)(struct sock * , struct sk_buff * ) ;
   void (*destructor)(struct request_sock * ) ;
};
#line 43 "include/net/request_sock.h"
struct request_sock {
   struct request_sock *dl_next ;
   u16 mss ;
   u8 retrans ;
   u8 cookie_ts ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   unsigned long expires ;
   struct request_sock_ops  const  *rsk_ops ;
   struct sock *sk ;
   u32 secid ;
   u32 peer_secid ;
};
#line 364 "include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock * , struct sock * , void * ) ;
   void (*twsk_destructor)(struct sock * ) ;
};
#line 80 "include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};
#line 89 "include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   sector_t alignment_offset ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   int make_it_fail ;
   unsigned long stamp ;
   int in_flight[2U] ;
   struct disk_stats *dkstats ;
   struct rcu_head rcu_head ;
};
#line 127 "include/linux/genhd.h"
struct disk_part_tbl {
   struct rcu_head rcu_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 134
struct request_queue;
#line 134
struct blk_integrity;
#line 134 "include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk * , mode_t * ) ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations  const  *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct work_struct async_notify ;
   struct blk_integrity *integrity ;
   int node_id ;
};
#line 15 "include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
} ;
#line 20 "include/linux/writeback.h"
struct writeback_control {
   struct backing_dev_info *bdi ;
   struct super_block *sb ;
   enum writeback_sync_modes sync_mode ;
   unsigned long *older_than_this ;
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   unsigned char nonblocking : 1 ;
   unsigned char encountered_congestion : 1 ;
   unsigned char for_kupdate : 1 ;
   unsigned char for_reclaim : 1 ;
   unsigned char range_cyclic : 1 ;
   unsigned char more_io : 1 ;
   unsigned char no_nrwrite_index_update : 1 ;
};
#line 65
struct bdi_writeback;
#line 36 "include/linux/backing-dev.h"
typedef int congested_fn(void * , int  );
#line 43 "include/linux/backing-dev.h"
struct bdi_writeback {
   struct list_head list ;
   struct backing_dev_info *bdi ;
   unsigned int nr ;
   unsigned long last_old_flush ;
   struct task_struct *task ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
};
#line 59 "include/linux/backing-dev.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   struct rcu_head rcu_head ;
   unsigned long ra_pages ;
   unsigned long state ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   void (*unplug_io_fn)(struct backing_dev_info * , struct page * ) ;
   void *unplug_io_data ;
   char *name ;
   struct percpu_counter bdi_stat[2U] ;
   struct prop_local_percpu completions ;
   int dirty_exceeded ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   struct bdi_writeback wb ;
   spinlock_t wb_lock ;
   struct list_head wb_list ;
   unsigned long wb_mask ;
   unsigned int wb_cnt ;
   struct list_head work_list ;
   struct device *dev ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};
#line 11 "include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t  , void * );
#line 12 "include/linux/mempool.h"
typedef void mempool_free_t(void * , void * );
#line 13 "include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 24 "include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 72 "include/linux/mempool.h"
struct as_io_context {
   spinlock_t lock ;
   void (*dtor)(struct as_io_context * ) ;
   void (*exit)(struct as_io_context * ) ;
   unsigned long state ;
   atomic_t nr_queued ;
   atomic_t nr_dispatched ;
   unsigned long last_end_request ;
   unsigned long ttime_total ;
   unsigned long ttime_samples ;
   unsigned long ttime_mean ;
   unsigned int seek_samples ;
   sector_t last_request_pos ;
   u64 seek_total ;
   sector_t seek_mean ;
};
#line 56 "include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   unsigned short ioprio_changed ;
   unsigned long last_waited ;
   int nr_batch_requests ;
   struct as_io_context *aic ;
   struct radix_tree_root radix_root ;
   struct hlist_head cic_list ;
   void *ioc_data ;
};
#line 90 "include/linux/ioprio.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 52 "include/linux/bio.h"
struct bio_integrity_payload;
#line 55 "include/linux/bio.h"
typedef void bio_end_io_t(struct bio * , int  );
#line 56 "include/linux/bio.h"
typedef void bio_destructor_t(struct bio * );
#line 57 "include/linux/bio.h"
struct bio {
   sector_t bi_sector ;
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   unsigned short bi_vcnt ;
   unsigned short bi_idx ;
   unsigned int bi_phys_segments ;
   unsigned int bi_size ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   unsigned int bi_max_vecs ;
   unsigned int bi_comp_cpu ;
   atomic_t bi_cnt ;
   struct bio_vec *bi_io_vec ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct bio_integrity_payload *bi_integrity ;
   bio_destructor_t *bi_destructor ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 236 "include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   sector_t bip_sector ;
   void *bip_buf ;
   bio_end_io_t *bip_end_io ;
   unsigned int bip_size ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_idx ;
   struct work_struct bip_work ;
   struct bio_vec bip_vec[0U] ;
};
#line 63 "include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device * ) ;
};
#line 81
struct elevator_queue;
#line 83
struct blk_trace;
#line 84
struct request;
#line 38 "include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request * , int  );
#line 39 "include/linux/blkdev.h"
struct request_list {
   int count[2U] ;
   int starved[2U] ;
   int elvpriv ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
};
#line 51
enum rq_cmd_type_bits {
    REQ_TYPE_FS = 1,
    REQ_TYPE_BLOCK_PC = 2,
    REQ_TYPE_SENSE = 3,
    REQ_TYPE_PM_SUSPEND = 4,
    REQ_TYPE_PM_RESUME = 5,
    REQ_TYPE_PM_SHUTDOWN = 6,
    REQ_TYPE_SPECIAL = 7,
    REQ_TYPE_LINUX_BLOCK = 8,
    REQ_TYPE_ATA_TASKFILE = 9,
    REQ_TYPE_ATA_PC = 10
} ;
#line 99 "include/linux/blkdev.h"
union __anonunion_ldv_35770_189 {
   struct rb_node rb_node ;
   void *completion_data ;
};
#line 99 "include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   struct call_single_data csd ;
   int cpu ;
   struct request_queue *q ;
   unsigned int cmd_flags ;
   enum rq_cmd_type_bits cmd_type ;
   unsigned long atomic_flags ;
   sector_t __sector ;
   unsigned int __data_len ;
   struct bio *bio ;
   struct bio *biotail ;
   struct hlist_node hash ;
   union __anonunion_ldv_35770_189 ldv_35770 ;
   void *elevator_private ;
   void *elevator_private2 ;
   struct gendisk *rq_disk ;
   unsigned long start_time ;
   unsigned short nr_phys_segments ;
   unsigned short ioprio ;
   void *special ;
   char *buffer ;
   int tag ;
   int errors ;
   int ref_count ;
   unsigned short cmd_len ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};
#line 8 "include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue * , struct request ** , struct bio * );
#line 11 "include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue * , struct request * , struct request * );
#line 13 "include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue * , struct request * , int  );
#line 15 "include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue * , struct request * , struct bio * );
#line 17 "include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue * , int  );
#line 19 "include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue * , struct request * );
#line 20 "include/linux/elevator.h"
typedef int elevator_queue_empty_fn(struct request_queue * );
#line 21 "include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue * , struct request * );
#line 22 "include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue * , struct request * );
#line 23 "include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue * , int  );
#line 25 "include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue * , struct request * , gfp_t  );
#line 26 "include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request * );
#line 27 "include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue * , struct request * );
#line 28 "include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue * , struct request * );
#line 30 "include/linux/elevator.h"
typedef void *elevator_init_fn(struct request_queue * );
#line 31 "include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue * );
#line 32 "include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_queue_empty_fn *elevator_queue_empty_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   void (*trim)(struct io_context * ) ;
};
#line 60 "include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue * , char * ) ;
   ssize_t (*store)(struct elevator_queue * , char const   * , size_t  ) ;
};
#line 68 "include/linux/elevator.h"
struct elevator_type {
   struct list_head list ;
   struct elevator_ops ops ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
};
#line 80 "include/linux/elevator.h"
struct elevator_queue {
   struct elevator_ops *ops ;
   void *elevator_data ;
   struct kobject kobj ;
   struct elevator_type *elevator_type ;
   struct mutex sysfs_lock ;
   struct hlist_head *hash ;
};
#line 259 "include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue * );
#line 260 "include/linux/blkdev.h"
typedef int make_request_fn(struct request_queue * , struct bio * );
#line 261 "include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue * , struct request * );
#line 262 "include/linux/blkdev.h"
typedef void unplug_fn(struct request_queue * );
#line 263 "include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};
#line 271 "include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue * , struct bvec_merge_data * , struct bio_vec * );
#line 273 "include/linux/blkdev.h"
typedef void prepare_flush_fn(struct request_queue * , struct request * );
#line 274 "include/linux/blkdev.h"
typedef void softirq_done_fn(struct request * );
#line 275 "include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request * );
#line 276 "include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue * );
#line 277
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
} ;
#line 284 "include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request * );
#line 290 "include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
};
#line 299 "include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned short logical_block_size ;
   unsigned short max_hw_segments ;
   unsigned short max_phys_segments ;
   unsigned char misaligned ;
   unsigned char no_cluster ;
};
#line 323 "include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct request_list rq ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unplug_fn *unplug_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   prepare_flush_fn *prepare_flush_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct timer_list unplug_timer ;
   int unplug_thresh ;
   unsigned long unplug_delay ;
   struct work_struct unplug_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   gfp_t bounce_gfp ;
   unsigned long queue_flags ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   void *dma_drain_buffer ;
   unsigned int dma_drain_size ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int ordered ;
   unsigned int next_ordered ;
   unsigned int ordseq ;
   int orderr ;
   int ordcolor ;
   struct request pre_flush_rq ;
   struct request bar_rq ;
   struct request post_flush_rq ;
   struct request *orig_bar_rq ;
   struct mutex sysfs_lock ;
   struct bsg_class_device bsg_dev ;
};
#line 1163 "include/linux/blkdev.h"
struct blk_integrity_exchg {
   void *prot_buf ;
   void *data_buf ;
   sector_t sector ;
   unsigned int data_size ;
   unsigned short sector_size ;
   char const   *disk_name ;
};
#line 1183 "include/linux/blkdev.h"
typedef void integrity_gen_fn(struct blk_integrity_exchg * );
#line 1184 "include/linux/blkdev.h"
typedef int integrity_vrfy_fn(struct blk_integrity_exchg * );
#line 1185 "include/linux/blkdev.h"
typedef void integrity_set_tag_fn(void * , void * , unsigned int  );
#line 1186 "include/linux/blkdev.h"
typedef void integrity_get_tag_fn(void * , void * , unsigned int  );
#line 1187 "include/linux/blkdev.h"
struct blk_integrity {
   integrity_gen_fn *generate_fn ;
   integrity_vrfy_fn *verify_fn ;
   integrity_set_tag_fn *set_tag_fn ;
   integrity_get_tag_fn *get_tag_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short sector_size ;
   unsigned short tag_size ;
   char const   *name ;
   struct kobject kobj ;
};
#line 1228 "include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device * , fmode_t  ) ;
   int (*release)(struct gendisk * , fmode_t  ) ;
   int (*locked_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*compat_ioctl)(struct block_device * , fmode_t  , unsigned int  , unsigned long  ) ;
   int (*direct_access)(struct block_device * , sector_t  , void ** , unsigned long * ) ;
   int (*media_changed)(struct gendisk * ) ;
   unsigned long long (*set_capacity)(struct gendisk * , unsigned long long  ) ;
   int (*revalidate_disk)(struct gendisk * ) ;
   int (*getgeo)(struct block_device * , struct hd_geometry * ) ;
   struct module *owner ;
};
#line 126 "include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 optimistic_dad ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   void *sysctl ;
};
#line 478 "include/linux/ipv6.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   __be32 v4daddr ;
   __u16 avl_height ;
   __u16 ip_id_count ;
   struct list_head unused ;
   __u32 dtime ;
   atomic_t refcnt ;
   atomic_t rid ;
   __u32 tcp_ts ;
   unsigned long tcp_ts_stamp ;
};
#line 50 "include/linux/route.h"
union __anonunion_u_195 {
   struct dst_entry dst ;
};
#line 50
struct in_device;
#line 50 "include/linux/route.h"
struct rtable {
   union __anonunion_u_195 u ;
   struct flowi fl ;
   struct in_device *idev ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __be32 rt_dst ;
   __be32 rt_src ;
   int rt_iif ;
   __be32 rt_gateway ;
   __be32 rt_spec_dst ;
   struct inet_peer *peer ;
};
#line 215 "include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
   struct hlist_nulls_head twchain ;
};
#line 94 "include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 102 "include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};
#line 114 "include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_size ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
   atomic_t bsockets ;
};
#line 1485 "include/net/tcp.h"
struct lc_element {
   struct hlist_node colision ;
   struct list_head list ;
   unsigned int refcnt ;
   unsigned int lc_index ;
   unsigned int lc_number ;
};
#line 170 "include/linux/lru_cache.h"
struct lru_cache {
   struct list_head lru ;
   struct list_head free ;
   struct list_head in_use ;
   struct kmem_cache *lc_cache ;
   size_t element_size ;
   size_t element_off ;
   unsigned int nr_elements ;
   unsigned int used ;
   unsigned long hits ;
   unsigned long misses ;
   unsigned long starving ;
   unsigned long dirty ;
   unsigned long changed ;
   unsigned long flags ;
   unsigned int new_number ;
   struct lc_element *changing_element ;
   void *lc_private ;
   char const   *name ;
   struct hlist_head *lc_slot ;
   struct lc_element **lc_element ;
};
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf;
#line 311 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_header {
   u32 magic ;
   u16 command ;
   u16 length ;
   u8 payload[0U] ;
};
#line 338 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_data {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 seq_num ;
   u32 dp_flags ;
};
#line 368 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_ack {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 seq_num ;
};
#line 384 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_block_req {
   struct p_header head ;
   u64 sector ;
   u64 block_id ;
   u32 blksize ;
   u32 pad ;
};
#line 393 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_handshake {
   struct p_header head ;
   u32 protocol_min ;
   u32 feature_flags ;
   u32 protocol_max ;
   u32 _pad ;
   u64 reserverd[7U] ;
};
#line 416 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier {
   struct p_header head ;
   u32 barrier ;
   u32 pad ;
};
#line 423 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_barrier_ack {
   struct p_header head ;
   u32 barrier ;
   u32 set_size ;
};
#line 437 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_param_89 {
   struct p_header head ;
   u32 rate ;
   char verify_alg[64U] ;
   char csums_alg[64U] ;
};
#line 445 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_protocol {
   struct p_header head ;
   u32 protocol ;
   u32 after_sb_0p ;
   u32 after_sb_1p ;
   u32 after_sb_2p ;
   u32 want_lose ;
   u32 two_primaries ;
   char integrity_alg[0U] ;
};
#line 458 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_uuids {
   struct p_header head ;
   u64 uuid[6U] ;
};
#line 469 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_sizes {
   struct p_header head ;
   u64 d_size ;
   u64 u_size ;
   u64 c_size ;
   u32 max_segment_size ;
   u32 queue_order_type ;
};
#line 478 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_state {
   struct p_header head ;
   u32 state ;
};
#line 483 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state {
   struct p_header head ;
   u32 mask ;
   u32 val ;
};
#line 489 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_req_state_reply {
   struct p_header head ;
   u32 retcode ;
};
#line 571 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
union p_polymorph {
   struct p_header header ;
   struct p_handshake handshake ;
   struct p_data data ;
   struct p_block_ack block_ack ;
   struct p_barrier barrier ;
   struct p_barrier_ack barrier_ack ;
   struct p_rs_param_89 rs_param_89 ;
   struct p_protocol protocol ;
   struct p_sizes sizes ;
   struct p_uuids uuids ;
   struct p_state state ;
   struct p_req_state req_state ;
   struct p_req_state_reply req_state_reply ;
   struct p_block_req block_req ;
};
#line 601
enum drbd_thread_state {
    None = 0,
    Running = 1,
    Exiting = 2,
    Restarting = 3
} ;
#line 608 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_thread {
   spinlock_t t_lock ;
   struct task_struct *task ;
   struct completion stop ;
   enum drbd_thread_state t_state ;
   int (*function)(struct drbd_thread * ) ;
   struct drbd_conf *mdev ;
   int reset_cpu_mask ;
};
#line 629
struct drbd_work;
#line 639 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work {
   struct list_head list ;
   int (*cb)(struct drbd_conf * , struct drbd_work * , int  ) ;
};
#line 643
struct drbd_tl_epoch;
#line 674 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_tl_epoch {
   struct drbd_work w ;
   struct list_head requests ;
   struct drbd_tl_epoch *next ;
   unsigned int br_number ;
   int n_req ;
};
#line 682 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch {
   struct list_head list ;
   unsigned int barrier_nr ;
   atomic_t epoch_size ;
   atomic_t active ;
   unsigned long flags ;
};
#line 715 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_epoch_entry {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   struct drbd_epoch *epoch ;
   unsigned int flags ;
   u64 block_id ;
};
#line 777
struct drbd_bitmap;
#line 778 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_work_queue {
   struct list_head q ;
   struct semaphore s ;
   spinlock_t q_lock ;
};
#line 813 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_socket {
   struct drbd_work_queue work ;
   struct mutex mutex ;
   struct socket *socket ;
   union p_polymorph sbuf ;
   union p_polymorph rbuf ;
};
#line 823 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md {
   u64 md_offset ;
   u64 la_size_sect ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u32 flags ;
   u32 md_size_sect ;
   s32 al_offset ;
   s32 bm_offset ;
};
#line 19 "include/linux/drbd_nl.h"
struct disk_conf {
   __u64 disk_size ;
   unsigned char backing_dev[128U] ;
   int backing_dev_len ;
   unsigned char meta_dev[128U] ;
   int meta_dev_len ;
   int meta_dev_idx ;
   int on_io_error ;
   int fencing ;
   unsigned char use_bmbv : 1 ;
   unsigned char no_disk_flush : 1 ;
   unsigned char no_md_flush : 1 ;
   int max_bio_bvecs ;
   unsigned char no_disk_barrier : 1 ;
   unsigned char no_disk_drain : 1 ;
};
#line 25 "include/linux/drbd_nl.h"
struct net_conf {
   unsigned char my_addr[128U] ;
   int my_addr_len ;
   unsigned char peer_addr[128U] ;
   int peer_addr_len ;
   unsigned char shared_secret[64U] ;
   int shared_secret_len ;
   unsigned char cram_hmac_alg[64U] ;
   int cram_hmac_alg_len ;
   unsigned char integrity_alg[64U] ;
   int integrity_alg_len ;
   int timeout ;
   int wire_protocol ;
   int try_connect_int ;
   int ping_int ;
   int max_epoch_size ;
   int max_buffers ;
   int unplug_watermark ;
   int sndbuf_size ;
   int ko_count ;
   int after_sb_0p ;
   int after_sb_1p ;
   int after_sb_2p ;
   int rr_conflict ;
   int ping_timeo ;
   int rcvbuf_size ;
   unsigned char mind_af : 1 ;
   unsigned char want_lose : 1 ;
   unsigned char two_primaries : 1 ;
   unsigned char always_asbp : 1 ;
   unsigned char no_cork : 1 ;
   unsigned char auto_sndbuf_size : 1 ;
};
#line 72 "include/linux/drbd_nl.h"
struct syncer_conf {
   int rate ;
   int after ;
   int al_extents ;
   unsigned char verify_alg[64U] ;
   int verify_alg_len ;
   unsigned char cpu_mask[32U] ;
   int cpu_mask_len ;
   unsigned char csums_alg[64U] ;
   int csums_alg_len ;
   unsigned char use_rle : 1 ;
};
#line 130 "include/linux/drbd_nl.h"
struct drbd_backing_dev {
   struct block_device *backing_bdev ;
   struct block_device *md_bdev ;
   struct file *lo_file ;
   struct file *md_file ;
   struct drbd_md md ;
   struct disk_conf dc ;
   sector_t known_size ;
};
#line 865 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_io_work {
   struct drbd_work w ;
   char *why ;
   int (*io_fn)(struct drbd_conf * ) ;
   void (*done)(struct drbd_conf * , int  ) ;
};
#line 872
enum write_ordering_e {
    WO_none = 0,
    WO_drain_io = 1,
    WO_bdev_flush = 2,
    WO_bio_barrier = 3
} ;
#line 879 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf {
   unsigned long flags ;
   struct net_conf *net_conf ;
   struct syncer_conf sync_conf ;
   struct drbd_backing_dev *ldev ;
   sector_t p_size ;
   struct request_queue *rq_queue ;
   struct block_device *this_bdev ;
   struct gendisk *vdisk ;
   struct drbd_socket data ;
   struct drbd_socket meta ;
   int agreed_pro_version ;
   unsigned long last_received ;
   unsigned int ko_count ;
   struct drbd_work resync_work ;
   struct drbd_work unplug_work ;
   struct drbd_work md_sync_work ;
   struct timer_list resync_timer ;
   struct timer_list md_sync_timer ;
   union drbd_state new_state_tmp ;
   union drbd_state state ;
   wait_queue_head_t misc_wait ;
   wait_queue_head_t state_wait ;
   unsigned int send_cnt ;
   unsigned int recv_cnt ;
   unsigned int read_cnt ;
   unsigned int writ_cnt ;
   unsigned int al_writ_cnt ;
   unsigned int bm_writ_cnt ;
   atomic_t ap_bio_cnt ;
   atomic_t ap_pending_cnt ;
   atomic_t rs_pending_cnt ;
   atomic_t unacked_cnt ;
   atomic_t local_cnt ;
   atomic_t net_cnt ;
   spinlock_t req_lock ;
   struct drbd_tl_epoch *unused_spare_tle ;
   struct drbd_tl_epoch *newest_tle ;
   struct drbd_tl_epoch *oldest_tle ;
   struct list_head out_of_sequence_requests ;
   struct hlist_head *tl_hash ;
   unsigned int tl_hash_s ;
   unsigned long rs_total ;
   unsigned long rs_failed ;
   unsigned long rs_start ;
   unsigned long rs_paused ;
   unsigned long rs_mark_left ;
   unsigned long rs_mark_time ;
   unsigned long rs_same_csum ;
   sector_t ov_start_sector ;
   sector_t ov_position ;
   sector_t ov_last_oos_start ;
   sector_t ov_last_oos_size ;
   unsigned long ov_left ;
   struct crypto_hash *csums_tfm ;
   struct crypto_hash *verify_tfm ;
   struct drbd_thread receiver ;
   struct drbd_thread worker ;
   struct drbd_thread asender ;
   struct drbd_bitmap *bitmap ;
   unsigned long bm_resync_fo ;
   struct lru_cache *resync ;
   unsigned int resync_locked ;
   unsigned int resync_wenr ;
   int open_cnt ;
   u64 *p_uuid ;
   struct drbd_epoch *current_epoch ;
   spinlock_t epoch_lock ;
   unsigned int epochs ;
   enum write_ordering_e write_ordering ;
   struct list_head active_ee ;
   struct list_head sync_ee ;
   struct list_head done_ee ;
   struct list_head read_ee ;
   struct list_head net_ee ;
   struct hlist_head *ee_hash ;
   unsigned int ee_hash_s ;
   struct drbd_epoch_entry *last_write_w_barrier ;
   int next_barrier_nr ;
   struct hlist_head *app_reads_hash ;
   struct list_head resync_reads ;
   atomic_t pp_in_use ;
   wait_queue_head_t ee_wait ;
   struct page *md_io_page ;
   struct page *md_io_tmpp ;
   struct mutex md_io_mutex ;
   spinlock_t al_lock ;
   wait_queue_head_t al_wait ;
   struct lru_cache *act_log ;
   unsigned int al_tr_number ;
   int al_tr_cycle ;
   int al_tr_pos ;
   struct crypto_hash *cram_hmac_tfm ;
   struct crypto_hash *integrity_w_tfm ;
   struct crypto_hash *integrity_r_tfm ;
   void *int_dig_out ;
   void *int_dig_in ;
   void *int_dig_vv ;
   wait_queue_head_t seq_wait ;
   atomic_t packet_seq ;
   unsigned int peer_seq ;
   spinlock_t peer_seq_lock ;
   unsigned int minor ;
   unsigned long comm_bm_set ;
   cpumask_var_t cpu_mask ;
   struct bm_io_work bm_io_work ;
   u64 ed_uuid ;
   struct mutex state_mutex ;
   char congestion_reason ;
};
#line 1059
enum chg_state_flags {
    CS_HARD = 1,
    CS_VERBOSE = 2,
    CS_WAIT_COMPLETE = 4,
    CS_SERIALIZE = 8,
    CS_ORDERED = 12
} ;
#line 2251 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_bitmap {
   struct page **bm_pages ;
   spinlock_t bm_lock ;
   unsigned long bm_set ;
   unsigned long bm_bits ;
   size_t bm_words ;
   size_t bm_number_of_pages ;
   sector_t bm_dev_capacity ;
   struct semaphore bm_change ;
   atomic_t bm_async_io ;
   wait_queue_head_t bm_io_wait ;
   unsigned long bm_flags ;
   char *bm_why ;
   struct task_struct *bm_task ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 251 "include/linux/proc_fs.h"
union proc_op {
   int (*proc_get_link)(struct inode * , struct path * ) ;
   int (*proc_read)(struct task_struct * , char * ) ;
   int (*proc_show)(struct seq_file * , struct pid_namespace * , struct pid * , struct task_struct * ) ;
};
#line 259 "include/linux/proc_fs.h"
struct proc_inode {
   struct pid *pid ;
   int fd ;
   union proc_op op ;
   struct proc_dir_entry *pde ;
   struct ctl_table_header *sysctl ;
   struct ctl_table *sysctl_entry ;
   struct inode vfs_inode ;
};
#line 138 "include/linux/drbd.h"
enum drbd_role {
    R_UNKNOWN = 0,
    R_PRIMARY = 1,
    R_SECONDARY = 2,
    R_MASK = 3
} ;
#line 145
enum drbd_conns {
    C_STANDALONE = 0,
    C_DISCONNECTING = 1,
    C_UNCONNECTED = 2,
    C_TIMEOUT = 3,
    C_BROKEN_PIPE = 4,
    C_NETWORK_FAILURE = 5,
    C_PROTOCOL_ERROR = 6,
    C_TEAR_DOWN = 7,
    C_WF_CONNECTION = 8,
    C_WF_REPORT_PARAMS = 9,
    C_CONNECTED = 10,
    C_STARTING_SYNC_S = 11,
    C_STARTING_SYNC_T = 12,
    C_WF_BITMAP_S = 13,
    C_WF_BITMAP_T = 14,
    C_WF_SYNC_UUID = 15,
    C_SYNC_SOURCE = 16,
    C_SYNC_TARGET = 17,
    C_VERIFY_S = 18,
    C_VERIFY_T = 19,
    C_PAUSED_SYNC_S = 20,
    C_PAUSED_SYNC_T = 21,
    C_MASK = 31
} ;
#line 1169 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_extent {
   int rs_left ;
   int rs_failed ;
   unsigned long flags ;
   struct lc_element lce ;
};
#line 34 "include/linux/types.h"
typedef _Bool bool;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 41 "include/linux/smp_lock.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};
#line 146 "include/linux/idr.h"
struct cgroupfs_root;
#line 148
struct cgroup;
#line 149
struct css_id;
#line 53 "include/linux/cgroup.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   atomic_t refcnt ;
   unsigned long flags ;
   struct css_id *id ;
};
#line 175 "include/linux/cgroup.h"
struct cgroup {
   unsigned long flags ;
   atomic_t count ;
   struct list_head sibling ;
   struct list_head children ;
   struct cgroup *parent ;
   struct dentry *dentry ;
   struct cgroup_subsys_state *subsys[8U] ;
   struct cgroupfs_root *root ;
   struct cgroup *top_cgroup ;
   struct list_head css_sets ;
   struct list_head release_list ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   struct rcu_head rcu_head ;
};
#line 224 "include/linux/cgroup.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head cg_links ;
   struct cgroup_subsys_state *subsys[8U] ;
   struct rcu_head rcu_head ;
};
#line 113 "include/linux/bio.h"
enum bio_rw_flags {
    BIO_RW = 0,
    BIO_RW_FAILFAST_DEV = 1,
    BIO_RW_FAILFAST_TRANSPORT = 2,
    BIO_RW_FAILFAST_DRIVER = 3,
    BIO_RW_AHEAD = 4,
    BIO_RW_BARRIER = 5,
    BIO_RW_SYNCIO = 6,
    BIO_RW_UNPLUG = 7,
    BIO_RW_META = 8,
    BIO_RW_DISCARD = 9,
    BIO_RW_NOIDLE = 10
} ;
#line 165 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
enum drbd_packets {
    P_DATA = 0,
    P_DATA_REPLY = 1,
    P_RS_DATA_REPLY = 2,
    P_BARRIER = 3,
    P_BITMAP = 4,
    P_BECOME_SYNC_TARGET = 5,
    P_BECOME_SYNC_SOURCE = 6,
    P_UNPLUG_REMOTE = 7,
    P_DATA_REQUEST = 8,
    P_RS_DATA_REQUEST = 9,
    P_SYNC_PARAM = 10,
    P_PROTOCOL = 11,
    P_UUIDS = 12,
    P_SIZES = 13,
    P_STATE = 14,
    P_SYNC_UUID = 15,
    P_AUTH_CHALLENGE = 16,
    P_AUTH_RESPONSE = 17,
    P_STATE_CHG_REQ = 18,
    P_PING = 19,
    P_PING_ACK = 20,
    P_RECV_ACK = 21,
    P_WRITE_ACK = 22,
    P_RS_WRITE_ACK = 23,
    P_DISCARD_ACK = 24,
    P_NEG_ACK = 25,
    P_NEG_DREPLY = 26,
    P_NEG_RS_DREPLY = 27,
    P_BARRIER_ACK = 28,
    P_STATE_CHG_REPLY = 29,
    P_OV_REQUEST = 30,
    P_OV_REPLY = 31,
    P_OV_RESULT = 32,
    P_CSUM_RS_REQUEST = 33,
    P_RS_IS_IN_SYNC = 34,
    P_SYNC_PARAM89 = 35,
    P_COMPRESSED_BITMAP = 36,
    P_MAX_CMD = 37,
    P_MAY_IGNORE = 256,
    P_MAX_OPT_CMD = 257,
    P_HAND_SHAKE_M = 65521,
    P_HAND_SHAKE_S = 65522,
    P_HAND_SHAKE = 65534
} ;
#line 644 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_request {
   struct drbd_work w ;
   struct drbd_conf *mdev ;
   struct bio *private_bio ;
   struct hlist_node colision ;
   sector_t sector ;
   unsigned int size ;
   unsigned int epoch ;
   struct list_head tl_requests ;
   struct bio *master_bio ;
   unsigned long rq_state ;
   int seq_num ;
   unsigned long start_time ;
};
#line 732 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_wq_barrier {
   struct drbd_work w ;
   struct completion done ;
};
#line 737 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct digest_info {
   int digest_size ;
   void *digest ;
};
#line 859 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_md_io {
   struct drbd_conf *mdev ;
   struct completion event ;
   int error ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
enum drbd_req_event {
    created = 0,
    to_be_send = 1,
    to_be_submitted = 2,
    queue_for_net_write = 3,
    queue_for_net_read = 4,
    send_canceled = 5,
    send_failed = 6,
    handed_over_to_network = 7,
    connection_lost_while_pending = 8,
    recv_acked_by_peer = 9,
    write_acked_by_peer = 10,
    write_acked_by_peer_and_sis = 11,
    conflict_discarded_by_peer = 12,
    neg_acked = 13,
    barrier_acked = 14,
    data_received = 15,
    read_completed_with_error = 16,
    read_ahead_completed_with_error = 17,
    write_completed_with_error = 18,
    completed_ok = 19,
    nothing = 20
} ;
#line 283 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
struct bio_and_error {
   struct bio *bio ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 21 "include/linux/socket.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 35 "include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};
#line 184 "include/linux/in.h"
struct sockaddr_in {
   sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};
#line 56 "include/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};
#line 62 "include/linux/drbd.h"
enum drbd_fencing_p {
    FP_DONT_CARE = 0,
    FP_RESOURCE = 1,
    FP_STONITH = 2
} ;
#line 74
enum drbd_after_sb_p {
    ASB_DISCONNECT = 0,
    ASB_DISCARD_YOUNGER_PRI = 1,
    ASB_DISCARD_OLDER_PRI = 2,
    ASB_DISCARD_ZERO_CHG = 3,
    ASB_DISCARD_LEAST_CHG = 4,
    ASB_DISCARD_LOCAL = 5,
    ASB_DISCARD_REMOTE = 6,
    ASB_CONSENSUS = 7,
    ASB_DISCARD_SECONDARY = 8,
    ASB_CALL_HELPER = 9,
    ASB_VIOLENTLY = 10
} ;
#line 250
enum drbd_state_ret_codes {
    SS_CW_NO_NEED = 4,
    SS_CW_SUCCESS = 3,
    SS_NOTHING_TO_DO = 2,
    SS_SUCCESS = 1,
    SS_UNKNOWN_ERROR = 0,
    SS_TWO_PRIMARIES = -1,
    SS_NO_UP_TO_DATE_DISK = -2,
    SS_NO_LOCAL_DISK = -4,
    SS_NO_REMOTE_DISK = -5,
    SS_CONNECTED_OUTDATES = -6,
    SS_PRIMARY_NOP = -7,
    SS_RESYNC_RUNNING = -8,
    SS_ALREADY_STANDALONE = -9,
    SS_CW_FAILED_BY_PEER = -10,
    SS_IS_DISKLESS = -11,
    SS_DEVICE_IN_USE = -12,
    SS_NO_NET_CONFIG = -13,
    SS_NO_VERIFY_ALG = -14,
    SS_NEED_CONNECTION = -15,
    SS_LOWER_THAN_OUTDATED = -16,
    SS_NOT_SUPPORTED = -17,
    SS_IN_TRANSIENT_STATE = -18,
    SS_CONCURRENT_ST_CHG = -19,
    SS_AFTER_LAST_ERROR = -20
} ;
#line 277 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct bm_xfer_ctx {
   unsigned long bm_bits ;
   unsigned long bm_words ;
   unsigned long bit_offset ;
   unsigned long word_offset ;
   unsigned int packets[2U] ;
   unsigned int bytes[2U] ;
};
#line 464 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_rs_uuid {
   struct p_header head ;
   u64 uuid ;
};
#line 511
enum drbd_bitmap_code {
    RLE_VLI_Bits = 2
} ;
#line 515 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct p_compressed_bm {
   struct p_header head ;
   u8 encoding ;
   u8 code[0U] ;
};
#line 707
enum epoch_event {
    EV_PUT = 0,
    EV_GOT_BARRIER_NR = 1,
    EV_BARRIER_DONE = 2,
    EV_BECAME_LAST = 3,
    EV_CLEANUP = 32
} ;
#line 1375
enum determine_dev_size {
    dev_size_error = -1,
    unchanged = 0,
    shrunk = 1,
    grew = 2
} ;
#line 190 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream_cursor {
   u8 *b ;
   unsigned int bit ;
};
#line 225 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct bitstream {
   struct bitstream_cursor cur ;
   unsigned char *buf ;
   size_t buf_len ;
   unsigned int pad_bits ;
};
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct flush_work {
   struct drbd_work w ;
   struct drbd_epoch *epoch ;
};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
enum finish_epoch {
    FE_STILL_LIVE = 0,
    FE_DESTROYED = 1,
    FE_RECYCLED = 2
} ;
#line 3206
enum receive_bitmap_ret {
    OK = 0,
    DONE = 1,
    FAILED = 2
} ;
#line 3472 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef int (*drbd_cmd_handler_f)(struct drbd_conf * , struct p_header * );
#line 4102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
typedef struct drbd_request *req_validator_fn(struct drbd_conf * , u64  , sector_t  );
#line 4265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct asender_cmd {
   size_t pkt_size ;
   int (*process)(struct drbd_conf * , struct p_header * ) ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 332 "include/linux/bio.h"
struct bio_pair {
   struct bio bio1 ;
   struct bio bio2 ;
   struct bio_vec bv1 ;
   struct bio_vec bv2 ;
   struct bio_integrity_payload bip1 ;
   struct bio_integrity_payload bip2 ;
   struct bio_vec iv1 ;
   struct bio_vec iv2 ;
   atomic_t cnt ;
   int error ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct __anonstruct_updates_197 {
   u32 pos ;
   u32 extent ;
};
#line 85 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
struct al_transaction {
   u32 magic ;
   u32 tr_number ;
   struct __anonstruct_updates_197 updates[62U] ;
   u32 xor_sum ;
};
#line 50 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_odbm_work {
   struct drbd_work w ;
   unsigned int enr ;
};
#line 55 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct update_al_work {
   struct drbd_work w ;
   struct lc_element *al_ext ;
   struct completion event ;
   unsigned int enr ;
   unsigned int old_enr ;
};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
struct drbd_atodb_wait {
   atomic_t count ;
   struct completion io_done ;
   struct drbd_conf *mdev ;
   int error ;
};
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 151 "include/asm-generic/fcntl.h"
enum sock_shutdown_cmd {
    SHUT_RD = 0,
    SHUT_WR = 1,
    SHUT_RDWR = 2
} ;
#line 56 "include/linux/drbd.h"
enum drbd_io_error_p {
    EP_PASS_ON = 0,
    EP_CALL_HELPER = 1,
    EP_DETACH = 2
} ;
#line 350 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
struct after_state_chg_work {
   struct drbd_work w ;
   union drbd_state os ;
   union drbd_state ns ;
   enum chg_state_flags flags ;
   struct completion *done ;
};
#line 1930 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_26455 {
    OK___0 = 0,
    FAILED___0 = 1,
    DONE___0 = 2
} ;
#line 3202 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct meta_data_on_disk {
   u64 la_size ;
   u64 uuid[4U] ;
   u64 device_uuid ;
   u64 reserved_u64_1 ;
   u32 flags ;
   u32 magic ;
   u32 md_size_sect ;
   u32 al_offset ;
   u32 al_nr_extents ;
   u32 bm_offset ;
   u32 bm_bytes_per_bit ;
   u32 reserved_u32[4U] ;
};
#line 3613 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct fault_random_state {
   unsigned long state ;
   unsigned long count ;
};
#line 170 "include/linux/types.h"
typedef __u32 __le32;
#line 172 "include/linux/types.h"
typedef __u64 __le64;
#line 241 "include/linux/timer.h"
enum hrtimer_restart;
#line 34 "include/linux/kmod.h"
struct subprocess_info;
#line 59
enum umh_wait {
    UMH_NO_WAIT = -1,
    UMH_WAIT_EXEC = 0,
    UMH_WAIT_PROC = 1
} ;
#line 38 "include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
} ;
#line 8 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cb_id {
   __u32 idx ;
   __u32 val ;
};
#line 64 "include/linux/connector.h"
struct cn_msg {
   struct cb_id id ;
   __u32 seq ;
   __u32 ack ;
   __u16 len ;
   __u16 flags ;
   __u8 data[0U] ;
};
#line 163 "include/linux/netlink.h"
struct netlink_skb_parms {
   struct ucred creds ;
   __u32 pid ;
   __u32 dst_group ;
   kernel_cap_t eff_cap ;
   __u32 loginuid ;
   __u32 sessionid ;
   __u32 sid ;
};
#line 88 "include/linux/drbd.h"
enum drbd_ret_codes {
    ERR_CODE_BASE = 100,
    NO_ERROR = 101,
    ERR_LOCAL_ADDR = 102,
    ERR_PEER_ADDR = 103,
    ERR_OPEN_DISK = 104,
    ERR_OPEN_MD_DISK = 105,
    ERR_DISK_NOT_BDEV = 107,
    ERR_MD_NOT_BDEV = 108,
    ERR_DISK_TO_SMALL = 111,
    ERR_MD_DISK_TO_SMALL = 112,
    ERR_BDCLAIM_DISK = 114,
    ERR_BDCLAIM_MD_DISK = 115,
    ERR_MD_IDX_INVALID = 116,
    ERR_IO_MD_DISK = 118,
    ERR_MD_INVALID = 119,
    ERR_AUTH_ALG = 120,
    ERR_AUTH_ALG_ND = 121,
    ERR_NOMEM = 122,
    ERR_DISCARD = 123,
    ERR_DISK_CONFIGURED = 124,
    ERR_NET_CONFIGURED = 125,
    ERR_MANDATORY_TAG = 126,
    ERR_MINOR_INVALID = 127,
    ERR_INTR = 129,
    ERR_RESIZE_RESYNC = 130,
    ERR_NO_PRIMARY = 131,
    ERR_SYNC_AFTER = 132,
    ERR_SYNC_AFTER_CYCLE = 133,
    ERR_PAUSE_IS_SET = 134,
    ERR_PAUSE_IS_CLEAR = 135,
    ERR_PACKET_NR = 137,
    ERR_NO_DISK = 138,
    ERR_NOT_PROTO_C = 139,
    ERR_NOMEM_BITMAP = 140,
    ERR_INTEGRITY_ALG = 141,
    ERR_INTEGRITY_ALG_ND = 142,
    ERR_CPU_MASK_PARSE = 143,
    ERR_CSUMS_ALG = 144,
    ERR_CSUMS_ALG_ND = 145,
    ERR_VERIFY_ALG = 146,
    ERR_VERIFY_ALG_ND = 147,
    ERR_CSUMS_RESYNC_RUNNING = 148,
    ERR_VERIFY_RUNNING = 149,
    ERR_DATA_NOT_CURRENT = 150,
    ERR_CONNECTED = 151,
    ERR_PERM = 152,
    AFTER_LAST_ERR_CODE = 153
} ;
#line 299 "include/linux/drbd.h"
struct drbd_nl_cfg_req {
   int packet_type ;
   unsigned int drbd_minor ;
   int flags ;
   unsigned short tag_list[] ;
};
#line 342 "include/linux/drbd.h"
struct drbd_nl_cfg_reply {
   int packet_type ;
   unsigned int minor ;
   int ret_code ;
   unsigned short tag_list[] ;
};
#line 836 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct primary {
   unsigned char overwrite_peer : 1 ;
};
#line 43 "include/linux/drbd_nl.h"
struct resize {
   __u64 resize_size ;
};
#line 100 "include/linux/drbd_nl.h"
struct get_state {
   int state_i ;
};
#line 117 "include/linux/drbd_nl.h"
struct start_ov {
   __u64 start_sector ;
};
#line 126 "include/linux/drbd_nl.h"
struct new_c_uuid {
   unsigned char clear_bm : 1 ;
};
#line 34 "include/linux/drbd_tag_magic.h"
enum drbd_tags {
    T_overwrite_peer = 32769,
    T_disk_size = 16386,
    T_backing_dev = 57347,
    T_meta_dev = 57348,
    T_meta_dev_idx = 8197,
    T_on_io_error = 6,
    T_fencing = 7,
    T_use_bmbv = 32805,
    T_no_disk_flush = 32821,
    T_no_md_flush = 32822,
    T_max_bio_bvecs = 56,
    T_no_disk_barrier = 32825,
    T_no_disk_drain = 32826,
    T_my_addr = 57352,
    T_peer_addr = 57353,
    T_shared_secret = 49162,
    T_cram_hmac_alg = 49163,
    T_integrity_alg = 49196,
    T_timeout = 14,
    T_wire_protocol = 8207,
    T_try_connect_int = 16,
    T_ping_int = 17,
    T_max_epoch_size = 18,
    T_max_buffers = 19,
    T_unplug_watermark = 20,
    T_sndbuf_size = 21,
    T_ko_count = 22,
    T_after_sb_0p = 24,
    T_after_sb_1p = 25,
    T_after_sb_2p = 26,
    T_rr_conflict = 39,
    T_ping_timeo = 40,
    T_rcvbuf_size = 67,
    T_mind_af = 41020,
    T_want_lose = 32795,
    T_two_primaries = 32796,
    T_always_asbp = 32809,
    T_no_cork = 32829,
    T_auto_sndbuf_size = 41022,
    T_resize_size = 16413,
    T_rate = 30,
    T_after = 31,
    T_al_extents = 32,
    T_verify_alg = 49204,
    T_cpu_mask = 49203,
    T_csums_alg = 49216,
    T_use_rle = 32833,
    T_state_i = 33,
    T_uuids = 49186,
    T_uuids_flags = 35,
    T_use_degraded = 32804,
    T_helper = 49190,
    T_sync_progress = 43,
    T_dump_ee_reason = 49197,
    T_seen_digest = 49198,
    T_calc_digest = 49199,
    T_ee_sector = 16432,
    T_ee_block_id = 16433,
    T_ee_data = 49202,
    T_start_sector = 16450,
    T_clear_bm = 41023
} ;
#line 98 "include/linux/drbd_tag_magic.h"
struct tag {
   char const   *name ;
   int type_n_flags ;
   int max_len ;
};
#line 1975 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
struct cn_handler_struct {
   int (*function)(struct drbd_conf * , struct drbd_nl_cfg_req * , struct drbd_nl_cfg_reply * ) ;
   int reply_body_size ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void set_bit(unsigned int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 68
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 70
  return;
}
}
#line 82 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 84
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 85
  return;
}
}
#line 98 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 105
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 107
  return;
}
}
#line 125 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static void __clear_bit(int nr , unsigned long volatile   *addr ) 
{ 


  {
#line 127
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 128
  return;
}
}
#line 227 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 231
  __asm__  ("bts %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 235
  return (oldbit);
}
}
#line 266 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int __test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 270
  __asm__  volatile   ("btr %2,%1\n\tsbb %0,%0": "=r" (oldbit), "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 274
  return (oldbit);
}
}
#line 309 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(unsigned int nr , unsigned long const volatile   *addr ) 
{ 


  {
#line 311
  return ((int )(*((unsigned long *)addr + (unsigned long )(nr / 64U)) >> ((int )nr & 63)) & 1);
}
}
#line 315 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(int nr , unsigned long const volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 319
  __asm__  volatile   ("bt %2,%1\n\tsbb %0,%0": "=r" (oldbit): "m" (*((unsigned long *)addr)),
                       "Ir" (nr));
#line 324
  return (oldbit);
}
}
#line 9 "include/asm-generic/bitops/hweight.h"
extern unsigned long hweight64(__u64  ) ;
#line 43 "include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w ) 
{ 
  unsigned long tmp ;

  {
#line 45
  tmp = hweight64((__u64 )w);
#line 45
  return (tmp);
}
}
#line 178
extern unsigned long find_next_bit(unsigned long const   * , unsigned long  , unsigned long  ) ;
#line 188
extern unsigned long find_next_zero_bit(unsigned long const   * , unsigned long  ,
                                        unsigned long  ) ;
#line 19 "include/linux/ratelimit.h"
extern int __ratelimit(struct ratelimit_state * ) ;
#line 63 "include/asm-generic/bug.h"
extern void warn_slowpath_null(char const   * , int const    ) ;
#line 128 "include/linux/kernel.h"
extern void __might_sleep(char * , int  , int  ) ;
#line 241
extern int printk(char const   *  , ...) ;
#line 245
extern int printk_ratelimit(void) ;
#line 73 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void) ;
#line 10 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
extern struct task_struct *per_cpu__current_task ;
#line 12 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void) 
{ 
  struct task_struct *ret__ ;

  {
#line 14
  switch (8UL) {
  case 1UL: 
#line 14
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1864;
  case 2UL: 
#line 14
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1864;
  case 4UL: 
#line 14
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1864;
  case 8UL: 
#line 14
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__current_task));
#line 14
  goto ldv_1864;
  default: 
#line 14
  __bad_percpu_size();
  }
  ldv_1864: ;
#line 14
  return (ret__);
}
}
#line 55 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *memset(void * , int  , size_t  ) ;
#line 9 "include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size ) 
{ 
  int order ;

  {
#line 13
  size = (size - 1UL) >> 11;
#line 14
  order = -1;
  ldv_4330: 
#line 16
  size = size >> 1;
#line 17
  order = order + 1;
#line 18
  if (size != 0UL) {
#line 19
    goto ldv_4330;
  } else {

  }

#line 19
  return (order);
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_read(atomic_t const   *v ) 
{ 


  {
#line 23
  return ((int )v->counter);
}
}
#line 33 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_set(atomic_t *v , int i ) 
{ 


  {
#line 35
  v->counter = i;
#line 36
  return;
}
}
#line 91 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 93
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 96
  return;
}
}
#line 119 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 123
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
#line 126
  return ((unsigned int )c != 0U);
}
}
#line 212 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
extern unsigned long per_cpu__kernel_stack ;
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/thread_info.h"
__inline static struct thread_info *current_thread_info(void) 
{ 
  struct thread_info *ti ;
  unsigned long ret__ ;

  {
#line 217
  switch (8UL) {
  case 1UL: 
#line 217
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "p" (& per_cpu__kernel_stack));
#line 217
  goto ldv_5400;
  case 2UL: 
#line 217
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__kernel_stack));
#line 217
  goto ldv_5400;
  case 4UL: 
#line 217
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__kernel_stack));
#line 217
  goto ldv_5400;
  case 8UL: 
#line 217
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "p" (& per_cpu__kernel_stack));
#line 217
  goto ldv_5400;
  default: 
#line 217
  __bad_percpu_size();
  }
  ldv_5400: 
#line 217
  ti = (struct thread_info *)(ret__ - 8152UL);
#line 219
  return (ti);
}
}
#line 244 "include/linux/lockdep.h"
extern void lockdep_init_map(struct lockdep_map * , char const   * , struct lock_class_key * ,
                             int  ) ;
#line 94 "include/linux/spinlock.h"
extern void __spin_lock_init(spinlock_t * , char const   * , struct lock_class_key * ) ;
#line 27 "include/linux/spinlock_api_smp.h"
extern void _read_lock(rwlock_t * ) ;
#line 32
extern void _spin_lock_irq(spinlock_t * ) ;
#line 35
extern unsigned long _spin_lock_irqsave(spinlock_t * ) ;
#line 48
extern void _read_unlock(rwlock_t * ) ;
#line 53
extern void _spin_unlock_irq(spinlock_t * ) ;
#line 56
extern void _spin_unlock_irqrestore(spinlock_t * , unsigned long  ) ;
#line 80 "include/linux/wait.h"
extern void __init_waitqueue_head(wait_queue_head_t * , struct lock_class_key * ) ;
#line 142
extern void __wake_up(wait_queue_head_t * , unsigned int  , int  , void * ) ;
#line 440
extern void prepare_to_wait(wait_queue_head_t * , wait_queue_t * , int  ) ;
#line 442
extern void finish_wait(wait_queue_head_t * , wait_queue_t * ) ;
#line 445
extern int autoremove_wake_function(wait_queue_t * , unsigned int  , int  , void * ) ;
#line 126 "include/linux/mutex.h"
extern void mutex_lock_nested(struct mutex * , unsigned int  ) ;
#line 152
extern void mutex_unlock(struct mutex * ) ;
#line 82 "include/linux/jiffies.h"
extern unsigned long volatile   jiffies ;
#line 298 "include/linux/gfp.h"
extern struct page *alloc_pages_current(gfp_t  , unsigned int  ) ;
#line 301 "include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask , unsigned int order ) 
{ 
  struct page *tmp ;

  {
#line 303
  tmp = alloc_pages_current(gfp_mask, order);
#line 303
  return (tmp);
}
}
#line 314
extern unsigned long __get_free_pages(gfp_t  , unsigned int  ) ;
#line 326
extern void __free_pages(struct page * , unsigned int  ) ;
#line 79 "include/linux/kobject.h"
__inline static char const   *kobject_name(struct kobject  const  *kobj ) 
{ 


  {
#line 81
  return ((char const   *)kobj->name);
}
}
#line 201 "include/linux/rcupdate.h"
__inline static void rcu_read_lock_sched_notrace(void) 
{ 


  {
#line 205
  return;
}
}
#line 138 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 79 "include/trace/events/kmem.h"
extern struct tracepoint __tracepoint_kmalloc ;
#line 79 "include/trace/events/kmem.h"
__inline static void trace_kmalloc(unsigned long call_site , void const   *ptr , size_t bytes_req ,
                                   size_t bytes_alloc , gfp_t gfp_flags ) 
{ 
  void **it_func ;
  void **_________p1 ;
  long tmp ;

  {
#line 47
  tmp = __builtin_expect(__tracepoint_kmalloc.state != 0, 0L);
#line 47
  if (tmp != 0L) {
#line 47
    rcu_read_lock_sched_notrace();
#line 47
    _________p1 = *((void ** volatile  *)(& __tracepoint_kmalloc.funcs));
#line 47
    it_func = _________p1;
#line 47
    if ((unsigned long )it_func != (unsigned long )((void **)0)) {
      ldv_10522: 
#line 47
      (*((void (*)(unsigned long  , void const   * , size_t  , size_t  , gfp_t  ))*it_func))(call_site,
                                                                                             ptr,
                                                                                             bytes_req,
                                                                                             bytes_alloc,
                                                                                             gfp_flags);
#line 47
      it_func = it_func + 1;
#line 47
      if ((unsigned long )*it_func != (unsigned long )((void *)0)) {
#line 48
        goto ldv_10522;
      } else {

      }

    } else {

    }
#line 47
    rcu_read_lock_sched_notrace();
  } else {

  }
#line 49
  return;
}
}
#line 27 "include/linux/kmemleak.h"
extern void kmemleak_alloc(void const   * , size_t  , int  , gfp_t  ) ;
#line 142 "include/linux/slub_def.h"
extern struct kmem_cache kmalloc_caches[14U] ;
#line 148 "include/linux/slub_def.h"
__inline static int kmalloc_index(size_t size ) 
{ 


  {
#line 150
  if (size == 0UL) {
#line 151
    return (0);
  } else {

  }
#line 153
  if (size <= 8UL) {
#line 154
    return (3);
  } else {

  }
#line 156
  if (size > 64UL && size <= 96UL) {
#line 157
    return (1);
  } else {

  }
#line 158
  if (size > 128UL && size <= 192UL) {
#line 159
    return (2);
  } else {

  }
#line 160
  if (size <= 8UL) {
#line 160
    return (3);
  } else {

  }
#line 161
  if (size <= 16UL) {
#line 161
    return (4);
  } else {

  }
#line 162
  if (size <= 32UL) {
#line 162
    return (5);
  } else {

  }
#line 163
  if (size <= 64UL) {
#line 163
    return (6);
  } else {

  }
#line 164
  if (size <= 128UL) {
#line 164
    return (7);
  } else {

  }
#line 165
  if (size <= 256UL) {
#line 165
    return (8);
  } else {

  }
#line 166
  if (size <= 512UL) {
#line 166
    return (9);
  } else {

  }
#line 167
  if (size <= 1024UL) {
#line 167
    return (10);
  } else {

  }
#line 168
  if (size <= 2048UL) {
#line 168
    return (11);
  } else {

  }
#line 169
  if (size <= 4096UL) {
#line 169
    return (12);
  } else {

  }
#line 174
  if (size <= 8192UL) {
#line 174
    return (13);
  } else {

  }
#line 175
  if (size <= 16384UL) {
#line 175
    return (14);
  } else {

  }
#line 176
  if (size <= 32768UL) {
#line 176
    return (15);
  } else {

  }
#line 177
  if (size <= 65536UL) {
#line 177
    return (16);
  } else {

  }
#line 178
  if (size <= 131072UL) {
#line 178
    return (17);
  } else {

  }
#line 179
  if (size <= 262144UL) {
#line 179
    return (18);
  } else {

  }
#line 180
  if (size <= 524288UL) {
#line 180
    return (19);
  } else {

  }
#line 181
  if (size <= 1048576UL) {
#line 181
    return (20);
  } else {

  }
#line 182
  if (size <= 2097152UL) {
#line 182
    return (21);
  } else {

  }
#line 183
  return (-1);
}
}
#line 200 "include/linux/slub_def.h"
__inline static struct kmem_cache *kmalloc_slab(size_t size ) 
{ 
  int index ;
  int tmp ;

  {
#line 202
  tmp = kmalloc_index(size);
#line 202
  index = tmp;
#line 204
  if (index == 0) {
#line 205
    return (0);
  } else {

  }
#line 207
  return ((struct kmem_cache *)(& kmalloc_caches) + (unsigned long )index);
}
}
#line 218
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 221
extern void *kmem_cache_alloc_notrace(struct kmem_cache * , gfp_t  ) ;
#line 230 "include/linux/slub_def.h"
__inline static void *kmalloc_large(size_t size , gfp_t flags ) 
{ 
  unsigned int order ;
  int tmp ;
  void *ret ;
  unsigned long tmp___0 ;

  {
#line 232
  tmp = get_order(size);
#line 232
  order = (unsigned int )tmp;
#line 233
  tmp___0 = __get_free_pages(flags | 16384U, order);
#line 233
  ret = (void *)tmp___0;
#line 235
  kmemleak_alloc((void const   *)ret, size, 1, flags);
#line 236
  trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, 4096UL << (int )order,
                flags);
#line 238
  return (ret);
}
}
#line 241 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *ret ;
  void *tmp ;
  struct kmem_cache *s ;
  struct kmem_cache *tmp___0 ;
  void *tmp___1 ;

  {
#line 245
  if (0) {
#line 246
    if (size > 8192UL) {
#line 247
      tmp = kmalloc_large(size, flags);
#line 247
      return (tmp);
    } else {

    }
#line 249
    if ((flags & 1U) == 0U) {
#line 250
      tmp___0 = kmalloc_slab(size);
#line 250
      s = tmp___0;
#line 252
      if ((unsigned long )s == (unsigned long )((struct kmem_cache *)0)) {
#line 253
        return (16);
      } else {

      }
#line 255
      ret = kmem_cache_alloc_notrace(s, flags);
#line 257
      trace_kmalloc((unsigned long )((void *)0), (void const   *)ret, size, (size_t )s->size,
                    flags);
#line 259
      return (ret);
    } else {

    }
  } else {

  }
#line 262
  tmp___1 = __kmalloc(size, flags);
#line 262
  return (tmp___1);
}
}
#line 313 "include/linux/slab.h"
__inline static void *kzalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 315
  tmp = kmalloc(size, flags | 32768U);
#line 315
  return (tmp);
}
}
#line 53 "include/linux/vmalloc.h"
extern void *vmalloc(unsigned long  ) ;
#line 62
extern void vfree(void const   * ) ;
#line 32 "include/linux/semaphore.h"
__inline static void sema_init(struct semaphore *sem , int val ) 
{ 
  struct lock_class_key __key ;
  struct semaphore __constr_expr_0 ;

  {
#line 35
  __constr_expr_0.lock.raw_lock.slock = 0U;
#line 35
  __constr_expr_0.lock.magic = 3735899821U;
#line 35
  __constr_expr_0.lock.owner_cpu = 4294967295U;
#line 35
  __constr_expr_0.lock.owner = 0xffffffffffffffffUL;
#line 35
  __constr_expr_0.lock.dep_map.key = 0;
#line 35
  __constr_expr_0.lock.dep_map.class_cache = 0;
#line 35
  __constr_expr_0.lock.dep_map.name = "(*sem).lock";
#line 35
  __constr_expr_0.lock.dep_map.cpu = 0;
#line 35
  __constr_expr_0.lock.dep_map.ip = 0UL;
#line 35
  __constr_expr_0.count = (unsigned int )val;
#line 35
  __constr_expr_0.wait_list.next = & sem->wait_list;
#line 35
  __constr_expr_0.wait_list.prev = & sem->wait_list;
#line 35
  *sem = __constr_expr_0;
#line 36
  lockdep_init_map(& sem->lock.dep_map, "semaphore->lock", & __key, 0);
#line 37
  return;
}
}
#line 42
extern void down(struct semaphore * ) ;
#line 45
extern int down_trylock(struct semaphore * ) ;
#line 47
extern void up(struct semaphore * ) ;
#line 431 "include/linux/device.h"
__inline static char const   *dev_name(struct device  const  *dev ) 
{ 
  char const   *tmp ;

  {
#line 433
  tmp = kobject_name(& dev->kobj);
#line 433
  return (tmp);
}
}
#line 573
extern char const   *dev_driver_string(struct device  const  * ) ;
#line 590 "include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page ) 
{ 


  {
#line 592
  return ((void *)(((unsigned long )(((long )page + 24189255811072L) / 104L) << 12) + 0xffff880000000000UL));
}
}
#line 2196 "include/linux/fs.h"
extern void submit_bio(int  , struct bio * ) ;
#line 353 "include/linux/sched.h"
extern void schedule(void) ;
#line 2373
extern int _cond_resched(void) ;
#line 16 "include/linux/uaccess.h"
__inline static void pagefault_disable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 18
  tmp = current_thread_info();
#line 18
  tmp->preempt_count = tmp->preempt_count + 1;
#line 23
  __asm__  volatile   ("": : : "memory");
#line 24
  return;
}
}
#line 26 "include/linux/uaccess.h"
__inline static void pagefault_enable(void) 
{ 
  struct thread_info *tmp ;

  {
#line 32
  __asm__  volatile   ("": : : "memory");
#line 33
  tmp = current_thread_info();
#line 33
  tmp->preempt_count = tmp->preempt_count + -1;
#line 37
  __asm__  volatile   ("": : : "memory");
#line 38
  return;
}
}
#line 62 "include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page , enum km_type idx ) 
{ 
  void *tmp ;

  {
#line 64
  pagefault_disable();
#line 65
  tmp = lowmem_page_address(page);
#line 65
  return (tmp);
}
}
#line 360 "include/linux/bio.h"
extern struct bio *bio_alloc(gfp_t  , int  ) ;
#line 363
extern void bio_put(struct bio * ) ;
#line 366
extern void bio_endio(struct bio * , int  ) ;
#line 375
extern int bio_add_page(struct bio * , struct page * , unsigned int  , unsigned int  ) ;
#line 821 "include/linux/blkdev.h"
__inline static struct request_queue *bdev_get_queue(struct block_device *bdev ) 
{ 


  {
#line 823
  return ((bdev->bd_disk)->queue);
}
}
#line 988
extern int blkdev_issue_flush(struct block_device * , sector_t * ) ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults ;
#line 68
int fault_rate ;
#line 141
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) ;
#line 143 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 144
  if (fault_rate != 0 && (enable_faults >> (int )type) & 1) {
#line 144
    tmp = _drbd_insert_fault(mdev, type);
#line 144
    if (tmp != 0U) {
#line 144
      tmp___0 = 1;
    } else {
#line 144
      tmp___0 = 0;
    }
  } else {
#line 144
    tmp___0 = 0;
  }
#line 144
  return (tmp___0);
}
}
#line 164
struct ratelimit_state drbd_ratelimit_state ;
#line 1081
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) ;
#line 1303
int drbd_bm_init(struct drbd_conf *mdev ) ;
#line 1304
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) ;
#line 1305
void drbd_bm_cleanup(struct drbd_conf *mdev ) ;
#line 1306
void drbd_bm_set_all(struct drbd_conf *mdev ) ;
#line 1307
void drbd_bm_clear_all(struct drbd_conf *mdev ) ;
#line 1308
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1310
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1313
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1315
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) ;
#line 1316
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1317
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) ;
#line 1318
int drbd_bm_read(struct drbd_conf *mdev ) ;
#line 1319
int drbd_bm_write(struct drbd_conf *mdev ) ;
#line 1320
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) ;
#line 1322
size_t drbd_bm_words(struct drbd_conf *mdev ) ;
#line 1323
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) ;
#line 1324
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) ;
#line 1325
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1327
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1328
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) ;
#line 1329
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) ;
#line 1332
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1335
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) ;
#line 1338
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) ;
#line 1339
void drbd_bm_unlock(struct drbd_conf *mdev ) ;
#line 1341
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) ;
#line 1356
rwlock_t global_state_lock ;
#line 1373
char *ppsize(char *buf , unsigned long long size ) ;
#line 1393
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) ;
#line 1599 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _drbd_set_state(struct drbd_conf *mdev , union drbd_state ns ,
                                    enum chg_state_flags flags , struct completion *done ) 
{ 
  int rv ;

  {
#line 1605
  _read_lock(& global_state_lock);
#line 1606
  rv = __drbd_set_state(mdev, ns, flags, done);
#line 1607
  _read_unlock(& global_state_lock);
#line 1609
  return (rv);
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error_(struct drbd_conf *mdev , int forcedetach ,
                                          char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = printk_ratelimit();
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40102;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32167.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32167.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40102;
  }
  ldv_40102: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error_(struct drbd_conf *mdev , int error , int forcedetach ,
                                        char const   *where ) 
{ 
  unsigned long flags ;

  {
#line 1664
  if (error != 0) {
#line 1666
    flags = _spin_lock_irqsave(& mdev->req_lock);
#line 1667
    __drbd_chk_io_error_(mdev, forcedetach, where);
#line 1668
    _spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1696 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_last_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1698
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1701
  return ((sector_t )(bdev->md.md_offset + 7ULL));
  case -2: ;
  default: ;
#line 1704
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.md_size_sect));
  }
}
}
#line 1966 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_ldev(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1969
  tmp = atomic_dec_and_test(& mdev->local_cnt);
#line 1969
  if (tmp != 0) {
#line 1970
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1971
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1971
  if (tmp___2 < 0) {
#line 1971
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1971
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) >= 0 ) in %s:%d\n", tmp___1,
           tmp___0, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           1971);
  } else {

  }
#line 1972
  return;
}
}
#line 1975 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int _get_ldev_if_state(struct drbd_conf *mdev , enum drbd_disk_state mins ) 
{ 
  int io_allowed ;

  {
#line 1979
  atomic_inc(& mdev->local_cnt);
#line 1980
  io_allowed = (unsigned int )mdev->state.ldv_32167.disk >= (unsigned int )mins;
#line 1981
  if (io_allowed == 0) {
#line 1982
    put_ldev(mdev);
  } else {

  }
#line 1983
  return (io_allowed);
}
}
#line 2224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_blk_run_queue(struct request_queue *q ) 
{ 


  {
#line 2226
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned long )q->unplug_fn != (unsigned long )((unplug_fn *)0)) {
#line 2227
    (*(q->unplug_fn))(q);
  } else {

  }
#line 2228
  return;
}
}
#line 2238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_md_flush(struct drbd_conf *mdev ) 
{ 
  int r ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 2242
  tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 2242
  if (tmp != 0) {
#line 2243
    return;
  } else {

  }
#line 2245
  r = blkdev_issue_flush((mdev->ldev)->md_bdev, 0);
#line 2246
  if (r != 0) {
#line 2247
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 2248
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2248
    printk("<3>%s %s: meta data flush failed with status %d, disabling md-flushes\n",
           tmp___1, tmp___0, r);
  } else {

  }
#line 2250
  return;
}
}
#line 93 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_is_locked(struct drbd_bitmap *b ) 
{ 
  int tmp ;

  {
#line 95
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& b->bm_flags));
#line 95
  return (tmp);
}
}
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_print_lock_info(struct drbd_conf *mdev , char const   *func ) 
{ 
  struct drbd_bitmap *b ;
  int tmp ;
  struct task_struct *tmp___3 ;
  char *tmp___4 ;
  struct task_struct *tmp___5 ;
  char *tmp___6 ;
  struct task_struct *tmp___7 ;
  char *tmp___8 ;
  struct task_struct *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 101
  b = mdev->bitmap;
#line 102
  tmp = __ratelimit(& drbd_ratelimit_state);
#line 102
  if (tmp == 0) {
#line 103
    return;
  } else {

  }
#line 104
  tmp___9 = get_current();
#line 104
  if ((unsigned long )tmp___9 != (unsigned long )mdev->receiver.task) {
#line 104
    tmp___7 = get_current();
#line 104
    if ((unsigned long )tmp___7 != (unsigned long )mdev->asender.task) {
#line 104
      tmp___5 = get_current();
#line 104
      if ((unsigned long )tmp___5 != (unsigned long )mdev->worker.task) {
#line 104
        tmp___3 = get_current();
#line 104
        tmp___4 = (char *)(& tmp___3->comm);
      } else {
#line 104
        tmp___4 = (char *)"worker";
      }
#line 104
      tmp___6 = tmp___4;
    } else {
#line 104
      tmp___6 = (char *)"asender";
    }
#line 104
    tmp___8 = tmp___6;
  } else {
#line 104
    tmp___8 = (char *)"receiver";
  }
#line 104
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 104
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 104
  printk("<3>%s %s: FIXME %s in %s, bitmap locked for \'%s\' by %s\n", tmp___11, tmp___10,
         tmp___8, func, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
         (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 105
  return;
}
}
#line 114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_lock(struct drbd_conf *mdev , char *why ) 
{ 
  struct drbd_bitmap *b ;
  int trylock_failed ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___4 ;
  char *tmp___5 ;
  struct task_struct *tmp___6 ;
  char *tmp___7 ;
  struct task_struct *tmp___8 ;
  char *tmp___9 ;
  struct task_struct *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 116
  b = mdev->bitmap;
#line 119
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 120
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 120
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 120
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_lock!?\n", tmp___0, tmp);
#line 121
    return;
  } else {

  }
#line 124
  trylock_failed = down_trylock(& b->bm_change);
#line 126
  if (trylock_failed != 0) {
#line 127
    tmp___10 = get_current();
#line 127
    if ((unsigned long )tmp___10 != (unsigned long )mdev->receiver.task) {
#line 127
      tmp___8 = get_current();
#line 127
      if ((unsigned long )tmp___8 != (unsigned long )mdev->asender.task) {
#line 127
        tmp___6 = get_current();
#line 127
        if ((unsigned long )tmp___6 != (unsigned long )mdev->worker.task) {
#line 127
          tmp___4 = get_current();
#line 127
          tmp___5 = (char *)(& tmp___4->comm);
        } else {
#line 127
          tmp___5 = (char *)"worker";
        }
#line 127
        tmp___7 = tmp___5;
      } else {
#line 127
        tmp___7 = (char *)"asender";
      }
#line 127
      tmp___9 = tmp___7;
    } else {
#line 127
      tmp___9 = (char *)"receiver";
    }
#line 127
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 127
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 127
    printk("<4>%s %s: %s going to \'%s\' but bitmap already locked for \'%s\' by %s\n",
           tmp___12, tmp___11, tmp___9, why, (unsigned long )b->bm_why != (unsigned long )((char *)0) ? b->bm_why : (char *)"?",
           (unsigned long )b->bm_task != (unsigned long )mdev->receiver.task ? ((unsigned long )b->bm_task != (unsigned long )mdev->asender.task ? ((unsigned long )b->bm_task == (unsigned long )mdev->worker.task ? (char *)"worker" : (char *)"?") : (char *)"asender") : (char *)"receiver");
#line 135
    down(& b->bm_change);
  } else {

  }
#line 137
  tmp___15 = __test_and_set_bit(0, (unsigned long volatile   *)(& b->bm_flags));
#line 137
  if (tmp___15 != 0) {
#line 138
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 138
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 138
    printk("<3>%s %s: FIXME bitmap already locked in bm_lock\n", tmp___14, tmp___13);
  } else {

  }
#line 140
  b->bm_why = why;
#line 141
  b->bm_task = get_current();
#line 142
  return;
}
}
#line 144 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_unlock(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 146
  b = mdev->bitmap;
#line 147
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 148
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 148
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 148
    printk("<3>%s %s: FIXME no bitmap in drbd_bm_unlock!?\n", tmp___0, tmp);
#line 149
    return;
  } else {

  }
#line 152
  tmp___3 = __test_and_clear_bit(0, (unsigned long volatile   *)(& (mdev->bitmap)->bm_flags));
#line 152
  if (tmp___3 == 0) {
#line 153
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 153
    printk("<3>%s %s: FIXME bitmap not locked in bm_unlock\n", tmp___2, tmp___1);
  } else {

  }
#line 155
  b->bm_why = 0;
#line 156
  b->bm_task = 0;
#line 157
  up(& b->bm_change);
#line 158
  return;
}
}
#line 161 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *__bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ,
                                     enum km_type  const  km ) 
{ 
  struct page *page ;
  unsigned long page_nr ;
  long tmp ;
  void *tmp___0 ;

  {
#line 167
  page_nr = offset >> 9;
#line 168
  tmp = __builtin_expect(b->bm_number_of_pages <= page_nr, 0L);
#line 168
  if (tmp != 0L) {
#line 168
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                         "i" (168), "i" (12UL));
    ldv_40380: ;
#line 168
    goto ldv_40380;
  } else {

  }
#line 169
  page = *(b->bm_pages + page_nr);
#line 171
  tmp___0 = kmap_atomic(page, km);
#line 171
  return ((unsigned long *)tmp___0);
}
}
#line 174 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long *bm_map_paddr(struct drbd_bitmap *b , unsigned long offset ) 
{ 
  unsigned long *tmp ;

  {
#line 176
  tmp = __bm_map_paddr(b, offset, KM_IRQ1);
#line 176
  return (tmp);
}
}
#line 179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void __bm_unmap(unsigned long *p_addr , enum km_type  const  km ) 
{ 


  {
#line 181
  pagefault_enable();
#line 182
  return;
}
}
#line 184 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_unmap(unsigned long *p_addr ) 
{ 


  {
#line 186
  return;
}
}
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_free_pages(struct page **pages , unsigned long number ) 
{ 
  unsigned long i ;

  {
#line 211
  if ((unsigned long )pages == (unsigned long )((struct page **)0)) {
#line 212
    return;
  } else {

  }
#line 214
  i = 0UL;
#line 214
  goto ldv_40399;
  ldv_40398: ;
#line 215
  if ((unsigned long )*(pages + i) == (unsigned long )((struct page *)0)) {
#line 216
    printk("<1>drbd: bm_free_pages tried to free a NULL pointer; i=%lu n=%lu\n", i,
           number);
#line 219
    goto ldv_40397;
  } else {

  }
#line 221
  __free_pages(*(pages + i), 0U);
#line 222
  *(pages + i) = 0;
  ldv_40397: 
#line 214
  i = i + 1UL;
  ldv_40399: ;
#line 214
  if (i < number) {
#line 215
    goto ldv_40398;
  } else {

  }

#line 219
  return;
}
}
#line 226 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_vk_free(void *ptr , int v ) 
{ 


  {
#line 228
  if (v != 0) {
#line 229
    vfree((void const   *)ptr);
  } else {
#line 231
    kfree((void const   *)ptr);
  }
#line 232
  return;
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static struct page **bm_realloc_pages(struct drbd_bitmap *b , unsigned long want ) 
{ 
  struct page **old_pages ;
  struct page **new_pages ;
  struct page *page ;
  unsigned int i ;
  unsigned int bytes ;
  unsigned int vmalloced ;
  unsigned long have ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;
  long tmp___2 ;
  void *tmp___3 ;
  void *tmp___4 ;

  {
#line 239
  old_pages = b->bm_pages;
#line 241
  vmalloced = 0U;
#line 242
  have = b->bm_number_of_pages;
#line 244
  tmp = __builtin_expect(have == 0UL, 0L);
#line 244
  if (tmp != 0L) {
#line 244
    tmp___0 = __builtin_expect((unsigned long )old_pages != (unsigned long )((struct page **)0),
                               0L);
#line 244
    if (tmp___0 != 0L) {
#line 244
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (244), "i" (12UL));
      ldv_40416: ;
#line 244
      goto ldv_40416;
    } else {

    }
  } else {

  }
#line 245
  tmp___1 = __builtin_expect(have != 0UL, 0L);
#line 245
  if (tmp___1 != 0L) {
#line 245
    tmp___2 = __builtin_expect((unsigned long )old_pages == (unsigned long )((struct page **)0),
                               0L);
#line 245
    if (tmp___2 != 0L) {
#line 245
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"),
                           "i" (245), "i" (12UL));
      ldv_40417: ;
#line 245
      goto ldv_40417;
    } else {

    }
  } else {

  }
#line 247
  if (have == want) {
#line 248
    return (old_pages);
  } else {

  }
#line 255
  bytes = (unsigned int )want * 8U;
#line 256
  tmp___3 = kmalloc((size_t )bytes, 208U);
#line 256
  new_pages = (struct page **)tmp___3;
#line 257
  if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 258
    tmp___4 = vmalloc((unsigned long )bytes);
#line 258
    new_pages = (struct page **)tmp___4;
#line 259
    if ((unsigned long )new_pages == (unsigned long )((struct page **)0)) {
#line 260
      return (0);
    } else {

    }
#line 261
    vmalloced = 1U;
  } else {

  }
#line 264
  memset((void *)new_pages, 0, (size_t )bytes);
#line 265
  if (want >= have) {
#line 266
    i = 0U;
#line 266
    goto ldv_40419;
    ldv_40418: 
#line 267
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 266
    i = i + 1U;
    ldv_40419: ;
#line 266
    if ((unsigned long )i < have) {
#line 267
      goto ldv_40418;
    } else {

    }

#line 268
    goto ldv_40422;
    ldv_40421: 
#line 269
    page = alloc_pages(131282U, 0U);
#line 270
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 271
      bm_free_pages(new_pages + have, (unsigned long )i - have);
#line 272
      bm_vk_free((void *)new_pages, (int )vmalloced);
#line 273
      return (0);
    } else {

    }
#line 275
    *(new_pages + (unsigned long )i) = page;
#line 268
    i = i + 1U;
    ldv_40422: ;
#line 268
    if ((unsigned long )i < want) {
#line 269
      goto ldv_40421;
    } else {

    }

  } else {
#line 278
    i = 0U;
#line 278
    goto ldv_40425;
    ldv_40424: 
#line 279
    *(new_pages + (unsigned long )i) = *(old_pages + (unsigned long )i);
#line 278
    i = i + 1U;
    ldv_40425: ;
#line 278
    if ((unsigned long )i < want) {
#line 279
      goto ldv_40424;
    } else {

    }

  }
#line 285
  if (vmalloced != 0U) {
#line 286
    set_bit(2U, (unsigned long volatile   *)(& b->bm_flags));
  } else {
#line 288
    clear_bit(2, (unsigned long volatile   *)(& b->bm_flags));
  }
#line 290
  return (new_pages);
}
}
#line 297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int __ret_warn_on ;
  long tmp ;
  void *tmp___0 ;
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;

  {
#line 299
  b = mdev->bitmap;
#line 300
  __ret_warn_on = (unsigned long )b != (unsigned long )((struct drbd_bitmap *)0);
#line 300
  tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 300
  if (tmp != 0L) {
#line 300
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       300);
  } else {

  }
#line 300
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 301
  tmp___0 = kzalloc(312UL, 208U);
#line 301
  b = (struct drbd_bitmap *)tmp___0;
#line 302
  if ((unsigned long )b == (unsigned long )((struct drbd_bitmap *)0)) {
#line 303
    return (-12);
  } else {

  }
#line 304
  __spin_lock_init(& b->bm_lock, "&b->bm_lock", & __key);
#line 305
  sema_init(& b->bm_change, 1);
#line 306
  __init_waitqueue_head(& b->bm_io_wait, & __key___0);
#line 308
  mdev->bitmap = b;
#line 310
  return (0);
}
}
#line 313 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
sector_t drbd_bm_capacity(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 315
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 315
  if (_b != 0) {
#line 315
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 315
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 315
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_capacity", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           315);
  } else {

  }
#line 315
  if (_b != 0) {
#line 315
    return (0UL);
  } else {

  }
#line 316
  return ((mdev->bitmap)->bm_dev_capacity);
}
}
#line 321 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_cleanup(struct drbd_conf *mdev ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 323
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 323
  if (_b != 0) {
#line 323
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 323
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 323
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_cleanup", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           323);
  } else {

  }
#line 323
  if (_b != 0) {
#line 323
    return;
  } else {

  }
#line 324
  bm_free_pages((mdev->bitmap)->bm_pages, (mdev->bitmap)->bm_number_of_pages);
#line 325
  tmp___1 = constant_test_bit(2U, (unsigned long const volatile   *)(& (mdev->bitmap)->bm_flags));
#line 325
  bm_vk_free((void *)(mdev->bitmap)->bm_pages, tmp___1);
#line 326
  kfree((void const   *)mdev->bitmap);
#line 327
  mdev->bitmap = 0;
#line 328
  return;
}
}
#line 335 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_clear_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  int cleared ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
#line 337
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 338
  w = b->bm_bits >> 6;
#line 339
  cleared = 0;
#line 342
  p_addr = bm_map_paddr(b, w);
#line 343
  bm = p_addr + (w & 511UL);
#line 344
  if (b->bm_words > w) {
#line 345
    tmp = hweight_long(*bm & ~ mask);
#line 345
    cleared = (int )tmp;
#line 346
    *bm = *bm & mask;
#line 347
    w = w + (size_t )1;
#line 347
    bm = bm + 1;
  } else {

  }
#line 350
  if (b->bm_words > w) {
#line 351
    tmp___0 = hweight_long(*bm);
#line 351
    cleared = (int )((unsigned int )tmp___0 + (unsigned int )cleared);
#line 352
    *bm = 0UL;
  } else {

  }
#line 354
  bm_unmap(p_addr);
#line 355
  return (cleared);
}
}
#line 358 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_set_surplus(struct drbd_bitmap *b ) 
{ 
  unsigned long mask ;
  size_t w ;
  unsigned long *p_addr ;
  unsigned long *bm ;

  {
#line 360
  mask = (1UL << ((int )b->bm_bits & 63)) - 1UL;
#line 361
  w = b->bm_bits >> 6;
#line 364
  p_addr = bm_map_paddr(b, w);
#line 365
  bm = p_addr + (w & 511UL);
#line 366
  if (b->bm_words > w) {
#line 367
    *bm = *bm | ~ mask;
#line 368
    bm = bm + 1;
#line 368
    w = w + (size_t )1;
  } else {

  }
#line 371
  if (b->bm_words > w) {
#line 372
    *bm = 0xffffffffffffffffUL;
  } else {

  }
#line 374
  bm_unmap(p_addr);
#line 375
  return;
}
}
#line 377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_count_bits(struct drbd_bitmap *b , int const   swap_endian ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long offset ;
  unsigned long bits ;
  unsigned long i ;
  unsigned long do_now ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;

  {
#line 379
  offset = 0UL;
#line 380
  bits = 0UL;
#line 383
  goto ldv_40480;
  ldv_40479: 
#line 384
  __min1 = b->bm_words - offset;
#line 384
  __min2 = 512UL;
#line 384
  do_now = __min1 < __min2 ? __min1 : __min2;
#line 384
  i = do_now;
#line 385
  p_addr = __bm_map_paddr(b, offset, KM_USER0);
#line 386
  bm = p_addr + (offset & 511UL);
#line 387
  goto ldv_40476;
  ldv_40475: 
#line 392
  tmp = bm;
#line 392
  bm = bm + 1;
#line 392
  tmp___0 = hweight_long(*tmp);
#line 392
  bits = tmp___0 + bits;
  ldv_40476: 
#line 387
  tmp___1 = i;
#line 387
  i = i - 1UL;
#line 387
  if (tmp___1 != 0UL) {
#line 388
    goto ldv_40475;
  } else {

  }
#line 394
  __bm_unmap(p_addr, KM_USER0);
#line 395
  offset = offset + do_now;
#line 396
  __might_sleep((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                396, 0);
#line 396
  _cond_resched();
  ldv_40480: ;
#line 383
  if (b->bm_words > offset) {
#line 384
    goto ldv_40479;
  } else {

  }

#line 399
  return (bits);
}
}
#line 402 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 404
  tmp = __bm_count_bits(b, 0);
#line 404
  return (tmp);
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_count_bits_swap_endian(struct drbd_bitmap *b ) 
{ 
  unsigned long tmp ;

  {
#line 409
  tmp = __bm_count_bits(b, 1);
#line 409
  return (tmp);
}
}
#line 413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_memset(struct drbd_bitmap *b , size_t offset , int c , size_t len ) 
{ 
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t do_now ;
  size_t end ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 420
  end = offset + len;
#line 422
  if (b->bm_words < end) {
#line 423
    printk("<1>drbd: bm_memset end > bm_words\n");
#line 424
    return;
  } else {

  }
#line 427
  goto ldv_40503;
  ldv_40502: 
#line 428
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 428
  __min2 = end;
#line 428
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 429
  p_addr = bm_map_paddr(b, offset);
#line 430
  bm = p_addr + (offset & 511UL);
#line 431
  if ((unsigned long )(bm + do_now) > (unsigned long )(p_addr + 512UL)) {
#line 432
    printk("<1>drbd: BUG BUG BUG! p_addr:%p bm:%p do_now:%d\n", p_addr, bm, (int )do_now);
#line 434
    goto ldv_40501;
  } else {

  }
#line 436
  memset((void *)bm, c, do_now * 8UL);
#line 437
  bm_unmap(p_addr);
#line 438
  offset = offset + do_now;
  ldv_40503: ;
#line 427
  if (offset < end) {
#line 428
    goto ldv_40502;
  } else {

  }
  ldv_40501: ;
#line 432
  return;
}
}
#line 450 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_resize(struct drbd_conf *mdev , sector_t capacity ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long bits ;
  unsigned long words ;
  unsigned long owords ;
  unsigned long obits ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long want ;
  unsigned long have ;
  unsigned long onpages ;
  struct page **npages ;
  struct page **opages ;
  int err ;
  int growing ;
  int opages_vmalloced ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  size_t tmp___5 ;
  sector_t tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;

  {
#line 452
  b = mdev->bitmap;
#line 455
  opages = 0;
#line 456
  err = 0;
#line 459
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 459
  if (_b != 0) {
#line 459
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 459
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 459
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_resize", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           459);
  } else {

  }
#line 459
  if (_b != 0) {
#line 459
    return (-12);
  } else {

  }
#line 461
  drbd_bm_lock(mdev, (char *)"resize");
#line 463
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  printk("<6>%s %s: drbd_bm_resize called with capacity == %llu\n", tmp___2, tmp___1,
         (unsigned long long )capacity);
#line 466
  if (b->bm_dev_capacity == capacity) {
#line 467
    goto out;
  } else {

  }
#line 469
  opages_vmalloced = constant_test_bit(2U, (unsigned long const volatile   *)(& b->bm_flags));
#line 471
  if (capacity == 0UL) {
#line 472
    _spin_lock_irq(& b->bm_lock);
#line 473
    opages = b->bm_pages;
#line 474
    onpages = b->bm_number_of_pages;
#line 475
    owords = b->bm_words;
#line 476
    b->bm_pages = 0;
#line 477
    tmp___6 = 0UL;
#line 477
    b->bm_dev_capacity = tmp___6;
#line 477
    tmp___5 = tmp___6;
#line 477
    b->bm_words = tmp___5;
#line 477
    tmp___4 = tmp___5;
#line 477
    b->bm_bits = tmp___4;
#line 477
    tmp___3 = tmp___4;
#line 477
    b->bm_set = tmp___3;
#line 477
    b->bm_number_of_pages = tmp___3;
#line 482
    _spin_unlock_irq(& b->bm_lock);
#line 483
    bm_free_pages(opages, onpages);
#line 484
    bm_vk_free((void *)opages, opages_vmalloced);
#line 485
    goto out;
  } else {

  }
#line 487
  bits = (capacity + 7UL) >> 3;
#line 494
  words = (bits + 63UL) >> 6;
#line 496
  tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 496
  if (tmp___9 != 0) {
#line 497
    if (((unsigned long long )(mdev->ldev)->md.md_size_sect - 72ULL) << 12 < (unsigned long long )bits) {
#line 497
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 497
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 497
      printk("<3>%s %s: ASSERT( (u64)bits <= (((u64)mdev->ldev->md.md_size_sect-MD_BM_OFFSET) << 12) ) in %s:%d\n",
             tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             497);
    } else {

    }
#line 498
    put_ldev(mdev);
  } else {

  }
#line 502
  want = ((words + 1UL) * 8UL + 4095UL) >> 12;
#line 503
  have = b->bm_number_of_pages;
#line 504
  if (want == have) {
#line 505
    if ((unsigned long )b->bm_pages == (unsigned long )((struct page **)0)) {
#line 505
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 505
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 505
      printk("<3>%s %s: ASSERT( b->bm_pages != NULL ) in %s:%d\n", tmp___11, tmp___10,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
             505);
    } else {

    }
#line 506
    npages = b->bm_pages;
  } else {
#line 508
    tmp___12 = drbd_insert_fault(mdev, 7U);
#line 508
    if (tmp___12 != 0) {
#line 509
      npages = 0;
    } else {
#line 511
      npages = bm_realloc_pages(b, want);
    }
  }
#line 514
  if ((unsigned long )npages == (unsigned long )((struct page **)0)) {
#line 515
    err = -12;
#line 516
    goto out;
  } else {

  }
#line 519
  _spin_lock_irq(& b->bm_lock);
#line 520
  opages = b->bm_pages;
#line 521
  owords = b->bm_words;
#line 522
  obits = b->bm_bits;
#line 524
  growing = bits > obits;
#line 525
  if ((unsigned long )opages != (unsigned long )((struct page **)0)) {
#line 526
    bm_set_surplus(b);
  } else {

  }
#line 528
  b->bm_pages = npages;
#line 529
  b->bm_number_of_pages = want;
#line 530
  b->bm_bits = bits;
#line 531
  b->bm_words = words;
#line 532
  b->bm_dev_capacity = capacity;
#line 534
  if (growing != 0) {
#line 535
    bm_memset(b, owords, 255, words - owords);
#line 536
    b->bm_set = b->bm_set + (bits - obits);
  } else {

  }
#line 539
  if (want < have) {
#line 541
    bm_free_pages(opages + want, have - want);
  } else {

  }
#line 544
  p_addr = bm_map_paddr(b, words);
#line 545
  bm = p_addr + (words & 511UL);
#line 546
  *bm = 2205418087UL;
#line 547
  bm_unmap(p_addr);
#line 549
  bm_clear_surplus(b);
#line 551
  _spin_unlock_irq(& b->bm_lock);
#line 552
  if ((unsigned long )opages != (unsigned long )npages) {
#line 553
    bm_vk_free((void *)opages, opages_vmalloced);
  } else {

  }
#line 554
  if (growing == 0) {
#line 555
    b->bm_set = bm_count_bits(b);
  } else {

  }
#line 556
  tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 556
  tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 556
  printk("<6>%s %s: resync bitmap: bits=%lu words=%lu\n", tmp___14, tmp___13, bits,
         words);
  out: 
#line 559
  drbd_bm_unlock(mdev);
#line 560
  return (err);
}
}
#line 571 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long _drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long s ;
  unsigned long flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 573
  b = mdev->bitmap;
#line 577
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 577
  if (_b != 0) {
#line 577
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_bm_total_weight",
           (char *)"!b", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           577);
  } else {

  }
#line 577
  if (_b != 0) {
#line 577
    return (0UL);
  } else {

  }
#line 578
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 578
  if (_b___0 != 0) {
#line 578
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_bm_total_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           578);
  } else {

  }
#line 578
  if (_b___0 != 0) {
#line 578
    return (0UL);
  } else {

  }
#line 580
  flags = _spin_lock_irqsave(& b->bm_lock);
#line 581
  s = b->bm_set;
#line 582
  _spin_unlock_irqrestore(& b->bm_lock, flags);
#line 584
  return (s);
}
}
#line 587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_total_weight(struct drbd_conf *mdev ) 
{ 
  unsigned long s ;
  int tmp ;

  {
#line 591
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 591
  if (tmp == 0) {
#line 592
    return (0UL);
  } else {

  }
#line 593
  s = _drbd_bm_total_weight(mdev);
#line 594
  put_ldev(mdev);
#line 595
  return (s);
}
}
#line 598 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
size_t drbd_bm_words(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 600
  b = mdev->bitmap;
#line 601
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 601
  if (_b != 0) {
#line 601
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 601
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_words", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           601);
  } else {

  }
#line 601
  if (_b != 0) {
#line 601
    return (0UL);
  } else {

  }
#line 602
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 602
  if (_b___0 != 0) {
#line 602
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 602
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_words", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           602);
  } else {

  }
#line 602
  if (_b___0 != 0) {
#line 602
    return (0UL);
  } else {

  }
#line 604
  return (b->bm_words);
}
}
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_bits(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 609
  b = mdev->bitmap;
#line 610
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 610
  if (_b != 0) {
#line 610
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           610);
  } else {

  }
#line 610
  if (_b != 0) {
#line 610
    return (0UL);
  } else {

  }
#line 612
  return (b->bm_bits);
}
}
#line 620 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_merge_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long word ;
  unsigned long bits ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int __ret_warn_on ;
  long tmp___3 ;
  int __ret_warn_on___0 ;
  long tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  unsigned long tmp___7 ;
  size_t tmp___8 ;
  int tmp___9 ;

  {
#line 623
  b = mdev->bitmap;
#line 628
  end = offset + number;
#line 630
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 630
  if (_b != 0) {
#line 630
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 630
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_merge_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           630);
  } else {

  }
#line 630
  if (_b != 0) {
#line 630
    return;
  } else {

  }
#line 631
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 631
  if (_b___0 != 0) {
#line 631
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 631
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 631
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_merge_lel",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           631);
  } else {

  }
#line 631
  if (_b___0 != 0) {
#line 631
    return;
  } else {

  }
#line 632
  if (number == 0UL) {
#line 633
    return;
  } else {

  }
#line 634
  __ret_warn_on = b->bm_words <= offset;
#line 634
  tmp___3 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 634
  if (tmp___3 != 0L) {
#line 634
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       634);
  } else {

  }
#line 634
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 635
  __ret_warn_on___0 = b->bm_words < end;
#line 635
  tmp___4 = __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 635
  if (tmp___4 != 0L) {
#line 635
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       635);
  } else {

  }
#line 635
  __builtin_expect(__ret_warn_on___0 != 0, 0L);
#line 637
  _spin_lock_irq(& b->bm_lock);
#line 638
  goto ldv_40593;
  ldv_40592: 
#line 639
  __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 639
  __min2 = end;
#line 639
  do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 640
  p_addr = bm_map_paddr(b, offset);
#line 641
  bm = p_addr + (offset & 511UL);
#line 642
  offset = offset + do_now;
#line 643
  goto ldv_40590;
  ldv_40589: 
#line 644
  bits = hweight_long(*bm);
#line 645
  tmp___5 = buffer;
#line 645
  buffer = buffer + 1;
#line 645
  word = (unsigned long )((unsigned long long )*bm | (unsigned long long )*tmp___5);
#line 646
  tmp___6 = bm;
#line 646
  bm = bm + 1;
#line 646
  *tmp___6 = word;
#line 647
  tmp___7 = hweight_long(word);
#line 647
  b->bm_set = b->bm_set + (tmp___7 - bits);
  ldv_40590: 
#line 643
  tmp___8 = do_now;
#line 643
  do_now = do_now - (size_t )1;
#line 643
  if (tmp___8 != 0UL) {
#line 644
    goto ldv_40589;
  } else {

  }
#line 649
  bm_unmap(p_addr);
  ldv_40593: ;
#line 638
  if (offset < end) {
#line 639
    goto ldv_40592;
  } else {

  }

#line 656
  if (b->bm_words == end) {
#line 657
    tmp___9 = bm_clear_surplus(b);
#line 657
    b->bm_set = b->bm_set - (unsigned long )tmp___9;
  } else {

  }
#line 659
  _spin_unlock_irq(& b->bm_lock);
#line 660
  return;
}
}
#line 665 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_get_lel(struct drbd_conf *mdev , size_t offset , size_t number , unsigned long *buffer ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  size_t end ;
  size_t do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned long *tmp___5 ;
  unsigned long *tmp___6 ;
  size_t tmp___7 ;

  {
#line 668
  b = mdev->bitmap;
#line 672
  end = offset + number;
#line 674
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 674
  if (_b != 0) {
#line 674
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 674
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_get_lel", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           674);
  } else {

  }
#line 674
  if (_b != 0) {
#line 674
    return;
  } else {

  }
#line 675
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 675
  if (_b___0 != 0) {
#line 675
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_get_lel", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           675);
  } else {

  }
#line 675
  if (_b___0 != 0) {
#line 675
    return;
  } else {

  }
#line 677
  _spin_lock_irq(& b->bm_lock);
#line 678
  if ((b->bm_words <= offset || b->bm_words < end) || number == 0UL) {
#line 681
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 681
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 681
    printk("<3>%s %s: offset=%lu number=%lu bm_words=%lu\n", tmp___4, tmp___3, offset,
           number, b->bm_words);
  } else {
#line 686
    goto ldv_40618;
    ldv_40617: 
#line 687
    __min1 = (offset + 512UL) & 0xfffffffffffffe00UL;
#line 687
    __min2 = end;
#line 687
    do_now = (__min1 < __min2 ? __min1 : __min2) - offset;
#line 688
    p_addr = bm_map_paddr(b, offset);
#line 689
    bm = p_addr + (offset & 511UL);
#line 690
    offset = offset + do_now;
#line 691
    goto ldv_40615;
    ldv_40614: 
#line 692
    tmp___5 = buffer;
#line 692
    buffer = buffer + 1;
#line 692
    tmp___6 = bm;
#line 692
    bm = bm + 1;
#line 692
    *tmp___5 = *tmp___6;
    ldv_40615: 
#line 691
    tmp___7 = do_now;
#line 691
    do_now = do_now - (size_t )1;
#line 691
    if (tmp___7 != 0UL) {
#line 692
      goto ldv_40614;
    } else {

    }
#line 693
    bm_unmap(p_addr);
    ldv_40618: ;
#line 686
    if (offset < end) {
#line 687
      goto ldv_40617;
    } else {

    }

  }
#line 696
  _spin_unlock_irq(& b->bm_lock);
#line 697
  return;
}
}
#line 700 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_set_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 702
  b = mdev->bitmap;
#line 703
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 703
  if (_b != 0) {
#line 703
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 703
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 703
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           703);
  } else {

  }
#line 703
  if (_b != 0) {
#line 703
    return;
  } else {

  }
#line 704
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 704
  if (_b___0 != 0) {
#line 704
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 704
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_set_all", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           704);
  } else {

  }
#line 704
  if (_b___0 != 0) {
#line 704
    return;
  } else {

  }
#line 706
  _spin_lock_irq(& b->bm_lock);
#line 707
  bm_memset(b, 0UL, 255, b->bm_words);
#line 708
  bm_clear_surplus(b);
#line 709
  b->bm_set = b->bm_bits;
#line 710
  _spin_unlock_irq(& b->bm_lock);
#line 711
  return;
}
}
#line 714 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void drbd_bm_clear_all(struct drbd_conf *mdev ) 
{ 
  struct drbd_bitmap *b ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 716
  b = mdev->bitmap;
#line 717
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 717
  if (_b != 0) {
#line 717
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 717
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 717
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_clear_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           717);
  } else {

  }
#line 717
  if (_b != 0) {
#line 717
    return;
  } else {

  }
#line 718
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 718
  if (_b___0 != 0) {
#line 718
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 718
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 718
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_clear_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           718);
  } else {

  }
#line 718
  if (_b___0 != 0) {
#line 718
    return;
  } else {

  }
#line 720
  _spin_lock_irq(& b->bm_lock);
#line 721
  bm_memset(b, 0UL, 0, b->bm_words);
#line 722
  b->bm_set = 0UL;
#line 723
  _spin_unlock_irq(& b->bm_lock);
#line 724
  return;
}
}
#line 726 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_async_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_bitmap *b ;
  int uptodate ;
  int tmp ;

  {
#line 728
  b = (struct drbd_bitmap *)bio->bi_private;
#line 729
  uptodate = (int )bio->bi_flags & 1;
#line 736
  if (error == 0 && uptodate == 0) {
#line 737
    error = -5;
  } else {

  }
#line 739
  if (error != 0) {
#line 742
    __set_bit(1, (unsigned long volatile   *)(& b->bm_flags));
  } else {

  }
#line 744
  tmp = atomic_dec_and_test(& b->bm_async_io);
#line 744
  if (tmp != 0) {
#line 745
    __wake_up(& b->bm_io_wait, 3U, 1, 0);
  } else {

  }
#line 747
  bio_put(bio);
#line 748
  return;
}
}
#line 750 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static void bm_page_io_async(struct drbd_conf *mdev , struct drbd_bitmap *b , int page_nr ,
                             int rw ) 
{ 
  struct bio *bio ;
  struct bio *tmp ;
  unsigned int len ;
  sector_t on_disk_sector ;
  unsigned int __min1 ;
  unsigned int __min2 ;
  sector_t tmp___0 ;
  int tmp___1 ;

  {
#line 753
  tmp = bio_alloc(208U, 1);
#line 753
  bio = tmp;
#line 755
  on_disk_sector = (sector_t )((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.bm_offset);
#line 757
  on_disk_sector = ((unsigned long )page_nr << 3) + on_disk_sector;
#line 761
  __min1 = 4096U;
#line 761
  tmp___0 = drbd_md_last_sector(mdev->ldev);
#line 761
  __min2 = (((unsigned int )tmp___0 - (unsigned int )on_disk_sector) + 1U) << 9U;
#line 761
  len = __min1 < __min2 ? __min1 : __min2;
#line 764
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 765
  bio->bi_sector = on_disk_sector;
#line 766
  bio_add_page(bio, *(b->bm_pages + (unsigned long )page_nr), len, 0U);
#line 767
  bio->bi_private = (void *)b;
#line 768
  bio->bi_end_io = & bm_async_io_complete;
#line 770
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 770
  if (tmp___1 != 0) {
#line 771
    bio->bi_rw = bio->bi_rw | (unsigned long )rw;
#line 772
    bio_endio(bio, -5);
  } else {
#line 774
    submit_bio(rw, bio);
  }
#line 775
  return;
}
}
#line 814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static int bm_rw(struct drbd_conf *mdev , int rw ) 
{ 
  struct drbd_bitmap *b ;
  int bm_words ;
  int num_pages ;
  int i ;
  unsigned long now ;
  char ppb[10U] ;
  int err ;
  int __ret_warn_on ;
  int tmp ;
  long tmp___0 ;
  size_t tmp___1 ;
  struct request_queue *tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 816
  b = mdev->bitmap;
#line 821
  err = 0;
#line 823
  tmp = bm_is_locked(b);
#line 823
  __ret_warn_on = tmp == 0;
#line 823
  tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 823
  if (tmp___0 != 0L) {
#line 823
    warn_slowpath_null("/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                       823);
  } else {

  }
#line 823
  __builtin_expect(__ret_warn_on != 0, 0L);
#line 827
  tmp___1 = drbd_bm_words(mdev);
#line 827
  bm_words = (int )tmp___1;
#line 828
  num_pages = (int )((((unsigned long )bm_words + 512UL) * 8UL - 1UL) >> 12);
#line 834
  now = jiffies;
#line 835
  atomic_set(& b->bm_async_io, num_pages);
#line 836
  __clear_bit(1, (unsigned long volatile   *)(& b->bm_flags));
#line 839
  i = 0;
#line 839
  goto ldv_40670;
  ldv_40669: 
#line 840
  bm_page_io_async(mdev, b, i, rw);
#line 839
  i = i + 1;
  ldv_40670: ;
#line 839
  if (i < num_pages) {
#line 840
    goto ldv_40669;
  } else {

  }
#line 842
  tmp___2 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 842
  drbd_blk_run_queue(tmp___2);
#line 843
  tmp___3 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 843
  if (tmp___3 == 0) {
#line 843
    goto ldv_40672;
  } else {

  }
#line 843
  tmp___4 = get_current();
#line 843
  __wait.flags = 0U;
#line 843
  __wait.private = (void *)tmp___4;
#line 843
  __wait.func = & autoremove_wake_function;
#line 843
  __wait.task_list.next = & __wait.task_list;
#line 843
  __wait.task_list.prev = & __wait.task_list;
  ldv_40675: 
#line 843
  prepare_to_wait(& b->bm_io_wait, & __wait, 2);
#line 843
  tmp___5 = atomic_read((atomic_t const   *)(& b->bm_async_io));
#line 843
  if (tmp___5 == 0) {
#line 843
    goto ldv_40674;
  } else {

  }
#line 843
  schedule();
#line 843
  goto ldv_40675;
  ldv_40674: 
#line 843
  finish_wait(& b->bm_io_wait, & __wait);
  ldv_40672: 
#line 845
  tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& b->bm_flags));
#line 845
  if (tmp___8 != 0) {
#line 846
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 846
    printk("<1>%s %s: we had at least one MD IO ERROR during bitmap IO\n", tmp___7,
           tmp___6);
#line 847
    drbd_chk_io_error_(mdev, 1, 1, "bm_rw");
#line 848
    err = -5;
  } else {

  }
#line 851
  now = jiffies;
#line 852
  if (rw == 1) {
#line 856
    drbd_md_flush(mdev);
  } else {
#line 859
    b->bm_set = bm_count_bits_swap_endian(b);
#line 860
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
    printk("<6>%s %s: recounting of set bits took additional %lu jiffies\n", tmp___10,
           tmp___9, (unsigned long )jiffies - now);
  }
#line 863
  now = b->bm_set;
#line 865
  tmp___11 = ppsize((char *)(& ppb), (unsigned long long )(now << 2));
#line 865
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 865
  printk("<6>%s %s: %s (%lu bits) marked out-of-sync by on disk bit-map.\n", tmp___13,
         tmp___12, tmp___11, now);
#line 868
  return (err);
}
}
#line 875 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_read(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 877
  tmp = bm_rw(mdev, 0);
#line 877
  return (tmp);
}
}
#line 884 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 886
  tmp = bm_rw(mdev, 1);
#line 886
  return (tmp);
}
}
#line 898 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_write_sect(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  sector_t on_disk_sector ;
  int bm_words ;
  int num_words ;
  int offset ;
  int err ;
  size_t tmp ;
  int _min1 ;
  int _min2 ;
  void *tmp___0 ;
  void *tmp___1 ;
  int i ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 900
  on_disk_sector = (sector_t )(((mdev->ldev)->md.md_offset + (unsigned long long )enr) + (unsigned long long )(mdev->ldev)->md.bm_offset);
#line 903
  err = 0;
#line 905
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 906
  tmp = drbd_bm_words(mdev);
#line 906
  bm_words = (int )tmp;
#line 907
  offset = (int )(enr << 6);
#line 908
  _min1 = 64;
#line 908
  _min2 = bm_words - offset;
#line 908
  num_words = _min1 < _min2 ? _min1 : _min2;
#line 909
  if (num_words <= 63) {
#line 910
    tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 910
    memset(tmp___0, 0, 512UL);
  } else {

  }
#line 911
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 911
  drbd_bm_get_lel(mdev, (size_t )offset, (size_t )num_words, (unsigned long *)tmp___1);
#line 913
  tmp___4 = drbd_md_sync_page_io(mdev, mdev->ldev, on_disk_sector, 1);
#line 913
  if (tmp___4 == 0) {
#line 915
    err = -5;
#line 916
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 916
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 916
    printk("<3>%s %s: IO ERROR writing bitmap sector %lu (meta-disk sector %llus)\n",
           tmp___3, tmp___2, enr, (unsigned long long )on_disk_sector);
#line 919
    drbd_chk_io_error_(mdev, 1, 1, "drbd_bm_write_sect");
#line 920
    i = 0;
#line 920
    goto ldv_40698;
    ldv_40697: 
#line 921
    drbd_bm_ALe_set_all(mdev, enr * 4UL + (unsigned long )i);
#line 920
    i = i + 1;
    ldv_40698: ;
#line 920
    if (i <= 3) {
#line 921
      goto ldv_40697;
    } else {

    }

  } else {

  }
#line 923
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 924
  mutex_unlock(& mdev->md_io_mutex);
#line 925
  return (err);
}
}
#line 935 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long __bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ,
                                    int const   find_zero_bit , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  unsigned long *p_addr ;
  unsigned long bit_offset ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;

  {
#line 938
  b = mdev->bitmap;
#line 939
  i = 0xffffffffffffffffUL;
#line 943
  if (b->bm_bits < bm_fo) {
#line 944
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 944
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 944
    printk("<3>%s %s: bm_fo=%lu bm_bits=%lu\n", tmp___0, tmp, bm_fo, b->bm_bits);
  } else {
#line 946
    goto ldv_40714;
    ldv_40713: 
#line 948
    bit_offset = bm_fo & 0xffffffffffff8000UL;
#line 949
    offset = bit_offset >> 6;
#line 950
    p_addr = __bm_map_paddr(b, offset, km);
#line 952
    if ((int )find_zero_bit != 0) {
#line 953
      i = find_next_zero_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    } else {
#line 955
      i = find_next_bit((unsigned long const   *)p_addr, 32768UL, bm_fo & 32767UL);
    }
#line 957
    __bm_unmap(p_addr, km);
#line 958
    if (i <= 32767UL) {
#line 959
      i = bit_offset + i;
#line 960
      if (b->bm_bits <= i) {
#line 961
        goto ldv_40711;
      } else {

      }
#line 962
      goto found;
    } else {

    }
#line 964
    bm_fo = bit_offset + 32768UL;
    ldv_40714: ;
#line 946
    if (b->bm_bits > bm_fo) {
#line 947
      goto ldv_40713;
    } else {

    }
    ldv_40711: 
#line 966
    i = 0xffffffffffffffffUL;
  }
  found: ;
#line 969
  return (i);
}
}
#line 972 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
static unsigned long bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo , int const   find_zero_bit ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 975
  b = mdev->bitmap;
#line 976
  i = 0xffffffffffffffffUL;
#line 978
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 978
  if (_b != 0) {
#line 978
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 978
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 978
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_find_next", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           978);
  } else {

  }
#line 978
  if (_b != 0) {
#line 978
    return (i);
  } else {

  }
#line 979
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 979
  if (_b___0 != 0) {
#line 979
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 979
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 979
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_find_next", (char *)"!b->bm_pages",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           979);
  } else {

  }
#line 979
  if (_b___0 != 0) {
#line 979
    return (i);
  } else {

  }
#line 981
  _spin_lock_irq(& b->bm_lock);
#line 982
  tmp___3 = bm_is_locked(b);
#line 982
  if (tmp___3 != 0) {
#line 983
    __bm_print_lock_info(mdev, "bm_find_next");
  } else {

  }
#line 985
  i = __bm_find_next(mdev, bm_fo, find_zero_bit, KM_IRQ1);
#line 987
  _spin_unlock_irq(& b->bm_lock);
#line 988
  return (i);
}
}
#line 991 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 993
  tmp = bm_find_next(mdev, bm_fo, 0);
#line 993
  return (tmp);
}
}
#line 1006 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1009
  tmp = __bm_find_next(mdev, bm_fo, 0, KM_USER1);
#line 1009
  return (tmp);
}
}
#line 1012 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long _drbd_bm_find_next_zero(struct drbd_conf *mdev , unsigned long bm_fo ) 
{ 
  unsigned long tmp ;

  {
#line 1015
  tmp = __bm_find_next(mdev, bm_fo, 1, KM_USER1);
#line 1015
  return (tmp);
}
}
#line 1024 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int __bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long e ,
                        int val , enum km_type  const  km ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long bitnr ;
  unsigned long last_page_nr ;
  int c ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long offset ;
  unsigned long page_nr ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 1027
  b = mdev->bitmap;
#line 1028
  p_addr = 0;
#line 1030
  last_page_nr = 0xffffffffffffffffUL;
#line 1031
  c = 0;
#line 1033
  if (b->bm_bits <= e) {
#line 1034
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1034
    printk("<3>%s %s: ASSERT FAILED: bit_s=%lu bit_e=%lu bm_bits=%lu\n", tmp___0,
           tmp, s, e, b->bm_bits);
#line 1036
    e = b->bm_bits != 0UL ? b->bm_bits - 1UL : 0UL;
  } else {

  }
#line 1038
  bitnr = s;
#line 1038
  goto ldv_40754;
  ldv_40753: 
#line 1039
  offset = bitnr >> 6;
#line 1040
  page_nr = offset >> 9;
#line 1041
  if (page_nr != last_page_nr) {
#line 1042
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1043
      __bm_unmap(p_addr, km);
    } else {

    }
#line 1044
    p_addr = __bm_map_paddr(b, offset, km);
#line 1045
    last_page_nr = page_nr;
  } else {

  }
#line 1047
  if (val != 0) {
#line 1048
    tmp___1 = __test_and_set_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1048
    c = (tmp___1 == 0) + c;
  } else {
#line 1050
    tmp___2 = __test_and_clear_bit((int )bitnr & 32767, (unsigned long volatile   *)p_addr);
#line 1050
    c = c - (tmp___2 != 0);
  }
#line 1038
  bitnr = bitnr + 1UL;
  ldv_40754: ;
#line 1038
  if (bitnr <= e) {
#line 1039
    goto ldv_40753;
  } else {

  }

#line 1052
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1053
    __bm_unmap(p_addr, km);
  } else {

  }
#line 1054
  b->bm_set = b->bm_set + (unsigned long )c;
#line 1055
  return (c);
}
}
#line 1062 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int bm_change_bits_to(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ,
                      int val ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  int c ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 1066
  b = mdev->bitmap;
#line 1067
  c = 0;
#line 1069
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1069
  if (_b != 0) {
#line 1069
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1069
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1069
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "bm_change_bits_to", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1069);
  } else {

  }
#line 1069
  if (_b != 0) {
#line 1069
    return (1);
  } else {

  }
#line 1070
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1070
  if (_b___0 != 0) {
#line 1070
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "bm_change_bits_to",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1070);
  } else {

  }
#line 1070
  if (_b___0 != 0) {
#line 1070
    return (0);
  } else {

  }
#line 1072
  flags = _spin_lock_irqsave(& b->bm_lock);
#line 1073
  tmp___3 = bm_is_locked(b);
#line 1073
  if (tmp___3 != 0) {
#line 1074
    __bm_print_lock_info(mdev, "bm_change_bits_to");
  } else {

  }
#line 1076
  c = __bm_change_bits_to(mdev, s, e, val, KM_IRQ1);
#line 1078
  _spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1079
  return (c);
}
}
#line 1083 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1085
  tmp = bm_change_bits_to(mdev, s, e, 1);
#line 1085
  return (tmp);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_clear_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  int tmp ;

  {
#line 1091
  tmp = bm_change_bits_to(mdev, s, e, 0);
#line 1091
  return (- tmp);
}
}
#line 1096 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
__inline static void bm_set_full_words_within_one_page(struct drbd_bitmap *b , int page_nr ,
                                                       int first_word , int last_word ) 
{ 
  int i ;
  int bits ;
  unsigned long *paddr ;
  void *tmp ;
  unsigned long tmp___0 ;

  {
#line 1101
  tmp = kmap_atomic(*(b->bm_pages + (unsigned long )page_nr), KM_USER0);
#line 1101
  paddr = (unsigned long *)tmp;
#line 1102
  i = first_word;
#line 1102
  goto ldv_40796;
  ldv_40795: 
#line 1103
  tmp___0 = hweight_long(*(paddr + (unsigned long )i));
#line 1103
  bits = (int )tmp___0;
#line 1104
  *(paddr + (unsigned long )i) = 0xffffffffffffffffUL;
#line 1105
  b->bm_set = b->bm_set + (unsigned long )(64 - bits);
#line 1102
  i = i + 1;
  ldv_40796: ;
#line 1102
  if (i < last_word) {
#line 1103
    goto ldv_40795;
  } else {

  }
#line 1107
  pagefault_enable();
#line 1108
  return;
}
}
#line 1114 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
void _drbd_bm_set_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long sl ;
  unsigned long el ;
  int first_page ;
  int last_page ;
  int page_nr ;
  int first_word ;
  int last_word ;

  {
#line 1124
  sl = ((unsigned long )s + 63UL) & 0xffffffffffffffc0UL;
#line 1125
  el = ((unsigned long )e + 1UL) & 0xffffffffffffffc0UL;
#line 1132
  if ((unsigned long )e - (unsigned long )s <= 192UL) {
#line 1134
    __bm_change_bits_to(mdev, s, e, 1, KM_USER0);
#line 1135
    return;
  } else {

  }
#line 1141
  if (sl != 0UL) {
#line 1142
    __bm_change_bits_to(mdev, s, sl - 1UL, 1, KM_USER0);
  } else {

  }
#line 1144
  first_page = (int )(sl >> 15);
#line 1145
  last_page = (int )(el >> 15);
#line 1149
  first_word = (int )(sl >> 6) & 511;
#line 1150
  last_word = 512;
#line 1153
  page_nr = first_page;
#line 1153
  goto ldv_40812;
  ldv_40811: 
#line 1154
  bm_set_full_words_within_one_page(mdev->bitmap, page_nr, first_word, last_word);
#line 1155
  __might_sleep((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
                1155, 0);
#line 1155
  _cond_resched();
#line 1156
  first_word = 0;
#line 1153
  page_nr = page_nr + 1;
  ldv_40812: ;
#line 1153
  if (page_nr < last_page) {
#line 1154
    goto ldv_40811;
  } else {

  }
#line 1160
  last_word = (int )(el >> 6) & 511;
#line 1161
  bm_set_full_words_within_one_page(mdev->bitmap, last_page, first_word, last_word);
#line 1168
  if (el <= (unsigned long )e) {
#line 1169
    __bm_change_bits_to(mdev, el, e, 1, KM_USER0);
  } else {

  }
#line 1170
  return;
}
}
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_test_bit(struct drbd_conf *mdev , unsigned long const   bitnr ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned long offset ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 1182
  b = mdev->bitmap;
#line 1186
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1186
  if (_b != 0) {
#line 1186
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1186
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1186
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_test_bit", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1186);
  } else {

  }
#line 1186
  if (_b != 0) {
#line 1186
    return (0);
  } else {

  }
#line 1187
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1187
  if (_b___0 != 0) {
#line 1187
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1187
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1187
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_test_bit",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1187);
  } else {

  }
#line 1187
  if (_b___0 != 0) {
#line 1187
    return (0);
  } else {

  }
#line 1189
  flags = _spin_lock_irqsave(& b->bm_lock);
#line 1190
  tmp___3 = bm_is_locked(b);
#line 1190
  if (tmp___3 != 0) {
#line 1191
    __bm_print_lock_info(mdev, "drbd_bm_test_bit");
  } else {

  }
#line 1192
  if (b->bm_bits > (unsigned long )bitnr) {
#line 1193
    offset = bitnr >> 6;
#line 1194
    p_addr = bm_map_paddr(b, offset);
#line 1195
    tmp___4 = variable_test_bit((int )bitnr & 32767, (unsigned long const volatile   *)p_addr);
#line 1195
    i = tmp___4 != 0;
#line 1196
    bm_unmap(p_addr);
  } else
#line 1197
  if (b->bm_bits == (unsigned long )bitnr) {
#line 1198
    i = -1;
  } else {
#line 1200
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1200
    printk("<3>%s %s: bitnr=%lu > bm_bits=%lu\n", tmp___6, tmp___5, bitnr, b->bm_bits);
#line 1201
    i = 0;
  }
#line 1204
  _spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1205
  return (i);
}
}
#line 1209 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_count_bits(struct drbd_conf *mdev , unsigned long const   s , unsigned long const   e ) 
{ 
  unsigned long flags ;
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long page_nr ;
  unsigned long bitnr ;
  int c ;
  size_t w ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int _b___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 1212
  b = mdev->bitmap;
#line 1213
  p_addr = 0;
#line 1213
  page_nr = 0xffffffffffffffffUL;
#line 1215
  c = 0;
#line 1222
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1222
  if (_b != 0) {
#line 1222
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1222
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1222
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_count_bits", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1222);
  } else {

  }
#line 1222
  if (_b != 0) {
#line 1222
    return (1);
  } else {

  }
#line 1223
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1223
  if (_b___0 != 0) {
#line 1223
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1223
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_count_bits",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1223);
  } else {

  }
#line 1223
  if (_b___0 != 0) {
#line 1223
    return (1);
  } else {

  }
#line 1225
  flags = _spin_lock_irqsave(& b->bm_lock);
#line 1226
  tmp___3 = bm_is_locked(b);
#line 1226
  if (tmp___3 != 0) {
#line 1227
    __bm_print_lock_info(mdev, "drbd_bm_count_bits");
  } else {

  }
#line 1228
  bitnr = s;
#line 1228
  goto ldv_40857;
  ldv_40856: 
#line 1229
  w = bitnr >> 6;
#line 1230
  if (w >> 9 != page_nr) {
#line 1231
    page_nr = w >> 9;
#line 1232
    if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1233
      bm_unmap(p_addr);
    } else {

    }
#line 1234
    p_addr = bm_map_paddr(b, w);
  } else {

  }
#line 1236
  _b___1 = b->bm_bits <= bitnr;
#line 1236
  if (_b___1 != 0) {
#line 1236
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1236
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1236
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_bm_count_bits",
           (char *)"bitnr >= b->bm_bits", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1236);
  } else {

  }
#line 1236
  if (_b___1 != 0) {
#line 1237
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1237
    printk("<3>%s %s: bitnr=%lu bm_bits=%lu\n", tmp___5, tmp___4, bitnr, b->bm_bits);
  } else {
#line 1239
    tmp___6 = variable_test_bit((int )((unsigned int )bitnr - ((unsigned int )page_nr << 15U)),
                                (unsigned long const volatile   *)p_addr);
#line 1239
    c = (tmp___6 != 0) + c;
  }
#line 1228
  bitnr = bitnr + 1UL;
  ldv_40857: ;
#line 1228
  if (bitnr <= (unsigned long )e) {
#line 1229
    goto ldv_40856;
  } else {

  }

#line 1242
  if ((unsigned long )p_addr != (unsigned long )((unsigned long *)0)) {
#line 1243
    bm_unmap(p_addr);
  } else {

  }
#line 1244
  _spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1245
  return (c);
}
}
#line 1263 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
int drbd_bm_e_weight(struct drbd_conf *mdev , unsigned long enr ) 
{ 
  struct drbd_bitmap *b ;
  int count ;
  int s ;
  int e ;
  unsigned long flags ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  unsigned long _min1 ;
  size_t _min2 ;
  int n ;
  unsigned long *tmp___4 ;
  unsigned long tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 1265
  b = mdev->bitmap;
#line 1270
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1270
  if (_b != 0) {
#line 1270
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1270
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_e_weight", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1270);
  } else {

  }
#line 1270
  if (_b != 0) {
#line 1270
    return (0);
  } else {

  }
#line 1271
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1271
  if (_b___0 != 0) {
#line 1271
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1271
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_e_weight",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1271);
  } else {

  }
#line 1271
  if (_b___0 != 0) {
#line 1271
    return (0);
  } else {

  }
#line 1273
  flags = _spin_lock_irqsave(& b->bm_lock);
#line 1274
  tmp___3 = bm_is_locked(b);
#line 1274
  if (tmp___3 != 0) {
#line 1275
    __bm_print_lock_info(mdev, "drbd_bm_e_weight");
  } else {

  }
#line 1277
  s = (int )(enr << 6);
#line 1278
  _min1 = (enr + 1UL) << 6;
#line 1278
  _min2 = b->bm_words;
#line 1278
  e = (int )(_min1 < _min2 ? _min1 : _min2);
#line 1279
  count = 0;
#line 1280
  if ((size_t )s < b->bm_words) {
#line 1281
    n = e - s;
#line 1282
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1283
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1284
    goto ldv_40886;
    ldv_40885: 
#line 1285
    tmp___4 = bm;
#line 1285
    bm = bm + 1;
#line 1285
    tmp___5 = hweight_long(*tmp___4);
#line 1285
    count = (int )((unsigned int )tmp___5 + (unsigned int )count);
    ldv_40886: 
#line 1284
    tmp___6 = n;
#line 1284
    n = n - 1;
#line 1284
    if (tmp___6 != 0) {
#line 1285
      goto ldv_40885;
    } else {

    }
#line 1286
    bm_unmap(p_addr);
  } else {
#line 1288
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1288
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1288
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_e_weight\n", tmp___8,
           tmp___7, s);
  }
#line 1290
  _spin_unlock_irqrestore(& b->bm_lock, flags);
#line 1291
  return (count);
}
}
#line 1295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared"
unsigned long drbd_bm_ALe_set_all(struct drbd_conf *mdev , unsigned long al_enr ) 
{ 
  struct drbd_bitmap *b ;
  unsigned long *p_addr ;
  unsigned long *bm ;
  unsigned long weight ;
  int count ;
  int s ;
  int e ;
  int i ;
  int do_now ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  size_t __min1 ;
  size_t __min2 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  unsigned long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;

  {
#line 1297
  b = mdev->bitmap;
#line 1301
  _b = (unsigned long )b == (unsigned long )((struct drbd_bitmap *)0);
#line 1301
  if (_b != 0) {
#line 1301
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1301
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1301
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_bm_ALe_set_all", (char *)"!b",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1301);
  } else {

  }
#line 1301
  if (_b != 0) {
#line 1301
    return (0UL);
  } else {

  }
#line 1302
  _b___0 = (unsigned long )b->bm_pages == (unsigned long )((struct page **)0);
#line 1302
  if (_b___0 != 0) {
#line 1302
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1302
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_bm_ALe_set_all",
           (char *)"!b->bm_pages", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1302);
  } else {

  }
#line 1302
  if (_b___0 != 0) {
#line 1302
    return (0UL);
  } else {

  }
#line 1304
  _spin_lock_irq(& b->bm_lock);
#line 1305
  tmp___3 = bm_is_locked(b);
#line 1305
  if (tmp___3 != 0) {
#line 1306
    __bm_print_lock_info(mdev, "drbd_bm_ALe_set_all");
  } else {

  }
#line 1307
  weight = b->bm_set;
#line 1309
  s = (int )((unsigned int )al_enr * 16U);
#line 1310
  __min1 = (size_t )(s + 16);
#line 1310
  __min2 = b->bm_words;
#line 1310
  e = (int )(__min1 < __min2 ? __min1 : __min2);
#line 1312
  if ((e + -1) >> 9 != s >> 9) {
#line 1312
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1312
    printk("<3>%s %s: ASSERT( (e-1) >> (PAGE_SHIFT - LN2_BPL + 3) == s >> (PAGE_SHIFT - LN2_BPL + 3) ) in %s:%d\n",
           tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_bitmap.c.prepared",
           1313);
  } else {

  }
#line 1314
  count = 0;
#line 1315
  if ((size_t )s < b->bm_words) {
#line 1316
    do_now = e - s;
#line 1316
    i = do_now;
#line 1317
    p_addr = bm_map_paddr(b, (unsigned long )s);
#line 1318
    bm = p_addr + ((unsigned long )s & 511UL);
#line 1319
    goto ldv_40913;
    ldv_40912: 
#line 1320
    tmp___6 = hweight_long(*bm);
#line 1320
    count = (int )((unsigned int )tmp___6 + (unsigned int )count);
#line 1321
    *bm = 0xffffffffffffffffUL;
#line 1322
    bm = bm + 1;
    ldv_40913: 
#line 1319
    tmp___7 = i;
#line 1319
    i = i - 1;
#line 1319
    if (tmp___7 != 0) {
#line 1320
      goto ldv_40912;
    } else {

    }
#line 1324
    bm_unmap(p_addr);
#line 1325
    b->bm_set = b->bm_set + (unsigned long )(do_now * 64 - count);
#line 1326
    if ((size_t )e == b->bm_words) {
#line 1327
      tmp___8 = bm_clear_surplus(b);
#line 1327
      b->bm_set = b->bm_set - (unsigned long )tmp___8;
    } else {

    }
  } else {
#line 1329
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1329
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1329
    printk("<3>%s %s: start offset (%d) too large in drbd_bm_ALe_set_all\n", tmp___10,
           tmp___9, s);
  }
#line 1331
  weight = b->bm_set - weight;
#line 1332
  _spin_unlock_irq(& b->bm_lock);
#line 1333
  return (weight);
}
}
#line 88 "include/linux/module.h"
extern struct module __this_module ;
#line 274 "include/linux/proc_fs.h"
__inline static struct proc_inode *PROC_I(struct inode  const  *inode ) 
{ 
  struct inode  const  *__mptr ;

  {
#line 276
  __mptr = inode;
#line 276
  return ((struct proc_inode *)__mptr + 0xffffffffffffffd0UL);
}
}
#line 279 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *PDE(struct inode  const  *inode ) 
{ 
  struct proc_inode *tmp ;

  {
#line 281
  tmp = PROC_I(inode);
#line 281
  return (tmp->pde);
}
}
#line 78 "include/linux/seq_file.h"
extern ssize_t seq_read(struct file * , char * , size_t  , loff_t * ) ;
#line 79
extern loff_t seq_lseek(struct file * , loff_t  , int  ) ;
#line 86
extern int seq_printf(struct seq_file * , char const   *  , ...) ;
#line 119
extern int single_open(struct file * , int (*)(struct seq_file * , void * ) , void * ) ;
#line 120
extern int single_release(struct inode * , struct file * ) ;
#line 55 "include/linux/drbd.h"
char const   *drbd_buildtag(void) ;
#line 279
char const   *drbd_conn_str(enum drbd_conns s ) ;
#line 280
char const   *drbd_role_str(enum drbd_role s ) ;
#line 281
char const   *drbd_disk_str(enum drbd_disk_state s ) ;
#line 255 "include/linux/lru_cache.h"
extern size_t lc_seq_printf_stats(struct seq_file * , struct lru_cache * ) ;
#line 257
extern void lc_seq_dump_details(struct seq_file * , struct lru_cache * , char * ,
                                void (*)(struct seq_file * , struct lc_element * ) ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
unsigned int minor_count ;
#line 163
struct drbd_conf **minor_table ;
#line 1021 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static struct drbd_conf *minor_to_mdev(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 1025
  mdev = minor < minor_count ? *(minor_table + (unsigned long )minor) : 0;
#line 1027
  return (mdev);
}
}
#line 1361
int proc_details ;
#line 1492 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct proc_dir_entry *drbd_proc  ;
#line 1493
struct file_operations drbd_proc_fops ;
#line 1990 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_get_syncer_progress(struct drbd_conf *mdev , unsigned long *bits_left ,
                                              unsigned int *per_mil_done ) 
{ 
  unsigned long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 2003
  tmp = drbd_bm_total_weight(mdev);
#line 2003
  *bits_left = tmp - mdev->rs_failed;
#line 2006
  if (*bits_left > mdev->rs_total) {
#line 2012
    __asm__  volatile   ("": : : "memory");
#line 2013
    tmp___0 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 2013
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
    printk("<4>%s %s: cs:%s rs_left=%lu > rs_total=%lu (rs_failed %lu)\n", tmp___2,
           tmp___1, tmp___0, *bits_left, mdev->rs_total, mdev->rs_failed);
#line 2016
    *per_mil_done = 0U;
  } else {
#line 2019
    tmp___3 = 1000UL - ((*bits_left >> 10) * 1000UL) / ((mdev->rs_total >> 10) + 1UL);
#line 2022
    *per_mil_done = (unsigned int )tmp___3;
  }
#line 2024
  return;
}
}
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) ;
#line 49 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
struct file_operations drbd_proc_fops  = 
#line 49
     {& __this_module, & seq_lseek, & seq_read, 0, 0, 0, 0, 0, 0, 0, 0, 0, & drbd_proc_open,
    0, & single_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void drbd_syncer_progress(struct drbd_conf *mdev , struct seq_file *seq ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long rt ;
  unsigned long rs_left ;
  unsigned int res ;
  int i ;
  int x ;
  int y ;

  {
#line 70
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 72
  x = (int )(res / 50U);
#line 73
  y = 20 - x;
#line 74
  seq_printf(seq, "\t[");
#line 75
  i = 1;
#line 75
  goto ldv_40402;
  ldv_40401: 
#line 76
  seq_printf(seq, "=");
#line 75
  i = i + 1;
  ldv_40402: ;
#line 75
  if (i < x) {
#line 76
    goto ldv_40401;
  } else {

  }
#line 77
  seq_printf(seq, ">");
#line 78
  i = 0;
#line 78
  goto ldv_40405;
  ldv_40404: 
#line 79
  seq_printf(seq, ".");
#line 78
  i = i + 1;
  ldv_40405: ;
#line 78
  if (i < y) {
#line 79
    goto ldv_40404;
  } else {

  }
#line 80
  seq_printf(seq, "] ");
#line 82
  seq_printf(seq, "sync\'ed:%3u.%u%% ", res / 10U, res % 10U);
#line 84
  if (mdev->rs_total > 1048576UL) {
#line 85
    seq_printf(seq, "(%lu/%lu)M\n\t", (rs_left >> 10) << 2, (mdev->rs_total >> 10) << 2);
  } else {
#line 89
    seq_printf(seq, "(%lu/%lu)K\n\t", rs_left << 2, mdev->rs_total << 2);
  }
#line 102
  dt = ((unsigned long )jiffies - mdev->rs_mark_time) / 250UL;
#line 104
  if (dt > 20UL) {
#line 107
    seq_printf(seq, "stalled\n");
#line 108
    return;
  } else {

  }
#line 111
  if (dt == 0UL) {
#line 112
    dt = dt + 1UL;
  } else {

  }
#line 113
  db = mdev->rs_mark_left - rs_left;
#line 114
  rt = ((rs_left / (db / 100UL + 1UL)) * dt) / 100UL;
#line 116
  seq_printf(seq, "finish: %lu:%02lu:%02lu", rt / 3600UL, (rt % 3600UL) / 60UL, rt % 60UL);
#line 120
  dbdt = db / dt << 2;
#line 121
  if (dbdt > 1000UL) {
#line 122
    seq_printf(seq, " speed: %ld,%03ld", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 125
    seq_printf(seq, " speed: %ld", dbdt);
  }
#line 129
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 130
  if (dt == 0UL) {
#line 131
    dt = 1UL;
  } else {

  }
#line 132
  db = mdev->rs_total - rs_left;
#line 133
  dbdt = db / dt << 2;
#line 134
  if (dbdt > 1000UL) {
#line 135
    seq_printf(seq, " (%ld,%03ld)", dbdt / 1000UL, dbdt % 1000UL);
  } else {
#line 138
    seq_printf(seq, " (%ld)", dbdt);
  }
#line 140
  seq_printf(seq, " K/sec\n");
#line 141
  return;
}
}
#line 143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static void resync_dump_detail(struct seq_file *seq , struct lc_element *e ) 
{ 
  struct bm_extent *bme ;
  struct lc_element  const  *__mptr ;

  {
#line 145
  __mptr = (struct lc_element  const  *)e;
#line 145
  bme = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 147
  seq_printf(seq, "%5d %s %s\n", bme->rs_left, (char *)"---------", (int )bme->flags & 1 ? (char *)"LOCKED" : (char *)"------");
#line 150
  return;
}
}
#line 153 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_seq_show(struct seq_file *seq , void *v ) 
{ 
  int i ;
  int hole ;
  char const   *sn ;
  struct drbd_conf *mdev ;
  char write_ordering_chars[4U] ;
  char const   *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  unsigned long tmp___9 ;
  int tmp___10 ;

  {
#line 155
  hole = 0;
#line 159
  write_ordering_chars[0] = 110;
#line 159
  write_ordering_chars[1] = 100;
#line 159
  write_ordering_chars[2] = 102;
#line 159
  write_ordering_chars[3] = 98;
#line 166
  tmp = drbd_buildtag();
#line 166
  seq_printf(seq, "version: 8.3.3rc2 (api:%d/proto:%d-%d)\n%s\n", 88, 86, 91, tmp);
#line 189
  i = 0;
#line 189
  goto ldv_40425;
  ldv_40424: 
#line 190
  mdev = minor_to_mdev((unsigned int )i);
#line 191
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 192
    hole = 1;
#line 193
    goto ldv_40423;
  } else {

  }
#line 195
  if (hole != 0) {
#line 196
    hole = 0;
#line 197
    seq_printf(seq, "\n");
  } else {

  }
#line 200
  sn = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 202
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 0U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 205
    seq_printf(seq, "%2d: cs:Unconfigured\n", i);
  } else {
#line 207
    tmp___0 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 207
    tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 207
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 207
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 207
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 207
    tmp___5 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_32167.pdsk);
#line 207
    tmp___6 = drbd_disk_str((enum drbd_disk_state )mdev->state.ldv_32167.disk);
#line 207
    tmp___7 = drbd_role_str((enum drbd_role )mdev->state.ldv_32167.peer);
#line 207
    tmp___8 = drbd_role_str((enum drbd_role )mdev->state.ldv_32167.role);
#line 207
    seq_printf(seq, "%2d: cs:%s ro:%s/%s ds:%s/%s %c %c%c%c%c%c\n    ns:%u nr:%u dw:%u dr:%u al:%u bm:%u lo:%d pe:%d ua:%d ap:%d ep:%d wo:%c",
               i, sn, tmp___8, tmp___7, tmp___6, tmp___5, (unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0) ? (mdev->net_conf)->wire_protocol + 64 : 32,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 115 : 114,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 112 : 45,
               (unsigned int )*((unsigned char *)mdev + 1806UL) != 0U ? 117 : 45,
               (int )mdev->congestion_reason != 0 ? (int )mdev->congestion_reason : 45,
               mdev->send_cnt / 2U, mdev->recv_cnt / 2U, mdev->writ_cnt / 2U, mdev->read_cnt / 2U,
               mdev->al_writ_cnt, mdev->bm_writ_cnt, tmp___4, tmp___2 + tmp___3, tmp___1,
               tmp___0, mdev->epochs, (int )write_ordering_chars[(unsigned int )mdev->write_ordering]);
#line 237
    tmp___9 = drbd_bm_total_weight(mdev);
#line 237
    seq_printf(seq, " oos:%lu\n", tmp___9 << 2);
  }
#line 240
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) {
#line 242
    drbd_syncer_progress(mdev, seq);
  } else {

  }
#line 244
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U) {
#line 245
    seq_printf(seq, "\t%3d%%      %lu/%lu\n", (int )((mdev->rs_total - mdev->ov_left) / (mdev->rs_total / 100UL + 1UL)),
               mdev->rs_total - mdev->ov_left, mdev->rs_total);
  } else {

  }
#line 251
  if (proc_details > 0) {
#line 251
    tmp___10 = _get_ldev_if_state(mdev, D_FAILED);
#line 251
    if (tmp___10 != 0) {
#line 252
      lc_seq_printf_stats(seq, mdev->resync);
#line 253
      lc_seq_printf_stats(seq, mdev->act_log);
#line 254
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 257
  if (proc_details > 1) {
#line 258
    if ((unsigned long )mdev->resync != (unsigned long )((struct lru_cache *)0)) {
#line 259
      lc_seq_dump_details(seq, mdev->resync, (char *)"rs_left", & resync_dump_detail);
    } else {

    }
  } else {

  }
  ldv_40423: 
#line 189
  i = i + 1;
  ldv_40425: ;
#line 189
  if ((unsigned int )i < minor_count) {
#line 190
    goto ldv_40424;
  } else {

  }

#line 265
  return (0);
}
}
#line 268 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
static int drbd_proc_open(struct inode *inode , struct file *file ) 
{ 
  struct proc_dir_entry *tmp ;
  int tmp___0 ;

  {
#line 270
  tmp = PDE((struct inode  const  *)inode);
#line 270
  tmp___0 = single_open(file, & drbd_seq_show, tmp->data);
#line 270
  return (tmp___0);
}
}
#line 291
void ldv_check_final_state(void) ;
#line 294
extern void ldv_check_return_value(int  ) ;
#line 300
extern void ldv_initialize(void) ;
#line 303
extern void ldv_handler_precall(void) ;
#line 306
extern int nondet_int(void) ;
#line 309 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 312 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_proc.c.prepared"
void ldv_main1_sequence_infinite_withcheck_stateful(void) 
{ 
  struct inode *var_group1 ;
  struct file *var_group2 ;
  int res_drbd_proc_open_3 ;
  int ldv_s_drbd_proc_fops_file_operations ;
  int tmp ;
  int tmp___0 ;

  {
#line 344
  ldv_s_drbd_proc_fops_file_operations = 0;
#line 334
  LDV_IN_INTERRUPT = 1;
#line 343
  ldv_initialize();
#line 347
  goto ldv_40456;
  ldv_40455: 
#line 351
  tmp = nondet_int();
#line 351
  switch (tmp) {
  case 0: ;
#line 356
  if (ldv_s_drbd_proc_fops_file_operations == 0) {
#line 361
    ldv_handler_precall();
#line 362
    res_drbd_proc_open_3 = drbd_proc_open(var_group1, var_group2);
#line 363
    ldv_check_return_value(res_drbd_proc_open_3);
#line 364
    if (res_drbd_proc_open_3 != 0) {
#line 365
      goto ldv_module_exit;
    } else {

    }
#line 366
    ldv_s_drbd_proc_fops_file_operations = 0;
  } else {

  }
#line 372
  goto ldv_40453;
  default: ;
#line 373
  goto ldv_40453;
  }
  ldv_40453: ;
  ldv_40456: 
#line 347
  tmp___0 = nondet_int();
#line 347
  if (tmp___0 != 0 || ldv_s_drbd_proc_fops_file_operations != 0) {
#line 349
    goto ldv_40455;
  } else {

  }

  ldv_module_exit: ;
#line 382
  ldv_check_final_state();
#line 385
  return;
}
}
#line 195 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 199
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; bts %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 202
  return (oldbit);
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/bitops.h"
__inline static int test_and_clear_bit(int nr , unsigned long volatile   *addr ) 
{ 
  int oldbit ;

  {
#line 250
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; btr %2,%1\n\tsbb %0,%0": "=r" (oldbit),
                       "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 254
  return (oldbit);
}
}
#line 181 "include/linux/kernel.h"
extern int sprintf(char * , char const   *  , ...) ;
#line 338
extern void dump_stack(void) ;
#line 60 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern int memcmp(void const   * , void const   * , size_t  ) ;
#line 22 "include/linux/err.h"
__inline static void *ERR_PTR(long error ) 
{ 


  {
#line 24
  return ((void *)error);
}
}
#line 28 "include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list ) 
{ 


  {
#line 30
  list->next = list;
#line 31
  list->prev = list;
#line 32
  return;
}
}
#line 51
extern void __list_add(struct list_head * , struct list_head * , struct list_head * ) ;
#line 64 "include/linux/list.h"
__inline static void list_add(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 66
  __list_add(new, head, head->next);
#line 67
  return;
}
}
#line 78 "include/linux/list.h"
__inline static void list_add_tail(struct list_head *new , struct list_head *head ) 
{ 


  {
#line 80
  __list_add(new, head->prev, head);
#line 81
  return;
}
}
#line 90 "include/linux/list.h"
__inline static void __list_del(struct list_head *prev , struct list_head *next ) 
{ 


  {
#line 92
  next->prev = prev;
#line 93
  prev->next = next;
#line 94
  return;
}
}
#line 110
extern void list_del(struct list_head * ) ;
#line 140 "include/linux/list.h"
__inline static void list_del_init(struct list_head *entry ) 
{ 


  {
#line 142
  __list_del(entry->prev, entry->next);
#line 143
  INIT_LIST_HEAD(entry);
#line 144
  return;
}
}
#line 184 "include/linux/list.h"
__inline static int list_empty(struct list_head  const  *head ) 
{ 


  {
#line 186
  return ((unsigned long )((struct list_head  const  *)head->next) == (unsigned long )head);
}
}
#line 257 "include/linux/list.h"
__inline static void __list_splice(struct list_head  const  *list , struct list_head *prev ,
                                   struct list_head *next ) 
{ 
  struct list_head *first ;
  struct list_head *last ;

  {
#line 261
  first = list->next;
#line 262
  last = list->prev;
#line 264
  first->prev = prev;
#line 265
  prev->next = first;
#line 267
  last->next = next;
#line 268
  next->prev = last;
#line 269
  return;
}
}
#line 302 "include/linux/list.h"
__inline static void list_splice_init(struct list_head *list , struct list_head *head ) 
{ 
  int tmp ;

  {
#line 305
  tmp = list_empty((struct list_head  const  *)list);
#line 305
  if (tmp == 0) {
#line 306
    __list_splice((struct list_head  const  *)list, head, head->next);
#line 307
    INIT_LIST_HEAD(list);
  } else {

  }
#line 309
  return;
}
}
#line 104 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_dec(atomic_t *v ) 
{ 


  {
#line 106
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; decl %0": "=m" (v->counter): "m" (v->counter));
#line 109
  return;
}
}
#line 34 "include/linux/spinlock_api_smp.h"
extern void _write_lock_irq(rwlock_t * ) ;
#line 55
extern void _write_unlock_irq(rwlock_t * ) ;
#line 164 "include/linux/timer.h"
extern int mod_timer(struct timer_list * , unsigned long  ) ;
#line 89 "include/linux/completion.h"
extern void complete(struct completion * ) ;
#line 53 "include/linux/random.h"
extern void get_random_bytes(void * , int  ) ;
#line 43 "include/linux/semaphore.h"
extern int down_interruptible(struct semaphore * ) ;
#line 350 "include/linux/page-flags.h"
__inline static int PageTail(struct page *page ) 
{ 
  int tmp ;

  {
#line 350
  tmp = constant_test_bit(15U, (unsigned long const volatile   *)(& page->flags));
#line 350
  return (tmp);
}
}
#line 297 "include/linux/mm.h"
__inline static struct page *compound_head(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 299
  tmp = PageTail(page);
#line 299
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 299
  if (tmp___0 != 0L) {
#line 300
    return (page->ldv_12035.first_page);
  } else {

  }
#line 301
  return (page);
}
}
#line 304 "include/linux/mm.h"
__inline static int page_count(struct page *page ) 
{ 
  struct page *tmp ;
  int tmp___0 ;

  {
#line 306
  tmp = compound_head(page);
#line 306
  tmp___0 = atomic_read((atomic_t const   *)(& tmp->_count));
#line 306
  return (tmp___0);
}
}
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_16344: ;
#line 63
    goto ldv_16344;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_16345: ;
#line 65
    goto ldv_16345;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_16346: ;
#line 66
    goto ldv_16346;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page(struct scatterlist *sg , struct page *page , unsigned int len ,
                                 unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 204
extern void sg_init_table(struct scatterlist * , unsigned int  ) ;
#line 348 "include/linux/sched.h"
extern long schedule_timeout(long  ) ;
#line 2031
extern void flush_signals(struct task_struct * ) ;
#line 2064
extern void force_sig(int  , struct task_struct * ) ;
#line 952 "include/net/sock.h"
extern int sock_setsockopt(struct socket * , int  , int  , char * , unsigned int  ) ;
#line 1160 "include/linux/crypto.h"
__inline static struct crypto_tfm *crypto_hash_tfm(struct crypto_hash *tfm ) 
{ 


  {
#line 1162
  return (& tfm->base);
}
}
#line 1180 "include/linux/crypto.h"
__inline static struct hash_tfm *crypto_hash_crt(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1182
  tmp = crypto_hash_tfm(tfm);
#line 1182
  return (& tmp->crt_u.hash);
}
}
#line 1195 "include/linux/crypto.h"
__inline static unsigned int crypto_hash_digestsize(struct crypto_hash *tfm ) 
{ 
  struct hash_tfm *tmp ;

  {
#line 1197
  tmp = crypto_hash_crt(tfm);
#line 1197
  return (tmp->digestsize);
}
}
#line 1215 "include/linux/crypto.h"
__inline static int crypto_hash_init(struct hash_desc *desc ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1217
  tmp = crypto_hash_crt(desc->tfm);
#line 1217
  tmp___0 = (*(tmp->init))(desc);
#line 1217
  return (tmp___0);
}
}
#line 1220 "include/linux/crypto.h"
__inline static int crypto_hash_update(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1224
  tmp = crypto_hash_crt(desc->tfm);
#line 1224
  tmp___0 = (*(tmp->update))(desc, sg, nbytes);
#line 1224
  return (tmp___0);
}
}
#line 1227 "include/linux/crypto.h"
__inline static int crypto_hash_final(struct hash_desc *desc , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1229
  tmp = crypto_hash_crt(desc->tfm);
#line 1229
  tmp___0 = (*(tmp->final))(desc, out);
#line 1229
  return (tmp___0);
}
}
#line 34 "include/linux/mempool.h"
extern void mempool_free(void * , mempool_t * ) ;
#line 186 "include/linux/bio.h"
__inline static bool bio_rw_flagged(struct bio *bio , enum bio_rw_flags flag ) 
{ 


  {
#line 188
  return ((bio->bi_rw & (unsigned long )(1 << (int )flag)) != 0UL);
}
}
#line 755 "include/linux/blkdev.h"
extern void generic_make_request(struct bio * ) ;
#line 1046 "include/linux/blkdev.h"
__inline static unsigned int queue_max_segment_size(struct request_queue *q ) 
{ 


  {
#line 1048
  return (q->limits.max_segment_size);
}
}
#line 620 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_thread_state get_t_state(struct drbd_thread *thi ) 
{ 


  {
#line 626
  __asm__  volatile   ("": : : "memory");
#line 627
  return (thi->t_state);
}
}
#line 1030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static unsigned int mdev_to_minor(struct drbd_conf *mdev ) 
{ 


  {
#line 1032
  return (mdev->minor);
}
}
#line 1043 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_data_sock(struct drbd_conf *mdev ) 
{ 
  long tmp ;

  {
#line 1045
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1048
  tmp = __builtin_expect((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0),
                         0L);
#line 1048
  if (tmp != 0L) {
#line 1049
    mutex_unlock(& mdev->data.mutex);
#line 1050
    return (0);
  } else {

  }
#line 1052
  return (1);
}
}
#line 1055 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_put_data_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 1057
  mutex_unlock(& mdev->data.mutex);
#line 1058
  return;
}
}
#line 1077
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 1086
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) ;
#line 1088
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) ;
#line 1105
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) ;
#line 1109
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) ;
#line 1114
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) ;
#line 1122
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1128
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) ;
#line 1130
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) ;
#line 1132
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) ;
#line 1135
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) ;
#line 1137
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) ;
#line 1141
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1147
void drbd_mdev_cleanup(struct drbd_conf *mdev ) ;
#line 1150
void drbd_md_sync(struct drbd_conf *mdev ) ;
#line 1153
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1154
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) ;
#line 1157
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) ;
#line 1162
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) ;
#line 1348
mempool_t *drbd_request_mempool ;
#line 1356 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
rwlock_t global_state_lock  ;
#line 1383
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) ;
#line 1386
int drbd_worker(struct drbd_thread *thi ) ;
#line 1387
int drbd_alter_sa(struct drbd_conf *mdev , int na ) ;
#line 1388
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) ;
#line 1389
void resume_next_sg(struct drbd_conf *mdev ) ;
#line 1390
void suspend_other_sg(struct drbd_conf *mdev ) ;
#line 1391
int drbd_resync_finished(struct drbd_conf *mdev ) ;
#line 1395
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1397 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void ov_oos_print(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1399
  if (mdev->ov_last_oos_size != 0UL) {
#line 1400
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1400
    printk("<3>%s %s: Out of sync: start=%llu, size=%lu (sectors)\n", tmp___0, tmp,
           (unsigned long long )mdev->ov_last_oos_start, mdev->ov_last_oos_size);
  } else {

  }
#line 1404
  mdev->ov_last_oos_size = 0UL;
#line 1405
  return;
}
}
#line 1408
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) ;
#line 1411
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1412
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1413
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1414
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1415
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1416
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1417
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1418
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1420
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1421
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1422
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1423
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1424
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1425
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1426
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1427
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 1429
void resync_timer_fn(unsigned long data ) ;
#line 1433
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) ;
#line 1438
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) ;
#line 1449 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_setsockopt(struct socket *sock , int level , int optname ,
                                    char *optval , int optlen ) 
{ 
  int err ;

  {
#line 1453
  if (level == 1) {
#line 1454
    err = sock_setsockopt(sock, level, optname, optval, (unsigned int )optlen);
  } else {
#line 1456
    err = (*((sock->ops)->setsockopt))(sock, level, optname, optval, (unsigned int )optlen);
  }
#line 1458
  return (err);
}
}
#line 1461 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_cork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1463
  val = 1;
#line 1464
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1466
  return;
}
}
#line 1468 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_uncork(struct socket *sock ) 
{ 
  int val ;

  {
#line 1470
  val = 0;
#line 1471
  drbd_setsockopt(sock, 6, 3, (char *)(& val), 4);
#line 1473
  return;
}
}
#line 1489
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) ;
#line 1499
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1500
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1502
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1503
void drbd_rs_cancel_all(struct drbd_conf *mdev ) ;
#line 1504
int drbd_rs_del_all(struct drbd_conf *mdev ) ;
#line 1505
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) ;
#line 1508
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) ;
#line 1512
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) ;
#line 1587 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1589
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp == 0) {
#line 1589
    goto ldv_40708;
  } else {

  }
#line 1589
  tmp___0 = get_current();
#line 1589
  __wait.flags = 0U;
#line 1589
  __wait.private = (void *)tmp___0;
#line 1589
  __wait.func = & autoremove_wake_function;
#line 1589
  __wait.task_list.next = & __wait.task_list;
#line 1589
  __wait.task_list.prev = & __wait.task_list;
  ldv_40711: 
#line 1589
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1589
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp___1 == 0) {
#line 1589
    goto ldv_40710;
  } else {

  }
#line 1589
  schedule();
#line 1589
  goto ldv_40711;
  ldv_40710: 
#line 1589
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_40708: ;
#line 1592
  return;
}
}
#line 1593 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_unlock(struct drbd_conf *mdev ) 
{ 


  {
#line 1595
  clear_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1596
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1597
  return;
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____0(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = printk_ratelimit();
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40733;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32167.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32167.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40733;
  }
  ldv_40733: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____0(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;

  {
#line 1664
  if (error != 0) {
#line 1666
    flags = _spin_lock_irqsave(& mdev->req_lock);
#line 1667
    __drbd_chk_io_error____0(mdev, forcedetach, where);
#line 1668
    _spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1709 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_capacity(struct block_device *bdev ) 
{ 


  {
#line 1712
  return ((unsigned long )bdev != (unsigned long )((struct block_device *)0) ? (sector_t )((bdev->bd_inode)->i_size >> 9) : 0UL);
}
}
#line 1798 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;

  {
#line 1801
  flags = _spin_lock_irqsave(& q->q_lock);
#line 1802
  list_add_tail(& w->list, & q->q);
#line 1803
  up(& q->s);
#line 1805
  _spin_unlock_irqrestore(& q->q_lock, flags);
#line 1806
  return;
}
}
#line 1808 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void wake_asender(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1810
  tmp = constant_test_bit(1U, (unsigned long const volatile   *)(& mdev->flags));
#line 1810
  if (tmp != 0) {
#line 1811
    force_sig(24, mdev->asender.task);
  } else {

  }
#line 1812
  return;
}
}
#line 1814 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void request_ping(struct drbd_conf *mdev ) 
{ 


  {
#line 1816
  set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 1817
  wake_asender(mdev);
#line 1818
  return;
}
}
#line 1820 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_short_cmd(struct drbd_conf *mdev , enum drbd_packets cmd ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1824
  tmp = drbd_send_cmd(mdev, 1, cmd, & h, 8UL);
#line 1824
  return (tmp);
}
}
#line 1839 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop(struct drbd_thread *thi ) 
{ 


  {
#line 1841
  _drbd_thread_stop(thi, 0, 1);
#line 1842
  return;
}
}
#line 1899 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_rs_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1901
  atomic_inc(& mdev->rs_pending_cnt);
#line 1902
  return;
}
}
#line 2230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_kick_lo(struct drbd_conf *mdev ) 
{ 
  struct request_queue *tmp ;
  int tmp___0 ;

  {
#line 2232
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2232
  if (tmp___0 != 0) {
#line 2233
    tmp = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2233
    drbd_blk_run_queue(tmp);
#line 2234
    put_ldev(mdev);
  } else {

  }
#line 2236
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_40991;
  ldv_40990: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_40991: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_40990;
  } else {

  }

#line 31
  return (0);
}
}
#line 35
void drbd_md_io_complete(struct bio *bio , int error ) ;
#line 36
void drbd_endio_read_sec(struct bio *bio , int error ) ;
#line 37
void drbd_endio_write_sec(struct bio *bio , int error ) ;
#line 38
void drbd_endio_pri(struct bio *bio , int error ) ;
#line 43 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_generic_make_request(struct drbd_conf *mdev , int fault_type ,
                                               struct bio *bio ) 
{ 
  unsigned int tmp ;
  int tmp___0 ;

  {
#line 47
  if ((unsigned long )bio->bi_bdev == (unsigned long )((struct block_device *)0)) {
#line 48
    tmp = mdev_to_minor(mdev);
#line 48
    printk("<3>drbd%d: drbd_generic_make_request: bio->bi_bdev == NULL\n", tmp);
#line 51
    dump_stack();
#line 52
    bio_endio(bio, -19);
#line 53
    return;
  } else {

  }
#line 56
  tmp___0 = drbd_insert_fault(mdev, (unsigned int )fault_type);
#line 56
  if (tmp___0 != 0) {
#line 57
    bio_endio(bio, -5);
  } else {
#line 59
    generic_make_request(bio);
  }
#line 60
  return;
}
}
#line 274 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void drbd_req_free(struct drbd_request *req ) 
{ 


  {
#line 276
  mempool_free((void *)req, drbd_request_mempool);
#line 277
  return;
}
}
#line 294
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) ;
#line 296
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) ;
#line 301 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void _req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 303
  mdev = req->mdev;
#line 307
  __req_mod(req, what, & m);
#line 308
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 309
    complete_master_bio(mdev, & m);
  } else {

  }
#line 310
  return;
}
}
#line 314 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static void req_mod(struct drbd_request *req , enum drbd_req_event what ) 
{ 
  struct drbd_conf *mdev ;
  struct bio_and_error m ;

  {
#line 317
  mdev = req->mdev;
#line 319
  _spin_lock_irq(& mdev->req_lock);
#line 320
  __req_mod(req, what, & m);
#line 321
  _spin_unlock_irq(& mdev->req_lock);
#line 323
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 324
    complete_master_bio(mdev, & m);
  } else {

  }
#line 325
  return;
}
}
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 84 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_md_io_complete(struct bio *bio , int error ) 
{ 
  struct drbd_md_io *md_io ;

  {
#line 88
  md_io = (struct drbd_md_io *)bio->bi_private;
#line 89
  md_io->error = error;
#line 91
  complete(& md_io->event);
#line 92
  return;
}
}
#line 97 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_read_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 99
  flags = 0UL;
#line 100
  e = 0;
#line 102
  uptodate = (int )bio->bi_flags & 1;
#line 104
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 105
  mdev = e->mdev;
#line 107
  if (error != 0) {
#line 108
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 108
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 108
    printk("<4>%s %s: read: error=%d s=%llus\n", tmp___0, tmp, error, (unsigned long long )e->sector);
  } else {

  }
#line 110
  if (error == 0 && uptodate == 0) {
#line 111
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 111
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 111
    printk("<4>%s %s: read: setting error to -EIO s=%llus\n", tmp___2, tmp___1, (unsigned long long )e->sector);
#line 116
    error = -5;
  } else {

  }
#line 119
  if (e->block_id == 0ULL) {
#line 119
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 119
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 119
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           119);
  } else {

  }
#line 121
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 122
  mdev->read_cnt = mdev->read_cnt + (e->size >> 9);
#line 123
  list_del(& e->w.list);
#line 124
  tmp___5 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 124
  if (tmp___5 != 0) {
#line 125
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 126
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 128
  drbd_chk_io_error____0(mdev, error, 0, "drbd_endio_read_sec");
#line 129
  drbd_queue_work(& mdev->data.work, & e->w);
#line 130
  put_ldev(mdev);
#line 131
  return;
}
}
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_write_sec(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_epoch_entry *e ;
  struct drbd_conf *mdev ;
  sector_t e_sector ;
  int do_wake ;
  int is_syncer_req ;
  int do_al_complete_io ;
  int uptodate ;
  int is_barrier ;
  bool tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;

  {
#line 138
  flags = 0UL;
#line 139
  e = 0;
#line 145
  uptodate = (int )bio->bi_flags & 1;
#line 146
  tmp = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 146
  is_barrier = (int )tmp;
#line 148
  e = (struct drbd_epoch_entry *)bio->bi_private;
#line 149
  mdev = e->mdev;
#line 151
  if (error != 0) {
#line 152
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 152
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 152
    printk("<4>%s %s: write: error=%d s=%llus\n", tmp___1, tmp___0, error, (unsigned long long )e->sector);
  } else {

  }
#line 154
  if (error == 0 && uptodate == 0) {
#line 155
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 155
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 155
    printk("<4>%s %s: write: setting error to -EIO s=%llus\n", tmp___3, tmp___2, (unsigned long long )e->sector);
#line 160
    error = -5;
  } else {

  }
#line 165
  if ((error != 0 && is_barrier != 0) && (e->flags & 8U) != 0U) {
#line 166
    drbd_bump_write_ordering(mdev, WO_bdev_flush);
#line 167
    flags = _spin_lock_irqsave(& mdev->req_lock);
#line 168
    list_del(& e->w.list);
#line 169
    e->w.cb = & w_e_reissue;
#line 172
    _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 173
    drbd_queue_work(& mdev->data.work, & e->w);
#line 174
    return;
  } else {

  }
#line 177
  if (e->block_id == 0ULL) {
#line 177
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 177
    printk("<3>%s %s: ASSERT( e->block_id != ID_VACANT ) in %s:%d\n", tmp___5, tmp___4,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           177);
  } else {

  }
#line 179
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 180
  mdev->writ_cnt = mdev->writ_cnt + (e->size >> 9);
#line 181
  is_syncer_req = e->block_id == 0xffffffffffffffffULL;
#line 187
  e_sector = e->sector;
#line 188
  do_al_complete_io = (int )e->flags & 1;
#line 190
  list_del(& e->w.list);
#line 191
  list_add_tail(& e->w.list, & mdev->done_ee);
#line 198
  if (is_syncer_req != 0) {
#line 198
    tmp___6 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 198
    do_wake = tmp___6;
  } else {
#line 198
    tmp___7 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 198
    do_wake = tmp___7;
  }
#line 202
  if (error != 0) {
#line 203
    __drbd_chk_io_error____0(mdev, 0, "drbd_endio_write_sec");
  } else {

  }
#line 204
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 206
  if (is_syncer_req != 0) {
#line 207
    drbd_rs_complete_io(mdev, e_sector);
  } else {

  }
#line 209
  if (do_wake != 0) {
#line 210
    __wake_up(& mdev->ee_wait, 3U, 1, 0);
  } else {

  }
#line 212
  if (do_al_complete_io != 0) {
#line 213
    drbd_al_complete_io(mdev, e_sector);
  } else {

  }
#line 215
  wake_asender(mdev);
#line 216
  put_ldev(mdev);
#line 217
  return;
}
}
#line 222 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_endio_pri(struct bio *bio , int error ) 
{ 
  unsigned long flags ;
  struct drbd_request *req ;
  struct drbd_conf *mdev ;
  struct bio_and_error m ;
  enum drbd_req_event what ;
  int uptodate ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  void *tmp___4 ;

  {
#line 225
  req = (struct drbd_request *)bio->bi_private;
#line 226
  mdev = req->mdev;
#line 229
  uptodate = (int )bio->bi_flags & 1;
#line 231
  if (error != 0) {
#line 232
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 232
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 232
    printk("<4>%s %s: p %s: error=%d\n", tmp___0, tmp, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read",
           error);
  } else {

  }
#line 234
  if (error == 0 && uptodate == 0) {
#line 235
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 235
    printk("<4>%s %s: p %s: setting error to -EIO\n", tmp___2, tmp___1, (int )bio->bi_rw & 1 ? (char *)"write" : (char *)"read");
#line 240
    error = -5;
  } else {

  }
#line 244
  tmp___3 = __builtin_expect(error != 0, 0L);
#line 244
  if (tmp___3 != 0L) {
#line 245
    what = (int )bio->bi_rw & 1 ? write_completed_with_error : ((bio->bi_rw & 3UL) == 2UL ? read_completed_with_error : read_ahead_completed_with_error);
  } else {
#line 251
    what = completed_ok;
  }
#line 253
  bio_put(req->private_bio);
#line 254
  tmp___4 = ERR_PTR((long )error);
#line 254
  req->private_bio = (struct bio *)tmp___4;
#line 256
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 257
  __req_mod(req, what, & m);
#line 258
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 260
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 261
    complete_master_bio(mdev, & m);
  } else {

  }
#line 262
  return;
}
}
#line 264 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_io_error(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;

  {
#line 266
  __mptr = (struct drbd_work  const  *)w;
#line 266
  req = (struct drbd_request *)__mptr;
#line 273
  drbd_req_free(req);
#line 275
  return (1);
}
}
#line 278 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_read_retry_remote(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 280
  __mptr = (struct drbd_work  const  *)w;
#line 280
  req = (struct drbd_request *)__mptr;
#line 286
  _spin_lock_irq(& mdev->req_lock);
#line 287
  if ((cancel != 0 || (int )mdev->state.ldv_32167.conn <= 9) || (int )mdev->state.ldv_32167.pdsk <= 4) {
#line 290
    _req_mod(req, send_canceled);
#line 291
    _spin_unlock_irq(& mdev->req_lock);
#line 292
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
    printk("<1>%s %s: WE ARE LOST. Local IO failure, no peer.\n", tmp___0, tmp);
#line 293
    return (1);
  } else {

  }
#line 295
  _spin_unlock_irq(& mdev->req_lock);
#line 297
  tmp___1 = w_send_read_req(mdev, w, 0);
#line 297
  return (tmp___1);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_resync_inactive(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 302
  _b = cancel != 0;
#line 302
  if (_b != 0) {
#line 302
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 302
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 302
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "w_resync_inactive", (char *)"cancel",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           302);
  } else {

  }
#line 302
  if (_b != 0) {
#line 302
    return (1);
  } else {

  }
#line 303
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 303
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 303
  printk("<3>%s %s: resync inactive, but callback triggered??\n", tmp___2, tmp___1);
#line 304
  return (1);
}
}
#line 307 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_csum(struct drbd_conf *mdev , struct crypto_hash *tfm , struct bio *bio ,
               void *digest ) 
{ 
  struct hash_desc desc ;
  struct scatterlist sg ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 314
  desc.tfm = tfm;
#line 315
  desc.flags = 0U;
#line 317
  sg_init_table(& sg, 1U);
#line 318
  crypto_hash_init(& desc);
#line 320
  bvec = bio->bi_io_vec;
#line 320
  i = 0;
#line 320
  goto ldv_41221;
  ldv_41220: 
#line 321
  sg_set_page(& sg, bvec->bv_page, bvec->bv_len, bvec->bv_offset);
#line 322
  crypto_hash_update(& desc, & sg, sg.length);
#line 320
  bvec = bvec + 1;
#line 320
  i = i + 1;
  ldv_41221: ;
#line 320
  if ((int )bio->bi_vcnt > i) {
#line 321
    goto ldv_41220;
  } else {

  }
#line 324
  crypto_hash_final(& desc, (u8 *)digest);
#line 325
  return;
}
}
#line 327 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_e_send_csum(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  unsigned int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;

  {
#line 329
  __mptr = (struct drbd_work  const  *)w;
#line 329
  e = (struct drbd_epoch_entry *)__mptr;
#line 334
  if (e->block_id != 2205466966ULL) {
#line 334
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 334
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 334
    printk("<3>%s %s: ASSERT( e->block_id == DRBD_MAGIC + 0xbeef ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           334);
  } else {

  }
#line 336
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 336
  if (tmp___1 != 0L) {
#line 337
    drbd_free_ee(mdev, e);
#line 338
    return (1);
  } else {

  }
#line 341
  tmp___5 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 341
  if (tmp___5 != 0L) {
#line 342
    tmp___2 = crypto_hash_digestsize(mdev->csums_tfm);
#line 342
    digest_size = (int )tmp___2;
#line 343
    digest = kmalloc((size_t )digest_size, 16U);
#line 344
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 345
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 347
      inc_rs_pending(mdev);
#line 348
      ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                   P_CSUM_RS_REQUEST);
#line 354
      kfree((void const   *)digest);
    } else {
#line 356
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
      printk("<3>%s %s: kmalloc() of digest failed.\n", tmp___4, tmp___3);
#line 357
      ok = 0;
    }
  } else {
#line 360
    ok = 1;
  }
#line 362
  drbd_free_ee(mdev, e);
#line 364
  tmp___8 = __builtin_expect(ok == 0, 0L);
#line 364
  if (tmp___8 != 0L) {
#line 365
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 365
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 365
    printk("<3>%s %s: drbd_send_drequest(..., csum) failed\n", tmp___7, tmp___6);
  } else {

  }
#line 366
  return (ok);
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int read_for_csum(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;

  {
#line 375
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 375
  if (tmp == 0) {
#line 376
    return (0);
  } else {

  }
#line 380
  e = drbd_alloc_ee(mdev, 2205466966ULL, sector, (unsigned int )size, 514U);
#line 381
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 382
    put_ldev(mdev);
#line 383
    return (2);
  } else {

  }
#line 386
  _spin_lock_irq(& mdev->req_lock);
#line 387
  list_add(& e->w.list, & mdev->read_ee);
#line 388
  _spin_unlock_irq(& mdev->req_lock);
#line 390
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 391
  (e->private_bio)->bi_rw = 0UL;
#line 392
  e->w.cb = & w_e_send_csum;
#line 394
  mdev->read_cnt = mdev->read_cnt + (unsigned int )(size >> 9);
#line 395
  drbd_generic_make_request(mdev, 3, e->private_bio);
#line 397
  return (1);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resync_timer_fn(unsigned long data ) 
{ 
  unsigned long flags ;
  struct drbd_conf *mdev ;
  int queue ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;

  {
#line 403
  mdev = (struct drbd_conf *)data;
#line 406
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 408
  tmp = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 408
  tmp___0 = __builtin_expect(tmp == 0, 1L);
#line 408
  if (tmp___0 != 0L) {
#line 409
    queue = 1;
#line 410
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 288U) {
#line 411
      mdev->resync_work.cb = & w_make_ov_request;
    } else {
#line 413
      mdev->resync_work.cb = & w_make_resync_request;
    }
  } else {
#line 415
    queue = 0;
#line 416
    mdev->resync_work.cb = & w_resync_inactive;
  }
#line 419
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 422
  tmp___1 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 422
  if (tmp___1 != 0 && queue != 0) {
#line 423
    drbd_queue_work(& mdev->data.work, & mdev->resync_work);
  } else {

  }
#line 424
  return;
}
}
#line 426 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_make_resync_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  unsigned long bit ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  int max_segment_size ;
  unsigned int tmp___0 ;
  int number ;
  int i ;
  int size ;
  int pe ;
  int mx ;
  int align ;
  int queued ;
  int sndbuf ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  long tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned long tmp___23 ;

  {
#line 431
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 431
  capacity = tmp;
#line 432
  tmp___0 = queue_max_segment_size(mdev->rq_queue);
#line 432
  max_segment_size = (int )tmp___0;
#line 436
  tmp___1 = __builtin_expect(cancel != 0, 0L);
#line 436
  if (tmp___1 != 0L) {
#line 437
    return (1);
  } else {

  }
#line 439
  tmp___4 = __builtin_expect((int )mdev->state.ldv_32167.conn <= 9, 0L);
#line 439
  if (tmp___4 != 0L) {
#line 440
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 440
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 440
    printk("<3>%s %s: Confused in w_make_resync_request()! cstate < Connected", tmp___3,
           tmp___2);
#line 441
    return (0);
  } else {

  }
#line 444
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 272U) {
#line 445
    tmp___5 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 445
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 445
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 445
    printk("<3>%s %s: %s in w_make_resync_request\n", tmp___7, tmp___6, tmp___5);
  } else {

  }
#line 448
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 448
  if (tmp___10 == 0) {
#line 453
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 453
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 453
    printk("<3>%s %s: Disk broke down during resync!\n", tmp___9, tmp___8);
#line 454
    mdev->resync_work.cb = & w_resync_inactive;
#line 455
    return (1);
  } else {

  }
#line 458
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 459
  pe = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 461
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 462
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 463
    mx = (int )((unsigned long )((mdev->data.socket)->sk)->sk_rcvbuf / 32UL);
  } else {
#line 465
    mx = 1;
  }
#line 466
  mutex_unlock(& mdev->data.mutex);
#line 469
  if (number > mx) {
#line 470
    mx = number;
  } else {

  }
#line 473
  if (pe + number > mx) {
#line 474
    number = mx - pe;
  } else {

  }
#line 477
  i = 0;
#line 477
  goto ldv_41280;
  ldv_41279: 
#line 479
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 480
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 481
    queued = ((mdev->data.socket)->sk)->sk_wmem_queued;
#line 482
    sndbuf = ((mdev->data.socket)->sk)->sk_sndbuf;
  } else {
#line 484
    queued = 1;
#line 485
    sndbuf = 0;
  }
#line 487
  mutex_unlock(& mdev->data.mutex);
#line 488
  if (sndbuf / 2 < queued) {
#line 489
    goto requeue;
  } else {

  }
  next_sector: 
#line 492
  size = 4096;
#line 493
  bit = drbd_bm_find_next(mdev, mdev->bm_resync_fo);
#line 495
  if (bit == 0xffffffffffffffffUL) {
#line 496
    mdev->bm_resync_fo = drbd_bm_bits(mdev);
#line 497
    mdev->resync_work.cb = & w_resync_inactive;
#line 498
    put_ldev(mdev);
#line 499
    return (1);
  } else {

  }
#line 502
  sector = bit << 3;
#line 504
  tmp___11 = drbd_try_rs_begin_io(mdev, sector);
#line 504
  if (tmp___11 != 0) {
#line 505
    mdev->bm_resync_fo = bit;
#line 506
    goto requeue;
  } else {

  }
#line 508
  mdev->bm_resync_fo = bit + 1UL;
#line 510
  tmp___12 = drbd_bm_test_bit(mdev, bit);
#line 510
  tmp___13 = __builtin_expect(tmp___12 == 0, 0L);
#line 510
  if (tmp___13 != 0L) {
#line 511
    drbd_rs_complete_io(mdev, sector);
#line 512
    goto next_sector;
  } else {

  }
#line 528
  align = 1;
  ldv_41272: ;
#line 530
  if (size + 4096 > max_segment_size) {
#line 531
    goto ldv_41271;
  } else {

  }
#line 534
  if (((sector_t )((1 << (align + 3)) + -1) & sector) != 0UL) {
#line 535
    goto ldv_41271;
  } else {

  }
#line 538
  if (((bit + 1UL) & 4095UL) == 0UL) {
#line 539
    goto ldv_41271;
  } else {

  }
#line 545
  tmp___14 = drbd_bm_test_bit(mdev, bit + 1UL);
#line 545
  if (tmp___14 != 1) {
#line 546
    goto ldv_41271;
  } else {

  }
#line 547
  bit = bit + 1UL;
#line 548
  size = size + 4096;
#line 549
  if (4096 << align <= size) {
#line 550
    align = align + 1;
  } else {

  }
#line 551
  i = i + 1;
#line 552
  goto ldv_41272;
  ldv_41271: ;
#line 555
  if (size > 4096) {
#line 556
    mdev->bm_resync_fo = bit + 1UL;
  } else {

  }
#line 560
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 561
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 562
  if (mdev->agreed_pro_version > 88 && (unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 563
    tmp___15 = read_for_csum(mdev, sector, size);
#line 563
    switch (tmp___15) {
    case 0: 
#line 565
    put_ldev(mdev);
#line 566
    return (0);
    case 2: 
#line 568
    drbd_rs_complete_io(mdev, sector);
#line 569
    mdev->bm_resync_fo = sector >> 3;
#line 570
    goto requeue;
    }
  } else {
#line 574
    inc_rs_pending(mdev);
#line 575
    tmp___22 = drbd_send_drequest(mdev, 9, sector, size, 0xffffffffffffffffULL);
#line 575
    if (tmp___22 == 0) {
#line 577
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 577
      printk("<3>%s %s: drbd_send_drequest() failed, aborting...\n", tmp___17, tmp___16);
#line 578
      atomic_dec(& mdev->rs_pending_cnt);
#line 578
      tmp___21 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 578
      if (tmp___21 < 0) {
#line 578
        tmp___18 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 578
        tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
        tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 578
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
               "w_make_resync_request", 578, tmp___18);
      } else {

      }
#line 579
      put_ldev(mdev);
#line 580
      return (0);
    } else {

    }
  }
#line 477
  i = i + 1;
  ldv_41280: ;
#line 477
  if (i < number) {
#line 478
    goto ldv_41279;
  } else {

  }
#line 585
  tmp___23 = drbd_bm_bits(mdev);
#line 585
  if (mdev->bm_resync_fo >= tmp___23) {
#line 592
    mdev->resync_work.cb = & w_resync_inactive;
#line 593
    put_ldev(mdev);
#line 594
    return (1);
  } else {

  }
  requeue: 
#line 598
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 599
  put_ldev(mdev);
#line 600
  return (1);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_make_ov_request(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int number ;
  int i ;
  int size ;
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  long tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;

  {
#line 607
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 607
  capacity = tmp;
#line 609
  tmp___0 = __builtin_expect(cancel != 0, 0L);
#line 609
  if (tmp___0 != 0L) {
#line 610
    return (1);
  } else {

  }
#line 612
  tmp___3 = __builtin_expect((int )mdev->state.ldv_32167.conn <= 9, 0L);
#line 612
  if (tmp___3 != 0L) {
#line 613
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 613
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 613
    printk("<3>%s %s: Confused in w_make_ov_request()! cstate < Connected", tmp___2,
           tmp___1);
#line 614
    return (0);
  } else {

  }
#line 617
  number = (mdev->sync_conf.rate * 25) / 1000;
#line 618
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 618
  if (tmp___4 > number) {
#line 619
    goto requeue;
  } else {

  }
#line 621
  tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 621
  number = number - tmp___5;
#line 623
  sector = mdev->ov_position;
#line 624
  i = 0;
#line 624
  goto ldv_41298;
  ldv_41297: ;
#line 625
  if (sector >= capacity) {
#line 626
    mdev->resync_work.cb = & w_resync_inactive;
#line 627
    return (1);
  } else {

  }
#line 630
  size = 4096;
#line 632
  tmp___6 = drbd_try_rs_begin_io(mdev, sector);
#line 632
  if (tmp___6 != 0) {
#line 633
    mdev->ov_position = sector;
#line 634
    goto requeue;
  } else {

  }
#line 637
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 638
    size = (int )((capacity - sector) << 9);
  } else {

  }
#line 640
  inc_rs_pending(mdev);
#line 641
  tmp___11 = drbd_send_ov_request(mdev, sector, size);
#line 641
  if (tmp___11 == 0) {
#line 642
    atomic_dec(& mdev->rs_pending_cnt);
#line 642
    tmp___10 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 642
    if (tmp___10 < 0) {
#line 642
      tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 642
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 642
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 642
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___9, tmp___8,
             "w_make_ov_request", 642, tmp___7);
    } else {

    }
#line 643
    return (0);
  } else {

  }
#line 645
  sector = sector + 8UL;
#line 624
  i = i + 1;
  ldv_41298: ;
#line 624
  if (i < number) {
#line 625
    goto ldv_41297;
  } else {

  }
#line 647
  mdev->ov_position = sector;
  requeue: 
#line 650
  mod_timer(& mdev->resync_timer, (unsigned long )jiffies + 25UL);
#line 651
  return (1);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_ov_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 657
  kfree((void const   *)w);
#line 658
  ov_oos_print(mdev);
#line 659
  drbd_resync_finished(mdev);
#line 661
  return (1);
}
}
#line 664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int w_resync_finished(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 


  {
#line 666
  kfree((void const   *)w);
#line 668
  drbd_resync_finished(mdev);
#line 670
  return (1);
}
}
#line 673 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_resync_finished(struct drbd_conf *mdev ) 
{ 
  unsigned long db ;
  unsigned long dt ;
  unsigned long dbdt ;
  unsigned long n_oos ;
  union drbd_state os ;
  union drbd_state ns ;
  struct drbd_work *w ;
  char *khelper_cmd ;
  struct task_struct *tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned long s ;
  unsigned long t ;
  int ratio ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int i ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int i___0 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;

  {
#line 679
  khelper_cmd = 0;
#line 684
  tmp___3 = drbd_rs_del_all(mdev);
#line 684
  if (tmp___3 != 0) {
#line 690
    drbd_kick_lo(mdev);
#line 691
    tmp = get_current();
#line 691
    tmp->state = 1L;
#line 692
    schedule_timeout(25L);
#line 693
    tmp___0 = kmalloc(24UL, 32U);
#line 693
    w = (struct drbd_work *)tmp___0;
#line 694
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 695
      w->cb = & w_resync_finished;
#line 696
      drbd_queue_work(& mdev->data.work, w);
#line 697
      return (1);
    } else {

    }
#line 699
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 699
    printk("<3>%s %s: Warn failed to drbd_rs_del_all() and to kmalloc(w).\n", tmp___2,
           tmp___1);
  } else {

  }
#line 702
  dt = (((unsigned long )jiffies - mdev->rs_start) - mdev->rs_paused) / 250UL;
#line 703
  if (dt == 0UL) {
#line 704
    dt = 1UL;
  } else {

  }
#line 705
  db = mdev->rs_total;
#line 706
  dbdt = db / dt << 2;
#line 707
  mdev->rs_paused = mdev->rs_paused / 250UL;
#line 709
  tmp___4 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 709
  if (tmp___4 == 0) {
#line 710
    goto out;
  } else {

  }
#line 712
  _spin_lock_irq(& mdev->req_lock);
#line 713
  os = mdev->state;
#line 717
  if ((int )os.ldv_32167.conn <= 10) {
#line 718
    goto out_unlock;
  } else {

  }
#line 720
  ns = os;
#line 721
  ns.ldv_32167.conn = 10U;
#line 723
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
  printk("<6>%s %s: %s done (total %lu sec; paused %lu sec; %lu K/sec)\n", tmp___6,
         tmp___5, (unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U ? (char *)"Online verify " : (char *)"Resync",
         mdev->rs_paused + dt, mdev->rs_paused, dbdt);
#line 728
  n_oos = drbd_bm_total_weight(mdev);
#line 730
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) {
#line 731
    if (n_oos != 0UL) {
#line 732
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 732
      printk("<1>%s %s: Online verify found %lu %dk block out of sync!\n", tmp___8,
             tmp___7, n_oos, 4);
#line 734
      khelper_cmd = (char *)"out-of-sync";
    } else {
#line 737
      if (mdev->rs_failed != n_oos) {
#line 737
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 737
        printk("<3>%s %s: ASSERT( (n_oos - mdev->rs_failed) == 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               737);
      } else {

      }
#line 739
      if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 740
        khelper_cmd = (char *)"after-resync-target";
      } else {

      }
#line 742
      if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0) && mdev->rs_total != 0UL) {
#line 743
        s = mdev->rs_same_csum;
#line 744
        t = mdev->rs_total;
#line 745
        ratio = t != 0UL ? (t <= 99999UL ? (int const   )((s * 100UL) / t) : (int const   )(s / (t / 100UL))) : 0;
#line 748
        tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 748
        tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 748
        printk("<6>%s %s: %u %% had equal check sums, eliminated: %luK; transferred %luK total %luK\n",
               tmp___12, tmp___11, ratio, mdev->rs_same_csum << 2, (mdev->rs_total - mdev->rs_same_csum) << 2,
               mdev->rs_total << 2);
      } else {

      }
    }
  } else {

  }
#line 757
  if (mdev->rs_failed != 0UL) {
#line 758
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 758
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 758
    printk("<6>%s %s:             %lu failed blocks\n", tmp___14, tmp___13, mdev->rs_failed);
#line 760
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 761
      ns.ldv_32167.disk = 4U;
#line 762
      ns.ldv_32167.pdsk = 8U;
    } else {
#line 764
      ns.ldv_32167.disk = 8U;
#line 765
      ns.ldv_32167.pdsk = 4U;
    }
  } else {
#line 768
    ns.ldv_32167.disk = 8U;
#line 769
    ns.ldv_32167.pdsk = 8U;
#line 771
    if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 336U) {
#line 772
      if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 774
        i = 1;
#line 774
        goto ldv_41328;
        ldv_41327: 
#line 775
        _drbd_uuid_set(mdev, i, *(mdev->p_uuid + (unsigned long )i));
#line 774
        i = i + 1;
        ldv_41328: ;
#line 774
        if (i <= 3) {
#line 775
          goto ldv_41327;
        } else {

        }
#line 776
        drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[0]);
#line 777
        _drbd_uuid_set(mdev, 0, *(mdev->p_uuid));
      } else {
#line 779
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 779
        printk("<3>%s %s: mdev->p_uuid is NULL! BUG\n", tmp___16, tmp___15);
      }
    } else {

    }
#line 783
    drbd_uuid_set_bm(mdev, 0ULL);
#line 785
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 789
      i___0 = 0;
#line 789
      goto ldv_41332;
      ldv_41331: 
#line 790
      *(mdev->p_uuid + (unsigned long )i___0) = (mdev->ldev)->md.uuid[i___0];
#line 789
      i___0 = i___0 + 1;
      ldv_41332: ;
#line 789
      if (i___0 <= 3) {
#line 790
        goto ldv_41331;
      } else {

      }

    } else {

    }
  }
#line 794
  _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  out_unlock: 
#line 796
  _spin_unlock_irq(& mdev->req_lock);
#line 797
  put_ldev(mdev);
  out: 
#line 799
  mdev->rs_total = 0UL;
#line 800
  mdev->rs_failed = 0UL;
#line 801
  mdev->rs_paused = 0UL;
#line 802
  mdev->ov_start_sector = 0UL;
#line 804
  tmp___19 = test_and_clear_bit(13, (unsigned long volatile   *)(& mdev->flags));
#line 804
  if (tmp___19 != 0) {
#line 805
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
    printk("<4>%s %s: Writing the whole bitmap, due to failed kmalloc\n", tmp___18,
           tmp___17);
#line 806
    drbd_queue_bitmap_io(mdev, & drbd_bm_write, 0, (char *)"write from resync_finished");
  } else {

  }
#line 809
  if ((unsigned long )khelper_cmd != (unsigned long )((char *)0)) {
#line 810
    drbd_khelper(mdev, khelper_cmd);
  } else {

  }
#line 812
  return (1);
}
}
#line 816 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static void move_to_net_ee_or_free(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  int tmp ;

  {
#line 818
  tmp = drbd_bio_has_active_page(e->private_bio);
#line 818
  if (tmp != 0) {
#line 820
    _spin_lock_irq(& mdev->req_lock);
#line 821
    list_add_tail(& e->w.list, & mdev->net_ee);
#line 822
    _spin_unlock_irq(& mdev->req_lock);
  } else {
#line 824
    drbd_free_ee(mdev, e);
  }
#line 825
  return;
}
}
#line 833 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_data_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;

  {
#line 835
  __mptr = (struct drbd_work  const  *)w;
#line 835
  e = (struct drbd_epoch_entry *)__mptr;
#line 838
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 838
  if (tmp___3 != 0L) {
#line 839
    drbd_free_ee(mdev, e);
#line 840
    atomic_dec(& mdev->unacked_cnt);
#line 840
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 840
    if (tmp___2 < 0) {
#line 840
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 840
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 840
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 840
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_data_req",
             840, tmp);
    } else {

    }
#line 841
    return (1);
  } else {

  }
#line 844
  tmp___7 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 844
  if (tmp___7 != 0L) {
#line 845
    ok = drbd_send_block(mdev, P_DATA_REPLY, e);
  } else {
#line 847
    tmp___6 = __ratelimit(& drbd_ratelimit_state);
#line 847
    if (tmp___6 != 0) {
#line 848
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 848
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 848
      printk("<3>%s %s: Sending NegDReply. sector=%llus.\n", tmp___5, tmp___4, (unsigned long long )e->sector);
    } else {

    }
#line 851
    ok = drbd_send_ack(mdev, P_NEG_DREPLY, e);
  }
#line 854
  atomic_dec(& mdev->unacked_cnt);
#line 854
  tmp___11 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 854
  if (tmp___11 < 0) {
#line 854
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 854
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 854
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___10, tmp___9, "w_e_end_data_req",
           854, tmp___8);
  } else {

  }
#line 856
  move_to_net_ee_or_free(mdev, e);
#line 858
  tmp___14 = __builtin_expect(ok == 0, 0L);
#line 858
  if (tmp___14 != 0L) {
#line 859
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 859
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___13, tmp___12);
  } else {

  }
#line 860
  return (ok);
}
}
#line 869 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_rsdata_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  long tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;

  {
#line 871
  __mptr = (struct drbd_work  const  *)w;
#line 871
  e = (struct drbd_epoch_entry *)__mptr;
#line 874
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 874
  if (tmp___3 != 0L) {
#line 875
    drbd_free_ee(mdev, e);
#line 876
    atomic_dec(& mdev->unacked_cnt);
#line 876
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 876
    if (tmp___2 < 0) {
#line 876
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 876
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 876
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_rsdata_req",
             876, tmp);
    } else {

    }
#line 877
    return (1);
  } else {

  }
#line 880
  tmp___4 = _get_ldev_if_state(mdev, D_FAILED);
#line 880
  if (tmp___4 != 0) {
#line 881
    drbd_rs_complete_io(mdev, e->sector);
#line 882
    put_ldev(mdev);
  } else {

  }
#line 885
  tmp___12 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 885
  if (tmp___12 != 0L) {
#line 886
    tmp___8 = __builtin_expect((int )mdev->state.ldv_32167.pdsk > 3, 1L);
#line 886
    if (tmp___8 != 0L) {
#line 887
      inc_rs_pending(mdev);
#line 888
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    } else {
#line 890
      tmp___7 = __ratelimit(& drbd_ratelimit_state);
#line 890
      if (tmp___7 != 0) {
#line 891
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
        printk("<3>%s %s: Not sending RSDataReply, partner DISKLESS!\n", tmp___6,
               tmp___5);
      } else {

      }
#line 893
      ok = 1;
    }
  } else {
#line 896
    tmp___11 = __ratelimit(& drbd_ratelimit_state);
#line 896
    if (tmp___11 != 0) {
#line 897
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 897
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 897
      printk("<3>%s %s: Sending NegRSDReply. sector %llus.\n", tmp___10, tmp___9,
             (unsigned long long )e->sector);
    } else {

    }
#line 900
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 903
    drbd_rs_failed_io(mdev, e->sector, (int )e->size);
  }
#line 906
  atomic_dec(& mdev->unacked_cnt);
#line 906
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 906
  if (tmp___16 < 0) {
#line 906
    tmp___13 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 906
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___15, tmp___14, "w_e_end_rsdata_req",
           906, tmp___13);
  } else {

  }
#line 908
  move_to_net_ee_or_free(mdev, e);
#line 910
  tmp___19 = __builtin_expect(ok == 0, 0L);
#line 910
  if (tmp___19 != 0L) {
#line 911
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 911
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 911
    printk("<3>%s %s: drbd_send_block() failed\n", tmp___18, tmp___17);
  } else {

  }
#line 912
  return (ok);
}
}
#line 915 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_csum_rs_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  long tmp___18 ;

  {
#line 917
  __mptr = (struct drbd_work  const  *)w;
#line 917
  e = (struct drbd_epoch_entry *)__mptr;
#line 920
  digest = 0;
#line 921
  eq = 0;
#line 923
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 923
  if (tmp___3 != 0L) {
#line 924
    drbd_free_ee(mdev, e);
#line 925
    atomic_dec(& mdev->unacked_cnt);
#line 925
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 925
    if (tmp___2 < 0) {
#line 925
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 925
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 925
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 925
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_csum_rs_req",
             925, tmp);
    } else {

    }
#line 926
    return (1);
  } else {

  }
#line 929
  drbd_rs_complete_io(mdev, e->sector);
#line 931
  di = (struct digest_info *)e->block_id;
#line 933
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 933
  if (tmp___11 != 0L) {
#line 937
    if ((unsigned long )mdev->csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 938
      tmp___4 = crypto_hash_digestsize(mdev->csums_tfm);
#line 938
      digest_size = (int )tmp___4;
#line 939
      if (di->digest_size != digest_size) {
#line 939
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 939
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               939);
      } else {

      }
#line 940
      digest = kmalloc((size_t )digest_size, 16U);
    } else {

    }
#line 942
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 943
      drbd_csum(mdev, mdev->csums_tfm, e->private_bio, digest);
#line 944
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 944
      eq = tmp___7 == 0;
#line 945
      kfree((void const   *)digest);
    } else {

    }
#line 948
    if (eq != 0) {
#line 949
      __drbd_set_in_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         949U);
#line 950
      mdev->rs_same_csum = mdev->rs_same_csum + 1UL;
#line 951
      ok = drbd_send_ack(mdev, P_RS_IS_IN_SYNC, e);
    } else {
#line 953
      inc_rs_pending(mdev);
#line 954
      e->block_id = 0xffffffffffffffffULL;
#line 955
      ok = drbd_send_block(mdev, P_RS_DATA_REPLY, e);
    }
  } else {
#line 958
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 959
    tmp___10 = __ratelimit(& drbd_ratelimit_state);
#line 959
    if (tmp___10 != 0) {
#line 960
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 960
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 963
  atomic_dec(& mdev->unacked_cnt);
#line 963
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 963
  if (tmp___15 < 0) {
#line 963
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 963
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 963
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 963
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_csum_rs_req",
           963, tmp___12);
  } else {

  }
#line 965
  kfree((void const   *)di);
#line 967
  move_to_net_ee_or_free(mdev, e);
#line 969
  tmp___18 = __builtin_expect(ok == 0, 0L);
#line 969
  if (tmp___18 != 0L) {
#line 970
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 970
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 970
    printk("<3>%s %s: drbd_send_block/ack() failed\n", tmp___17, tmp___16);
  } else {

  }
#line 971
  return (ok);
}
}
#line 974 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  int digest_size ;
  void *digest ;
  int ok ;
  long tmp ;
  long tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;

  {
#line 976
  __mptr = (struct drbd_work  const  *)w;
#line 976
  e = (struct drbd_epoch_entry *)__mptr;
#line 979
  ok = 1;
#line 981
  tmp = __builtin_expect(cancel != 0, 0L);
#line 981
  if (tmp != 0L) {
#line 982
    goto out;
  } else {

  }
#line 984
  tmp___0 = __builtin_expect(((e->private_bio)->bi_flags & 1UL) == 0UL, 0L);
#line 984
  if (tmp___0 != 0L) {
#line 985
    goto out;
  } else {

  }
#line 987
  tmp___1 = crypto_hash_digestsize(mdev->verify_tfm);
#line 987
  digest_size = (int )tmp___1;
#line 989
  digest = kmalloc((size_t )digest_size, 16U);
#line 990
  if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 991
    drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 992
    inc_rs_pending(mdev);
#line 993
    ok = drbd_send_drequest_csum(mdev, e->sector, (int )e->size, digest, digest_size,
                                 P_OV_REPLY);
#line 995
    if (ok == 0) {
#line 996
      atomic_dec(& mdev->rs_pending_cnt);
#line 996
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 996
      if (tmp___5 < 0) {
#line 996
        tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 996
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 996
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 996
        printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
               "w_e_end_ov_req", 996, tmp___2);
      } else {

      }
    } else {

    }
#line 997
    kfree((void const   *)digest);
  } else {

  }
  out: 
#line 1001
  drbd_free_ee(mdev, e);
#line 1003
  atomic_dec(& mdev->unacked_cnt);
#line 1003
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1003
  if (tmp___9 < 0) {
#line 1003
    tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1003
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1003
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1003
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "w_e_end_ov_req",
           1003, tmp___6);
  } else {

  }
#line 1005
  return (ok);
}
}
#line 1008 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_ov_oos_found(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 


  {
#line 1010
  if (mdev->ov_last_oos_start + mdev->ov_last_oos_size == sector) {
#line 1011
    mdev->ov_last_oos_size = mdev->ov_last_oos_size + (sector_t )(size >> 9);
  } else {
#line 1013
    mdev->ov_last_oos_start = sector;
#line 1014
    mdev->ov_last_oos_size = (sector_t )(size >> 9);
  }
#line 1016
  __drbd_set_out_of_sync(mdev, sector, size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
                         1016U);
#line 1017
  set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
#line 1018
  return;
}
}
#line 1020 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_e_end_ov_reply(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct drbd_work  const  *__mptr ;
  struct digest_info *di ;
  int digest_size ;
  void *digest ;
  int ok ;
  int eq ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  unsigned int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;

  {
#line 1022
  __mptr = (struct drbd_work  const  *)w;
#line 1022
  e = (struct drbd_epoch_entry *)__mptr;
#line 1026
  eq = 0;
#line 1028
  tmp___3 = __builtin_expect(cancel != 0, 0L);
#line 1028
  if (tmp___3 != 0L) {
#line 1029
    drbd_free_ee(mdev, e);
#line 1030
    atomic_dec(& mdev->unacked_cnt);
#line 1030
    tmp___2 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1030
    if (tmp___2 < 0) {
#line 1030
      tmp = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1030
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___1, tmp___0, "w_e_end_ov_reply",
             1030, tmp);
    } else {

    }
#line 1031
    return (1);
  } else {

  }
#line 1036
  drbd_rs_complete_io(mdev, e->sector);
#line 1038
  di = (struct digest_info *)e->block_id;
#line 1040
  tmp___11 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1040
  if (tmp___11 != 0L) {
#line 1041
    tmp___4 = crypto_hash_digestsize(mdev->verify_tfm);
#line 1041
    digest_size = (int )tmp___4;
#line 1042
    digest = kmalloc((size_t )digest_size, 16U);
#line 1043
    if ((unsigned long )digest != (unsigned long )((void *)0)) {
#line 1044
      drbd_csum(mdev, mdev->verify_tfm, e->private_bio, digest);
#line 1046
      if (di->digest_size != digest_size) {
#line 1046
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1046
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1046
        printk("<3>%s %s: ASSERT( digest_size == di->digest_size ) in %s:%d\n", tmp___6,
               tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
               1046);
      } else {

      }
#line 1047
      tmp___7 = memcmp((void const   *)digest, (void const   *)di->digest, (size_t )digest_size);
#line 1047
      eq = tmp___7 == 0;
#line 1048
      kfree((void const   *)digest);
    } else {

    }
  } else {
#line 1051
    ok = drbd_send_ack(mdev, P_NEG_RS_DREPLY, e);
#line 1052
    tmp___10 = __ratelimit(& drbd_ratelimit_state);
#line 1052
    if (tmp___10 != 0) {
#line 1053
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1053
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1053
      printk("<3>%s %s: Sending NegDReply. I guess it gets messy.\n", tmp___9, tmp___8);
    } else {

    }
  }
#line 1056
  atomic_dec(& mdev->unacked_cnt);
#line 1056
  tmp___15 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1056
  if (tmp___15 < 0) {
#line 1056
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1056
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1056
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1056
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___14, tmp___13, "w_e_end_ov_reply",
           1056, tmp___12);
  } else {

  }
#line 1058
  kfree((void const   *)di);
#line 1060
  if (eq == 0) {
#line 1061
    drbd_ov_oos_found(mdev, e->sector, (int )e->size);
  } else {
#line 1063
    ov_oos_print(mdev);
  }
#line 1065
  ok = drbd_send_ack_ex(mdev, P_OV_RESULT, e->sector, (int )e->size, eq != 0 ? 4711ULL : 4712ULL);
#line 1068
  drbd_free_ee(mdev, e);
#line 1070
  mdev->ov_left = mdev->ov_left - 1UL;
#line 1070
  if (mdev->ov_left == 0UL) {
#line 1071
    ov_oos_print(mdev);
#line 1072
    drbd_resync_finished(mdev);
  } else {

  }
#line 1075
  return (ok);
}
}
#line 1078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_prev_work_done(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_wq_barrier *b ;
  struct drbd_work  const  *__mptr ;

  {
#line 1080
  __mptr = (struct drbd_work  const  *)w;
#line 1080
  b = (struct drbd_wq_barrier *)__mptr;
#line 1081
  complete(& b->done);
#line 1082
  return (1);
}
}
#line 1085 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_barrier(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_work  const  *__mptr ;
  struct p_barrier *p ;
  int ok ;
  int tmp ;

  {
#line 1087
  __mptr = (struct drbd_work  const  *)w;
#line 1087
  b = (struct drbd_tl_epoch *)__mptr;
#line 1088
  p = & mdev->data.sbuf.barrier;
#line 1089
  ok = 1;
#line 1096
  _spin_lock_irq(& mdev->req_lock);
#line 1097
  if ((unsigned long )w->cb != (unsigned long )(& w_send_barrier) || (int )mdev->state.ldv_32167.conn <= 9) {
#line 1098
    cancel = 1;
  } else {

  }
#line 1099
  _spin_unlock_irq(& mdev->req_lock);
#line 1100
  if (cancel != 0) {
#line 1101
    return (1);
  } else {

  }
#line 1103
  tmp = drbd_get_data_sock(mdev);
#line 1103
  if (tmp == 0) {
#line 1104
    return (0);
  } else {

  }
#line 1105
  p->barrier = b->br_number;
#line 1109
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BARRIER, (struct p_header *)p, 16UL,
                      0U);
#line 1111
  drbd_put_data_sock(mdev);
#line 1113
  return (ok);
}
}
#line 1116 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_write_hint(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  int tmp ;

  {
#line 1118
  if (cancel != 0) {
#line 1119
    return (1);
  } else {

  }
#line 1120
  tmp = drbd_send_short_cmd(mdev, P_UNPLUG_REMOTE);
#line 1120
  return (tmp);
}
}
#line 1129 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_dblock(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;

  {
#line 1131
  __mptr = (struct drbd_work  const  *)w;
#line 1131
  req = (struct drbd_request *)__mptr;
#line 1134
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1134
  if (tmp != 0L) {
#line 1135
    req_mod(req, send_canceled);
#line 1136
    return (1);
  } else {

  }
#line 1139
  ok = drbd_send_dblock(mdev, req);
#line 1140
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1142
  return (ok);
}
}
#line 1151 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int w_send_read_req(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_request *req ;
  struct drbd_work  const  *__mptr ;
  int ok ;
  long tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1153
  __mptr = (struct drbd_work  const  *)w;
#line 1153
  req = (struct drbd_request *)__mptr;
#line 1156
  tmp = __builtin_expect(cancel != 0, 0L);
#line 1156
  if (tmp != 0L) {
#line 1157
    req_mod(req, send_canceled);
#line 1158
    return (1);
  } else {

  }
#line 1161
  ok = drbd_send_drequest(mdev, 8, req->sector, (int )req->size, (u64 )req);
#line 1164
  if (ok == 0) {
#line 1167
    if ((int )mdev->state.ldv_32167.conn > 9) {
#line 1168
      val.i = 0U;
#line 1168
      val.ldv_32167.conn = 5U;
#line 1168
      mask.i = 0U;
#line 1168
      mask.ldv_32167.conn = 31U;
#line 1168
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 1170
  req_mod(req, ok != 0 ? handed_over_to_network : send_failed);
#line 1172
  return (ok);
}
}
#line 1175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_may_sync_now(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1177
  odev = mdev;
  ldv_41486: ;
#line 1180
  if (odev->sync_conf.after == -1) {
#line 1181
    return (1);
  } else {

  }
#line 1182
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1183
  _b = (unsigned long )odev == (unsigned long )((struct drbd_conf *)0);
#line 1183
  if (_b != 0) {
#line 1183
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1183
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1183
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_may_sync_now", (char *)"!odev",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1183);
  } else {

  }
#line 1183
  if (_b != 0) {
#line 1183
    return (1);
  } else {

  }
#line 1184
  if (((((int )odev->state.ldv_32167.conn > 15 && (int )odev->state.ldv_32167.conn <= 21) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) || (unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1188
    return (0);
  } else {

  }
#line 1189
  goto ldv_41486;
}
}
#line 1198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_pause_after(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1201
  rv = 0;
#line 1203
  i = 0;
#line 1203
  goto ldv_41497;
  ldv_41496: 
#line 1204
  odev = minor_to_mdev((unsigned int )i);
#line 1205
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1206
    goto ldv_41493;
  } else {

  }
#line 1207
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1208
    goto ldv_41493;
  } else {

  }
#line 1209
  tmp___0 = _drbd_may_sync_now(odev);
#line 1209
  if (tmp___0 == 0) {
#line 1210
    __ns.i = odev->state.i;
#line 1210
    __ns.ldv_32167.aftr_isp = 1U;
#line 1210
    tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1210
    rv = (tmp != 2) | rv;
  } else {

  }
  ldv_41493: 
#line 1203
  i = i + 1;
  ldv_41497: ;
#line 1203
  if ((unsigned int )i < minor_count) {
#line 1204
    goto ldv_41496;
  } else {

  }

#line 1214
  return (rv);
}
}
#line 1223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int _drbd_resume_next(struct drbd_conf *mdev ) 
{ 
  struct drbd_conf *odev ;
  int i ;
  int rv ;
  union drbd_state __ns ;
  int tmp ;
  int tmp___0 ;

  {
#line 1226
  rv = 0;
#line 1228
  i = 0;
#line 1228
  goto ldv_41509;
  ldv_41508: 
#line 1229
  odev = minor_to_mdev((unsigned int )i);
#line 1230
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0)) {
#line 1231
    goto ldv_41505;
  } else {

  }
#line 1232
  if ((unsigned int )*((unsigned short *)odev + 902UL) == 0U && (unsigned int )*((unsigned char *)odev + 1805UL) == 0U) {
#line 1233
    goto ldv_41505;
  } else {

  }
#line 1234
  if ((unsigned int )*((unsigned char *)odev + 1806UL) != 0U) {
#line 1235
    tmp___0 = _drbd_may_sync_now(odev);
#line 1235
    if (tmp___0 != 0) {
#line 1236
      __ns.i = odev->state.i;
#line 1236
      __ns.ldv_32167.aftr_isp = 0U;
#line 1236
      tmp = __drbd_set_state(odev, __ns, CS_HARD, 0);
#line 1236
      rv = (tmp != 2) | rv;
    } else {

    }
  } else {

  }
  ldv_41505: 
#line 1228
  i = i + 1;
  ldv_41509: ;
#line 1228
  if ((unsigned int )i < minor_count) {
#line 1229
    goto ldv_41508;
  } else {

  }

#line 1241
  return (rv);
}
}
#line 1244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void resume_next_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1246
  _write_lock_irq(& global_state_lock);
#line 1247
  _drbd_resume_next(mdev);
#line 1248
  _write_unlock_irq(& global_state_lock);
#line 1249
  return;
}
}
#line 1251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void suspend_other_sg(struct drbd_conf *mdev ) 
{ 


  {
#line 1253
  _write_lock_irq(& global_state_lock);
#line 1254
  _drbd_pause_after(mdev);
#line 1255
  _write_unlock_irq(& global_state_lock);
#line 1256
  return;
}
}
#line 1258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
static int sync_after_error(struct drbd_conf *mdev , int o_minor ) 
{ 
  struct drbd_conf *odev ;
  struct drbd_conf *tmp ;

  {
#line 1262
  if (o_minor == -1) {
#line 1263
    return (101);
  } else {

  }
#line 1264
  if (o_minor < -1) {
#line 1265
    return (132);
  } else {
#line 1264
    tmp = minor_to_mdev((unsigned int )o_minor);
#line 1264
    if ((unsigned long )tmp == (unsigned long )((struct drbd_conf *)0)) {
#line 1265
      return (132);
    } else {

    }
  }
#line 1268
  odev = minor_to_mdev((unsigned int )o_minor);
  ldv_41522: ;
#line 1270
  if ((unsigned long )odev == (unsigned long )mdev) {
#line 1271
    return (133);
  } else {

  }
#line 1274
  if (odev->sync_conf.after == -1) {
#line 1275
    return (101);
  } else {

  }
#line 1278
  odev = minor_to_mdev((unsigned int )odev->sync_conf.after);
#line 1279
  goto ldv_41522;
}
}
#line 1282 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_alter_sa(struct drbd_conf *mdev , int na ) 
{ 
  int changes ;
  int retcode ;
  int tmp ;

  {
#line 1287
  _write_lock_irq(& global_state_lock);
#line 1288
  retcode = sync_after_error(mdev, na);
#line 1289
  if (retcode == 101) {
#line 1290
    mdev->sync_conf.after = na;
    ldv_41529: 
#line 1292
    changes = _drbd_pause_after(mdev);
#line 1293
    tmp = _drbd_resume_next(mdev);
#line 1293
    changes = tmp | changes;
#line 1294
    if (changes != 0) {
#line 1295
      goto ldv_41529;
    } else {

    }

  } else {

  }
#line 1296
  _write_unlock_irq(& global_state_lock);
#line 1297
  return (retcode);
}
}
#line 1308 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
void drbd_start_resync(struct drbd_conf *mdev , enum drbd_conns side ) 
{ 
  union drbd_state ns ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___3 ;
  u64 uuid ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  unsigned long tmp___7 ;
  unsigned long tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct task_struct *tmp___12 ;

  {
#line 1313
  if ((int )mdev->state.ldv_32167.conn > 15) {
#line 1314
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1314
    printk("<3>%s %s: Resync already running!\n", tmp___0, tmp);
#line 1315
    return;
  } else {

  }
#line 1319
  drbd_rs_cancel_all(mdev);
#line 1321
  if ((unsigned int )side == 17U) {
#line 1325
    r = drbd_khelper(mdev, (char *)"before-resync-target");
#line 1326
    r = (r >> 8) & 255;
#line 1327
    if (r > 0) {
#line 1328
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1328
      printk("<6>%s %s: before-resync-target handler returned %d, dropping connection.\n",
             tmp___2, tmp___1, r);
#line 1330
      val.i = 0U;
#line 1330
      val.ldv_32167.conn = 1U;
#line 1330
      mask.i = 0U;
#line 1330
      mask.ldv_32167.conn = 31U;
#line 1330
      drbd_force_state(mdev, mask, val);
#line 1331
      return;
    } else {

    }
  } else {

  }
#line 1335
  drbd_state_lock(mdev);
#line 1337
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1337
  if (tmp___3 == 0) {
#line 1338
    drbd_state_unlock(mdev);
#line 1339
    return;
  } else {

  }
#line 1342
  if ((unsigned int )side == 17U) {
#line 1343
    mdev->bm_resync_fo = 0UL;
  } else {
#line 1347
    get_random_bytes((void *)(& uuid), 8);
#line 1348
    drbd_uuid_set(mdev, 1, uuid);
#line 1349
    drbd_send_sync_uuid(mdev, uuid);
#line 1351
    if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 16U) {
#line 1351
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
      printk("<3>%s %s: ASSERT( mdev->state.disk == D_UP_TO_DATE ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1351);
    } else {

    }
  }
#line 1354
  _write_lock_irq(& global_state_lock);
#line 1355
  ns = mdev->state;
#line 1357
  tmp___6 = _drbd_may_sync_now(mdev);
#line 1357
  ns.ldv_32167.aftr_isp = tmp___6 == 0;
#line 1359
  ns.ldv_32167.conn = (unsigned char )side;
#line 1361
  if ((unsigned int )side == 17U) {
#line 1362
    ns.ldv_32167.disk = 4U;
  } else {
#line 1364
    ns.ldv_32167.pdsk = 4U;
  }
#line 1366
  r = __drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1367
  ns = mdev->state;
#line 1369
  if ((int )ns.ldv_32167.conn <= 9) {
#line 1370
    r = 0;
  } else {

  }
#line 1372
  if (r == 1) {
#line 1373
    tmp___7 = drbd_bm_total_weight(mdev);
#line 1373
    mdev->rs_mark_left = tmp___7;
#line 1373
    mdev->rs_total = tmp___7;
#line 1375
    mdev->rs_failed = 0UL;
#line 1376
    mdev->rs_paused = 0UL;
#line 1377
    tmp___8 = jiffies;
#line 1377
    mdev->rs_mark_time = tmp___8;
#line 1377
    mdev->rs_start = tmp___8;
#line 1379
    mdev->rs_same_csum = 0UL;
#line 1380
    _drbd_pause_after(mdev);
  } else {

  }
#line 1382
  _write_unlock_irq(& global_state_lock);
#line 1383
  drbd_state_unlock(mdev);
#line 1384
  put_ldev(mdev);
#line 1386
  if (r == 1) {
#line 1387
    tmp___9 = drbd_conn_str((enum drbd_conns )ns.ldv_32167.conn);
#line 1387
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1387
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1387
    printk("<6>%s %s: Began resync as %s (will sync %lu KB [%lu bits set]).\n", tmp___11,
           tmp___10, tmp___9, mdev->rs_total << 2, mdev->rs_total);
#line 1392
    if (mdev->rs_total == 0UL) {
#line 1394
      request_ping(mdev);
#line 1395
      tmp___12 = get_current();
#line 1395
      tmp___12->state = 1L;
#line 1396
      schedule_timeout((long )(((mdev->net_conf)->ping_timeo * 250) / 9));
#line 1397
      drbd_resync_finished(mdev);
#line 1398
      return;
    } else {

    }
#line 1405
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1406
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
#line 1408
    drbd_md_sync(mdev);
  } else {

  }
#line 1410
  return;
}
}
#line 1412 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared"
int drbd_worker(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_work *w ;
  struct list_head work_list ;
  int intr ;
  int i ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int _b ;
  enum drbd_thread_state tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  enum drbd_thread_state tmp___8 ;
  int _b___0 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  struct list_head  const  *__mptr ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___12 ;
  enum drbd_thread_state tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  struct list_head  const  *__mptr___0 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;

  {
#line 1414
  mdev = thi->mdev;
#line 1415
  w = 0;
#line 1416
  work_list.next = & work_list;
#line 1416
  work_list.prev = & work_list;
#line 1417
  intr = 0;
#line 1419
  tmp = mdev_to_minor(mdev);
#line 1419
  tmp___0 = get_current();
#line 1419
  sprintf((char *)(& tmp___0->comm), "drbd%d_worker", tmp);
#line 1421
  goto ldv_41553;
  ldv_41563: 
#line 1422
  drbd_thread_current_set_cpu(mdev);
#line 1424
  tmp___1 = down_trylock(& mdev->data.work.s);
#line 1424
  if (tmp___1 != 0) {
#line 1425
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1426
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1427
      drbd_tcp_uncork(mdev->data.socket);
    } else {

    }
#line 1428
    mutex_unlock(& mdev->data.mutex);
#line 1430
    intr = down_interruptible(& mdev->data.work.s);
#line 1432
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1433
    if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0) && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1434
      drbd_tcp_cork(mdev->data.socket);
    } else {

    }
#line 1435
    mutex_unlock(& mdev->data.mutex);
  } else {

  }
#line 1438
  if (intr != 0) {
#line 1439
    if (intr != -4) {
#line 1439
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1439
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1439
      printk("<3>%s %s: ASSERT( intr == -EINTR ) in %s:%d\n", tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1439);
    } else {

    }
#line 1440
    tmp___4 = get_current();
#line 1440
    flush_signals(tmp___4);
#line 1441
    tmp___5 = get_t_state(thi);
#line 1441
    _b = (unsigned int )tmp___5 == 1U;
#line 1441
    if (_b != 0) {
#line 1441
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1441
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1441
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___7, tmp___6, "drbd_worker", (char *)"get_t_state(thi) == Running",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
             1441);
    } else {

    }
#line 1441
    if (_b != 0) {
#line 1442
      goto ldv_41553;
    } else {

    }
#line 1443
    goto ldv_41554;
  } else {

  }
#line 1446
  tmp___8 = get_t_state(thi);
#line 1446
  if ((unsigned int )tmp___8 != 1U) {
#line 1447
    goto ldv_41554;
  } else {

  }
#line 1452
  w = 0;
#line 1453
  _spin_lock_irq(& mdev->data.work.q_lock);
#line 1454
  tmp___9 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1454
  _b___0 = tmp___9 != 0;
#line 1454
  if (_b___0 != 0) {
#line 1454
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1454
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___11, tmp___10, "drbd_worker", (char *)"list_empty(&mdev->data.work.q)",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1454);
  } else {

  }
#line 1454
  if (_b___0 != 0) {
#line 1466
    _spin_unlock_irq(& mdev->data.work.q_lock);
#line 1467
    goto ldv_41553;
  } else {

  }
#line 1469
  __mptr = (struct list_head  const  *)mdev->data.work.q.next;
#line 1469
  w = (struct drbd_work *)__mptr;
#line 1470
  list_del_init(& w->list);
#line 1471
  _spin_unlock_irq(& mdev->data.work.q_lock);
#line 1473
  tmp___12 = (*(w->cb))(mdev, w, (int )mdev->state.ldv_32167.conn <= 9);
#line 1473
  if (tmp___12 == 0) {
#line 1475
    if ((int )mdev->state.ldv_32167.conn > 9) {
#line 1477
      val.i = 0U;
#line 1477
      val.ldv_32167.conn = 5U;
#line 1477
      mask.i = 0U;
#line 1477
      mask.ldv_32167.conn = 31U;
#line 1477
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
  ldv_41553: 
#line 1421
  tmp___13 = get_t_state(thi);
#line 1421
  if ((unsigned int )tmp___13 == 1U) {
#line 1422
    goto ldv_41563;
  } else {

  }
  ldv_41554: 
#line 1480
  tmp___16 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1480
  if (tmp___16 == 0) {
#line 1480
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1480
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1480
    printk("<3>%s %s: ASSERT( test_bit(DEVICE_DYING, &mdev->flags) ) in %s:%d\n",
           tmp___15, tmp___14, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1480);
  } else {

  }
#line 1481
  tmp___19 = constant_test_bit(22U, (unsigned long const volatile   *)(& mdev->flags));
#line 1481
  if (tmp___19 == 0) {
#line 1481
    tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1481
    tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1481
    printk("<3>%s %s: ASSERT( test_bit(CONFIG_PENDING, &mdev->flags) ) in %s:%d\n",
           tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1481);
  } else {

  }
#line 1483
  _spin_lock_irq(& mdev->data.work.q_lock);
#line 1484
  i = 0;
#line 1485
  goto ldv_41570;
  ldv_41569: 
#line 1486
  list_splice_init(& mdev->data.work.q, & work_list);
#line 1487
  _spin_unlock_irq(& mdev->data.work.q_lock);
#line 1489
  goto ldv_41567;
  ldv_41566: 
#line 1490
  __mptr___0 = (struct list_head  const  *)work_list.next;
#line 1490
  w = (struct drbd_work *)__mptr___0;
#line 1491
  list_del_init(& w->list);
#line 1492
  (*(w->cb))(mdev, w, 1);
#line 1493
  i = i + 1;
  ldv_41567: 
#line 1489
  tmp___20 = list_empty((struct list_head  const  *)(& work_list));
#line 1489
  if (tmp___20 == 0) {
#line 1490
    goto ldv_41566;
  } else {

  }
#line 1496
  _spin_lock_irq(& mdev->data.work.q_lock);
  ldv_41570: 
#line 1485
  tmp___21 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 1485
  if (tmp___21 == 0) {
#line 1486
    goto ldv_41569;
  } else {

  }
#line 1498
  sema_init(& mdev->data.work.s, 0);
#line 1504
  _spin_unlock_irq(& mdev->data.work.q_lock);
#line 1506
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) != 0U || (unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1506
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1506
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1506
    printk("<3>%s %s: ASSERT( mdev->state.disk == D_DISKLESS && mdev->state.conn == C_STANDALONE ) in %s:%d\n",
           tmp___23, tmp___22, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_worker.c.prepared",
           1506);
  } else {

  }
#line 1509
  drbd_thread_stop(& mdev->receiver);
#line 1510
  drbd_mdev_cleanup(mdev);
#line 1512
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1512
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1512
  printk("<6>%s %s: worker terminated\n", tmp___25, tmp___24);
#line 1514
  clear_bit(23, (unsigned long volatile   *)(& mdev->flags));
#line 1515
  clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 1516
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1518
  return (0);
}
}
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 1
void __builtin_prefetch(void const   *  , ...) ;
#line 7 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u32 __arch_swab32(__u32 val ) 
{ 


  {
#line 21
  __asm__  ("bswapl %0": "=r" (val): "0" (val));
#line 25
  return (val);
}
}
#line 29 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/swab.h"
__inline static __u64 __arch_swab64(__u64 val ) 
{ 


  {
#line 53
  __asm__  ("bswapq %0": "=r" (val): "0" (val));
#line 56
  return (val);
}
}
#line 46 "include/linux/swab.h"
__inline static __u16 __fswab16(__u16 val ) 
{ 


  {
#line 51
  return ((__u16 )((int )((short )((int )val << 8)) | (int )((short )((int )val >> 8))));
}
}
#line 55 "include/linux/swab.h"
__inline static __u32 __fswab32(__u32 val ) 
{ 
  __u32 tmp ;

  {
#line 58
  tmp = __arch_swab32(val);
#line 58
  return (tmp);
}
}
#line 64 "include/linux/swab.h"
__inline static __u64 __fswab64(__u64 val ) 
{ 
  __u64 tmp ;

  {
#line 67
  tmp = __arch_swab64(val);
#line 67
  return (tmp);
}
}
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/page_64_types.h"
extern unsigned long __phys_addr(unsigned long  ) ;
#line 34 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/string_64.h"
extern void *__memcpy(void * , void const   * , size_t  ) ;
#line 61
extern size_t strlen(char const   * ) ;
#line 62
extern char *strcpy(char * , char const   * ) ;
#line 64
extern int strcmp(char const   * , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 151 "include/linux/list.h"
__inline static void list_move(struct list_head *list , struct list_head *head ) 
{ 


  {
#line 153
  __list_del(list->prev, list->next);
#line 154
  list_add(list, head);
#line 155
  return;
}
}
#line 551 "include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h ) 
{ 


  {
#line 553
  h->next = 0;
#line 554
  h->pprev = 0;
#line 555
  return;
}
}
#line 557 "include/linux/list.h"
__inline static int hlist_unhashed(struct hlist_node  const  *h ) 
{ 


  {
#line 559
  return ((unsigned long )h->pprev == (unsigned long )((struct hlist_node **/* const  */)0));
}
}
#line 562 "include/linux/list.h"
__inline static int hlist_empty(struct hlist_head  const  *h ) 
{ 


  {
#line 564
  return ((unsigned long )h->first == (unsigned long )((struct hlist_node */* const  */)0));
}
}
#line 567 "include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n ) 
{ 
  struct hlist_node *next ;
  struct hlist_node **pprev ;

  {
#line 569
  next = n->next;
#line 570
  pprev = n->pprev;
#line 571
  *pprev = next;
#line 572
  if ((unsigned long )next != (unsigned long )((struct hlist_node *)0)) {
#line 573
    next->pprev = pprev;
  } else {

  }
#line 574
  return;
}
}
#line 583 "include/linux/list.h"
__inline static void hlist_del_init(struct hlist_node *n ) 
{ 
  int tmp ;

  {
#line 585
  tmp = hlist_unhashed((struct hlist_node  const  *)n);
#line 585
  if (tmp == 0) {
#line 586
    __hlist_del(n);
#line 587
    INIT_HLIST_NODE(n);
  } else {

  }
#line 589
  return;
}
}
#line 591 "include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n , struct hlist_head *h ) 
{ 
  struct hlist_node *first ;

  {
#line 593
  first = h->first;
#line 594
  n->next = first;
#line 595
  if ((unsigned long )first != (unsigned long )((struct hlist_node *)0)) {
#line 596
    first->pprev = & n->next;
  } else {

  }
#line 597
  h->first = n;
#line 598
  n->pprev = & h->first;
#line 599
  return;
}
}
#line 59 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_sub(int i , atomic_t *v ) 
{ 


  {
#line 61
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; subl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 64
  return;
}
}
#line 85 "include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti , int flag ) 
{ 
  int tmp ;

  {
#line 87
  tmp = variable_test_bit(flag, (unsigned long const volatile   *)(& ti->flags));
#line 87
  return (tmp);
}
}
#line 22 "include/linux/spinlock_api_smp.h"
extern void _spin_lock(spinlock_t * ) ;
#line 47
extern void _spin_unlock(spinlock_t * ) ;
#line 127 "include/linux/mutex.h"
extern int mutex_lock_interruptible_nested(struct mutex * , unsigned int  ) ;
#line 230 "include/linux/timer.h"
extern int del_timer_sync(struct timer_list * ) ;
#line 327 "include/linux/gfp.h"
extern void free_pages(unsigned long  , unsigned int  ) ;
#line 73 "include/linux/completion.h"
__inline static void init_completion(struct completion *x ) 
{ 
  struct lock_class_key __key ;

  {
#line 75
  x->done = 0U;
#line 76
  __init_waitqueue_head(& x->wait, & __key);
#line 78
  return;
}
}
#line 79
extern void wait_for_completion(struct completion * ) ;
#line 74 "include/linux/random.h"
extern u32 random32(void) ;
#line 222 "include/linux/net.h"
extern int sock_create_kern(int  , int  , int  , struct socket ** ) ;
#line 224
extern int sock_create_lite(int  , int  , int  , struct socket ** ) ;
#line 226
extern void sock_release(struct socket * ) ;
#line 229
extern int sock_recvmsg(struct socket * , struct msghdr * , size_t  , int  ) ;
#line 331 "include/linux/mm.h"
extern void put_page(struct page * ) ;
#line 55 "include/linux/scatterlist.h"
__inline static void sg_assign_page___0(struct scatterlist *sg , struct page *page ) 
{ 
  unsigned long page_link ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 57
  page_link = sg->page_link & 3UL;
#line 63
  tmp = __builtin_expect(((unsigned long )page & 3UL) != 0UL, 0L);
#line 63
  if (tmp != 0L) {
#line 63
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (63), "i" (12UL));
    ldv_16325: ;
#line 63
    goto ldv_16325;
  } else {

  }
#line 65
  tmp___0 = __builtin_expect(sg->sg_magic != 2271560481UL, 0L);
#line 65
  if (tmp___0 != 0L) {
#line 65
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (65), "i" (12UL));
    ldv_16326: ;
#line 65
    goto ldv_16326;
  } else {

  }
#line 66
  tmp___1 = __builtin_expect((long )((int )sg->page_link) & 1L, 0L);
#line 66
  if (tmp___1 != 0L) {
#line 66
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/scatterlist.h"),
                         "i" (66), "i" (12UL));
    ldv_16327: ;
#line 66
    goto ldv_16327;
  } else {

  }
#line 68
  sg->page_link = page_link | (unsigned long )page;
#line 69
  return;
}
}
#line 85 "include/linux/scatterlist.h"
__inline static void sg_set_page___0(struct scatterlist *sg , struct page *page ,
                                     unsigned int len , unsigned int offset ) 
{ 


  {
#line 88
  sg_assign_page___0(sg, page);
#line 89
  sg->offset = offset;
#line 90
  sg->length = len;
#line 91
  return;
}
}
#line 109 "include/linux/scatterlist.h"
__inline static void sg_set_buf(struct scatterlist *sg , void const   *buf , unsigned int buflen ) 
{ 
  unsigned long tmp ;

  {
#line 112
  tmp = __phys_addr((unsigned long )buf);
#line 112
  sg_set_page___0(sg, 0xffffea0000000000UL + (tmp >> 12), buflen, (unsigned int )((long )buf) & 4095U);
#line 113
  return;
}
}
#line 2310 "include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk , int flag ) 
{ 
  int tmp ;

  {
#line 2312
  tmp = test_ti_thread_flag((struct thread_info *)tsk->stack, flag);
#line 2312
  return (tmp);
}
}
#line 2336 "include/linux/sched.h"
__inline static int signal_pending(struct task_struct *p ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 2338
  tmp = test_tsk_thread_flag(p, 2);
#line 2338
  tmp___0 = __builtin_expect(tmp != 0, 0L);
#line 2338
  return ((int )tmp___0);
}
}
#line 282 "include/linux/drbd.h"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) ;
#line 513 "include/linux/crypto.h"
extern struct crypto_tfm *crypto_alloc_base(char const   * , u32  , u32  ) ;
#line 516 "include/linux/crypto.h"
__inline static void crypto_free_tfm(struct crypto_tfm *tfm ) 
{ 


  {
#line 518
  return;
}
}
#line 546 "include/linux/crypto.h"
__inline static u32 crypto_tfm_alg_type(struct crypto_tfm *tfm ) 
{ 


  {
#line 548
  return ((tfm->__crt_alg)->cra_flags & 15U);
}
}
#line 1137 "include/linux/crypto.h"
__inline static struct crypto_hash *__crypto_hash_cast(struct crypto_tfm *tfm ) 
{ 


  {
#line 1139
  return ((struct crypto_hash *)tfm);
}
}
#line 1149 "include/linux/crypto.h"
__inline static struct crypto_hash *crypto_alloc_hash(char const   *alg_name , u32 type ,
                                                      u32 mask ) 
{ 
  struct crypto_tfm *tmp ;
  struct crypto_hash *tmp___0 ;

  {
#line 1152
  type = type & 4294967280U;
#line 1153
  mask = mask & 4294967280U;
#line 1154
  type = type | 8U;
#line 1155
  mask = mask | 14U;
#line 1157
  tmp = crypto_alloc_base(alg_name, type, mask);
#line 1157
  tmp___0 = __crypto_hash_cast(tmp);
#line 1157
  return (tmp___0);
}
}
#line 1165 "include/linux/crypto.h"
__inline static void crypto_free_hash(struct crypto_hash *tfm ) 
{ 
  struct crypto_tfm *tmp ;

  {
#line 1167
  tmp = crypto_hash_tfm(tfm);
#line 1167
  crypto_free_tfm(tmp);
#line 1168
  return;
}
}
#line 1232 "include/linux/crypto.h"
__inline static int crypto_hash_digest(struct hash_desc *desc , struct scatterlist *sg ,
                                       unsigned int nbytes , u8 *out ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1236
  tmp = crypto_hash_crt(desc->tfm);
#line 1236
  tmp___0 = (*(tmp->digest))(desc, sg, nbytes, out);
#line 1236
  return (tmp___0);
}
}
#line 1239 "include/linux/crypto.h"
__inline static int crypto_hash_setkey(struct crypto_hash *hash , u8 const   *key ,
                                       unsigned int keylen ) 
{ 
  struct hash_tfm *tmp ;
  int tmp___0 ;

  {
#line 1242
  tmp = crypto_hash_crt(hash);
#line 1242
  tmp___0 = (*(tmp->setkey))(hash, key, keylen);
#line 1242
  return (tmp___0);
}
}
#line 374 "include/linux/genhd.h"
__inline static void set_capacity(struct gendisk *disk , sector_t size ) 
{ 


  {
#line 376
  disk->part0.nr_sects = size;
#line 377
  return;
}
}
#line 52 "include/linux/highmem.h"
__inline static void *kmap(struct page *page ) 
{ 
  void *tmp ;

  {
#line 54
  __might_sleep((char *)"include/linux/highmem.h", 54, 0);
#line 55
  tmp = lowmem_page_address(page);
#line 55
  return (tmp);
}
}
#line 58 "include/linux/highmem.h"
__inline static void kunmap(struct page *page ) 
{ 


  {
#line 60
  return;
}
}
#line 33 "include/linux/mempool.h"
extern void *mempool_alloc(mempool_t * , gfp_t  ) ;
#line 224 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static char const   *cmdname(enum drbd_packets cmd ) 
{ 
  char const   *cmdnames[38U] ;

  {
#line 229
  cmdnames[0] = "Data";
#line 229
  cmdnames[1] = "DataReply";
#line 229
  cmdnames[2] = "RSDataReply";
#line 229
  cmdnames[3] = "Barrier";
#line 229
  cmdnames[4] = "ReportBitMap";
#line 229
  cmdnames[5] = "BecomeSyncTarget";
#line 229
  cmdnames[6] = "BecomeSyncSource";
#line 229
  cmdnames[7] = "UnplugRemote";
#line 229
  cmdnames[8] = "DataRequest";
#line 229
  cmdnames[9] = "RSDataRequest";
#line 229
  cmdnames[10] = "SyncParam";
#line 229
  cmdnames[11] = "ReportProtocol";
#line 229
  cmdnames[12] = "ReportUUIDs";
#line 229
  cmdnames[13] = "ReportSizes";
#line 229
  cmdnames[14] = "ReportState";
#line 229
  cmdnames[15] = "ReportSyncUUID";
#line 229
  cmdnames[16] = "AuthChallenge";
#line 229
  cmdnames[17] = "AuthResponse";
#line 229
  cmdnames[18] = "StateChgRequest";
#line 229
  cmdnames[19] = "Ping";
#line 229
  cmdnames[20] = "PingAck";
#line 229
  cmdnames[21] = "RecvAck";
#line 229
  cmdnames[22] = "WriteAck";
#line 229
  cmdnames[23] = "RSWriteAck";
#line 229
  cmdnames[24] = "DiscardAck";
#line 229
  cmdnames[25] = "NegAck";
#line 229
  cmdnames[26] = "NegDReply";
#line 229
  cmdnames[27] = "NegRSDReply";
#line 229
  cmdnames[28] = "BarrierAck";
#line 229
  cmdnames[29] = "StateChgReply";
#line 229
  cmdnames[30] = "OVRequest";
#line 229
  cmdnames[31] = "OVReply";
#line 229
  cmdnames[32] = "OVResult";
#line 229
  cmdnames[33] = 0;
#line 229
  cmdnames[34] = 0;
#line 229
  cmdnames[35] = "SyncParam89";
#line 229
  cmdnames[36] = 0;
#line 229
  cmdnames[37] = 0;
#line 267
  if ((unsigned int )cmd == 65521U) {
#line 268
    return ("HandShakeM");
  } else {

  }
#line 269
  if ((unsigned int )cmd == 65522U) {
#line 270
    return ("HandShakeS");
  } else {

  }
#line 271
  if ((unsigned int )cmd == 65534U) {
#line 272
    return ("HandShake");
  } else {

  }
#line 273
  if ((unsigned int )cmd > 36U) {
#line 274
    return ("Unknown");
  } else {

  }
#line 275
  return (cmdnames[(unsigned int )cmd]);
}
}
#line 296
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) ;
#line 299 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void bm_xfer_ctx_bit_to_word_offset(struct bm_xfer_ctx *c ) 
{ 


  {
#line 309
  c->word_offset = c->bit_offset >> 6;
#line 310
  return;
}
}
#line 535 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static enum drbd_bitmap_code DCBP_get_code(struct p_compressed_bm *p ) 
{ 


  {
#line 537
  return ((enum drbd_bitmap_code )((int )p->encoding & 15));
}
}
#line 548 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_start(struct p_compressed_bm *p ) 
{ 


  {
#line 550
  return ((int )((signed char )p->encoding) < 0);
}
}
#line 560 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int DCBP_get_pad_bits(struct p_compressed_bm *p ) 
{ 


  {
#line 562
  return (((int )p->encoding >> 4) & 7);
}
}
#line 1075
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) ;
#line 1079
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) ;
#line 1085
int drbd_thread_start(struct drbd_thread *thi ) ;
#line 1095
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) ;
#line 1097
void tl_clear(struct drbd_conf *mdev ) ;
#line 1099
void drbd_free_sock(struct drbd_conf *mdev ) ;
#line 1102
int drbd_send_protocol(struct drbd_conf *mdev ) ;
#line 1103
int drbd_send_uuids(struct drbd_conf *mdev ) ;
#line 1106
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) ;
#line 1108
int drbd_send_state(struct drbd_conf *mdev ) ;
#line 1117
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) ;
#line 1119
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) ;
#line 1120
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) ;
#line 1124
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) ;
#line 1126
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) ;
#line 1143
int drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1145
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) ;
#line 1166
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) ;
#line 1167
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) ;
#line 1168
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) ;
#line 1349
mempool_t *drbd_ee_mempool ;
#line 1351
struct page *drbd_pp_pool ;
#line 1352
spinlock_t drbd_pp_lock ;
#line 1353
int drbd_pp_vacant ;
#line 1354
wait_queue_head_t drbd_pp_wait ;
#line 1374
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1377
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev ) ;
#line 1378
void resync_after_online_grow(struct drbd_conf *mdev ) ;
#line 1379
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) ;
#line 1380
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) ;
#line 1382
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) ;
#line 1432
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) ;
#line 1439
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1441
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) ;
#line 1445
void drbd_flush_workqueue(struct drbd_conf *mdev ) ;
#line 1475 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_nodelay(struct socket *sock ) 
{ 
  int val ;

  {
#line 1477
  val = 1;
#line 1478
  drbd_setsockopt(sock, 6, 1, (char *)(& val), 4);
#line 1480
  return;
}
}
#line 1482 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_tcp_quickack(struct socket *sock ) 
{ 
  int val ;

  {
#line 1484
  val = 1;
#line 1485
  drbd_setsockopt(sock, 6, 12, (char *)(& val), 4);
#line 1487
  return;
}
}
#line 1498
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1501
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) ;
#line 1527
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) ;
#line 1622 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_request_state(struct drbd_conf *mdev , union drbd_state mask ,
                                       union drbd_state val ) 
{ 
  int tmp ;

  {
#line 1626
  tmp = _drbd_request_state(mdev, mask, val, 14);
#line 1626
  return (tmp);
}
}
#line 1680 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_first_sector(struct drbd_backing_dev *bdev ) 
{ 


  {
#line 1682
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: ;
#line 1685
  return ((sector_t )(bdev->md.md_offset + (u64 )bdev->md.bm_offset));
  case -2: ;
  default: ;
#line 1688
  return ((sector_t )bdev->md.md_offset);
  }
}
}
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_41061;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_41061;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_41061: ;
#line 1746
  return (s);
}
}
#line 1787 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_queue_work_front(struct drbd_work_queue *q , struct drbd_work *w ) 
{ 
  unsigned long flags ;

  {
#line 1790
  flags = _spin_lock_irqsave(& q->q_lock);
#line 1791
  list_add(& w->list, & q->q);
#line 1792
  up(& q->s);
#line 1794
  _spin_unlock_irqrestore(& q->q_lock, flags);
#line 1795
  return;
}
}
#line 1827 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1830
  tmp = drbd_send_cmd(mdev, 0, P_PING, & h, 8UL);
#line 1830
  return (tmp);
}
}
#line 1833 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_send_ping_ack(struct drbd_conf *mdev ) 
{ 
  struct p_header h ;
  int tmp ;

  {
#line 1836
  tmp = drbd_send_cmd(mdev, 0, P_PING_ACK, & h, 8UL);
#line 1836
  return (tmp);
}
}
#line 1918 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_unacked(struct drbd_conf *mdev ) 
{ 


  {
#line 1920
  atomic_inc(& mdev->unacked_cnt);
#line 1921
  return;
}
}
#line 1934 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void put_net_conf(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1936
  tmp = atomic_dec_and_test(& mdev->net_cnt);
#line 1936
  if (tmp != 0) {
#line 1937
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 1938
  return;
}
}
#line 1946 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int get_net_conf(struct drbd_conf *mdev ) 
{ 
  int have_net_conf ;

  {
#line 1950
  atomic_inc(& mdev->net_cnt);
#line 1951
  have_net_conf = (int )mdev->state.ldv_32167.conn > 1;
#line 1952
  if (have_net_conf == 0) {
#line 1953
    put_net_conf(mdev);
  } else {

  }
#line 1954
  return (have_net_conf);
}
}
#line 2175 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_set_ed_uuid(struct drbd_conf *mdev , u64 val ) 
{ 


  {
#line 2177
  mdev->ed_uuid = val;
#line 2178
  return;
}
}
#line 2180 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int seq_cmp(u32 a , u32 b ) 
{ 


  {
#line 2187
  return ((int )a - (int )b);
}
}
#line 2196 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void update_peer_seq(struct drbd_conf *mdev , unsigned int new_seq ) 
{ 
  unsigned int m ;
  int tmp ;

  {
#line 2199
  _spin_lock(& mdev->peer_seq_lock);
#line 2200
  tmp = seq_cmp(mdev->peer_seq, new_seq);
#line 2200
  m = tmp > 0 ? mdev->peer_seq : new_seq;
#line 2201
  mdev->peer_seq = m;
#line 2202
  _spin_unlock(& mdev->peer_seq_lock);
#line 2203
  if (m == new_seq) {
#line 2204
    __wake_up(& mdev->seq_wait, 3U, 1, 0);
  } else {

  }
#line 2205
  return;
}
}
#line 11 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_set_my_capacity(struct drbd_conf *mdev , sector_t size ) 
{ 


  {
#line 15
  set_capacity(mdev->vdisk, size);
#line 16
  ((mdev->this_bdev)->bd_inode)->i_size = (long long )size << 9;
#line 17
  return;
}
}
#line 21 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_bio_has_active_page___0(struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 26
  bvec = bio->bi_io_vec;
#line 26
  i = 0;
#line 26
  goto ldv_41275;
  ldv_41274: 
#line 27
  tmp = page_count(bvec->bv_page);
#line 27
  if (tmp > 1) {
#line 28
    return (1);
  } else {

  }
#line 26
  bvec = bvec + 1;
#line 26
  i = i + 1;
  ldv_41275: ;
#line 26
  if ((int )bio->bi_vcnt > i) {
#line 27
    goto ldv_41274;
  } else {

  }

#line 31
  return (0);
}
}
#line 80 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static int drbd_crypto_is_hash(struct crypto_tfm *tfm ) 
{ 
  u32 tmp ;

  {
#line 82
  tmp = crypto_tfm_alg_type(tfm);
#line 82
  return ((tmp & 14U) == 8U);
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_41338: ;
#line 207
    goto ldv_41338;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_41343: ;
#line 216
    goto ldv_41343;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 230 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *_ar_id_to_req(struct drbd_conf *mdev , u64 id ,
                                                   sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;

  {
#line 233
  tmp = ar_hash_slot(mdev, sector);
#line 233
  slot = tmp;
#line 237
  n = slot->first;
#line 237
  goto ldv_41361;
  ldv_41360: ;
#line 238
  if ((unsigned long )req == (unsigned long )id) {
#line 239
    if (req->sector != sector) {
#line 239
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 239
      printk("<3>%s %s: ASSERT( req->sector == sector ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h",
             239);
    } else {

    }
#line 240
    return (req);
  } else {

  }
#line 237
  n = n->next;
  ldv_41361: ;
#line 237
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 237
    __builtin_prefetch((void const   *)n->next);
#line 237
    if (1 != 0) {
#line 237
      __mptr = (struct hlist_node  const  *)n;
#line 237
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 237
      if (1 != 0) {
#line 238
        goto ldv_41360;
      } else {
#line 240
        goto ldv_41362;
      }
    } else {
#line 240
      goto ldv_41362;
    }
  } else {

  }
  ldv_41362: ;
#line 243
  return (0);
}
}
#line 279 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static int overlaps(sector_t s1 , int l1 , sector_t s2 , int l2 ) 
{ 


  {
#line 281
  return ((sector_t )(l1 >> 9) + s1 > s2 && (sector_t )(l2 >> 9) + s2 > s1);
}
}
#line 146 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_decode_bits(u64 *out , u64 const   in ) 
{ 
  u64 adj ;

  {
#line 148
  adj = 1ULL;
#line 159
  if (((unsigned long long )in & 1ULL) == 0ULL) {
#line 159
    *out = (((unsigned long long )in & 3ULL) >> 1) + adj;
#line 159
    return (2);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 3ULL) == 1ULL) {
#line 159
    *out = (((unsigned long long )in & 7ULL) >> 2) + adj;
#line 159
    return (3);
  } else {

  }
#line 159
  adj = adj + 2ULL;
#line 159
  if (((unsigned long long )in & 7ULL) == 3ULL) {
#line 159
    *out = (((unsigned long long )in & 31ULL) >> 3) + adj;
#line 159
    return (5);
  } else {

  }
#line 159
  adj = adj + 4ULL;
#line 159
  if (((unsigned long long )in & 15ULL) == 7ULL) {
#line 159
    *out = (((unsigned long long )in & 127ULL) >> 4) + adj;
#line 159
    return (7);
  } else {

  }
#line 159
  adj = adj + 8ULL;
#line 159
  if (((unsigned long long )in & 31ULL) == 15ULL) {
#line 159
    *out = (((unsigned long long )in & 1023ULL) >> 5) + adj;
#line 159
    return (10);
  } else {

  }
#line 159
  adj = adj + 32ULL;
#line 159
  if (((unsigned long long )in & 63ULL) == 31ULL) {
#line 159
    *out = (((unsigned long long )in & 16383ULL) >> 6) + adj;
#line 159
    return (14);
  } else {

  }
#line 159
  adj = adj + 256ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 63ULL) {
#line 159
    *out = (((unsigned long long )in & 2097151ULL) >> 8) + adj;
#line 159
    return (21);
  } else {

  }
#line 159
  adj = adj + 8192ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 127ULL) {
#line 159
    *out = (((unsigned long long )in & 536870911ULL) >> 8) + adj;
#line 159
    return (29);
  } else {

  }
#line 159
  adj = adj + 2097152ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 191ULL) {
#line 159
    *out = (((unsigned long long )in & 4398046511103ULL) >> 8) + adj;
#line 159
    return (42);
  } else {

  }
#line 159
  adj = adj + 17179869184ULL;
#line 159
  if (((unsigned long long )in & 255ULL) == 255ULL) {
#line 159
    *out = ((unsigned long long )in >> 8) + adj;
#line 159
    return (64);
  } else {

  }
#line 159
  adj = adj + 72057594037927936ULL;
#line 162
  __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"),
                       "i" (162), "i" (12UL));
  ldv_41408: ;
#line 162
  goto ldv_41408;
}
}
#line 211 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_reset(struct bitstream_cursor *cur , void *s ) 
{ 


  {
#line 213
  cur->b = (u8 *)s;
#line 214
  cur->bit = 0U;
#line 215
  return;
}
}
#line 219 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_cursor_advance(struct bitstream_cursor *cur , unsigned int bits ) 
{ 


  {
#line 221
  bits = cur->bit + bits;
#line 222
  cur->b = cur->b + (unsigned long )(bits >> 3);
#line 223
  cur->bit = bits & 7U;
#line 224
  return;
}
}
#line 238 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static void bitstream_init(struct bitstream *bs , void *s , size_t len ,
                                    unsigned int pad_bits ) 
{ 


  {
#line 240
  bs->buf = (unsigned char *)s;
#line 241
  bs->buf_len = len;
#line 242
  bs->pad_bits = pad_bits;
#line 243
  bitstream_cursor_reset(& bs->cur, (void *)bs->buf);
#line 244
  return;
}
}
#line 293 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_get_bits(struct bitstream *bs , u64 *out , int bits ) 
{ 
  u64 val ;
  unsigned int n ;
  size_t __len ;
  void *__ret ;

  {
#line 298
  if (bits > 64) {
#line 299
    return (-22);
  } else {

  }
#line 301
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )((((bs->cur.bit + bs->pad_bits) + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 302
    bits = (int )(((((unsigned int )bs->buf_len + ((unsigned int )((long )bs->buf) - (unsigned int )((long )bs->cur.b))) << 3U) - bs->cur.bit) - bs->pad_bits);
  } else {

  }
#line 305
  if (bits == 0) {
#line 306
    *out = 0ULL;
#line 307
    return (0);
  } else {

  }
#line 311
  val = 0ULL;
#line 312
  n = ((bs->cur.bit + (unsigned int )bits) + 7U) >> 3;
#line 315
  if (n != 0U) {
#line 316
    __len = (size_t )(n - 1U);
#line 316
    __ret = __builtin_memcpy((void *)(& val), (void const   *)bs->cur.b + 1U, __len);
#line 317
    val = val << (int )(8U - bs->cur.bit);
  } else {

  }
#line 321
  val = (u64 )((int )*(bs->cur.b) >> (int )bs->cur.bit) | val;
#line 324
  val = (0xffffffffffffffffULL >> (64 - bits)) & val;
#line 326
  bitstream_cursor_advance(& bs->cur, (unsigned int )bits);
#line 327
  *out = val;
#line 329
  return (bits);
}
}
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) ;
#line 74
static int drbd_do_auth(struct drbd_conf *mdev ) ;
#line 76
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) ;
#line 77
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) ;
#line 79 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch *previous_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  struct drbd_epoch *prev ;
  struct list_head  const  *__mptr ;

  {
#line 82
  _spin_lock(& mdev->epoch_lock);
#line 83
  __mptr = (struct list_head  const  *)epoch->list.prev;
#line 83
  prev = (struct drbd_epoch *)__mptr;
#line 84
  if ((unsigned long )prev == (unsigned long )epoch || (unsigned long )mdev->current_epoch == (unsigned long )prev) {
#line 85
    prev = 0;
  } else {

  }
#line 86
  _spin_unlock(& mdev->epoch_lock);
#line 87
  return (prev);
}
}
#line 92 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_first_page_or_try_alloc(struct drbd_conf *mdev ) 
{ 
  struct page *page ;

  {
#line 94
  page = 0;
#line 98
  if (drbd_pp_vacant > 0) {
#line 99
    _spin_lock(& drbd_pp_lock);
#line 100
    page = drbd_pp_pool;
#line 101
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 102
      drbd_pp_pool = (struct page *)page->ldv_12035.ldv_12031.private;
#line 103
      page->ldv_12035.ldv_12031.private = 0UL;
#line 104
      drbd_pp_vacant = drbd_pp_vacant - 1;
    } else {

    }
#line 106
    _spin_unlock(& drbd_pp_lock);
  } else {

  }
#line 111
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 112
    page = alloc_pages(514U, 0U);
  } else {

  }
#line 113
  if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 114
    atomic_inc(& mdev->pp_in_use);
  } else {

  }
#line 115
  return (page);
}
}
#line 121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void maybe_kick_lo(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 123
  tmp = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 123
  if (tmp >= (mdev->net_conf)->unplug_watermark) {
#line 124
    drbd_kick_lo(mdev);
  } else {

  }
#line 125
  return;
}
}
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void reclaim_net_ee(struct drbd_conf *mdev , struct list_head *to_be_freed ) 
{ 
  struct drbd_epoch_entry *e ;
  struct list_head *le ;
  struct list_head *tle ;
  struct list_head  const  *__mptr ;
  int tmp ;

  {
#line 137
  le = mdev->net_ee.next;
#line 137
  tle = le->next;
#line 137
  goto ldv_41510;
  ldv_41509: 
#line 138
  __mptr = (struct list_head  const  *)le;
#line 138
  e = (struct drbd_epoch_entry *)__mptr;
#line 139
  tmp = drbd_bio_has_active_page___0(e->private_bio);
#line 139
  if (tmp != 0) {
#line 140
    goto ldv_41508;
  } else {

  }
#line 141
  list_move(le, to_be_freed);
#line 137
  le = tle;
#line 137
  tle = le->next;
  ldv_41510: ;
#line 137
  if ((unsigned long )(& mdev->net_ee) != (unsigned long )le) {
#line 138
    goto ldv_41509;
  } else {

  }
  ldv_41508: ;
#line 142
  return;
}
}
#line 145 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_kick_lo_and_reclaim_net(struct drbd_conf *mdev ) 
{ 
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 147
  reclaimed.next = & reclaimed;
#line 147
  reclaimed.prev = & reclaimed;
#line 150
  maybe_kick_lo(mdev);
#line 151
  _spin_lock_irq(& mdev->req_lock);
#line 152
  reclaim_net_ee(mdev, & reclaimed);
#line 153
  _spin_unlock_irq(& mdev->req_lock);
#line 155
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 155
  e = (struct drbd_epoch_entry *)__mptr;
#line 155
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 155
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 155
  goto ldv_41524;
  ldv_41523: 
#line 156
  drbd_free_ee(mdev, e);
#line 155
  e = t;
#line 155
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 155
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_41524: ;
#line 155
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 156
    goto ldv_41523;
  } else {

  }

#line 160
  return;
}
}
#line 168 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct page *drbd_pp_alloc(struct drbd_conf *mdev , int retry ) 
{ 
  struct page *page ;
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;

  {
#line 170
  page = 0;
#line 171
  tmp = get_current();
#line 171
  wait.flags = 0U;
#line 171
  wait.private = (void *)tmp;
#line 171
  wait.func = & autoremove_wake_function;
#line 171
  wait.task_list.next = & wait.task_list;
#line 171
  wait.task_list.prev = & wait.task_list;
#line 173
  tmp___0 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 173
  if (tmp___0 < (mdev->net_conf)->max_buffers) {
#line 174
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 175
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 176
      return (page);
    } else {

    }
  } else {

  }
  ldv_41533: 
#line 180
  prepare_to_wait(& drbd_pp_wait, & wait, 1);
#line 182
  drbd_kick_lo_and_reclaim_net(mdev);
#line 184
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 184
  if (tmp___1 < (mdev->net_conf)->max_buffers) {
#line 185
    page = drbd_pp_first_page_or_try_alloc(mdev);
#line 186
    if ((unsigned long )page != (unsigned long )((struct page *)0)) {
#line 187
      goto ldv_41532;
    } else {

    }
  } else {

  }
#line 190
  if (retry == 0) {
#line 191
    goto ldv_41532;
  } else {

  }
#line 193
  tmp___4 = get_current();
#line 193
  tmp___5 = signal_pending(tmp___4);
#line 193
  if (tmp___5 != 0) {
#line 194
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 194
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 194
    printk("<4>%s %s: drbd_pp_alloc interrupted!\n", tmp___3, tmp___2);
#line 195
    goto ldv_41532;
  } else {

  }
#line 198
  schedule();
#line 199
  goto ldv_41533;
  ldv_41532: 
#line 200
  finish_wait(& drbd_pp_wait, & wait);
#line 202
  return (page);
}
}
#line 207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free(struct drbd_conf *mdev , struct page *page ) 
{ 
  int free_it ;

  {
#line 211
  _spin_lock(& drbd_pp_lock);
#line 212
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 213
    free_it = 1;
  } else {
#line 215
    page->ldv_12035.ldv_12031.private = (unsigned long )drbd_pp_pool;
#line 216
    drbd_pp_pool = page;
#line 217
    drbd_pp_vacant = drbd_pp_vacant + 1;
#line 218
    free_it = 0;
  }
#line 220
  _spin_unlock(& drbd_pp_lock);
#line 222
  atomic_dec(& mdev->pp_in_use);
#line 224
  if (free_it != 0) {
#line 225
    __free_pages(page, 0U);
  } else {

  }
#line 227
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 228
  return;
}
}
#line 230 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_pp_free_bio_pages(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct page *p_to_be_freed ;
  struct page *page ;
  struct bio_vec *bvec ;
  int i ;

  {
#line 232
  p_to_be_freed = 0;
#line 237
  _spin_lock(& drbd_pp_lock);
#line 238
  bvec = bio->bi_io_vec;
#line 238
  i = 0;
#line 238
  goto ldv_41548;
  ldv_41547: ;
#line 239
  if ((unsigned long )drbd_pp_vacant > (unsigned long )minor_count * 8UL) {
#line 240
    (bvec->bv_page)->ldv_12035.ldv_12031.private = (unsigned long )p_to_be_freed;
#line 241
    p_to_be_freed = bvec->bv_page;
  } else {
#line 243
    (bvec->bv_page)->ldv_12035.ldv_12031.private = (unsigned long )drbd_pp_pool;
#line 244
    drbd_pp_pool = bvec->bv_page;
#line 245
    drbd_pp_vacant = drbd_pp_vacant + 1;
  }
#line 238
  bvec = bvec + 1;
#line 238
  i = i + 1;
  ldv_41548: ;
#line 238
  if ((int )bio->bi_vcnt > i) {
#line 239
    goto ldv_41547;
  } else {

  }
#line 248
  _spin_unlock(& drbd_pp_lock);
#line 249
  atomic_sub((int )bio->bi_vcnt, & mdev->pp_in_use);
#line 251
  goto ldv_41551;
  ldv_41550: 
#line 252
  page = p_to_be_freed;
#line 253
  p_to_be_freed = (struct page *)page->ldv_12035.ldv_12031.private;
#line 254
  page->ldv_12035.ldv_12031.private = 0UL;
#line 255
  put_page(page);
  ldv_41551: ;
#line 251
  if ((unsigned long )p_to_be_freed != (unsigned long )((struct page *)0)) {
#line 252
    goto ldv_41550;
  } else {

  }
#line 258
  __wake_up(& drbd_pp_wait, 3U, 1, 0);
#line 259
  return;
}
}
#line 276 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct drbd_epoch_entry *drbd_alloc_ee(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                       unsigned int data_size , gfp_t gfp_mask ) 
{ 
  struct request_queue *q ;
  struct drbd_epoch_entry *e ;
  struct page *page ;
  struct bio *bio ;
  unsigned int ds ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  struct bvec_merge_data bvm ;
  int l ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int __min1 ;
  int __min2 ;
  int tmp___20 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;

  {
#line 288
  tmp = drbd_insert_fault(mdev, 8U);
#line 288
  if (tmp != 0) {
#line 289
    return (0);
  } else {

  }
#line 291
  tmp___0 = mempool_alloc(drbd_ee_mempool, gfp_mask & 4294967293U);
#line 291
  e = (struct drbd_epoch_entry *)tmp___0;
#line 292
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 293
    if ((gfp_mask & 512U) == 0U) {
#line 294
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
      printk("<3>%s %s: alloc_ee: Allocation of an EE failed\n", tmp___2, tmp___1);
    } else {

    }
#line 295
    return (0);
  } else {

  }
#line 298
  bio = bio_alloc(gfp_mask & 4294967293U, (int )(data_size / 4096U + ((data_size & 4095U) != 0U ? 1U : 0U)));
#line 299
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 300
    if ((gfp_mask & 512U) == 0U) {
#line 301
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 301
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 301
      printk("<3>%s %s: alloc_ee: Allocation of a bio failed\n", tmp___4, tmp___3);
    } else {

    }
#line 302
    goto fail1;
  } else {

  }
#line 305
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 306
  bio->bi_sector = sector;
#line 308
  ds = data_size;
#line 309
  goto ldv_41576;
  ldv_41575: 
#line 310
  page = drbd_pp_alloc(mdev, (int )gfp_mask & 16);
#line 311
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 312
    if ((gfp_mask & 512U) == 0U) {
#line 313
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 313
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 313
      printk("<3>%s %s: alloc_ee: Allocation of a page failed\n", tmp___6, tmp___5);
    } else {

    }
#line 314
    goto fail2;
  } else {

  }
#line 316
  __min1 = (int )ds;
#line 316
  __min2 = 4096;
#line 316
  tmp___20 = bio_add_page(bio, page, (unsigned int )(__min1 < __min2 ? __min1 : __min2),
                          0U);
#line 316
  if (tmp___20 == 0) {
#line 317
    drbd_pp_free(mdev, page);
#line 318
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 318
    printk("<3>%s %s: alloc_ee: bio_add_page(s=%llu,data_size=%u,ds=%u) failed\n",
           tmp___8, tmp___7, (unsigned long long )sector, data_size, ds);
#line 322
    q = bdev_get_queue(bio->bi_bdev);
#line 323
    if ((unsigned long )q->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 324
      bvm.bi_bdev = bio->bi_bdev;
#line 324
      bvm.bi_sector = bio->bi_sector;
#line 324
      bvm.bi_size = bio->bi_size;
#line 324
      bvm.bi_rw = bio->bi_rw;
#line 330
      tmp___9 = (*(q->merge_bvec_fn))(q, & bvm, bio->bi_io_vec + (unsigned long )bio->bi_vcnt);
#line 330
      l = tmp___9;
#line 332
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 332
      printk("<3>%s %s: merge_bvec_fn() = %d\n", tmp___11, tmp___10, l);
    } else {

    }
#line 336
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    printk("<3>%s %s: bio->bi_max_vecs = %d\n", tmp___13, tmp___12, bio->bi_max_vecs);
#line 337
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 337
    printk("<3>%s %s: bio->bi_vcnt = %d\n", tmp___15, tmp___14, (int )bio->bi_vcnt);
#line 338
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 338
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 338
    printk("<3>%s %s: bio->bi_size = %d\n", tmp___17, tmp___16, bio->bi_size);
#line 339
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 339
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 339
    printk("<3>%s %s: bio->bi_phys_segments = %d\n", tmp___19, tmp___18, bio->bi_phys_segments);
#line 341
    goto fail2;
  } else {

  }
#line 344
  __min1___0 = (int )ds;
#line 344
  __min2___0 = 4096;
#line 344
  ds = ds - (unsigned int )(__min1___0 < __min2___0 ? __min1___0 : __min2___0);
  ldv_41576: ;
#line 309
  if (ds != 0U) {
#line 310
    goto ldv_41575;
  } else {

  }

#line 347
  if (bio->bi_size != data_size) {
#line 347
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 347
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 347
    printk("<3>%s %s: ASSERT( data_size == bio->bi_size ) in %s:%d\n", tmp___22, tmp___21,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           347);
  } else {

  }
#line 349
  bio->bi_private = (void *)e;
#line 350
  e->mdev = mdev;
#line 351
  e->sector = sector;
#line 352
  e->size = bio->bi_size;
#line 354
  e->private_bio = bio;
#line 355
  e->block_id = id;
#line 356
  INIT_HLIST_NODE(& e->colision);
#line 357
  e->epoch = 0;
#line 358
  e->flags = 0U;
#line 360
  return (e);
  fail2: 
#line 363
  drbd_pp_free_bio_pages(mdev, bio);
#line 364
  bio_put(bio);
  fail1: 
#line 366
  mempool_free((void *)e, drbd_ee_mempool);
#line 368
  return (0);
}
}
#line 371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_free_ee(struct drbd_conf *mdev , struct drbd_epoch_entry *e ) 
{ 
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 373
  bio = e->private_bio;
#line 374
  drbd_pp_free_bio_pages(mdev, bio);
#line 375
  bio_put(bio);
#line 376
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 376
  if (tmp___1 == 0) {
#line 376
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 376
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 376
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           376);
  } else {

  }
#line 377
  mempool_free((void *)e, drbd_ee_mempool);
#line 378
  return;
}
}
#line 380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_release_ee(struct drbd_conf *mdev , struct list_head *list ) 
{ 
  struct list_head work_list ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int count ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;

  {
#line 382
  work_list.next = & work_list;
#line 382
  work_list.prev = & work_list;
#line 384
  count = 0;
#line 386
  _spin_lock_irq(& mdev->req_lock);
#line 387
  list_splice_init(list, & work_list);
#line 388
  _spin_unlock_irq(& mdev->req_lock);
#line 390
  __mptr = (struct list_head  const  *)work_list.next;
#line 390
  e = (struct drbd_epoch_entry *)__mptr;
#line 390
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 390
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 390
  goto ldv_41598;
  ldv_41597: 
#line 391
  drbd_free_ee(mdev, e);
#line 392
  count = count + 1;
#line 390
  e = t;
#line 390
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 390
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_41598: ;
#line 390
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 391
    goto ldv_41597;
  } else {

  }

#line 394
  return (count);
}
}
#line 407 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_process_done_ee(struct drbd_conf *mdev ) 
{ 
  struct list_head work_list ;
  struct list_head reclaimed ;
  struct drbd_epoch_entry *e ;
  struct drbd_epoch_entry *t ;
  int ok ;
  struct list_head  const  *__mptr ;
  struct list_head  const  *__mptr___0 ;
  struct list_head  const  *__mptr___1 ;
  struct list_head  const  *__mptr___2 ;
  struct list_head  const  *__mptr___3 ;
  int tmp ;
  struct list_head  const  *__mptr___4 ;

  {
#line 409
  work_list.next = & work_list;
#line 409
  work_list.prev = & work_list;
#line 410
  reclaimed.next = & reclaimed;
#line 410
  reclaimed.prev = & reclaimed;
#line 412
  ok = (int )mdev->state.ldv_32167.conn > 8;
#line 414
  _spin_lock_irq(& mdev->req_lock);
#line 415
  reclaim_net_ee(mdev, & reclaimed);
#line 416
  list_splice_init(& mdev->done_ee, & work_list);
#line 417
  _spin_unlock_irq(& mdev->req_lock);
#line 419
  __mptr = (struct list_head  const  *)reclaimed.next;
#line 419
  e = (struct drbd_epoch_entry *)__mptr;
#line 419
  __mptr___0 = (struct list_head  const  *)e->w.list.next;
#line 419
  t = (struct drbd_epoch_entry *)__mptr___0;
#line 419
  goto ldv_41615;
  ldv_41614: 
#line 420
  drbd_free_ee(mdev, e);
#line 419
  e = t;
#line 419
  __mptr___1 = (struct list_head  const  *)t->w.list.next;
#line 419
  t = (struct drbd_epoch_entry *)__mptr___1;
  ldv_41615: ;
#line 419
  if ((unsigned long )(& e->w.list) != (unsigned long )(& reclaimed)) {
#line 420
    goto ldv_41614;
  } else {

  }
#line 426
  __mptr___2 = (struct list_head  const  *)work_list.next;
#line 426
  e = (struct drbd_epoch_entry *)__mptr___2;
#line 426
  __mptr___3 = (struct list_head  const  *)e->w.list.next;
#line 426
  t = (struct drbd_epoch_entry *)__mptr___3;
#line 426
  goto ldv_41624;
  ldv_41623: 
#line 428
  tmp = (*(e->w.cb))(mdev, & e->w, ok == 0);
#line 428
  ok = tmp != 0 && ok != 0;
#line 429
  drbd_free_ee(mdev, e);
#line 426
  e = t;
#line 426
  __mptr___4 = (struct list_head  const  *)t->w.list.next;
#line 426
  t = (struct drbd_epoch_entry *)__mptr___4;
  ldv_41624: ;
#line 426
  if ((unsigned long )(& e->w.list) != (unsigned long )(& work_list)) {
#line 427
    goto ldv_41623;
  } else {

  }
#line 431
  __wake_up(& mdev->ee_wait, 3U, 1, 0);
#line 433
  return (ok);
}
}
#line 436 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void _drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 438
  tmp = get_current();
#line 438
  wait.flags = 0U;
#line 438
  wait.private = (void *)tmp;
#line 438
  wait.func = & autoremove_wake_function;
#line 438
  wait.task_list.next = & wait.task_list;
#line 438
  wait.task_list.prev = & wait.task_list;
#line 442
  goto ldv_41632;
  ldv_41631: 
#line 443
  prepare_to_wait(& mdev->ee_wait, & wait, 2);
#line 444
  _spin_unlock_irq(& mdev->req_lock);
#line 445
  drbd_kick_lo(mdev);
#line 446
  schedule();
#line 447
  finish_wait(& mdev->ee_wait, & wait);
#line 448
  _spin_lock_irq(& mdev->req_lock);
  ldv_41632: 
#line 442
  tmp___0 = list_empty((struct list_head  const  *)head);
#line 442
  if (tmp___0 == 0) {
#line 443
    goto ldv_41631;
  } else {

  }

#line 447
  return;
}
}
#line 452 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_wait_ee_list_empty(struct drbd_conf *mdev , struct list_head *head ) 
{ 


  {
#line 454
  _spin_lock_irq(& mdev->req_lock);
#line 455
  _drbd_wait_ee_list_empty(mdev, head);
#line 456
  _spin_unlock_irq(& mdev->req_lock);
#line 457
  return;
}
}
#line 461 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_accept(struct drbd_conf *mdev , char const   **what , struct socket *sock ,
                       struct socket **newsock ) 
{ 
  struct sock *sk ;
  int err ;

  {
#line 464
  sk = sock->sk;
#line 465
  err = 0;
#line 467
  *what = "listen";
#line 468
  err = (*((sock->ops)->listen))(sock, 5);
#line 469
  if (err < 0) {
#line 470
    goto out;
  } else {

  }
#line 472
  *what = "sock_create_lite";
#line 473
  err = sock_create_lite((int )sk->__sk_common.skc_family, (int )sk->sk_type, (int )sk->sk_protocol,
                         newsock);
#line 475
  if (err < 0) {
#line 476
    goto out;
  } else {

  }
#line 478
  *what = "accept";
#line 479
  err = (*((sock->ops)->accept))(sock, *newsock, 0);
#line 480
  if (err < 0) {
#line 481
    sock_release(*newsock);
#line 482
    *newsock = 0;
#line 483
    goto out;
  } else {

  }
#line 485
  (*newsock)->ops = sock->ops;
  out: ;
#line 488
  return (err);
}
}
#line 491 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_short(struct drbd_conf *mdev , struct socket *sock , void *buf ,
                           size_t size , int flags ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  struct thread_info *tmp___1 ;

  {
#line 495
  iov.iov_base = buf;
#line 495
  iov.iov_len = size;
#line 499
  msg.msg_name = 0;
#line 499
  msg.msg_namelen = 0;
#line 499
  msg.msg_iov = (struct iovec *)(& iov);
#line 499
  msg.msg_iovlen = 1UL;
#line 499
  msg.msg_control = 0;
#line 499
  msg.msg_controllen = 0UL;
#line 499
  msg.msg_flags = flags != 0 ? (unsigned int )flags : 16640U;
#line 506
  tmp = current_thread_info();
#line 506
  oldfs = tmp->addr_limit;
#line 507
  tmp___0 = current_thread_info();
#line 507
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 507
  tmp___0->addr_limit = __constr_expr_0;
#line 508
  rv = sock_recvmsg(sock, & msg, size, (int )msg.msg_flags);
#line 509
  tmp___1 = current_thread_info();
#line 509
  tmp___1->addr_limit = oldfs;
#line 511
  return (rv);
}
}
#line 514 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv(struct drbd_conf *mdev , void *buf , size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  struct thread_info *tmp ;
  struct thread_info *tmp___0 ;
  mm_segment_t __constr_expr_0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  struct thread_info *tmp___7 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 517
  iov.iov_base = buf;
#line 517
  iov.iov_len = size;
#line 521
  msg.msg_name = 0;
#line 521
  msg.msg_namelen = 0;
#line 521
  msg.msg_iov = (struct iovec *)(& iov);
#line 521
  msg.msg_iovlen = 1UL;
#line 521
  msg.msg_control = 0;
#line 521
  msg.msg_controllen = 0UL;
#line 521
  msg.msg_flags = 16640U;
#line 528
  tmp = current_thread_info();
#line 528
  oldfs = tmp->addr_limit;
#line 529
  tmp___0 = current_thread_info();
#line 529
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 529
  tmp___0->addr_limit = __constr_expr_0;
  ldv_41670: 
#line 532
  rv = sock_recvmsg(mdev->data.socket, & msg, size, (int )msg.msg_flags);
#line 533
  if ((size_t )rv == size) {
#line 534
    goto ldv_41669;
  } else {

  }
#line 541
  if (rv < 0) {
#line 542
    if (rv == -104) {
#line 543
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 543
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 543
      printk("<6>%s %s: sock was reset by peer\n", tmp___2, tmp___1);
    } else
#line 544
    if (rv != -512) {
#line 545
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 545
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 545
      printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___4, tmp___3, rv);
    } else {

    }
#line 546
    goto ldv_41669;
  } else
#line 547
  if (rv == 0) {
#line 548
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 548
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 548
    printk("<6>%s %s: sock was shut down by peer\n", tmp___6, tmp___5);
#line 549
    goto ldv_41669;
  } else {
#line 555
    goto ldv_41669;
  }
#line 557
  goto ldv_41670;
  ldv_41669: 
#line 559
  tmp___7 = current_thread_info();
#line 559
  tmp___7->addr_limit = oldfs;
#line 561
  if ((size_t )rv != size) {
#line 562
    val.i = 0U;
#line 562
    val.ldv_32167.conn = 4U;
#line 562
    mask.i = 0U;
#line 562
    mask.ldv_32167.conn = 31U;
#line 562
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 564
  return (rv);
}
}
#line 567 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_try_connect(struct drbd_conf *mdev ) 
{ 
  char const   *what ;
  struct socket *sock ;
  struct sockaddr_in6 src_in6 ;
  int err ;
  int disconnect_on_error ;
  int tmp ;
  long tmp___0 ;
  size_t __len ;
  int __min1 ;
  int __min2 ;
  void *__ret ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 573
  disconnect_on_error = 1;
#line 575
  tmp = get_net_conf(mdev);
#line 575
  if (tmp == 0) {
#line 576
    return (0);
  } else {

  }
#line 578
  what = "sock_create_kern";
#line 579
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & sock);
#line 581
  if (err < 0) {
#line 582
    sock = 0;
#line 583
    goto out;
  } else {

  }
#line 586
  tmp___0 = (long )((mdev->net_conf)->try_connect_int * 250);
#line 586
  (sock->sk)->sk_sndtimeo = tmp___0;
#line 586
  (sock->sk)->sk_rcvtimeo = tmp___0;
#line 596
  __min1 = (mdev->net_conf)->my_addr_len;
#line 596
  __min2 = 28;
#line 596
  __len = (size_t )(__min1 < __min2 ? __min1 : __min2);
#line 596
  __ret = __builtin_memcpy((void *)(& src_in6), (void const   *)(& (mdev->net_conf)->my_addr),
                           __len);
#line 598
  if ((unsigned int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family == 10U) {
#line 599
    src_in6.sin6_port = 0U;
  } else {
#line 601
    ((struct sockaddr_in *)(& src_in6))->sin_port = 0U;
  }
#line 603
  what = "bind before connect";
#line 604
  err = (*((sock->ops)->bind))(sock, (struct sockaddr *)(& src_in6), (mdev->net_conf)->my_addr_len);
#line 607
  if (err < 0) {
#line 608
    goto out;
  } else {

  }
#line 612
  disconnect_on_error = 0;
#line 613
  what = "connect";
#line 614
  err = (*((sock->ops)->connect))(sock, (struct sockaddr *)(& (mdev->net_conf)->peer_addr),
                                  (mdev->net_conf)->peer_addr_len, 0);
  out: ;
#line 619
  if (err < 0) {
#line 620
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 621
      sock_release(sock);
#line 622
      sock = 0;
    } else {

    }
#line 624
    switch (- err) {
    case 110: ;
    case 11: ;
    case 115: ;
    case 4: ;
    case 512: ;
    case 111: ;
    case 101: ;
    case 112: ;
    case 113: 
#line 631
    disconnect_on_error = 0;
#line 632
    goto ldv_41702;
    default: 
#line 634
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
    }
    ldv_41702: ;
#line 636
    if (disconnect_on_error != 0) {
#line 637
      val.i = 0U;
#line 637
      val.ldv_32167.conn = 1U;
#line 637
      mask.i = 0U;
#line 637
      mask.ldv_32167.conn = 31U;
#line 637
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 639
  put_net_conf(mdev);
#line 640
  return (sock);
}
}
#line 643 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct socket *drbd_wait_for_connect(struct drbd_conf *mdev ) 
{ 
  int timeo ;
  int err ;
  struct socket *s_estab ;
  struct socket *s_listen ;
  char const   *what ;
  int tmp ;
  u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 646
  s_estab = 0;
#line 649
  tmp = get_net_conf(mdev);
#line 649
  if (tmp == 0) {
#line 650
    return (0);
  } else {

  }
#line 652
  what = "sock_create_kern";
#line 653
  err = sock_create_kern((int )((struct sockaddr *)(& (mdev->net_conf)->my_addr))->sa_family,
                         1, 6, & s_listen);
#line 655
  if (err != 0) {
#line 656
    s_listen = 0;
#line 657
    goto out;
  } else {

  }
#line 660
  timeo = (mdev->net_conf)->try_connect_int * 250;
#line 661
  tmp___0 = random32();
#line 661
  timeo = ((int )tmp___0 & 1 ? timeo / 7 : - timeo / 7) + timeo;
#line 663
  (s_listen->sk)->__sk_common.skc_reuse = 1U;
#line 664
  (s_listen->sk)->sk_rcvtimeo = (long )timeo;
#line 665
  (s_listen->sk)->sk_sndtimeo = (long )timeo;
#line 667
  what = "bind before listen";
#line 668
  err = (*((s_listen->ops)->bind))(s_listen, (struct sockaddr *)(& (mdev->net_conf)->my_addr),
                                   (mdev->net_conf)->my_addr_len);
#line 671
  if (err < 0) {
#line 672
    goto out;
  } else {

  }
#line 674
  err = drbd_accept(mdev, & what, s_listen, & s_estab);
  out: ;
#line 677
  if ((unsigned long )s_listen != (unsigned long )((struct socket *)0)) {
#line 678
    sock_release(s_listen);
  } else {

  }
#line 679
  if (err < 0) {
#line 680
    if ((err != -11 && err != -4) && err != -512) {
#line 681
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 681
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 681
      printk("<3>%s %s: %s failed, err = %d\n", tmp___2, tmp___1, what, err);
#line 682
      val.i = 0U;
#line 682
      val.ldv_32167.conn = 1U;
#line 682
      mask.i = 0U;
#line 682
      mask.ldv_32167.conn = 31U;
#line 682
      drbd_force_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 685
  put_net_conf(mdev);
#line 687
  return (s_estab);
}
}
#line 690 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_fp(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ) 
{ 
  struct p_header *h ;
  int tmp ;

  {
#line 693
  h = & mdev->data.sbuf.header;
#line 695
  tmp = _drbd_send_cmd(mdev, sock, cmd, h, 8UL, 0U);
#line 695
  return (tmp);
}
}
#line 698 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_packets drbd_recv_fp(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  struct p_header *h ;
  int rr ;
  __u16 tmp ;

  {
#line 700
  h = & mdev->data.sbuf.header;
#line 703
  rr = drbd_recv_short(mdev, sock, (void *)h, 8UL, 0);
#line 705
  if (rr == 8 && h->magic == 1728214147U) {
#line 706
    tmp = __fswab16((int )h->command);
#line 706
    return ((enum drbd_packets )tmp);
  } else {

  }
#line 708
  return (65535);
}
}
#line 716 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_socket_okay(struct drbd_conf *mdev , struct socket **sock ) 
{ 
  int rr ;
  char tb[4U] ;

  {
#line 721
  if ((unsigned long )*sock == (unsigned long )((struct socket *)0)) {
#line 722
    return (0);
  } else {

  }
#line 724
  rr = drbd_recv_short(mdev, *sock, (void *)(& tb), 4UL, 66);
#line 726
  if (rr > 0 || rr == -11) {
#line 727
    return (1);
  } else {
#line 729
    sock_release(*sock);
#line 730
    *sock = 0;
#line 731
    return (0);
  }
}
}
#line 743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_connect(struct drbd_conf *mdev ) 
{ 
  struct socket *s ;
  struct socket *sock ;
  struct socket *msock ;
  int try ;
  int h ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  enum drbd_packets tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  u32 tmp___17 ;
  struct task_struct *tmp___18 ;
  enum drbd_thread_state tmp___19 ;
  struct task_struct *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  long tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___29 ;

  {
#line 748
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 748
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 748
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 748
    printk("<3>%s %s: ASSERT( !mdev->data.socket ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           748);
  } else {

  }
#line 750
  tmp___3 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 750
  if (tmp___3 != 0) {
#line 751
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 751
    printk("<3>%s %s: CREATE_BARRIER flag was set in drbd_connect - now cleared!\n",
           tmp___2, tmp___1);
  } else {

  }
#line 753
  val.i = 0U;
#line 753
  val.ldv_32167.conn = 8U;
#line 753
  mask.i = 0U;
#line 753
  mask.ldv_32167.conn = 31U;
#line 753
  tmp___4 = drbd_request_state(mdev, mask, val);
#line 753
  if (tmp___4 <= 0) {
#line 754
    return (-2);
  } else {

  }
#line 756
  clear_bit(7, (unsigned long volatile   *)(& mdev->flags));
#line 758
  sock = 0;
#line 759
  msock = 0;
  ldv_41761: 
#line 762
  try = 0;
  ldv_41753: 
#line 764
  s = drbd_try_connect(mdev);
#line 765
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 766
    goto ldv_41752;
  } else {
#line 765
    try = try + 1;
#line 765
    if (try > 2) {
#line 766
      goto ldv_41752;
    } else {

    }
  }
#line 768
  tmp___5 = get_current();
#line 768
  tmp___5->state = 1L;
#line 769
  schedule_timeout(25L);
#line 770
  goto ldv_41753;
  ldv_41752: ;
#line 772
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 773
    if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 774
      drbd_send_fp(mdev, s, P_HAND_SHAKE_S);
#line 775
      sock = s;
#line 776
      s = 0;
    } else
#line 777
    if ((unsigned long )msock == (unsigned long )((struct socket *)0)) {
#line 778
      drbd_send_fp(mdev, s, P_HAND_SHAKE_M);
#line 779
      msock = s;
#line 780
      s = 0;
    } else {
#line 782
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 782
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 782
      printk("<3>%s %s: Logic error in drbd_connect()\n", tmp___7, tmp___6);
#line 783
      goto out_release_sockets;
    }
  } else {

  }
#line 787
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 788
    tmp___8 = get_current();
#line 788
    tmp___8->state = 1L;
#line 789
    schedule_timeout(25L);
#line 790
    ok = drbd_socket_okay(mdev, & sock);
#line 791
    tmp___9 = drbd_socket_okay(mdev, & msock);
#line 791
    ok = tmp___9 != 0 && ok != 0;
#line 792
    if (ok != 0) {
#line 793
      goto ldv_41755;
    } else {

    }
  } else {

  }
  retry: 
#line 797
  s = drbd_wait_for_connect(mdev);
#line 798
  if ((unsigned long )s != (unsigned long )((struct socket *)0)) {
#line 799
    tmp___10 = drbd_recv_fp(mdev, s);
#line 799
    try = (int )tmp___10;
#line 800
    drbd_socket_okay(mdev, & sock);
#line 801
    drbd_socket_okay(mdev, & msock);
#line 802
    switch (try) {
    case 65522: ;
#line 804
    if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 805
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 805
      printk("<4>%s %s: initial packet S crossed\n", tmp___12, tmp___11);
#line 806
      sock_release(sock);
    } else {

    }
#line 808
    sock = s;
#line 809
    goto ldv_41758;
    case 65521: ;
#line 811
    if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 812
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 812
      printk("<4>%s %s: initial packet M crossed\n", tmp___14, tmp___13);
#line 813
      sock_release(msock);
    } else {

    }
#line 815
    msock = s;
#line 816
    set_bit(7U, (unsigned long volatile   *)(& mdev->flags));
#line 817
    goto ldv_41758;
    default: 
#line 819
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 819
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 819
    printk("<4>%s %s: Error receiving initial packet\n", tmp___16, tmp___15);
#line 820
    sock_release(s);
#line 821
    tmp___17 = random32();
#line 821
    if ((int )tmp___17 & 1) {
#line 822
      goto retry;
    } else {

    }
    }
    ldv_41758: ;
  } else {

  }
#line 826
  if ((int )mdev->state.ldv_32167.conn <= 1) {
#line 827
    goto out_release_sockets;
  } else {

  }
#line 828
  tmp___20 = get_current();
#line 828
  tmp___21 = signal_pending(tmp___20);
#line 828
  if (tmp___21 != 0) {
#line 829
    tmp___18 = get_current();
#line 829
    flush_signals(tmp___18);
#line 830
    __asm__  volatile   ("": : : "memory");
#line 831
    tmp___19 = get_t_state(& mdev->receiver);
#line 831
    if ((unsigned int )tmp___19 == 2U) {
#line 832
      goto out_release_sockets;
    } else {

    }
  } else {

  }
#line 835
  if ((unsigned long )sock != (unsigned long )((struct socket *)0) && (unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 836
    ok = drbd_socket_okay(mdev, & sock);
#line 837
    tmp___22 = drbd_socket_okay(mdev, & msock);
#line 837
    ok = tmp___22 != 0 && ok != 0;
#line 838
    if (ok != 0) {
#line 839
      goto ldv_41755;
    } else {

    }
  } else {

  }
#line 841
  goto ldv_41761;
  ldv_41755: 
#line 843
  (msock->sk)->__sk_common.skc_reuse = 1U;
#line 844
  (sock->sk)->__sk_common.skc_reuse = 1U;
#line 846
  (sock->sk)->sk_allocation = 16U;
#line 847
  (msock->sk)->sk_allocation = 16U;
#line 849
  (sock->sk)->sk_priority = 4U;
#line 850
  (msock->sk)->sk_priority = 6U;
#line 852
  if ((mdev->net_conf)->sndbuf_size != 0) {
#line 853
    (sock->sk)->sk_sndbuf = (mdev->net_conf)->sndbuf_size;
#line 854
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 1U);
  } else {

  }
#line 857
  if ((mdev->net_conf)->rcvbuf_size != 0) {
#line 858
    (sock->sk)->sk_rcvbuf = (mdev->net_conf)->rcvbuf_size;
#line 859
    (sock->sk)->sk_userlocks = (unsigned char )((unsigned int )(sock->sk)->sk_userlocks | 2U);
  } else {

  }
#line 867
  tmp___23 = (long )(((mdev->net_conf)->ping_timeo * 1000) / 10);
#line 867
  (sock->sk)->sk_rcvtimeo = tmp___23;
#line 867
  (sock->sk)->sk_sndtimeo = tmp___23;
#line 870
  (msock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 871
  (msock->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 875
  drbd_tcp_nodelay(sock);
#line 876
  drbd_tcp_nodelay(msock);
#line 878
  mdev->data.socket = sock;
#line 879
  mdev->meta.socket = msock;
#line 880
  mdev->last_received = jiffies;
#line 882
  if ((unsigned long )mdev->asender.task != (unsigned long )((struct task_struct *)0)) {
#line 882
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 882
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 882
    printk("<3>%s %s: ASSERT( mdev->asender.task == NULL ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           882);
  } else {

  }
#line 884
  h = drbd_do_handshake(mdev);
#line 885
  if (h <= 0) {
#line 886
    return (h);
  } else {

  }
#line 888
  if ((unsigned long )mdev->cram_hmac_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 890
    tmp___28 = drbd_do_auth(mdev);
#line 890
    if (tmp___28 == 0) {
#line 891
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 891
      printk("<3>%s %s: Authentication of peer failed\n", tmp___27, tmp___26);
#line 892
      return (-1);
    } else {

    }
  } else {

  }
#line 896
  val___0.i = 0U;
#line 896
  val___0.ldv_32167.conn = 9U;
#line 896
  mask___0.i = 0U;
#line 896
  mask___0.ldv_32167.conn = 31U;
#line 896
  tmp___29 = drbd_request_state(mdev, mask___0, val___0);
#line 896
  if (tmp___29 <= 0) {
#line 897
    return (0);
  } else {

  }
#line 899
  (sock->sk)->sk_sndtimeo = (long )(((mdev->net_conf)->timeout * 250) / 10);
#line 900
  (sock->sk)->sk_rcvtimeo = 9223372036854775807L;
#line 902
  atomic_set(& mdev->packet_seq, 0);
#line 903
  mdev->peer_seq = 0U;
#line 905
  drbd_thread_start(& mdev->asender);
#line 907
  drbd_send_protocol(mdev);
#line 908
  drbd_send_sync_param(mdev, & mdev->sync_conf);
#line 909
  drbd_send_sizes(mdev, 0);
#line 910
  drbd_send_uuids(mdev);
#line 911
  drbd_send_state(mdev);
#line 912
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 913
  clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 915
  return (1);
  out_release_sockets: ;
#line 918
  if ((unsigned long )sock != (unsigned long )((struct socket *)0)) {
#line 919
    sock_release(sock);
  } else {

  }
#line 920
  if ((unsigned long )msock != (unsigned long )((struct socket *)0)) {
#line 921
    sock_release(msock);
  } else {

  }
#line 922
  return (-1);
}
}
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_recv_header(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;
  __u16 tmp___2 ;
  __u16 tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;

  {
#line 929
  r = drbd_recv(mdev, (void *)h, 8UL);
#line 931
  tmp___1 = __builtin_expect(r != 8, 0L);
#line 931
  if (tmp___1 != 0L) {
#line 932
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 932
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 932
    printk("<3>%s %s: short read expecting header on sock: r=%d\n", tmp___0, tmp,
           r);
#line 933
    return (0);
  } else {

  }
#line 935
  tmp___2 = __fswab16((int )h->command);
#line 935
  h->command = tmp___2;
#line 936
  tmp___3 = __fswab16((int )h->length);
#line 936
  h->length = tmp___3;
#line 937
  tmp___7 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 937
  if (tmp___7 != 0L) {
#line 938
    tmp___4 = __fswab32(h->magic);
#line 938
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 938
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 938
    printk("<3>%s %s: magic?? on data m: 0x%lx c: %d l: %d\n", tmp___6, tmp___5, (long )tmp___4,
           (int )h->command, (int )h->length);
#line 941
    return (0);
  } else {

  }
#line 943
  mdev->last_received = jiffies;
#line 945
  return (1);
}
}
#line 948 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_flush_after_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  enum finish_epoch tmp___2 ;

  {
#line 952
  if ((unsigned int )mdev->write_ordering > 1U) {
#line 952
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 952
    if (tmp___1 != 0) {
#line 953
      rv = blkdev_issue_flush((mdev->ldev)->backing_bdev, 0);
#line 954
      if (rv != 0) {
#line 955
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 955
        printk("<3>%s %s: local disk flush failed with status %d\n", tmp___0, tmp,
               rv);
#line 959
        drbd_bump_write_ordering(mdev, WO_drain_io);
      } else {

      }
#line 961
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 964
  tmp___2 = drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 964
  return (tmp___2);
}
}
#line 967 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int w_flush(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct flush_work *fw ;
  struct drbd_epoch *epoch ;
  int tmp ;

  {
#line 969
  fw = (struct flush_work *)w;
#line 970
  epoch = fw->epoch;
#line 972
  kfree((void const   *)w);
#line 974
  tmp = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 974
  if (tmp == 0) {
#line 975
    drbd_flush_after_epoch(mdev, epoch);
  } else {

  }
#line 977
  drbd_may_finish_epoch(mdev, epoch, (int )mdev->state.ldv_32167.conn <= 9 ? EV_CLEANUP : EV_PUT);
#line 980
  return (1);
}
}
#line 989 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum finish_epoch drbd_may_finish_epoch(struct drbd_conf *mdev , struct drbd_epoch *epoch ,
                                               enum epoch_event ev ) 
{ 
  int finish ;
  int epoch_size ;
  struct drbd_epoch *next_epoch ;
  int schedule_flush ;
  enum finish_epoch rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  struct list_head  const  *__mptr ;
  struct flush_work *fw ;
  void *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;

  {
#line 995
  schedule_flush = 0;
#line 996
  rv = FE_STILL_LIVE;
#line 998
  _spin_lock(& mdev->epoch_lock);
  ldv_41805: 
#line 1000
  next_epoch = 0;
#line 1001
  finish = 0;
#line 1003
  epoch_size = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1005
  switch ((unsigned int )ev & 4294967263U) {
  case 0U: 
#line 1007
  atomic_dec(& epoch->active);
#line 1008
  goto ldv_41794;
  case 1U: 
#line 1010
  set_bit(3U, (unsigned long volatile   *)(& epoch->flags));
#line 1014
  tmp = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1014
  if (((tmp != 0 && epoch_size == 1) && (unsigned int )mdev->write_ordering != 3U) && (unsigned long )mdev->current_epoch == (unsigned long )epoch) {
#line 1017
    clear_bit(2, (unsigned long volatile   *)(& epoch->flags));
  } else {

  }
#line 1018
  goto ldv_41794;
  case 2U: 
#line 1020
  set_bit(1U, (unsigned long volatile   *)(& epoch->flags));
#line 1021
  goto ldv_41794;
  case 3U: ;
#line 1024
  goto ldv_41794;
  }
  ldv_41794: ;
#line 1027
  if (epoch_size != 0) {
#line 1027
    tmp___3 = atomic_read((atomic_t const   *)(& epoch->active));
#line 1027
    if (tmp___3 == 0) {
#line 1027
      tmp___4 = constant_test_bit(3U, (unsigned long const volatile   *)(& epoch->flags));
#line 1027
      if (tmp___4 != 0) {
#line 1027
        if ((unsigned long )epoch->list.prev == (unsigned long )(& (mdev->current_epoch)->list)) {
#line 1027
          tmp___5 = constant_test_bit(4U, (unsigned long const volatile   *)(& epoch->flags));
#line 1027
          if (tmp___5 == 0) {
#line 1033
            tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& epoch->flags));
#line 1033
            if (tmp___1 != 0 || (unsigned int )mdev->write_ordering == 0U) {
#line 1037
              finish = 1;
#line 1038
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else
#line 1033
            if (epoch_size == 1) {
#line 1033
              tmp___2 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1033
              if (tmp___2 != 0) {
#line 1037
                finish = 1;
#line 1038
                set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
              } else {
#line 1033
                goto _L;
              }
            } else
            _L: /* CIL Label */ 
#line 1033
            if (((unsigned int )ev & 32U) != 0U) {
#line 1037
              finish = 1;
#line 1038
              set_bit(4U, (unsigned long volatile   *)(& epoch->flags));
            } else {
#line 1039
              tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& epoch->flags));
#line 1039
              if (tmp___0 == 0 && (unsigned int )mdev->write_ordering == 3U) {
#line 1041
                atomic_inc(& epoch->active);
#line 1042
                schedule_flush = 1;
              } else {

              }
            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 1045
  if (finish != 0) {
#line 1046
    if (((unsigned int )ev & 32U) == 0U) {
#line 1047
      _spin_unlock(& mdev->epoch_lock);
#line 1048
      drbd_send_b_ack(mdev, epoch->barrier_nr, (u32 )epoch_size);
#line 1049
      _spin_lock(& mdev->epoch_lock);
    } else {

    }
#line 1051
    atomic_dec(& mdev->unacked_cnt);
#line 1051
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1051
    if (tmp___9 < 0) {
#line 1051
      tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1051
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1051
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___8, tmp___7, "drbd_may_finish_epoch",
             1051, tmp___6);
    } else {

    }
#line 1053
    if ((unsigned long )mdev->current_epoch != (unsigned long )epoch) {
#line 1054
      __mptr = (struct list_head  const  *)epoch->list.next;
#line 1054
      next_epoch = (struct drbd_epoch *)__mptr;
#line 1055
      list_del(& epoch->list);
#line 1056
      ev = (enum epoch_event )(((unsigned int )ev & 32U) | 3U);
#line 1057
      mdev->epochs = mdev->epochs - 1U;
#line 1058
      kfree((void const   *)epoch);
#line 1060
      if ((unsigned int )rv == 0U) {
#line 1061
        rv = FE_DESTROYED;
      } else {

      }
    } else {
#line 1063
      epoch->flags = 0UL;
#line 1064
      atomic_set(& epoch->epoch_size, 0);
#line 1066
      if ((unsigned int )rv == 0U) {
#line 1067
        rv = FE_RECYCLED;
      } else {

      }
    }
  } else {

  }
#line 1071
  if ((unsigned long )next_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1072
    goto ldv_41804;
  } else {

  }
#line 1074
  epoch = next_epoch;
#line 1075
  goto ldv_41805;
  ldv_41804: 
#line 1077
  _spin_unlock(& mdev->epoch_lock);
#line 1079
  if (schedule_flush != 0) {
#line 1081
    tmp___10 = kmalloc(32UL, 32U);
#line 1081
    fw = (struct flush_work *)tmp___10;
#line 1082
    if ((unsigned long )fw != (unsigned long )((struct flush_work *)0)) {
#line 1083
      fw->w.cb = & w_flush;
#line 1084
      fw->epoch = epoch;
#line 1085
      drbd_queue_work(& mdev->data.work, & fw->w);
    } else {
#line 1087
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1087
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1087
      printk("<4>%s %s: Could not kmalloc a flush_work obj\n", tmp___12, tmp___11);
#line 1088
      set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1090
      drbd_may_finish_epoch(mdev, epoch, EV_BARRIER_DONE);
#line 1091
      drbd_may_finish_epoch(mdev, epoch, EV_PUT);
    }
  } else {

  }
#line 1095
  return (rv);
}
}
#line 1103 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_bump_write_ordering(struct drbd_conf *mdev , enum write_ordering_e wo ) 
{ 
  enum write_ordering_e pwo ;
  char *write_ordering_str[4U] ;
  enum write_ordering_e _min1 ;
  enum write_ordering_e _min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1106
  write_ordering_str[0] = (char *)"none";
#line 1106
  write_ordering_str[1] = (char *)"drain";
#line 1106
  write_ordering_str[2] = (char *)"flush";
#line 1106
  write_ordering_str[3] = (char *)"barrier";
#line 1113
  pwo = mdev->write_ordering;
#line 1114
  _min1 = pwo;
#line 1114
  _min2 = wo;
#line 1114
  wo = (enum write_ordering_e )((unsigned int )_min1 < (unsigned int )_min2 ? (unsigned int )_min1 : (unsigned int )_min2);
#line 1115
  if ((unsigned int )wo == 3U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1116
    wo = WO_bdev_flush;
  } else {

  }
#line 1117
  if ((unsigned int )wo == 2U && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1118
    wo = WO_drain_io;
  } else {

  }
#line 1119
  if ((unsigned int )wo == 1U && (unsigned int )*((unsigned char *)mdev->ldev + 396UL) != 0U) {
#line 1120
    wo = WO_none;
  } else {

  }
#line 1121
  mdev->write_ordering = wo;
#line 1122
  if ((unsigned int )mdev->write_ordering != (unsigned int )pwo || (unsigned int )wo == 3U) {
#line 1123
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1123
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1123
    printk("<6>%s %s: Method to ensure write ordering: %s\n", tmp___0, tmp, write_ordering_str[(unsigned int )mdev->write_ordering]);
  } else {

  }
#line 1124
  return;
}
}
#line 1132 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int w_e_reissue(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio *bio ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct drbd_epoch *tmp___1 ;

  {
#line 1134
  e = (struct drbd_epoch_entry *)w;
#line 1135
  bio = e->private_bio;
#line 1147
  tmp___1 = previous_epoch(mdev, e->epoch);
#line 1147
  if ((unsigned long )tmp___1 != (unsigned long )((struct drbd_epoch *)0)) {
#line 1148
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1148
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1148
    printk("<4>%s %s: Write ordering was not enforced (one time event)\n", tmp___0,
           tmp);
  } else {

  }
#line 1154
  bio->bi_bdev = (mdev->ldev)->backing_bdev;
#line 1155
  bio->bi_sector = e->sector;
#line 1156
  bio->bi_size = e->size;
#line 1157
  bio->bi_idx = 0U;
#line 1159
  bio->bi_flags = bio->bi_flags & 0xf000000000000000UL;
#line 1160
  bio->bi_flags = bio->bi_flags | 1UL;
#line 1163
  bio->bi_phys_segments = 0U;
#line 1164
  bio->bi_next = 0;
#line 1170
  e->w.cb = & e_end_block;
#line 1173
  bio->bi_rw = bio->bi_rw & 0xffffffffffffffdfUL;
#line 1175
  drbd_generic_make_request(mdev, 4, bio);
#line 1177
  return (1);
}
}
#line 1180 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Barrier(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int rv ;
  int issue_flush ;
  struct p_barrier *p ;
  struct drbd_epoch *epoch ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  enum finish_epoch tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  enum finish_epoch tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  enum finish_epoch tmp___11 ;
  int tmp___12 ;

  {
#line 1183
  p = (struct p_barrier *)h;
#line 1186
  _b = (unsigned int )h->length != 8U;
#line 1186
  if (_b != 0) {
#line 1186
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1186
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1186
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Barrier", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1186);
  } else {

  }
#line 1186
  if (_b != 0) {
#line 1186
    return (0);
  } else {

  }
#line 1188
  rv = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 1189
  _b___0 = (int )h->length != rv;
#line 1189
  if (_b___0 != 0) {
#line 1189
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1189
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1189
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_Barrier", (char *)"rv != h->length",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1189);
  } else {

  }
#line 1189
  if (_b___0 != 0) {
#line 1189
    return (0);
  } else {

  }
#line 1191
  inc_unacked(mdev);
#line 1193
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1194
    drbd_kick_lo(mdev);
  } else {

  }
#line 1196
  (mdev->current_epoch)->barrier_nr = p->barrier;
#line 1197
  tmp___3 = drbd_may_finish_epoch(mdev, mdev->current_epoch, EV_GOT_BARRIER_NR);
#line 1197
  rv = (int )tmp___3;
#line 1204
  switch ((unsigned int )mdev->write_ordering) {
  case 3U: ;
  case 0U: ;
#line 1207
  if (rv == 2) {
#line 1208
    return (1);
  } else {

  }
#line 1209
  goto ldv_41838;
  case 2U: ;
  case 1U: ;
#line 1213
  if (rv != 0) {
#line 1213
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1213
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1213
    printk("<3>%s %s: ASSERT( rv == FE_STILL_LIVE ) in %s:%d\n", tmp___5, tmp___4,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1213);
  } else {

  }
#line 1214
  set_bit(0U, (unsigned long volatile   *)(& (mdev->current_epoch)->flags));
#line 1215
  drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1216
  tmp___6 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1216
  rv = (int )tmp___6;
#line 1217
  if (rv == 2) {
#line 1218
    return (1);
  } else {

  }
#line 1223
  goto ldv_41838;
  }
  ldv_41838: 
#line 1228
  tmp___7 = kmalloc(40UL, 16U);
#line 1228
  epoch = (struct drbd_epoch *)tmp___7;
#line 1229
  if ((unsigned long )epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 1230
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1230
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1230
    printk("<4>%s %s: Allocation of an epoch failed, slowing down\n", tmp___9, tmp___8);
#line 1231
    tmp___10 = test_and_set_bit(0, (unsigned long volatile   *)(& epoch->flags));
#line 1231
    issue_flush = tmp___10 == 0;
#line 1232
    drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 1233
    if (issue_flush != 0) {
#line 1234
      tmp___11 = drbd_flush_after_epoch(mdev, mdev->current_epoch);
#line 1234
      rv = (int )tmp___11;
#line 1235
      if (rv == 2) {
#line 1236
        return (1);
      } else {

      }
    } else {

    }
#line 1239
    drbd_wait_ee_list_empty(mdev, & mdev->done_ee);
#line 1241
    return (1);
  } else {

  }
#line 1244
  epoch->flags = 0UL;
#line 1245
  atomic_set(& epoch->epoch_size, 0);
#line 1246
  atomic_set(& epoch->active, 0);
#line 1248
  _spin_lock(& mdev->epoch_lock);
#line 1249
  tmp___12 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 1249
  if (tmp___12 != 0) {
#line 1250
    list_add(& epoch->list, & (mdev->current_epoch)->list);
#line 1251
    mdev->current_epoch = epoch;
#line 1252
    mdev->epochs = mdev->epochs + 1U;
  } else {
#line 1255
    kfree((void const   *)epoch);
  }
#line 1257
  _spin_unlock(& mdev->epoch_lock);
#line 1259
  return (1);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_epoch_entry *read_in_block(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                              int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  struct bio_vec *bvec ;
  struct page *page ;
  struct bio *bio ;
  int dgs ;
  int ds ;
  int i ;
  int rr ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int __min1 ;
  int __min2 ;
  void *tmp___6 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int __min1___1 ;
  int __min2___1 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;

  {
#line 1272
  dig_in = mdev->int_dig_in;
#line 1273
  dig_vv = mdev->int_dig_vv;
#line 1275
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1275
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1275
    dgs = (int )tmp;
  } else {
#line 1275
    dgs = 0;
  }
#line 1278
  if (dgs != 0) {
#line 1279
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1280
    if (rr != dgs) {
#line 1281
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1281
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1281
      printk("<4>%s %s: short read receiving data digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1283
      return (0);
    } else {

    }
  } else {

  }
#line 1287
  data_size = data_size - dgs;
#line 1289
  _b = (data_size & 511) != 0;
#line 1289
  if (_b != 0) {
#line 1289
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1289
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1289
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "read_in_block", (char *)"data_size & 0x1ff",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1289);
  } else {

  }
#line 1289
  if (_b != 0) {
#line 1289
    return (0);
  } else {

  }
#line 1290
  _b___0 = (unsigned int )data_size > 32768U;
#line 1290
  if (_b___0 != 0) {
#line 1290
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1290
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1290
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "read_in_block", (char *)"data_size > DRBD_MAX_SEGMENT_SIZE",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1290);
  } else {

  }
#line 1290
  if (_b___0 != 0) {
#line 1290
    return (0);
  } else {

  }
#line 1295
  e = drbd_alloc_ee(mdev, id, sector, (unsigned int )data_size, 16U);
#line 1296
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1297
    return (0);
  } else {

  }
#line 1298
  bio = e->private_bio;
#line 1299
  ds = data_size;
#line 1300
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1300
  i = (int )bio->bi_idx;
#line 1300
  goto ldv_41872;
  ldv_41871: 
#line 1301
  page = bvec->bv_page;
#line 1302
  __min1 = ds;
#line 1302
  __min2 = 4096;
#line 1302
  tmp___6 = kmap(page);
#line 1302
  rr = drbd_recv(mdev, tmp___6, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1303
  kunmap(page);
#line 1304
  __min1___1 = ds;
#line 1304
  __min2___1 = 4096;
#line 1304
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1305
    drbd_free_ee(mdev, e);
#line 1306
    __min1___0 = ds;
#line 1306
    __min2___0 = 4096;
#line 1306
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___8,
           tmp___7, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1308
    return (0);
  } else {

  }
#line 1310
  ds = ds - rr;
#line 1300
  bvec = bvec + 1;
#line 1300
  i = i + 1;
  ldv_41872: ;
#line 1300
  if ((int )bio->bi_vcnt > i) {
#line 1301
    goto ldv_41871;
  } else {

  }

#line 1313
  if (dgs != 0) {
#line 1314
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1315
    tmp___11 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1315
    if (tmp___11 != 0) {
#line 1316
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1316
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1316
      printk("<3>%s %s: Digest integrity check FAILED.\n", tmp___10, tmp___9);
#line 1317
      drbd_bcast_ee(mdev, "digest failed", dgs, (char const   *)dig_in, (char const   *)dig_vv,
                    (struct drbd_epoch_entry  const  *)e);
#line 1319
      drbd_free_ee(mdev, e);
#line 1320
      return (0);
    } else {

    }
  } else {

  }
#line 1323
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1324
  return (e);
}
}
#line 1330 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_drain_block(struct drbd_conf *mdev , int data_size ) 
{ 
  struct page *page ;
  int rr ;
  int rv ;
  void *data ;
  int __min1 ;
  int __min2 ;
  int __min1___0 ;
  int __min2___0 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1___1 ;
  int __min2___1 ;

  {
#line 1333
  rv = 1;
#line 1336
  page = drbd_pp_alloc(mdev, 1);
#line 1338
  data = kmap(page);
#line 1339
  goto ldv_41893;
  ldv_41892: 
#line 1340
  __min1 = data_size;
#line 1340
  __min2 = 4096;
#line 1340
  rr = drbd_recv(mdev, data, (size_t )(__min1 < __min2 ? __min1 : __min2));
#line 1341
  __min1___1 = data_size;
#line 1341
  __min2___1 = 4096;
#line 1341
  if ((__min1___1 < __min2___1 ? __min1___1 : __min2___1) != rr) {
#line 1342
    rv = 0;
#line 1343
    __min1___0 = data_size;
#line 1343
    __min2___0 = 4096;
#line 1343
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1343
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1343
    printk("<4>%s %s: short read receiving data: read %d expected %d\n", tmp___0,
           tmp, rr, __min1___0 < __min2___0 ? __min1___0 : __min2___0);
#line 1345
    goto ldv_41891;
  } else {

  }
#line 1347
  data_size = data_size - rr;
  ldv_41893: ;
#line 1339
  if (data_size != 0) {
#line 1340
    goto ldv_41892;
  } else {

  }
  ldv_41891: 
#line 1349
  kunmap(page);
#line 1350
  drbd_pp_free(mdev, page);
#line 1351
  return (rv);
}
}
#line 1354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_dless_read(struct drbd_conf *mdev , struct drbd_request *req , sector_t sector ,
                           int data_size ) 
{ 
  struct bio_vec *bvec ;
  struct bio *bio ;
  int dgs ;
  int rr ;
  int i ;
  int expect ;
  void *dig_in ;
  void *dig_vv ;
  unsigned int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int __min1 ;
  int __min2 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 1360
  dig_in = mdev->int_dig_in;
#line 1361
  dig_vv = mdev->int_dig_vv;
#line 1363
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_r_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1363
    tmp = crypto_hash_digestsize(mdev->integrity_r_tfm);
#line 1363
    dgs = (int )tmp;
  } else {
#line 1363
    dgs = 0;
  }
#line 1366
  if (dgs != 0) {
#line 1367
    rr = drbd_recv(mdev, dig_in, (size_t )dgs);
#line 1368
    if (rr != dgs) {
#line 1369
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1369
      printk("<4>%s %s: short read receiving data reply digest: read %d expected %d\n",
             tmp___1, tmp___0, rr, dgs);
#line 1371
      return (0);
    } else {

    }
  } else {

  }
#line 1375
  data_size = data_size - dgs;
#line 1379
  mdev->recv_cnt = mdev->recv_cnt + (unsigned int )(data_size >> 9);
#line 1381
  bio = req->master_bio;
#line 1382
  if (bio->bi_sector != sector) {
#line 1382
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1382
    printk("<3>%s %s: ASSERT( sector == bio->bi_sector ) in %s:%d\n", tmp___3, tmp___2,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1382);
  } else {

  }
#line 1384
  bvec = bio->bi_io_vec + (unsigned long )bio->bi_idx;
#line 1384
  i = (int )bio->bi_idx;
#line 1384
  goto ldv_41912;
  ldv_41911: 
#line 1385
  __min1 = data_size;
#line 1385
  __min2 = (int )bvec->bv_len;
#line 1385
  expect = __min1 < __min2 ? __min1 : __min2;
#line 1386
  tmp___4 = kmap(bvec->bv_page);
#line 1386
  rr = drbd_recv(mdev, tmp___4 + (unsigned long )bvec->bv_offset, (size_t )expect);
#line 1389
  kunmap(bvec->bv_page);
#line 1390
  if (rr != expect) {
#line 1391
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
    printk("<4>%s %s: short read receiving data reply: read %d expected %d\n", tmp___6,
           tmp___5, rr, expect);
#line 1394
    return (0);
  } else {

  }
#line 1396
  data_size = data_size - rr;
#line 1384
  bvec = bvec + 1;
#line 1384
  i = i + 1;
  ldv_41912: ;
#line 1384
  if ((int )bio->bi_vcnt > i) {
#line 1385
    goto ldv_41911;
  } else {

  }

#line 1399
  if (dgs != 0) {
#line 1400
    drbd_csum(mdev, mdev->integrity_r_tfm, bio, dig_vv);
#line 1401
    tmp___9 = memcmp((void const   *)dig_in, (void const   *)dig_vv, (size_t )dgs);
#line 1401
    if (tmp___9 != 0) {
#line 1402
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1402
      printk("<3>%s %s: Digest integrity check FAILED. Broken NICs?\n", tmp___8, tmp___7);
#line 1403
      return (0);
    } else {

    }
  } else {

  }
#line 1407
  if (data_size != 0) {
#line 1407
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1407
    printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1407);
  } else {

  }
#line 1408
  return (1);
}
}
#line 1413 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_resync_block(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 1415
  e = (struct drbd_epoch_entry *)w;
#line 1416
  sector = e->sector;
#line 1419
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1419
  if (tmp___1 == 0) {
#line 1419
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1419
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1419
    printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1419);
  } else {

  }
#line 1421
  tmp___2 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1421
  if (tmp___2 != 0L) {
#line 1422
    __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       1422U);
#line 1423
    ok = drbd_send_ack(mdev, P_RS_WRITE_ACK, e);
  } else {
#line 1426
    drbd_rs_failed_io(mdev, sector, (int )e->size);
#line 1428
    ok = drbd_send_ack(mdev, P_NEG_ACK, e);
  }
#line 1430
  atomic_dec(& mdev->unacked_cnt);
#line 1430
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1430
  if (tmp___6 < 0) {
#line 1430
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1430
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___5, tmp___4, "e_end_resync_block",
           1430, tmp___3);
  } else {

  }
#line 1432
  return (ok);
}
}
#line 1435 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int recv_resync_read(struct drbd_conf *mdev , sector_t sector , int data_size ) 
{ 
  struct drbd_epoch_entry *e ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 1439
  e = read_in_block(mdev, 0xffffffffffffffffULL, sector, data_size);
#line 1440
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1441
    put_ldev(mdev);
#line 1442
    return (0);
  } else {

  }
#line 1445
  atomic_dec(& mdev->rs_pending_cnt);
#line 1445
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1445
  if (tmp___2 < 0) {
#line 1445
    tmp = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 1445
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1445
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___1, tmp___0, "recv_resync_read",
           1445, tmp);
  } else {

  }
#line 1447
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1448
  (e->private_bio)->bi_rw = 1UL;
#line 1449
  e->w.cb = & e_end_resync_block;
#line 1451
  inc_unacked(mdev);
#line 1455
  _spin_lock_irq(& mdev->req_lock);
#line 1456
  list_add(& e->w.list, & mdev->sync_ee);
#line 1457
  _spin_unlock_irq(& mdev->req_lock);
#line 1459
  drbd_generic_make_request(mdev, 2, e->private_bio);
#line 1462
  maybe_kick_lo(mdev);
#line 1463
  return (1);
}
}
#line 1466 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct drbd_request *req ;
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;

  {
#line 1472
  p = (struct p_data *)h;
#line 1474
  header_size = 24U;
#line 1475
  data_size = (unsigned int )h->length - header_size;
#line 1477
  _b = data_size == 0U;
#line 1477
  if (_b != 0) {
#line 1477
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1477
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1477
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_DataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1477);
  } else {

  }
#line 1477
  if (_b != 0) {
#line 1477
    return (0);
  } else {

  }
#line 1479
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1479
  if ((unsigned int )tmp___1 != header_size) {
#line 1480
    return (0);
  } else {

  }
#line 1482
  tmp___2 = __fswab64(p->sector);
#line 1482
  sector = (sector_t )tmp___2;
#line 1484
  _spin_lock_irq(& mdev->req_lock);
#line 1485
  req = _ar_id_to_req(mdev, p->block_id, sector);
#line 1486
  _spin_unlock_irq(& mdev->req_lock);
#line 1487
  tmp___5 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 1487
  if (tmp___5 != 0L) {
#line 1488
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1488
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1488
    printk("<3>%s %s: Got a corrupt block_id/sector pair(1).\n", tmp___4, tmp___3);
#line 1489
    return (0);
  } else {

  }
#line 1495
  ok = recv_dless_read(mdev, req, sector, (int )data_size);
#line 1497
  if (ok != 0) {
#line 1498
    req_mod(req, data_received);
  } else {

  }
#line 1503
  return (ok);
}
}
#line 1506 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_RSDataReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  unsigned int header_size ;
  unsigned int data_size ;
  int ok ;
  struct p_data *p ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1511
  p = (struct p_data *)h;
#line 1513
  header_size = 24U;
#line 1514
  data_size = (unsigned int )h->length - header_size;
#line 1516
  _b = data_size == 0U;
#line 1516
  if (_b != 0) {
#line 1516
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1516
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_RSDataReply", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1516);
  } else {

  }
#line 1516
  if (_b != 0) {
#line 1516
    return (0);
  } else {

  }
#line 1518
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1518
  if ((unsigned int )tmp___1 != header_size) {
#line 1519
    return (0);
  } else {

  }
#line 1521
  tmp___2 = __fswab64(p->sector);
#line 1521
  sector = (sector_t )tmp___2;
#line 1522
  if (p->block_id != 0xffffffffffffffffULL) {
#line 1522
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1522
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1522
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___4, tmp___3,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1522);
  } else {

  }
#line 1524
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1524
  if (tmp___8 != 0) {
#line 1528
    ok = recv_resync_read(mdev, sector, (int )data_size);
  } else {
#line 1530
    tmp___7 = __ratelimit(& drbd_ratelimit_state);
#line 1530
    if (tmp___7 != 0) {
#line 1531
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1531
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1531
      printk("<3>%s %s: Can not write resync data to local disk.\n", tmp___6, tmp___5);
    } else {

    }
#line 1533
    ok = drbd_drain_block(mdev, (int )data_size);
#line 1535
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
  }
#line 1538
  return (ok);
}
}
#line 1544 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_end_block(struct drbd_conf *mdev , struct drbd_work *w , int cancel ) 
{ 
  struct drbd_epoch_entry *e ;
  sector_t sector ;
  struct drbd_epoch *epoch ;
  int ok ;
  int pcmd ;
  int tmp ;
  long tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 1546
  e = (struct drbd_epoch_entry *)w;
#line 1547
  sector = e->sector;
#line 1549
  ok = 1;
#line 1551
  if ((e->flags & 8U) != 0U) {
#line 1552
    epoch = previous_epoch(mdev, e->epoch);
#line 1553
    if ((unsigned long )epoch != (unsigned long )((struct drbd_epoch *)0)) {
#line 1554
      drbd_may_finish_epoch(mdev, epoch, cancel != 0 ? 34 : EV_BARRIER_DONE);
    } else {

    }
  } else {

  }
#line 1557
  if ((mdev->net_conf)->wire_protocol == 3) {
#line 1558
    tmp___0 = __builtin_expect((long )((int )(e->private_bio)->bi_flags) & 1L, 1L);
#line 1558
    if (tmp___0 != 0L) {
#line 1559
      pcmd = ((int )mdev->state.ldv_32167.conn > 15 && (int )mdev->state.ldv_32167.conn <= 21) && (e->flags & 4U) != 0U ? 23 : 22;
#line 1563
      tmp = drbd_send_ack(mdev, (enum drbd_packets )pcmd, e);
#line 1563
      ok = tmp & ok;
#line 1564
      if (pcmd == 23) {
#line 1565
        __drbd_set_in_sync(mdev, sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1565U);
      } else {

      }
    } else {
#line 1567
      ok = drbd_send_ack(mdev, P_NEG_ACK, e);
    }
#line 1571
    atomic_dec(& mdev->unacked_cnt);
#line 1571
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1571
    if (tmp___4 < 0) {
#line 1571
      tmp___1 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1571
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1571
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1571
      printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___3, tmp___2, "e_end_block",
             1571, tmp___1);
    } else {

    }
  } else {

  }
#line 1575
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 1576
    _spin_lock_irq(& mdev->req_lock);
#line 1577
    tmp___7 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1577
    if (tmp___7 != 0) {
#line 1577
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1577
      printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___6,
             tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1577);
    } else {

    }
#line 1578
    hlist_del_init(& e->colision);
#line 1579
    _spin_unlock_irq(& mdev->req_lock);
  } else {
#line 1581
    tmp___10 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1581
    if (tmp___10 == 0) {
#line 1581
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1581
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1581
      printk("<3>%s %s: ASSERT( hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___9,
             tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1581);
    } else {

    }
  }
#line 1584
  drbd_may_finish_epoch(mdev, e->epoch, cancel != 0 ? EV_CLEANUP : EV_PUT);
#line 1586
  return (ok);
}
}
#line 1589 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int e_send_discard_ack(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct drbd_epoch_entry *e ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 1591
  e = (struct drbd_epoch_entry *)w;
#line 1592
  ok = 1;
#line 1594
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 1594
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1594
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1594
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1594);
  } else {

  }
#line 1595
  ok = drbd_send_ack(mdev, P_DISCARD_ACK, e);
#line 1597
  _spin_lock_irq(& mdev->req_lock);
#line 1598
  tmp___3 = hlist_unhashed((struct hlist_node  const  *)(& e->colision));
#line 1598
  if (tmp___3 != 0) {
#line 1598
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1598
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1598
    printk("<3>%s %s: ASSERT( !hlist_unhashed(&e->colision) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1598);
  } else {

  }
#line 1599
  hlist_del_init(& e->colision);
#line 1600
  _spin_unlock_irq(& mdev->req_lock);
#line 1602
  atomic_dec(& mdev->unacked_cnt);
#line 1602
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1602
  if (tmp___7 < 0) {
#line 1602
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 1602
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1602
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1602
    printk("<3>%s %s: in %s:%d: unacked_cnt = %d < 0 !\n", tmp___6, tmp___5, "e_send_discard_ack",
           1602, tmp___4);
  } else {

  }
#line 1604
  return (ok);
}
}
#line 1628 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_wait_peer_seq(struct drbd_conf *mdev , u32 const   packet_seq ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  unsigned int p_seq ;
  long timeout ;
  int ret ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1630
  tmp = get_current();
#line 1630
  wait.flags = 0U;
#line 1630
  wait.private = (void *)tmp;
#line 1630
  wait.func = & autoremove_wake_function;
#line 1630
  wait.task_list.next = & wait.task_list;
#line 1630
  wait.task_list.prev = & wait.task_list;
#line 1633
  ret = 0;
#line 1634
  _spin_lock(& mdev->peer_seq_lock);
  ldv_41995: 
#line 1636
  prepare_to_wait(& mdev->seq_wait, & wait, 1);
#line 1637
  tmp___0 = seq_cmp(packet_seq, mdev->peer_seq + 1U);
#line 1637
  if (tmp___0 <= 0) {
#line 1638
    goto ldv_41994;
  } else {

  }
#line 1639
  tmp___1 = get_current();
#line 1639
  tmp___2 = signal_pending(tmp___1);
#line 1639
  if (tmp___2 != 0) {
#line 1640
    ret = -512;
#line 1641
    goto ldv_41994;
  } else {

  }
#line 1643
  p_seq = mdev->peer_seq;
#line 1644
  _spin_unlock(& mdev->peer_seq_lock);
#line 1645
  timeout = schedule_timeout(7500L);
#line 1646
  _spin_lock(& mdev->peer_seq_lock);
#line 1647
  if (timeout == 0L && mdev->peer_seq == p_seq) {
#line 1648
    ret = -110;
#line 1649
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1649
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1649
    printk("<3>%s %s: ASSERT FAILED waited 30 seconds for sequence update, forcing reconnect\n",
           tmp___4, tmp___3);
#line 1650
    goto ldv_41994;
  } else {

  }
#line 1652
  goto ldv_41995;
  ldv_41994: 
#line 1653
  finish_wait(& mdev->seq_wait, & wait);
#line 1654
  if (mdev->peer_seq + 1U == (unsigned int )packet_seq) {
#line 1655
    mdev->peer_seq = mdev->peer_seq + 1U;
  } else {

  }
#line 1656
  _spin_unlock(& mdev->peer_seq_lock);
#line 1657
  return (ret);
}
}
#line 1661 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_Data(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  struct drbd_epoch_entry *e ;
  struct p_data *p ;
  int header_size ;
  int data_size ;
  int rw ;
  u32 dp_flags ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  __u32 tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  __u64 tmp___8 ;
  struct drbd_epoch *epoch ;
  struct list_head  const  *__mptr ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  __u32 tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int size ;
  int discard ;
  int tmp___15 ;
  wait_queue_t wait ;
  struct task_struct *tmp___16 ;
  struct drbd_request *i ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  int first ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  long tmp___19 ;
  long tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  struct hlist_head *tmp___23 ;
  int have_unacked ;
  int have_conflict ;
  struct task_struct *tmp___24 ;
  struct task_struct *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  int tmp___28 ;
  struct hlist_node  const  *__mptr___0 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  struct task_struct *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  char const   *tmp___36 ;

  {
#line 1665
  p = (struct p_data *)h;
#line 1667
  rw = 1;
#line 1670
  header_size = 24;
#line 1671
  data_size = (int )h->length - header_size;
#line 1673
  _b = data_size == 0;
#line 1673
  if (_b != 0) {
#line 1673
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1673
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_Data", (char *)"data_size == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1673);
  } else {

  }
#line 1673
  if (_b != 0) {
#line 1673
    return (0);
  } else {

  }
#line 1675
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 1675
  if (tmp___1 != header_size) {
#line 1676
    return (0);
  } else {

  }
#line 1678
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1678
  if (tmp___7 == 0) {
#line 1679
    tmp___4 = __ratelimit(& drbd_ratelimit_state);
#line 1679
    if (tmp___4 != 0) {
#line 1680
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1680
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1680
      printk("<3>%s %s: Can not write mirrored data block to local disk.\n", tmp___3,
             tmp___2);
    } else {

    }
#line 1682
    _spin_lock(& mdev->peer_seq_lock);
#line 1683
    tmp___5 = __fswab32(p->seq_num);
#line 1683
    if (mdev->peer_seq + 1U == tmp___5) {
#line 1684
      mdev->peer_seq = mdev->peer_seq + 1U;
    } else {

    }
#line 1685
    _spin_unlock(& mdev->peer_seq_lock);
#line 1687
    drbd_send_ack_dp(mdev, P_NEG_ACK, p);
#line 1688
    atomic_inc(& (mdev->current_epoch)->epoch_size);
#line 1689
    tmp___6 = drbd_drain_block(mdev, data_size);
#line 1689
    return (tmp___6);
  } else {

  }
#line 1697
  tmp___8 = __fswab64(p->sector);
#line 1697
  sector = (sector_t )tmp___8;
#line 1698
  e = read_in_block(mdev, p->block_id, sector, data_size);
#line 1699
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1700
    put_ldev(mdev);
#line 1701
    return (0);
  } else {

  }
#line 1704
  (e->private_bio)->bi_end_io = & drbd_endio_write_sec;
#line 1705
  e->w.cb = & e_end_block;
#line 1707
  _spin_lock(& mdev->epoch_lock);
#line 1708
  e->epoch = mdev->current_epoch;
#line 1709
  atomic_inc(& (e->epoch)->epoch_size);
#line 1710
  atomic_inc(& (e->epoch)->active);
#line 1712
  if ((unsigned int )mdev->write_ordering == 3U) {
#line 1712
    tmp___11 = atomic_read((atomic_t const   *)(& (e->epoch)->epoch_size));
#line 1712
    if (tmp___11 == 1) {
#line 1717
      __mptr = (struct list_head  const  *)(e->epoch)->list.prev;
#line 1717
      epoch = (struct drbd_epoch *)__mptr;
#line 1718
      if ((unsigned long )e->epoch == (unsigned long )epoch) {
#line 1719
        set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1720
        rw = rw | 32;
#line 1721
        e->flags = e->flags | 8U;
      } else {
#line 1723
        tmp___9 = atomic_read((atomic_t const   *)(& epoch->epoch_size));
#line 1723
        if (tmp___9 > 1) {
#line 1725
          set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1726
          set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1727
          rw = rw | 32;
#line 1728
          e->flags = e->flags | 8U;
        } else {
#line 1723
          tmp___10 = constant_test_bit(2U, (unsigned long const volatile   *)(& epoch->flags));
#line 1723
          if (tmp___10 == 0) {
#line 1725
            set_bit(0U, (unsigned long volatile   *)(& epoch->flags));
#line 1726
            set_bit(2U, (unsigned long volatile   *)(& (e->epoch)->flags));
#line 1727
            rw = rw | 32;
#line 1728
            e->flags = e->flags | 8U;
          } else {

          }
        }
      }
    } else {

    }
  } else {

  }
#line 1732
  _spin_unlock(& mdev->epoch_lock);
#line 1734
  tmp___12 = __fswab32(p->dp_flags);
#line 1734
  dp_flags = tmp___12;
#line 1735
  if ((int )dp_flags & 1) {
#line 1736
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1736
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1736
    printk("<3>%s %s: ASSERT FAILED would have submitted barrier request\n", tmp___14,
           tmp___13);
  } else {

  }
#line 1739
  if ((dp_flags & 2U) != 0U) {
#line 1740
    rw = rw | 192;
  } else {

  }
#line 1741
  if ((dp_flags & 4U) != 0U) {
#line 1742
    e->flags = e->flags | 4U;
  } else {

  }
#line 1745
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 1746
    _spin_lock_irq(& mdev->req_lock);
  } else {
#line 1750
    size = (int const   )e->size;
#line 1751
    tmp___15 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 1751
    discard = tmp___15;
#line 1752
    tmp___16 = get_current();
#line 1752
    wait.flags = 0U;
#line 1752
    wait.private = (void *)tmp___16;
#line 1752
    wait.func = & autoremove_wake_function;
#line 1752
    wait.task_list.next = & wait.task_list;
#line 1752
    wait.task_list.prev = & wait.task_list;
#line 1758
    if ((mdev->net_conf)->wire_protocol != 3) {
#line 1758
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1758
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1758
      printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
             tmp___18, tmp___17, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1758);
    } else {

    }
#line 1759
    tmp___19 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1759
    if (tmp___19 != 0L) {
#line 1759
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1759), "i" (12UL));
      ldv_42020: ;
#line 1759
      goto ldv_42020;
    } else {

    }
#line 1760
    tmp___20 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 1760
    if (tmp___20 != 0L) {
#line 1760
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"),
                           "i" (1760), "i" (12UL));
      ldv_42021: ;
#line 1760
      goto ldv_42021;
    } else {

    }
#line 1796
    tmp___21 = __fswab32(p->seq_num);
#line 1796
    tmp___22 = drbd_wait_peer_seq(mdev, tmp___21);
#line 1796
    if (tmp___22 != 0) {
#line 1797
      goto out_interrupted;
    } else {

    }
#line 1799
    _spin_lock_irq(& mdev->req_lock);
#line 1801
    tmp___23 = ee_hash_slot(mdev, sector);
#line 1801
    hlist_add_head(& e->colision, tmp___23);
#line 1804
    slot = tl_hash_slot(mdev, sector);
#line 1805
    first = 1;
    ldv_42033: 
#line 1807
    have_unacked = 0;
#line 1808
    have_conflict = 0;
#line 1809
    prepare_to_wait(& mdev->misc_wait, & wait, 1);
#line 1811
    n = slot->first;
#line 1811
    goto ldv_42030;
    ldv_42029: 
#line 1812
    tmp___28 = overlaps(i->sector, (int )i->size, sector, size);
#line 1812
    if (tmp___28 != 0) {
#line 1815
      if (first != 0) {
#line 1816
        tmp___24 = get_current();
#line 1816
        tmp___25 = get_current();
#line 1816
        tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1816
        tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1816
        printk("<1>%s %s: %s[%u] Concurrent local write detected!\tnew: %llus +%u; pending: %llus +%u\n",
               tmp___27, tmp___26, (char *)(& tmp___25->comm), tmp___24->pid, (unsigned long long )sector,
               size, (unsigned long long )i->sector, i->size);
      } else {

      }
#line 1821
      if ((i->rq_state & 8UL) != 0UL) {
#line 1822
        have_unacked = have_unacked + 1;
      } else {

      }
#line 1823
      have_conflict = have_conflict + 1;
    } else {

    }
#line 1811
    n = n->next;
    ldv_42030: ;
#line 1811
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 1811
      __builtin_prefetch((void const   *)n->next);
#line 1811
      if (1 != 0) {
#line 1811
        __mptr___0 = (struct hlist_node  const  *)n;
#line 1811
        i = (struct drbd_request *)__mptr___0 + 0xffffffffffffffd8UL;
#line 1811
        if (1 != 0) {
#line 1812
          goto ldv_42029;
        } else {
#line 1814
          goto ldv_42031;
        }
      } else {
#line 1814
        goto ldv_42031;
      }
    } else {

    }
    ldv_42031: ;
#line 1827
    if (have_conflict == 0) {
#line 1828
      goto ldv_42032;
    } else {

    }
#line 1831
    if ((first != 0 && discard != 0) && have_unacked != 0) {
#line 1832
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1832
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1832
      printk("<1>%s %s: Concurrent write! [DISCARD BY FLAG] sec=%llus\n", tmp___30,
             tmp___29, (unsigned long long )sector);
#line 1834
      inc_unacked(mdev);
#line 1835
      e->w.cb = & e_send_discard_ack;
#line 1836
      list_add_tail(& e->w.list, & mdev->done_ee);
#line 1838
      _spin_unlock_irq(& mdev->req_lock);
#line 1843
      put_ldev(mdev);
#line 1844
      wake_asender(mdev);
#line 1845
      finish_wait(& mdev->misc_wait, & wait);
#line 1846
      return (1);
    } else {

    }
#line 1849
    tmp___31 = get_current();
#line 1849
    tmp___32 = signal_pending(tmp___31);
#line 1849
    if (tmp___32 != 0) {
#line 1850
      hlist_del_init(& e->colision);
#line 1852
      _spin_unlock_irq(& mdev->req_lock);
#line 1854
      finish_wait(& mdev->misc_wait, & wait);
#line 1855
      goto out_interrupted;
    } else {

    }
#line 1858
    _spin_unlock_irq(& mdev->req_lock);
#line 1859
    if (first != 0) {
#line 1860
      first = 0;
#line 1861
      tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1861
      tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1861
      printk("<1>%s %s: Concurrent write! [W AFTERWARDS] sec=%llus\n", tmp___34, tmp___33,
             (unsigned long long )sector);
    } else
#line 1863
    if (discard != 0) {
#line 1866
      if (have_unacked != 0) {
#line 1866
        tmp___35 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1866
        tmp___36 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1866
        printk("<3>%s %s: ASSERT( have_unacked == 0 ) in %s:%d\n", tmp___36, tmp___35,
               (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               1866);
      } else {

      }
    } else {

    }
#line 1868
    schedule();
#line 1869
    _spin_lock_irq(& mdev->req_lock);
#line 1870
    goto ldv_42033;
    ldv_42032: 
#line 1871
    finish_wait(& mdev->misc_wait, & wait);
  }
#line 1874
  list_add(& e->w.list, & mdev->active_ee);
#line 1875
  _spin_unlock_irq(& mdev->req_lock);
#line 1877
  switch ((mdev->net_conf)->wire_protocol) {
  case 3: 
#line 1879
  inc_unacked(mdev);
#line 1882
  goto ldv_42035;
  case 2: 
#line 1886
  drbd_send_ack(mdev, P_RECV_ACK, e);
#line 1887
  goto ldv_42035;
  case 1: ;
#line 1890
  goto ldv_42035;
  }
  ldv_42035: ;
#line 1893
  if (*((unsigned int *)mdev + 451UL) == 0U) {
#line 1895
    __drbd_set_out_of_sync(mdev, e->sector, (int )e->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                           1895U);
#line 1896
    e->flags = e->flags | 1U;
#line 1897
    drbd_al_begin_io(mdev, e->sector);
  } else {

  }
#line 1900
  (e->private_bio)->bi_rw = (unsigned long )rw;
#line 1901
  drbd_generic_make_request(mdev, 4, e->private_bio);
#line 1904
  maybe_kick_lo(mdev);
#line 1905
  return (1);
  out_interrupted: 
#line 1911
  put_ldev(mdev);
#line 1912
  drbd_free_ee(mdev, e);
#line 1913
  return (0);
}
}
#line 1916 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_DataRequest(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  sector_t capacity ;
  sector_t tmp ;
  struct drbd_epoch_entry *e ;
  struct digest_info *di ;
  int size ;
  int digest_size ;
  unsigned int fault_type ;
  struct p_block_req *p ;
  int brps ;
  int tmp___0 ;
  __u64 tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  void *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  struct task_struct *tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  struct task_struct *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 1919
  tmp = drbd_get_capacity(mdev->this_bdev);
#line 1919
  capacity = tmp;
#line 1921
  di = 0;
#line 1924
  p = (struct p_block_req *)h;
#line 1926
  brps = 24;
#line 1928
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )brps);
#line 1928
  if (tmp___0 != brps) {
#line 1929
    return (0);
  } else {

  }
#line 1931
  tmp___1 = __fswab64(p->sector);
#line 1931
  sector = (sector_t )tmp___1;
#line 1932
  tmp___2 = __fswab32(p->blksize);
#line 1932
  size = (int )tmp___2;
#line 1934
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1935
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1935
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1935
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___4, tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1936, (unsigned long long )sector, size);
#line 1937
    return (0);
  } else {

  }
#line 1939
  if ((sector_t )(size >> 9) + sector > capacity) {
#line 1940
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1940
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1940
    printk("<3>%s %s: %s:%d: sector: %llus, size: %u\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           1941, (unsigned long long )sector, size);
#line 1942
    return (0);
  } else {

  }
#line 1945
  tmp___10 = _get_ldev_if_state(mdev, D_UP_TO_DATE);
#line 1945
  if (tmp___10 == 0) {
#line 1946
    tmp___9 = __ratelimit(& drbd_ratelimit_state);
#line 1946
    if (tmp___9 != 0) {
#line 1947
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1947
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1947
      printk("<3>%s %s: Can not satisfy peer\'s read request, no local data.\n", tmp___8,
             tmp___7);
    } else {

    }
#line 1949
    drbd_send_ack_rp(mdev, (unsigned int )h->command == 8U ? P_NEG_DREPLY : P_NEG_RS_DREPLY,
                     p);
#line 1951
    return (1);
  } else {

  }
#line 1957
  e = drbd_alloc_ee(mdev, p->block_id, sector, (unsigned int )size, 16U);
#line 1958
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry *)0)) {
#line 1959
    put_ldev(mdev);
#line 1960
    return (0);
  } else {

  }
#line 1963
  (e->private_bio)->bi_rw = 0UL;
#line 1964
  (e->private_bio)->bi_end_io = & drbd_endio_read_sec;
#line 1966
  switch ((int )h->command) {
  case 8: 
#line 1968
  e->w.cb = & w_e_end_data_req;
#line 1969
  fault_type = 5U;
#line 1970
  goto ldv_42052;
  case 9: 
#line 1972
  e->w.cb = & w_e_end_rsdata_req;
#line 1973
  fault_type = 3U;
#line 1979
  tmp___15 = drbd_rs_begin_io(mdev, sector);
#line 1979
  if (tmp___15 == 0) {
#line 1982
    tmp___13 = get_current();
#line 1982
    tmp___14 = signal_pending(tmp___13);
#line 1982
    if (tmp___14 == 0) {
#line 1982
      tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1982
      tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1982
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___12, tmp___11,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             1982);
    } else {

    }
#line 1983
    goto out_free_e;
  } else {

  }
#line 1985
  goto ldv_42052;
  case 31: ;
  case 33: 
#line 1989
  fault_type = 3U;
#line 1990
  digest_size = (int )h->length - brps;
#line 1991
  tmp___16 = kmalloc((unsigned long )digest_size + 16UL, 16U);
#line 1991
  di = (struct digest_info *)tmp___16;
#line 1992
  if ((unsigned long )di == (unsigned long )((struct digest_info *)0)) {
#line 1993
    goto out_free_e;
  } else {

  }
#line 1995
  di->digest_size = digest_size;
#line 1996
  di->digest = (void *)di + 16U;
#line 1998
  tmp___17 = drbd_recv(mdev, di->digest, (size_t )digest_size);
#line 1998
  if (tmp___17 != digest_size) {
#line 1999
    goto out_free_e;
  } else {

  }
#line 2001
  e->block_id = (unsigned long long )di;
#line 2002
  if ((unsigned int )h->command == 33U) {
#line 2003
    if (mdev->agreed_pro_version <= 88) {
#line 2003
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2003
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2003
      printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___19,
             tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2003);
    } else {

    }
#line 2004
    e->w.cb = & w_e_end_csum_rs_req;
  } else
#line 2005
  if ((unsigned int )h->command == 31U) {
#line 2006
    e->w.cb = & w_e_end_ov_reply;
#line 2007
    atomic_dec(& mdev->rs_pending_cnt);
#line 2007
    tmp___23 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2007
    if (tmp___23 < 0) {
#line 2007
      tmp___20 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 2007
      tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2007
      tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2007
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___22, tmp___21,
             "receive_DataRequest", 2007, tmp___20);
    } else {

    }
#line 2008
    goto ldv_42052;
  } else {

  }
#line 2011
  tmp___28 = drbd_rs_begin_io(mdev, sector);
#line 2011
  if (tmp___28 == 0) {
#line 2013
    tmp___26 = get_current();
#line 2013
    tmp___27 = signal_pending(tmp___26);
#line 2013
    if (tmp___27 == 0) {
#line 2013
      tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
      tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2013
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___25, tmp___24,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2013);
    } else {

    }
#line 2014
    goto out_free_e;
  } else {

  }
#line 2016
  goto ldv_42052;
  case 30: ;
#line 2019
  if ((int )mdev->state.ldv_32167.conn > 9 && (unsigned int )*((unsigned short *)mdev + 902UL) != 304U) {
#line 2021
    tmp___29 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 2021
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2021
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2021
    printk("<4>%s %s: ASSERT FAILED: got P_OV_REQUEST while being %s\n", tmp___31,
           tmp___30, tmp___29);
  } else {

  }
#line 2023
  if (mdev->ov_start_sector == 0xffffffffffffffffUL && mdev->agreed_pro_version > 89) {
#line 2025
    mdev->ov_start_sector = sector;
#line 2026
    mdev->ov_position = sector;
#line 2027
    mdev->ov_left = mdev->rs_total - (sector >> 3);
#line 2028
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2028
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2028
    printk("<6>%s %s: Online Verify start sector: %llu\n", tmp___33, tmp___32, (unsigned long long )sector);
  } else {

  }
#line 2031
  e->w.cb = & w_e_end_ov_req;
#line 2032
  fault_type = 3U;
#line 2038
  tmp___38 = drbd_rs_begin_io(mdev, sector);
#line 2038
  if (tmp___38 == 0) {
#line 2041
    tmp___36 = get_current();
#line 2041
    tmp___37 = signal_pending(tmp___36);
#line 2041
    if (tmp___37 == 0) {
#line 2041
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2041
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2041
      printk("<3>%s %s: ASSERT( signal_pending(current) ) in %s:%d\n", tmp___35, tmp___34,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2041);
    } else {

    }
#line 2042
    goto out_free_e;
  } else {

  }
#line 2044
  goto ldv_42052;
  default: 
#line 2048
  tmp___39 = cmdname((enum drbd_packets )h->command);
#line 2048
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2048
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2048
  printk("<3>%s %s: unexpected command (%s) in receive_DataRequest\n", tmp___41, tmp___40,
         tmp___39);
#line 2050
  fault_type = 9U;
  }
  ldv_42052: 
#line 2053
  _spin_lock_irq(& mdev->req_lock);
#line 2054
  list_add(& e->w.list, & mdev->read_ee);
#line 2055
  _spin_unlock_irq(& mdev->req_lock);
#line 2057
  inc_unacked(mdev);
#line 2059
  drbd_generic_make_request(mdev, (int )fault_type, e->private_bio);
#line 2060
  maybe_kick_lo(mdev);
#line 2062
  return (1);
  out_free_e: 
#line 2065
  kfree((void const   *)di);
#line 2066
  put_ldev(mdev);
#line 2067
  drbd_free_ee(mdev, e);
#line 2068
  return (0);
}
}
#line 2071 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_0p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int rv ;
  unsigned long ch_self ;
  unsigned long ch_peer ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2073
  rv = -100;
#line 2076
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2077
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2079
  ch_peer = (unsigned long )*(mdev->p_uuid + 4UL);
#line 2080
  ch_self = mdev->comm_bm_set;
#line 2082
  switch ((mdev->net_conf)->after_sb_0p) {
  case 7: ;
  case 8: ;
  case 9: 
#line 2086
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2086
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2086
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2087
  goto ldv_42074;
  case 0: ;
#line 2089
  goto ldv_42074;
  case 1: ;
#line 2091
  if (self == 0 && peer == 1) {
#line 2092
    rv = -1;
#line 2093
    goto ldv_42074;
  } else {

  }
#line 2095
  if (self == 1 && peer == 0) {
#line 2096
    rv = 1;
#line 2097
    goto ldv_42074;
  } else {

  }
  case 2: ;
#line 2101
  if (self == 0 && peer == 1) {
#line 2102
    rv = 1;
#line 2103
    goto ldv_42074;
  } else {

  }
#line 2105
  if (self == 1 && peer == 0) {
#line 2106
    rv = -1;
#line 2107
    goto ldv_42074;
  } else {

  }
#line 2110
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2110
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2110
  printk("<4>%s %s: Discard younger/older primary did not find a decision\nUsing discard-least-changes instead\n",
         tmp___2, tmp___1);
  case 3: ;
#line 2113
  if (ch_peer == 0UL && ch_self == 0UL) {
#line 2114
    tmp___3 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2114
    rv = tmp___3 != 0 ? -1 : 1;
#line 2116
    goto ldv_42074;
  } else {
#line 2118
    if (ch_peer == 0UL) {
#line 2118
      rv = 1;
#line 2118
      goto ldv_42074;
    } else {

    }
#line 2119
    if (ch_self == 0UL) {
#line 2119
      rv = -1;
#line 2119
      goto ldv_42074;
    } else {

    }
  }
#line 2121
  if ((mdev->net_conf)->after_sb_0p == 3) {
#line 2122
    goto ldv_42074;
  } else {

  }
  case 4: ;
#line 2124
  if (ch_self < ch_peer) {
#line 2125
    rv = -1;
  } else
#line 2126
  if (ch_self > ch_peer) {
#line 2127
    rv = 1;
  } else {
#line 2130
    tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2130
    rv = tmp___4 != 0 ? -1 : 1;
  }
#line 2132
  goto ldv_42074;
  case 5: 
#line 2134
  rv = -1;
#line 2135
  goto ldv_42074;
  case 6: 
#line 2137
  rv = 1;
  }
  ldv_42074: ;
#line 2140
  return (rv);
}
}
#line 2143 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_1p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2145
  rv = -100;
#line 2147
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2148
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2150
  switch ((mdev->net_conf)->after_sb_1p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: 
#line 2156
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2156
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2156
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2157
  goto ldv_42094;
  case 0: ;
#line 2159
  goto ldv_42094;
  case 7: 
#line 2161
  hg = drbd_asb_recover_0p(mdev);
#line 2162
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 2163
    rv = hg;
  } else {

  }
#line 2164
  if (hg == 1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2165
    rv = hg;
  } else {

  }
#line 2166
  goto ldv_42094;
  case 10: 
#line 2168
  rv = drbd_asb_recover_0p(mdev);
#line 2169
  goto ldv_42094;
  case 8: ;
#line 2171
  return ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U ? 1 : -1);
  case 9: 
#line 2173
  hg = drbd_asb_recover_0p(mdev);
#line 2174
  if (hg == -1 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 2175
    self = drbd_set_role(mdev, R_SECONDARY, 0);
#line 2179
    val.i = 0U;
#line 2179
    val.ldv_32167.role = 2U;
#line 2179
    mask.i = 0U;
#line 2179
    mask.ldv_32167.role = 3U;
#line 2179
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2180
    if (self != 1) {
#line 2181
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2183
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2183
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2183
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2184
      rv = hg;
    }
  } else {
#line 2187
    rv = hg;
  }
  }
  ldv_42094: ;
#line 2190
  return (rv);
}
}
#line 2193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_asb_recover_2p(struct drbd_conf *mdev ) 
{ 
  int self ;
  int peer ;
  int hg ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2195
  rv = -100;
#line 2197
  self = (int )(mdev->ldev)->md.uuid[1] & 1;
#line 2198
  peer = (int )*(mdev->p_uuid + 1UL) & 1;
#line 2200
  switch ((mdev->net_conf)->after_sb_2p) {
  case 1: ;
  case 2: ;
  case 4: ;
  case 5: ;
  case 6: ;
  case 7: ;
  case 8: 
#line 2208
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2208
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2208
  printk("<3>%s %s: Configuration error.\n", tmp___0, tmp);
#line 2209
  goto ldv_42118;
  case 10: 
#line 2211
  rv = drbd_asb_recover_0p(mdev);
#line 2212
  goto ldv_42118;
  case 0: ;
#line 2214
  goto ldv_42118;
  case 9: 
#line 2216
  hg = drbd_asb_recover_0p(mdev);
#line 2217
  if (hg == -1) {
#line 2221
    val.i = 0U;
#line 2221
    val.ldv_32167.role = 2U;
#line 2221
    mask.i = 0U;
#line 2221
    mask.ldv_32167.role = 3U;
#line 2221
    self = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 2222
    if (self != 1) {
#line 2223
      drbd_khelper(mdev, (char *)"pri-lost-after-sb");
    } else {
#line 2225
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2225
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2225
      printk("<4>%s %s: Successfully gave up primary role.\n", tmp___2, tmp___1);
#line 2226
      rv = hg;
    }
  } else {
#line 2229
    rv = hg;
  }
  }
  ldv_42118: ;
#line 2232
  return (rv);
}
}
#line 2235 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_uuid_dump(struct drbd_conf *mdev , char *text , u64 *uuid , u64 bits ,
                           u64 flags ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 2238
  if ((unsigned long )uuid == (unsigned long )((u64 *)0)) {
#line 2239
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2239
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2239
    printk("<6>%s %s: %s uuid info vanished while I was looking!\n", tmp___0, tmp,
           text);
#line 2240
    return;
  } else {

  }
#line 2242
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2242
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2242
  printk("<6>%s %s: %s %016llX:%016llX:%016llX:%016llX bits:%llu flags:%llX\n", tmp___2,
         tmp___1, text, *uuid, *(uuid + 1UL), *(uuid + 2UL), *(uuid + 3UL), bits,
         flags);
#line 2243
  return;
}
}
#line 2262 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_uuid_compare(struct drbd_conf *mdev , int *rule_nr ) 
{ 
  u64 self ;
  u64 peer ;
  int i ;
  int j ;
  int rct ;
  int dc ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  u64 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned long tmp___12 ;
  u64 tmp___13 ;

  {
#line 2267
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2268
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2270
  *rule_nr = 10;
#line 2271
  if (self == 4ULL && peer == 4ULL) {
#line 2272
    return (0);
  } else {

  }
#line 2274
  *rule_nr = 20;
#line 2275
  if ((self == 4ULL || self == 0ULL) && peer != 4ULL) {
#line 2277
    return (-2);
  } else {

  }
#line 2279
  *rule_nr = 30;
#line 2280
  if (self != 4ULL && (peer == 4ULL || peer == 0ULL)) {
#line 2282
    return (2);
  } else {

  }
#line 2284
  if (self == peer) {
#line 2287
    if (*(mdev->p_uuid + 1UL) == 0ULL && (mdev->ldev)->md.uuid[1] != 0ULL) {
#line 2289
      if (mdev->agreed_pro_version <= 90) {
#line 2290
        return (-1001);
      } else {

      }
#line 2292
      if ((((mdev->ldev)->md.uuid[1] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 3UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2294
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2294
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2294
        printk("<6>%s %s: was SyncSource, missed the resync finished event, corrected myself:\n",
               tmp___0, tmp);
#line 2295
        drbd_uuid_set_bm(mdev, 0ULL);
#line 2297
        if ((int )mdev->state.ldv_32167.disk > 2) {
#line 2297
          tmp___1 = drbd_bm_total_weight(mdev);
#line 2297
          tmp___2 = (u64 )tmp___1;
        } else {
#line 2297
          tmp___2 = 0ULL;
        }
#line 2297
        drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___2,
                       0ULL);
#line 2299
        *rule_nr = 34;
      } else {
#line 2301
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2301
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2301
        printk("<6>%s %s: was SyncSource (peer failed to write sync_uuid)\n", tmp___4,
               tmp___3);
#line 2302
        *rule_nr = 36;
      }
#line 2305
      return (1);
    } else {

    }
#line 2308
    if ((mdev->ldev)->md.uuid[1] == 0ULL && *(mdev->p_uuid + 1UL) != 0ULL) {
#line 2310
      if (mdev->agreed_pro_version <= 90) {
#line 2311
        return (-1001);
      } else {

      }
#line 2313
      if ((((mdev->ldev)->md.uuid[2] ^ *(mdev->p_uuid + 1UL)) & 0xfffffffffffffffeULL) == 0ULL && (((mdev->ldev)->md.uuid[3] ^ *(mdev->p_uuid + 2UL)) & 0xfffffffffffffffeULL) == 0ULL) {
#line 2315
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2315
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2315
        printk("<6>%s %s: was SyncTarget, peer missed the resync finished event, corrected peer:\n",
               tmp___6, tmp___5);
#line 2317
        *(mdev->p_uuid + 3UL) = *(mdev->p_uuid + 2UL);
#line 2318
        *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 1UL);
#line 2319
        *(mdev->p_uuid + 1UL) = 0ULL;
#line 2321
        drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL),
                       *(mdev->p_uuid + 5UL));
#line 2322
        *rule_nr = 35;
      } else {
#line 2324
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2324
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2324
        printk("<6>%s %s: was SyncTarget (failed to write sync_uuid)\n", tmp___8,
               tmp___7);
#line 2325
        *rule_nr = 37;
      }
#line 2328
      return (-1);
    } else {

    }
#line 2332
    tmp___9 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 2332
    rct = (int )((tmp___9 != 0 ? 1U : 0U) + ((unsigned int )*(mdev->p_uuid + 5UL) & 2U));
#line 2336
    *rule_nr = 40;
#line 2338
    switch (rct) {
    case 0: ;
#line 2339
    return (0);
    case 1: ;
#line 2340
    return (1);
    case 2: ;
#line 2341
    return (-1);
    case 3: 
#line 2343
    dc = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 2344
    return (dc != 0 ? -1 : 1);
    }
  } else {

  }
#line 2348
  *rule_nr = 50;
#line 2349
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2350
  if (self == peer) {
#line 2351
    return (-1);
  } else {

  }
#line 2353
  *rule_nr = 51;
#line 2354
  peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2355
  if (self == peer) {
#line 2356
    self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2357
    peer = *(mdev->p_uuid + 3UL) & 0xfffffffffffffffeULL;
#line 2358
    if (self == peer) {
#line 2362
      if (mdev->agreed_pro_version <= 90) {
#line 2363
        return (-1001);
      } else {

      }
#line 2365
      *(mdev->p_uuid + 1UL) = *(mdev->p_uuid + 2UL);
#line 2366
      *(mdev->p_uuid + 2UL) = *(mdev->p_uuid + 3UL);
#line 2367
      return (-1);
    } else {

    }
  } else {

  }
#line 2371
  *rule_nr = 60;
#line 2372
  self = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 2373
  i = 2;
#line 2373
  goto ldv_42148;
  ldv_42147: 
#line 2374
  peer = *(mdev->p_uuid + (unsigned long )i) & 0xfffffffffffffffeULL;
#line 2375
  if (self == peer) {
#line 2376
    return (-2);
  } else {

  }
#line 2373
  i = i + 1;
  ldv_42148: ;
#line 2373
  if (i <= 3) {
#line 2374
    goto ldv_42147;
  } else {

  }
#line 2379
  *rule_nr = 70;
#line 2380
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2381
  peer = *(mdev->p_uuid) & 0xfffffffffffffffeULL;
#line 2382
  if (self == peer) {
#line 2383
    return (1);
  } else {

  }
#line 2385
  *rule_nr = 71;
#line 2386
  self = (mdev->ldev)->md.uuid[2] & 0xfffffffffffffffeULL;
#line 2387
  if (self == peer) {
#line 2388
    self = (mdev->ldev)->md.uuid[3] & 0xfffffffffffffffeULL;
#line 2389
    peer = *(mdev->p_uuid + 2UL) & 0xfffffffffffffffeULL;
#line 2390
    if (self == peer) {
#line 2394
      if (mdev->agreed_pro_version <= 90) {
#line 2395
        return (-1001);
      } else {

      }
#line 2397
      _drbd_uuid_set(mdev, 1, (mdev->ldev)->md.uuid[2]);
#line 2398
      _drbd_uuid_set(mdev, 2, (mdev->ldev)->md.uuid[3]);
#line 2400
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2400
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2400
      printk("<6>%s %s: Undid last start of resync:\n", tmp___11, tmp___10);
#line 2402
      if ((int )mdev->state.ldv_32167.disk > 2) {
#line 2402
        tmp___12 = drbd_bm_total_weight(mdev);
#line 2402
        tmp___13 = (u64 )tmp___12;
      } else {
#line 2402
        tmp___13 = 0ULL;
      }
#line 2402
      drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), tmp___13,
                     0ULL);
#line 2405
      return (1);
    } else {

    }
  } else {

  }
#line 2410
  *rule_nr = 80;
#line 2411
  i = 2;
#line 2411
  goto ldv_42151;
  ldv_42150: 
#line 2412
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2413
  if (self == peer) {
#line 2414
    return (2);
  } else {

  }
#line 2411
  i = i + 1;
  ldv_42151: ;
#line 2411
  if (i <= 3) {
#line 2412
    goto ldv_42150;
  } else {

  }
#line 2417
  *rule_nr = 90;
#line 2418
  self = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
#line 2419
  peer = *(mdev->p_uuid + 1UL) & 0xfffffffffffffffeULL;
#line 2420
  if (self == peer && self != 0ULL) {
#line 2421
    return (100);
  } else {

  }
#line 2423
  *rule_nr = 100;
#line 2424
  i = 2;
#line 2424
  goto ldv_42157;
  ldv_42156: 
#line 2425
  self = (mdev->ldev)->md.uuid[i] & 0xfffffffffffffffeULL;
#line 2426
  j = 2;
#line 2426
  goto ldv_42154;
  ldv_42153: 
#line 2427
  peer = *(mdev->p_uuid + (unsigned long )j) & 0xfffffffffffffffeULL;
#line 2428
  if (self == peer) {
#line 2429
    return (-100);
  } else {

  }
#line 2426
  j = j + 1;
  ldv_42154: ;
#line 2426
  if (j <= 3) {
#line 2427
    goto ldv_42153;
  } else {

  }
#line 2424
  i = i + 1;
  ldv_42157: ;
#line 2424
  if (i <= 3) {
#line 2425
    goto ldv_42156;
  } else {

  }

#line 2433
  return (-1000);
}
}
#line 2439 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum drbd_conns drbd_sync_handshake(struct drbd_conf *mdev , enum drbd_role peer_role ,
                                           enum drbd_disk_state peer_disk ) 
{ 
  int hg ;
  int rule_nr ;
  enum drbd_conns rv ;
  enum drbd_disk_state mydisk ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int f ;
  long __x ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int pcount ;
  int forced ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long __x___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long __x___1 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  long __x___2 ;
  unsigned long tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  unsigned long tmp___30 ;

  {
#line 2443
  rv = C_MASK;
#line 2446
  mydisk = (enum drbd_disk_state )mdev->state.ldv_32167.disk;
#line 2447
  if ((unsigned int )mydisk == 3U) {
#line 2448
    mydisk = (enum drbd_disk_state )mdev->new_state_tmp.ldv_32167.disk;
  } else {

  }
#line 2450
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2450
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2450
  printk("<6>%s %s: drbd_sync_handshake:\n", tmp___0, tmp);
#line 2451
  drbd_uuid_dump(mdev, (char *)"self", (u64 *)(& (mdev->ldev)->md.uuid), (u64 )mdev->comm_bm_set,
                 0ULL);
#line 2452
  drbd_uuid_dump(mdev, (char *)"peer", mdev->p_uuid, *(mdev->p_uuid + 4UL), *(mdev->p_uuid + 5UL));
#line 2455
  hg = drbd_uuid_compare(mdev, & rule_nr);
#line 2457
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2457
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2457
  printk("<6>%s %s: uuid_compare()=%d by rule %d\n", tmp___2, tmp___1, hg, rule_nr);
#line 2459
  if (hg == -1000) {
#line 2460
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2460
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2460
    printk("<1>%s %s: Unrelated data, aborting!\n", tmp___4, tmp___3);
#line 2461
    return (C_MASK);
  } else {

  }
#line 2463
  if (hg == -1001) {
#line 2464
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2464
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2464
    printk("<1>%s %s: To resolve this both sides have to support at least protocol\n",
           tmp___6, tmp___5);
#line 2465
    return (C_MASK);
  } else {

  }
#line 2468
  if (((unsigned int )mydisk == 4U && (unsigned int )peer_disk > 4U) || ((unsigned int )peer_disk == 4U && (unsigned int )mydisk > 4U)) {
#line 2470
    if (hg == -100) {
#line 2470
      tmp___7 = 1;
    } else {
#line 2470
      __x = (long )hg;
#line 2470
      if ((__x < 0L ? - __x : __x) == 2L) {
#line 2470
        tmp___7 = 1;
      } else {
#line 2470
        tmp___7 = 0;
      }
    }
#line 2470
    f = tmp___7;
#line 2471
    hg = (unsigned int )mydisk > 4U ? 1 : -1;
#line 2472
    if (f != 0) {
#line 2473
      hg = hg * 2;
    } else {

    }
#line 2474
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2474
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2474
    printk("<6>%s %s: Becoming sync %s due to disk states.\n", tmp___9, tmp___8, hg > 0 ? (char *)"source" : (char *)"target");
  } else {

  }
#line 2478
  if (hg == 100 || (hg == -100 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U)) {
#line 2479
    pcount = ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) + ((unsigned int )peer_role == 1U);
#line 2481
    forced = hg == -100;
#line 2483
    switch (pcount) {
    case 0: 
#line 2485
    hg = drbd_asb_recover_0p(mdev);
#line 2486
    goto ldv_42174;
    case 1: 
#line 2488
    hg = drbd_asb_recover_1p(mdev);
#line 2489
    goto ldv_42174;
    case 2: 
#line 2491
    hg = drbd_asb_recover_2p(mdev);
#line 2492
    goto ldv_42174;
    }
    ldv_42174: 
#line 2494
    __x___0 = (long )hg;
#line 2494
    if ((__x___0 < 0L ? - __x___0 : __x___0) <= 99L) {
#line 2495
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2495
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2495
      printk("<4>%s %s: Split-Brain detected, %d primaries, automatically solved. Sync from %s node\n",
             tmp___11, tmp___10, pcount, hg < 0 ? (char *)"peer" : (char *)"this");
#line 2498
      if (forced != 0) {
#line 2499
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2499
        printk("<4>%s %s: Doing a full sync, since UUIDs where ambiguous.\n", tmp___13,
               tmp___12);
#line 2501
        hg = hg * 2;
      } else {

      }
    } else {

    }
  } else {

  }
#line 2506
  if (hg == -100) {
#line 2507
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U && (*(mdev->p_uuid + 5UL) & 1ULL) == 0ULL) {
#line 2508
      hg = -1;
    } else {

    }
#line 2509
    if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (int )*(mdev->p_uuid + 5UL) & 1) {
#line 2510
      hg = 1;
    } else {

    }
#line 2512
    __x___1 = (long )hg;
#line 2512
    if ((__x___1 < 0L ? - __x___1 : __x___1) <= 99L) {
#line 2513
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2513
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2513
      printk("<4>%s %s: Split-Brain detected, manually solved. Sync from %s node\n",
             tmp___15, tmp___14, hg < 0 ? (char *)"peer" : (char *)"this");
    } else {

    }
  } else {

  }
#line 2518
  if (hg == -100) {
#line 2519
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2519
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2519
    printk("<1>%s %s: Split-Brain detected, dropping connection!\n", tmp___17, tmp___16);
#line 2520
    drbd_khelper(mdev, (char *)"split-brain");
#line 2521
    return (C_MASK);
  } else {

  }
#line 2524
  if (hg > 0 && (unsigned int )mydisk <= 4U) {
#line 2525
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2525
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2525
    printk("<3>%s %s: I shall become SyncSource, but I am inconsistent!\n", tmp___19,
           tmp___18);
#line 2526
    return (C_MASK);
  } else {

  }
#line 2529
  if ((hg < 0 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && (int )mdev->state.ldv_32167.disk > 6) {
#line 2531
    switch ((mdev->net_conf)->rr_conflict) {
    case 9: 
#line 2533
    drbd_khelper(mdev, (char *)"pri-lost");
    case 0: 
#line 2536
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2536
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2536
    printk("<3>%s %s: I shall become SyncTarget, but I am primary!\n", tmp___21, tmp___20);
#line 2537
    return (C_MASK);
    case 10: 
#line 2539
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2539
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2539
    printk("<4>%s %s: Becoming SyncTarget, violating the stable-dataassumption\n",
           tmp___23, tmp___22);
    }
  } else {

  }
#line 2544
  __x___2 = (long )hg;
#line 2544
  if ((__x___2 < 0L ? - __x___2 : __x___2) > 1L) {
#line 2545
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2545
    printk("<6>%s %s: Writing the whole bitmap, full sync required after drbd_sync_handshake.\n",
           tmp___25, tmp___24);
#line 2546
    tmp___26 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from sync_handshake");
#line 2546
    if (tmp___26 != 0) {
#line 2547
      return (C_MASK);
    } else {

    }
  } else {

  }
#line 2550
  if (hg > 0) {
#line 2551
    rv = C_WF_BITMAP_S;
  } else
#line 2552
  if (hg < 0) {
#line 2553
    rv = C_WF_BITMAP_T;
  } else {
#line 2555
    rv = C_CONNECTED;
#line 2556
    tmp___30 = drbd_bm_total_weight(mdev);
#line 2556
    if (tmp___30 != 0UL) {
#line 2557
      tmp___27 = drbd_bm_total_weight(mdev);
#line 2557
      tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2557
      tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2557
      printk("<6>%s %s: No resync, but %lu bits in bitmap!\n", tmp___29, tmp___28,
             tmp___27);
    } else {

    }
  }
#line 2562
  return (rv);
}
}
#line 2566 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int cmp_after_sb(enum drbd_after_sb_p peer , enum drbd_after_sb_p self ) 
{ 


  {
#line 2569
  if (((unsigned int )peer == 6U && (unsigned int )self == 5U) || ((unsigned int )self == 6U && (unsigned int )peer == 5U)) {
#line 2571
    return (0);
  } else {

  }
#line 2574
  if ((((unsigned int )peer == 6U || (unsigned int )peer == 5U) || (unsigned int )self == 6U) || (unsigned int )self == 5U) {
#line 2576
    return (1);
  } else {

  }
#line 2579
  if ((unsigned int )peer == (unsigned int )self) {
#line 2580
    return (0);
  } else {

  }
#line 2583
  return (1);
}
}
#line 2586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_protocol(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_protocol *p ;
  int header_size ;
  int data_size ;
  int p_proto ;
  int p_after_sb_0p ;
  int p_after_sb_1p ;
  int p_after_sb_2p ;
  int p_want_lose ;
  int p_two_primaries ;
  char p_integrity_alg[64U] ;
  unsigned int tmp ;
  int tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  unsigned char *my_alg ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  int tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2588
  p = (struct p_protocol *)h;
#line 2592
  p_integrity_alg[0] = '\000';
#line 2592
  tmp = 1U;
#line 2592
  while (1) {
#line 2592
    if (tmp >= 64U) {
#line 2592
      break;
    } else {

    }
#line 2592
    p_integrity_alg[tmp] = (char)0;
#line 2592
    tmp = tmp + 1U;
  }
#line 2594
  header_size = 24;
#line 2595
  data_size = (int )h->length - header_size;
#line 2597
  tmp___0 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2597
  if (tmp___0 != header_size) {
#line 2598
    return (0);
  } else {

  }
#line 2600
  tmp___1 = __fswab32(p->protocol);
#line 2600
  p_proto = (int )tmp___1;
#line 2601
  tmp___2 = __fswab32(p->after_sb_0p);
#line 2601
  p_after_sb_0p = (int )tmp___2;
#line 2602
  tmp___3 = __fswab32(p->after_sb_1p);
#line 2602
  p_after_sb_1p = (int )tmp___3;
#line 2603
  tmp___4 = __fswab32(p->after_sb_2p);
#line 2603
  p_after_sb_2p = (int )tmp___4;
#line 2604
  tmp___5 = __fswab32(p->want_lose);
#line 2604
  p_want_lose = (int )tmp___5;
#line 2605
  tmp___6 = __fswab32(p->two_primaries);
#line 2605
  p_two_primaries = (int )tmp___6;
#line 2607
  if ((mdev->net_conf)->wire_protocol != p_proto) {
#line 2608
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2608
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2608
    printk("<3>%s %s: incompatible communication protocols\n", tmp___8, tmp___7);
#line 2609
    goto disconnect;
  } else {

  }
#line 2612
  tmp___11 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_0p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_0p);
#line 2612
  if (tmp___11 != 0) {
#line 2613
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2613
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2613
    printk("<3>%s %s: incompatible after-sb-0pri settings\n", tmp___10, tmp___9);
#line 2614
    goto disconnect;
  } else {

  }
#line 2617
  tmp___14 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_1p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_1p);
#line 2617
  if (tmp___14 != 0) {
#line 2618
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2618
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2618
    printk("<3>%s %s: incompatible after-sb-1pri settings\n", tmp___13, tmp___12);
#line 2619
    goto disconnect;
  } else {

  }
#line 2622
  tmp___17 = cmp_after_sb((enum drbd_after_sb_p )p_after_sb_2p, (enum drbd_after_sb_p )(mdev->net_conf)->after_sb_2p);
#line 2622
  if (tmp___17 != 0) {
#line 2623
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2623
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2623
    printk("<3>%s %s: incompatible after-sb-2pri settings\n", tmp___16, tmp___15);
#line 2624
    goto disconnect;
  } else {

  }
#line 2627
  if (p_want_lose != 0 && (unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U) {
#line 2628
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2628
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2628
    printk("<3>%s %s: both sides have the \'want_lose\' flag set\n", tmp___19, tmp___18);
#line 2629
    goto disconnect;
  } else {

  }
#line 2632
  if ((int )(mdev->net_conf)->two_primaries != p_two_primaries) {
#line 2633
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2633
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2633
    printk("<3>%s %s: incompatible setting of the two-primaries options\n", tmp___21,
           tmp___20);
#line 2634
    goto disconnect;
  } else {

  }
#line 2637
  if (mdev->agreed_pro_version > 86) {
#line 2638
    my_alg = (unsigned char *)(& (mdev->net_conf)->integrity_alg);
#line 2640
    tmp___22 = drbd_recv(mdev, (void *)(& p_integrity_alg), (size_t )data_size);
#line 2640
    if (tmp___22 != data_size) {
#line 2641
      return (0);
    } else {

    }
#line 2643
    p_integrity_alg[63] = 0;
#line 2644
    tmp___25 = strcmp((char const   *)(& p_integrity_alg), (char const   *)my_alg);
#line 2644
    if (tmp___25 != 0) {
#line 2645
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2645
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2645
      printk("<3>%s %s: incompatible setting of the data-integrity-alg\n", tmp___24,
             tmp___23);
#line 2646
      goto disconnect;
    } else {

    }
#line 2648
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2648
    printk("<6>%s %s: data-integrity-alg: %s\n", tmp___27, tmp___26, (unsigned int )*my_alg != 0U ? my_alg : (unsigned char *)"<not-used>");
  } else {

  }
#line 2652
  return (1);
  disconnect: 
#line 2655
  val.i = 0U;
#line 2655
  val.ldv_32167.conn = 1U;
#line 2655
  mask.i = 0U;
#line 2655
  mask.ldv_32167.conn = 31U;
#line 2655
  drbd_force_state(mdev, mask, val);
#line 2656
  return (0);
}
}
#line 2664 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
struct crypto_hash *drbd_crypto_alloc_digest_safe(struct drbd_conf  const  *mdev ,
                                                  char const   *alg , char const   *name ) 
{ 
  struct crypto_hash *tfm ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  void *tmp___5 ;
  struct crypto_tfm *tmp___6 ;
  int tmp___7 ;

  {
#line 2669
  if ((int )((signed char )*alg) == 0) {
#line 2670
    return (0);
  } else {

  }
#line 2672
  tfm = crypto_alloc_hash(alg, 0U, 128U);
#line 2673
  tmp___2 = IS_ERR((void const   *)tfm);
#line 2673
  if (tmp___2 != 0L) {
#line 2674
    tmp = PTR_ERR((void const   *)tfm);
#line 2674
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    printk("<3>%s %s: Can not allocate \"%s\" as %s (reason: %ld)\n", tmp___1, tmp___0,
           alg, name, tmp);
#line 2676
    return (tfm);
  } else {

  }
#line 2678
  tmp___6 = crypto_hash_tfm(tfm);
#line 2678
  tmp___7 = drbd_crypto_is_hash(tmp___6);
#line 2678
  if (tmp___7 == 0) {
#line 2679
    crypto_free_hash(tfm);
#line 2680
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2680
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2680
    printk("<3>%s %s: \"%s\" is not a digest (%s)\n", tmp___4, tmp___3, alg, name);
#line 2681
    tmp___5 = ERR_PTR(-22L);
#line 2681
    return ((struct crypto_hash *)tmp___5);
  } else {

  }
#line 2683
  return (tfm);
}
}
#line 2686 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_SyncParam(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int ok ;
  struct p_rs_param_89 *p ;
  unsigned int header_size ;
  unsigned int data_size ;
  unsigned int exp_max_sz ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  int apv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  long tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;
  size_t tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  size_t tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 2688
  ok = 1;
#line 2689
  p = (struct p_rs_param_89 *)h;
#line 2691
  verify_tfm = 0;
#line 2692
  csums_tfm = 0;
#line 2693
  apv = mdev->agreed_pro_version;
#line 2695
  exp_max_sz = apv > 87 ? (apv == 88 ? 76U : 140U) : 12U;
#line 2700
  if ((unsigned int )h->length > exp_max_sz) {
#line 2701
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2701
    printk("<3>%s %s: SyncParam packet too long: received %u, expected <= %u bytes\n",
           tmp___0, tmp, (int )h->length, exp_max_sz);
#line 2703
    return (0);
  } else {

  }
#line 2706
  if (apv <= 88) {
#line 2707
    header_size = 4U;
#line 2708
    data_size = (unsigned int )h->length - header_size;
  } else {
#line 2710
    header_size = 132U;
#line 2711
    data_size = (unsigned int )h->length - header_size;
#line 2712
    if (data_size != 0U) {
#line 2712
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2712
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2712
      printk("<3>%s %s: ASSERT( data_size == 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             2712);
    } else {

    }
  }
#line 2716
  memset((void *)(& p->verify_alg), 0, 128UL);
#line 2718
  tmp___3 = drbd_recv(mdev, (void *)(& h->payload), (size_t )header_size);
#line 2718
  if ((unsigned int )tmp___3 != header_size) {
#line 2719
    return (0);
  } else {

  }
#line 2721
  tmp___4 = __fswab32(p->rate);
#line 2721
  mdev->sync_conf.rate = (int )tmp___4;
#line 2723
  if (apv > 87) {
#line 2724
    if (apv == 88) {
#line 2725
      if (data_size > 64U) {
#line 2726
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2726
        printk("<3>%s %s: verify-alg too long, peer wants %u, accepting only %u byte\n",
               tmp___6, tmp___5, data_size, 64);
#line 2729
        return (0);
      } else {

      }
#line 2732
      tmp___7 = drbd_recv(mdev, (void *)(& p->verify_alg), (size_t )data_size);
#line 2732
      if ((unsigned int )tmp___7 != data_size) {
#line 2733
        return (0);
      } else {

      }
#line 2737
      if ((int )((signed char )p->verify_alg[data_size - 1U]) != 0) {
#line 2737
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2737
        printk("<3>%s %s: ASSERT( p->verify_alg[data_size-1] == 0 ) in %s:%d\n", tmp___9,
               tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2737);
      } else {

      }
#line 2738
      p->verify_alg[data_size - 1U] = 0;
    } else {
#line 2743
      if ((int )((signed char )p->verify_alg[63]) != 0) {
#line 2743
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2743
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2743
        printk("<3>%s %s: ASSERT( p->verify_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___11, tmp___10, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2743);
      } else {

      }
#line 2744
      if ((int )((signed char )p->csums_alg[63]) != 0) {
#line 2744
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2744
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2744
        printk("<3>%s %s: ASSERT( p->csums_alg[SHARED_SECRET_MAX-1] == 0 ) in %s:%d\n",
               tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
               2744);
      } else {

      }
#line 2745
      p->verify_alg[63] = 0;
#line 2746
      p->csums_alg[63] = 0;
    }
#line 2749
    tmp___17 = strcmp((char const   *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2749
    if (tmp___17 != 0) {
#line 2750
      if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2751
        tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2751
        tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2751
        printk("<3>%s %s: Different verify-alg settings. me=\"%s\" peer=\"%s\"\n",
               tmp___15, tmp___14, (unsigned char *)(& mdev->sync_conf.verify_alg),
               (char *)(& p->verify_alg));
#line 2753
        goto disconnect;
      } else {

      }
#line 2755
      verify_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                 (char const   *)(& p->verify_alg),
                                                 "verify-alg");
#line 2757
      tmp___16 = IS_ERR((void const   *)verify_tfm);
#line 2757
      if (tmp___16 != 0L) {
#line 2758
        verify_tfm = 0;
#line 2759
        goto disconnect;
      } else {

      }
    } else {

    }
#line 2763
    if (apv > 88) {
#line 2763
      tmp___21 = strcmp((char const   *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2763
      if (tmp___21 != 0) {
#line 2764
        if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2765
          tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2765
          tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2765
          printk("<3>%s %s: Different csums-alg settings. me=\"%s\" peer=\"%s\"\n",
                 tmp___19, tmp___18, (unsigned char *)(& mdev->sync_conf.csums_alg),
                 (char *)(& p->csums_alg));
#line 2767
          goto disconnect;
        } else {

        }
#line 2769
        csums_tfm = drbd_crypto_alloc_digest_safe((struct drbd_conf  const  *)mdev,
                                                  (char const   *)(& p->csums_alg),
                                                  "csums-alg");
#line 2771
        tmp___20 = IS_ERR((void const   *)csums_tfm);
#line 2771
        if (tmp___20 != 0L) {
#line 2772
          csums_tfm = 0;
#line 2773
          goto disconnect;
        } else {

        }
      } else {

      }
    } else {

    }
#line 2778
    _spin_lock(& mdev->peer_seq_lock);
#line 2780
    if ((unsigned long )verify_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2781
      strcpy((char *)(& mdev->sync_conf.verify_alg), (char const   *)(& p->verify_alg));
#line 2782
      tmp___22 = strlen((char const   *)(& p->verify_alg));
#line 2782
      mdev->sync_conf.verify_alg_len = (int )((unsigned int )tmp___22 + 1U);
#line 2783
      crypto_free_hash(mdev->verify_tfm);
#line 2784
      mdev->verify_tfm = verify_tfm;
#line 2785
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2785
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2785
      printk("<6>%s %s: using verify-alg: \"%s\"\n", tmp___24, tmp___23, (char *)(& p->verify_alg));
    } else {

    }
#line 2787
    if ((unsigned long )csums_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2788
      strcpy((char *)(& mdev->sync_conf.csums_alg), (char const   *)(& p->csums_alg));
#line 2789
      tmp___25 = strlen((char const   *)(& p->csums_alg));
#line 2789
      mdev->sync_conf.csums_alg_len = (int )((unsigned int )tmp___25 + 1U);
#line 2790
      crypto_free_hash(mdev->csums_tfm);
#line 2791
      mdev->csums_tfm = csums_tfm;
#line 2792
      tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2792
      tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2792
      printk("<6>%s %s: using csums-alg: \"%s\"\n", tmp___27, tmp___26, (char *)(& p->csums_alg));
    } else {

    }
#line 2794
    _spin_unlock(& mdev->peer_seq_lock);
  } else {

  }
#line 2797
  return (ok);
  disconnect: 
#line 2801
  crypto_free_hash(csums_tfm);
#line 2803
  crypto_free_hash(verify_tfm);
#line 2804
  val.i = 0U;
#line 2804
  val.ldv_32167.conn = 1U;
#line 2804
  mask.i = 0U;
#line 2804
  mask.ldv_32167.conn = 31U;
#line 2804
  drbd_force_state(mdev, mask, val);
#line 2805
  return (0);
}
}
#line 2808 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_setup_order_type(struct drbd_conf *mdev , int peer ) 
{ 


  {
#line 2810
  return;
}
}
#line 2815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void warn_if_differ_considerably(struct drbd_conf *mdev , char const   *s ,
                                        sector_t a , sector_t b ) 
{ 
  sector_t d ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 2819
  if (a == 0UL || b == 0UL) {
#line 2820
    return;
  } else {

  }
#line 2821
  d = a > b ? a - b : b - a;
#line 2822
  if (a >> 3 < d || b >> 3 < d) {
#line 2823
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2823
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2823
    printk("<4>%s %s: Considerable difference in %s: %llus vs. %llus\n", tmp___0,
           tmp, s, (unsigned long long )a, (unsigned long long )b);
  } else {

  }
#line 2824
  return;
}
}
#line 2827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sizes(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_sizes *p ;
  enum determine_dev_size dd ;
  unsigned int max_seg_s ;
  sector_t p_size ;
  sector_t p_usize ;
  sector_t my_usize ;
  int ldsc ;
  enum drbd_conns nconn ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u64 tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  sector_t tmp___6 ;
  unsigned long _min1 ;
  sector_t _min2 ;
  unsigned long tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  union drbd_state val___3 ;
  union drbd_state mask___3 ;
  int tmp___16 ;
  int tmp___17 ;
  sector_t tmp___18 ;
  __u32 tmp___19 ;
  unsigned int tmp___20 ;
  __u32 tmp___21 ;
  int tmp___22 ;
  __u64 tmp___23 ;
  sector_t tmp___24 ;
  int tmp___25 ;

  {
#line 2829
  p = (struct p_sizes *)h;
#line 2830
  dd = 0;
#line 2833
  ldsc = 0;
#line 2836
  _b = (unsigned int )h->length != 32U;
#line 2836
  if (_b != 0) {
#line 2836
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2836
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2836
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_sizes", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2836);
  } else {

  }
#line 2836
  if (_b != 0) {
#line 2836
    return (0);
  } else {

  }
#line 2837
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2837
  if (tmp___1 != (int )h->length) {
#line 2838
    return (0);
  } else {

  }
#line 2840
  tmp___2 = __fswab64(p->d_size);
#line 2840
  p_size = (sector_t )tmp___2;
#line 2841
  tmp___3 = __fswab64(p->u_size);
#line 2841
  p_usize = (sector_t )tmp___3;
#line 2843
  if (p_size == 0UL && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 2844
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2844
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2844
    printk("<3>%s %s: some backing storage is needed\n", tmp___5, tmp___4);
#line 2845
    val.i = 0U;
#line 2845
    val.ldv_32167.conn = 1U;
#line 2845
    mask.i = 0U;
#line 2845
    mask.ldv_32167.conn = 31U;
#line 2845
    drbd_force_state(mdev, mask, val);
#line 2846
    return (0);
  } else {

  }
#line 2851
  mdev->p_size = p_size;
#line 2854
  tmp___14 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2854
  if (tmp___14 != 0) {
#line 2855
    tmp___6 = drbd_get_max_capacity(mdev->ldev);
#line 2855
    warn_if_differ_considerably(mdev, "lower level device sizes", p_size, tmp___6);
#line 2857
    warn_if_differ_considerably(mdev, "user requested size", p_usize, (sector_t )(mdev->ldev)->dc.disk_size);
#line 2862
    if ((unsigned int )*((unsigned short *)mdev + 902UL) == 144U) {
#line 2863
      if ((unsigned long )(mdev->ldev)->dc.disk_size != 0UL) {
#line 2863
        if (p_usize == 0UL) {
#line 2863
          tmp___7 = (unsigned long )(mdev->ldev)->dc.disk_size;
        } else {
#line 2863
          _min1 = (unsigned long )(mdev->ldev)->dc.disk_size;
#line 2863
          _min2 = p_usize;
#line 2863
          tmp___7 = _min1 < _min2 ? _min1 : _min2;
        }
#line 2863
        p_usize = tmp___7;
      } else {
#line 2863
        p_usize = p_usize;
      }
    } else {

    }
#line 2866
    my_usize = (sector_t )(mdev->ldev)->dc.disk_size;
#line 2868
    if ((mdev->ldev)->dc.disk_size != (unsigned long long )p_usize) {
#line 2869
      (mdev->ldev)->dc.disk_size = (__u64 )p_usize;
#line 2870
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2870
      printk("<6>%s %s: Peer sets u_size to %lu sectors\n", tmp___9, tmp___8, (unsigned long )(mdev->ldev)->dc.disk_size);
    } else {

    }
#line 2876
    tmp___12 = drbd_new_dev_size(mdev, mdev->ldev);
#line 2876
    tmp___13 = drbd_get_capacity(mdev->this_bdev);
#line 2876
    if ((tmp___12 < tmp___13 && (int )mdev->state.ldv_32167.disk > 4) && (int )mdev->state.ldv_32167.conn <= 9) {
#line 2880
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2880
      printk("<3>%s %s: The peer\'s disk size is too small!\n", tmp___11, tmp___10);
#line 2881
      val___0.i = 0U;
#line 2881
      val___0.ldv_32167.conn = 1U;
#line 2881
      mask___0.i = 0U;
#line 2881
      mask___0.ldv_32167.conn = 31U;
#line 2881
      drbd_force_state(mdev, mask___0, val___0);
#line 2882
      (mdev->ldev)->dc.disk_size = (__u64 )my_usize;
#line 2883
      put_ldev(mdev);
#line 2884
      return (0);
    } else {

    }
#line 2886
    put_ldev(mdev);
  } else {

  }
#line 2890
  tmp___15 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2890
  if (tmp___15 != 0) {
#line 2891
    dd = drbd_determin_dev_size(mdev);
#line 2892
    put_ldev(mdev);
#line 2893
    if ((int )dd == -1) {
#line 2894
      return (0);
    } else {

    }
#line 2895
    drbd_md_sync(mdev);
  } else {
#line 2898
    drbd_set_my_capacity(mdev, p_size);
  }
#line 2901
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )mdev->state.ldv_32167.conn <= 10) {
#line 2901
    tmp___17 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2901
    if (tmp___17 != 0) {
#line 2902
      nconn = drbd_sync_handshake(mdev, (enum drbd_role )mdev->state.ldv_32167.peer,
                                  (enum drbd_disk_state )mdev->state.ldv_32167.pdsk);
#line 2904
      put_ldev(mdev);
#line 2906
      if ((unsigned int )nconn == 31U) {
#line 2907
        val___1.i = 0U;
#line 2907
        val___1.ldv_32167.conn = 1U;
#line 2907
        mask___1.i = 0U;
#line 2907
        mask___1.ldv_32167.conn = 31U;
#line 2907
        drbd_force_state(mdev, mask___1, val___1);
#line 2908
        return (0);
      } else {

      }
#line 2911
      val___3.i = 0U;
#line 2911
      val___3.ldv_32167.conn = (unsigned char )nconn;
#line 2911
      mask___3.i = 0U;
#line 2911
      mask___3.ldv_32167.conn = 31U;
#line 2911
      tmp___16 = drbd_request_state(mdev, mask___3, val___3);
#line 2911
      if (tmp___16 <= 0) {
#line 2912
        val___2.i = 0U;
#line 2912
        val___2.ldv_32167.conn = 1U;
#line 2912
        mask___2.i = 0U;
#line 2912
        mask___2.ldv_32167.conn = 31U;
#line 2912
        drbd_force_state(mdev, mask___2, val___2);
#line 2913
        return (0);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2917
  tmp___22 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2917
  if (tmp___22 != 0) {
#line 2918
    tmp___18 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2918
    if ((mdev->ldev)->known_size != tmp___18) {
#line 2919
      (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 2920
      ldsc = 1;
    } else {

    }
#line 2923
    tmp___19 = __fswab32(p->max_segment_size);
#line 2923
    max_seg_s = tmp___19;
#line 2924
    tmp___20 = queue_max_segment_size(mdev->rq_queue);
#line 2924
    if (tmp___20 != max_seg_s) {
#line 2925
      drbd_setup_queue_param(mdev, max_seg_s);
    } else {

    }
#line 2927
    tmp___21 = __fswab32(p->queue_order_type);
#line 2927
    drbd_setup_order_type(mdev, (int )tmp___21);
#line 2928
    put_ldev(mdev);
  } else {

  }
#line 2931
  if ((int )mdev->state.ldv_32167.conn > 9) {
#line 2932
    tmp___23 = __fswab64(p->c_size);
#line 2932
    tmp___24 = drbd_get_capacity(mdev->this_bdev);
#line 2932
    if (tmp___23 != (unsigned long long )tmp___24 || ldsc != 0) {
#line 2936
      drbd_send_sizes(mdev, 0);
    } else {

    }
#line 2938
    tmp___25 = test_and_clear_bit(24, (unsigned long volatile   *)(& mdev->flags));
#line 2938
    if (tmp___25 != 0 || ((int )dd == 2 && (unsigned int )*((unsigned short *)mdev + 902UL) == 160U)) {
#line 2940
      if ((int )mdev->state.ldv_32167.pdsk > 3 && (int )mdev->state.ldv_32167.disk > 3) {
#line 2942
        resync_after_online_grow(mdev);
      } else {
#line 2944
        set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {

  }
#line 2948
  return (1);
}
}
#line 2951 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_uuids(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_uuids *p ;
  u64 *p_uuid ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int skip_initial_sync ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  union drbd_state __ns ;
  int tmp___8 ;
  int tmp___9 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;

  {
#line 2953
  p = (struct p_uuids *)h;
#line 2957
  _b = (unsigned int )h->length != 48U;
#line 2957
  if (_b != 0) {
#line 2957
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2957
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2957
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_uuids", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           2957);
  } else {

  }
#line 2957
  if (_b != 0) {
#line 2957
    return (0);
  } else {

  }
#line 2958
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 2958
  if (tmp___1 != (int )h->length) {
#line 2959
    return (0);
  } else {

  }
#line 2961
  tmp___2 = kmalloc(48UL, 16U);
#line 2961
  p_uuid = (u64 *)tmp___2;
#line 2963
  i = 0;
#line 2963
  goto ldv_42293;
  ldv_42292: 
#line 2964
  tmp___3 = __fswab64(p->uuid[i]);
#line 2964
  *(p_uuid + (unsigned long )i) = tmp___3;
#line 2963
  i = i + 1;
  ldv_42293: ;
#line 2963
  if (i <= 5) {
#line 2964
    goto ldv_42292;
  } else {

  }
#line 2966
  kfree((void const   *)mdev->p_uuid);
#line 2967
  mdev->p_uuid = p_uuid;
#line 2969
  if ((((int )mdev->state.ldv_32167.conn <= 9 && (int )mdev->state.ldv_32167.disk <= 3) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ *p_uuid) & 0xfffffffffffffffeULL) != 0ULL) {
#line 2973
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2973
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2973
    printk("<3>%s %s: Can only connect to data with current UUID=%016llX\n", tmp___5,
           tmp___4, mdev->ed_uuid);
#line 2975
    val.i = 0U;
#line 2975
    val.ldv_32167.conn = 1U;
#line 2975
    mask.i = 0U;
#line 2975
    mask.ldv_32167.conn = 31U;
#line 2975
    drbd_force_state(mdev, mask, val);
#line 2976
    return (0);
  } else {

  }
#line 2979
  tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2979
  if (tmp___8 != 0) {
#line 2980
    skip_initial_sync = (((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (*(p_uuid + 5UL) & 8ULL) != 0ULL;
#line 2985
    if (skip_initial_sync != 0) {
#line 2986
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2986
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2986
      printk("<6>%s %s: Accepted new current UUID, preparing to skip initial sync\n",
             tmp___7, tmp___6);
#line 2987
      drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from receive_uuids");
#line 2989
      _drbd_uuid_set(mdev, 0, *p_uuid);
#line 2990
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 2991
      __ns.i = mdev->state.i;
#line 2991
      __ns.ldv_32167.disk = 8U;
#line 2991
      __ns.ldv_32167.pdsk = 8U;
#line 2991
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 2993
      drbd_md_sync(mdev);
    } else {

    }
#line 2995
    put_ldev(mdev);
  } else {

  }
#line 3002
  tmp___9 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3002
  if (tmp___9 == 0) {
#line 3002
    goto ldv_42302;
  } else {

  }
#line 3002
  tmp___10 = get_current();
#line 3002
  __wait.flags = 0U;
#line 3002
  __wait.private = (void *)tmp___10;
#line 3002
  __wait.func = & autoremove_wake_function;
#line 3002
  __wait.task_list.next = & __wait.task_list;
#line 3002
  __wait.task_list.prev = & __wait.task_list;
  ldv_42305: 
#line 3002
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3002
  tmp___11 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3002
  if (tmp___11 == 0) {
#line 3002
    goto ldv_42304;
  } else {

  }
#line 3002
  schedule();
#line 3002
  goto ldv_42305;
  ldv_42304: 
#line 3002
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42302: ;
#line 3003
  if ((int )mdev->state.ldv_32167.conn > 9 && (int )mdev->state.ldv_32167.disk <= 3) {
#line 3004
    drbd_set_ed_uuid(mdev, *p_uuid);
  } else {

  }
#line 3006
  return (1);
}
}
#line 3013 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static union drbd_state convert_state(union drbd_state ps ) 
{ 
  union drbd_state ms ;
  enum drbd_conns c_tab[32U] ;

  {
#line 3017
  c_tab[0] = 0;
#line 3017
  c_tab[1] = C_TEAR_DOWN;
#line 3017
  c_tab[2] = 0;
#line 3017
  c_tab[3] = 0;
#line 3017
  c_tab[4] = 0;
#line 3017
  c_tab[5] = 0;
#line 3017
  c_tab[6] = 0;
#line 3017
  c_tab[7] = 0;
#line 3017
  c_tab[8] = 0;
#line 3017
  c_tab[9] = 0;
#line 3017
  c_tab[10] = C_CONNECTED;
#line 3017
  c_tab[11] = C_STARTING_SYNC_T;
#line 3017
  c_tab[12] = C_STARTING_SYNC_S;
#line 3017
  c_tab[13] = 0;
#line 3017
  c_tab[14] = 0;
#line 3017
  c_tab[15] = 0;
#line 3017
  c_tab[16] = 0;
#line 3017
  c_tab[17] = 0;
#line 3017
  c_tab[18] = C_VERIFY_T;
#line 3017
  c_tab[19] = 0;
#line 3017
  c_tab[20] = 0;
#line 3017
  c_tab[21] = 0;
#line 3017
  c_tab[22] = 0;
#line 3017
  c_tab[23] = 0;
#line 3017
  c_tab[24] = 0;
#line 3017
  c_tab[25] = 0;
#line 3017
  c_tab[26] = 0;
#line 3017
  c_tab[27] = 0;
#line 3017
  c_tab[28] = 0;
#line 3017
  c_tab[29] = 0;
#line 3017
  c_tab[30] = 0;
#line 3017
  c_tab[31] = C_MASK;
#line 3027
  ms.i = ps.i;
#line 3029
  ms.ldv_32167.conn = (unsigned char )c_tab[(int )ps.ldv_32167.conn];
#line 3030
  ms.ldv_32167.peer = ps.ldv_32167.role;
#line 3031
  ms.ldv_32167.role = ps.ldv_32167.peer;
#line 3032
  ms.ldv_32167.pdsk = ps.ldv_32167.disk;
#line 3033
  ms.ldv_32167.disk = ps.ldv_32167.pdsk;
#line 3034
  ms.ldv_32167.peer_isp = (unsigned char )((int )ps.ldv_32167.aftr_isp | (int )ps.ldv_32167.user_isp);
#line 3036
  return (ms);
}
}
#line 3039 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_req_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state *p ;
  union drbd_state mask ;
  union drbd_state val ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 3041
  p = (struct p_req_state *)h;
#line 3045
  _b = (unsigned int )h->length != 8U;
#line 3045
  if (_b != 0) {
#line 3045
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3045
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3045
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_req_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3045);
  } else {

  }
#line 3045
  if (_b != 0) {
#line 3045
    return (0);
  } else {

  }
#line 3046
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3046
  if (tmp___1 != (int )h->length) {
#line 3047
    return (0);
  } else {

  }
#line 3049
  tmp___2 = __fswab32(p->mask);
#line 3049
  mask.i = tmp___2;
#line 3050
  tmp___3 = __fswab32(p->val);
#line 3050
  val.i = tmp___3;
#line 3052
  tmp___4 = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
#line 3052
  if (tmp___4 != 0) {
#line 3052
    tmp___5 = constant_test_bit(9U, (unsigned long const volatile   *)(& mdev->flags));
#line 3052
    if (tmp___5 != 0) {
#line 3054
      drbd_send_sr_reply(mdev, -19);
#line 3055
      return (1);
    } else {

    }
  } else {

  }
#line 3058
  mask = convert_state(mask);
#line 3059
  val = convert_state(val);
#line 3061
  rv = drbd_change_state(mdev, CS_VERBOSE, mask, val);
#line 3063
  drbd_send_sr_reply(mdev, rv);
#line 3064
  drbd_md_sync(mdev);
#line 3066
  return (1);
}
}
#line 3069 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_state(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_state *p ;
  enum drbd_conns nconn ;
  enum drbd_conns oconn ;
  union drbd_state ns ;
  union drbd_state peer_state ;
  enum drbd_disk_state real_peer_disk ;
  int rv ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int cr ;
  int tmp___6 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___11 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 3071
  p = (struct p_state *)h;
#line 3077
  _b = (unsigned int )h->length != 4U;
#line 3077
  if (_b != 0) {
#line 3077
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3077
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3077
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "receive_state", (char *)"h->length != (sizeof(*p)-sizeof(*h))",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3077);
  } else {

  }
#line 3077
  if (_b != 0) {
#line 3078
    return (0);
  } else {

  }
#line 3080
  tmp___1 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3080
  if (tmp___1 != (int )h->length) {
#line 3081
    return (0);
  } else {

  }
#line 3083
  tmp___2 = __fswab32(p->state);
#line 3083
  peer_state.i = tmp___2;
#line 3085
  real_peer_disk = (enum drbd_disk_state )peer_state.ldv_32167.disk;
#line 3086
  if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3087
    real_peer_disk = (*(mdev->p_uuid + 5UL) & 4ULL) != 0ULL ? D_INCONSISTENT : D_CONSISTENT;
#line 3088
    tmp___3 = drbd_disk_str(real_peer_disk);
#line 3088
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3088
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3088
    printk("<6>%s %s: real peer disk state = %s\n", tmp___5, tmp___4, tmp___3);
  } else {

  }
#line 3091
  _spin_lock_irq(& mdev->req_lock);
  retry: 
#line 3093
  nconn = (enum drbd_conns )mdev->state.ldv_32167.conn;
#line 3093
  oconn = nconn;
#line 3094
  _spin_unlock_irq(& mdev->req_lock);
#line 3096
  if ((unsigned int )nconn == 9U) {
#line 3097
    nconn = C_CONNECTED;
  } else {

  }
#line 3099
  if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0) && (int )peer_state.ldv_32167.disk > 2) {
#line 3099
    tmp___11 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3099
    if (tmp___11 != 0) {
#line 3104
      cr = (unsigned int )oconn <= 9U;
#line 3107
      cr = ((unsigned int )oconn == 10U && ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 6U)) | cr;
#line 3112
      tmp___6 = constant_test_bit(15U, (unsigned long const volatile   *)(& mdev->flags));
#line 3112
      cr = tmp___6 | cr;
#line 3115
      cr = ((unsigned int )oconn == 10U && ((int )peer_state.ldv_32167.conn > 10 && (int )peer_state.ldv_32167.conn <= 14)) | cr;
#line 3119
      if (cr != 0) {
#line 3120
        nconn = drbd_sync_handshake(mdev, (enum drbd_role )peer_state.ldv_32167.role,
                                    real_peer_disk);
      } else {

      }
#line 3122
      put_ldev(mdev);
#line 3123
      if ((unsigned int )nconn == 31U) {
#line 3124
        if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 6U) {
#line 3125
          val.i = 0U;
#line 3125
          val.ldv_32167.disk = 0U;
#line 3125
          mask.i = 0U;
#line 3125
          mask.ldv_32167.disk = 15U;
#line 3125
          drbd_force_state(mdev, mask, val);
#line 3126
          nconn = C_CONNECTED;
        } else
#line 3127
        if ((unsigned int )*((unsigned char *)(& peer_state) + 1UL) == 6U) {
#line 3128
          tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3128
          tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3128
          printk("<3>%s %s: Disk attach process on the peer node was aborted.\n",
                 tmp___8, tmp___7);
#line 3129
          peer_state.ldv_32167.disk = 0U;
        } else {
#line 3131
          if ((unsigned int )oconn != 9U) {
#line 3131
            tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3131
            tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3131
            printk("<3>%s %s: ASSERT( oconn == C_WF_REPORT_PARAMS ) in %s:%d\n", tmp___10,
                   tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                   3131);
          } else {

          }
#line 3132
          val___0.i = 0U;
#line 3132
          val___0.ldv_32167.conn = 1U;
#line 3132
          mask___0.i = 0U;
#line 3132
          mask___0.ldv_32167.conn = 31U;
#line 3132
          drbd_force_state(mdev, mask___0, val___0);
#line 3133
          return (0);
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 3138
  _spin_lock_irq(& mdev->req_lock);
#line 3139
  if ((unsigned int )mdev->state.ldv_32167.conn != (unsigned int )oconn) {
#line 3140
    goto retry;
  } else {

  }
#line 3141
  clear_bit(15, (unsigned long volatile   *)(& mdev->flags));
#line 3142
  ns.i = mdev->state.i;
#line 3143
  ns.ldv_32167.conn = (unsigned char )nconn;
#line 3144
  ns.ldv_32167.peer = peer_state.ldv_32167.role;
#line 3145
  ns.ldv_32167.pdsk = (unsigned char )real_peer_disk;
#line 3146
  ns.ldv_32167.peer_isp = (unsigned char )((int )peer_state.ldv_32167.aftr_isp | (int )peer_state.ldv_32167.user_isp);
#line 3147
  if (((unsigned int )nconn == 10U || (unsigned int )nconn == 13U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 3148
    ns.ldv_32167.disk = mdev->new_state_tmp.ldv_32167.disk;
  } else {

  }
#line 3150
  rv = _drbd_set_state(mdev, ns, 3, 0);
#line 3151
  ns = mdev->state;
#line 3152
  _spin_unlock_irq(& mdev->req_lock);
#line 3154
  if (rv <= 0) {
#line 3155
    val___1.i = 0U;
#line 3155
    val___1.ldv_32167.conn = 1U;
#line 3155
    mask___1.i = 0U;
#line 3155
    mask___1.ldv_32167.conn = 31U;
#line 3155
    drbd_force_state(mdev, mask___1, val___1);
#line 3156
    return (0);
  } else {

  }
#line 3159
  if ((unsigned int )oconn > 9U) {
#line 3160
    if (((unsigned int )nconn > 10U && (int )peer_state.ldv_32167.conn <= 10) && (unsigned int )*((unsigned char *)(& peer_state) + 1UL) != 6U) {
#line 3165
      drbd_send_uuids(mdev);
#line 3166
      drbd_send_state(mdev);
    } else {

    }
  } else {

  }
#line 3170
  (mdev->net_conf)->want_lose = 0U;
#line 3172
  drbd_md_sync(mdev);
#line 3174
  return (1);
}
}
#line 3177 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_sync_uuid(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_rs_uuid *p ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 3179
  p = (struct p_rs_uuid *)h;
#line 3181
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_32167.conn <= 9) || (int )mdev->state.ldv_32167.disk <= 2) {
#line 3181
    goto ldv_42355;
  } else {

  }
#line 3181
  tmp = get_current();
#line 3181
  __wait.flags = 0U;
#line 3181
  __wait.private = (void *)tmp;
#line 3181
  __wait.func = & autoremove_wake_function;
#line 3181
  __wait.task_list.next = & __wait.task_list;
#line 3181
  __wait.task_list.prev = & __wait.task_list;
  ldv_42358: 
#line 3181
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3181
  if (((unsigned int )*((unsigned short *)mdev + 902UL) == 240U || (int )mdev->state.ldv_32167.conn <= 9) || (int )mdev->state.ldv_32167.disk <= 2) {
#line 3181
    goto ldv_42357;
  } else {

  }
#line 3181
  schedule();
#line 3181
  goto ldv_42358;
  ldv_42357: 
#line 3181
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42355: 
#line 3188
  _b = (unsigned int )h->length != 8U;
#line 3188
  if (_b != 0) {
#line 3188
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3188
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3188
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "receive_sync_uuid",
           (char *)"h->length != (sizeof(*p)-sizeof(*h))", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3188);
  } else {

  }
#line 3188
  if (_b != 0) {
#line 3188
    return (0);
  } else {

  }
#line 3189
  tmp___2 = drbd_recv(mdev, (void *)(& h->payload), (size_t )h->length);
#line 3189
  if (tmp___2 != (int )h->length) {
#line 3190
    return (0);
  } else {

  }
#line 3194
  tmp___6 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 3194
  if (tmp___6 != 0) {
#line 3195
    tmp___3 = __fswab64(p->uuid);
#line 3195
    _drbd_uuid_set(mdev, 0, tmp___3);
#line 3196
    _drbd_uuid_set(mdev, 1, 0ULL);
#line 3198
    drbd_start_resync(mdev, C_SYNC_TARGET);
#line 3200
    put_ldev(mdev);
  } else {
#line 3202
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3202
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3202
    printk("<3>%s %s: Ignoring SyncUUID packet!\n", tmp___5, tmp___4);
  }
#line 3204
  return (1);
}
}
#line 3210 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret receive_bitmap_plain(struct drbd_conf *mdev , struct p_header *h ,
                                                    unsigned long *buffer , struct bm_xfer_ctx *c ) 
{ 
  unsigned int num_words ;
  size_t __min1 ;
  size_t __min2 ;
  unsigned int want ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3213
  __min1 = 511UL;
#line 3213
  __min2 = c->bm_words - c->word_offset;
#line 3213
  num_words = (unsigned int )(__min1 < __min2 ? __min1 : __min2);
#line 3214
  want = num_words * 8U;
#line 3216
  if ((unsigned int )h->length != want) {
#line 3217
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3217
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3217
    printk("<3>%s %s: %s:want (%u) != h->length (%u)\n", tmp___0, tmp, "receive_bitmap_plain",
           want, (int )h->length);
#line 3218
    return (FAILED);
  } else {

  }
#line 3220
  if (want == 0U) {
#line 3221
    return (DONE);
  } else {

  }
#line 3222
  tmp___1 = drbd_recv(mdev, (void *)buffer, (size_t )want);
#line 3222
  if ((unsigned int )tmp___1 != want) {
#line 3223
    return (FAILED);
  } else {

  }
#line 3225
  drbd_bm_merge_lel(mdev, c->word_offset, (size_t )num_words, buffer);
#line 3227
  c->word_offset = c->word_offset + (unsigned long )num_words;
#line 3228
  c->bit_offset = c->word_offset * 64UL;
#line 3229
  if (c->bit_offset > c->bm_bits) {
#line 3230
    c->bit_offset = c->bm_bits;
  } else {

  }
#line 3232
  return (OK);
}
}
#line 3236 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret recv_bm_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                                struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  u64 look_ahead ;
  u64 rl ;
  u64 tmp ;
  unsigned long s ;
  unsigned long e ;
  int len ;
  int toggle ;
  int tmp___0 ;
  int have ;
  int bits ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 3244
  s = c->bit_offset;
#line 3246
  len = (int )((unsigned int )p->head.length - 1U);
#line 3247
  tmp___0 = DCBP_get_start(p);
#line 3247
  toggle = tmp___0;
#line 3251
  tmp___1 = DCBP_get_pad_bits(p);
#line 3251
  bitstream_init(& bs, (void *)(& p->code), (size_t )len, (unsigned int )tmp___1);
#line 3253
  bits = bitstream_get_bits(& bs, & look_ahead, 64);
#line 3254
  if (bits < 0) {
#line 3255
    return (FAILED);
  } else {

  }
#line 3257
  have = bits;
#line 3257
  goto ldv_42394;
  ldv_42393: 
#line 3258
  bits = vli_decode_bits(& rl, look_ahead);
#line 3259
  if (bits <= 0) {
#line 3260
    return (FAILED);
  } else {

  }
#line 3262
  if (toggle != 0) {
#line 3263
    e = (unsigned long )(((unsigned long long )s + rl) - 1ULL);
#line 3264
    if (c->bm_bits <= e) {
#line 3265
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3265
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3265
      printk("<3>%s %s: bitmap overflow (e:%lu) while decoding bm RLE packet\n", tmp___3,
             tmp___2, e);
#line 3266
      return (FAILED);
    } else {

    }
#line 3268
    _drbd_bm_set_bits(mdev, s, e);
  } else {

  }
#line 3271
  if (have < bits) {
#line 3272
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3272
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3272
    printk("<3>%s %s: bitmap decoding error: h:%d b:%d la:0x%08llx l:%u/%u\n", tmp___5,
           tmp___4, have, bits, look_ahead, (unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code)),
           (unsigned int )bs.buf_len);
#line 3276
    return (FAILED);
  } else {

  }
#line 3278
  look_ahead = look_ahead >> bits;
#line 3279
  have = have - bits;
#line 3281
  bits = bitstream_get_bits(& bs, & tmp, 64 - have);
#line 3282
  if (bits < 0) {
#line 3283
    return (FAILED);
  } else {

  }
#line 3284
  look_ahead = (tmp << have) | look_ahead;
#line 3285
  have = have + bits;
#line 3257
  s = (unsigned long )((unsigned long long )s + rl);
#line 3257
  toggle = toggle == 0;
  ldv_42394: ;
#line 3257
  if (have > 0) {
#line 3258
    goto ldv_42393;
  } else {

  }
#line 3288
  c->bit_offset = s;
#line 3289
  bm_xfer_ctx_bit_to_word_offset(c);
#line 3291
  return (c->bm_bits == s);
}
}
#line 3295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static enum receive_bitmap_ret decode_bitmap_c(struct drbd_conf *mdev , struct p_compressed_bm *p ,
                                               struct bm_xfer_ctx *c ) 
{ 
  enum receive_bitmap_ret tmp ;
  enum drbd_bitmap_code tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 3299
  tmp___0 = DCBP_get_code(p);
#line 3299
  if ((unsigned int )tmp___0 == 2U) {
#line 3300
    tmp = recv_bm_rle_bits(mdev, p, c);
#line 3300
    return (tmp);
  } else {

  }
#line 3306
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3306
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3306
  printk("<3>%s %s: receive_bitmap_c: unknown encoding %u\n", tmp___2, tmp___1, (int )p->encoding);
#line 3307
  val.i = 0U;
#line 3307
  val.ldv_32167.conn = 6U;
#line 3307
  mask.i = 0U;
#line 3307
  mask.ldv_32167.conn = 31U;
#line 3307
  drbd_force_state(mdev, mask, val);
#line 3308
  return (FAILED);
}
}
#line 3311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void INFO_bm_xfer_stats(struct drbd_conf *mdev , char const   *direction , struct bm_xfer_ctx *c ) 
{ 
  unsigned int plain ;
  unsigned int total ;
  unsigned int r ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3315
  plain = (unsigned int )(((c->bm_words + 510UL) / 511UL + c->bm_words) + 1UL) * 8U;
#line 3318
  total = c->bytes[0] + c->bytes[1];
#line 3322
  if (total == 0U) {
#line 3323
    return;
  } else {

  }
#line 3326
  if (total >= plain) {
#line 3327
    return;
  } else {

  }
#line 3330
  r = total > 4294967U ? total / (plain / 1000U) : (total * 1000U) / plain;
#line 3333
  if (r > 1000U) {
#line 3334
    r = 1000U;
  } else {

  }
#line 3336
  r = 1000U - r;
#line 3337
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3337
  printk("<6>%s %s: %s bitmap stats [Bytes(packets)]: plain %u(%u), RLE %u(%u), total %u; compression: %u.%u%%\n",
         tmp___0, tmp, direction, c->bytes[1], c->packets[1], c->bytes[0], c->packets[0],
         total, r / 10U, r % 10U);
#line 3338
  return;
}
}
#line 3353 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_bitmap(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct bm_xfer_ctx c ;
  void *buffer ;
  enum receive_bitmap_ret ret ;
  int ok ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  unsigned long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___5 ;
  size_t tmp___6 ;
  struct p_compressed_bm *p ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len ;
  void *__ret ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;

  {
#line 3358
  ok = 0;
#line 3360
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3360
  if (tmp == 0) {
#line 3360
    goto ldv_42421;
  } else {

  }
#line 3360
  tmp___0 = get_current();
#line 3360
  __wait.flags = 0U;
#line 3360
  __wait.private = (void *)tmp___0;
#line 3360
  __wait.func = & autoremove_wake_function;
#line 3360
  __wait.task_list.next = & __wait.task_list;
#line 3360
  __wait.task_list.prev = & __wait.task_list;
  ldv_42424: 
#line 3360
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3360
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3360
  if (tmp___1 == 0) {
#line 3360
    goto ldv_42423;
  } else {

  }
#line 3360
  schedule();
#line 3360
  goto ldv_42424;
  ldv_42423: 
#line 3360
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42421: 
#line 3362
  drbd_bm_lock(mdev, (char *)"receive bitmap");
#line 3366
  tmp___2 = __get_free_pages(16U, 0U);
#line 3366
  buffer = (void *)tmp___2;
#line 3367
  if ((unsigned long )buffer == (unsigned long )((void *)0)) {
#line 3368
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3368
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3368
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___4, tmp___3,
           "receive_bitmap");
#line 3369
    goto out;
  } else {

  }
#line 3372
  tmp___5 = drbd_bm_bits(mdev);
#line 3372
  tmp___6 = drbd_bm_words(mdev);
#line 3372
  __constr_expr_0.bm_bits = tmp___5;
#line 3372
  __constr_expr_0.bm_words = tmp___6;
#line 3372
  __constr_expr_0.bit_offset = 0UL;
#line 3372
  __constr_expr_0.word_offset = 0UL;
#line 3372
  __constr_expr_0.packets[0] = 0U;
#line 3372
  __constr_expr_0.packets[1] = 0U;
#line 3372
  __constr_expr_0.bytes[0] = 0U;
#line 3372
  __constr_expr_0.bytes[1] = 0U;
#line 3372
  c = __constr_expr_0;
  ldv_42433: ;
#line 3378
  if ((unsigned int )h->command == 4U) {
#line 3379
    ret = receive_bitmap_plain(mdev, h, (unsigned long *)buffer, & c);
  } else
#line 3380
  if ((unsigned int )h->command == 36U) {
#line 3385
    if ((unsigned int )h->length > 4088U) {
#line 3386
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3386
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3386
      printk("<3>%s %s: ReportCBitmap packet too large\n", tmp___8, tmp___7);
#line 3387
      goto out;
    } else {

    }
#line 3390
    p = (struct p_compressed_bm *)buffer;
#line 3391
    __len = 8UL;
#line 3391
    if (__len > 63UL) {
#line 3391
      __ret = __memcpy((void *)p, (void const   *)h, __len);
    } else {
#line 3391
      __ret = __builtin_memcpy((void *)p, (void const   *)h, __len);
    }
#line 3392
    tmp___9 = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )h->length);
#line 3392
    if (tmp___9 != (int )h->length) {
#line 3393
      goto out;
    } else {

    }
#line 3394
    if ((unsigned int )p->head.length <= 1U) {
#line 3395
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3395
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3395
      printk("<3>%s %s: ReportCBitmap packet too small (l:%u)\n", tmp___11, tmp___10,
             (int )p->head.length);
#line 3396
      return (2);
    } else {

    }
#line 3398
    ret = decode_bitmap_c(mdev, p, & c);
  } else {
#line 3400
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3400
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3400
    printk("<4>%s %s: receive_bitmap: h->command neither ReportBitMap nor ReportCBitMap (is 0x%x)",
           tmp___13, tmp___12, (int )h->command);
#line 3401
    goto out;
  }
#line 3404
  c.packets[(unsigned int )h->command == 4U] = c.packets[(unsigned int )h->command == 4U] + 1U;
#line 3405
  c.bytes[(unsigned int )h->command == 4U] = (c.bytes[(unsigned int )h->command == 4U] + (unsigned int )h->length) + 8U;
#line 3407
  if ((unsigned int )ret != 0U) {
#line 3408
    goto ldv_42432;
  } else {

  }
#line 3410
  tmp___14 = drbd_recv_header(mdev, h);
#line 3410
  if (tmp___14 == 0) {
#line 3411
    goto out;
  } else {

  }
#line 3412
  if ((unsigned int )ret == 0U) {
#line 3413
    goto ldv_42433;
  } else {

  }
  ldv_42432: ;
#line 3413
  if ((unsigned int )ret == 2U) {
#line 3414
    goto out;
  } else {

  }
#line 3416
  INFO_bm_xfer_stats(mdev, "receive", & c);
#line 3418
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 224U) {
#line 3419
    tmp___15 = drbd_send_bitmap(mdev);
#line 3419
    ok = tmp___15 == 0;
#line 3420
    if (ok == 0) {
#line 3421
      goto out;
    } else {

    }
#line 3423
    val.i = 0U;
#line 3423
    val.ldv_32167.conn = 15U;
#line 3423
    mask.i = 0U;
#line 3423
    mask.ldv_32167.conn = 31U;
#line 3423
    ok = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 3424
    if (ok != 1) {
#line 3424
      tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
      tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3424
      printk("<3>%s %s: ASSERT( ok == SS_SUCCESS ) in %s:%d\n", tmp___17, tmp___16,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             3424);
    } else {

    }
  } else
#line 3425
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 208U) {
#line 3428
    tmp___18 = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 3428
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3428
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3428
    printk("<6>%s %s: unexpected cstate (%s) in receive_bitmap\n", tmp___20, tmp___19,
           tmp___18);
  } else {

  }
#line 3432
  ok = 1;
  out: 
#line 3434
  drbd_bm_unlock(mdev);
#line 3435
  if (ok != 0 && (unsigned int )*((unsigned short *)mdev + 902UL) == 208U) {
#line 3436
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {

  }
#line 3437
  free_pages((unsigned long )buffer, 0U);
#line 3438
  return (ok);
}
}
#line 3441 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_skip(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  char sink[128U] ;
  int size ;
  int want ;
  int r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int __min1 ;
  int __min2 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3447
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3447
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3447
  printk("<4>%s %s: skipping unknown optional packet type %d, l: %d!\n", tmp___0,
         tmp, (int )h->command, (int )h->length);
#line 3450
  size = (int )h->length;
#line 3451
  goto ldv_42454;
  ldv_42453: 
#line 3452
  __min1 = size;
#line 3452
  __min2 = 128;
#line 3452
  want = __min1 < __min2 ? __min1 : __min2;
#line 3453
  r = drbd_recv(mdev, (void *)(& sink), (size_t )want);
#line 3454
  _b = r <= 0;
#line 3454
  if (_b != 0) {
#line 3454
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3454
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3454
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "receive_skip", (char *)"r <= 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3454);
  } else {

  }
#line 3454
  if (_b != 0) {
#line 3454
    goto ldv_42452;
  } else {

  }
#line 3455
  size = size - r;
  ldv_42454: ;
#line 3451
  if (size > 0) {
#line 3452
    goto ldv_42453;
  } else {

  }
  ldv_42452: ;
#line 3457
  return (size == 0);
}
}
#line 3460 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int receive_UnplugRemote(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 3462
  if ((int )mdev->state.ldv_32167.disk > 3) {
#line 3463
    drbd_kick_lo(mdev);
  } else {

  }
#line 3467
  drbd_tcp_quickack(mdev->data.socket);
#line 3469
  return (1);
}
}
#line 3474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f drbd_default_handler[38U]  = 
#line 3474
  {      & receive_Data,      & receive_DataReply,      & receive_RSDataReply,      & receive_Barrier, 
        & receive_bitmap,      0,      0,      & receive_UnplugRemote, 
        & receive_DataRequest,      & receive_DataRequest,      & receive_SyncParam,      & receive_protocol, 
        & receive_uuids,      & receive_sizes,      & receive_state,      & receive_sync_uuid, 
        0,      0,      & receive_req_state,      0, 
        0,      0,      0,      0, 
        0,      0,      0,      0, 
        0,      0,      & receive_DataRequest,      & receive_DataRequest, 
        0,      & receive_DataRequest,      0,      & receive_SyncParam, 
        & receive_bitmap,      0};
#line 3500 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_cmd_handler)(struct drbd_conf * , struct p_header * )  =    (drbd_cmd_handler_f (**)(struct drbd_conf * ,
                            struct p_header * ))(& drbd_default_handler);
#line 3501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static drbd_cmd_handler_f (**drbd_opt_cmd_handler)(struct drbd_conf * , struct p_header * )  ;
#line 3503 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbdd(struct drbd_conf *mdev ) 
{ 
  int (*handler)(struct drbd_conf * , struct p_header * ) ;
  struct p_header *header ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  union drbd_state val ;
  union drbd_state mask ;
  long tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___6 ;
  long tmp___7 ;
  enum drbd_thread_state tmp___8 ;

  {
#line 3506
  header = & mdev->data.rbuf.header;
#line 3508
  goto ldv_42480;
  ldv_42479: 
#line 3509
  drbd_thread_current_set_cpu(mdev);
#line 3510
  tmp = drbd_recv_header(mdev, header);
#line 3510
  if (tmp == 0) {
#line 3511
    goto ldv_42470;
  } else {

  }
#line 3513
  if ((unsigned int )header->command <= 36U) {
#line 3514
    handler = *(drbd_cmd_handler + (unsigned long )header->command);
  } else
#line 3515
  if ((unsigned int )header->command > 256U && (unsigned int )header->command <= 256U) {
#line 3517
    handler = *(drbd_opt_cmd_handler + ((unsigned long )header->command + 0xffffffffffffff00UL));
  } else
#line 3518
  if ((unsigned int )header->command > 257U) {
#line 3519
    handler = & receive_skip;
  } else {
#line 3521
    handler = 0;
  }
#line 3523
  tmp___2 = __builtin_expect((unsigned long )handler == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                  struct p_header * ))0),
                             0L);
#line 3523
  if (tmp___2 != 0L) {
#line 3524
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3524
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3524
    printk("<3>%s %s: unknown packet type %d, l: %d!\n", tmp___1, tmp___0, (int )header->command,
           (int )header->length);
#line 3526
    val.i = 0U;
#line 3526
    val.ldv_32167.conn = 6U;
#line 3526
    mask.i = 0U;
#line 3526
    mask.ldv_32167.conn = 31U;
#line 3526
    drbd_force_state(mdev, mask, val);
#line 3527
    goto ldv_42470;
  } else {

  }
#line 3529
  tmp___6 = (*handler)(mdev, header);
#line 3529
  tmp___7 = __builtin_expect(tmp___6 == 0, 0L);
#line 3529
  if (tmp___7 != 0L) {
#line 3530
    tmp___3 = cmdname((enum drbd_packets )header->command);
#line 3530
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
    printk("<3>%s %s: error receiving %s, l: %d!\n", tmp___5, tmp___4, tmp___3, (int )header->length);
#line 3532
    val___0.i = 0U;
#line 3532
    val___0.ldv_32167.conn = 6U;
#line 3532
    mask___0.i = 0U;
#line 3532
    mask___0.ldv_32167.conn = 31U;
#line 3532
    drbd_force_state(mdev, mask___0, val___0);
#line 3533
    goto ldv_42470;
  } else {

  }
  ldv_42480: 
#line 3508
  tmp___8 = get_t_state(& mdev->receiver);
#line 3508
  if ((unsigned int )tmp___8 == 1U) {
#line 3509
    goto ldv_42479;
  } else {

  }
  ldv_42470: ;
#line 3513
  return;
}
}
#line 3538 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_fail_pending_reads(struct drbd_conf *mdev ) 
{ 
  struct hlist_head *slot ;
  struct hlist_node *pos ;
  struct hlist_node *tmp ;
  struct drbd_request *req ;
  int i ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3549
  _spin_lock_irq(& mdev->req_lock);
#line 3550
  i = 0;
#line 3550
  goto ldv_42497;
  ldv_42496: 
#line 3551
  slot = mdev->app_reads_hash + (unsigned long )i;
#line 3552
  pos = slot->first;
#line 3552
  goto ldv_42494;
  ldv_42493: 
#line 3558
  tmp___2 = list_empty((struct list_head  const  *)(& req->w.list));
#line 3558
  if (tmp___2 == 0) {
#line 3558
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3558
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3558
    printk("<3>%s %s: ASSERT( list_empty(&req->w.list) ) in %s:%d\n", tmp___1, tmp___0,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3558);
  } else {

  }
#line 3561
  _req_mod(req, connection_lost_while_pending);
#line 3552
  pos = tmp;
  ldv_42494: ;
#line 3552
  if ((unsigned long )pos != (unsigned long )((struct hlist_node *)0)) {
#line 3552
    tmp = pos->next;
#line 3552
    if (1 != 0) {
#line 3552
      __mptr = (struct hlist_node  const  *)pos;
#line 3552
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 3552
      if (1 != 0) {
#line 3553
        goto ldv_42493;
      } else {
#line 3555
        goto ldv_42495;
      }
    } else {
#line 3555
      goto ldv_42495;
    }
  } else {

  }
  ldv_42495: 
#line 3550
  i = i + 1;
  ldv_42497: ;
#line 3550
  if (i <= 14) {
#line 3551
    goto ldv_42496;
  } else {

  }
#line 3564
  i = 0;
#line 3564
  goto ldv_42500;
  ldv_42499: 
#line 3565
  tmp___5 = hlist_empty((struct hlist_head  const  *)mdev->app_reads_hash + (unsigned long )i);
#line 3565
  if (tmp___5 == 0) {
#line 3566
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3566
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3566
    printk("<4>%s %s: ASSERT FAILED: app_reads_hash[%d].first: %p, should be NULL\n",
           tmp___4, tmp___3, i, (mdev->app_reads_hash + (unsigned long )i)->first);
  } else {

  }
#line 3564
  i = i + 1;
  ldv_42500: ;
#line 3564
  if (i <= 14) {
#line 3565
    goto ldv_42499;
  } else {

  }
#line 3569
  memset((void *)mdev->app_reads_hash, 0, 120UL);
#line 3570
  _spin_unlock_irq(& mdev->req_lock);
#line 3571
  return;
}
}
#line 3573 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void drbd_flush_workqueue(struct drbd_conf *mdev ) 
{ 
  struct drbd_wq_barrier barr ;

  {
#line 3577
  barr.w.cb = & w_prev_work_done;
#line 3578
  init_completion(& barr.done);
#line 3579
  drbd_queue_work(& mdev->data.work, & barr.w);
#line 3580
  wait_for_completion(& barr.done);
#line 3581
  return;
}
}
#line 3583 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static void drbd_disconnect(struct drbd_conf *mdev ) 
{ 
  enum drbd_fencing_p fp ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  unsigned int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  enum drbd_disk_state nps ;
  enum drbd_disk_state tmp___8 ;
  union drbd_state val ;
  union drbd_state mask ;
  struct hlist_head *h ;
  int tmp___9 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  wait_queue_t __wait___1 ;
  struct task_struct *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  int tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  int tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  int tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  char const   *tmp___37 ;
  char const   *tmp___38 ;
  int tmp___39 ;

  {
#line 3587
  rv = 0;
#line 3590
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 0U) {
#line 3591
    return;
  } else {

  }
#line 3592
  if ((int )mdev->state.ldv_32167.conn > 7) {
#line 3593
    tmp = drbd_conn_str((enum drbd_conns )mdev->state.ldv_32167.conn);
#line 3593
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3593
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3593
    printk("<3>%s %s: ASSERT FAILED cstate = %s, expected < WFConnection\n", tmp___1,
           tmp___0, tmp);
  } else {

  }
#line 3597
  drbd_thread_stop(& mdev->asender);
#line 3599
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 3600
  drbd_free_sock(mdev);
#line 3601
  mutex_unlock(& mdev->data.mutex);
#line 3603
  _spin_lock_irq(& mdev->req_lock);
#line 3604
  _drbd_wait_ee_list_empty(mdev, & mdev->active_ee);
#line 3605
  _drbd_wait_ee_list_empty(mdev, & mdev->sync_ee);
#line 3606
  _drbd_wait_ee_list_empty(mdev, & mdev->read_ee);
#line 3607
  _spin_unlock_irq(& mdev->req_lock);
#line 3619
  drbd_rs_cancel_all(mdev);
#line 3620
  mdev->rs_total = 0UL;
#line 3621
  mdev->rs_failed = 0UL;
#line 3622
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 3623
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3626
  del_timer_sync(& mdev->resync_timer);
#line 3627
  set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 3628
  resync_timer_fn((unsigned long )mdev);
#line 3632
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3632
  if (tmp___2 == 0) {
#line 3632
    goto ldv_42514;
  } else {

  }
#line 3632
  tmp___3 = get_current();
#line 3632
  __wait.flags = 0U;
#line 3632
  __wait.private = (void *)tmp___3;
#line 3632
  __wait.func = & autoremove_wake_function;
#line 3632
  __wait.task_list.next = & __wait.task_list;
#line 3632
  __wait.task_list.prev = & __wait.task_list;
  ldv_42517: 
#line 3632
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 3632
  tmp___4 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 3632
  if (tmp___4 == 0) {
#line 3632
    goto ldv_42516;
  } else {

  }
#line 3632
  schedule();
#line 3632
  goto ldv_42517;
  ldv_42516: 
#line 3632
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42514: 
#line 3637
  drbd_flush_workqueue(mdev);
#line 3641
  drbd_process_done_ee(mdev);
#line 3643
  kfree((void const   *)mdev->p_uuid);
#line 3644
  mdev->p_uuid = 0;
#line 3646
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) == 0U) {
#line 3647
    tl_clear(mdev);
  } else {

  }
#line 3649
  drbd_fail_pending_reads(mdev);
#line 3651
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3651
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3651
  printk("<6>%s %s: Connection closed\n", tmp___6, tmp___5);
#line 3653
  drbd_md_sync(mdev);
#line 3655
  fp = FP_DONT_CARE;
#line 3656
  tmp___7 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 3656
  if (tmp___7 != 0) {
#line 3657
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 3658
    put_ldev(mdev);
  } else {

  }
#line 3661
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3662
    if ((unsigned int )fp != 0U && (int )mdev->state.ldv_32167.pdsk > 5) {
#line 3663
      tmp___8 = drbd_try_outdate_peer(mdev);
#line 3663
      nps = tmp___8;
#line 3664
      val.i = 0U;
#line 3664
      val.ldv_32167.pdsk = (unsigned char )nps;
#line 3664
      mask.i = 0U;
#line 3664
      mask.ldv_32167.pdsk = 15U;
#line 3664
      drbd_request_state(mdev, mask, val);
    } else {

    }
  } else {

  }
#line 3668
  _spin_lock_irq(& mdev->req_lock);
#line 3669
  os = mdev->state;
#line 3670
  if ((int )os.ldv_32167.conn > 1) {
#line 3672
    ns = os;
#line 3673
    ns.ldv_32167.conn = 2U;
#line 3674
    rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
  } else {

  }
#line 3676
  _spin_unlock_irq(& mdev->req_lock);
#line 3678
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U) {
#line 3680
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3680
    if (tmp___9 == 0) {
#line 3680
      goto ldv_42524;
    } else {

    }
#line 3680
    tmp___10 = get_current();
#line 3680
    __wait___0.flags = 0U;
#line 3680
    __wait___0.private = (void *)tmp___10;
#line 3680
    __wait___0.func = & autoremove_wake_function;
#line 3680
    __wait___0.task_list.next = & __wait___0.task_list;
#line 3680
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_42527: 
#line 3680
    prepare_to_wait(& mdev->misc_wait, & __wait___0, 2);
#line 3680
    tmp___11 = atomic_read((atomic_t const   *)(& mdev->net_cnt));
#line 3680
    if (tmp___11 == 0) {
#line 3680
      goto ldv_42526;
    } else {

    }
#line 3680
    schedule();
#line 3680
    goto ldv_42527;
    ldv_42526: 
#line 3680
    finish_wait(& mdev->misc_wait, & __wait___0);
    ldv_42524: 
#line 3684
    tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3684
    if (tmp___12 == 0) {
#line 3684
      goto ldv_42528;
    } else {

    }
#line 3684
    tmp___13 = get_current();
#line 3684
    __wait___1.flags = 0U;
#line 3684
    __wait___1.private = (void *)tmp___13;
#line 3684
    __wait___1.func = & autoremove_wake_function;
#line 3684
    __wait___1.task_list.next = & __wait___1.task_list;
#line 3684
    __wait___1.task_list.prev = & __wait___1.task_list;
    ldv_42531: 
#line 3684
    prepare_to_wait(& mdev->misc_wait, & __wait___1, 2);
#line 3684
    tmp___14 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3684
    if (tmp___14 == 0) {
#line 3684
      goto ldv_42530;
    } else {

    }
#line 3684
    schedule();
#line 3684
    goto ldv_42531;
    ldv_42530: 
#line 3684
    finish_wait(& mdev->misc_wait, & __wait___1);
    ldv_42528: 
#line 3686
    _spin_lock_irq(& mdev->req_lock);
#line 3688
    h = mdev->ee_hash;
#line 3688
    goto ldv_42533;
    ldv_42532: ;
#line 3689
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3690
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3690
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3690
      printk("<3>%s %s: ASSERT FAILED ee_hash[%u].first == %p, expected NULL\n", tmp___16,
             tmp___15, (int )(((long )h - (long )mdev->ee_hash) / 8L), h->first);
    } else {

    }
#line 3688
    h = h + 1;
    ldv_42533: ;
#line 3688
    if ((unsigned long )(mdev->ee_hash + (unsigned long )mdev->ee_hash_s) > (unsigned long )h) {
#line 3689
      goto ldv_42532;
    } else {

    }
#line 3692
    kfree((void const   *)mdev->ee_hash);
#line 3693
    mdev->ee_hash = 0;
#line 3694
    mdev->ee_hash_s = 0U;
#line 3697
    h = mdev->tl_hash;
#line 3697
    goto ldv_42536;
    ldv_42535: ;
#line 3698
    if ((unsigned long )h->first != (unsigned long )((struct hlist_node *)0)) {
#line 3699
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3699
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3699
      printk("<3>%s %s: ASSERT FAILED tl_hash[%u] == %p, expected NULL\n", tmp___18,
             tmp___17, (int )(((long )h - (long )mdev->tl_hash) / 8L), h->first);
    } else {

    }
#line 3697
    h = h + 1;
    ldv_42536: ;
#line 3697
    if ((unsigned long )(mdev->tl_hash + (unsigned long )mdev->tl_hash_s) > (unsigned long )h) {
#line 3698
      goto ldv_42535;
    } else {

    }
#line 3701
    kfree((void const   *)mdev->tl_hash);
#line 3702
    mdev->tl_hash = 0;
#line 3703
    mdev->tl_hash_s = 0U;
#line 3704
    _spin_unlock_irq(& mdev->req_lock);
#line 3706
    crypto_free_hash(mdev->cram_hmac_tfm);
#line 3707
    mdev->cram_hmac_tfm = 0;
#line 3709
    kfree((void const   *)mdev->net_conf);
#line 3710
    mdev->net_conf = 0;
#line 3711
    val___0.i = 0U;
#line 3711
    val___0.ldv_32167.conn = 0U;
#line 3711
    mask___0.i = 0U;
#line 3711
    mask___0.ldv_32167.conn = 31U;
#line 3711
    drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 3721
  tmp___19 = drbd_release_ee(mdev, & mdev->net_ee);
#line 3721
  i = (unsigned int )tmp___19;
#line 3722
  if (i != 0U) {
#line 3723
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3723
    printk("<6>%s %s: net_ee not empty, killed %u entries\n", tmp___21, tmp___20,
           i);
  } else {

  }
#line 3724
  tmp___22 = atomic_read((atomic_t const   *)(& mdev->pp_in_use));
#line 3724
  i = (unsigned int )tmp___22;
#line 3725
  if (i != 0U) {
#line 3726
    tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3726
    tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3726
    printk("<6>%s %s: pp_in_use = %u, expected 0\n", tmp___24, tmp___23, i);
  } else {

  }
#line 3728
  tmp___27 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 3728
  if (tmp___27 == 0) {
#line 3728
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3728
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3728
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___26,
           tmp___25, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3728);
  } else {

  }
#line 3729
  tmp___30 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 3729
  if (tmp___30 == 0) {
#line 3729
    tmp___28 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3729
    tmp___29 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3729
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___29,
           tmp___28, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3729);
  } else {

  }
#line 3730
  tmp___33 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 3730
  if (tmp___33 == 0) {
#line 3730
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3730
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3730
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___32,
           tmp___31, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3730);
  } else {

  }
#line 3731
  tmp___36 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 3731
  if (tmp___36 == 0) {
#line 3731
    tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3731
    tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3731
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___35,
           tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3731);
  } else {

  }
#line 3734
  atomic_set(& (mdev->current_epoch)->epoch_size, 0);
#line 3735
  tmp___39 = list_empty((struct list_head  const  *)(& (mdev->current_epoch)->list));
#line 3735
  if (tmp___39 == 0) {
#line 3735
    tmp___37 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3735
    tmp___38 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3735
    printk("<3>%s %s: ASSERT( list_empty(&mdev->current_epoch->list) ) in %s:%d\n",
           tmp___38, tmp___37, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           3735);
  } else {

  }
#line 3736
  return;
}
}
#line 3747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_send_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3750
  p = & mdev->data.sbuf.handshake;
#line 3753
  tmp___1 = mutex_lock_interruptible_nested(& mdev->data.mutex, 0U);
#line 3753
  if (tmp___1 != 0) {
#line 3754
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3754
    printk("<3>%s %s: interrupted during initial handshake\n", tmp___0, tmp);
#line 3755
    return (0);
  } else {

  }
#line 3758
  if ((unsigned long )mdev->data.socket == (unsigned long )((struct socket *)0)) {
#line 3759
    mutex_unlock(& mdev->data.mutex);
#line 3760
    return (0);
  } else {

  }
#line 3763
  memset((void *)p, 0, 80UL);
#line 3764
  p->protocol_min = 1442840576U;
#line 3765
  p->protocol_max = 1526726656U;
#line 3766
  ok = _drbd_send_cmd(mdev, mdev->data.socket, P_HAND_SHAKE, (struct p_header *)p,
                      80UL, 0U);
#line 3768
  mutex_unlock(& mdev->data.mutex);
#line 3769
  return (ok);
}
}
#line 3779 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_handshake(struct drbd_conf *mdev ) 
{ 
  struct p_handshake *p ;
  int expect ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  int __min1 ;
  int __min2 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 3782
  p = & mdev->data.rbuf.handshake;
#line 3783
  expect = 72;
#line 3787
  rv = drbd_send_handshake(mdev);
#line 3788
  if (rv == 0) {
#line 3789
    return (0);
  } else {

  }
#line 3791
  rv = drbd_recv_header(mdev, & p->head);
#line 3792
  if (rv == 0) {
#line 3793
    return (0);
  } else {

  }
#line 3795
  if ((unsigned int )p->head.command != 65534U) {
#line 3796
    tmp = cmdname((enum drbd_packets )p->head.command);
#line 3796
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3796
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3796
    printk("<3>%s %s: expected HandShake packet, received: %s (0x%04x)\n", tmp___1,
           tmp___0, tmp, (int )p->head.command);
#line 3798
    return (-1);
  } else {

  }
#line 3801
  if ((int )p->head.length != expect) {
#line 3802
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3802
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3802
    printk("<3>%s %s: expected HandShake length: %u, received: %u\n", tmp___3, tmp___2,
           expect, (int )p->head.length);
#line 3804
    return (-1);
  } else {

  }
#line 3807
  rv = drbd_recv(mdev, (void *)(& p->head.payload), (size_t )expect);
#line 3809
  if (rv != expect) {
#line 3810
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3810
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3810
    printk("<3>%s %s: short read receiving handshake packet: l=%u\n", tmp___5, tmp___4,
           rv);
#line 3811
    return (0);
  } else {

  }
#line 3814
  tmp___6 = __fswab32(p->protocol_min);
#line 3814
  p->protocol_min = tmp___6;
#line 3815
  tmp___7 = __fswab32(p->protocol_max);
#line 3815
  p->protocol_max = tmp___7;
#line 3816
  if (p->protocol_max == 0U) {
#line 3817
    p->protocol_max = p->protocol_min;
  } else {

  }
#line 3819
  if (p->protocol_min > 91U || p->protocol_max <= 85U) {
#line 3821
    goto incompat;
  } else {

  }
#line 3823
  __min1 = 91;
#line 3823
  __min2 = (int )p->protocol_max;
#line 3823
  mdev->agreed_pro_version = __min1 < __min2 ? __min1 : __min2;
#line 3825
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3825
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3825
  printk("<6>%s %s: Handshake successful: Agreed network protocol version %d\n", tmp___9,
         tmp___8, mdev->agreed_pro_version);
#line 3828
  return (1);
  incompat: 
#line 3831
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3831
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3831
  printk("<3>%s %s: incompatible DRBD dialects: I support %d-%d, peer supports %d-%d\n",
         tmp___11, tmp___10, 86, 91, p->protocol_min, p->protocol_max);
#line 3835
  return (-1);
}
}
#line 3847 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int drbd_do_auth(struct drbd_conf *mdev ) 
{ 
  char my_challenge[64U] ;
  struct scatterlist sg ;
  char *response ;
  char *right_response ;
  char *peers_ch ;
  struct p_header p ;
  unsigned int key_len ;
  size_t tmp ;
  unsigned int resp_size ;
  struct hash_desc desc ;
  int rv ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  void *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  void *tmp___24 ;
  char const   *tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;

  {
#line 3851
  response = 0;
#line 3852
  right_response = 0;
#line 3853
  peers_ch = 0;
#line 3855
  tmp = strlen((char const   *)(& (mdev->net_conf)->shared_secret));
#line 3855
  key_len = (unsigned int )tmp;
#line 3860
  desc.tfm = mdev->cram_hmac_tfm;
#line 3861
  desc.flags = 0U;
#line 3863
  rv = crypto_hash_setkey(mdev->cram_hmac_tfm, (u8 const   *)(& (mdev->net_conf)->shared_secret),
                          key_len);
#line 3865
  if (rv != 0) {
#line 3866
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3866
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3866
    printk("<3>%s %s: crypto_hash_setkey() failed with %d\n", tmp___1, tmp___0, rv);
#line 3867
    rv = 0;
#line 3868
    goto fail;
  } else {

  }
#line 3871
  get_random_bytes((void *)(& my_challenge), 64);
#line 3873
  rv = drbd_send_cmd2(mdev, P_AUTH_CHALLENGE, (char *)(& my_challenge), 64UL);
#line 3874
  if (rv == 0) {
#line 3875
    goto fail;
  } else {

  }
#line 3877
  rv = drbd_recv_header(mdev, & p);
#line 3878
  if (rv == 0) {
#line 3879
    goto fail;
  } else {

  }
#line 3881
  if ((unsigned int )p.command != 16U) {
#line 3882
    tmp___2 = cmdname((enum drbd_packets )p.command);
#line 3882
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3882
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3882
    printk("<3>%s %s: expected AuthChallenge packet, received: %s (0x%04x)\n", tmp___4,
           tmp___3, tmp___2, (int )p.command);
#line 3884
    rv = 0;
#line 3885
    goto fail;
  } else {

  }
#line 3888
  if ((unsigned int )p.length > 128U) {
#line 3889
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3889
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3889
    printk("<3>%s %s: expected AuthChallenge payload too big.\n", tmp___6, tmp___5);
#line 3890
    rv = 0;
#line 3891
    goto fail;
  } else {

  }
#line 3894
  tmp___7 = kmalloc((size_t )p.length, 16U);
#line 3894
  peers_ch = (char *)tmp___7;
#line 3895
  if ((unsigned long )peers_ch == (unsigned long )((char *)0)) {
#line 3896
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3896
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3896
    printk("<3>%s %s: kmalloc of peers_ch failed\n", tmp___9, tmp___8);
#line 3897
    rv = 0;
#line 3898
    goto fail;
  } else {

  }
#line 3901
  rv = drbd_recv(mdev, (void *)peers_ch, (size_t )p.length);
#line 3903
  if ((int )p.length != rv) {
#line 3904
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3904
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3904
    printk("<3>%s %s: short read AuthChallenge: l=%u\n", tmp___11, tmp___10, rv);
#line 3905
    rv = 0;
#line 3906
    goto fail;
  } else {

  }
#line 3909
  resp_size = crypto_hash_digestsize(mdev->cram_hmac_tfm);
#line 3910
  tmp___12 = kmalloc((size_t )resp_size, 16U);
#line 3910
  response = (char *)tmp___12;
#line 3911
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3912
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3912
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3912
    printk("<3>%s %s: kmalloc of response failed\n", tmp___14, tmp___13);
#line 3913
    rv = 0;
#line 3914
    goto fail;
  } else {

  }
#line 3917
  sg_init_table(& sg, 1U);
#line 3918
  sg_set_buf(& sg, (void const   *)peers_ch, (unsigned int )p.length);
#line 3920
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)response);
#line 3921
  if (rv != 0) {
#line 3922
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3922
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3922
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___16, tmp___15,
           rv);
#line 3923
    rv = 0;
#line 3924
    goto fail;
  } else {

  }
#line 3927
  rv = drbd_send_cmd2(mdev, P_AUTH_RESPONSE, response, (size_t )resp_size);
#line 3928
  if (rv == 0) {
#line 3929
    goto fail;
  } else {

  }
#line 3931
  rv = drbd_recv_header(mdev, & p);
#line 3932
  if (rv == 0) {
#line 3933
    goto fail;
  } else {

  }
#line 3935
  if ((unsigned int )p.command != 17U) {
#line 3936
    tmp___17 = cmdname((enum drbd_packets )p.command);
#line 3936
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3936
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3936
    printk("<3>%s %s: expected AuthResponse packet, received: %s (0x%04x)\n", tmp___19,
           tmp___18, tmp___17, (int )p.command);
#line 3938
    rv = 0;
#line 3939
    goto fail;
  } else {

  }
#line 3942
  if ((unsigned int )p.length != resp_size) {
#line 3943
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3943
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3943
    printk("<3>%s %s: expected AuthResponse payload of wrong size\n", tmp___21, tmp___20);
#line 3944
    rv = 0;
#line 3945
    goto fail;
  } else {

  }
#line 3948
  rv = drbd_recv(mdev, (void *)response, (size_t )resp_size);
#line 3950
  if ((unsigned int )rv != resp_size) {
#line 3951
    tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3951
    tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3951
    printk("<3>%s %s: short read receiving AuthResponse: l=%u\n", tmp___23, tmp___22,
           rv);
#line 3952
    rv = 0;
#line 3953
    goto fail;
  } else {

  }
#line 3956
  tmp___24 = kmalloc((size_t )resp_size, 16U);
#line 3956
  right_response = (char *)tmp___24;
#line 3957
  if ((unsigned long )response == (unsigned long )((char *)0)) {
#line 3958
    tmp___25 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3958
    tmp___26 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3958
    printk("<3>%s %s: kmalloc of right_response failed\n", tmp___26, tmp___25);
#line 3959
    rv = 0;
#line 3960
    goto fail;
  } else {

  }
#line 3963
  sg_set_buf(& sg, (void const   *)(& my_challenge), 64U);
#line 3965
  rv = crypto_hash_digest(& desc, & sg, sg.length, (u8 *)right_response);
#line 3966
  if (rv != 0) {
#line 3967
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3967
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3967
    printk("<3>%s %s: crypto_hash_digest() failed with %d\n", tmp___28, tmp___27,
           rv);
#line 3968
    rv = 0;
#line 3969
    goto fail;
  } else {

  }
#line 3972
  tmp___29 = memcmp((void const   *)response, (void const   *)right_response, (size_t )resp_size);
#line 3972
  rv = tmp___29 == 0;
#line 3974
  if (rv != 0) {
#line 3975
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3975
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3975
    printk("<6>%s %s: Peer authenticated using %d bytes of \'%s\' HMAC\n", tmp___31,
           tmp___30, resp_size, (unsigned char *)(& (mdev->net_conf)->cram_hmac_alg));
  } else {

  }
  fail: 
#line 3979
  kfree((void const   *)peers_ch);
#line 3980
  kfree((void const   *)response);
#line 3981
  kfree((void const   *)right_response);
#line 3983
  return (rv);
}
}
#line 3987 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbdd_init(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int minor ;
  unsigned int tmp ;
  int h ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 3989
  mdev = thi->mdev;
#line 3990
  tmp = mdev_to_minor(mdev);
#line 3990
  minor = tmp;
#line 3993
  tmp___0 = get_current();
#line 3993
  sprintf((char *)(& tmp___0->comm), "drbd%d_receiver", minor);
#line 3995
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3995
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3995
  printk("<6>%s %s: receiver (re)started\n", tmp___2, tmp___1);
  ldv_42581: 
#line 3998
  h = drbd_connect(mdev);
#line 3999
  if (h == 0) {
#line 4000
    drbd_disconnect(mdev);
#line 4001
    tmp___3 = get_current();
#line 4001
    tmp___3->state = 1L;
#line 4002
    schedule_timeout(250L);
  } else {

  }
#line 4004
  if (h == -1) {
#line 4005
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4005
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4005
    printk("<4>%s %s: Discarding network configuration.\n", tmp___5, tmp___4);
#line 4006
    val.i = 0U;
#line 4006
    val.ldv_32167.conn = 1U;
#line 4006
    mask.i = 0U;
#line 4006
    mask.ldv_32167.conn = 31U;
#line 4006
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4008
  if (h == 0) {
#line 4009
    goto ldv_42581;
  } else {

  }

#line 4010
  if (h > 0) {
#line 4011
    tmp___6 = get_net_conf(mdev);
#line 4011
    if (tmp___6 != 0) {
#line 4012
      drbdd(mdev);
#line 4013
      put_net_conf(mdev);
    } else {

    }
  } else {

  }
#line 4017
  drbd_disconnect(mdev);
#line 4019
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4019
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4019
  printk("<6>%s %s: receiver terminated\n", tmp___8, tmp___7);
#line 4020
  return (0);
}
}
#line 4025 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_RqSReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_req_state_reply *p ;
  int retcode ;
  __u32 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 4027
  p = (struct p_req_state_reply *)h;
#line 4029
  tmp = __fswab32(p->retcode);
#line 4029
  retcode = (int )tmp;
#line 4031
  if (retcode > 0) {
#line 4032
    set_bit(10U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 4034
    set_bit(11U, (unsigned long volatile   *)(& mdev->flags));
#line 4035
    tmp___0 = drbd_set_st_err_str((enum drbd_state_ret_codes )retcode);
#line 4035
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4035
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4035
    printk("<3>%s %s: Requested state change failed by peer: %s (%d)\n", tmp___2,
           tmp___1, tmp___0, retcode);
  }
#line 4038
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 4040
  return (1);
}
}
#line 4043 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_Ping(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  int tmp ;

  {
#line 4045
  tmp = drbd_send_ping_ack(mdev);
#line 4045
  return (tmp);
}
}
#line 4049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_PingAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 


  {
#line 4052
  ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )((mdev->net_conf)->ping_int * 250);
#line 4054
  return (1);
}
}
#line 4057 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_IsInSync(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 4059
  p = (struct p_block_ack *)h;
#line 4060
  tmp = __fswab64(p->sector);
#line 4060
  sector = (sector_t )tmp;
#line 4061
  tmp___0 = __fswab32(p->blksize);
#line 4061
  blksize = (int )tmp___0;
#line 4063
  if (mdev->agreed_pro_version <= 88) {
#line 4063
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4063
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4063
    printk("<3>%s %s: ASSERT( mdev->agreed_pro_version >= 89 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4063);
  } else {

  }
#line 4065
  tmp___3 = __fswab32(p->seq_num);
#line 4065
  update_peer_seq(mdev, tmp___3);
#line 4067
  drbd_rs_complete_io(mdev, sector);
#line 4068
  __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                     4068U);
#line 4070
  mdev->rs_same_csum = mdev->rs_same_csum + (unsigned long )(blksize >> 12);
#line 4071
  atomic_dec(& mdev->rs_pending_cnt);
#line 4071
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4071
  if (tmp___7 < 0) {
#line 4071
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4071
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4071
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4071
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_IsInSync",
           4071, tmp___4);
  } else {

  }
#line 4073
  return (1);
}
}
#line 4078 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct drbd_request *_ack_id_to_req(struct drbd_conf *mdev , u64 id , sector_t sector ) 
{ 
  struct hlist_head *slot ;
  struct hlist_head *tmp ;
  struct hlist_node *n ;
  struct drbd_request *req ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct hlist_node  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 4081
  tmp = tl_hash_slot(mdev, sector);
#line 4081
  slot = tmp;
#line 4085
  n = slot->first;
#line 4085
  goto ldv_42622;
  ldv_42621: ;
#line 4086
  if ((unsigned long )req == (unsigned long )id) {
#line 4087
    if (req->sector != sector) {
#line 4088
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4088
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4088
      printk("<3>%s %s: _ack_id_to_req: found req %p but it has wrong sector (%llus versus %llus)\n",
             tmp___1, tmp___0, req, (unsigned long long )req->sector, (unsigned long long )sector);
#line 4092
      goto ldv_42620;
    } else {

    }
#line 4094
    return (req);
  } else {

  }
#line 4085
  n = n->next;
  ldv_42622: ;
#line 4085
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 4085
    __builtin_prefetch((void const   *)n->next);
#line 4085
    if (1 != 0) {
#line 4085
      __mptr = (struct hlist_node  const  *)n;
#line 4085
      req = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 4085
      if (1 != 0) {
#line 4086
        goto ldv_42621;
      } else {
#line 4088
        goto ldv_42620;
      }
    } else {
#line 4088
      goto ldv_42620;
    }
  } else {

  }
  ldv_42620: 
#line 4097
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4097
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4097
  printk("<3>%s %s: _ack_id_to_req: failed to find req %p, sector %llus in list\n",
         tmp___3, tmp___2, (void *)id, (unsigned long long )sector);
#line 4099
  return (0);
}
}
#line 4105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int validate_req_change_req_state(struct drbd_conf *mdev , u64 id , sector_t sector ,
                                         req_validator_fn *validator , char const   *func ,
                                         enum drbd_req_event what ) 
{ 
  struct drbd_request *req ;
  struct bio_and_error m ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 4112
  _spin_lock_irq(& mdev->req_lock);
#line 4113
  req = (*validator)(mdev, id, sector);
#line 4114
  tmp___1 = __builtin_expect((unsigned long )req == (unsigned long )((struct drbd_request *)0),
                             0L);
#line 4114
  if (tmp___1 != 0L) {
#line 4115
    _spin_unlock_irq(& mdev->req_lock);
#line 4116
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4116
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4116
    printk("<3>%s %s: %s: got a corrupt block_id/sector pair\n", tmp___0, tmp, func);
#line 4117
    return (0);
  } else {

  }
#line 4119
  __req_mod(req, what, & m);
#line 4120
  _spin_unlock_irq(& mdev->req_lock);
#line 4122
  if ((unsigned long )m.bio != (unsigned long )((struct bio *)0)) {
#line 4123
    complete_master_bio(mdev, & m);
  } else {

  }
#line 4124
  return (1);
}
}
#line 4127 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BlockAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  int blksize ;
  __u32 tmp___0 ;
  enum drbd_req_event what ;
  __u32 tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  __u16 tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 4129
  p = (struct p_block_ack *)h;
#line 4130
  tmp = __fswab64(p->sector);
#line 4130
  sector = (sector_t )tmp;
#line 4131
  tmp___0 = __fswab32(p->blksize);
#line 4131
  blksize = (int )tmp___0;
#line 4134
  tmp___1 = __fswab32(p->seq_num);
#line 4134
  update_peer_seq(mdev, tmp___1);
#line 4136
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4137
    __drbd_set_in_sync(mdev, sector, blksize, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
                       4137U);
#line 4138
    atomic_dec(& mdev->rs_pending_cnt);
#line 4138
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4138
    if (tmp___5 < 0) {
#line 4138
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4138
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4138
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4138
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "got_BlockAck", 4138, tmp___2);
    } else {

    }
#line 4139
    return (1);
  } else {

  }
#line 4141
  tmp___6 = __fswab16((int )h->command);
#line 4141
  switch ((int )tmp___6) {
  case 23: ;
#line 4143
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4143
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4143
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4143
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___8, tmp___7, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4143);
  } else {

  }
#line 4144
  what = write_acked_by_peer_and_sis;
#line 4145
  goto ldv_42650;
  case 22: ;
#line 4147
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4147
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4147
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4147
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4147);
  } else {

  }
#line 4148
  what = write_acked_by_peer;
#line 4149
  goto ldv_42650;
  case 21: ;
#line 4151
  if ((mdev->net_conf)->wire_protocol != 2) {
#line 4151
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4151
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4151
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_B ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4151);
  } else {

  }
#line 4152
  what = recv_acked_by_peer;
#line 4153
  goto ldv_42650;
  case 24: ;
#line 4155
  if ((mdev->net_conf)->wire_protocol != 3) {
#line 4155
    tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4155
    tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4155
    printk("<3>%s %s: ASSERT( mdev->net_conf->wire_protocol == DRBD_PROT_C ) in %s:%d\n",
           tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4155);
  } else {

  }
#line 4156
  what = conflict_discarded_by_peer;
#line 4157
  goto ldv_42650;
  default: 
#line 4159
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4159
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4159
  printk("<3>%s %s: ASSERT( 0 ) in %s:%d\n", tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
         4159);
#line 4160
  return (0);
  }
  ldv_42650: 
#line 4163
  tmp___17 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                           "got_BlockAck", what);
#line 4163
  return (tmp___17);
}
}
#line 4167 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  __u32 tmp___3 ;
  int size ;
  __u32 tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;

  {
#line 4169
  p = (struct p_block_ack *)h;
#line 4170
  tmp = __fswab64(p->sector);
#line 4170
  sector = (sector_t )tmp;
#line 4172
  tmp___2 = __ratelimit(& drbd_ratelimit_state);
#line 4172
  if (tmp___2 != 0) {
#line 4173
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4173
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4173
    printk("<4>%s %s: Got NegAck packet. Peer is in troubles?\n", tmp___1, tmp___0);
  } else {

  }
#line 4175
  tmp___3 = __fswab32(p->seq_num);
#line 4175
  update_peer_seq(mdev, tmp___3);
#line 4177
  if (p->block_id == 0xffffffffffffffffULL) {
#line 4178
    tmp___4 = __fswab32(p->blksize);
#line 4178
    size = (int )tmp___4;
#line 4179
    atomic_dec(& mdev->rs_pending_cnt);
#line 4179
    tmp___8 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4179
    if (tmp___8 < 0) {
#line 4179
      tmp___5 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4179
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4179
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4179
      printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___7, tmp___6,
             "got_NegAck", 4179, tmp___5);
    } else {

    }
#line 4180
    drbd_rs_failed_io(mdev, sector, size);
#line 4181
    return (1);
  } else {

  }
#line 4183
  tmp___9 = validate_req_change_req_state(mdev, p->block_id, sector, & _ack_id_to_req,
                                          "got_NegAck", neg_acked);
#line 4183
  return (tmp___9);
}
}
#line 4187 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  sector_t sector ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;

  {
#line 4189
  p = (struct p_block_ack *)h;
#line 4190
  tmp = __fswab64(p->sector);
#line 4190
  sector = (sector_t )tmp;
#line 4192
  tmp___0 = __fswab32(p->seq_num);
#line 4192
  update_peer_seq(mdev, tmp___0);
#line 4193
  tmp___1 = __fswab32(p->blksize);
#line 4193
  tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4193
  tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4193
  printk("<3>%s %s: Got NegDReply; Sector %llus, len %u; Fail original request.\n",
         tmp___3, tmp___2, (unsigned long long )sector, tmp___1);
#line 4196
  tmp___4 = validate_req_change_req_state(mdev, p->block_id, sector, & _ar_id_to_req,
                                          "got_NegDReply", neg_acked);
#line 4196
  return (tmp___4);
}
}
#line 4200 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_NegRSDReply(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  sector_t sector ;
  int size ;
  struct p_block_ack *p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u32 tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 4204
  p = (struct p_block_ack *)h;
#line 4206
  tmp = __fswab64(p->sector);
#line 4206
  sector = (sector_t )tmp;
#line 4207
  tmp___0 = __fswab32(p->blksize);
#line 4207
  size = (int )tmp___0;
#line 4208
  if (p->block_id != 0xffffffffffffffffULL) {
#line 4208
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4208
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4208
    printk("<3>%s %s: ASSERT( p->block_id == ID_SYNCER ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4208);
  } else {

  }
#line 4210
  tmp___3 = __fswab32(p->seq_num);
#line 4210
  update_peer_seq(mdev, tmp___3);
#line 4212
  atomic_dec(& mdev->rs_pending_cnt);
#line 4212
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4212
  if (tmp___7 < 0) {
#line 4212
    tmp___4 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4212
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4212
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4212
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___6, tmp___5, "got_NegRSDReply",
           4212, tmp___4);
  } else {

  }
#line 4214
  tmp___8 = _get_ldev_if_state(mdev, D_FAILED);
#line 4214
  if (tmp___8 != 0) {
#line 4215
    drbd_rs_complete_io(mdev, sector);
#line 4216
    drbd_rs_failed_io(mdev, sector, size);
#line 4217
    put_ldev(mdev);
  } else {

  }
#line 4220
  return (1);
}
}
#line 4223 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_BarrierAck(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_barrier_ack *p ;
  __u32 tmp ;

  {
#line 4225
  p = (struct p_barrier_ack *)h;
#line 4227
  tmp = __fswab32(p->set_size);
#line 4227
  tl_release(mdev, p->barrier, tmp);
#line 4229
  return (1);
}
}
#line 4232 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static int got_OVResult(struct drbd_conf *mdev , struct p_header *h ) 
{ 
  struct p_block_ack *p ;
  struct drbd_work *w ;
  sector_t sector ;
  int size ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  void *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;

  {
#line 4234
  p = (struct p_block_ack *)h;
#line 4239
  tmp = __fswab64(p->sector);
#line 4239
  sector = (sector_t )tmp;
#line 4240
  tmp___0 = __fswab32(p->blksize);
#line 4240
  size = (int )tmp___0;
#line 4242
  tmp___1 = __fswab32(p->seq_num);
#line 4242
  update_peer_seq(mdev, tmp___1);
#line 4244
  tmp___2 = __fswab64(p->block_id);
#line 4244
  if (tmp___2 == 4712ULL) {
#line 4245
    drbd_ov_oos_found(mdev, sector, size);
  } else {
#line 4247
    ov_oos_print(mdev);
  }
#line 4249
  drbd_rs_complete_io(mdev, sector);
#line 4250
  atomic_dec(& mdev->rs_pending_cnt);
#line 4250
  tmp___6 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4250
  if (tmp___6 < 0) {
#line 4250
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->rs_pending_cnt));
#line 4250
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4250
    printk("<3>%s %s: in %s:%d: rs_pending_cnt = %d < 0 !\n", tmp___5, tmp___4, "got_OVResult",
           4250, tmp___3);
  } else {

  }
#line 4252
  mdev->ov_left = mdev->ov_left - 1UL;
#line 4252
  if (mdev->ov_left == 0UL) {
#line 4253
    tmp___7 = kmalloc(24UL, 16U);
#line 4253
    w = (struct drbd_work *)tmp___7;
#line 4254
    if ((unsigned long )w != (unsigned long )((struct drbd_work *)0)) {
#line 4255
      w->cb = & w_ov_finished;
#line 4256
      drbd_queue_work_front(& mdev->data.work, w);
    } else {
#line 4258
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4258
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4258
      printk("<3>%s %s: kmalloc(w) failed.", tmp___9, tmp___8);
#line 4259
      ov_oos_print(mdev);
#line 4260
      drbd_resync_finished(mdev);
    }
  } else {

  }
#line 4263
  return (1);
}
}
#line 4271 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
static struct asender_cmd *get_asender_cmd(int cmd ) 
{ 
  struct asender_cmd asender_tbl[38U] ;

  {
#line 4273
  asender_tbl[0].pkt_size = 0UL;
#line 4273
  asender_tbl[0].process = 0;
#line 4273
  asender_tbl[1].pkt_size = 0UL;
#line 4273
  asender_tbl[1].process = 0;
#line 4273
  asender_tbl[2].pkt_size = 0UL;
#line 4273
  asender_tbl[2].process = 0;
#line 4273
  asender_tbl[3].pkt_size = 0UL;
#line 4273
  asender_tbl[3].process = 0;
#line 4273
  asender_tbl[4].pkt_size = 0UL;
#line 4273
  asender_tbl[4].process = 0;
#line 4273
  asender_tbl[5].pkt_size = 0UL;
#line 4273
  asender_tbl[5].process = 0;
#line 4273
  asender_tbl[6].pkt_size = 0UL;
#line 4273
  asender_tbl[6].process = 0;
#line 4273
  asender_tbl[7].pkt_size = 0UL;
#line 4273
  asender_tbl[7].process = 0;
#line 4273
  asender_tbl[8].pkt_size = 0UL;
#line 4273
  asender_tbl[8].process = 0;
#line 4273
  asender_tbl[9].pkt_size = 0UL;
#line 4273
  asender_tbl[9].process = 0;
#line 4273
  asender_tbl[10].pkt_size = 0UL;
#line 4273
  asender_tbl[10].process = 0;
#line 4273
  asender_tbl[11].pkt_size = 0UL;
#line 4273
  asender_tbl[11].process = 0;
#line 4273
  asender_tbl[12].pkt_size = 0UL;
#line 4273
  asender_tbl[12].process = 0;
#line 4273
  asender_tbl[13].pkt_size = 0UL;
#line 4273
  asender_tbl[13].process = 0;
#line 4273
  asender_tbl[14].pkt_size = 0UL;
#line 4273
  asender_tbl[14].process = 0;
#line 4273
  asender_tbl[15].pkt_size = 0UL;
#line 4273
  asender_tbl[15].process = 0;
#line 4273
  asender_tbl[16].pkt_size = 0UL;
#line 4273
  asender_tbl[16].process = 0;
#line 4273
  asender_tbl[17].pkt_size = 0UL;
#line 4273
  asender_tbl[17].process = 0;
#line 4273
  asender_tbl[18].pkt_size = 0UL;
#line 4273
  asender_tbl[18].process = 0;
#line 4273
  asender_tbl[19].pkt_size = 8UL;
#line 4273
  asender_tbl[19].process = & got_Ping;
#line 4273
  asender_tbl[20].pkt_size = 8UL;
#line 4273
  asender_tbl[20].process = & got_PingAck;
#line 4273
  asender_tbl[21].pkt_size = 32UL;
#line 4273
  asender_tbl[21].process = & got_BlockAck;
#line 4273
  asender_tbl[22].pkt_size = 32UL;
#line 4273
  asender_tbl[22].process = & got_BlockAck;
#line 4273
  asender_tbl[23].pkt_size = 32UL;
#line 4273
  asender_tbl[23].process = & got_BlockAck;
#line 4273
  asender_tbl[24].pkt_size = 32UL;
#line 4273
  asender_tbl[24].process = & got_BlockAck;
#line 4273
  asender_tbl[25].pkt_size = 32UL;
#line 4273
  asender_tbl[25].process = & got_NegAck;
#line 4273
  asender_tbl[26].pkt_size = 32UL;
#line 4273
  asender_tbl[26].process = & got_NegDReply;
#line 4273
  asender_tbl[27].pkt_size = 32UL;
#line 4273
  asender_tbl[27].process = & got_NegRSDReply;
#line 4273
  asender_tbl[28].pkt_size = 16UL;
#line 4273
  asender_tbl[28].process = & got_BarrierAck;
#line 4273
  asender_tbl[29].pkt_size = 12UL;
#line 4273
  asender_tbl[29].process = & got_RqSReply;
#line 4273
  asender_tbl[30].pkt_size = 0UL;
#line 4273
  asender_tbl[30].process = 0;
#line 4273
  asender_tbl[31].pkt_size = 0UL;
#line 4273
  asender_tbl[31].process = 0;
#line 4273
  asender_tbl[32].pkt_size = 32UL;
#line 4273
  asender_tbl[32].process = & got_OVResult;
#line 4273
  asender_tbl[33].pkt_size = 0UL;
#line 4273
  asender_tbl[33].process = 0;
#line 4273
  asender_tbl[34].pkt_size = 32UL;
#line 4273
  asender_tbl[34].process = & got_IsInSync;
#line 4273
  asender_tbl[35].pkt_size = 0UL;
#line 4273
  asender_tbl[35].process = 0;
#line 4273
  asender_tbl[36].pkt_size = 0UL;
#line 4273
  asender_tbl[36].process = 0;
#line 4273
  asender_tbl[37].pkt_size = 0UL;
#line 4273
  asender_tbl[37].process = 0;
#line 4292
  if (cmd > 37 || (unsigned long )asender_tbl[cmd].process == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                                        struct p_header * ))0)) {
#line 4293
    return (0);
  } else {

  }
#line 4294
  return ((struct asender_cmd *)(& asender_tbl) + (unsigned long )cmd);
}
}
#line 4297 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
int drbd_asender(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct p_header *h ;
  struct asender_cmd *cmd ;
  int rv ;
  int len ;
  void *buf ;
  int received ;
  int expect ;
  int empty ;
  unsigned int tmp ;
  struct task_struct *tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  int _b ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  struct task_struct *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct task_struct *tmp___12 ;
  int tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  __u32 tmp___22 ;
  char const   *tmp___23 ;
  char const   *tmp___24 ;
  long tmp___25 ;
  __u16 tmp___26 ;
  __u16 tmp___27 ;
  __u32 tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  long tmp___31 ;
  int _b___0 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  enum drbd_thread_state tmp___37 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  char const   *tmp___41 ;

  {
#line 4299
  mdev = thi->mdev;
#line 4300
  h = & mdev->meta.rbuf.header;
#line 4301
  cmd = 0;
#line 4304
  buf = (void *)h;
#line 4305
  received = 0;
#line 4306
  expect = 8;
#line 4309
  tmp = mdev_to_minor(mdev);
#line 4309
  tmp___0 = get_current();
#line 4309
  sprintf((char *)(& tmp___0->comm), "drbd%d_asender", tmp);
#line 4311
  tmp___1 = get_current();
#line 4311
  tmp___1->policy = 2U;
#line 4312
  tmp___2 = get_current();
#line 4312
  tmp___2->rt_priority = 2U;
#line 4314
  goto ldv_42728;
  ldv_42732: 
#line 4315
  drbd_thread_current_set_cpu(mdev);
#line 4316
  tmp___6 = test_and_clear_bit(2, (unsigned long volatile   *)(& mdev->flags));
#line 4316
  if (tmp___6 != 0) {
#line 4317
    tmp___3 = drbd_send_ping(mdev);
#line 4317
    _b = tmp___3 == 0;
#line 4317
    if (_b != 0) {
#line 4317
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4317
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4317
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "drbd_asender", (char *)"!drbd_send_ping(mdev)",
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4317);
    } else {

    }
#line 4317
    if (_b != 0) {
#line 4317
      goto reconnect;
    } else {

    }
#line 4318
    ((mdev->meta.socket)->sk)->sk_rcvtimeo = (long )(((mdev->net_conf)->ping_timeo * 250) / 10);
  } else {

  }
#line 4324
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4324
    tmp___7 = atomic_read((atomic_t const   *)(& mdev->unacked_cnt));
#line 4324
    if (tmp___7 > 3) {
#line 4326
      drbd_tcp_cork(mdev->meta.socket);
    } else {

    }
  } else {

  }
  ldv_42727: 
#line 4328
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4329
  tmp___8 = get_current();
#line 4329
  flush_signals(tmp___8);
#line 4330
  tmp___11 = drbd_process_done_ee(mdev);
#line 4330
  if (tmp___11 == 0) {
#line 4331
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4331
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4331
    printk("<3>%s %s: process_done_ee() = NOT_OK\n", tmp___10, tmp___9);
#line 4332
    goto reconnect;
  } else {

  }
#line 4335
  set_bit(1U, (unsigned long volatile   *)(& mdev->flags));
#line 4336
  _spin_lock_irq(& mdev->req_lock);
#line 4337
  empty = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 4338
  _spin_unlock_irq(& mdev->req_lock);
#line 4342
  if (empty != 0) {
#line 4343
    goto ldv_42726;
  } else {

  }
#line 4344
  goto ldv_42727;
  ldv_42726: ;
#line 4346
  if ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U) {
#line 4347
    drbd_tcp_uncork(mdev->meta.socket);
  } else {

  }
#line 4350
  tmp___12 = get_current();
#line 4350
  tmp___13 = signal_pending(tmp___12);
#line 4350
  if (tmp___13 != 0) {
#line 4351
    goto ldv_42728;
  } else {

  }
#line 4353
  rv = drbd_recv_short(mdev, mdev->meta.socket, buf, (size_t )(expect - received),
                       0);
#line 4355
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4357
  tmp___14 = get_current();
#line 4357
  flush_signals(tmp___14);
#line 4369
  tmp___21 = __builtin_expect(rv > 0, 1L);
#line 4369
  if (tmp___21 != 0L) {
#line 4370
    received = received + rv;
#line 4371
    buf = buf + (unsigned long )rv;
  } else
#line 4372
  if (rv == 0) {
#line 4373
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4373
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4373
    printk("<3>%s %s: meta connection shut down by peer.\n", tmp___16, tmp___15);
#line 4374
    goto reconnect;
  } else
#line 4375
  if (rv == -11) {
#line 4376
    if (((mdev->meta.socket)->sk)->sk_rcvtimeo == (long )(((mdev->net_conf)->ping_timeo * 250) / 10)) {
#line 4378
      tmp___17 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4378
      tmp___18 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4378
      printk("<3>%s %s: PingAck did not arrive in time.\n", tmp___18, tmp___17);
#line 4379
      goto reconnect;
    } else {

    }
#line 4381
    set_bit(2U, (unsigned long volatile   *)(& mdev->flags));
#line 4382
    goto ldv_42728;
  } else
#line 4383
  if (rv == -4) {
#line 4384
    goto ldv_42728;
  } else {
#line 4386
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4386
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4386
    printk("<3>%s %s: sock_recvmsg returned %d\n", tmp___20, tmp___19, rv);
#line 4387
    goto reconnect;
  }
#line 4390
  if (received == expect && (unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4391
    tmp___25 = __builtin_expect(h->magic != 1728214147U, 0L);
#line 4391
    if (tmp___25 != 0L) {
#line 4392
      tmp___22 = __fswab32(h->magic);
#line 4392
      tmp___23 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4392
      tmp___24 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4392
      printk("<3>%s %s: magic?? on meta m: 0x%lx c: %d l: %d\n", tmp___24, tmp___23,
             (long )tmp___22, (int )h->command, (int )h->length);
#line 4395
      goto reconnect;
    } else {

    }
#line 4397
    tmp___26 = __fswab16((int )h->command);
#line 4397
    cmd = get_asender_cmd((int )tmp___26);
#line 4398
    tmp___27 = __fswab16((int )h->length);
#line 4398
    len = (int )tmp___27;
#line 4399
    tmp___31 = __builtin_expect((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0),
                                0L);
#line 4399
    if (tmp___31 != 0L) {
#line 4400
      tmp___28 = __fswab32(h->magic);
#line 4400
      tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4400
      tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4400
      printk("<3>%s %s: unknown command?? on meta m: 0x%lx c: %d l: %d\n", tmp___30,
             tmp___29, (long )tmp___28, (int )h->command, (int )h->length);
#line 4403
      goto disconnect;
    } else {

    }
#line 4405
    expect = (int )cmd->pkt_size;
#line 4406
    _b___0 = (unsigned long )len != (unsigned long )expect - 8UL;
#line 4406
    if (_b___0 != 0) {
#line 4406
      tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4406
      tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4406
      printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___33, tmp___32, "drbd_asender",
             (char *)"len != expect-sizeof(struct p_header)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4406);
    } else {

    }
#line 4406
    if (_b___0 != 0) {
#line 4407
      goto reconnect;
    } else {

    }
  } else {

  }
#line 4409
  if (received == expect) {
#line 4410
    if ((unsigned long )cmd == (unsigned long )((struct asender_cmd *)0)) {
#line 4410
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4410
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4410
      printk("<3>%s %s: ASSERT( cmd != NULL ) in %s:%d\n", tmp___35, tmp___34, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
             4410);
    } else {

    }
#line 4411
    tmp___36 = (*(cmd->process))(mdev, h);
#line 4411
    if (tmp___36 == 0) {
#line 4412
      goto reconnect;
    } else {

    }
#line 4414
    buf = (void *)h;
#line 4415
    received = 0;
#line 4416
    expect = 8;
#line 4417
    cmd = 0;
  } else {

  }
  ldv_42728: 
#line 4314
  tmp___37 = get_t_state(thi);
#line 4314
  if ((unsigned int )tmp___37 == 1U) {
#line 4315
    goto ldv_42732;
  } else {

  }

#line 4421
  if (0) {
    reconnect: 
#line 4423
    val.i = 0U;
#line 4423
    val.ldv_32167.conn = 5U;
#line 4423
    mask.i = 0U;
#line 4423
    mask.ldv_32167.conn = 31U;
#line 4423
    drbd_force_state(mdev, mask, val);
  } else {

  }
#line 4425
  if (0) {
    disconnect: 
#line 4427
    val___0.i = 0U;
#line 4427
    val___0.ldv_32167.conn = 1U;
#line 4427
    mask___0.i = 0U;
#line 4427
    mask___0.ldv_32167.conn = 31U;
#line 4427
    drbd_force_state(mdev, mask___0, val___0);
  } else {

  }
#line 4429
  clear_bit(1, (unsigned long volatile   *)(& mdev->flags));
#line 4431
  if ((int )mdev->state.ldv_32167.conn > 9) {
#line 4431
    tmp___38 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4431
    tmp___39 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4431
    printk("<3>%s %s: ASSERT( mdev->state.conn < C_CONNECTED ) in %s:%d\n", tmp___39,
           tmp___38, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared",
           4431);
  } else {

  }
#line 4432
  tmp___40 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4432
  tmp___41 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 4432
  printk("<6>%s %s: asender terminated\n", tmp___41, tmp___40);
#line 4434
  return (0);
}
}
#line 4474 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_receiver.c.prepared"
void ldv_main3_sequence_infinite_withcheck_stateful(void) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 4486
  LDV_IN_INTERRUPT = 1;
#line 4495
  ldv_initialize();
#line 4497
  goto ldv_42761;
  ldv_42760: 
#line 4500
  tmp = nondet_int();
#line 4500
  switch (tmp) {
  default: ;
#line 4502
  goto ldv_42759;
  }
  ldv_42759: ;
  ldv_42761: 
#line 4497
  tmp___0 = nondet_int();
#line 4497
  if (tmp___0 != 0) {
#line 4498
    goto ldv_42760;
  } else {

  }


#line 4511
  ldv_check_final_state();
#line 4514
  return;
}
}
#line 18 "include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[4096U] ;
#line 576 "include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n ) 
{ 


  {
#line 578
  __hlist_del(n);
#line 579
  n->next = 1048832;
#line 580
  n->pprev = 2097664;
#line 581
  return;
}
}
#line 45 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static void atomic_add(int i , atomic_t *v ) 
{ 


  {
#line 47
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; addl %1,%0": "=m" (v->counter): "ir" (i),
                       "m" (v->counter));
#line 50
  return;
}
}
#line 173 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_add_return(int i , atomic_t *v ) 
{ 
  int __i ;

  {
#line 175
  __i = i;
#line 176
  __asm__  volatile   (".section .smp_locks,\"a\"\n .balign 8 \n .quad 661f\n.previous\n661:\n\tlock; xaddl %0, %1": "+r" (i),
                       "+m" (v->counter): : "memory");
#line 179
  return (i + __i);
}
}
#line 182 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/atomic_64.h"
__inline static int atomic_sub_return(int i , atomic_t *v ) 
{ 
  int tmp ;

  {
#line 184
  tmp = atomic_add_return(- i, v);
#line 184
  return (tmp);
}
}
#line 295 "include/linux/lockdep.h"
extern void lock_acquire(struct lockdep_map * , unsigned int  , int  , int  , int  ,
                         struct lockdep_map * , unsigned long  ) ;
#line 299
extern void lock_release(struct lockdep_map * , int  , unsigned long  ) ;
#line 163 "include/linux/timer.h"
extern int del_timer(struct timer_list * ) ;
#line 27 "/work/ldvuser/novikov/inst/current/envs/linux/linux/arch/x86/include/asm/smp.h"
extern int per_cpu__cpu_number ;
#line 87 "include/linux/rcupdate.h"
extern struct lockdep_map rcu_lock_map ;
#line 125 "include/linux/rcupdate.h"
__inline static void rcu_read_lock(void) 
{ 


  {
#line 127
  rcu_read_lock_sched_notrace();
#line 129
  lock_acquire(& rcu_lock_map, 0U, 0, 2, 1, 0, (unsigned long )((void *)0));
#line 131
  return;
}
}
#line 147 "include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void) 
{ 


  {
#line 149
  lock_release(& rcu_lock_map, 1, (unsigned long )((void *)0));
#line 151
  rcu_read_lock_sched_notrace();
#line 152
  return;
}
}
#line 172 "include/linux/genhd.h"
__inline static struct gendisk *part_to_disk(struct hd_struct *part ) 
{ 
  struct device  const  *__mptr ;
  struct device  const  *__mptr___0 ;
  long tmp ;

  {
#line 174
  tmp = __builtin_expect((unsigned long )part != (unsigned long )((struct hd_struct *)0),
                         1L);
#line 174
  if (tmp != 0L) {
#line 175
    if (part->partno != 0) {
#line 176
      __mptr = (struct device  const  *)part->__dev.parent;
#line 176
      return ((struct gendisk *)__mptr + 0xffffffffffffffa8UL);
    } else {
#line 178
      __mptr___0 = (struct device  const  *)(& part->__dev);
#line 178
      return ((struct gendisk *)__mptr___0 + 0xffffffffffffffa8UL);
    }
  } else {

  }
#line 180
  return (0);
}
}
#line 345
extern void part_round_stats(int  , struct hd_struct * ) ;
#line 354 "include/linux/bio.h"
extern struct bio_pair *bio_split(struct bio * , int  ) ;
#line 355
extern void bio_pair_release(struct bio_pair * ) ;
#line 371
extern struct bio *bio_clone(struct bio * , gfp_t  ) ;
#line 773 "include/linux/blkdev.h"
extern void blk_plug_device(struct request_queue * ) ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos ;
#line 1098
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) ;
#line 1364
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) ;
#line 1366
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) ;
#line 1876 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_pending(struct drbd_conf *mdev ) 
{ 


  {
#line 1878
  atomic_inc(& mdev->ap_pending_cnt);
#line 1879
  return;
}
}
#line 2030 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_get_max_buffers(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;

  {
#line 2032
  mxb = 1000000;
#line 2033
  tmp = get_net_conf(mdev);
#line 2033
  if (tmp != 0) {
#line 2034
    mxb = (mdev->net_conf)->max_buffers;
#line 2035
    put_net_conf(mdev);
  } else {

  }
#line 2037
  return (mxb);
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable(union drbd_state s ) 
{ 


  {
#line 2046
  switch ((unsigned int )s.ldv_32167.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2059
  goto ldv_40269;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2078
  return (0);
  }
  ldv_40269: ;
#line 2081
  switch ((unsigned int )s.ldv_32167.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2088
  goto ldv_40289;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2097
  return (0);
  }
  ldv_40289: ;
#line 2100
  return (1);
}
}
#line 2103 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2105
  tmp = drbd_get_max_buffers(mdev);
#line 2105
  mxb = tmp;
#line 2107
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2108
    return (0);
  } else {

  }
#line 2109
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2109
  if (tmp___0 != 0) {
#line 2110
    return (0);
  } else {

  }
#line 2117
  tmp___1 = drbd_state_is_stable(mdev->state);
#line 2117
  if (tmp___1 == 0) {
#line 2118
    return (0);
  } else {

  }
#line 2122
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2122
  if (tmp___2 > mxb) {
#line 2123
    return (0);
  } else {

  }
#line 2124
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2124
  if (tmp___3 != 0) {
#line 2125
    return (0);
  } else {

  }
#line 2126
  return (1);
}
}
#line 2132 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void inc_ap_bio(struct drbd_conf *mdev , int one_or_two ) 
{ 
  wait_queue_t wait ;
  struct task_struct *tmp ;
  int tmp___0 ;

  {
#line 2136
  tmp = get_current();
#line 2136
  wait.flags = 0U;
#line 2136
  wait.private = (void *)tmp;
#line 2136
  wait.func = & autoremove_wake_function;
#line 2136
  wait.task_list.next = & wait.task_list;
#line 2136
  wait.task_list.prev = & wait.task_list;
#line 2146
  _spin_lock_irq(& mdev->req_lock);
#line 2147
  goto ldv_40305;
  ldv_40304: 
#line 2148
  prepare_to_wait(& mdev->misc_wait, & wait, 2);
#line 2149
  _spin_unlock_irq(& mdev->req_lock);
#line 2150
  schedule();
#line 2151
  finish_wait(& mdev->misc_wait, & wait);
#line 2152
  _spin_lock_irq(& mdev->req_lock);
  ldv_40305: 
#line 2147
  tmp___0 = __inc_ap_bio_cond(mdev);
#line 2147
  if (tmp___0 == 0) {
#line 2148
    goto ldv_40304;
  } else {

  }
#line 2154
  atomic_add(one_or_two, & mdev->ap_bio_cnt);
#line 2155
  _spin_unlock_irq(& mdev->req_lock);
#line 2156
  return;
}
}
#line 2158 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void dec_ap_bio(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int ap_bio ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2160
  tmp = drbd_get_max_buffers(mdev);
#line 2160
  mxb = tmp;
#line 2161
  tmp___0 = atomic_sub_return(1, & mdev->ap_bio_cnt);
#line 2161
  ap_bio = tmp___0;
#line 2163
  if (ap_bio < 0) {
#line 2163
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2163
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2163
    printk("<3>%s %s: ASSERT( ap_bio >= 0 ) in %s:%d\n", tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h",
           2163);
  } else {

  }
#line 2167
  if (ap_bio < mxb) {
#line 2168
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 2169
  if (ap_bio == 0) {
#line 2169
    tmp___4 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2169
    if (tmp___4 != 0) {
#line 2170
      tmp___3 = test_and_set_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 2170
      if (tmp___3 == 0) {
#line 2171
        drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2172
  return;
}
}
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_wrappers.h"
__inline static void drbd_plug_device(struct drbd_conf *mdev ) 
{ 
  struct request_queue *q ;
  int tmp ;

  {
#line 65
  q = bdev_get_queue(mdev->this_bdev);
#line 67
  _spin_lock_irq(q->queue_lock);
#line 72
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& q->queue_flags));
#line 72
  if (tmp == 0) {
#line 73
    blk_plug_device(q);
#line 74
    del_timer(& q->unplug_timer);
  } else {

  }
#line 77
  _spin_unlock_irq(q->queue_lock);
#line 78
  return;
}
}
#line 205 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *ee_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 207
  tmp = __builtin_expect(mdev->ee_hash_s == 0U, 0L);
#line 207
  if (tmp != 0L) {
#line 207
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (207), "i" (12UL));
    ldv_40423: ;
#line 207
    goto ldv_40423;
  } else {

  }
#line 208
  return (mdev->ee_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->ee_hash_s));
}
}
#line 214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct hlist_head *tl_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 
  long tmp ;

  {
#line 216
  tmp = __builtin_expect(mdev->tl_hash_s == 0U, 0L);
#line 216
  if (tmp != 0L) {
#line 216
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"),
                         "i" (216), "i" (12UL));
    ldv_40428: ;
#line 216
    goto ldv_40428;
  } else {

  }
#line 217
  return (mdev->tl_hash + (unsigned long )((unsigned int )(sector >> 6) % mdev->tl_hash_s));
}
}
#line 222 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
static struct hlist_head *ar_hash_slot___0(struct drbd_conf *mdev , sector_t sector ) 
{ 


  {
#line 224
  return (mdev->app_reads_hash + (unsigned long )((unsigned int )sector % 15U));
}
}
#line 246 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_req.h"
__inline static struct drbd_request *drbd_req_new(struct drbd_conf *mdev , struct bio *bio_src ) 
{ 
  struct bio *bio ;
  struct drbd_request *req ;
  void *tmp ;
  long tmp___0 ;

  {
#line 250
  tmp = mempool_alloc(drbd_request_mempool, 16U);
#line 250
  req = (struct drbd_request *)tmp;
#line 252
  tmp___0 = __builtin_expect((unsigned long )req != (unsigned long )((struct drbd_request *)0),
                             1L);
#line 252
  if (tmp___0 != 0L) {
#line 253
    bio = bio_clone(bio_src, 16U);
#line 255
    req->rq_state = 0UL;
#line 256
    req->mdev = mdev;
#line 257
    req->master_bio = bio_src;
#line 258
    req->private_bio = bio;
#line 259
    req->epoch = 0U;
#line 260
    req->sector = bio->bi_sector;
#line 261
    req->size = bio->bi_size;
#line 262
    req->start_time = jiffies;
#line 263
    INIT_HLIST_NODE(& req->colision);
#line 264
    INIT_LIST_HEAD(& req->tl_requests);
#line 265
    INIT_LIST_HEAD(& req->w.list);
#line 267
    bio->bi_private = (void *)req;
#line 268
    bio->bi_end_io = & drbd_endio_pri;
#line 269
    bio->bi_next = 0;
  } else {

  }
#line 271
  return (req);
}
}
#line 292
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) ;
#line 42 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_start_io_acct(struct drbd_conf *mdev , struct drbd_request *req ,
                                struct bio *bio ) 
{ 
  int rw ;
  int cpu ;
  int ret__ ;
  unsigned long __ptr ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;
  unsigned long __ptr___1 ;
  unsigned long __ptr___2 ;
  struct gendisk *tmp___0 ;

  {
#line 44
  rw = (int const   )bio->bi_rw & (int const   )1;
#line 46
  rcu_read_lock();
#line 46
  switch (4UL) {
  case 1UL: 
#line 46
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "m" (per_cpu__cpu_number));
#line 46
  goto ldv_40497;
  case 2UL: 
#line 46
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 46
  goto ldv_40497;
  case 4UL: 
#line 46
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 46
  goto ldv_40497;
  case 8UL: 
#line 46
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 46
  goto ldv_40497;
  default: 
#line 46
  __bad_percpu_size();
  }
  ldv_40497: 
#line 46
  cpu = ret__;
#line 47
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 47
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ios[rw] + 1UL;
#line 47
  if ((mdev->vdisk)->part0.partno != 0) {
#line 47
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 47
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 47
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ios[rw] + 1UL;
  } else {

  }
#line 48
  __asm__  ("": "=r" (__ptr___1): "0" ((mdev->vdisk)->part0.dkstats));
#line 48
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___1))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
#line 48
  if ((mdev->vdisk)->part0.partno != 0) {
#line 48
    tmp___0 = part_to_disk(& (mdev->vdisk)->part0);
#line 48
    __asm__  ("": "=r" (__ptr___2): "0" (tmp___0->part0.dkstats));
#line 48
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___2))->sectors[rw] + (unsigned long )(bio->bi_size >> 9);
  } else {

  }
#line 49
  rcu_read_unlock();
#line 50
  (mdev->vdisk)->part0.in_flight[rw] = (mdev->vdisk)->part0.in_flight[rw] + 1;
#line 51
  return;
}
}
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _drbd_end_io_acct(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int rw ;
  unsigned long duration ;
  int cpu ;
  int ret__ ;
  unsigned long __ptr ;
  unsigned long __ptr___0 ;
  struct gendisk *tmp ;

  {
#line 56
  rw = (int )(req->master_bio)->bi_rw & 1;
#line 57
  duration = (unsigned long )jiffies - req->start_time;
#line 59
  rcu_read_lock();
#line 59
  switch (4UL) {
  case 1UL: 
#line 59
  __asm__  ("movb %%gs:%P1,%0": "=q" (ret__): "m" (per_cpu__cpu_number));
#line 59
  goto ldv_40522;
  case 2UL: 
#line 59
  __asm__  ("movw %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 59
  goto ldv_40522;
  case 4UL: 
#line 59
  __asm__  ("movl %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 59
  goto ldv_40522;
  case 8UL: 
#line 59
  __asm__  ("movq %%gs:%P1,%0": "=r" (ret__): "m" (per_cpu__cpu_number));
#line 59
  goto ldv_40522;
  default: 
#line 59
  __bad_percpu_size();
  }
  ldv_40522: 
#line 59
  cpu = ret__;
#line 60
  __asm__  ("": "=r" (__ptr): "0" ((mdev->vdisk)->part0.dkstats));
#line 60
  ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr))->ticks[rw] + duration;
#line 60
  if ((mdev->vdisk)->part0.partno != 0) {
#line 60
    tmp = part_to_disk(& (mdev->vdisk)->part0);
#line 60
    __asm__  ("": "=r" (__ptr___0): "0" (tmp->part0.dkstats));
#line 60
    ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] = ((struct disk_stats *)(__per_cpu_offset[cpu] + __ptr___0))->ticks[rw] + duration;
  } else {

  }
#line 61
  part_round_stats(cpu, & (mdev->vdisk)->part0);
#line 62
  rcu_read_unlock();
#line 63
  (mdev->vdisk)->part0.in_flight[rw] = (mdev->vdisk)->part0.in_flight[rw] - 1;
#line 64
  return;
}
}
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _req_is_done(struct drbd_conf *mdev , struct drbd_request *req , int const   rw ) 
{ 
  unsigned long s ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;

  {
#line 68
  s = req->rq_state;
#line 72
  if ((int )rw == 1) {
#line 79
    list_del(& req->tl_requests);
#line 84
    if ((s & 128UL) == 0UL || (s & 4UL) == 0UL) {
#line 85
      __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                             85U);
    } else {

    }
#line 87
    if (((s & 128UL) != 0UL && (s & 4UL) != 0UL) && (s & 256UL) != 0UL) {
#line 88
      __drbd_set_in_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         88U);
    } else {

    }
#line 100
    if ((s & 7UL) != 0UL) {
#line 101
      tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 101
      if (tmp___2 != 0) {
#line 102
        drbd_al_complete_io(mdev, req->sector);
#line 103
        put_ldev(mdev);
      } else {
#line 104
        tmp___1 = __ratelimit(& drbd_ratelimit_state);
#line 104
        if (tmp___1 != 0) {
#line 105
          tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 105
          printk("<4>%s %s: Should have called drbd_al_complete_io(, %llu), but my Disk seems to have failed :(\n",
                 tmp___0, tmp, (unsigned long long )req->sector);
        } else {

        }
      }
    } else {

    }
  } else {

  }
#line 123
  if ((int )rw == 1 && ((s & 7UL) != 0UL && (s & 4UL) == 0UL)) {
#line 125
    if ((unsigned long )((void *)req->w.list.next) != 1048832UL) {
#line 125
      tmp___7 = list_empty((struct list_head  const  *)(& req->w.list));
#line 125
      if (tmp___7 == 0) {
#line 129
        tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 129
        printk("<3>%s %s: req->w.list.next = %p\n", tmp___4, tmp___3, req->w.list.next);
#line 130
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 130
        printk("<3>%s %s: req->w.list.prev = %p\n", tmp___6, tmp___5, req->w.list.prev);
      } else {

      }
    } else {

    }
#line 132
    req->w.cb = & w_io_error;
#line 133
    drbd_queue_work(& mdev->data.work, & req->w);
  } else {
#line 136
    drbd_req_free(req);
  }
#line 137
  return;
}
}
#line 140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void queue_barrier(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  int tmp ;

  {
#line 149
  tmp = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 149
  if (tmp != 0) {
#line 150
    return;
  } else {

  }
#line 152
  b = mdev->newest_tle;
#line 153
  b->w.cb = & w_send_barrier;
#line 158
  inc_ap_pending(mdev);
#line 159
  drbd_queue_work(& mdev->data.work, & b->w);
#line 160
  set_bit(0U, (unsigned long volatile   *)(& mdev->flags));
#line 161
  return;
}
}
#line 163 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static void _about_to_complete_local_write(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  unsigned long s ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  sector_t sector ;
  int size ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct hlist_node  const  *__mptr ;
  int tmp___2 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 166
  s = req->rq_state;
#line 174
  if ((int )mdev->state.ldv_32167.conn > 9 && req->epoch == (mdev->newest_tle)->br_number) {
#line 176
    queue_barrier(mdev);
  } else {

  }
#line 181
  if ((s & 64UL) != 0UL && (unsigned long )mdev->ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 182
    sector = req->sector;
#line 183
    size = (int const   )req->size;
#line 189
    slot = tl_hash_slot___0(mdev, sector);
#line 190
    n = slot->first;
#line 190
    goto ldv_40560;
    ldv_40559: 
#line 191
    tmp___1 = overlaps(sector, size, i->sector, (int )i->size);
#line 191
    if (tmp___1 != 0) {
#line 192
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 192
      printk("<1>%s %s: LOGIC BUG: completed: %p %llus +%u; other: %p %llus +%u\n",
             tmp___0, tmp, req, (unsigned long long )sector, size, i, (unsigned long long )i->sector,
             i->size);
    } else {

    }
#line 190
    n = n->next;
    ldv_40560: ;
#line 190
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 190
      __builtin_prefetch((void const   *)n->next);
#line 190
      if (1 != 0) {
#line 190
        __mptr = (struct hlist_node  const  *)n;
#line 190
        i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 190
        if (1 != 0) {
#line 191
          goto ldv_40559;
        } else {
#line 193
          goto ldv_40561;
        }
      } else {
#line 193
        goto ldv_40561;
      }
    } else {

    }
    ldv_40561: 
#line 213
    slot = ee_hash_slot___0(mdev, req->sector);
#line 214
    n = slot->first;
#line 214
    goto ldv_40568;
    ldv_40567: 
#line 215
    tmp___2 = overlaps(sector, size, e->sector, (int )e->size);
#line 215
    if (tmp___2 != 0) {
#line 216
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 217
      goto ldv_40566;
    } else {

    }
#line 214
    n = n->next;
    ldv_40568: ;
#line 214
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 214
      __builtin_prefetch((void const   *)n->next);
#line 214
      if (1 != 0) {
#line 214
        __mptr___0 = (struct hlist_node  const  *)n;
#line 214
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 214
        if (1 != 0) {
#line 215
          goto ldv_40567;
        } else {
#line 217
          goto ldv_40566;
        }
      } else {
#line 217
        goto ldv_40566;
      }
    } else {

    }
    ldv_40566: ;
  } else {

  }
#line 220
  return;
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void complete_master_bio(struct drbd_conf *mdev , struct bio_and_error *m ) 
{ 


  {
#line 227
  bio_endio(m->bio, m->error);
#line 228
  dec_ap_bio(mdev);
#line 229
  return;
}
}
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void _req_may_be_done(struct drbd_request *req , struct bio_and_error *m ) 
{ 
  unsigned long s ;
  struct drbd_conf *mdev ;
  int rw ;
  int ok ;
  int error ;
  long tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;

  {
#line 239
  s = req->rq_state;
#line 240
  mdev = req->mdev;
#line 242
  rw = (unsigned long )req->master_bio != (unsigned long )((struct bio *)0) ? (int )(req->master_bio)->bi_rw & 1 : 1;
#line 253
  if ((s & 16UL) != 0UL) {
#line 254
    return;
  } else {

  }
#line 255
  if ((s & 8UL) != 0UL) {
#line 256
    return;
  } else {

  }
#line 257
  if ((int )s & 1) {
#line 258
    return;
  } else {

  }
#line 260
  if ((unsigned long )req->master_bio != (unsigned long )((struct bio *)0)) {
#line 282
    ok = (s & 4UL) != 0UL || (s & 128UL) != 0UL;
#line 283
    tmp = PTR_ERR((void const   *)req->private_bio);
#line 283
    error = (int )tmp;
#line 287
    tmp___2 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 287
    if (tmp___2 == 0) {
#line 288
      hlist_del(& req->colision);
    } else
#line 290
    if ((s & 504UL) != 0UL) {
#line 290
      tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 290
      printk("<3>%s %s: ASSERT( (s & RQ_NET_MASK) == 0 ) in %s:%d\n", tmp___1, tmp___0,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             290);
    } else {

    }
#line 293
    if (rw == 1) {
#line 294
      _about_to_complete_local_write(mdev, req);
    } else {

    }
#line 297
    _drbd_end_io_acct(mdev, req);
#line 299
    m->error = ok == 0 ? (error != 0 ? error : -5) : 0;
#line 300
    m->bio = req->master_bio;
#line 301
    req->master_bio = 0;
  } else {

  }
#line 304
  if ((s & 504UL) == 0UL || (s & 64UL) != 0UL) {
#line 309
    _req_is_done(mdev, req, rw);
  } else {

  }
#line 310
  return;
}
}
#line 338 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int _req_conflicts(struct drbd_request *req ) 
{ 
  struct drbd_conf *mdev ;
  sector_t sector ;
  int size ;
  struct drbd_request *i ;
  struct drbd_epoch_entry *e ;
  struct hlist_node *n ;
  struct hlist_head *slot ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int _b ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  struct task_struct *tmp___6 ;
  struct task_struct *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct hlist_node  const  *__mptr ;
  long tmp___11 ;
  struct task_struct *tmp___12 ;
  struct task_struct *tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  struct hlist_node  const  *__mptr___0 ;

  {
#line 340
  mdev = req->mdev;
#line 341
  sector = req->sector;
#line 342
  size = (int const   )req->size;
#line 348
  tmp___1 = hlist_unhashed((struct hlist_node  const  *)(& req->colision));
#line 348
  if (tmp___1 == 0) {
#line 348
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( hlist_unhashed(&req->colision) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           348);
  } else {

  }
#line 350
  tmp___2 = get_net_conf(mdev);
#line 350
  if (tmp___2 == 0) {
#line 351
    return (0);
  } else {

  }
#line 354
  _b = mdev->tl_hash_s == 0U;
#line 354
  if (_b != 0) {
#line 354
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 354
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "_req_conflicts", (char *)"mdev->tl_hash_s == 0",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           354);
  } else {

  }
#line 354
  if (_b != 0) {
#line 355
    goto out_no_conflict;
  } else {

  }
#line 356
  tmp___5 = __builtin_expect((unsigned long )mdev->tl_hash == (unsigned long )((struct hlist_head *)0),
                             0L);
#line 356
  if (tmp___5 != 0L) {
#line 356
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                         "i" (356), "i" (12UL));
    ldv_40596: ;
#line 356
    goto ldv_40596;
  } else {

  }
#line 359
  slot = tl_hash_slot___0(mdev, sector);
#line 360
  n = slot->first;
#line 360
  goto ldv_40603;
  ldv_40602: 
#line 361
  tmp___10 = overlaps(i->sector, (int )i->size, sector, size);
#line 361
  if (tmp___10 != 0) {
#line 362
    tmp___6 = get_current();
#line 362
    tmp___7 = get_current();
#line 362
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 362
    printk("<1>%s %s: %s[%u] Concurrent local write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
           tmp___9, tmp___8, (char *)(& tmp___7->comm), tmp___6->pid, (unsigned long long )sector,
           size, (unsigned long long )i->sector, i->size);
#line 368
    goto out_conflict;
  } else {

  }
#line 360
  n = n->next;
  ldv_40603: ;
#line 360
  if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 360
    __builtin_prefetch((void const   *)n->next);
#line 360
    if (1 != 0) {
#line 360
      __mptr = (struct hlist_node  const  *)n;
#line 360
      i = (struct drbd_request *)__mptr + 0xffffffffffffffd8UL;
#line 360
      if (1 != 0) {
#line 361
        goto ldv_40602;
      } else {
#line 363
        goto ldv_40604;
      }
    } else {
#line 363
      goto ldv_40604;
    }
  } else {

  }
  ldv_40604: ;
#line 372
  if (mdev->ee_hash_s != 0U) {
#line 374
    tmp___11 = __builtin_expect((unsigned long )mdev->ee_hash == (unsigned long )((struct hlist_head *)0),
                                0L);
#line 374
    if (tmp___11 != 0L) {
#line 374
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"),
                           "i" (374), "i" (12UL));
      ldv_40605: ;
#line 374
      goto ldv_40605;
    } else {

    }
#line 377
    slot = ee_hash_slot___0(mdev, sector);
#line 378
    n = slot->first;
#line 378
    goto ldv_40611;
    ldv_40610: 
#line 379
    tmp___16 = overlaps(e->sector, (int )e->size, sector, size);
#line 379
    if (tmp___16 != 0) {
#line 380
      tmp___12 = get_current();
#line 380
      tmp___13 = get_current();
#line 380
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 380
      printk("<1>%s %s: %s[%u] Concurrent remote write detected! [DISCARD L] new: %llus +%u; pending: %llus +%u\n",
             tmp___15, tmp___14, (char *)(& tmp___13->comm), tmp___12->pid, (unsigned long long )sector,
             size, (unsigned long long )e->sector, e->size);
#line 386
      goto out_conflict;
    } else {

    }
#line 378
    n = n->next;
    ldv_40611: ;
#line 378
    if ((unsigned long )n != (unsigned long )((struct hlist_node *)0)) {
#line 378
      __builtin_prefetch((void const   *)n->next);
#line 378
      if (1 != 0) {
#line 378
        __mptr___0 = (struct hlist_node  const  *)n;
#line 378
        e = (struct drbd_epoch_entry *)__mptr___0 + 0xffffffffffffffd8UL;
#line 378
        if (1 != 0) {
#line 379
          goto ldv_40610;
        } else {
#line 381
          goto ldv_40612;
        }
      } else {
#line 381
        goto ldv_40612;
      }
    } else {

    }
    ldv_40612: ;
  } else {

  }
  out_no_conflict: 
#line 395
  put_net_conf(mdev);
#line 396
  return (0);
  out_conflict: 
#line 399
  put_net_conf(mdev);
#line 400
  return (1);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
void __req_mod(struct drbd_request *req , enum drbd_req_event what , struct bio_and_error *m ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  struct hlist_head *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct hlist_head *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  int tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  int tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  char const   *tmp___47 ;
  char const   *tmp___48 ;
  char const   *tmp___49 ;
  int tmp___50 ;
  int tmp___51 ;
  char const   *tmp___52 ;
  char const   *tmp___53 ;
  int tmp___54 ;

  {
#line 418
  mdev = req->mdev;
#line 419
  m->bio = 0;
#line 421
  switch ((unsigned int )what) {
  default: 
#line 423
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 423
  printk("<3>%s %s: LOGIC BUG in %s:%u\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
         423);
#line 424
  goto ldv_40620;
  case 1U: ;
#line 435
  if ((req->rq_state & 504UL) != 0UL) {
#line 435
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 435
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           435);
  } else {

  }
#line 436
  req->rq_state = req->rq_state | 8UL;
#line 437
  inc_ap_pending(mdev);
#line 438
  goto ldv_40620;
  case 2U: ;
#line 442
  if ((req->rq_state & 7UL) != 0UL) {
#line 442
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_LOCAL_MASK) ) in %s:%d\n", tmp___4,
           tmp___3, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           442);
  } else {

  }
#line 443
  req->rq_state = req->rq_state | 1UL;
#line 444
  goto ldv_40620;
  case 19U: ;
#line 447
  if ((int )(req->master_bio)->bi_rw & 1) {
#line 448
    mdev->writ_cnt = mdev->writ_cnt + (req->size >> 9);
  } else {
#line 450
    mdev->read_cnt = mdev->read_cnt + (req->size >> 9);
  }
#line 452
  req->rq_state = req->rq_state | 6UL;
#line 453
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 455
  _req_may_be_done(req, m);
#line 456
  put_ldev(mdev);
#line 457
  goto ldv_40620;
  case 18U: 
#line 460
  req->rq_state = req->rq_state | 2UL;
#line 461
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 463
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 463
  printk("<1>%s %s: Local WRITE failed sec=%llus size=%u\n", tmp___6, tmp___5, (unsigned long long )req->sector,
         req->size);
#line 466
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 467
  _req_may_be_done(req, m);
#line 468
  put_ldev(mdev);
#line 469
  goto ldv_40620;
  case 17U: 
#line 473
  req->rq_state = req->rq_state | 2UL;
#line 474
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 475
  _req_may_be_done(req, m);
#line 476
  put_ldev(mdev);
#line 477
  goto ldv_40620;
  case 16U: 
#line 480
  __drbd_set_out_of_sync(mdev, req->sector, (int )req->size, "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
                         480U);
#line 482
  req->rq_state = req->rq_state | 2UL;
#line 483
  req->rq_state = req->rq_state & 0xfffffffffffffffeUL;
#line 485
  tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 485
  printk("<1>%s %s: Local READ failed sec=%llus size=%u\n", tmp___8, tmp___7, (unsigned long long )req->sector,
         req->size);
#line 488
  if ((req->rq_state & 504UL) != 0UL) {
#line 488
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 488
    printk("<3>%s %s: ASSERT( !(req->rq_state & RQ_NET_MASK) ) in %s:%d\n", tmp___10,
           tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           488);
  } else {

  }
#line 489
  req->rq_state = req->rq_state | 8UL;
#line 490
  inc_ap_pending(mdev);
#line 492
  __drbd_chk_io_error_(mdev, 0, "__req_mod");
#line 493
  put_ldev(mdev);
  case 4U: 
#line 513
  tmp___11 = ar_hash_slot___0(mdev, req->sector);
#line 513
  hlist_add_head(& req->colision, tmp___11);
#line 515
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 517
  if ((req->rq_state & 8UL) == 0UL) {
#line 517
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 517
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           517);
  } else {

  }
#line 518
  req->rq_state = req->rq_state | 16UL;
#line 519
  req->w.cb = (req->rq_state & 7UL) != 0UL ? & w_read_retry_remote : & w_send_read_req;
#line 522
  drbd_queue_work(& mdev->data.work, & req->w);
#line 523
  goto ldv_40620;
  case 3U: 
#line 529
  tmp___14 = tl_hash_slot___0(mdev, req->sector);
#line 529
  hlist_add_head(& req->colision, tmp___14);
#line 548
  tmp___17 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 548
  if (tmp___17 != 0) {
#line 548
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 548
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 548
    printk("<3>%s %s: ASSERT( test_bit(CREATE_BARRIER, &mdev->flags) == 0 ) in %s:%d\n",
           tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           548);
  } else {

  }
#line 550
  req->epoch = (mdev->newest_tle)->br_number;
#line 551
  list_add_tail(& req->tl_requests, & (mdev->newest_tle)->requests);
#line 555
  (mdev->newest_tle)->n_req = (mdev->newest_tle)->n_req + 1;
#line 558
  if ((req->rq_state & 8UL) == 0UL) {
#line 558
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 558
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 558
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           558);
  } else {

  }
#line 559
  req->rq_state = req->rq_state | 16UL;
#line 560
  req->w.cb = & w_send_dblock;
#line 561
  drbd_queue_work(& mdev->data.work, & req->w);
#line 564
  if ((mdev->newest_tle)->n_req >= (mdev->net_conf)->max_epoch_size) {
#line 565
    queue_barrier(mdev);
  } else {

  }
#line 567
  goto ldv_40620;
  case 5U: ;
  case 6U: 
#line 574
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 577
  _req_may_be_done(req, m);
#line 578
  goto ldv_40620;
  case 7U: ;
#line 582
  if ((int )(req->master_bio)->bi_rw & 1 && (mdev->net_conf)->wire_protocol == 1) {
#line 586
    if ((req->rq_state & 8UL) != 0UL) {
#line 587
      tmp___20 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 587
      if (tmp___20 != 0) {
#line 587
        __wake_up(& mdev->misc_wait, 3U, 1, 0);
      } else {

      }
#line 587
      tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 587
      if (tmp___24 < 0) {
#line 587
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 587
        tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 587
        tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 587
        printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___23, tmp___22,
               "__req_mod", 587, tmp___21);
      } else {

      }
#line 588
      req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 589
      req->rq_state = req->rq_state | 128UL;
    } else {

    }
  } else {

  }
#line 595
  req->rq_state = req->rq_state & 0xffffffffffffffefUL;
#line 596
  req->rq_state = req->rq_state | 32UL;
#line 602
  _req_may_be_done(req, m);
#line 603
  goto ldv_40620;
  case 8U: ;
#line 608
  if ((req->rq_state & 8UL) != 0UL) {
#line 609
    tmp___25 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 609
    if (tmp___25 != 0) {
#line 609
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 609
    tmp___29 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 609
    if (tmp___29 < 0) {
#line 609
      tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 609
      tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
      tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 609
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___28, tmp___27,
             "__req_mod", 609, tmp___26);
    } else {

    }
  } else {

  }
#line 610
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 611
  req->rq_state = req->rq_state | 64UL;
#line 614
  if ((req->rq_state & 16UL) == 0UL) {
#line 615
    _req_may_be_done(req, m);
  } else {

  }
#line 616
  goto ldv_40620;
  case 11U: 
#line 619
  req->rq_state = req->rq_state | 256UL;
  case 12U: ;
#line 624
  if ((unsigned int )what == 12U) {
#line 625
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 625
    printk("<1>%s %s: Got DiscardAck packet %llus +%u! DRBD is not a random data generator!\n",
           tmp___31, tmp___30, (unsigned long long )req->sector, req->size);
  } else {

  }
#line 628
  req->rq_state = req->rq_state | 64UL;
  case 10U: ;
  case 9U: 
#line 646
  req->rq_state = req->rq_state | 128UL;
#line 647
  if ((req->rq_state & 8UL) == 0UL) {
#line 647
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 647
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 647
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___33,
           tmp___32, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           647);
  } else {

  }
#line 648
  tmp___34 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 648
  if (tmp___34 != 0) {
#line 648
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 648
  tmp___38 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 648
  if (tmp___38 < 0) {
#line 648
    tmp___35 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 648
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 648
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 648
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___37, tmp___36,
           "__req_mod", 648, tmp___35);
  } else {

  }
#line 649
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 650
  _req_may_be_done(req, m);
#line 651
  goto ldv_40620;
  case 13U: ;
#line 655
  if ((req->rq_state & 8UL) != 0UL) {
#line 656
    tmp___39 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 656
    if (tmp___39 != 0) {
#line 656
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 656
    tmp___43 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
    if (tmp___43 < 0) {
#line 656
      tmp___40 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 656
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 656
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 656
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___42, tmp___41,
             "__req_mod", 656, tmp___40);
    } else {

    }
  } else {

  }
#line 657
  req->rq_state = req->rq_state & 0xffffffffffffff77UL;
#line 659
  req->rq_state = req->rq_state | 64UL;
#line 660
  _req_may_be_done(req, m);
#line 662
  goto ldv_40620;
  case 14U: ;
#line 665
  if ((req->rq_state & 8UL) != 0UL) {
#line 669
    tmp___44 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 669
    tmp___45 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 669
    printk("<3>%s %s: FIXME (barrier_acked but pending)\n", tmp___45, tmp___44);
#line 670
    list_move(& req->tl_requests, & mdev->out_of_sequence_requests);
  } else {

  }
#line 672
  if ((req->rq_state & 32UL) == 0UL) {
#line 672
    tmp___46 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 672
    tmp___47 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 672
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_SENT ) in %s:%d\n", tmp___47,
           tmp___46, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           672);
  } else {

  }
#line 673
  req->rq_state = req->rq_state | 64UL;
#line 674
  _req_may_be_done(req, m);
#line 675
  goto ldv_40620;
  case 15U: ;
#line 678
  if ((req->rq_state & 8UL) == 0UL) {
#line 678
    tmp___48 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 678
    tmp___49 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 678
    printk("<3>%s %s: ASSERT( req->rq_state & RQ_NET_PENDING ) in %s:%d\n", tmp___49,
           tmp___48, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           678);
  } else {

  }
#line 679
  tmp___50 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 679
  if (tmp___50 != 0) {
#line 679
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 679
  tmp___54 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 679
  if (tmp___54 < 0) {
#line 679
    tmp___51 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 679
    tmp___52 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    tmp___53 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 679
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___53, tmp___52,
           "__req_mod", 679, tmp___51);
  } else {

  }
#line 680
  req->rq_state = req->rq_state & 0xfffffffffffffff7UL;
#line 681
  req->rq_state = req->rq_state | 192UL;
#line 682
  _req_may_be_done(req, m);
#line 683
  goto ldv_40620;
  }
  ldv_40620: ;
#line 685
  return;
}
}
#line 694 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_may_do_local_read(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  sector_t esector ;
  sector_t nr_sectors ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 699
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 700
    return (1);
  } else {

  }
#line 701
  if ((int )mdev->state.ldv_32167.disk > 4) {
#line 702
    return (0);
  } else {

  }
#line 703
  if ((int )mdev->state.ldv_32167.disk <= 3) {
#line 704
    return (0);
  } else {

  }
#line 706
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 707
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 709
  if (sector >= nr_sectors) {
#line 709
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 709
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 709
    printk("<3>%s %s: ASSERT( sector < nr_sectors ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           709);
  } else {

  }
#line 710
  if (esector >= nr_sectors) {
#line 710
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 710
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 710
    printk("<3>%s %s: ASSERT( esector < nr_sectors ) in %s:%d\n", tmp___2, tmp___1,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           710);
  } else {

  }
#line 712
  sbnr = sector >> 3;
#line 713
  ebnr = esector >> 3;
#line 715
  tmp___3 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 715
  return (tmp___3 == 0);
}
}
#line 718 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_make_request_common(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  int rw ;
  int size ;
  sector_t sector ;
  struct drbd_tl_epoch *b ;
  struct drbd_request *req ;
  int local ;
  int remote ;
  int err ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  void *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;
  int tmp___17 ;
  int tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;

  {
#line 720
  rw = (int const   )bio->bi_rw & (int const   )3;
#line 721
  size = (int const   )bio->bi_size;
#line 722
  sector = bio->bi_sector;
#line 723
  b = 0;
#line 726
  err = -5;
#line 729
  req = drbd_req_new(mdev, bio);
#line 730
  if ((unsigned long )req == (unsigned long )((struct drbd_request *)0)) {
#line 731
    dec_ap_bio(mdev);
#line 734
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 734
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 734
    printk("<3>%s %s: could not kmalloc() req\n", tmp___0, tmp);
#line 735
    bio_endio(bio, -12);
#line 736
    return (0);
  } else {

  }
#line 739
  local = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 740
  if (local == 0) {
#line 741
    bio_put(req->private_bio);
#line 742
    req->private_bio = 0;
  } else {

  }
#line 744
  if (rw == 1) {
#line 745
    remote = 1;
  } else {
#line 748
    if (local != 0) {
#line 749
      tmp___1 = drbd_may_do_local_read(mdev, sector, size);
#line 749
      if (tmp___1 == 0) {
#line 755
        local = 0;
#line 756
        bio_put(req->private_bio);
#line 757
        req->private_bio = 0;
#line 758
        put_ldev(mdev);
      } else {

      }
    } else {

    }
#line 761
    remote = local == 0 && (int )mdev->state.ldv_32167.pdsk > 7;
  }
#line 772
  if ((rw == 2 && (int )mdev->state.ldv_32167.disk > 3) && local == 0) {
#line 773
    err = -11;
#line 774
    goto fail_and_free_req;
  } else {

  }
#line 782
  if (rw == 1 && local != 0) {
#line 783
    drbd_al_begin_io(mdev, sector);
  } else {

  }
#line 785
  remote = remote != 0 && (*((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_32167.conn > 9));
#line 789
  if (local == 0 && remote == 0) {
#line 790
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 790
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 790
    printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___3, tmp___2);
#line 791
    goto fail_free_complete;
  } else {

  }
#line 800
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 800
    tmp___7 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 800
    if (tmp___7 != 0) {
      allocate_barrier: 
#line 804
      tmp___4 = kmalloc(56UL, 16U);
#line 804
      b = (struct drbd_tl_epoch *)tmp___4;
#line 805
      if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 806
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 806
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 806
        printk("<3>%s %s: Failed to alloc barrier.\n", tmp___6, tmp___5);
#line 807
        err = -12;
#line 808
        goto fail_free_complete;
      } else {

      }
    } else {

    }
  } else {

  }
#line 813
  _spin_lock_irq(& mdev->req_lock);
#line 815
  if (remote != 0) {
#line 816
    remote = *((unsigned int *)mdev + 451UL) == 65536U || (*((unsigned int *)mdev + 451UL) == 32768U && (int )mdev->state.ldv_32167.conn > 9);
#line 819
    if (remote == 0) {
#line 820
      tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 820
      tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 820
      printk("<4>%s %s: lost connection while grabbing the req_lock!\n", tmp___9,
             tmp___8);
    } else {

    }
#line 821
    if (local == 0 && remote == 0) {
#line 822
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 822
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 822
      printk("<3>%s %s: IO ERROR: neither local nor remote disk\n", tmp___11, tmp___10);
#line 823
      _spin_unlock_irq(& mdev->req_lock);
#line 824
      goto fail_free_complete;
    } else {

    }
  } else {

  }
#line 828
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 829
    mdev->unused_spare_tle = b;
#line 830
    b = 0;
  } else {

  }
#line 832
  if ((rw == 1 && remote != 0) && (unsigned long )mdev->unused_spare_tle == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 832
    tmp___12 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 832
    if (tmp___12 != 0) {
#line 837
      _spin_unlock_irq(& mdev->req_lock);
#line 838
      goto allocate_barrier;
    } else {

    }
  } else {

  }
#line 843
  _drbd_start_io_acct(mdev, req, bio);
#line 855
  if (remote != 0 && (unsigned long )mdev->unused_spare_tle != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 855
    tmp___16 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 855
    if (tmp___16 != 0) {
#line 857
      _tl_add_barrier(mdev, mdev->unused_spare_tle);
#line 858
      mdev->unused_spare_tle = 0;
    } else {
#line 855
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 860
  if (remote != 0 && rw == 1) {
#line 860
    tmp___15 = constant_test_bit(0U, (unsigned long const volatile   *)(& mdev->flags));
#line 860
    if (tmp___15 != 0) {
#line 860
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      printk("<3>%s %s: ASSERT( !(remote && rw == WRITE && test_bit(CREATE_BARRIER, &mdev->flags)) ) in %s:%d\n",
             tmp___14, tmp___13, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             861);
    } else {

    }
  } else {

  }
#line 879
  if (remote != 0) {
#line 880
    _req_mod(req, to_be_send);
  } else {

  }
#line 881
  if (local != 0) {
#line 882
    _req_mod(req, to_be_submitted);
  } else {

  }
#line 887
  if (rw == 1) {
#line 887
    tmp___22 = _req_conflicts(req);
#line 887
    if (tmp___22 != 0) {
#line 894
      if (local != 0) {
#line 895
        bio_put(req->private_bio);
#line 896
        req->private_bio = 0;
#line 897
        drbd_al_complete_io(mdev, req->sector);
#line 898
        put_ldev(mdev);
#line 899
        local = 0;
      } else {

      }
#line 901
      if (remote != 0) {
#line 902
        tmp___17 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 902
        if (tmp___17 != 0) {
#line 902
          __wake_up(& mdev->misc_wait, 3U, 1, 0);
        } else {

        }
#line 902
        tmp___21 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 902
        if (tmp___21 < 0) {
#line 902
          tmp___18 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 902
          tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 902
          tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 902
          printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___20, tmp___19,
                 "drbd_make_request_common", 902, tmp___18);
        } else {

        }
      } else {

      }
#line 903
      _drbd_end_io_acct(mdev, req);
#line 905
      bio_endio(req->master_bio, 0);
#line 906
      req->master_bio = 0;
#line 907
      dec_ap_bio(mdev);
#line 908
      drbd_req_free(req);
#line 909
      remote = 0;
    } else {

    }
  } else {

  }
#line 914
  if (remote != 0) {
#line 919
    _req_mod(req, rw == 1 ? queue_for_net_write : queue_for_net_read);
  } else {

  }
#line 923
  _spin_unlock_irq(& mdev->req_lock);
#line 924
  kfree((void const   *)b);
#line 926
  if (local != 0) {
#line 927
    (req->private_bio)->bi_bdev = (mdev->ldev)->backing_bdev;
#line 929
    tmp___23 = drbd_insert_fault(mdev, rw != 1 ? (rw == 0 ? 5U : 6U) : 4U);
#line 929
    if (tmp___23 != 0) {
#line 932
      bio_endio(req->private_bio, -5);
    } else {
#line 934
      generic_make_request(req->private_bio);
    }
  } else {

  }
#line 939
  drbd_plug_device(mdev);
#line 941
  return (0);
  fail_free_complete: ;
#line 944
  if (rw == 1 && local != 0) {
#line 945
    drbd_al_complete_io(mdev, sector);
  } else {

  }
  fail_and_free_req: ;
#line 947
  if (local != 0) {
#line 948
    bio_put(req->private_bio);
#line 949
    req->private_bio = 0;
#line 950
    put_ldev(mdev);
  } else {

  }
#line 952
  bio_endio(bio, err);
#line 953
  drbd_req_free(req);
#line 954
  dec_ap_bio(mdev);
#line 955
  kfree((void const   *)b);
#line 957
  return (0);
}
}
#line 965 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
static int drbd_fail_request_early(struct drbd_conf *mdev , int is_write ) 
{ 
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;

  {
#line 968
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U && (unsigned int )*((unsigned char *)mdev + 1805UL) == 0U) {
#line 970
    return (1);
  } else {

  }
#line 972
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U && (allow_oos == 0 || is_write != 0)) {
#line 974
    tmp___3 = __ratelimit(& drbd_ratelimit_state);
#line 974
    if (tmp___3 != 0) {
#line 975
      tmp = get_current();
#line 975
      tmp___0 = get_current();
#line 975
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 975
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 975
      printk("<3>%s %s: Process %s[%u] tried to %s; since we are not in Primary state, we cannot allow this\n",
             tmp___2, tmp___1, (char *)(& tmp___0->comm), tmp->pid, is_write != 0 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
#line 981
    return (1);
  } else {

  }
#line 993
  if ((int )mdev->state.ldv_32167.disk <= 7 && (int )mdev->state.ldv_32167.pdsk <= 7) {
#line 994
    tmp___6 = __ratelimit(& drbd_ratelimit_state);
#line 994
    if (tmp___6 != 0) {
#line 995
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 995
      printk("<3>%s %s: Sorry, I have no access to good data anymore.\n", tmp___5,
             tmp___4);
    } else {

    }
#line 996
    return (1);
  } else {

  }
#line 999
  return (0);
}
}
#line 1002 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_make_request_26(struct request_queue *q , struct bio *bio ) 
{ 
  unsigned int s_enr ;
  unsigned int e_enr ;
  struct drbd_conf *mdev ;
  int tmp ;
  bool tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  long tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  struct bio_pair *bp ;
  sector_t sect ;
  int sps ;
  int mask ;
  sector_t first_sectors ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;

  {
#line 1005
  mdev = (struct drbd_conf *)q->queuedata;
#line 1007
  tmp = drbd_fail_request_early(mdev, (int )bio->bi_rw & 1);
#line 1007
  if (tmp != 0) {
#line 1008
    bio_endio(bio, -1);
#line 1009
    return (0);
  } else {

  }
#line 1020
  tmp___0 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 1020
  tmp___1 = __builtin_expect((long )tmp___0, 0L);
#line 1020
  if (tmp___1 != 0L) {
#line 1020
    tmp___2 = constant_test_bit(14U, (unsigned long const volatile   *)(& mdev->flags));
#line 1020
    tmp___3 = __builtin_expect(tmp___2 != 0, 0L);
#line 1020
    if (tmp___3 != 0L) {
#line 1022
      bio_endio(bio, -95);
#line 1023
      return (0);
    } else {

    }
  } else {

  }
#line 1029
  if (bio->bi_size == 0U) {
#line 1029
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1029
    printk("<3>%s %s: ASSERT( bio->bi_size > 0 ) in %s:%d\n", tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1029);
  } else {

  }
#line 1030
  if ((bio->bi_size & 511U) != 0U) {
#line 1030
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1030
    printk("<3>%s %s: ASSERT( (bio->bi_size & 0x1ff) == 0 ) in %s:%d\n", tmp___7,
           tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1030);
  } else {

  }
#line 1031
  if ((unsigned int )bio->bi_idx != 0U) {
#line 1031
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1031
    printk("<3>%s %s: ASSERT( bio->bi_idx == 0 ) in %s:%d\n", tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
           1031);
  } else {

  }
#line 1035
  s_enr = (unsigned int )(bio->bi_sector >> 6);
#line 1036
  e_enr = (unsigned int )(((bio->bi_sector + (sector_t )(bio->bi_size >> 9)) - 1UL) >> 6);
#line 1038
  tmp___11 = __builtin_expect(s_enr == e_enr, 1L);
#line 1038
  if (tmp___11 != 0L) {
#line 1039
    inc_ap_bio(mdev, 1);
#line 1040
    tmp___10 = drbd_make_request_common(mdev, bio);
#line 1040
    return (tmp___10);
  } else {

  }
#line 1045
  if (((unsigned int )bio->bi_vcnt != 1U || (unsigned int )bio->bi_idx != 0U) || bio->bi_size > 32768U) {
#line 1047
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1047
    printk("<3>%s %s: bio would need to, but cannot, be split: (vcnt=%u,idx=%u,size=%u,sector=%llu)\n",
           tmp___13, tmp___12, (int )bio->bi_vcnt, (int )bio->bi_idx, bio->bi_size,
           (unsigned long long )bio->bi_sector);
#line 1051
    bio_endio(bio, -22);
  } else {
#line 1063
    sect = bio->bi_sector;
#line 1064
    sps = 64;
#line 1065
    mask = sps + -1;
#line 1066
    first_sectors = (unsigned long )sps - ((unsigned long )mask & sect);
#line 1067
    bp = bio_split(bio, (int )first_sectors);
#line 1078
    inc_ap_bio(mdev, 2);
#line 1080
    if (s_enr + 1U != e_enr) {
#line 1080
      tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1080
      tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1080
      printk("<3>%s %s: ASSERT( e_enr == s_enr + 1 ) in %s:%d\n", tmp___15, tmp___14,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared",
             1080);
    } else {

    }
#line 1082
    drbd_make_request_common(mdev, & bp->bio1);
#line 1083
    drbd_make_request_common(mdev, & bp->bio2);
#line 1084
    bio_pair_release(bp);
  }
#line 1086
  return (0);
}
}
#line 1102 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_req.c.prepared"
int drbd_merge_bvec(struct request_queue *q , struct bvec_merge_data *bvm , struct bio_vec *bvec ) 
{ 
  struct drbd_conf *mdev ;
  unsigned int bio_offset ;
  unsigned int bio_size ;
  int limit ;
  int backing_limit ;
  struct request_queue *b ;
  int _min1 ;
  int _min2 ;
  int tmp ;

  {
#line 1104
  mdev = (struct drbd_conf *)q->queuedata;
#line 1105
  bio_offset = (unsigned int )bvm->bi_sector << 9;
#line 1107
  bio_size = bvm->bi_size;
#line 1110
  limit = (int )(32768U - ((bio_offset & 32767U) + bio_size));
#line 1112
  if (limit < 0) {
#line 1113
    limit = 0;
  } else {

  }
#line 1114
  if (bio_size == 0U) {
#line 1115
    if ((unsigned int )limit <= bvec->bv_len) {
#line 1116
      limit = (int )bvec->bv_len;
    } else
#line 1117
    if (limit != 0) {
#line 1117
      tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1117
      if (tmp != 0) {
#line 1118
        b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 1120
        if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) != 0U) {
#line 1121
          backing_limit = (*(b->merge_bvec_fn))(b, bvm, bvec);
#line 1122
          _min1 = limit;
#line 1122
          _min2 = backing_limit;
#line 1122
          limit = _min1 < _min2 ? _min1 : _min2;
        } else {

        }
#line 1124
        put_ldev(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1126
  return (limit);
}
}
#line 116 "include/linux/mutex.h"
__inline static int mutex_is_locked(struct mutex *lock ) 
{ 
  int tmp ;

  {
#line 118
  tmp = atomic_read((atomic_t const   *)(& lock->count));
#line 118
  return (tmp != 1);
}
}
#line 309 "include/linux/mm.h"
__inline static void get_page(struct page *page ) 
{ 
  int tmp ;
  long tmp___0 ;

  {
#line 311
  page = compound_head(page);
#line 312
  tmp = atomic_read((atomic_t const   *)(& page->_count));
#line 312
  tmp___0 = __builtin_expect(tmp == 0, 0L);
#line 312
  if (tmp___0 != 0L) {
#line 312
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"include/linux/mm.h"),
                         "i" (312), "i" (12UL));
    ldv_15023: ;
#line 312
    goto ldv_15023;
  } else {

  }
#line 313
  atomic_inc(& page->_count);
#line 314
  return;
}
}
#line 1051 "include/linux/blkdev.h"
__inline static unsigned short queue_logical_block_size(struct request_queue *q ) 
{ 
  int retval ;

  {
#line 1053
  retval = 512;
#line 1055
  if ((unsigned long )q != (unsigned long )((struct request_queue *)0) && (unsigned int )q->limits.logical_block_size != 0U) {
#line 1056
    retval = (int )q->limits.logical_block_size;
  } else {

  }
#line 1058
  return ((unsigned short )retval);
}
}
#line 1061 "include/linux/blkdev.h"
__inline static unsigned short bdev_logical_block_size(struct block_device *bdev ) 
{ 
  struct request_queue *tmp ;
  unsigned short tmp___0 ;

  {
#line 1063
  tmp = bdev_get_queue(bdev);
#line 1063
  tmp___0 = queue_logical_block_size(tmp);
#line 1063
  return (tmp___0);
}
}
#line 243 "include/linux/lru_cache.h"
extern void lc_reset(struct lru_cache * ) ;
#line 245
extern void lc_set(struct lru_cache * , unsigned int  , int  ) ;
#line 246
extern void lc_del(struct lru_cache * , struct lc_element * ) ;
#line 248
extern struct lc_element *lc_try_get(struct lru_cache * , unsigned int  ) ;
#line 249
extern struct lc_element *lc_find(struct lru_cache * , unsigned int  ) ;
#line 250
extern struct lc_element *lc_get(struct lru_cache * , unsigned int  ) ;
#line 251
extern unsigned int lc_put(struct lru_cache * , struct lc_element * ) ;
#line 252
extern void lc_changed(struct lru_cache * , struct lc_element * ) ;
#line 267 "include/linux/lru_cache.h"
__inline static int lc_try_lock(struct lru_cache *lc ) 
{ 
  int tmp ;

  {
#line 269
  tmp = test_and_set_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 269
  return (tmp == 0);
}
}
#line 276 "include/linux/lru_cache.h"
__inline static void lc_unlock(struct lru_cache *lc ) 
{ 


  {
#line 278
  clear_bit(1, (unsigned long volatile   *)(& lc->flags));
#line 279
  __asm__  volatile   ("": : : "memory");
#line 280
  return;
}
}
#line 282 "include/linux/lru_cache.h"
__inline static int lc_is_used(struct lru_cache *lc , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct lc_element *tmp ;

  {
#line 284
  tmp = lc_find(lc, enr);
#line 284
  e = tmp;
#line 285
  return ((unsigned long )e != (unsigned long )((struct lc_element *)0) && e->refcnt != 0U);
}
}
#line 291
extern struct lc_element *lc_element_by_index(struct lru_cache * , unsigned int  ) ;
#line 292
extern unsigned int lc_index_of(struct lru_cache * , struct lc_element * ) ;
#line 1507 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1516
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) ;
#line 1517
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) ;
#line 1518
void drbd_al_shrink(struct drbd_conf *mdev ) ;
#line 1526
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) ;
#line 73 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 75 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                                 struct page *page , sector_t sector , int rw , int size ) 
{ 
  struct bio *bio ;
  struct drbd_md_io md_io ;
  int ok ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  bool tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;

  {
#line 84
  md_io.mdev = mdev;
#line 85
  init_completion(& md_io.event);
#line 86
  md_io.error = 0;
#line 88
  if (rw & 1) {
#line 88
    tmp = constant_test_bit(16U, (unsigned long const volatile   *)(& mdev->flags));
#line 88
    if (tmp == 0) {
#line 89
      rw = rw | 32;
    } else {

    }
  } else {

  }
#line 90
  rw = rw | 192;
  retry: 
#line 93
  bio = bio_alloc(16U, 1);
#line 94
  bio->bi_bdev = bdev->md_bdev;
#line 95
  bio->bi_sector = sector;
#line 96
  tmp___0 = bio_add_page(bio, page, (unsigned int )size, 0U);
#line 96
  ok = tmp___0 == size;
#line 97
  if (ok == 0) {
#line 98
    goto out;
  } else {

  }
#line 99
  bio->bi_private = (void *)(& md_io);
#line 100
  bio->bi_end_io = & drbd_md_io_complete;
#line 101
  bio->bi_rw = (unsigned long )rw;
#line 103
  tmp___1 = drbd_insert_fault(mdev, rw & 1 ? 0U : 1U);
#line 103
  if (tmp___1 != 0) {
#line 104
    bio_endio(bio, -5);
  } else {
#line 106
    submit_bio(rw, bio);
  }
#line 107
  wait_for_completion(& md_io.event);
#line 108
  ok = (int )bio->bi_flags & 1 && md_io.error == 0;
#line 113
  tmp___4 = bio_rw_flagged(bio, BIO_RW_BARRIER);
#line 113
  tmp___5 = __builtin_expect((long )tmp___4, 0L);
#line 113
  if (tmp___5 != 0L) {
#line 113
    tmp___6 = __builtin_expect(ok == 0, 0L);
#line 113
    if (tmp___6 != 0L) {
#line 115
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 115
      printk("<4>%s %s: Barriers not supported on meta data device - disabling\n",
             tmp___3, tmp___2);
#line 116
      set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
#line 117
      rw = rw & -33;
#line 118
      bio_put(bio);
#line 119
      goto retry;
    } else {

    }
  } else {

  }
  out: 
#line 122
  bio_put(bio);
#line 123
  return (ok);
}
}
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_md_sync_page_io(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                         sector_t sector , int rw ) 
{ 
  int logical_block_size ;
  int mask ;
  int ok ;
  int offset ;
  struct page *iop ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  long tmp___2 ;
  unsigned short tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  void *p ;
  void *tmp___8 ;
  void *hp ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  size_t __len ;
  void *__ret ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  char const   *tmp___19 ;
  char const   *tmp___20 ;
  long tmp___21 ;
  void *p___0 ;
  void *tmp___22 ;
  void *hp___0 ;
  void *tmp___23 ;
  size_t __len___0 ;
  void *__ret___0 ;

  {
#line 130
  offset = 0;
#line 131
  iop = mdev->md_io_page;
#line 133
  tmp___1 = mutex_is_locked(& mdev->md_io_mutex);
#line 133
  if (tmp___1 == 0) {
#line 133
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 133
    printk("<3>%s %s: ASSERT( mutex_is_locked(&mdev->md_io_mutex) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           133);
  } else {

  }
#line 135
  tmp___2 = __builtin_expect((unsigned long )bdev->md_bdev == (unsigned long )((struct block_device *)0),
                             0L);
#line 135
  if (tmp___2 != 0L) {
#line 135
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                         "i" (135), "i" (12UL));
    ldv_40436: ;
#line 135
    goto ldv_40436;
  } else {

  }
#line 137
  tmp___3 = bdev_logical_block_size(bdev->md_bdev);
#line 137
  logical_block_size = (int )tmp___3;
#line 138
  if (logical_block_size == 0) {
#line 139
    logical_block_size = 512;
  } else {

  }
#line 142
  if (logical_block_size != 512) {
#line 143
    mask = logical_block_size / 512 + -1;
#line 144
    if ((mask != 1 && mask != 3) && mask != 7) {
#line 144
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 144
      printk("<3>%s %s: ASSERT( mask == 1 || mask == 3 || mask == 7 ) in %s:%d\n",
             tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             144);
    } else {

    }
#line 145
    if ((mask + 1) * 512 != logical_block_size) {
#line 145
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 145
      printk("<3>%s %s: ASSERT( logical_block_size == (mask+1) * MD_SECTOR_SIZE ) in %s:%d\n",
             tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             145);
    } else {

    }
#line 146
    offset = (int )((unsigned int )sector & (unsigned int )mask);
#line 147
    sector = (sector_t )(~ mask) & sector;
#line 148
    iop = mdev->md_io_tmpp;
#line 150
    if (rw & 1) {
#line 153
      tmp___8 = lowmem_page_address(mdev->md_io_page);
#line 153
      p = tmp___8;
#line 154
      tmp___9 = lowmem_page_address(mdev->md_io_tmpp);
#line 154
      hp = tmp___9;
#line 156
      ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, 0, logical_block_size);
#line 159
      tmp___12 = __builtin_expect(ok == 0, 0L);
#line 159
      if (tmp___12 != 0L) {
#line 160
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 160
        printk("<3>%s %s: drbd_md_sync_page_io(,%llus,READ [logical_block_size!=512]) failed!\n",
               tmp___11, tmp___10, (unsigned long long )sector);
#line 163
        return (0);
      } else {

      }
#line 166
      __len = 512UL;
#line 166
      if (__len > 63UL) {
#line 166
        __ret = __memcpy(hp + (unsigned long )(offset * 512), (void const   *)p, __len);
      } else {
#line 166
        __ret = __builtin_memcpy(hp + (unsigned long )(offset * 512), (void const   *)p,
                                 __len);
      }
    } else {

    }
  } else {

  }
#line 170
  tmp___17 = drbd_md_first_sector(bdev);
#line 170
  if (tmp___17 > sector) {
#line 172
    tmp___13 = get_current();
#line 172
    tmp___14 = get_current();
#line 172
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
    printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
           tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
  } else {
#line 170
    tmp___18 = drbd_md_last_sector(bdev);
#line 170
    if (tmp___18 < sector) {
#line 172
      tmp___13 = get_current();
#line 172
      tmp___14 = get_current();
#line 172
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 172
      printk("<1>%s %s: %s [%d]:%s(,%llus,%s) out of range md access!\n", tmp___16,
             tmp___15, (char *)(& tmp___14->comm), tmp___13->pid, "drbd_md_sync_page_io",
             (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
    } else {

    }
  }
#line 176
  ok = _drbd_md_sync_page_io(mdev, bdev, iop, sector, rw, logical_block_size);
#line 177
  tmp___21 = __builtin_expect(ok == 0, 0L);
#line 177
  if (tmp___21 != 0L) {
#line 178
    tmp___19 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    tmp___20 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 178
    printk("<3>%s %s: drbd_md_sync_page_io(,%llus,%s) failed!\n", tmp___20, tmp___19,
           (unsigned long long )sector, rw & 1 ? (char *)"WRITE" : (char *)"READ");
#line 180
    return (0);
  } else {

  }
#line 183
  if (logical_block_size != 512 && (rw & 1) == 0) {
#line 184
    tmp___22 = lowmem_page_address(mdev->md_io_page);
#line 184
    p___0 = tmp___22;
#line 185
    tmp___23 = lowmem_page_address(mdev->md_io_tmpp);
#line 185
    hp___0 = tmp___23;
#line 187
    __len___0 = 512UL;
#line 187
    if (__len___0 > 63UL) {
#line 187
      __ret___0 = __memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                           __len___0);
    } else {
#line 187
      __ret___0 = __builtin_memcpy(p___0, (void const   *)hp___0 + (unsigned long )(offset * 512),
                                   __len___0);
    }
  } else {

  }
#line 190
  return (ok);
}
}
#line 193 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct lc_element *_al_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  struct lc_element *tmp ;
  unsigned long al_flags ;
  struct bm_extent *bm_ext ;
  struct lc_element  const  *__mptr ;
  int tmp___0 ;
  long tmp___1 ;

  {
#line 197
  al_flags = 0UL;
#line 199
  _spin_lock_irq(& mdev->al_lock);
#line 200
  tmp = lc_find(mdev->resync, enr / 4U);
#line 201
  tmp___1 = __builtin_expect((unsigned long )tmp != (unsigned long )((struct lc_element *)0),
                             0L);
#line 201
  if (tmp___1 != 0L) {
#line 202
    __mptr = (struct lc_element  const  *)tmp;
#line 202
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 203
    tmp___0 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 203
    if (tmp___0 != 0) {
#line 204
      _spin_unlock_irq(& mdev->al_lock);
#line 205
      return (0);
    } else {

    }
  } else {

  }
#line 208
  al_ext = lc_get(mdev->act_log, enr);
#line 209
  al_flags = (mdev->act_log)->flags;
#line 210
  _spin_unlock_irq(& mdev->al_lock);
#line 221
  return (al_ext);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *al_ext ;
  struct update_al_work al_work ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___2 ;

  {
#line 226
  enr = (unsigned int )(sector >> 13);
#line 230
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 230
  if (tmp___1 <= 0) {
#line 230
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 230
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) > 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           230);
  } else {

  }
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_40465;
  } else {

  }
#line 232
  tmp___2 = get_current();
#line 232
  __wait.flags = 0U;
#line 232
  __wait.private = (void *)tmp___2;
#line 232
  __wait.func = & autoremove_wake_function;
#line 232
  __wait.task_list.next = & __wait.task_list;
#line 232
  __wait.task_list.prev = & __wait.task_list;
  ldv_40468: 
#line 232
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 232
  al_ext = _al_get(mdev, enr);
#line 232
  if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 232
    goto ldv_40467;
  } else {

  }
#line 232
  schedule();
#line 232
  goto ldv_40468;
  ldv_40467: 
#line 232
  finish_wait(& mdev->al_wait, & __wait);
  ldv_40465: ;
#line 234
  if (al_ext->lc_number != enr) {
#line 241
    init_completion(& al_work.event);
#line 242
    al_work.al_ext = al_ext;
#line 243
    al_work.enr = enr;
#line 244
    al_work.old_enr = al_ext->lc_number;
#line 245
    al_work.w.cb = & w_al_write_transaction;
#line 246
    drbd_queue_work_front(& mdev->data.work, & al_work.w);
#line 247
    wait_for_completion(& al_work.event);
#line 249
    mdev->al_writ_cnt = mdev->al_writ_cnt + 1U;
#line 251
    _spin_lock_irq(& mdev->al_lock);
#line 252
    lc_changed(mdev->act_log, al_ext);
#line 253
    _spin_unlock_irq(& mdev->al_lock);
#line 254
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 256
  return;
}
}
#line 258 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *extent ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned int tmp___1 ;

  {
#line 260
  enr = (unsigned int )(sector >> 13);
#line 264
  flags = _spin_lock_irqsave(& mdev->al_lock);
#line 266
  extent = lc_find(mdev->act_log, enr);
#line 268
  if ((unsigned long )extent == (unsigned long )((struct lc_element *)0)) {
#line 269
    _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 270
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 270
    printk("<3>%s %s: al_complete_io() called on inactive extent %u\n", tmp___0, tmp,
           enr);
#line 271
    return;
  } else {

  }
#line 274
  tmp___1 = lc_put(mdev->act_log, extent);
#line 274
  if (tmp___1 == 0U) {
#line 275
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 277
  _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 278
  return;
}
}
#line 281 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int w_al_write_transaction(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_al_work *aw ;
  struct drbd_work  const  *__mptr ;
  struct lc_element *updated ;
  unsigned int new_enr ;
  unsigned int evicted ;
  struct al_transaction *buffer ;
  sector_t sector ;
  int i ;
  int n ;
  int mx ;
  unsigned int extent_nr ;
  u32 xor_sum ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  void *tmp___2 ;
  __u32 tmp___3 ;
  unsigned int tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  int __min1 ;
  int __min2 ;
  unsigned int idx ;
  struct lc_element *tmp___7 ;
  __u32 tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 283
  __mptr = (struct drbd_work  const  *)w;
#line 283
  aw = (struct update_al_work *)__mptr;
#line 284
  updated = aw->al_ext;
#line 285
  new_enr = aw->enr;
#line 286
  evicted = aw->old_enr;
#line 291
  xor_sum = 0U;
#line 293
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 293
  if (tmp___1 == 0) {
#line 294
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 294
    printk("<3>%s %s: get_ldev() failed in w_al_write_transaction\n", tmp___0, tmp);
#line 295
    complete(& ((struct update_al_work *)w)->event);
#line 296
    return (1);
  } else {

  }
#line 302
  if ((int )mdev->state.ldv_32167.conn <= 9 && evicted != 4294967295U) {
#line 303
    drbd_bm_write_sect(mdev, (unsigned long )(evicted / 4U));
  } else {

  }
#line 305
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 306
  tmp___2 = lowmem_page_address(mdev->md_io_page);
#line 306
  buffer = (struct al_transaction *)tmp___2;
#line 308
  buffer->magic = 1728214147U;
#line 309
  tmp___3 = __fswab32(mdev->al_tr_number);
#line 309
  buffer->tr_number = tmp___3;
#line 311
  tmp___4 = lc_index_of(mdev->act_log, updated);
#line 311
  n = (int )tmp___4;
#line 313
  tmp___5 = __fswab32((__u32 )n);
#line 313
  buffer->updates[0].pos = tmp___5;
#line 314
  tmp___6 = __fswab32(new_enr);
#line 314
  buffer->updates[0].extent = tmp___6;
#line 316
  xor_sum = xor_sum ^ new_enr;
#line 318
  __min1 = 61;
#line 318
  __min2 = (int )((mdev->act_log)->nr_elements - (unsigned int )mdev->al_tr_cycle);
#line 318
  mx = __min1 < __min2 ? __min1 : __min2;
#line 320
  i = 0;
#line 320
  goto ldv_40508;
  ldv_40507: 
#line 321
  idx = (unsigned int )(mdev->al_tr_cycle + i);
#line 322
  tmp___7 = lc_element_by_index(mdev->act_log, idx);
#line 322
  extent_nr = tmp___7->lc_number;
#line 323
  tmp___8 = __fswab32(idx);
#line 323
  buffer->updates[i + 1].pos = tmp___8;
#line 324
  tmp___9 = __fswab32(extent_nr);
#line 324
  buffer->updates[i + 1].extent = tmp___9;
#line 325
  xor_sum = xor_sum ^ extent_nr;
#line 320
  i = i + 1;
  ldv_40508: ;
#line 320
  if (i < mx) {
#line 321
    goto ldv_40507;
  } else {

  }

#line 327
  goto ldv_40511;
  ldv_40510: 
#line 328
  buffer->updates[i + 1].pos = 4294967295U;
#line 329
  buffer->updates[i + 1].extent = 4294967295U;
#line 330
  xor_sum = ~ xor_sum;
#line 327
  i = i + 1;
  ldv_40511: ;
#line 327
  if (i <= 60) {
#line 328
    goto ldv_40510;
  } else {

  }
#line 332
  mdev->al_tr_cycle = mdev->al_tr_cycle + 61;
#line 333
  if ((unsigned int )mdev->al_tr_cycle >= (mdev->act_log)->nr_elements) {
#line 334
    mdev->al_tr_cycle = 0;
  } else {

  }
#line 336
  tmp___10 = __fswab32(xor_sum);
#line 336
  buffer->xor_sum = tmp___10;
#line 338
  sector = (sector_t )(((mdev->ldev)->md.md_offset + (u64 )(mdev->ldev)->md.al_offset) + (u64 )mdev->al_tr_pos);
#line 341
  tmp___11 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 341
  if (tmp___11 == 0) {
#line 342
    drbd_chk_io_error_(mdev, 1, 1, "w_al_write_transaction");
  } else {

  }
#line 344
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 344
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 346
    mdev->al_tr_pos = 0;
  } else {

  }
#line 348
  if (mdev->al_tr_pos > 63) {
#line 348
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 348
    printk("<3>%s %s: ASSERT( mdev->al_tr_pos < MD_AL_MAX_SIZE ) in %s:%d\n", tmp___13,
           tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           348);
  } else {

  }
#line 349
  mdev->al_tr_number = mdev->al_tr_number + 1U;
#line 351
  mutex_unlock(& mdev->md_io_mutex);
#line 353
  complete(& ((struct update_al_work *)w)->event);
#line 354
  put_ldev(mdev);
#line 356
  return (1);
}
}
#line 368 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int drbd_al_read_tr(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ,
                           struct al_transaction *b , int index ) 
{ 
  sector_t sector ;
  int rv ;
  int i ;
  u32 xor_sum ;
  int tmp ;
  __u32 tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;

  {
#line 375
  xor_sum = 0U;
#line 377
  sector = (sector_t )((bdev->md.md_offset + (u64 )bdev->md.al_offset) + (u64 )index);
#line 381
  tmp = drbd_md_sync_page_io(mdev, bdev, sector, 0);
#line 381
  if (tmp == 0) {
#line 382
    return (-1);
  } else {

  }
#line 384
  tmp___0 = __fswab32(b->magic);
#line 384
  rv = tmp___0 == 2205418087U;
#line 386
  i = 0;
#line 386
  goto ldv_40525;
  ldv_40524: 
#line 387
  tmp___1 = __fswab32(b->updates[i].extent);
#line 387
  xor_sum = tmp___1 ^ xor_sum;
#line 386
  i = i + 1;
  ldv_40525: ;
#line 386
  if (i <= 61) {
#line 387
    goto ldv_40524;
  } else {

  }
#line 388
  tmp___2 = __fswab32(b->xor_sum);
#line 388
  rv = (tmp___2 == xor_sum) & rv;
#line 390
  return (rv);
}
}
#line 400 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_al_read_log(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct al_transaction *buffer ;
  int i ;
  int rv ;
  int mx ;
  int active_extents ;
  int transactions ;
  int found_valid ;
  int from ;
  int to ;
  u32 from_tnr ;
  u32 to_tnr ;
  u32 cnr ;
  void *tmp ;
  __u32 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int j ;
  int pos ;
  unsigned int extent_nr ;
  unsigned int trn ;
  int _b ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  __u32 tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 406
  active_extents = 0;
#line 407
  transactions = 0;
#line 408
  found_valid = 0;
#line 409
  from = 0;
#line 410
  to = 0;
#line 411
  from_tnr = 0U;
#line 412
  to_tnr = 0U;
#line 415
  mx = (int )((mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U));
#line 420
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 421
  tmp = lowmem_page_address(mdev->md_io_page);
#line 421
  buffer = (struct al_transaction *)tmp;
#line 424
  i = 0;
#line 424
  goto ldv_40545;
  ldv_40544: 
#line 425
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 426
  if (rv == 0) {
#line 427
    goto ldv_40543;
  } else {

  }
#line 428
  if (rv == -1) {
#line 429
    mutex_unlock(& mdev->md_io_mutex);
#line 430
    return (0);
  } else {

  }
#line 432
  tmp___0 = __fswab32(buffer->tr_number);
#line 432
  cnr = tmp___0;
#line 434
  found_valid = found_valid + 1;
#line 434
  if (found_valid == 1) {
#line 435
    from = i;
#line 436
    to = i;
#line 437
    from_tnr = cnr;
#line 438
    to_tnr = cnr;
#line 439
    goto ldv_40543;
  } else {

  }
#line 441
  if ((int )cnr - (int )from_tnr < 0) {
#line 442
    if (((from_tnr - cnr) + (u32 )i) - (u32 )from != (u32 )(mx + 1)) {
#line 442
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 442
      printk("<3>%s %s: ASSERT( from_tnr - cnr + i - from == mx+1 ) in %s:%d\n", tmp___2,
             tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             442);
    } else {

    }
#line 443
    from = i;
#line 444
    from_tnr = cnr;
  } else {

  }
#line 446
  if ((int )cnr - (int )to_tnr > 0) {
#line 447
    if (cnr - to_tnr != (u32 )(i - to)) {
#line 447
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 447
      printk("<3>%s %s: ASSERT( cnr - to_tnr == i - to ) in %s:%d\n", tmp___4, tmp___3,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             447);
    } else {

    }
#line 448
    to = i;
#line 449
    to_tnr = cnr;
  } else {

  }
  ldv_40543: 
#line 424
  i = i + 1;
  ldv_40545: ;
#line 424
  if (i <= mx) {
#line 425
    goto ldv_40544;
  } else {

  }

#line 453
  if (found_valid == 0) {
#line 454
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 454
    printk("<4>%s %s: No usable activity log found.\n", tmp___6, tmp___5);
#line 455
    mutex_unlock(& mdev->md_io_mutex);
#line 456
    return (1);
  } else {

  }
#line 461
  i = from;
  ldv_40560: 
#line 467
  rv = drbd_al_read_tr(mdev, bdev, buffer, i);
#line 468
  _b = rv == 0;
#line 468
  if (_b != 0) {
#line 468
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 468
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___8, tmp___7, "drbd_al_read_log",
           (char *)"rv == 0", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           468);
  } else {

  }
#line 468
  if (_b != 0) {
#line 468
    goto cancel;
  } else {

  }
#line 469
  if (rv == -1) {
#line 470
    mutex_unlock(& mdev->md_io_mutex);
#line 471
    return (0);
  } else {

  }
#line 474
  tmp___9 = __fswab32(buffer->tr_number);
#line 474
  trn = tmp___9;
#line 476
  _spin_lock_irq(& mdev->al_lock);
#line 482
  j = 61;
#line 482
  goto ldv_40557;
  ldv_40556: 
#line 483
  tmp___10 = __fswab32(buffer->updates[j].pos);
#line 483
  pos = (int )tmp___10;
#line 484
  tmp___11 = __fswab32(buffer->updates[j].extent);
#line 484
  extent_nr = tmp___11;
#line 486
  if (extent_nr == 4294967295U) {
#line 487
    goto ldv_40555;
  } else {

  }
#line 489
  lc_set(mdev->act_log, extent_nr, pos);
#line 490
  active_extents = active_extents + 1;
  ldv_40555: 
#line 482
  j = j - 1;
  ldv_40557: ;
#line 482
  if (j >= 0) {
#line 483
    goto ldv_40556;
  } else {

  }
#line 492
  _spin_unlock_irq(& mdev->al_lock);
#line 494
  transactions = transactions + 1;
  cancel: ;
#line 497
  if (i == to) {
#line 498
    goto ldv_40559;
  } else {

  }
#line 499
  i = i + 1;
#line 500
  if (i > mx) {
#line 501
    i = 0;
  } else {

  }
#line 502
  goto ldv_40560;
  ldv_40559: 
#line 504
  mdev->al_tr_number = to_tnr + 1U;
#line 505
  mdev->al_tr_pos = to;
#line 506
  mdev->al_tr_pos = mdev->al_tr_pos + 1;
#line 506
  if ((unsigned int )mdev->al_tr_pos > (mdev->act_log)->nr_elements / 61U + ((mdev->act_log)->nr_elements % 61U != 0U ? 1U : 0U)) {
#line 508
    mdev->al_tr_pos = 0;
  } else {

  }
#line 511
  mutex_unlock(& mdev->md_io_mutex);
#line 513
  tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 513
  printk("<6>%s %s: Found %d transactions (%d active extents) in activity log.\n",
         tmp___13, tmp___12, transactions, active_extents);
#line 516
  return (1);
}
}
#line 519 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void atodb_endio(struct bio *bio , int error ) 
{ 
  struct drbd_atodb_wait *wc ;
  struct drbd_conf *mdev ;
  struct page *page ;
  int uptodate ;
  int tmp ;

  {
#line 521
  wc = (struct drbd_atodb_wait *)bio->bi_private;
#line 522
  mdev = wc->mdev;
#line 524
  uptodate = (int )bio->bi_flags & 1;
#line 529
  if (error == 0 && uptodate == 0) {
#line 530
    error = -5;
  } else {

  }
#line 532
  drbd_chk_io_error_(mdev, error, 1, "atodb_endio");
#line 533
  if (error != 0 && wc->error == 0) {
#line 534
    wc->error = error;
  } else {

  }
#line 536
  tmp = atomic_dec_and_test(& wc->count);
#line 536
  if (tmp != 0) {
#line 537
    complete(& wc->io_done);
  } else {

  }
#line 539
  page = (bio->bi_io_vec)->bv_page;
#line 540
  put_page(page);
#line 541
  bio_put(bio);
#line 542
  mdev->bm_writ_cnt = mdev->bm_writ_cnt + 1U;
#line 543
  put_ldev(mdev);
#line 544
  return;
}
}
#line 549 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int atodb_prepare_unless_covered(struct drbd_conf *mdev , struct bio **bios ,
                                        unsigned int enr , struct drbd_atodb_wait *wc ) 
{ 
  struct bio *bio ;
  struct page *page ;
  sector_t on_disk_sector ;
  unsigned int page_offset___0 ;
  int offset ;
  int i ;
  int err ;
  struct bio_vec  const  *prev_bv ;
  void *tmp ;
  size_t __min1 ;
  size_t __min2 ;
  size_t tmp___0 ;
  int tmp___1 ;

  {
#line 556
  on_disk_sector = (sector_t )(((u64 )enr + (mdev->ldev)->md.md_offset) + (u64 )(mdev->ldev)->md.bm_offset);
#line 558
  page_offset___0 = 4096U;
#line 560
  i = 0;
#line 561
  err = -12;
#line 570
  goto ldv_40584;
  ldv_40583: ;
#line 571
  if (bio->bi_sector == on_disk_sector) {
#line 572
    return (0);
  } else {

  }
#line 573
  i = i + 1;
  ldv_40584: 
#line 570
  bio = *(bios + (unsigned long )i);
#line 570
  if ((unsigned long )bio != (unsigned long )((struct bio *)0)) {
#line 571
    goto ldv_40583;
  } else {

  }
#line 578
  bio = bio_alloc(208U, 1);
#line 579
  if ((unsigned long )bio == (unsigned long )((struct bio *)0)) {
#line 580
    return (-12);
  } else {

  }
#line 582
  if (i > 0) {
#line 583
    prev_bv = (struct bio_vec  const  *)(*(bios + ((unsigned long )i + 0xffffffffffffffffUL)))->bi_io_vec;
#line 584
    page_offset___0 = (unsigned int )prev_bv->bv_offset + (unsigned int )prev_bv->bv_len;
#line 585
    page = prev_bv->bv_page;
  } else {

  }
#line 587
  if (page_offset___0 == 4096U) {
#line 588
    page = alloc_pages(2U, 0U);
#line 589
    if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 590
      goto out_bio_put;
    } else {

    }
#line 591
    page_offset___0 = 0U;
  } else {
#line 593
    get_page(page);
  }
#line 596
  offset = (int )(enr << 6);
#line 597
  tmp = kmap(page);
#line 598
  __min1 = 64UL;
#line 598
  tmp___0 = drbd_bm_words(mdev);
#line 598
  __min2 = tmp___0 - (size_t )offset;
#line 598
  drbd_bm_get_lel(mdev, (size_t )offset, __min1 < __min2 ? __min1 : __min2, (unsigned long *)tmp + (unsigned long )page_offset___0);
#line 600
  kunmap(page);
#line 602
  bio->bi_private = (void *)wc;
#line 603
  bio->bi_end_io = & atodb_endio;
#line 604
  bio->bi_bdev = (mdev->ldev)->md_bdev;
#line 605
  bio->bi_sector = on_disk_sector;
#line 607
  tmp___1 = bio_add_page(bio, page, 512U, page_offset___0);
#line 607
  if (tmp___1 != 512) {
#line 608
    goto out_put_page;
  } else {

  }
#line 610
  atomic_inc(& wc->count);
#line 616
  atomic_inc(& mdev->local_cnt);
#line 618
  *(bios + (unsigned long )i) = bio;
#line 620
  return (0);
  out_put_page: 
#line 623
  err = -22;
#line 624
  put_page(page);
  out_bio_put: 
#line 626
  bio_put(bio);
#line 627
  return (err);
}
}
#line 637 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_to_on_disk_bm(struct drbd_conf *mdev ) 
{ 
  int i ;
  int nr_elements ;
  unsigned int enr ;
  struct bio **bios ;
  struct drbd_atodb_wait wc ;
  int _b ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  void *tmp___5 ;
  struct lc_element *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  struct request_queue *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  struct lc_element *tmp___13 ;

  {
#line 644
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 644
  _b = tmp == 0;
#line 644
  if (_b != 0) {
#line 644
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 644
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 644
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_al_to_on_disk_bm",
           (char *)"!get_ldev_if_state(mdev, D_ATTACHING)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           644);
  } else {

  }
#line 644
  if (_b != 0) {
#line 645
    return;
  } else {

  }
#line 647
  tmp___2 = lc_try_lock(mdev->act_log);
#line 647
  if (tmp___2 != 0) {
#line 647
    goto ldv_40603;
  } else {

  }
#line 647
  tmp___3 = get_current();
#line 647
  __wait.flags = 0U;
#line 647
  __wait.private = (void *)tmp___3;
#line 647
  __wait.func = & autoremove_wake_function;
#line 647
  __wait.task_list.next = & __wait.task_list;
#line 647
  __wait.task_list.prev = & __wait.task_list;
  ldv_40606: 
#line 647
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 647
  tmp___4 = lc_try_lock(mdev->act_log);
#line 647
  if (tmp___4 != 0) {
#line 647
    goto ldv_40605;
  } else {

  }
#line 647
  schedule();
#line 647
  goto ldv_40606;
  ldv_40605: 
#line 647
  finish_wait(& mdev->al_wait, & __wait);
  ldv_40603: 
#line 649
  nr_elements = (int )(mdev->act_log)->nr_elements;
#line 652
  tmp___5 = kzalloc((unsigned long )nr_elements * 8UL, 208U);
#line 652
  bios = (struct bio **)tmp___5;
#line 653
  if ((unsigned long )bios == (unsigned long )((struct bio **)0)) {
#line 654
    goto submit_one_by_one;
  } else {

  }
#line 656
  atomic_set(& wc.count, 0);
#line 657
  init_completion(& wc.io_done);
#line 658
  wc.mdev = mdev;
#line 659
  wc.error = 0;
#line 661
  i = 0;
#line 661
  goto ldv_40611;
  ldv_40610: 
#line 662
  tmp___6 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 662
  enr = tmp___6->lc_number;
#line 663
  if (enr == 4294967295U) {
#line 664
    goto ldv_40608;
  } else {

  }
#line 666
  tmp___7 = atodb_prepare_unless_covered(mdev, bios, enr / 4U, & wc);
#line 666
  if (tmp___7 != 0) {
#line 669
    goto free_bios_submit_one_by_one;
  } else {

  }
  ldv_40608: 
#line 661
  i = i + 1;
  ldv_40611: ;
#line 661
  if (i < nr_elements) {
#line 662
    goto ldv_40610;
  } else {

  }
#line 673
  lc_unlock(mdev->act_log);
#line 674
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 677
  i = 0;
#line 677
  goto ldv_40615;
  ldv_40614: ;
#line 678
  if ((unsigned long )*(bios + (unsigned long )i) == (unsigned long )((struct bio *)0)) {
#line 679
    goto ldv_40613;
  } else {

  }
#line 680
  tmp___8 = drbd_insert_fault(mdev, 0U);
#line 680
  if (tmp___8 != 0) {
#line 681
    (*(bios + (unsigned long )i))->bi_rw = 1UL;
#line 682
    bio_endio(*(bios + (unsigned long )i), -5);
  } else {
#line 684
    submit_bio(1, *(bios + (unsigned long )i));
  }
#line 677
  i = i + 1;
  ldv_40615: ;
#line 677
  if (i < nr_elements) {
#line 678
    goto ldv_40614;
  } else {

  }
  ldv_40613: 
#line 688
  tmp___9 = bdev_get_queue((mdev->ldev)->md_bdev);
#line 688
  drbd_blk_run_queue(tmp___9);
#line 691
  drbd_md_flush(mdev);
#line 699
  tmp___10 = atomic_read((atomic_t const   *)(& wc.count));
#line 699
  if (tmp___10 != 0) {
#line 700
    wait_for_completion(& wc.io_done);
  } else {

  }
#line 702
  put_ldev(mdev);
#line 704
  kfree((void const   *)bios);
#line 705
  return;
  free_bios_submit_one_by_one: 
#line 709
  i = 0;
#line 709
  goto ldv_40617;
  ldv_40616: 
#line 710
  bio_endio(*(bios + (unsigned long )i), 0);
#line 709
  i = i + 1;
  ldv_40617: ;
#line 709
  if (i < nr_elements && (unsigned long )*(bios + (unsigned long )i) != (unsigned long )((struct bio *)0)) {
#line 710
    goto ldv_40616;
  } else {

  }
#line 712
  kfree((void const   *)bios);
  submit_one_by_one: 
#line 715
  tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
  tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 715
  printk("<4>%s %s: Using the slow drbd_al_to_on_disk_bm()\n", tmp___12, tmp___11);
#line 717
  i = 0;
#line 717
  goto ldv_40621;
  ldv_40620: 
#line 718
  tmp___13 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 718
  enr = tmp___13->lc_number;
#line 719
  if (enr == 4294967295U) {
#line 720
    goto ldv_40619;
  } else {

  }
#line 723
  drbd_bm_write_sect(mdev, (unsigned long )(enr / 4U));
  ldv_40619: 
#line 717
  i = i + 1;
  ldv_40621: ;
#line 717
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 718
    goto ldv_40620;
  } else {

  }
#line 726
  lc_unlock(mdev->act_log);
#line 727
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 728
  put_ldev(mdev);
#line 729
  return;
}
}
#line 735 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_apply_to_bm(struct drbd_conf *mdev ) 
{ 
  unsigned int enr ;
  unsigned long add ;
  char ppb[10U] ;
  int i ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  struct lc_element *tmp___2 ;
  unsigned long tmp___3 ;
  char *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 738
  add = 0UL;
#line 742
  tmp = lc_try_lock(mdev->act_log);
#line 742
  if (tmp != 0) {
#line 742
    goto ldv_40630;
  } else {

  }
#line 742
  tmp___0 = get_current();
#line 742
  __wait.flags = 0U;
#line 742
  __wait.private = (void *)tmp___0;
#line 742
  __wait.func = & autoremove_wake_function;
#line 742
  __wait.task_list.next = & __wait.task_list;
#line 742
  __wait.task_list.prev = & __wait.task_list;
  ldv_40633: 
#line 742
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 742
  tmp___1 = lc_try_lock(mdev->act_log);
#line 742
  if (tmp___1 != 0) {
#line 742
    goto ldv_40632;
  } else {

  }
#line 742
  schedule();
#line 742
  goto ldv_40633;
  ldv_40632: 
#line 742
  finish_wait(& mdev->al_wait, & __wait);
  ldv_40630: 
#line 744
  i = 0;
#line 744
  goto ldv_40636;
  ldv_40635: 
#line 745
  tmp___2 = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 745
  enr = tmp___2->lc_number;
#line 746
  if (enr == 4294967295U) {
#line 747
    goto ldv_40634;
  } else {

  }
#line 748
  tmp___3 = drbd_bm_ALe_set_all(mdev, (unsigned long )enr);
#line 748
  add = tmp___3 + add;
  ldv_40634: 
#line 744
  i = i + 1;
  ldv_40636: ;
#line 744
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 745
    goto ldv_40635;
  } else {

  }
#line 751
  lc_unlock(mdev->act_log);
#line 752
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 754
  tmp___4 = ppsize((char *)(& ppb), (unsigned long long )(add << 2));
#line 754
  tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
  tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 754
  printk("<6>%s %s: Marked additional %s as out-of-sync based on AL.\n", tmp___6,
         tmp___5, tmp___4);
#line 755
  return;
}
}
#line 758 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _try_lc_del(struct drbd_conf *mdev , struct lc_element *al_ext ) 
{ 
  int rv ;
  long tmp ;

  {
#line 762
  _spin_lock_irq(& mdev->al_lock);
#line 763
  rv = al_ext->refcnt == 0U;
#line 764
  tmp = __builtin_expect(rv != 0, 1L);
#line 764
  if (tmp != 0L) {
#line 765
    lc_del(mdev->act_log, al_ext);
  } else {

  }
#line 766
  _spin_unlock_irq(& mdev->al_lock);
#line 768
  return (rv);
}
}
#line 780 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_al_shrink(struct drbd_conf *mdev ) 
{ 
  struct lc_element *al_ext ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 785
  tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& (mdev->act_log)->flags));
#line 785
  if (tmp___1 == 0) {
#line 785
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 785
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 785
    printk("<3>%s %s: ASSERT( test_bit(__LC_DIRTY, &mdev->act_log->flags) ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           785);
  } else {

  }
#line 787
  i = 0;
#line 787
  goto ldv_40654;
  ldv_40653: 
#line 788
  al_ext = lc_element_by_index(mdev->act_log, (unsigned int )i);
#line 789
  if (al_ext->lc_number == 4294967295U) {
#line 790
    goto ldv_40648;
  } else {

  }
#line 791
  tmp___2 = _try_lc_del(mdev, al_ext);
#line 791
  if (tmp___2 != 0) {
#line 791
    goto ldv_40649;
  } else {

  }
#line 791
  tmp___3 = get_current();
#line 791
  __wait.flags = 0U;
#line 791
  __wait.private = (void *)tmp___3;
#line 791
  __wait.func = & autoremove_wake_function;
#line 791
  __wait.task_list.next = & __wait.task_list;
#line 791
  __wait.task_list.prev = & __wait.task_list;
  ldv_40652: 
#line 791
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 791
  tmp___4 = _try_lc_del(mdev, al_ext);
#line 791
  if (tmp___4 != 0) {
#line 791
    goto ldv_40651;
  } else {

  }
#line 791
  schedule();
#line 791
  goto ldv_40652;
  ldv_40651: 
#line 791
  finish_wait(& mdev->al_wait, & __wait);
  ldv_40649: ;
  ldv_40648: 
#line 787
  i = i + 1;
  ldv_40654: ;
#line 787
  if ((unsigned int )i < (mdev->act_log)->nr_elements) {
#line 788
    goto ldv_40653;
  } else {

  }
#line 794
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 795
  return;
}
}
#line 797 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int w_update_odbm(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct update_odbm_work *udw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned long tmp___3 ;

  {
#line 799
  __mptr = (struct drbd_work  const  *)w;
#line 799
  udw = (struct update_odbm_work *)__mptr;
#line 801
  tmp___2 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 801
  if (tmp___2 == 0) {
#line 802
    tmp___1 = __ratelimit(& drbd_ratelimit_state);
#line 802
    if (tmp___1 != 0) {
#line 803
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 803
      printk("<4>%s %s: Can not update on disk bitmap, local IO disabled.\n", tmp___0,
             tmp);
    } else {

    }
#line 804
    kfree((void const   *)udw);
#line 805
    return (1);
  } else {

  }
#line 808
  drbd_bm_write_sect(mdev, (unsigned long )udw->enr);
#line 809
  put_ldev(mdev);
#line 811
  kfree((void const   *)udw);
#line 813
  tmp___3 = drbd_bm_total_weight(mdev);
#line 813
  if (tmp___3 <= mdev->rs_failed) {
#line 814
    switch ((int )mdev->state.ldv_32167.conn) {
    case 16: ;
    case 17: ;
    case 20: ;
    case 21: 
#line 817
    drbd_resync_finished(mdev);
    default: ;
#line 820
    goto ldv_40669;
    }
    ldv_40669: ;
  } else {

  }
#line 823
  drbd_bcast_sync_progress(mdev);
#line 825
  return (1);
}
}
#line 835 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static void drbd_try_clear_on_disk_bm(struct drbd_conf *mdev , sector_t sector , int count ,
                                      int success ) 
{ 
  struct lc_element *e ;
  struct update_odbm_work *udw ;
  unsigned int enr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  struct bm_extent *ext ;
  struct lc_element  const  *__mptr ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  int rs_left ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  void *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;

  {
#line 843
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 843
  if (tmp___1 == 0) {
#line 843
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 843
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->local_cnt) ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           843);
  } else {

  }
#line 847
  enr = (unsigned int )(sector >> 15);
#line 849
  e = lc_get(mdev->resync, enr);
#line 850
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 851
    __mptr = (struct lc_element  const  *)e;
#line 851
    ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
#line 852
    if (ext->lce.lc_number == enr) {
#line 853
      if (success != 0) {
#line 854
        ext->rs_left = ext->rs_left - count;
      } else {
#line 856
        ext->rs_failed = ext->rs_failed + count;
      }
#line 857
      if (ext->rs_left < ext->rs_failed) {
#line 858
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 858
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 858
        printk("<3>%s %s: BAD! sector=%llus enr=%u rs_left=%d rs_failed=%d count=%d\n",
               tmp___3, tmp___2, (unsigned long long )sector, ext->lce.lc_number,
               ext->rs_left, ext->rs_failed, count);
#line 863
        dump_stack();
#line 865
        lc_put(mdev->resync, & ext->lce);
#line 866
        val.i = 0U;
#line 866
        val.ldv_32167.conn = 1U;
#line 866
        mask.i = 0U;
#line 866
        mask.ldv_32167.conn = 31U;
#line 866
        drbd_force_state(mdev, mask, val);
#line 867
        return;
      } else {

      }
    } else {
#line 876
      tmp___4 = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 876
      rs_left = tmp___4;
#line 877
      if (ext->flags != 0UL) {
#line 878
        tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
        tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 878
        printk("<4>%s %s: changing resync lce: %d[%u;%02lx] -> %d[%u;00]\n", tmp___6,
               tmp___5, ext->lce.lc_number, ext->rs_left, ext->flags, enr, rs_left);
#line 882
        ext->flags = 0UL;
      } else {

      }
#line 884
      if (ext->rs_failed != 0) {
#line 885
        tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 885
        tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 885
        printk("<4>%s %s: Kicking resync_lru element enr=%u out with rs_failed=%d\n",
               tmp___8, tmp___7, ext->lce.lc_number, ext->rs_failed);
#line 888
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
#line 890
      ext->rs_left = rs_left;
#line 891
      ext->rs_failed = success == 0 ? count : 0;
#line 892
      lc_changed(mdev->resync, & ext->lce);
    }
#line 894
    lc_put(mdev->resync, & ext->lce);
#line 897
    if (ext->rs_left == ext->rs_failed) {
#line 898
      ext->rs_failed = 0;
#line 900
      tmp___9 = kmalloc(32UL, 32U);
#line 900
      udw = (struct update_odbm_work *)tmp___9;
#line 901
      if ((unsigned long )udw != (unsigned long )((struct update_odbm_work *)0)) {
#line 902
        udw->enr = ext->lce.lc_number;
#line 903
        udw->w.cb = & w_update_odbm;
#line 904
        drbd_queue_work_front(& mdev->data.work, & udw->w);
      } else {
#line 906
        tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
        tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
        printk("<4>%s %s: Could not kmalloc an udw\n", tmp___11, tmp___10);
#line 907
        set_bit(13U, (unsigned long volatile   *)(& mdev->flags));
      }
    } else {

    }
  } else {
#line 911
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 911
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 911
    printk("<3>%s %s: lc_get() failed! locked=%d/%d flags=%lu\n", tmp___13, tmp___12,
           mdev->resync_locked, (mdev->resync)->nr_elements, (mdev->resync)->flags);
  }
#line 912
  return;
}
}
#line 925 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_in_sync(struct drbd_conf *mdev , sector_t sector , int size , char const   *file ,
                        unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  unsigned long flags ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  unsigned long tmp___8 ;
  int tmp___9 ;

  {
#line 930
  count = 0UL;
#line 932
  wake_up = 0;
#line 935
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 936
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 936
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 936
    printk("<3>%s %s: drbd_set_in_sync: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 938
    return;
  } else {

  }
#line 940
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 941
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 943
  _b = sector >= nr_sectors;
#line 943
  if (_b != 0) {
#line 943
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 943
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 943
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "__drbd_set_in_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           943);
  } else {

  }
#line 943
  if (_b != 0) {
#line 943
    return;
  } else {

  }
#line 944
  _b___0 = esector >= nr_sectors;
#line 944
  if (_b___0 != 0) {
#line 944
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 944
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 944
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "__drbd_set_in_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           944);
  } else {

  }
#line 944
  if (_b___0 != 0) {
#line 944
    esector = nr_sectors - 1UL;
  } else {

  }
#line 946
  lbnr = (nr_sectors - 1UL) >> 3;
#line 951
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 951
  if (tmp___5 != 0L) {
#line 952
    return;
  } else {

  }
#line 953
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 953
  if (tmp___6 != 0L) {
#line 954
    ebnr = lbnr;
  } else {
#line 956
    ebnr = (esector - 7UL) >> 3;
  }
#line 957
  sbnr = (sector + 7UL) >> 3;
#line 959
  if (sbnr > ebnr) {
#line 960
    return;
  } else {

  }
#line 966
  flags = _spin_lock_irqsave(& mdev->al_lock);
#line 967
  tmp___7 = drbd_bm_clear_bits(mdev, sbnr, ebnr);
#line 967
  count = (unsigned long )tmp___7;
#line 968
  if (count != 0UL) {
#line 970
    if ((unsigned long )jiffies - mdev->rs_mark_time > 2500UL) {
#line 973
      tmp___8 = drbd_bm_total_weight(mdev);
#line 973
      if ((mdev->rs_mark_left != tmp___8 && (unsigned int )*((unsigned short *)mdev + 902UL) != 336U) && (unsigned int )*((unsigned short *)mdev + 902UL) != 320U) {
#line 976
        mdev->rs_mark_time = jiffies;
#line 977
        mdev->rs_mark_left = drbd_bm_total_weight(mdev);
      } else {

      }
    } else {

    }
#line 980
    tmp___9 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 980
    if (tmp___9 != 0) {
#line 981
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 1);
#line 982
      put_ldev(mdev);
    } else {

    }
#line 986
    wake_up = 1;
  } else {

  }
#line 988
  _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 989
  if (wake_up != 0) {
#line 990
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 991
  return;
}
}
#line 1001 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void __drbd_set_out_of_sync(struct drbd_conf *mdev , sector_t sector , int size ,
                            char const   *file , unsigned int const   line ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long flags ;
  sector_t esector ;
  sector_t nr_sectors ;
  unsigned int enr ;
  unsigned int count ;
  struct lc_element *e ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int _b ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b___0 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  struct lc_element  const  *__mptr ;
  struct lc_element  const  *__mptr___0 ;

  {
#line 1009
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1010
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1010
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1010
    printk("<3>%s %s: sector: %llus, size: %d\n", tmp___0, tmp, (unsigned long long )sector,
           size);
#line 1012
    return;
  } else {

  }
#line 1015
  tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1015
  if (tmp___1 == 0) {
#line 1016
    return;
  } else {

  }
#line 1018
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1019
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1021
  _b = sector >= nr_sectors;
#line 1021
  if (_b != 0) {
#line 1021
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1021
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___3, tmp___2, "__drbd_set_out_of_sync",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1021);
  } else {

  }
#line 1021
  if (_b != 0) {
#line 1022
    goto out;
  } else {

  }
#line 1023
  _b___0 = esector >= nr_sectors;
#line 1023
  if (_b___0 != 0) {
#line 1023
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___5, tmp___4, "__drbd_set_out_of_sync",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1023);
  } else {

  }
#line 1023
  if (_b___0 != 0) {
#line 1024
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1026
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1030
  sbnr = sector >> 3;
#line 1031
  ebnr = esector >> 3;
#line 1035
  flags = _spin_lock_irqsave(& mdev->al_lock);
#line 1036
  tmp___6 = drbd_bm_set_bits(mdev, sbnr, ebnr);
#line 1036
  count = (unsigned int )tmp___6;
#line 1038
  enr = (unsigned int )(sector >> 15);
#line 1039
  e = lc_find(mdev->resync, enr);
#line 1040
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1041
    __mptr = (struct lc_element  const  *)e;
#line 1041
    __mptr___0 = (struct lc_element  const  *)e;
#line 1041
    ((struct bm_extent *)__mptr + 0xfffffffffffffff0UL)->rs_left = (int )((unsigned int )((struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL)->rs_left + count);
  } else {

  }
#line 1042
  _spin_unlock_irqrestore(& mdev->al_lock, flags);
  out: 
#line 1045
  put_ldev(mdev);
#line 1046
  return;
}
}
#line 1049 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static struct bm_extent *_bme_get(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int wakeup ;
  unsigned long rs_flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  long tmp___1 ;

  {
#line 1053
  wakeup = 0;
#line 1056
  _spin_lock_irq(& mdev->al_lock);
#line 1057
  if (mdev->resync_locked > (mdev->resync)->nr_elements / 2U) {
#line 1058
    _spin_unlock_irq(& mdev->al_lock);
#line 1059
    return (0);
  } else {

  }
#line 1061
  e = lc_get(mdev->resync, enr);
#line 1062
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1062
    __mptr = (struct lc_element  const  *)e;
#line 1062
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1062
    bm_ext = 0;
  }
#line 1063
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1064
    if (bm_ext->lce.lc_number != enr) {
#line 1065
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1066
      bm_ext->rs_failed = 0;
#line 1067
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1068
      wakeup = 1;
    } else {

    }
#line 1070
    if (bm_ext->lce.refcnt == 1U) {
#line 1071
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {

    }
#line 1072
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
  } else {

  }
#line 1074
  rs_flags = (mdev->resync)->flags;
#line 1075
  _spin_unlock_irq(& mdev->al_lock);
#line 1076
  if (wakeup != 0) {
#line 1077
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1079
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1080
    if ((rs_flags & 4UL) != 0UL) {
#line 1081
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1081
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1081
      printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___0,
             tmp);
    } else {

    }
#line 1083
    tmp___1 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1083
    if (tmp___1 != 0L) {
#line 1083
      __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                           "i" (1083), "i" (12UL));
      ldv_40753: ;
#line 1083
      goto ldv_40753;
    } else {

    }
  } else {

  }
#line 1086
  return (bm_ext);
}
}
#line 1089 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
static int _is_in_al(struct drbd_conf *mdev , unsigned int enr ) 
{ 
  struct lc_element *al_ext ;
  int rv ;
  long tmp ;

  {
#line 1092
  rv = 0;
#line 1094
  _spin_lock_irq(& mdev->al_lock);
#line 1095
  tmp = __builtin_expect((mdev->act_log)->new_number == enr, 0L);
#line 1095
  if (tmp != 0L) {
#line 1096
    rv = 1;
  } else {
#line 1098
    al_ext = lc_find(mdev->act_log, enr);
#line 1099
    if ((unsigned long )al_ext != (unsigned long )((struct lc_element *)0)) {
#line 1100
      if (al_ext->refcnt != 0U) {
#line 1101
        rv = 1;
      } else {

      }
    } else {

    }
  }
#line 1104
  _spin_unlock_irq(& mdev->al_lock);
#line 1111
  return (rv);
}
}
#line 1121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct bm_extent *bm_ext ;
  int i ;
  int sig ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int __ret___0 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  struct task_struct *tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned int tmp___8 ;

  {
#line 1123
  enr = (unsigned int )(sector >> 15);
#line 1127
  __ret = 0;
#line 1127
  bm_ext = _bme_get(mdev, enr);
#line 1127
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1127
    tmp = get_current();
#line 1127
    __wait.flags = 0U;
#line 1127
    __wait.private = (void *)tmp;
#line 1127
    __wait.func = & autoremove_wake_function;
#line 1127
    __wait.task_list.next = & __wait.task_list;
#line 1127
    __wait.task_list.prev = & __wait.task_list;
    ldv_40772: 
#line 1127
    prepare_to_wait(& mdev->al_wait, & __wait, 1);
#line 1127
    bm_ext = _bme_get(mdev, enr);
#line 1127
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1127
      goto ldv_40770;
    } else {

    }
#line 1127
    tmp___0 = get_current();
#line 1127
    tmp___1 = signal_pending(tmp___0);
#line 1127
    if (tmp___1 == 0) {
#line 1127
      schedule();
#line 1127
      goto ldv_40771;
    } else {

    }
#line 1127
    __ret = -512;
#line 1127
    goto ldv_40770;
    ldv_40771: ;
#line 1127
    goto ldv_40772;
    ldv_40770: 
#line 1127
    finish_wait(& mdev->al_wait, & __wait);
  } else {

  }
#line 1127
  sig = __ret;
#line 1129
  if (sig != 0) {
#line 1130
    return (0);
  } else {

  }
#line 1132
  tmp___2 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1132
  if (tmp___2 != 0) {
#line 1133
    return (1);
  } else {

  }
#line 1135
  i = 0;
#line 1135
  goto ldv_40781;
  ldv_40780: 
#line 1136
  __ret___0 = 0;
#line 1136
  tmp___7 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1136
  if (tmp___7 != 0) {
#line 1136
    tmp___3 = get_current();
#line 1136
    __wait___0.flags = 0U;
#line 1136
    __wait___0.private = (void *)tmp___3;
#line 1136
    __wait___0.func = & autoremove_wake_function;
#line 1136
    __wait___0.task_list.next = & __wait___0.task_list;
#line 1136
    __wait___0.task_list.prev = & __wait___0.task_list;
    ldv_40778: 
#line 1136
    prepare_to_wait(& mdev->al_wait, & __wait___0, 1);
#line 1136
    tmp___4 = _is_in_al(mdev, enr * 4U + (unsigned int )i);
#line 1136
    if (tmp___4 == 0) {
#line 1136
      goto ldv_40776;
    } else {

    }
#line 1136
    tmp___5 = get_current();
#line 1136
    tmp___6 = signal_pending(tmp___5);
#line 1136
    if (tmp___6 == 0) {
#line 1136
      schedule();
#line 1136
      goto ldv_40777;
    } else {

    }
#line 1136
    __ret___0 = -512;
#line 1136
    goto ldv_40776;
    ldv_40777: ;
#line 1136
    goto ldv_40778;
    ldv_40776: 
#line 1136
    finish_wait(& mdev->al_wait, & __wait___0);
  } else {

  }
#line 1136
  sig = __ret___0;
#line 1138
  if (sig != 0) {
#line 1139
    _spin_lock_irq(& mdev->al_lock);
#line 1140
    tmp___8 = lc_put(mdev->resync, & bm_ext->lce);
#line 1140
    if (tmp___8 == 0U) {
#line 1141
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1142
      mdev->resync_locked = mdev->resync_locked - 1U;
#line 1143
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {

    }
#line 1145
    _spin_unlock_irq(& mdev->al_lock);
#line 1146
    return (0);
  } else {

  }
#line 1135
  i = i + 1;
  ldv_40781: ;
#line 1135
  if (i <= 3) {
#line 1136
    goto ldv_40780;
  } else {

  }
#line 1150
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1152
  return (1);
}
}
#line 1164 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_try_rs_begin_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  unsigned int al_enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct lc_element  const  *__mptr___0 ;
  int tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  struct lc_element  const  *__mptr___1 ;
  unsigned long rs_flags ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  long tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
#line 1166
  enr = (unsigned int )(sector >> 15);
#line 1167
  al_enr = enr * 4U;
#line 1172
  _spin_lock_irq(& mdev->al_lock);
#line 1173
  if (mdev->resync_wenr != 4294967295U && mdev->resync_wenr != enr) {
#line 1187
    e = lc_find(mdev->resync, mdev->resync_wenr);
#line 1188
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1188
      __mptr = (struct lc_element  const  *)e;
#line 1188
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1188
      bm_ext = 0;
    }
#line 1189
    if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1190
      tmp___1 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1190
      if (tmp___1 != 0) {
#line 1190
        tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1190
        tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1190
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1190);
      } else {

      }
#line 1191
      tmp___4 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1191
      if (tmp___4 == 0) {
#line 1191
        tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1191
        tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1191
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1191);
      } else {

      }
#line 1192
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1193
      mdev->resync_wenr = 4294967295U;
#line 1194
      tmp___5 = lc_put(mdev->resync, & bm_ext->lce);
#line 1194
      if (tmp___5 == 0U) {
#line 1195
        mdev->resync_locked = mdev->resync_locked - 1U;
      } else {

      }
#line 1196
      __wake_up(& mdev->al_wait, 3U, 1, 0);
    } else {
#line 1198
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1198
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1198
      printk("<1>%s %s: LOGIC BUG\n", tmp___7, tmp___6);
    }
  } else {

  }
#line 1202
  e = lc_try_get(mdev->resync, enr);
#line 1203
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1203
    __mptr___0 = (struct lc_element  const  *)e;
#line 1203
    bm_ext = (struct bm_extent *)__mptr___0 + 0xfffffffffffffff0UL;
  } else {
#line 1203
    bm_ext = 0;
  }
#line 1204
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1205
    tmp___8 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1205
    if (tmp___8 != 0) {
#line 1206
      goto proceed;
    } else {

    }
#line 1207
    tmp___11 = test_and_set_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1207
    if (tmp___11 == 0) {
#line 1208
      mdev->resync_locked = mdev->resync_locked + 1U;
    } else {
#line 1214
      bm_ext->lce.refcnt = bm_ext->lce.refcnt - 1U;
#line 1215
      if (bm_ext->lce.refcnt == 0U) {
#line 1215
        tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1215
        tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1215
        printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt > 0 ) in %s:%d\n", tmp___10,
               tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1215);
      } else {

      }
    }
#line 1217
    goto check_al;
  } else {
#line 1220
    if (mdev->resync_locked > (mdev->resync)->nr_elements - 3U) {
#line 1221
      goto try_again;
    } else {

    }
#line 1223
    e = lc_get(mdev->resync, enr);
#line 1224
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1224
      __mptr___1 = (struct lc_element  const  *)e;
#line 1224
      bm_ext = (struct bm_extent *)__mptr___1 + 0xfffffffffffffff0UL;
    } else {
#line 1224
      bm_ext = 0;
    }
#line 1225
    if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1226
      rs_flags = (mdev->resync)->flags;
#line 1227
      if ((rs_flags & 4UL) != 0UL) {
#line 1228
        tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1228
        tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1228
        printk("<4>%s %s: Have to wait for element (resync LRU too small?)\n", tmp___13,
               tmp___12);
      } else {

      }
#line 1230
      tmp___14 = __builtin_expect((rs_flags & 2UL) != 0UL, 0L);
#line 1230
      if (tmp___14 != 0L) {
#line 1230
        __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"),
                             "i" (1230), "i" (12UL));
        ldv_40802: ;
#line 1230
        goto ldv_40802;
      } else {

      }
#line 1231
      goto try_again;
    } else {

    }
#line 1233
    if (bm_ext->lce.lc_number != enr) {
#line 1234
      bm_ext->rs_left = drbd_bm_e_weight(mdev, (unsigned long )enr);
#line 1235
      bm_ext->rs_failed = 0;
#line 1236
      lc_changed(mdev->resync, & bm_ext->lce);
#line 1237
      __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1238
      tmp___17 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1238
      if (tmp___17 != 0) {
#line 1238
        tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1238
        tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1238
        printk("<3>%s %s: ASSERT( test_bit(BME_LOCKED, &bm_ext->flags) == 0 ) in %s:%d\n",
               tmp___16, tmp___15, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1238);
      } else {

      }
    } else {

    }
#line 1240
    set_bit(0U, (unsigned long volatile   *)(& bm_ext->flags));
#line 1241
    if (bm_ext->lce.refcnt != 1U) {
#line 1241
      tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1241
      tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1241
      printk("<3>%s %s: ASSERT( bm_ext->lce.refcnt == 1 ) in %s:%d\n", tmp___19, tmp___18,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1241);
    } else {

    }
#line 1242
    mdev->resync_locked = mdev->resync_locked + 1U;
#line 1243
    goto check_al;
  }
  check_al: 
#line 1246
  i = 0;
#line 1246
  goto ldv_40804;
  ldv_40803: 
#line 1247
  tmp___20 = __builtin_expect(al_enr + (unsigned int )i == (mdev->act_log)->new_number,
                              0L);
#line 1247
  if (tmp___20 != 0L) {
#line 1248
    goto try_again;
  } else {

  }
#line 1249
  tmp___21 = lc_is_used(mdev->act_log, al_enr + (unsigned int )i);
#line 1249
  if (tmp___21 != 0) {
#line 1250
    goto try_again;
  } else {

  }
#line 1246
  i = i + 1;
  ldv_40804: ;
#line 1246
  if (i <= 3) {
#line 1247
    goto ldv_40803;
  } else {

  }
#line 1252
  set_bit(1U, (unsigned long volatile   *)(& bm_ext->flags));
  proceed: 
#line 1254
  mdev->resync_wenr = 4294967295U;
#line 1255
  _spin_unlock_irq(& mdev->al_lock);
#line 1256
  return (0);
  try_again: ;
#line 1259
  if ((unsigned long )bm_ext != (unsigned long )((struct bm_extent *)0)) {
#line 1260
    mdev->resync_wenr = enr;
  } else {

  }
#line 1261
  _spin_unlock_irq(& mdev->al_lock);
#line 1262
  return (-11);
}
}
#line 1265 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_complete_io(struct drbd_conf *mdev , sector_t sector ) 
{ 
  unsigned int enr ;
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  unsigned long flags ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  unsigned int tmp___4 ;

  {
#line 1267
  enr = (unsigned int )(sector >> 15);
#line 1272
  flags = _spin_lock_irqsave(& mdev->al_lock);
#line 1273
  e = lc_find(mdev->resync, enr);
#line 1274
  if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1274
    __mptr = (struct lc_element  const  *)e;
#line 1274
    bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
  } else {
#line 1274
    bm_ext = 0;
  }
#line 1275
  if ((unsigned long )bm_ext == (unsigned long )((struct bm_extent *)0)) {
#line 1276
    _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1277
    tmp___1 = __ratelimit(& drbd_ratelimit_state);
#line 1277
    if (tmp___1 != 0) {
#line 1278
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1278
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1278
      printk("<3>%s %s: drbd_rs_complete_io() called, but extent not found\n", tmp___0,
             tmp);
    } else {

    }
#line 1279
    return;
  } else {

  }
#line 1282
  if (bm_ext->lce.refcnt == 0U) {
#line 1283
    _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1284
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1284
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1284
    printk("<3>%s %s: drbd_rs_complete_io(,%llu [=%u]) called, but refcnt is 0!?\n",
           tmp___3, tmp___2, (unsigned long long )sector, enr);
#line 1287
    return;
  } else {

  }
#line 1290
  tmp___4 = lc_put(mdev->resync, & bm_ext->lce);
#line 1290
  if (tmp___4 == 0U) {
#line 1291
    clear_bit(1, (unsigned long volatile   *)(& bm_ext->flags));
#line 1292
    clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1293
    mdev->resync_locked = mdev->resync_locked - 1U;
#line 1294
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1297
  _spin_unlock_irqrestore(& mdev->al_lock, flags);
#line 1298
  return;
}
}
#line 1304 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_cancel_all(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1306
  _spin_lock_irq(& mdev->al_lock);
#line 1308
  tmp = _get_ldev_if_state(mdev, D_FAILED);
#line 1308
  if (tmp != 0) {
#line 1309
    lc_reset(mdev->resync);
#line 1310
    put_ldev(mdev);
  } else {

  }
#line 1312
  mdev->resync_locked = 0U;
#line 1313
  mdev->resync_wenr = 4294967295U;
#line 1314
  _spin_unlock_irq(& mdev->al_lock);
#line 1315
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1316
  return;
}
}
#line 1325 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
int drbd_rs_del_all(struct drbd_conf *mdev ) 
{ 
  struct lc_element *e ;
  struct bm_extent *bm_ext ;
  int i ;
  struct lc_element  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  int tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  int tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  int tmp___17 ;

  {
#line 1331
  _spin_lock_irq(& mdev->al_lock);
#line 1333
  tmp___17 = _get_ldev_if_state(mdev, D_FAILED);
#line 1333
  if (tmp___17 != 0) {
#line 1335
    i = 0;
#line 1335
    goto ldv_40841;
    ldv_40840: 
#line 1336
    e = lc_element_by_index(mdev->resync, (unsigned int )i);
#line 1337
    if ((unsigned long )e != (unsigned long )((struct lc_element *)0)) {
#line 1337
      __mptr = (struct lc_element  const  *)e;
#line 1337
      bm_ext = (struct bm_extent *)__mptr + 0xfffffffffffffff0UL;
    } else {
#line 1337
      bm_ext = 0;
    }
#line 1338
    if (bm_ext->lce.lc_number == 4294967295U) {
#line 1339
      goto ldv_40839;
    } else {

    }
#line 1340
    if (bm_ext->lce.lc_number == mdev->resync_wenr) {
#line 1341
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1341
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1341
      printk("<6>%s %s: dropping %u in drbd_rs_del_all, apparently got \'synced\' by application io\n",
             tmp___0, tmp, mdev->resync_wenr);
#line 1344
      tmp___3 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1344
      if (tmp___3 != 0) {
#line 1344
        tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
        tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1344
        printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
               tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1344);
      } else {

      }
#line 1345
      tmp___6 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1345
      if (tmp___6 == 0) {
#line 1345
        tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1345
        tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1345
        printk("<3>%s %s: ASSERT( test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
               tmp___5, tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
               1345);
      } else {

      }
#line 1346
      clear_bit(0, (unsigned long volatile   *)(& bm_ext->flags));
#line 1347
      mdev->resync_wenr = 4294967295U;
#line 1348
      lc_put(mdev->resync, & bm_ext->lce);
    } else {

    }
#line 1350
    if (bm_ext->lce.refcnt != 0U) {
#line 1351
      tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
      tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1351
      printk("<6>%s %s: Retrying drbd_rs_del_all() later. refcnt=%d\n", tmp___8, tmp___7,
             bm_ext->lce.refcnt);
#line 1353
      put_ldev(mdev);
#line 1354
      _spin_unlock_irq(& mdev->al_lock);
#line 1355
      return (-11);
    } else {

    }
#line 1357
    tmp___11 = constant_test_bit(1U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1357
    if (tmp___11 != 0) {
#line 1357
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1357
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1357
      printk("<3>%s %s: ASSERT( !test_bit(BME_LOCKED, &bm_ext->flags) ) in %s:%d\n",
             tmp___10, tmp___9, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1357);
    } else {

    }
#line 1358
    tmp___14 = constant_test_bit(0U, (unsigned long const volatile   *)(& bm_ext->flags));
#line 1358
    if (tmp___14 != 0) {
#line 1358
      tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1358
      tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1358
      printk("<3>%s %s: ASSERT( !test_bit(BME_NO_WRITES, &bm_ext->flags) ) in %s:%d\n",
             tmp___13, tmp___12, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1358);
    } else {

    }
#line 1359
    lc_del(mdev->resync, & bm_ext->lce);
    ldv_40839: 
#line 1335
    i = i + 1;
    ldv_40841: ;
#line 1335
    if ((unsigned int )i < (mdev->resync)->nr_elements) {
#line 1336
      goto ldv_40840;
    } else {

    }

#line 1361
    if ((mdev->resync)->used != 0U) {
#line 1361
      tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1361
      tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1361
      printk("<3>%s %s: ASSERT( mdev->resync->used == 0 ) in %s:%d\n", tmp___16, tmp___15,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
             1361);
    } else {

    }
#line 1362
    put_ldev(mdev);
  } else {

  }
#line 1364
  _spin_unlock_irq(& mdev->al_lock);
#line 1366
  return (0);
}
}
#line 1375 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared"
void drbd_rs_failed_io(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  unsigned long sbnr ;
  unsigned long ebnr ;
  unsigned long lbnr ;
  unsigned long count ;
  sector_t esector ;
  sector_t nr_sectors ;
  int wake_up ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int _b___0 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  long tmp___5 ;
  long tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 1381
  wake_up = 0;
#line 1383
  if ((size <= 0 || (size & 511) != 0) || (unsigned int )size > 32768U) {
#line 1384
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1384
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1384
    printk("<3>%s %s: drbd_rs_failed_io: sector=%llus size=%d nonsense!\n", tmp___0,
           tmp, (unsigned long long )sector, size);
#line 1386
    return;
  } else {

  }
#line 1388
  nr_sectors = drbd_get_capacity(mdev->this_bdev);
#line 1389
  esector = ((sector_t )(size >> 9) + sector) - 1UL;
#line 1391
  _b = sector >= nr_sectors;
#line 1391
  if (_b != 0) {
#line 1391
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "drbd_rs_failed_io",
           (char *)"sector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1391);
  } else {

  }
#line 1391
  if (_b != 0) {
#line 1391
    return;
  } else {

  }
#line 1392
  _b___0 = esector >= nr_sectors;
#line 1392
  if (_b___0 != 0) {
#line 1392
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1392
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1392
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___4, tmp___3, "drbd_rs_failed_io",
           (char *)"esector >= nr_sectors", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_actlog.c.prepared",
           1392);
  } else {

  }
#line 1392
  if (_b___0 != 0) {
#line 1392
    esector = nr_sectors - 1UL;
  } else {

  }
#line 1394
  lbnr = (nr_sectors - 1UL) >> 3;
#line 1399
  tmp___5 = __builtin_expect(esector <= 6UL, 0L);
#line 1399
  if (tmp___5 != 0L) {
#line 1400
    return;
  } else {

  }
#line 1401
  tmp___6 = __builtin_expect(nr_sectors - 1UL == esector, 0L);
#line 1401
  if (tmp___6 != 0L) {
#line 1402
    ebnr = lbnr;
  } else {
#line 1404
    ebnr = (esector - 7UL) >> 3;
  }
#line 1405
  sbnr = (sector + 7UL) >> 3;
#line 1407
  if (sbnr > ebnr) {
#line 1408
    return;
  } else {

  }
#line 1414
  _spin_lock_irq(& mdev->al_lock);
#line 1415
  tmp___7 = drbd_bm_count_bits(mdev, sbnr, ebnr);
#line 1415
  count = (unsigned long )tmp___7;
#line 1416
  if (count != 0UL) {
#line 1417
    mdev->rs_failed = mdev->rs_failed + count;
#line 1419
    tmp___8 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1419
    if (tmp___8 != 0) {
#line 1420
      drbd_try_clear_on_disk_bm(mdev, sector, (int )count, 0);
#line 1421
      put_ldev(mdev);
    } else {

    }
#line 1426
    wake_up = 1;
  } else {

  }
#line 1428
  _spin_unlock_irq(& mdev->al_lock);
#line 1429
  if (wake_up != 0) {
#line 1430
    __wake_up(& mdev->al_wait, 3U, 1, 0);
  } else {

  }
#line 1431
  return;
}
}
#line 77 "include/linux/swab.h"
__inline static __u32 __fswahw32(__u32 val ) 
{ 


  {
#line 82
  return ((val << 16) | (val >> (8UL * sizeof(val) - 16UL)));
}
}
#line 109 "include/linux/bitmap.h"
extern int __bitmap_weight(unsigned long const   * , int  ) ;
#line 153 "include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst , int nbits ) 
{ 
  size_t nlongs ;
  int len ;

  {
#line 155
  nlongs = ((unsigned long )nbits + 63UL) / 64UL;
#line 157
  len = (int )(((unsigned int )nlongs + 536870911U) * 8U);
#line 158
  memset((void *)dst, 255, (size_t )len);
#line 160
  *(dst + (nlongs + 0xffffffffffffffffUL)) = ((unsigned int )nbits & 63U) != 0U ? (1UL << nbits % 64) - 1UL : 0xffffffffffffffffUL;
#line 161
  return;
}
}
#line 260 "include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const   *src , int nbits ) 
{ 
  int tmp___0 ;

  {
#line 264
  tmp___0 = __bitmap_weight(src, nbits);
#line 264
  return (tmp___0);
}
}
#line 27 "include/linux/cpumask.h"
extern int nr_cpu_ids ;
#line 79
extern struct cpumask  const  * const  cpu_online_mask ;
#line 102 "include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu ) 
{ 
  int __warned ;
  int __ret_warn_once ;
  int __ret_warn_on ;
  long tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 105
  __ret_warn_once = (unsigned int )nr_cpu_ids <= cpu;
#line 105
  tmp___1 = __builtin_expect(__ret_warn_once != 0, 0L);
#line 105
  if (tmp___1 != 0L) {
#line 105
    __ret_warn_on = __warned == 0;
#line 105
    tmp = __builtin_expect(__ret_warn_on != 0, 0L);
#line 105
    if (tmp != 0L) {
#line 105
      warn_slowpath_null("include/linux/cpumask.h", 105);
    } else {

    }
#line 105
    tmp___0 = __builtin_expect(__ret_warn_on != 0, 0L);
#line 105
    if (tmp___0 != 0L) {
#line 105
      __warned = 1;
    } else {

    }
  } else {

  }
#line 105
  __builtin_expect(__ret_warn_once != 0, 0L);
#line 107
  return (cpu);
}
}
#line 165 "include/linux/cpumask.h"
__inline static unsigned int cpumask_next(int n , struct cpumask  const  *srcp ) 
{ 
  unsigned long tmp ;

  {
#line 168
  if (n != -1) {
#line 169
    cpumask_check((unsigned int )n);
  } else {

  }
#line 170
  tmp = find_next_bit((unsigned long const   *)(& srcp->bits), (unsigned long )nr_cpu_ids,
                      (unsigned long )(n + 1));
#line 170
  return ((unsigned int )tmp);
}
}
#line 238 "include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu , struct cpumask *dstp ) 
{ 
  unsigned int tmp ;

  {
#line 240
  tmp = cpumask_check(cpu);
#line 240
  set_bit(tmp, (unsigned long volatile   *)(& dstp->bits));
#line 241
  return;
}
}
#line 291 "include/linux/cpumask.h"
__inline static void cpumask_setall(struct cpumask *dstp ) 
{ 


  {
#line 293
  bitmap_fill((unsigned long *)(& dstp->bits), nr_cpu_ids);
#line 294
  return;
}
}
#line 430 "include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask  const  *srcp ) 
{ 
  int tmp ;

  {
#line 432
  tmp = bitmap_weight((unsigned long const   *)(& srcp->bits), nr_cpu_ids);
#line 432
  return ((unsigned int )tmp);
}
}
#line 596
extern bool zalloc_cpumask_var(cpumask_var_t ** , gfp_t  ) ;
#line 598
extern void free_cpumask_var(cpumask_var_t  ) ;
#line 109 "include/linux/spinlock.h"
extern void __rwlock_init(rwlock_t * , char const   * , struct lock_class_key * ) ;
#line 107 "include/linux/mutex.h"
extern void __mutex_init(struct mutex * , char const   * , struct lock_class_key * ) ;
#line 59 "include/linux/timer.h"
extern void init_timer_key(struct timer_list * , char const   * , struct lock_class_key * ) ;
#line 96 "include/linux/slab.h"
extern struct kmem_cache *kmem_cache_create(char const   * , size_t  , size_t  , unsigned long  ,
                                            void (*)(void * ) ) ;
#line 99
extern void kmem_cache_destroy(struct kmem_cache * ) ;
#line 496 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 502
void ldv_module_put_1(struct module *ldv_func_arg1 ) ;
#line 506
void ldv_module_put_3(struct module *ldv_func_arg1 ) ;
#line 3 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int ldv_try_module_get(struct module *module ) ;
#line 5
void ldv_module_put(struct module *module ) ;
#line 239 "include/linux/net.h"
extern int kernel_sendmsg(struct socket * , struct msghdr * , struct kvec * , size_t  ,
                          size_t  ) ;
#line 263
extern int kernel_sock_shutdown(struct socket * , enum sock_shutdown_cmd  ) ;
#line 208 "include/linux/page-flags.h"
__inline static int PageSlab(struct page *page ) 
{ 
  int tmp ;

  {
#line 208
  tmp = constant_test_bit(7U, (unsigned long const volatile   *)(& page->flags));
#line 208
  return (tmp);
}
}
#line 1942 "include/linux/fs.h"
extern int register_blkdev(unsigned int  , char const   * ) ;
#line 1943
extern void unregister_blkdev(unsigned int  , char const   * ) ;
#line 1944
extern struct block_device *bdget(dev_t  ) ;
#line 1948
extern void bdput(struct block_device * ) ;
#line 1983
extern void bd_release(struct block_device * ) ;
#line 111 "include/linux/proc_fs.h"
extern struct proc_dir_entry *proc_create_data(char const   * , mode_t  , struct proc_dir_entry * ,
                                               struct file_operations  const  * ,
                                               void * ) ;
#line 115
extern void remove_proc_entry(char const   * , struct proc_dir_entry * ) ;
#line 152 "include/linux/proc_fs.h"
__inline static struct proc_dir_entry *proc_create(char const   *name , mode_t mode ,
                                                   struct proc_dir_entry *parent ,
                                                   struct file_operations  const  *proc_fops ) 
{ 
  struct proc_dir_entry *tmp ;

  {
#line 155
  tmp = proc_create_data(name, mode, parent, proc_fops, 0);
#line 155
  return (tmp);
}
}
#line 1810 "include/linux/sched.h"
extern int set_cpus_allowed_ptr(struct task_struct * , struct cpumask  const  * ) ;
#line 2019
extern int wake_up_process(struct task_struct * ) ;
#line 15 "include/linux/file.h"
extern void fput(struct file * ) ;
#line 42 "include/linux/reboot.h"
extern int register_reboot_notifier(struct notifier_block * ) ;
#line 43
extern int unregister_reboot_notifier(struct notifier_block * ) ;
#line 7 "include/linux/kthread.h"
extern struct task_struct *kthread_create(int (*)(void * ) , void * , char const   * 
                                          , ...) ;
#line 349 "include/linux/genhd.h"
extern void del_gendisk(struct gendisk * ) ;
#line 355
extern void set_disk_ro(struct gendisk * , int  ) ;
#line 540
extern struct gendisk *alloc_disk(int  ) ;
#line 542
extern void put_disk(struct gendisk * ) ;
#line 253 "include/linux/backing-dev.h"
__inline static int bdi_congested(struct backing_dev_info *bdi , int bdi_bits ) 
{ 
  int tmp ;

  {
#line 255
  if ((unsigned long )bdi->congested_fn != (unsigned long )((congested_fn *)0)) {
#line 256
    tmp = (*(bdi->congested_fn))(bdi->congested_data, bdi_bits);
#line 256
    return (tmp);
  } else {

  }
#line 257
  return ((int )((unsigned int )bdi->state & (unsigned int )bdi_bits));
}
}
#line 26 "include/linux/mempool.h"
extern mempool_t *mempool_create(int  , mempool_alloc_t * , mempool_free_t * , void * ) ;
#line 32
extern void mempool_destroy(mempool_t * ) ;
#line 40
extern void *mempool_alloc_slab(gfp_t  , void * ) ;
#line 41
extern void mempool_free_slab(void * , void * ) ;
#line 775 "include/linux/blkdev.h"
extern int blk_remove_plug(struct request_queue * ) ;
#line 911
extern void blk_cleanup_queue(struct request_queue * ) ;
#line 912
extern void blk_queue_make_request(struct request_queue * , make_request_fn * ) ;
#line 913
extern void blk_queue_bounce_limit(struct request_queue * , u64  ) ;
#line 918
extern void blk_queue_max_segment_size(struct request_queue * , unsigned int  ) ;
#line 943
extern void blk_queue_merge_bvec(struct request_queue * , merge_bvec_fn * ) ;
#line 962
extern struct request_queue *blk_alloc_queue(gfp_t  ) ;
#line 244 "include/linux/lru_cache.h"
extern void lc_destroy(struct lru_cache * ) ;
#line 62 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int disable_sendpage  ;
#line 63 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int allow_oos  ;
#line 64
unsigned int cn_idx ;
#line 67 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int enable_faults  ;
#line 68 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_rate  ;
#line 69 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int fault_devs  ;
#line 72
char usermode_helper[80U] ;
#line 163 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct drbd_conf **minor_table  ;
#line 541 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_code(struct p_compressed_bm *p , enum drbd_bitmap_code code ) 
{ 
  long tmp ;

  {
#line 543
  tmp = __builtin_expect(((unsigned int )code & 4294967280U) != 0U, 0L);
#line 543
  if (tmp != 0L) {
#line 543
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (543), "i" (12UL));
    ldv_39842: ;
#line 543
    goto ldv_39842;
  } else {

  }
#line 544
  p->encoding = ((unsigned int )p->encoding & 240U) | (unsigned int )((u8 )code);
#line 545
  return;
}
}
#line 554 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_start(struct p_compressed_bm *p , int set ) 
{ 


  {
#line 556
  p->encoding = (u8 )(((int )((signed char )p->encoding) & 127) | (set != 0 ? -128 : 0));
#line 557
  return;
}
}
#line 566 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void DCBP_set_pad_bits(struct p_compressed_bm *p , int n ) 
{ 
  long tmp ;

  {
#line 568
  tmp = __builtin_expect((n & -8) != 0, 0L);
#line 568
  if (tmp != 0L) {
#line 568
    __asm__  volatile   ("1:\tud2\n.pushsection __bug_table,\"a\"\n2:\t.long 1b - 2b, %c0 - 2b\n\t.word %c1, 0\n\t.org 2b+%c2\n.popsection": : "i" ((char *)"/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"),
                         "i" (568), "i" (12UL));
    ldv_39857: ;
#line 568
    goto ldv_39857;
  } else {

  }
#line 569
  p->encoding = (u8 )(((int )((signed char )p->encoding) & -128) | (int )((signed char )(n << 4)));
#line 570
  return;
}
}
#line 1074
void drbd_init_set_defaults(struct drbd_conf *mdev ) ;
#line 1083
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) ;
#line 1089
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) ;
#line 1094
void drbd_free_resources(struct drbd_conf *mdev ) ;
#line 1100
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) ;
#line 1104
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) ;
#line 1144
int _drbd_send_bitmap(struct drbd_conf *mdev ) ;
#line 1146
void drbd_free_bc(struct drbd_backing_dev *ldev ) ;
#line 1151
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) ;
#line 1155
void drbd_uuid_new_current(struct drbd_conf *mdev ) ;
#line 1158
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) ;
#line 1159
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) ;
#line 1160
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) ;
#line 1161
void drbd_md_mark_dirty(struct drbd_conf *mdev ) ;
#line 1344 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_request_cache  ;
#line 1345 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_ee_cache  ;
#line 1346 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_bm_ext_cache  ;
#line 1347 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct kmem_cache *drbd_al_ext_cache  ;
#line 1348 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_request_mempool  ;
#line 1349 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
mempool_t *drbd_ee_mempool  ;
#line 1351 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
struct page *drbd_pp_pool  ;
#line 1352 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
spinlock_t drbd_pp_lock  ;
#line 1353 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int drbd_pp_vacant  ;
#line 1354 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
wait_queue_head_t drbd_pp_wait  ;
#line 1358
struct drbd_conf *drbd_new_device(unsigned int minor ) ;
#line 1359
void drbd_free_mdev(struct drbd_conf *mdev ) ;
#line 1361 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
int proc_details  ;
#line 1371
void drbd_suspend_io(struct drbd_conf *mdev ) ;
#line 1372
void drbd_resume_io(struct drbd_conf *mdev ) ;
#line 1523
void drbd_nl_cleanup(void) ;
#line 1524
int drbd_nl_init(void) ;
#line 1525
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) ;
#line 1587 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_state_lock___0(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1589
  tmp = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp == 0) {
#line 1589
    goto ldv_40823;
  } else {

  }
#line 1589
  tmp___0 = get_current();
#line 1589
  __wait.flags = 0U;
#line 1589
  __wait.private = (void *)tmp___0;
#line 1589
  __wait.func = & autoremove_wake_function;
#line 1589
  __wait.task_list.next = & __wait.task_list;
#line 1589
  __wait.task_list.prev = & __wait.task_list;
  ldv_40826: 
#line 1589
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1589
  tmp___1 = test_and_set_bit(9, (unsigned long volatile   *)(& mdev->flags));
#line 1589
  if (tmp___1 == 0) {
#line 1589
    goto ldv_40825;
  } else {

  }
#line 1589
  schedule();
#line 1589
  goto ldv_40826;
  ldv_40825: 
#line 1589
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_40823: ;
#line 1592
  return;
}
}
#line 1630 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void __drbd_chk_io_error____3(struct drbd_conf *mdev , int forcedetach ,
                                              char const   *where ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  union drbd_state __ns ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;

  {
#line 1632
  switch ((mdev->ldev)->dc.on_io_error) {
  case 0: ;
#line 1634
  if (forcedetach == 0) {
#line 1635
    tmp___1 = printk_ratelimit();
#line 1635
    if (tmp___1 != 0) {
#line 1636
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1636
      printk("<3>%s %s: Local IO failed in %s.Passing error on...\n", tmp___0, tmp,
             where);
    } else {

    }
#line 1638
    goto ldv_40848;
  } else {

  }
  case 2: ;
  case 1: ;
#line 1643
  if ((int )mdev->state.ldv_32167.disk > 2) {
#line 1644
    __ns.i = mdev->state.i;
#line 1644
    __ns.ldv_32167.disk = 2U;
#line 1644
    _drbd_set_state(mdev, __ns, CS_HARD, 0);
#line 1645
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1645
    printk("<3>%s %s: Local IO failed in %s.Detaching...\n", tmp___3, tmp___2, where);
  } else {

  }
#line 1648
  goto ldv_40848;
  }
  ldv_40848: ;
#line 1651
  return;
}
}
#line 1661 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_chk_io_error____2(struct drbd_conf *mdev , int error , int forcedetach ,
                                            char const   *where ) 
{ 
  unsigned long flags ;

  {
#line 1664
  if (error != 0) {
#line 1666
    flags = _spin_lock_irqsave(& mdev->req_lock);
#line 1667
    __drbd_chk_io_error____3(mdev, forcedetach, where);
#line 1668
    _spin_unlock_irqrestore(& mdev->req_lock, flags);
  } else {

  }
#line 1670
  return;
}
}
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___0(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_40892;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_40892;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_40892: ;
#line 1746
  return (s);
}
}
#line 1754 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_md_ss__(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  sector_t tmp___2 ;

  {
#line 1757
  switch (bdev->dc.meta_dev_idx) {
  default: ;
#line 1759
  return ((unsigned long )bdev->dc.meta_dev_idx * 262144UL);
  case -1: ;
  case -3: ;
#line 1765
  if ((unsigned long )bdev->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1766
    tmp___1 = __ratelimit(& drbd_ratelimit_state);
#line 1766
    if (tmp___1 != 0) {
#line 1767
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1767
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1767
      printk("<3>%s %s: bdev->backing_bdev==NULL\n", tmp___0, tmp);
#line 1768
      dump_stack();
    } else {

    }
#line 1770
    return (0UL);
  } else {

  }
#line 1772
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1772
  return ((sector_t )(((unsigned long long )tmp___2 & 0xfffffffffffffff8ULL) - 8ULL));
  case -2: ;
#line 1775
  return (0UL);
  }
}
}
#line 1844 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_stop_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1846
  _drbd_thread_stop(thi, 0, 0);
#line 1847
  return;
}
}
#line 1849 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_thread_restart_nowait(struct drbd_thread *thi ) 
{ 


  {
#line 1851
  _drbd_thread_stop(thi, 1, 0);
#line 1852
  return;
}
}
#line 2040 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_state_is_stable___0(union drbd_state s ) 
{ 


  {
#line 2046
  switch ((unsigned int )s.ldv_32167.conn) {
  case 0U: ;
  case 8U: ;
  case 10U: ;
  case 16U: ;
  case 17U: ;
  case 18U: ;
  case 19U: ;
  case 20U: ;
  case 21U: ;
#line 2059
  goto ldv_41015;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 4U: ;
  case 5U: ;
  case 6U: ;
  case 7U: ;
  case 9U: ;
  case 11U: ;
  case 12U: ;
  case 13U: ;
  case 14U: ;
  case 15U: ;
  case 31U: ;
#line 2078
  return (0);
  }
  ldv_41015: ;
#line 2081
  switch ((unsigned int )s.ldv_32167.disk) {
  case 0U: ;
  case 4U: ;
  case 5U: ;
  case 7U: ;
  case 8U: ;
#line 2088
  goto ldv_41035;
  case 1U: ;
  case 2U: ;
  case 3U: ;
  case 6U: ;
  case 15U: ;
#line 2097
  return (0);
  }
  ldv_41035: ;
#line 2100
  return (1);
}
}
#line 2103 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int __inc_ap_bio_cond___0(struct drbd_conf *mdev ) 
{ 
  int mxb ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2105
  tmp = drbd_get_max_buffers(mdev);
#line 2105
  mxb = tmp;
#line 2107
  if ((unsigned int )*((unsigned char *)mdev + 1806UL) != 0U) {
#line 2108
    return (0);
  } else {

  }
#line 2109
  tmp___0 = constant_test_bit(17U, (unsigned long const volatile   *)(& mdev->flags));
#line 2109
  if (tmp___0 != 0) {
#line 2110
    return (0);
  } else {

  }
#line 2117
  tmp___1 = drbd_state_is_stable___0(mdev->state);
#line 2117
  if (tmp___1 == 0) {
#line 2118
    return (0);
  } else {

  }
#line 2122
  tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 2122
  if (tmp___2 > mxb) {
#line 2123
    return (0);
  } else {

  }
#line 2124
  tmp___3 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 2124
  if (tmp___3 != 0) {
#line 2125
    return (0);
  } else {

  }
#line 2126
  return (1);
}
}
#line 2207 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static void drbd_update_congested(struct drbd_conf *mdev ) 
{ 
  struct sock *sk ;

  {
#line 2209
  sk = (mdev->data.socket)->sk;
#line 2210
  if (sk->sk_wmem_queued > (sk->sk_sndbuf * 4) / 5) {
#line 2211
    set_bit(21U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2212
  return;
}
}
#line 2214 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static int drbd_queue_order_type(struct drbd_conf *mdev ) 
{ 


  {
#line 2221
  return (0);
}
}
#line 168 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int __vli_encode_bits(u64 *out , u64 const   in ) 
{ 
  u64 max ;
  u64 adj ;

  {
#line 170
  max = 0ULL;
#line 171
  adj = 1ULL;
#line 173
  if ((unsigned long long )in == 0ULL) {
#line 174
    return (-22);
  } else {

  }
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = ((unsigned long long )in - adj) << 1;
    } else {

    }
#line 186
    return (2);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 2) | 1ULL;
    } else {

    }
#line 186
    return (3);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 4ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 3) | 3ULL;
    } else {

    }
#line 186
    return (5);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 4) | 7ULL;
    } else {

    }
#line 186
    return (7);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 32ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 5) | 15ULL;
    } else {

    }
#line 186
    return (10);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 256ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 6) | 31ULL;
    } else {

    }
#line 186
    return (14);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 8192ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 63ULL;
    } else {

    }
#line 186
    return (21);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 2097152ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 127ULL;
    } else {

    }
#line 186
    return (29);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 17179869184ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 191ULL;
    } else {

    }
#line 186
    return (42);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 186
  max = max + 72057594037927936ULL;
#line 186
  if ((unsigned long long )in <= max) {
#line 186
    if ((unsigned long )out != (unsigned long )((u64 *)0)) {
#line 186
      *out = (((unsigned long long )in - adj) << 8) | 255ULL;
    } else {

    }
#line 186
    return (64);
  } else {

  }
#line 186
  adj = max + 1ULL;
#line 188
  return (-75);
}
}
#line 260 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int bitstream_put_bits(struct bitstream *bs , u64 val , unsigned int const   bits ) 
{ 
  unsigned char *b ;
  unsigned int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;

  {
#line 262
  b = bs->cur.b;
#line 265
  if ((unsigned int )bits == 0U) {
#line 266
    return (0);
  } else {

  }
#line 268
  if ((unsigned long )((long )(bs->cur.b + (unsigned long )(((bs->cur.bit + (unsigned int )bits) - 1U) >> 3)) - (long )bs->buf) >= bs->buf_len) {
#line 269
    return (-105);
  } else {

  }
#line 272
  if ((unsigned int )bits <= 63U) {
#line 273
    val = (0xffffffffffffffffULL >> (int )(64U - (unsigned int )bits)) & val;
  } else {

  }
#line 275
  tmp___0 = b;
#line 275
  b = b + 1;
#line 275
  *tmp___0 = (int )*tmp___0 | (int )((unsigned char )((val & 255ULL) << (int )bs->cur.bit));
#line 277
  tmp = 8U - bs->cur.bit;
#line 277
  goto ldv_41272;
  ldv_41271: 
#line 278
  tmp___1 = b;
#line 278
  b = b + 1;
#line 278
  *tmp___1 = (int )*tmp___1 | (int )((unsigned char )(val >> (int )tmp));
#line 277
  tmp = tmp + 8U;
  ldv_41272: ;
#line 277
  if (tmp < (unsigned int )bits) {
#line 278
    goto ldv_41271;
  } else {

  }
#line 280
  bitstream_cursor_advance(& bs->cur, bits);
#line 281
  return ((int )bits);
}
}
#line 340 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_vli.h"
__inline static int vli_encode_bits(struct bitstream *bs , u64 in ) 
{ 
  u64 code ;
  int bits ;
  int tmp ;
  int tmp___0 ;

  {
#line 342
  code = code;
#line 343
  tmp = __vli_encode_bits(& code, in);
#line 343
  bits = tmp;
#line 345
  if (bits <= 0) {
#line 346
    return (bits);
  } else {

  }
#line 348
  tmp___0 = bitstream_put_bits(bs, code, (unsigned int const   )bits);
#line 348
  return (tmp___0);
}
}
#line 80 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) ;
#line 81
static int drbd_open(struct block_device *bdev , fmode_t mode ) ;
#line 82
static int drbd_release(struct gendisk *gd , fmode_t mode ) ;
#line 83
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 84
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) ;
#line 86
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 87
static void md_sync_timer_fn(unsigned long data ) ;
#line 88
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int fault_count  ;
#line 125 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int minor_count  =    32U;
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int cn_idx  =    4U;
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char usermode_helper[80U]  = 
#line 133
  {      '/',      's',      'b',      'i', 
        'n',      '/',      'd',      'r', 
        'b',      'd',      'a',      'd', 
        'm',      '\000'};
#line 160 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct ratelimit_state drbd_ratelimit_state  =    {1250, 5, 0, 0, 0UL};
#line 162 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct block_device_operations drbd_ops  = 
#line 162
     {& drbd_open, & drbd_release, 0, 0, 0, 0, 0, 0, 0, 0, & __this_module};
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int tl_init(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  void *tmp ;

  {
#line 204
  tmp = kmalloc(56UL, 208U);
#line 204
  b = (struct drbd_tl_epoch *)tmp;
#line 205
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 206
    return (0);
  } else {

  }
#line 207
  INIT_LIST_HEAD(& b->requests);
#line 208
  INIT_LIST_HEAD(& b->w.list);
#line 209
  b->next = 0;
#line 210
  b->br_number = 4711U;
#line 211
  b->n_req = 0;
#line 212
  b->w.cb = 0;
#line 214
  mdev->oldest_tle = b;
#line 215
  mdev->newest_tle = b;
#line 216
  INIT_LIST_HEAD(& mdev->out_of_sequence_requests);
#line 218
  mdev->tl_hash = 0;
#line 219
  mdev->tl_hash_s = 0U;
#line 221
  return (1);
}
}
#line 224 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void tl_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;

  {
#line 226
  if ((unsigned long )mdev->oldest_tle != (unsigned long )mdev->newest_tle) {
#line 226
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 226
    printk("<3>%s %s: ASSERT( mdev->oldest_tle == mdev->newest_tle ) in %s:%d\n",
           tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           226);
  } else {

  }
#line 227
  tmp___3 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 227
  if (tmp___3 == 0) {
#line 227
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 227
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 227
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___2, tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           227);
  } else {

  }
#line 228
  kfree((void const   *)mdev->oldest_tle);
#line 229
  mdev->oldest_tle = 0;
#line 230
  kfree((void const   *)mdev->unused_spare_tle);
#line 231
  mdev->unused_spare_tle = 0;
#line 232
  kfree((void const   *)mdev->tl_hash);
#line 233
  mdev->tl_hash = 0;
#line 234
  mdev->tl_hash_s = 0U;
#line 235
  return;
}
}
#line 244 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _tl_add_barrier(struct drbd_conf *mdev , struct drbd_tl_epoch *new ) 
{ 
  struct drbd_tl_epoch *newest_before ;

  {
#line 248
  INIT_LIST_HEAD(& new->requests);
#line 249
  INIT_LIST_HEAD(& new->w.list);
#line 250
  new->w.cb = 0;
#line 251
  new->next = 0;
#line 252
  new->n_req = 0;
#line 254
  newest_before = mdev->newest_tle;
#line 257
  new->br_number = newest_before->br_number + 1U != 0U ? newest_before->br_number + 1U : 1U;
#line 258
  if ((unsigned long )mdev->newest_tle != (unsigned long )new) {
#line 259
    (mdev->newest_tle)->next = new;
#line 260
    mdev->newest_tle = new;
  } else {

  }
#line 262
  return;
}
}
#line 274 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_release(struct drbd_conf *mdev , unsigned int barrier_nr , unsigned int set_size ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *nob ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  struct list_head  const  *__mptr ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int tmp___12 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 281
  _spin_lock_irq(& mdev->req_lock);
#line 283
  b = mdev->oldest_tle;
#line 286
  if ((unsigned long )b == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 287
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 287
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 287
    printk("<3>%s %s: BAD! BarrierAck #%u received, but no epoch in tl!?\n", tmp___0,
           tmp, barrier_nr);
#line 289
    goto bail;
  } else {

  }
#line 291
  if (b->br_number != barrier_nr) {
#line 292
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 292
    printk("<3>%s %s: BAD! BarrierAck #%u received, expected #%u!\n", tmp___2, tmp___1,
           barrier_nr, b->br_number);
#line 294
    goto bail;
  } else {

  }
#line 296
  if ((unsigned int )b->n_req != set_size) {
#line 297
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 297
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 297
    printk("<3>%s %s: BAD! BarrierAck #%u received with n_req=%u, expected n_req=%u!\n",
           tmp___4, tmp___3, barrier_nr, set_size, b->n_req);
#line 299
    goto bail;
  } else {

  }
#line 303
  le = b->requests.next;
#line 303
  tle = le->next;
#line 303
  goto ldv_41493;
  ldv_41492: 
#line 304
  __mptr = (struct list_head  const  *)le;
#line 304
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 305
  _req_mod(r, barrier_acked);
#line 303
  le = tle;
#line 303
  tle = le->next;
  ldv_41493: ;
#line 303
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 304
    goto ldv_41492;
  } else {

  }
#line 320
  list_del_init(& b->requests);
#line 322
  nob = b->next;
#line 323
  tmp___7 = test_and_clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 323
  if (tmp___7 != 0) {
#line 324
    _tl_add_barrier(mdev, b);
#line 325
    if ((unsigned long )nob != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 326
      mdev->oldest_tle = nob;
    } else {

    }
  } else {
#line 330
    if ((unsigned long )nob == (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 330
      tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 330
      tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 330
      printk("<3>%s %s: ASSERT( nob != NULL ) in %s:%d\n", tmp___6, tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             330);
    } else {

    }
#line 331
    mdev->oldest_tle = nob;
#line 332
    kfree((void const   *)b);
  }
#line 335
  _spin_unlock_irq(& mdev->req_lock);
#line 336
  tmp___8 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 336
  if (tmp___8 != 0) {
#line 336
    __wake_up(& mdev->misc_wait, 3U, 1, 0);
  } else {

  }
#line 336
  tmp___12 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 336
  if (tmp___12 < 0) {
#line 336
    tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 336
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 336
    printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___11, tmp___10,
           "tl_release", 336, tmp___9);
  } else {

  }
#line 338
  return;
  bail: 
#line 341
  _spin_unlock_irq(& mdev->req_lock);
#line 342
  val.i = 0U;
#line 342
  val.ldv_32167.conn = 6U;
#line 342
  mask.i = 0U;
#line 342
  mask.ldv_32167.conn = 31U;
#line 342
  drbd_force_state(mdev, mask, val);
#line 344
  return;
}
}
#line 354 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void tl_clear(struct drbd_conf *mdev ) 
{ 
  struct drbd_tl_epoch *b ;
  struct drbd_tl_epoch *tmp ;
  struct list_head *le ;
  struct list_head *tle ;
  struct drbd_request *r ;
  int new_initial_bnr ;
  u32 tmp___0 ;
  struct list_head  const  *__mptr ;
  int tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  struct list_head  const  *__mptr___0 ;

  {
#line 359
  tmp___0 = random32();
#line 359
  new_initial_bnr = (int )tmp___0;
#line 361
  _spin_lock_irq(& mdev->req_lock);
#line 363
  b = mdev->oldest_tle;
#line 364
  goto ldv_41523;
  ldv_41522: 
#line 365
  le = b->requests.next;
#line 365
  tle = le->next;
#line 365
  goto ldv_41515;
  ldv_41514: 
#line 366
  __mptr = (struct list_head  const  *)le;
#line 366
  r = (struct drbd_request *)__mptr + 0xffffffffffffffb8UL;
#line 369
  _req_mod(r, connection_lost_while_pending);
#line 365
  le = tle;
#line 365
  tle = le->next;
  ldv_41515: ;
#line 365
  if ((unsigned long )(& b->requests) != (unsigned long )le) {
#line 366
    goto ldv_41514;
  } else {

  }
#line 371
  tmp = b->next;
#line 375
  list_del(& b->requests);
#line 380
  if ((unsigned long )b->w.cb != (unsigned long )((int (*)(struct drbd_conf * , struct drbd_work * ,
                                                           int  ))0)) {
#line 381
    tmp___1 = atomic_dec_and_test(& mdev->ap_pending_cnt);
#line 381
    if (tmp___1 != 0) {
#line 381
      __wake_up(& mdev->misc_wait, 3U, 1, 0);
    } else {

    }
#line 381
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 381
    if (tmp___5 < 0) {
#line 381
      tmp___2 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 381
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 381
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 381
      printk("<3>%s %s: in %s:%d: ap_pending_cnt = %d < 0 !\n", tmp___4, tmp___3,
             "tl_clear", 381, tmp___2);
    } else {

    }
  } else {

  }
#line 383
  if ((unsigned long )mdev->newest_tle == (unsigned long )b) {
#line 385
    if ((unsigned long )tmp != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 385
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 385
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 385
      printk("<3>%s %s: ASSERT( tmp == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             385);
    } else {

    }
#line 386
    INIT_LIST_HEAD(& b->requests);
#line 387
    INIT_LIST_HEAD(& b->w.list);
#line 388
    b->w.cb = 0;
#line 389
    b->br_number = (unsigned int )new_initial_bnr;
#line 390
    b->n_req = 0;
#line 392
    mdev->oldest_tle = b;
#line 393
    goto ldv_41521;
  } else {

  }
#line 395
  kfree((void const   *)b);
#line 396
  b = tmp;
  ldv_41523: ;
#line 364
  if ((unsigned long )b != (unsigned long )((struct drbd_tl_epoch *)0)) {
#line 365
    goto ldv_41522;
  } else {

  }
  ldv_41521: 
#line 400
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->out_of_sequence_requests));
#line 400
  if (tmp___10 == 0) {
#line 400
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 400
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 400
    printk("<3>%s %s: ASSERT( list_empty(&mdev->out_of_sequence_requests) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           400);
  } else {

  }
#line 403
  le = mdev->out_of_sequence_requests.next;
#line 403
  tle = le->next;
#line 403
  goto ldv_41527;
  ldv_41526: 
#line 404
  __mptr___0 = (struct list_head  const  *)le;
#line 404
  r = (struct drbd_request *)__mptr___0 + 0xffffffffffffffb8UL;
#line 407
  _req_mod(r, connection_lost_while_pending);
#line 403
  le = tle;
#line 403
  tle = le->next;
  ldv_41527: ;
#line 403
  if ((unsigned long )(& mdev->out_of_sequence_requests) != (unsigned long )le) {
#line 404
    goto ldv_41526;
  } else {

  }
#line 411
  clear_bit(0, (unsigned long volatile   *)(& mdev->flags));
#line 413
  _spin_unlock_irq(& mdev->req_lock);
#line 414
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int cl_wide_st_chg(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ) 
{ 


  {
#line 425
  return (((((int )os.ldv_32167.conn > 9 && (int )ns.ldv_32167.conn > 9) && (((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) || ((unsigned int )*((unsigned char *)(& os) + 1UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U))) || ((int )os.ldv_32167.conn > 9 && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U)) || ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U));
}
}
#line 434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_change_state(struct drbd_conf *mdev , enum chg_state_flags f , union drbd_state mask ,
                      union drbd_state val ) 
{ 
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;

  {
#line 441
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 442
  os = mdev->state;
#line 443
  ns.i = (os.i & ~ mask.i) | val.i;
#line 444
  rv = _drbd_set_state(mdev, ns, f, 0);
#line 445
  ns = mdev->state;
#line 446
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 448
  return (rv);
}
}
#line 457 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_force_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 


  {
#line 460
  drbd_change_state(mdev, CS_HARD, mask, val);
#line 461
  return;
}
}
#line 463
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) ;
#line 464
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) ;
#line 466
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) ;
#line 468
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) ;
#line 471 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static enum drbd_state_ret_codes _req_st_cond(struct drbd_conf *mdev , union drbd_state mask ,
                                              union drbd_state val ) 
{ 
  union drbd_state os ;
  union drbd_state ns ;
  unsigned long flags ;
  int rv ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 478
  tmp = test_and_clear_bit(10, (unsigned long volatile   *)(& mdev->flags));
#line 478
  if (tmp != 0) {
#line 479
    return (SS_CW_SUCCESS);
  } else {

  }
#line 481
  tmp___0 = test_and_clear_bit(11, (unsigned long volatile   *)(& mdev->flags));
#line 481
  if (tmp___0 != 0) {
#line 482
    return (SS_CW_FAILED_BY_PEER);
  } else {

  }
#line 484
  rv = 0;
#line 485
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 486
  os = mdev->state;
#line 487
  ns.i = (os.i & ~ mask.i) | val.i;
#line 488
  ns = sanitize_state(mdev, os, ns, 0);
#line 490
  tmp___1 = cl_wide_st_chg(mdev, os, ns);
#line 490
  if (tmp___1 == 0) {
#line 491
    rv = 4;
  } else {

  }
#line 492
  if (rv == 0) {
#line 493
    rv = is_valid_state(mdev, ns);
#line 494
    if (rv == 1) {
#line 495
      rv = is_valid_state_transition(mdev, ns, os);
#line 496
      if (rv == 1) {
#line 497
        rv = 0;
      } else {

      }
    } else {

    }
  } else {

  }
#line 500
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 502
  return ((enum drbd_state_ret_codes )rv);
}
}
#line 515 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_req_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                          enum chg_state_flags f ) 
{ 
  struct completion done ;
  unsigned long flags ;
  union drbd_state os ;
  union drbd_state ns ;
  int rv ;
  int tmp ;
  enum drbd_state_ret_codes tmp___0 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___1 ;
  enum drbd_state_ret_codes tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  struct task_struct *tmp___6 ;

  {
#line 524
  init_completion(& done);
#line 526
  if (((unsigned int )f & 8U) != 0U) {
#line 527
    mutex_lock_nested(& mdev->state_mutex, 0U);
  } else {

  }
#line 529
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 530
  os = mdev->state;
#line 531
  ns.i = (os.i & ~ mask.i) | val.i;
#line 532
  ns = sanitize_state(mdev, os, ns, 0);
#line 534
  tmp___3 = cl_wide_st_chg(mdev, os, ns);
#line 534
  if (tmp___3 != 0) {
#line 535
    rv = is_valid_state(mdev, ns);
#line 536
    if (rv == 1) {
#line 537
      rv = is_valid_state_transition(mdev, ns, os);
    } else {

    }
#line 538
    _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 540
    if (rv <= 0) {
#line 541
      if (((unsigned int )f & 2U) != 0U) {
#line 542
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 543
      goto abort;
    } else {

    }
#line 546
    drbd_state_lock___0(mdev);
#line 547
    tmp = drbd_send_state_req(mdev, mask, val);
#line 547
    if (tmp == 0) {
#line 548
      drbd_state_unlock(mdev);
#line 549
      rv = -10;
#line 550
      if (((unsigned int )f & 2U) != 0U) {
#line 551
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 552
      goto abort;
    } else {

    }
#line 555
    tmp___0 = _req_st_cond(mdev, mask, val);
#line 555
    rv = (int )tmp___0;
#line 555
    if (rv != 0) {
#line 555
      goto ldv_41604;
    } else {

    }
#line 555
    tmp___1 = get_current();
#line 555
    __wait.flags = 0U;
#line 555
    __wait.private = (void *)tmp___1;
#line 555
    __wait.func = & autoremove_wake_function;
#line 555
    __wait.task_list.next = & __wait.task_list;
#line 555
    __wait.task_list.prev = & __wait.task_list;
    ldv_41607: 
#line 555
    prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 555
    tmp___2 = _req_st_cond(mdev, mask, val);
#line 555
    rv = (int )tmp___2;
#line 555
    if (rv != 0) {
#line 555
      goto ldv_41606;
    } else {

    }
#line 555
    schedule();
#line 555
    goto ldv_41607;
    ldv_41606: 
#line 555
    finish_wait(& mdev->state_wait, & __wait);
    ldv_41604: ;
#line 558
    if (rv <= 0) {
#line 559
      drbd_state_unlock(mdev);
#line 560
      if (((unsigned int )f & 2U) != 0U) {
#line 561
        print_st_err(mdev, os, ns, rv);
      } else {

      }
#line 562
      goto abort;
    } else {

    }
#line 564
    flags = _spin_lock_irqsave(& mdev->req_lock);
#line 565
    os = mdev->state;
#line 566
    ns.i = (os.i & ~ mask.i) | val.i;
#line 567
    rv = _drbd_set_state(mdev, ns, f, & done);
#line 568
    drbd_state_unlock(mdev);
  } else {
#line 570
    rv = _drbd_set_state(mdev, ns, f, & done);
  }
#line 573
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 575
  if (((unsigned int )f & 4U) != 0U && rv == 1) {
#line 576
    tmp___6 = get_current();
#line 576
    if ((unsigned long )tmp___6 == (unsigned long )mdev->worker.task) {
#line 576
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 576
      printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___5,
             tmp___4, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             576);
    } else {

    }
#line 577
    wait_for_completion(& done);
  } else {

  }
  abort: ;
#line 581
  if (((unsigned int )f & 8U) != 0U) {
#line 582
    mutex_unlock(& mdev->state_mutex);
  } else {

  }
#line 584
  return (rv);
}
}
#line 597 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_request_state(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ,
                        enum chg_state_flags f ) 
{ 
  int rv ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;

  {
#line 602
  rv = drbd_req_state(mdev, mask, val, f);
#line 602
  if (rv != -18) {
#line 602
    goto ldv_41621;
  } else {

  }
#line 602
  tmp = get_current();
#line 602
  __wait.flags = 0U;
#line 602
  __wait.private = (void *)tmp;
#line 602
  __wait.func = & autoremove_wake_function;
#line 602
  __wait.task_list.next = & __wait.task_list;
#line 602
  __wait.task_list.prev = & __wait.task_list;
  ldv_41624: 
#line 602
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 602
  rv = drbd_req_state(mdev, mask, val, f);
#line 602
  if (rv != -18) {
#line 602
    goto ldv_41623;
  } else {

  }
#line 602
  schedule();
#line 602
  goto ldv_41624;
  ldv_41623: 
#line 602
  finish_wait(& mdev->state_wait, & __wait);
  ldv_41621: ;
#line 605
  return (rv);
}
}
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void print_st(struct drbd_conf *mdev , char *name , union drbd_state ns ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 610
  tmp = drbd_disk_str((enum drbd_disk_state )ns.ldv_32167.pdsk);
#line 610
  tmp___0 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32167.disk);
#line 610
  tmp___1 = drbd_role_str((enum drbd_role )ns.ldv_32167.peer);
#line 610
  tmp___2 = drbd_role_str((enum drbd_role )ns.ldv_32167.role);
#line 610
  tmp___3 = drbd_conn_str((enum drbd_conns )ns.ldv_32167.conn);
#line 610
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 610
  printk("<3>%s %s:  %s = { cs:%s ro:%s/%s ds:%s/%s %c%c%c%c }\n", tmp___5, tmp___4,
         name, tmp___3, tmp___2, tmp___1, tmp___0, tmp, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 115 : 114,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 97 : 45, (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 112 : 45,
         (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? 117 : 45);
#line 611
  return;
}
}
#line 624 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void print_st_err(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                  int err ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 627
  if (err == -18) {
#line 628
    return;
  } else {

  }
#line 629
  tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )err);
#line 629
  tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 629
  tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 629
  printk("<3>%s %s: State change failed: %s\n", tmp___1, tmp___0, tmp);
#line 630
  print_st(mdev, (char *)" state", os);
#line 631
  print_st(mdev, (char *)"wanted", ns);
#line 632
  return;
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state(struct drbd_conf *mdev , union drbd_state ns ) 
{ 
  enum drbd_fencing_p fp ;
  int rv ;
  int tmp ;
  int tmp___0 ;

  {
#line 660
  rv = 1;
#line 662
  fp = FP_DONT_CARE;
#line 663
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 663
  if (tmp != 0) {
#line 664
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 665
    put_ldev(mdev);
  } else {

  }
#line 668
  tmp___0 = get_net_conf(mdev);
#line 668
  if (tmp___0 != 0) {
#line 669
    if (((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 671
      rv = -1;
    } else {

    }
#line 672
    put_net_conf(mdev);
  } else {

  }
#line 675
  if (rv <= 0) {

  } else
#line 677
  if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U && mdev->open_cnt != 0) {
#line 678
    rv = -12;
  } else
#line 680
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32167.conn <= 9) && (int )ns.ldv_32167.disk <= 7) {
#line 681
    rv = -2;
  } else
#line 683
  if ((((unsigned int )fp != 0U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U) && (int )ns.ldv_32167.conn <= 9) && (int )ns.ldv_32167.pdsk > 5) {
#line 685
    rv = -7;
  } else
#line 687
  if (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32167.disk <= 4) && (int )ns.ldv_32167.pdsk <= 4) {
#line 688
    rv = -2;
  } else
#line 690
  if ((int )ns.ldv_32167.conn > 10 && (int )ns.ldv_32167.disk <= 3) {
#line 691
    rv = -4;
  } else
#line 693
  if ((int )ns.ldv_32167.conn > 10 && (int )ns.ldv_32167.pdsk <= 3) {
#line 694
    rv = -5;
  } else
#line 696
  if (((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) {
#line 701
    rv = -6;
  } else
#line 703
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (unsigned int )mdev->sync_conf.verify_alg[0] == 0U) {
#line 705
    rv = -14;
  } else
#line 707
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && mdev->agreed_pro_version <= 87) {
#line 709
    rv = -17;
  } else {

  }
#line 711
  return (rv);
}
}
#line 720 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int is_valid_state_transition(struct drbd_conf *mdev , union drbd_state ns ,
                                     union drbd_state os ) 
{ 
  int rv ;

  {
#line 723
  rv = 1;
#line 725
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U) && (int )os.ldv_32167.conn > 10) {
#line 727
    rv = -8;
  } else {

  }
#line 729
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 0U) {
#line 730
    rv = -9;
  } else {

  }
#line 732
  if ((int )ns.ldv_32167.disk > 1 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 0U) {
#line 733
    rv = -11;
  } else {

  }
#line 735
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 128U && (int )os.ldv_32167.conn <= 1) {
#line 736
    rv = -13;
  } else {

  }
#line 738
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U && (int )os.ldv_32167.disk <= 4) && (unsigned int )*((unsigned char *)(& os) + 1UL) != 2U) {
#line 739
    rv = -16;
  } else {

  }
#line 741
  if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& os) + 0UL) == 32U) {
#line 742
    rv = -18;
  } else {

  }
#line 744
  if ((int )ns.ldv_32167.conn == (int )os.ldv_32167.conn && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 144U) {
#line 745
    rv = -18;
  } else {

  }
#line 747
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )os.ldv_32167.conn <= 9) {
#line 748
    rv = -15;
  } else {

  }
#line 750
  if ((((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U) && (int )ns.ldv_32167.conn != (int )os.ldv_32167.conn) && (int )os.ldv_32167.conn > 10) {
#line 752
    rv = -8;
  } else {

  }
#line 754
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) && (int )os.ldv_32167.conn <= 9) {
#line 756
    rv = -15;
  } else {

  }
#line 758
  return (rv);
}
}
#line 771 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static union drbd_state sanitize_state(struct drbd_conf *mdev , union drbd_state os ,
                                       union drbd_state ns , int *warn_sync_abort ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;

  {
#line 776
  fp = FP_DONT_CARE;
#line 777
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 777
  if (tmp != 0) {
#line 778
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 779
    put_ldev(mdev);
  } else {

  }
#line 783
  if (((int )ns.ldv_32167.conn > 2 && (int )ns.ldv_32167.conn <= 7) && (int )os.ldv_32167.conn <= 1) {
#line 785
    ns.ldv_32167.conn = os.ldv_32167.conn;
  } else {

  }
#line 788
  if ((((int )os.ldv_32167.conn > 2 && (int )os.ldv_32167.conn <= 7) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 32U) && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 16U) {
#line 790
    ns.ldv_32167.conn = os.ldv_32167.conn;
  } else {

  }
#line 793
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) != 0U) {
#line 794
    ns.ldv_32167.conn = os.ldv_32167.conn;
  } else {

  }
#line 796
  if ((int )ns.ldv_32167.conn <= 9) {
#line 797
    ns.ldv_32167.peer_isp = 0U;
#line 798
    ns.ldv_32167.peer = 0U;
#line 799
    if ((int )ns.ldv_32167.pdsk > 6 || (int )ns.ldv_32167.pdsk <= 3) {
#line 800
      ns.ldv_32167.pdsk = 6U;
    } else {

    }
  } else {

  }
#line 804
  if (((unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 805
    ns.ldv_32167.aftr_isp = 0U;
  } else {

  }
#line 807
  if ((int )ns.ldv_32167.conn <= 1 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 808
    ns.ldv_32167.pdsk = 6U;
  } else {

  }
#line 811
  if (((int )os.ldv_32167.conn > 10 && (int )ns.ldv_32167.conn > 10) && ((int )ns.ldv_32167.disk <= 2 || (int )ns.ldv_32167.pdsk <= 2)) {
#line 813
    if ((unsigned long )warn_sync_abort != (unsigned long )((int *)0)) {
#line 814
      *warn_sync_abort = 1;
    } else {

    }
#line 815
    ns.ldv_32167.conn = 10U;
  } else {

  }
#line 818
  if ((int )ns.ldv_32167.conn > 9 && (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U || (unsigned int )*((unsigned char *)(& ns) + 1UL) == 10U) || ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 224U))) {
#line 821
    switch ((int )ns.ldv_32167.conn) {
    case 14: ;
    case 21: 
#line 824
    ns.ldv_32167.disk = 5U;
#line 825
    goto ldv_41657;
    case 10: ;
    case 13: ;
    case 16: ;
    case 20: 
#line 830
    ns.ldv_32167.disk = 8U;
#line 831
    goto ldv_41657;
    case 17: 
#line 833
    ns.ldv_32167.disk = 4U;
#line 834
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 834
    printk("<4>%s %s: Implicitly set disk state Inconsistent!\n", tmp___1, tmp___0);
#line 835
    goto ldv_41657;
    }
    ldv_41657: ;
#line 837
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 10U && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 16U) {
#line 838
      tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
      tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 838
      printk("<4>%s %s: Implicitly set disk from Outdated to UpToDate\n", tmp___3,
             tmp___2);
    } else {

    }
  } else {

  }
#line 841
  if ((int )ns.ldv_32167.conn > 9 && (*((unsigned int *)(& ns) + 0UL) == 57344U || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 843
    switch ((int )ns.ldv_32167.conn) {
    case 10: ;
    case 14: ;
    case 21: ;
    case 17: 
#line 848
    ns.ldv_32167.pdsk = 8U;
#line 849
    goto ldv_41667;
    case 13: ;
    case 20: 
#line 852
    ns.ldv_32167.pdsk = 5U;
#line 853
    goto ldv_41667;
    case 16: 
#line 855
    ns.ldv_32167.pdsk = 4U;
#line 856
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 856
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 856
    printk("<4>%s %s: Implicitly set pdsk Inconsistent!\n", tmp___5, tmp___4);
#line 857
    goto ldv_41667;
    }
    ldv_41667: ;
#line 859
    if (*((unsigned int *)(& os) + 0UL) == 40960U && *((unsigned int *)(& ns) + 0UL) == 65536U) {
#line 860
      tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 860
      printk("<4>%s %s: Implicitly set pdsk from Outdated to UpToDate\n", tmp___7,
             tmp___6);
    } else {

    }
  } else {

  }
#line 864
  if ((int )ns.ldv_32167.conn <= 9 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 864
    tmp___10 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 864
    if (tmp___10 != 0) {
#line 866
      if (mdev->ed_uuid == (mdev->ldev)->md.uuid[0]) {
#line 867
        ns.ldv_32167.disk = mdev->new_state_tmp.ldv_32167.disk;
#line 868
        ns.ldv_32167.pdsk = mdev->new_state_tmp.ldv_32167.pdsk;
      } else {
#line 870
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 870
        printk("<1>%s %s: Connection lost while negotiating, no data!\n", tmp___9,
               tmp___8);
#line 871
        ns.ldv_32167.disk = 0U;
#line 872
        ns.ldv_32167.pdsk = 6U;
      }
#line 874
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 877
  if ((unsigned int )fp == 2U && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32167.conn <= 9) && (int )ns.ldv_32167.pdsk > 5)) {
#line 881
    ns.ldv_32167.susp = 1U;
  } else {

  }
#line 883
  if (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 884
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U) {
#line 885
      ns.ldv_32167.conn = 20U;
    } else {

    }
#line 886
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 887
      ns.ldv_32167.conn = 21U;
    } else {

    }
  } else {
#line 889
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U) {
#line 890
      ns.ldv_32167.conn = 16U;
    } else {

    }
#line 891
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 892
      ns.ldv_32167.conn = 17U;
    } else {

    }
  }
#line 895
  return (ns);
}
}
#line 899 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void set_ov_position(struct drbd_conf *mdev , enum drbd_conns cs ) 
{ 
  unsigned long bit ;

  {
#line 901
  if ((unsigned int )cs == 19U) {
#line 907
    mdev->ov_start_sector = 0xffffffffffffffffUL;
  } else {
#line 909
    bit = mdev->ov_start_sector >> 3;
#line 910
    if (mdev->rs_total <= bit) {
#line 911
      mdev->ov_start_sector = (mdev->rs_total - 1UL) << 3;
    } else {

    }
#line 913
    mdev->ov_position = mdev->ov_start_sector;
  }
#line 915
  return;
}
}
#line 926 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int __drbd_set_state(struct drbd_conf *mdev , union drbd_state ns , enum chg_state_flags flags ,
                     struct completion *done ) 
{ 
  union drbd_state os ;
  int rv ;
  int warn_sync_abort ;
  struct after_state_chg_work *ascw ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  int tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char *pbp ;
  char pb[300U] ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  int tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  int tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  char const   *tmp___29 ;
  char const   *tmp___30 ;
  int tmp___31 ;
  char const   *tmp___32 ;
  char const   *tmp___33 ;
  unsigned long tmp___34 ;
  unsigned long tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  u32 mdf ;
  int tmp___38 ;
  int tmp___39 ;
  void *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;

  {
#line 931
  rv = 1;
#line 932
  warn_sync_abort = 0;
#line 935
  os = mdev->state;
#line 937
  ns = sanitize_state(mdev, os, ns, & warn_sync_abort);
#line 939
  if (ns.i == os.i) {
#line 940
    return (2);
  } else {

  }
#line 942
  if (((unsigned int )flags & 1U) == 0U) {
#line 946
    rv = is_valid_state(mdev, ns);
#line 947
    if (rv <= 0) {
#line 951
      tmp___2 = is_valid_state(mdev, os);
#line 951
      if (tmp___2 == rv) {
#line 952
        tmp = drbd_set_st_err_str((enum drbd_state_ret_codes )rv);
#line 952
        tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
        tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 952
        printk("<3>%s %s: Considering state change from bad state. Error would be: \'%s\'\n",
               tmp___1, tmp___0, tmp);
#line 955
        print_st(mdev, (char *)"old", os);
#line 956
        print_st(mdev, (char *)"new", ns);
#line 957
        rv = is_valid_state_transition(mdev, ns, os);
      } else {
#line 960
        rv = is_valid_state_transition(mdev, ns, os);
      }
    } else {

    }
  } else {

  }
#line 963
  if (rv <= 0) {
#line 964
    if (((unsigned int )flags & 2U) != 0U) {
#line 965
      print_st_err(mdev, os, ns, rv);
    } else {

    }
#line 966
    return (rv);
  } else {

  }
#line 969
  if (warn_sync_abort != 0) {
#line 970
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 970
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 970
    printk("<4>%s %s: Resync aborted.\n", tmp___4, tmp___3);
  } else {

  }
#line 974
  pbp = (char *)(& pb);
#line 975
  *pbp = 0;
#line 976
  if ((int )ns.ldv_32167.role != (int )os.ldv_32167.role) {
#line 976
    tmp___5 = drbd_role_str((enum drbd_role )ns.ldv_32167.role);
#line 976
    tmp___6 = drbd_role_str((enum drbd_role )os.ldv_32167.role);
#line 976
    tmp___7 = sprintf(pbp, "role( %s -> %s ) ", tmp___6, tmp___5);
#line 976
    pbp = pbp + (unsigned long )tmp___7;
  } else {

  }
#line 977
  if ((int )ns.ldv_32167.peer != (int )os.ldv_32167.peer) {
#line 977
    tmp___8 = drbd_role_str((enum drbd_role )ns.ldv_32167.peer);
#line 977
    tmp___9 = drbd_role_str((enum drbd_role )os.ldv_32167.peer);
#line 977
    tmp___10 = sprintf(pbp, "peer( %s -> %s ) ", tmp___9, tmp___8);
#line 977
    pbp = pbp + (unsigned long )tmp___10;
  } else {

  }
#line 978
  if ((int )ns.ldv_32167.conn != (int )os.ldv_32167.conn) {
#line 978
    tmp___11 = drbd_conn_str((enum drbd_conns )ns.ldv_32167.conn);
#line 978
    tmp___12 = drbd_conn_str((enum drbd_conns )os.ldv_32167.conn);
#line 978
    tmp___13 = sprintf(pbp, "conn( %s -> %s ) ", tmp___12, tmp___11);
#line 978
    pbp = pbp + (unsigned long )tmp___13;
  } else {

  }
#line 979
  if ((int )ns.ldv_32167.disk != (int )os.ldv_32167.disk) {
#line 979
    tmp___14 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32167.disk);
#line 979
    tmp___15 = drbd_disk_str((enum drbd_disk_state )os.ldv_32167.disk);
#line 979
    tmp___16 = sprintf(pbp, "disk( %s -> %s ) ", tmp___15, tmp___14);
#line 979
    pbp = pbp + (unsigned long )tmp___16;
  } else {

  }
#line 980
  if ((int )ns.ldv_32167.pdsk != (int )os.ldv_32167.pdsk) {
#line 980
    tmp___17 = drbd_disk_str((enum drbd_disk_state )ns.ldv_32167.pdsk);
#line 980
    tmp___18 = drbd_disk_str((enum drbd_disk_state )os.ldv_32167.pdsk);
#line 980
    tmp___19 = sprintf(pbp, "pdsk( %s -> %s ) ", tmp___18, tmp___17);
#line 980
    pbp = pbp + (unsigned long )tmp___19;
  } else {

  }
#line 981
  if ((int )ns.ldv_32167.susp != (int )os.ldv_32167.susp) {
#line 981
    tmp___20 = sprintf(pbp, "susp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 981
    pbp = pbp + (unsigned long )tmp___20;
  } else {

  }
#line 982
  if ((int )ns.ldv_32167.aftr_isp != (int )os.ldv_32167.aftr_isp) {
#line 982
    tmp___21 = sprintf(pbp, "aftr_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 982
    pbp = pbp + (unsigned long )tmp___21;
  } else {

  }
#line 983
  if ((int )ns.ldv_32167.peer_isp != (int )os.ldv_32167.peer_isp) {
#line 983
    tmp___22 = sprintf(pbp, "peer_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 983
    pbp = pbp + (unsigned long )tmp___22;
  } else {

  }
#line 984
  if ((int )ns.ldv_32167.user_isp != (int )os.ldv_32167.user_isp) {
#line 984
    tmp___23 = sprintf(pbp, "user_isp( %s -> %s ) ", (unsigned int )*((unsigned char *)(& os) + 2UL) != 0U ? (char *)"1" : (char *)"0",
                       (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U ? (char *)"1" : (char *)"0");
#line 984
    pbp = pbp + (unsigned long )tmp___23;
  } else {

  }
#line 985
  tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
  tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 985
  printk("<6>%s %s: %s\n", tmp___25, tmp___24, (char *)(& pb));
#line 996
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 996
    tmp___26 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 996
    if (tmp___26 == 0) {
#line 1000
      set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1002
  mdev->state.i = ns.i;
#line 1003
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 1004
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 1007
  if ((int )os.ldv_32167.conn > 15 && (int )ns.ldv_32167.conn <= 10) {
#line 1008
    set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
#line 1009
    mod_timer(& mdev->resync_timer, jiffies);
  } else {

  }
#line 1013
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 304U) && (int )ns.ldv_32167.conn <= 9) {
#line 1015
    mdev->ov_start_sector = (mdev->rs_total - mdev->ov_left) << 3;
#line 1017
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1017
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1017
    printk("<6>%s %s: Online Verify reached sector %llu\n", tmp___28, tmp___27, (unsigned long long )mdev->ov_start_sector);
  } else {

  }
#line 1021
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 320U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 256U)) {
#line 1023
    tmp___29 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    tmp___30 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1023
    printk("<6>%s %s: Syncer continues.\n", tmp___30, tmp___29);
#line 1024
    mdev->rs_paused = mdev->rs_paused + (unsigned long )((long )jiffies - (long )mdev->rs_mark_time);
#line 1025
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 272U) {
#line 1026
      tmp___31 = test_and_clear_bit(3, (unsigned long volatile   *)(& mdev->flags));
#line 1026
      if (tmp___31 == 0) {
#line 1027
        mod_timer(& mdev->resync_timer, jiffies);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1035
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) == 272U || (unsigned int )*((unsigned short *)(& os) + 0UL) == 256U) && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 320U)) {
#line 1037
    tmp___32 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1037
    tmp___33 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1037
    printk("<6>%s %s: Resync suspended\n", tmp___33, tmp___32);
#line 1038
    mdev->rs_mark_time = jiffies;
#line 1039
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 336U) {
#line 1040
      set_bit(3U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
  } else {

  }
#line 1043
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 160U && ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U || (unsigned int )*((unsigned short *)(& ns) + 0UL) == 304U)) {
#line 1045
    mdev->ov_position = 0UL;
#line 1046
    tmp___34 = drbd_bm_bits(mdev);
#line 1046
    mdev->rs_mark_left = tmp___34;
#line 1046
    mdev->rs_total = tmp___34;
#line 1048
    if (mdev->agreed_pro_version > 89) {
#line 1049
      set_ov_position(mdev, (enum drbd_conns )ns.ldv_32167.conn);
    } else {
#line 1051
      mdev->ov_start_sector = 0UL;
    }
#line 1052
    mdev->ov_left = mdev->rs_total - (mdev->ov_position >> 3);
#line 1054
    tmp___35 = jiffies;
#line 1054
    mdev->rs_mark_time = tmp___35;
#line 1054
    mdev->rs_start = tmp___35;
#line 1056
    mdev->ov_last_oos_size = 0UL;
#line 1057
    mdev->ov_last_oos_start = 0UL;
#line 1059
    if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 288U) {
#line 1060
      tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1060
      tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1060
      printk("<6>%s %s: Starting Online Verify from sector %llu\n", tmp___37, tmp___36,
             (unsigned long long )mdev->ov_position);
#line 1062
      mod_timer(& mdev->resync_timer, jiffies);
    } else {

    }
  } else {

  }
#line 1066
  tmp___39 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1066
  if (tmp___39 != 0) {
#line 1067
    mdf = (mdev->ldev)->md.flags & 4294967176U;
#line 1071
    tmp___38 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1071
    if (tmp___38 != 0) {
#line 1072
      mdf = mdf | 64U;
    } else {

    }
#line 1073
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U || ((int )mdev->state.ldv_32167.pdsk <= 3 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 4U)) {
#line 1075
      mdf = mdf | 2U;
    } else {

    }
#line 1076
    if ((int )mdev->state.ldv_32167.conn > 9) {
#line 1077
      mdf = mdf | 4U;
    } else {

    }
#line 1078
    if ((int )mdev->state.ldv_32167.disk > 4) {
#line 1079
      mdf = mdf | 1U;
    } else {

    }
#line 1080
    if ((int )mdev->state.ldv_32167.disk > 5) {
#line 1081
      mdf = mdf | 16U;
    } else {

    }
#line 1082
    if ((int )mdev->state.ldv_32167.pdsk <= 5 && (int )mdev->state.ldv_32167.pdsk > 3) {
#line 1083
      mdf = mdf | 32U;
    } else {

    }
#line 1084
    if ((mdev->ldev)->md.flags != mdf) {
#line 1085
      (mdev->ldev)->md.flags = mdf;
#line 1086
      drbd_md_mark_dirty(mdev);
    } else {

    }
#line 1088
    if ((int )os.ldv_32167.disk <= 6 && (int )ns.ldv_32167.disk > 6) {
#line 1089
      drbd_set_ed_uuid(mdev, (mdev->ldev)->md.uuid[0]);
    } else {

    }
#line 1090
    put_ldev(mdev);
  } else {

  }
#line 1094
  if ((((unsigned int )*((unsigned char *)(& os) + 1UL) == 8U && *((unsigned int *)(& os) + 0UL) == 32768U) && (unsigned int )*((unsigned char *)(& os) + 0UL) == 8U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) {
#line 1096
    set_bit(15U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1099
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 16U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 16U) {
#line 1100
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1103
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) {
#line 1104
    drbd_thread_stop_nowait(& mdev->receiver);
  } else {

  }
#line 1107
  if (((int )os.ldv_32167.conn > 7 && (int )ns.ldv_32167.conn <= 7) && (int )ns.ldv_32167.conn > 2) {
#line 1109
    drbd_thread_restart_nowait(& mdev->receiver);
  } else {

  }
#line 1111
  tmp___40 = kmalloc(48UL, 32U);
#line 1111
  ascw = (struct after_state_chg_work *)tmp___40;
#line 1112
  if ((unsigned long )ascw != (unsigned long )((struct after_state_chg_work *)0)) {
#line 1113
    ascw->os = os;
#line 1114
    ascw->ns = ns;
#line 1115
    ascw->flags = flags;
#line 1116
    ascw->w.cb = & w_after_state_ch;
#line 1117
    ascw->done = done;
#line 1118
    drbd_queue_work(& mdev->data.work, & ascw->w);
  } else {
#line 1120
    tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1120
    tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1120
    printk("<4>%s %s: Could not kmalloc an ascw\n", tmp___42, tmp___41);
  }
#line 1123
  return (rv);
}
}
#line 1126 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_after_state_ch(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct after_state_chg_work *ascw ;
  struct drbd_work  const  *__mptr ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 1129
  __mptr = (struct drbd_work  const  *)w;
#line 1129
  ascw = (struct after_state_chg_work *)__mptr;
#line 1130
  after_state_ch(mdev, ascw->os, ascw->ns, ascw->flags);
#line 1131
  if (((unsigned int )ascw->flags & 4U) != 0U) {
#line 1132
    if ((unsigned long )ascw->done == (unsigned long )((struct completion *)0)) {
#line 1132
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1132
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1132
      printk("<3>%s %s: ASSERT( ascw->done != NULL ) in %s:%d\n", tmp___0, tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1132);
    } else {

    }
#line 1133
    complete(ascw->done);
  } else {

  }
#line 1135
  kfree((void const   *)ascw);
#line 1137
  return (1);
}
}
#line 1140 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void abw_start_sync(struct drbd_conf *mdev , int rv ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 1142
  if (rv != 0) {
#line 1143
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1143
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1143
    printk("<3>%s %s: Writing the bitmap failed not starting resync.\n", tmp___0,
           tmp);
#line 1144
    val.i = 0U;
#line 1144
    val.ldv_32167.conn = 10U;
#line 1144
    mask.i = 0U;
#line 1144
    mask.ldv_32167.conn = 31U;
#line 1144
    _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1145
    return;
  } else {

  }
#line 1148
  switch ((int )mdev->state.ldv_32167.conn) {
  case 12: 
#line 1150
  val___0.i = 0U;
#line 1150
  val___0.ldv_32167.conn = 15U;
#line 1150
  mask___0.i = 0U;
#line 1150
  mask___0.ldv_32167.conn = 31U;
#line 1150
  _drbd_request_state(mdev, mask___0, val___0, CS_VERBOSE);
#line 1151
  goto ldv_41710;
  case 11: 
#line 1153
  drbd_start_resync(mdev, C_SYNC_SOURCE);
#line 1154
  goto ldv_41710;
  }
  ldv_41710: ;
#line 1157
  return;
}
}
#line 1165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void after_state_ch(struct drbd_conf *mdev , union drbd_state os , union drbd_state ns ,
                           enum chg_state_flags flags ) 
{ 
  enum drbd_fencing_p fp ;
  int tmp ;
  union drbd_state __ns ;
  int tmp___0 ;
  int tmp___1 ;
  enum drbd_io_error_p eh ;
  int tmp___2 ;
  int tmp___3 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___4 ;
  int tmp___5 ;
  union drbd_state __ns___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;

  {
#line 1170
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 160U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1171
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
#line 1172
    if ((unsigned long )mdev->p_uuid != (unsigned long )((u64 *)0)) {
#line 1173
      *(mdev->p_uuid + 5UL) = *(mdev->p_uuid + 5UL) & 0xfffffffffffffffdULL;
    } else {

    }
  } else {

  }
#line 1176
  fp = FP_DONT_CARE;
#line 1177
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1177
  if (tmp != 0) {
#line 1178
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 1179
    put_ldev(mdev);
  } else {

  }
#line 1183
  drbd_bcast_state(mdev, ns);
#line 1185
  if ((((unsigned int )*((unsigned char *)(& os) + 0UL) != 1U || (int )os.ldv_32167.disk > 7) || (int )os.ldv_32167.pdsk > 7) && (((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U && (int )ns.ldv_32167.disk <= 7) && (int )ns.ldv_32167.pdsk <= 7)) {
#line 1187
    drbd_khelper(mdev, (char *)"pri-on-incon-degr");
  } else {

  }
#line 1192
  if ((unsigned int )fp == 2U && (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) {
#line 1195
    if (((int )os.ldv_32167.pdsk > 5 && (int )ns.ldv_32167.pdsk <= 5) || ((int )os.ldv_32167.conn <= 9 && (int )ns.ldv_32167.conn > 9)) {
#line 1197
      tl_clear(mdev);
#line 1198
      _spin_lock_irq(& mdev->req_lock);
#line 1199
      __ns.i = mdev->state.i;
#line 1199
      __ns.ldv_32167.susp = 0U;
#line 1199
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1200
      _spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1204
  if (*((unsigned int *)(& os) + 0UL) == 0U && (int )ns.ldv_32167.pdsk > 0) {
#line 1205
    drbd_send_uuids(mdev);
#line 1206
    drbd_send_state(mdev);
  } else {

  }
#line 1208
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) != 208U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 208U) {
#line 1209
    drbd_queue_bitmap_io(mdev, & drbd_send_bitmap, 0, (char *)"send_bitmap (WFBitMapS)");
  } else {

  }
#line 1212
  if ((((int )os.ldv_32167.pdsk > 3 && *((unsigned int *)(& os) + 0UL) != 49152U) && *((unsigned int *)(& os) + 0UL) != 40960U) && (((int )ns.ldv_32167.pdsk <= 3 || *((unsigned int *)(& ns) + 0UL) == 49152U) || *((unsigned int *)(& ns) + 0UL) == 40960U)) {
#line 1218
    kfree((void const   *)mdev->p_uuid);
#line 1219
    mdev->p_uuid = 0;
#line 1220
    tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1220
    if (tmp___0 != 0) {
#line 1221
      if ((((unsigned int )*((unsigned char *)(& ns) + 0UL) == 1U || (unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U) && (mdev->ldev)->md.uuid[1] == 0ULL) && (int )ns.ldv_32167.disk > 7) {
#line 1223
        drbd_uuid_new_current(mdev);
#line 1224
        drbd_send_uuids(mdev);
      } else {

      }
#line 1226
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1230
  if ((int )ns.ldv_32167.pdsk <= 3) {
#line 1230
    tmp___1 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1230
    if (tmp___1 != 0) {
#line 1231
      if ((unsigned int )*((unsigned char *)(& ns) + 0UL) == 4U && (mdev->ldev)->md.uuid[1] == 0ULL) {
#line 1232
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 1235
      if ((unsigned int )*((unsigned char *)(& os) + 0UL) == 4U && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 8U) {
#line 1236
        drbd_al_to_on_disk_bm(mdev);
      } else {

      }
#line 1237
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1241
  if (((int )ns.ldv_32167.conn > 9 && (unsigned int )*((unsigned char *)(& os) + 1UL) == 2U) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 6U) {
#line 1243
    kfree((void const   *)mdev->p_uuid);
#line 1244
    mdev->p_uuid = 0;
#line 1245
    drbd_send_sizes(mdev, 0);
#line 1246
    drbd_send_uuids(mdev);
#line 1247
    drbd_send_state(mdev);
  } else {

  }
#line 1251
  if ((int )ns.ldv_32167.conn > 9 && ((int )os.ldv_32167.aftr_isp != (int )ns.ldv_32167.aftr_isp || (int )os.ldv_32167.user_isp != (int )ns.ldv_32167.user_isp)) {
#line 1254
    drbd_send_state(mdev);
  } else {

  }
#line 1257
  if ((((unsigned int )*((unsigned char *)(& os) + 2UL) == 0U && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (unsigned int )*((unsigned char *)(& os) + 2UL) == 0U) && (((unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U) || (unsigned int )*((unsigned char *)(& ns) + 2UL) != 0U)) {
#line 1259
    suspend_other_sg(mdev);
  } else {

  }
#line 1263
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 144U && (int )ns.ldv_32167.conn > 9) {
#line 1264
    drbd_send_state(mdev);
  } else {

  }
#line 1267
  if (((unsigned int )*((unsigned short *)(& os) + 0UL) != 192U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 192U) || ((unsigned int )*((unsigned short *)(& os) + 0UL) != 176U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 176U)) {
#line 1269
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, & abw_start_sync, (char *)"set_n_write from StartingSync");
  } else {

  }
#line 1272
  if ((((int )os.ldv_32167.conn <= 9 && (int )ns.ldv_32167.conn <= 9) && (int )os.ldv_32167.disk > 4) && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 8U) {
#line 1274
    drbd_queue_bitmap_io(mdev, & drbd_bmio_set_n_write, 0, (char *)"set_n_write from invalidate");
  } else {

  }
#line 1276
  if ((int )os.ldv_32167.disk > 2 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 4U) {
#line 1279
    eh = EP_PASS_ON;
#line 1280
    tmp___2 = _get_ldev_if_state(mdev, D_FAILED);
#line 1280
    if (tmp___2 != 0) {
#line 1281
      eh = (enum drbd_io_error_p )(mdev->ldev)->dc.on_io_error;
#line 1282
      put_ldev(mdev);
    } else {

    }
#line 1285
    drbd_rs_cancel_all(mdev);
#line 1289
    tmp___3 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1289
    if (tmp___3 == 0) {
#line 1289
      goto ldv_41722;
    } else {

    }
#line 1289
    tmp___4 = get_current();
#line 1289
    __wait.flags = 0U;
#line 1289
    __wait.private = (void *)tmp___4;
#line 1289
    __wait.func = & autoremove_wake_function;
#line 1289
    __wait.task_list.next = & __wait.task_list;
#line 1289
    __wait.task_list.prev = & __wait.task_list;
    ldv_41725: 
#line 1289
    prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 1289
    tmp___5 = atomic_read((atomic_t const   *)(& mdev->local_cnt));
#line 1289
    if (tmp___5 == 0) {
#line 1289
      goto ldv_41724;
    } else {

    }
#line 1289
    schedule();
#line 1289
    goto ldv_41725;
    ldv_41724: 
#line 1289
    finish_wait(& mdev->misc_wait, & __wait);
    ldv_41722: 
#line 1290
    mdev->rs_total = 0UL;
#line 1291
    mdev->rs_failed = 0UL;
#line 1292
    atomic_set(& mdev->rs_pending_cnt, 0);
#line 1294
    _spin_lock_irq(& mdev->req_lock);
#line 1295
    __ns___0.i = mdev->state.i;
#line 1295
    __ns___0.ldv_32167.disk = 0U;
#line 1295
    _drbd_set_state(mdev, __ns___0, CS_HARD, 0);
#line 1296
    _spin_unlock_irq(& mdev->req_lock);
#line 1298
    if ((unsigned int )eh == 1U) {
#line 1299
      drbd_khelper(mdev, (char *)"local-io-error");
    } else {

    }
  } else {

  }
#line 1302
  if ((int )os.ldv_32167.disk > 0 && (unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U) {
#line 1304
    if ((unsigned int )*((unsigned char *)(& os) + 1UL) == 4U) {
#line 1305
      tmp___10 = drbd_send_state(mdev);
#line 1305
      if (tmp___10 != 0) {
#line 1306
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1306
        printk("<4>%s %s: Notified peer that my disk is broken.\n", tmp___7, tmp___6);
      } else {
#line 1308
        tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1308
        tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1308
        printk("<3>%s %s: Sending state in drbd_io_error() failed\n", tmp___9, tmp___8);
      }
    } else {

    }
#line 1311
    lc_destroy(mdev->resync);
#line 1312
    mdev->resync = 0;
#line 1313
    lc_destroy(mdev->act_log);
#line 1314
    mdev->act_log = 0;
#line 1315
    drbd_free_bc(mdev->ldev);
#line 1315
    mdev->ldev = 0;
#line 1319
    if ((unsigned long )mdev->md_io_tmpp != (unsigned long )((struct page *)0)) {
#line 1320
      __free_pages(mdev->md_io_tmpp, 0U);
    } else {

    }
  } else {

  }
#line 1324
  if ((int )ns.ldv_32167.disk > 3 && (int )ns.ldv_32167.pdsk > 3) {
#line 1324
    tmp___11 = test_and_clear_bit(20, (unsigned long volatile   *)(& mdev->flags));
#line 1324
    if (tmp___11 != 0) {
#line 1326
      if ((unsigned int )*((unsigned short *)(& ns) + 0UL) == 160U) {
#line 1327
        resync_after_online_grow(mdev);
      } else {

      }
    } else {

    }
  } else {

  }
#line 1331
  if ((((int )os.ldv_32167.conn > 10 && (int )ns.ldv_32167.conn <= 10) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) || ((unsigned int )*((unsigned char *)(& os) + 2UL) != 0U && (unsigned int )*((unsigned char *)(& ns) + 2UL) == 0U)) {
#line 1334
    resume_next_sg(mdev);
  } else {

  }
#line 1337
  if ((unsigned int )*((unsigned short *)(& os) + 0UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 32U) {
#line 1338
    drbd_thread_start(& mdev->receiver);
  } else {

  }
#line 1342
  if (((unsigned int )*((unsigned char *)(& ns) + 1UL) == 0U && (unsigned int )*((unsigned short *)(& ns) + 0UL) == 0U) && (unsigned int )*((unsigned char *)(& ns) + 0UL) == 2U) {
#line 1345
    if ((int )os.ldv_32167.aftr_isp != (int )ns.ldv_32167.aftr_isp) {
#line 1346
      resume_next_sg(mdev);
    } else {

    }
#line 1348
    tmp___12 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 1348
    if (tmp___12 != 0) {
#line 1349
      drbd_thread_stop_nowait(& mdev->worker);
    } else {

    }
  } else {

  }
#line 1352
  drbd_md_sync(mdev);
#line 1353
  return;
}
}
#line 1356 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_thread_setup(void *arg ) 
{ 
  struct drbd_thread *thi ;
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int retval ;
  struct task_struct *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 1358
  thi = (struct drbd_thread *)arg;
#line 1359
  mdev = thi->mdev;
  restart: 
#line 1364
  retval = (*(thi->function))(thi);
#line 1366
  flags = _spin_lock_irqsave(& thi->t_lock);
#line 1378
  if ((unsigned int )thi->t_state == 3U) {
#line 1379
    tmp = get_current();
#line 1379
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1379
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1379
    printk("<6>%s %s: Restarting %s\n", tmp___1, tmp___0, (char *)(& tmp->comm));
#line 1380
    thi->t_state = Running;
#line 1381
    _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1382
    goto restart;
  } else {

  }
#line 1385
  thi->task = 0;
#line 1386
  thi->t_state = None;
#line 1387
  __asm__  volatile   ("mfence": : : "memory");
#line 1388
  complete(& thi->stop);
#line 1389
  _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1391
  tmp___2 = get_current();
#line 1391
  tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
  tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1391
  printk("<6>%s %s: Terminating %s\n", tmp___4, tmp___3, (char *)(& tmp___2->comm));
#line 1394
  ldv_module_put_1(& __this_module);
#line 1395
  return (retval);
}
}
#line 1398 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_thread_init(struct drbd_conf *mdev , struct drbd_thread *thi , int (*func)(struct drbd_thread * ) ) 
{ 
  struct lock_class_key __key ;

  {
#line 1401
  __spin_lock_init(& thi->t_lock, "&thi->t_lock", & __key);
#line 1402
  thi->task = 0;
#line 1403
  thi->t_state = None;
#line 1404
  thi->function = func;
#line 1405
  thi->mdev = mdev;
#line 1406
  return;
}
}
#line 1408 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_thread_start(struct drbd_thread *thi ) 
{ 
  struct drbd_conf *mdev ;
  struct task_struct *nt ;
  unsigned long flags ;
  char const   *me ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct task_struct *tmp___8 ;
  unsigned int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  long tmp___12 ;
  struct task_struct *tmp___13 ;
  struct task_struct *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;

  {
#line 1410
  mdev = thi->mdev;
#line 1414
  me = (unsigned long )(& mdev->receiver) != (unsigned long )thi ? ((unsigned long )(& mdev->asender) != (unsigned long )thi ? ((unsigned long )(& mdev->worker) == (unsigned long )thi ? "worker" : "NONSENSE") : "asender") : "receiver";
#line 1421
  flags = _spin_lock_irqsave(& thi->t_lock);
#line 1423
  switch ((unsigned int )thi->t_state) {
  case 0U: 
#line 1425
  tmp = get_current();
#line 1425
  tmp___0 = get_current();
#line 1425
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1425
  printk("<6>%s %s: Starting %s thread (from %s [%d])\n", tmp___2, tmp___1, me, (char *)(& tmp___0->comm),
         tmp->pid);
#line 1429
  tmp___5 = ldv_try_module_get_2(& __this_module);
#line 1429
  if (tmp___5 == 0) {
#line 1430
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1430
    printk("<3>%s %s: Failed to get module reference in drbd_thread_start\n", tmp___4,
           tmp___3);
#line 1431
    _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1432
    return (0);
  } else {

  }
#line 1435
  init_completion(& thi->stop);
#line 1436
  if ((unsigned long )thi->task != (unsigned long )((struct task_struct *)0)) {
#line 1436
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1436
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1436
    printk("<3>%s %s: ASSERT( thi->task == NULL ) in %s:%d\n", tmp___7, tmp___6, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1436);
  } else {

  }
#line 1437
  thi->reset_cpu_mask = 1;
#line 1438
  thi->t_state = Running;
#line 1439
  _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1440
  tmp___8 = get_current();
#line 1440
  flush_signals(tmp___8);
#line 1442
  tmp___9 = mdev_to_minor(mdev);
#line 1442
  nt = kthread_create(& drbd_thread_setup, (void *)thi, "drbd%d_%s", tmp___9, me);
#line 1445
  tmp___12 = IS_ERR((void const   *)nt);
#line 1445
  if (tmp___12 != 0L) {
#line 1446
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1446
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1446
    printk("<3>%s %s: Couldn\'t start thread\n", tmp___11, tmp___10);
#line 1448
    ldv_module_put_3(& __this_module);
#line 1449
    return (0);
  } else {

  }
#line 1451
  flags = _spin_lock_irqsave(& thi->t_lock);
#line 1452
  thi->task = nt;
#line 1453
  thi->t_state = Running;
#line 1454
  _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1455
  wake_up_process(nt);
#line 1456
  goto ldv_41775;
  case 2U: 
#line 1458
  thi->t_state = Restarting;
#line 1459
  tmp___13 = get_current();
#line 1459
  tmp___14 = get_current();
#line 1459
  tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1459
  tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1459
  printk("<6>%s %s: Restarting %s thread (from %s [%d])\n", tmp___16, tmp___15, me,
         (char *)(& tmp___14->comm), tmp___13->pid);
  case 1U: ;
  case 3U: ;
  default: 
#line 1465
  _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1466
  goto ldv_41775;
  }
  ldv_41775: ;
#line 1469
  return (1);
}
}
#line 1473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_thread_stop(struct drbd_thread *thi , int restart , int wait ) 
{ 
  unsigned long flags ;
  enum drbd_thread_state ns ;
  struct task_struct *tmp ;

  {
#line 1477
  ns = restart != 0 ? Restarting : Exiting;
#line 1480
  flags = _spin_lock_irqsave(& thi->t_lock);
#line 1482
  if ((unsigned int )thi->t_state == 0U) {
#line 1483
    _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1484
    if (restart != 0) {
#line 1485
      drbd_thread_start(thi);
    } else {

    }
#line 1486
    return;
  } else {

  }
#line 1489
  if ((unsigned int )thi->t_state != (unsigned int )ns) {
#line 1490
    if ((unsigned long )thi->task == (unsigned long )((struct task_struct *)0)) {
#line 1491
      _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1492
      return;
    } else {

    }
#line 1495
    thi->t_state = ns;
#line 1496
    __asm__  volatile   ("mfence": : : "memory");
#line 1497
    init_completion(& thi->stop);
#line 1498
    tmp = get_current();
#line 1498
    if ((unsigned long )thi->task != (unsigned long )tmp) {
#line 1499
      force_sig(1, thi->task);
    } else {

    }
  } else {

  }
#line 1503
  _spin_unlock_irqrestore(& thi->t_lock, flags);
#line 1505
  if (wait != 0) {
#line 1506
    wait_for_completion(& thi->stop);
  } else {

  }
#line 1507
  return;
}
}
#line 1517 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_calc_cpu_mask(struct drbd_conf *mdev ) 
{ 
  int ord ;
  int cpu ;
  unsigned int tmp ;
  unsigned int tmp___0 ;
  unsigned int tmp___1 ;
  int tmp___2 ;
  unsigned int tmp___3 ;

  {
#line 1522
  tmp = cpumask_weight((struct cpumask  const  *)mdev->cpu_mask);
#line 1522
  if (tmp != 0U) {
#line 1523
    return;
  } else {

  }
#line 1525
  tmp___0 = mdev_to_minor(mdev);
#line 1525
  tmp___1 = cpumask_weight(cpu_online_mask);
#line 1525
  ord = (int )(tmp___0 % tmp___1);
#line 1526
  cpu = -1;
#line 1526
  goto ldv_41808;
  ldv_41807: 
#line 1527
  tmp___2 = ord;
#line 1527
  ord = ord - 1;
#line 1527
  if (tmp___2 == 0) {
#line 1528
    cpumask_set_cpu((unsigned int )cpu, mdev->cpu_mask);
#line 1529
    return;
  } else {

  }
  ldv_41808: 
#line 1526
  tmp___3 = cpumask_next(cpu, cpu_online_mask);
#line 1526
  cpu = (int )tmp___3;
#line 1526
  if (cpu < nr_cpu_ids) {
#line 1527
    goto ldv_41807;
  } else {

  }
#line 1533
  cpumask_setall(mdev->cpu_mask);
#line 1534
  return;
}
}
#line 1543 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_thread_current_set_cpu(struct drbd_conf *mdev ) 
{ 
  struct task_struct *p ;
  struct task_struct *tmp ;
  struct drbd_thread *thi ;
  int _b ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;

  {
#line 1545
  tmp = get_current();
#line 1545
  p = tmp;
#line 1546
  thi = (unsigned long )mdev->asender.task == (unsigned long )p ? & mdev->asender : ((unsigned long )mdev->receiver.task == (unsigned long )p ? & mdev->receiver : ((unsigned long )mdev->worker.task == (unsigned long )p ? & mdev->worker : 0));
#line 1551
  _b = (unsigned long )thi == (unsigned long )((struct drbd_thread *)0);
#line 1551
  if (_b != 0) {
#line 1551
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1551
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1551
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___1, tmp___0, "drbd_thread_current_set_cpu",
           (char *)"thi == NULL", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1551);
  } else {

  }
#line 1551
  if (_b != 0) {
#line 1552
    return;
  } else {

  }
#line 1553
  if (thi->reset_cpu_mask == 0) {
#line 1554
    return;
  } else {

  }
#line 1555
  thi->reset_cpu_mask = 0;
#line 1556
  set_cpus_allowed_ptr(p, (struct cpumask  const  *)mdev->cpu_mask);
#line 1557
  return;
}
}
#line 1561 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_cmd(struct drbd_conf *mdev , struct socket *sock , enum drbd_packets cmd ,
                   struct p_header *h , size_t size , unsigned int msg_flags ) 
{ 
  int sent ;
  int ok ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int _b___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  __u16 tmp___3 ;
  __u16 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 1567
  _b = (unsigned long )h == (unsigned long )((struct p_header *)0);
#line 1567
  if (_b != 0) {
#line 1567
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1567
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_cmd", (char *)"!h",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1567);
  } else {

  }
#line 1567
  if (_b != 0) {
#line 1567
    return (0);
  } else {

  }
#line 1568
  _b___0 = size == 0UL;
#line 1568
  if (_b___0 != 0) {
#line 1568
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1568
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1568
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___2, tmp___1, "_drbd_send_cmd", (char *)"!size",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1568);
  } else {

  }
#line 1568
  if (_b___0 != 0) {
#line 1568
    return (0);
  } else {

  }
#line 1570
  h->magic = 1728214147U;
#line 1571
  tmp___3 = __fswab16((int )((__u16 )cmd));
#line 1571
  h->command = tmp___3;
#line 1572
  tmp___4 = __fswab16((int )((unsigned int )((__u16 )size) - 8U));
#line 1572
  h->length = tmp___4;
#line 1574
  sent = drbd_send(mdev, sock, (void *)h, size, msg_flags);
#line 1576
  ok = (size_t )sent == size;
#line 1577
  if (ok == 0) {
#line 1578
    tmp___5 = cmdname(cmd);
#line 1578
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1578
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1578
    printk("<3>%s %s: short sent %s size=%d sent=%d\n", tmp___7, tmp___6, tmp___5,
           (int )size, sent);
  } else {

  }
#line 1580
  return (ok);
}
}
#line 1586 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd(struct drbd_conf *mdev , int use_data_socket , enum drbd_packets cmd ,
                  struct p_header *h , size_t size ) 
{ 
  int ok ;
  struct socket *sock ;
  long tmp ;

  {
#line 1589
  ok = 0;
#line 1592
  if (use_data_socket != 0) {
#line 1593
    mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1594
    sock = mdev->data.socket;
  } else {
#line 1596
    mutex_lock_nested(& mdev->meta.mutex, 0U);
#line 1597
    sock = mdev->meta.socket;
  }
#line 1602
  tmp = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                         1L);
#line 1602
  if (tmp != 0L) {
#line 1603
    ok = _drbd_send_cmd(mdev, sock, cmd, h, size, 0U);
  } else {

  }
#line 1605
  if (use_data_socket != 0) {
#line 1606
    mutex_unlock(& mdev->data.mutex);
  } else {
#line 1608
    mutex_unlock(& mdev->meta.mutex);
  }
#line 1609
  return (ok);
}
}
#line 1612 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_cmd2(struct drbd_conf *mdev , enum drbd_packets cmd , char *data , size_t size ) 
{ 
  struct p_header h ;
  int ok ;
  __u16 tmp ;
  __u16 tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 1618
  h.magic = 1728214147U;
#line 1619
  tmp = __fswab16((int )((__u16 )cmd));
#line 1619
  h.command = tmp;
#line 1620
  tmp___0 = __fswab16((int )((__u16 )size));
#line 1620
  h.length = tmp___0;
#line 1622
  tmp___1 = drbd_get_data_sock(mdev);
#line 1622
  if (tmp___1 == 0) {
#line 1623
    return (0);
  } else {

  }
#line 1625
  tmp___2 = drbd_send(mdev, mdev->data.socket, (void *)(& h), 8UL, 0U);
#line 1625
  ok = tmp___2 == 8;
#line 1627
  if (ok != 0) {
#line 1627
    tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)data, size, 0U);
#line 1627
    if ((size_t )tmp___3 == size) {
#line 1627
      tmp___4 = 1;
    } else {
#line 1627
      tmp___4 = 0;
    }
  } else {
#line 1627
    tmp___4 = 0;
  }
#line 1627
  ok = tmp___4;
#line 1630
  drbd_put_data_sock(mdev);
#line 1632
  return (ok);
}
}
#line 1635 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_param(struct drbd_conf *mdev , struct syncer_conf *sc ) 
{ 
  struct p_rs_param_89 *p ;
  struct socket *sock ;
  int size ;
  int rv ;
  int apv ;
  size_t tmp ;
  int tmp___0 ;
  enum drbd_packets cmd ;
  __u32 tmp___1 ;
  long tmp___2 ;

  {
#line 1640
  apv = mdev->agreed_pro_version;
#line 1642
  if (apv > 87) {
#line 1642
    if (apv == 88) {
#line 1642
      tmp = strlen((char const   *)(& mdev->sync_conf.verify_alg));
#line 1642
      tmp___0 = (int )((unsigned int )tmp + 13U);
    } else {
#line 1642
      tmp___0 = 140;
    }
#line 1642
    size = tmp___0;
  } else {
#line 1642
    size = 12;
  }
#line 1650
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1651
  sock = mdev->data.socket;
#line 1653
  tmp___2 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1653
  if (tmp___2 != 0L) {
#line 1654
    cmd = apv > 88 ? P_SYNC_PARAM89 : P_SYNC_PARAM;
#line 1656
    p = & mdev->data.sbuf.rs_param_89;
#line 1659
    memset((void *)(& p->verify_alg), 0, 128UL);
#line 1661
    tmp___1 = __fswab32((__u32 )sc->rate);
#line 1661
    p->rate = tmp___1;
#line 1663
    if (apv > 87) {
#line 1664
      strcpy((char *)(& p->verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
    } else {

    }
#line 1665
    if (apv > 88) {
#line 1666
      strcpy((char *)(& p->csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
    } else {

    }
#line 1668
    rv = _drbd_send_cmd(mdev, sock, cmd, & p->head, (size_t )size, 0U);
  } else {
#line 1670
    rv = 0;
  }
#line 1672
  mutex_unlock(& mdev->data.mutex);
#line 1674
  return (rv);
}
}
#line 1677 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_protocol(struct drbd_conf *mdev ) 
{ 
  struct p_protocol *p ;
  int size ;
  int rv ;
  size_t tmp ;
  void *tmp___0 ;
  __u32 tmp___1 ;
  __u32 tmp___2 ;
  __u32 tmp___3 ;
  __u32 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;

  {
#line 1682
  size = 32;
#line 1684
  if (mdev->agreed_pro_version > 86) {
#line 1685
    tmp = strlen((char const   *)(& (mdev->net_conf)->integrity_alg));
#line 1685
    size = (int )(((unsigned int )tmp + (unsigned int )size) + 1U);
  } else {

  }
#line 1689
  tmp___0 = kmalloc((size_t )size, 16U);
#line 1689
  p = (struct p_protocol *)tmp___0;
#line 1690
  if ((unsigned long )p == (unsigned long )((struct p_protocol *)0)) {
#line 1691
    return (0);
  } else {

  }
#line 1693
  tmp___1 = __fswab32((__u32 )(mdev->net_conf)->wire_protocol);
#line 1693
  p->protocol = tmp___1;
#line 1694
  tmp___2 = __fswab32((__u32 )(mdev->net_conf)->after_sb_0p);
#line 1694
  p->after_sb_0p = tmp___2;
#line 1695
  tmp___3 = __fswab32((__u32 )(mdev->net_conf)->after_sb_1p);
#line 1695
  p->after_sb_1p = tmp___3;
#line 1696
  tmp___4 = __fswab32((__u32 )(mdev->net_conf)->after_sb_2p);
#line 1696
  p->after_sb_2p = tmp___4;
#line 1697
  tmp___5 = __fswab32((__u32 )(mdev->net_conf)->want_lose);
#line 1697
  p->want_lose = tmp___5;
#line 1698
  tmp___6 = __fswab32((__u32 )(mdev->net_conf)->two_primaries);
#line 1698
  p->two_primaries = tmp___6;
#line 1700
  if (mdev->agreed_pro_version > 86) {
#line 1701
    strcpy((char *)(& p->integrity_alg), (char const   *)(& (mdev->net_conf)->integrity_alg));
  } else {

  }
#line 1703
  rv = drbd_send_cmd(mdev, 1, P_PROTOCOL, (struct p_header *)p, (size_t )size);
#line 1705
  kfree((void const   *)p);
#line 1706
  return (rv);
}
}
#line 1709 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_uuids(struct drbd_conf *mdev , u64 uuid_flags ) 
{ 
  struct p_uuids p ;
  int i ;
  int tmp ;
  __u64 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;
  __u64 tmp___3 ;
  int tmp___4 ;

  {
#line 1714
  tmp = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1714
  if (tmp == 0) {
#line 1715
    return (1);
  } else {

  }
#line 1717
  i = 0;
#line 1717
  goto ldv_41873;
  ldv_41872: ;
#line 1718
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1718
    tmp___0 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 1718
    p.uuid[i] = tmp___0;
  } else {
#line 1718
    p.uuid[i] = 0ULL;
  }
#line 1717
  i = i + 1;
  ldv_41873: ;
#line 1717
  if (i <= 3) {
#line 1718
    goto ldv_41872;
  } else {

  }
#line 1720
  mdev->comm_bm_set = drbd_bm_total_weight(mdev);
#line 1721
  tmp___1 = __fswab64((__u64 )mdev->comm_bm_set);
#line 1721
  p.uuid[4] = tmp___1;
#line 1722
  uuid_flags = ((unsigned int )*((unsigned char *)mdev->net_conf + 528UL) != 0U ? 1ULL : 0ULL) | uuid_flags;
#line 1723
  tmp___2 = constant_test_bit(12U, (unsigned long const volatile   *)(& mdev->flags));
#line 1723
  uuid_flags = (tmp___2 != 0 ? 2ULL : 0ULL) | uuid_flags;
#line 1724
  uuid_flags = ((unsigned int )*((unsigned char *)mdev + 1801UL) == 8U ? 4ULL : 0ULL) | uuid_flags;
#line 1725
  tmp___3 = __fswab64(uuid_flags);
#line 1725
  p.uuid[5] = tmp___3;
#line 1727
  put_ldev(mdev);
#line 1729
  tmp___4 = drbd_send_cmd(mdev, 1, P_UUIDS, (struct p_header *)(& p), 56UL);
#line 1729
  return (tmp___4);
}
}
#line 1733 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1735
  tmp = _drbd_send_uuids(mdev, 0ULL);
#line 1735
  return (tmp);
}
}
#line 1738 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_uuids_skip_initial_sync(struct drbd_conf *mdev ) 
{ 
  int tmp ;

  {
#line 1740
  tmp = _drbd_send_uuids(mdev, 8ULL);
#line 1740
  return (tmp);
}
}
#line 1744 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sync_uuid(struct drbd_conf *mdev , u64 val ) 
{ 
  struct p_rs_uuid p ;
  __u64 tmp ;
  int tmp___0 ;

  {
#line 1748
  tmp = __fswab64(val);
#line 1748
  p.uuid = tmp;
#line 1750
  tmp___0 = drbd_send_cmd(mdev, 1, P_SYNC_UUID, (struct p_header *)(& p), 16UL);
#line 1750
  return (tmp___0);
}
}
#line 1754 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sizes(struct drbd_conf *mdev , int trigger_reply ) 
{ 
  struct p_sizes p ;
  sector_t d_size ;
  sector_t u_size ;
  int q_order_type ;
  int ok ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  __u32 tmp___2 ;
  int tmp___3 ;
  __u64 tmp___4 ;
  __u64 tmp___5 ;
  sector_t tmp___6 ;
  __u64 tmp___7 ;
  __u64 tmp___8 ;
  unsigned int tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;

  {
#line 1761
  tmp___3 = _get_ldev_if_state(mdev, D_NEGOTIATING);
#line 1761
  if (tmp___3 != 0) {
#line 1762
    if ((unsigned long )(mdev->ldev)->backing_bdev == (unsigned long )((struct block_device *)0)) {
#line 1762
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1762
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1762
      printk("<3>%s %s: ASSERT( mdev->ldev->backing_bdev ) in %s:%d\n", tmp___0, tmp,
             (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             1762);
    } else {

    }
#line 1763
    d_size = drbd_get_max_capacity___0(mdev->ldev);
#line 1764
    u_size = (sector_t )(mdev->ldev)->dc.disk_size;
#line 1765
    q_order_type = drbd_queue_order_type(mdev);
#line 1766
    tmp___1 = drbd_queue_order_type(mdev);
#line 1766
    tmp___2 = __fswab32((__u32 )tmp___1);
#line 1766
    p.queue_order_type = tmp___2;
#line 1767
    put_ldev(mdev);
  } else {
#line 1769
    d_size = 0UL;
#line 1770
    u_size = 0UL;
#line 1771
    q_order_type = 0;
  }
#line 1774
  tmp___4 = __fswab64((__u64 )d_size);
#line 1774
  p.d_size = tmp___4;
#line 1775
  tmp___5 = __fswab64((__u64 )u_size);
#line 1775
  p.u_size = tmp___5;
#line 1776
  if (trigger_reply == 0) {
#line 1776
    tmp___6 = drbd_get_capacity(mdev->this_bdev);
#line 1776
    tmp___7 = (__u64 )tmp___6;
  } else {
#line 1776
    tmp___7 = 0ULL;
  }
#line 1776
  tmp___8 = __fswab64(tmp___7);
#line 1776
  p.c_size = tmp___8;
#line 1777
  tmp___9 = queue_max_segment_size(mdev->rq_queue);
#line 1777
  tmp___10 = __fswab32(tmp___9);
#line 1777
  p.max_segment_size = tmp___10;
#line 1778
  tmp___11 = __fswab32((__u32 )q_order_type);
#line 1778
  p.queue_order_type = tmp___11;
#line 1780
  ok = drbd_send_cmd(mdev, 1, P_SIZES, (struct p_header *)(& p), 40UL);
#line 1782
  return (ok);
}
}
#line 1789 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state(struct drbd_conf *mdev ) 
{ 
  struct socket *sock ;
  struct p_state p ;
  int ok ;
  __u32 tmp ;
  long tmp___0 ;

  {
#line 1793
  ok = 0;
#line 1797
  drbd_state_lock___0(mdev);
#line 1799
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 1801
  tmp = __fswab32(mdev->state.i);
#line 1801
  p.state = tmp;
#line 1802
  sock = mdev->data.socket;
#line 1804
  tmp___0 = __builtin_expect((unsigned long )sock != (unsigned long )((struct socket *)0),
                             1L);
#line 1804
  if (tmp___0 != 0L) {
#line 1805
    ok = _drbd_send_cmd(mdev, sock, P_STATE, (struct p_header *)(& p), 12UL, 0U);
  } else {

  }
#line 1809
  mutex_unlock(& mdev->data.mutex);
#line 1811
  drbd_state_unlock(mdev);
#line 1812
  return (ok);
}
}
#line 1815 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_state_req(struct drbd_conf *mdev , union drbd_state mask , union drbd_state val ) 
{ 
  struct p_req_state p ;
  __u32 tmp ;
  __u32 tmp___0 ;
  int tmp___1 ;

  {
#line 1820
  tmp = __fswab32(mask.i);
#line 1820
  p.mask = tmp;
#line 1821
  tmp___0 = __fswab32(val.i);
#line 1821
  p.val = tmp___0;
#line 1823
  tmp___1 = drbd_send_cmd(mdev, 1, P_STATE_CHG_REQ, (struct p_header *)(& p), 16UL);
#line 1823
  return (tmp___1);
}
}
#line 1827 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_sr_reply(struct drbd_conf *mdev , int retcode ) 
{ 
  struct p_req_state_reply p ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 1831
  tmp = __fswab32((__u32 )retcode);
#line 1831
  p.retcode = tmp;
#line 1833
  tmp___0 = drbd_send_cmd(mdev, 0, P_STATE_CHG_REPLY, (struct p_header *)(& p), 12UL);
#line 1833
  return (tmp___0);
}
}
#line 1837 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int fill_bitmap_rle_bits(struct drbd_conf *mdev , struct p_compressed_bm *p , struct bm_xfer_ctx *c ) 
{ 
  struct bitstream bs ;
  unsigned long plain_bits ;
  unsigned long tmp ;
  unsigned long rl ;
  unsigned int len ;
  unsigned int toggle ;
  int bits ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;

  {
#line 1850
  if ((unsigned int )*((unsigned char *)mdev + 200UL) == 0U || mdev->agreed_pro_version <= 89) {
#line 1852
    return (0);
  } else {

  }
#line 1854
  if (c->bit_offset >= c->bm_bits) {
#line 1855
    return (0);
  } else {

  }
#line 1858
  bitstream_init(& bs, (void *)(& p->code), 4087UL, 0U);
#line 1859
  memset((void *)(& p->code), 0, 4087UL);
#line 1861
  plain_bits = 0UL;
#line 1866
  toggle = 2U;
  ldv_41926: ;
#line 1871
  if (toggle == 0U) {
#line 1871
    tmp___0 = _drbd_bm_find_next_zero(mdev, c->bit_offset);
#line 1871
    tmp = tmp___0;
  } else {
#line 1871
    tmp___1 = _drbd_bm_find_next(mdev, c->bit_offset);
#line 1871
    tmp = tmp___1;
  }
#line 1873
  if (tmp == 0xffffffffffffffffUL) {
#line 1874
    tmp = c->bm_bits;
  } else {

  }
#line 1875
  rl = tmp - c->bit_offset;
#line 1877
  if (toggle == 2U) {
#line 1878
    if (rl == 0UL) {
#line 1881
      DCBP_set_start(p, 1);
#line 1883
      toggle = toggle == 0U;
#line 1884
      goto ldv_41924;
    } else {

    }
#line 1886
    DCBP_set_start(p, 0);
  } else {

  }
#line 1891
  if (rl == 0UL) {
#line 1892
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1892
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1892
    printk("<3>%s %s: unexpected zero runlength while encoding bitmap t:%u bo:%lu\n",
           tmp___3, tmp___2, toggle, c->bit_offset);
#line 1894
    return (-1);
  } else {

  }
#line 1897
  bits = vli_encode_bits(& bs, (u64 )rl);
#line 1898
  if (bits == -105) {
#line 1899
    goto ldv_41925;
  } else {

  }
#line 1900
  if (bits <= 0) {
#line 1901
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1901
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1901
    printk("<3>%s %s: error while encoding bitmap: %d\n", tmp___5, tmp___4, bits);
#line 1902
    return (0);
  } else {

  }
#line 1905
  toggle = toggle == 0U;
#line 1906
  plain_bits = plain_bits + rl;
#line 1907
  c->bit_offset = tmp;
  ldv_41924: ;
#line 1908
  if (c->bit_offset < c->bm_bits) {
#line 1909
    goto ldv_41926;
  } else {

  }
  ldv_41925: 
#line 1910
  len = ((unsigned int )((long )bs.cur.b) - (unsigned int )((long )(& p->code))) + (unsigned int )(bs.cur.bit != 0U);
#line 1912
  if ((unsigned long )(len << 3) > plain_bits) {
#line 1915
    c->bit_offset = c->bit_offset - plain_bits;
#line 1916
    bm_xfer_ctx_bit_to_word_offset(c);
#line 1917
    c->bit_offset = c->word_offset * 64UL;
#line 1918
    return (0);
  } else {

  }
#line 1923
  bm_xfer_ctx_bit_to_word_offset(c);
#line 1926
  DCBP_set_pad_bits(p, (int )(- bs.cur.bit) & 7);
#line 1928
  return ((int )len);
}
}
#line 1932 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
enum ldv_26455 send_bitmap_rle_or_plain(struct drbd_conf *mdev , struct p_header *h ,
                                        struct bm_xfer_ctx *c ) 
{ 
  struct p_compressed_bm *p ;
  unsigned long num_words ;
  int len ;
  int ok ;
  size_t __min1 ;
  size_t __min2 ;

  {
#line 1935
  p = (struct p_compressed_bm *)h;
#line 1940
  len = fill_bitmap_rle_bits(mdev, p, c);
#line 1942
  if (len < 0) {
#line 1943
    return (FAILED);
  } else {

  }
#line 1945
  if (len != 0) {
#line 1946
    DCBP_set_code(p, RLE_VLI_Bits);
#line 1947
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_COMPRESSED_BITMAP, h, (unsigned long )len + 9UL,
                        0U);
#line 1950
    c->packets[0] = c->packets[0] + 1U;
#line 1951
    c->bytes[0] = (c->bytes[0] + (unsigned int )len) + 9U;
#line 1953
    if (c->bit_offset >= c->bm_bits) {
#line 1954
      len = 0;
    } else {

    }
  } else {
#line 1958
    __min1 = 511UL;
#line 1958
    __min2 = c->bm_words - c->word_offset;
#line 1958
    num_words = __min1 < __min2 ? __min1 : __min2;
#line 1959
    len = (int )((unsigned int )num_words * 8U);
#line 1960
    if (len != 0) {
#line 1961
      drbd_bm_get_lel(mdev, c->word_offset, num_words, (unsigned long *)(& h->payload));
    } else {

    }
#line 1962
    ok = _drbd_send_cmd(mdev, mdev->data.socket, P_BITMAP, h, (unsigned long )len + 8UL,
                        0U);
#line 1964
    c->word_offset = c->word_offset + num_words;
#line 1965
    c->bit_offset = c->word_offset * 64UL;
#line 1967
    c->packets[1] = c->packets[1] + 1U;
#line 1968
    c->bytes[1] = (c->bytes[1] + (unsigned int )len) + 8U;
#line 1970
    if (c->bit_offset > c->bm_bits) {
#line 1971
      c->bit_offset = c->bm_bits;
    } else {

    }
  }
#line 1973
  ok = ok != 0 ? (len == 0 ? 2 : 0) : 1;
#line 1975
  if (ok == 2) {
#line 1976
    INFO_bm_xfer_stats(mdev, "send", c);
  } else {

  }
#line 1977
  return ((enum ldv_26455 )ok);
}
}
#line 1981 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int _drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  struct bm_xfer_ctx c ;
  struct p_header *p ;
  int ret ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  unsigned long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  int tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  struct bm_xfer_ctx __constr_expr_0 ;
  unsigned long tmp___11 ;
  size_t tmp___12 ;
  enum ldv_26455 tmp___13 ;

  {
#line 1987
  _b = (unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0);
#line 1987
  if (_b != 0) {
#line 1987
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1987
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1987
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "_drbd_send_bitmap", (char *)"!mdev->bitmap",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           1987);
  } else {

  }
#line 1987
  if (_b != 0) {
#line 1987
    return (0);
  } else {

  }
#line 1991
  tmp___1 = __get_free_pages(16U, 0U);
#line 1991
  p = (struct p_header *)tmp___1;
#line 1992
  if ((unsigned long )p == (unsigned long )((struct p_header *)0)) {
#line 1993
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1993
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1993
    printk("<3>%s %s: failed to allocate one page buffer in %s\n", tmp___3, tmp___2,
           "_drbd_send_bitmap");
#line 1994
    return (0);
  } else {

  }
#line 1997
  tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1997
  if (tmp___10 != 0) {
#line 1998
    tmp___9 = drbd_md_test_flag(mdev->ldev, 8);
#line 1998
    if (tmp___9 != 0) {
#line 1999
      tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1999
      tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1999
      printk("<6>%s %s: Writing the whole bitmap, MDF_FullSync was set.\n", tmp___5,
             tmp___4);
#line 2000
      drbd_bm_set_all(mdev);
#line 2001
      tmp___8 = drbd_bm_write(mdev);
#line 2001
      if (tmp___8 != 0) {
#line 2005
        tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2005
        tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2005
        printk("<3>%s %s: Failed to write bitmap to disk!\n", tmp___7, tmp___6);
      } else {
#line 2007
        drbd_md_clear_flag(mdev, 8);
#line 2008
        drbd_md_sync(mdev);
      }
    } else {

    }
#line 2011
    put_ldev(mdev);
  } else {

  }
#line 2014
  tmp___11 = drbd_bm_bits(mdev);
#line 2014
  tmp___12 = drbd_bm_words(mdev);
#line 2014
  __constr_expr_0.bm_bits = tmp___11;
#line 2014
  __constr_expr_0.bm_words = tmp___12;
#line 2014
  __constr_expr_0.bit_offset = 0UL;
#line 2014
  __constr_expr_0.word_offset = 0UL;
#line 2014
  __constr_expr_0.packets[0] = 0U;
#line 2014
  __constr_expr_0.packets[1] = 0U;
#line 2014
  __constr_expr_0.bytes[0] = 0U;
#line 2014
  __constr_expr_0.bytes[1] = 0U;
#line 2014
  c = __constr_expr_0;
  ldv_41953: 
#line 2020
  tmp___13 = send_bitmap_rle_or_plain(mdev, p, & c);
#line 2020
  ret = (int )tmp___13;
#line 2021
  if (ret == 0) {
#line 2022
    goto ldv_41953;
  } else {

  }
#line 2023
  free_pages((unsigned long )p, 0U);
#line 2024
  return (ret == 2);
}
}
#line 2027 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_bitmap(struct drbd_conf *mdev ) 
{ 
  int err ;
  int tmp ;
  int tmp___0 ;

  {
#line 2031
  tmp = drbd_get_data_sock(mdev);
#line 2031
  if (tmp == 0) {
#line 2032
    return (-1);
  } else {

  }
#line 2033
  tmp___0 = _drbd_send_bitmap(mdev);
#line 2033
  err = tmp___0 == 0;
#line 2034
  drbd_put_data_sock(mdev);
#line 2035
  return (err);
}
}
#line 2038 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_b_ack(struct drbd_conf *mdev , u32 barrier_nr , u32 set_size ) 
{ 
  int ok ;
  struct p_barrier_ack p ;
  __u32 tmp ;

  {
#line 2043
  p.barrier = barrier_nr;
#line 2044
  tmp = __fswab32(set_size);
#line 2044
  p.set_size = tmp;
#line 2046
  if ((int )mdev->state.ldv_32167.conn <= 9) {
#line 2047
    return (0);
  } else {

  }
#line 2048
  ok = drbd_send_cmd(mdev, 0, P_BARRIER_ACK, (struct p_header *)(& p), 16UL);
#line 2050
  return (ok);
}
}
#line 2061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , u64 sector ,
                          u32 blksize , u64 block_id ) 
{ 
  int ok ;
  struct p_block_ack p ;
  int tmp ;
  __u32 tmp___0 ;

  {
#line 2069
  p.sector = sector;
#line 2070
  p.block_id = block_id;
#line 2071
  p.blksize = blksize;
#line 2072
  tmp = atomic_add_return(1, & mdev->packet_seq);
#line 2072
  tmp___0 = __fswab32((__u32 )tmp);
#line 2072
  p.seq_num = tmp___0;
#line 2074
  if ((unsigned long )mdev->meta.socket == (unsigned long )((struct socket *)0) || (int )mdev->state.ldv_32167.conn <= 9) {
#line 2075
    return (0);
  } else {

  }
#line 2076
  ok = drbd_send_cmd(mdev, 0, cmd, (struct p_header *)(& p), 32UL);
#line 2078
  return (ok);
}
}
#line 2081 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_dp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_data *dp ) 
{ 
  int header_size ;
  int data_size ;
  __u32 tmp ;
  int tmp___0 ;

  {
#line 2084
  header_size = 24;
#line 2086
  data_size = (int )((struct p_header *)dp)->length - header_size;
#line 2088
  tmp = __fswab32((__u32 )data_size);
#line 2088
  tmp___0 = _drbd_send_ack(mdev, cmd, dp->sector, tmp, dp->block_id);
#line 2088
  return (tmp___0);
}
}
#line 2092 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_rp(struct drbd_conf *mdev , enum drbd_packets cmd , struct p_block_req *rp ) 
{ 
  int tmp ;

  {
#line 2095
  tmp = _drbd_send_ack(mdev, cmd, rp->sector, rp->blksize, rp->block_id);
#line 2095
  return (tmp);
}
}
#line 2104 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  __u32 tmp ;
  __u64 tmp___0 ;
  int tmp___1 ;

  {
#line 2107
  tmp = __fswab32(e->size);
#line 2107
  tmp___0 = __fswab64((__u64 )e->sector);
#line 2107
  tmp___1 = _drbd_send_ack(mdev, cmd, tmp___0, tmp, e->block_id);
#line 2107
  return (tmp___1);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ack_ex(struct drbd_conf *mdev , enum drbd_packets cmd , sector_t sector ,
                     int blksize , u64 block_id ) 
{ 
  __u64 tmp ;
  __u32 tmp___0 ;
  __u64 tmp___1 ;
  int tmp___2 ;

  {
#line 2118
  tmp = __fswab64(block_id);
#line 2118
  tmp___0 = __fswab32((__u32 )blksize);
#line 2118
  tmp___1 = __fswab64((__u64 )sector);
#line 2118
  tmp___2 = _drbd_send_ack(mdev, cmd, tmp___1, tmp___0, tmp);
#line 2118
  return (tmp___2);
}
}
#line 2124 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest(struct drbd_conf *mdev , int cmd , sector_t sector , int size ,
                       u64 block_id ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2130
  tmp = __fswab64((__u64 )sector);
#line 2130
  p.sector = tmp;
#line 2131
  p.block_id = block_id;
#line 2132
  tmp___0 = __fswab32((__u32 )size);
#line 2132
  p.blksize = tmp___0;
#line 2134
  ok = drbd_send_cmd(mdev, 1, (enum drbd_packets )cmd, (struct p_header *)(& p), 32UL);
#line 2136
  return (ok);
}
}
#line 2139 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_drequest_csum(struct drbd_conf *mdev , sector_t sector , int size ,
                            void *digest , int digest_size , enum drbd_packets cmd ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;
  __u16 tmp___1 ;
  __u16 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2147
  tmp = __fswab64((__u64 )sector);
#line 2147
  p.sector = tmp;
#line 2148
  p.block_id = 1728263026ULL;
#line 2149
  tmp___0 = __fswab32((__u32 )size);
#line 2149
  p.blksize = tmp___0;
#line 2151
  p.head.magic = 1728214147U;
#line 2152
  tmp___1 = __fswab16((int )((__u16 )cmd));
#line 2152
  p.head.command = tmp___1;
#line 2153
  tmp___2 = __fswab16((int )((unsigned int )((__u16 )digest_size) + 24U));
#line 2153
  p.head.length = tmp___2;
#line 2155
  mutex_lock_nested(& mdev->data.mutex, 0U);
#line 2157
  tmp___3 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 0U);
#line 2157
  ok = tmp___3 == 32;
#line 2158
  if (ok != 0) {
#line 2158
    tmp___4 = drbd_send(mdev, mdev->data.socket, digest, (size_t )digest_size, 0U);
#line 2158
    if (tmp___4 == digest_size) {
#line 2158
      tmp___5 = 1;
    } else {
#line 2158
      tmp___5 = 0;
    }
  } else {
#line 2158
    tmp___5 = 0;
  }
#line 2158
  ok = tmp___5;
#line 2160
  mutex_unlock(& mdev->data.mutex);
#line 2162
  return (ok);
}
}
#line 2165 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_ov_request(struct drbd_conf *mdev , sector_t sector , int size ) 
{ 
  int ok ;
  struct p_block_req p ;
  __u64 tmp ;
  __u32 tmp___0 ;

  {
#line 2170
  tmp = __fswab64((__u64 )sector);
#line 2170
  p.sector = tmp;
#line 2171
  p.block_id = 1728261953ULL;
#line 2172
  tmp___0 = __fswab32((__u32 )size);
#line 2172
  p.blksize = tmp___0;
#line 2174
  ok = drbd_send_cmd(mdev, 1, P_OV_REQUEST, (struct p_header *)(& p), 32UL);
#line 2176
  return (ok);
}
}
#line 2183 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int we_should_drop_the_connection(struct drbd_conf *mdev , struct socket *sock ) 
{ 
  int drop_it ;
  enum drbd_thread_state tmp ;
  int tmp___0 ;
  struct task_struct *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;

  {
#line 2188
  if ((unsigned long )mdev->meta.socket == (unsigned long )sock || (unsigned long )mdev->asender.task == (unsigned long )((struct task_struct *)0)) {
#line 2188
    tmp___0 = 1;
  } else {
#line 2188
    tmp = get_t_state(& mdev->asender);
#line 2188
    if ((unsigned int )tmp != 1U) {
#line 2188
      tmp___0 = 1;
    } else
#line 2188
    if ((int )mdev->state.ldv_32167.conn <= 9) {
#line 2188
      tmp___0 = 1;
    } else {
#line 2188
      tmp___0 = 0;
    }
  }
#line 2188
  drop_it = tmp___0;
#line 2193
  if (drop_it != 0) {
#line 2194
    return (1);
  } else {

  }
#line 2196
  mdev->ko_count = mdev->ko_count - 1U;
#line 2196
  drop_it = mdev->ko_count == 0U;
#line 2197
  if (drop_it == 0) {
#line 2198
    tmp___1 = get_current();
#line 2198
    tmp___2 = get_current();
#line 2198
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2198
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2198
    printk("<3>%s %s: [%s/%d] sock_sendmsg time expired, ko = %u\n", tmp___4, tmp___3,
           (char *)(& tmp___2->comm), tmp___1->pid, mdev->ko_count);
#line 2200
    request_ping(mdev);
  } else {

  }
#line 2203
  return (drop_it);
}
}
#line 2227 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_no_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                              size_t size ) 
{ 
  int sent ;
  void *tmp ;
  int tmp___0 ;

  {
#line 2230
  tmp = kmap(page);
#line 2230
  tmp___0 = drbd_send(mdev, mdev->data.socket, tmp + (unsigned long )offset, size,
                      0U);
#line 2230
  sent = tmp___0;
#line 2231
  kunmap(page);
#line 2232
  if ((size_t )sent == size) {
#line 2233
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2234
  return ((size_t )sent == size);
}
}
#line 2237 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_page(struct drbd_conf *mdev , struct page *page , int offset ,
                           size_t size ) 
{ 
  mm_segment_t oldfs ;
  struct thread_info *tmp ;
  int sent ;
  int ok ;
  int len ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  struct thread_info *tmp___3 ;
  mm_segment_t __constr_expr_0 ;
  ssize_t tmp___4 ;
  int tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  struct thread_info *tmp___8 ;
  long tmp___9 ;

  {
#line 2240
  tmp = current_thread_info();
#line 2240
  oldfs = tmp->addr_limit;
#line 2242
  len = (int )size;
#line 2250
  if (disable_sendpage != 0) {
#line 2251
    tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2251
    return (tmp___0);
  } else {
#line 2250
    tmp___1 = page_count(page);
#line 2250
    if (tmp___1 <= 0) {
#line 2251
      tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2251
      return (tmp___0);
    } else {
#line 2250
      tmp___2 = PageSlab(page);
#line 2250
      if (tmp___2 != 0) {
#line 2251
        tmp___0 = _drbd_no_send_page(mdev, page, offset, size);
#line 2251
        return (tmp___0);
      } else {

      }
    }
  }
#line 2253
  drbd_update_congested(mdev);
#line 2254
  tmp___3 = current_thread_info();
#line 2254
  __constr_expr_0.seg = 0xffffffffffffffffUL;
#line 2254
  tmp___3->addr_limit = __constr_expr_0;
  ldv_42051: 
#line 2256
  tmp___4 = (*(((mdev->data.socket)->ops)->sendpage))(mdev->data.socket, page, offset,
                                                      (size_t )len, 16384);
#line 2256
  sent = (int )tmp___4;
#line 2259
  if (sent == -11) {
#line 2260
    tmp___5 = we_should_drop_the_connection(mdev, mdev->data.socket);
#line 2260
    if (tmp___5 != 0) {
#line 2262
      goto ldv_42048;
    } else {
#line 2264
      goto ldv_42049;
    }
  } else {

  }
#line 2266
  if (sent <= 0) {
#line 2267
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2267
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2267
    printk("<4>%s %s: %s: size=%d len=%d sent=%d\n", tmp___7, tmp___6, "_drbd_send_page",
           (int )size, len, sent);
#line 2269
    goto ldv_42048;
  } else {

  }
#line 2271
  len = len - sent;
#line 2272
  offset = offset + sent;
  ldv_42049: ;
#line 2273
  if (len > 0) {
#line 2274
    goto ldv_42051;
  } else {

  }
  ldv_42048: 
#line 2274
  tmp___8 = current_thread_info();
#line 2274
  tmp___8->addr_limit = oldfs;
#line 2275
  clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
#line 2277
  ok = len == 0;
#line 2278
  tmp___9 = __builtin_expect(ok != 0, 1L);
#line 2278
  if (tmp___9 != 0L) {
#line 2279
    mdev->send_cnt = mdev->send_cnt + (unsigned int )(size >> 9);
  } else {

  }
#line 2280
  return (ok);
}
}
#line 2283 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2287
  bvec = bio->bi_io_vec;
#line 2287
  i = 0;
#line 2287
  goto ldv_42059;
  ldv_42058: 
#line 2288
  tmp = _drbd_no_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2288
  if (tmp == 0) {
#line 2290
    return (0);
  } else {

  }
#line 2287
  bvec = bvec + 1;
#line 2287
  i = i + 1;
  ldv_42059: ;
#line 2287
  if ((int )bio->bi_vcnt > i) {
#line 2288
    goto ldv_42058;
  } else {

  }

#line 2292
  return (1);
}
}
#line 2295 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int _drbd_send_zc_bio(struct drbd_conf *mdev , struct bio *bio ) 
{ 
  struct bio_vec *bvec ;
  int i ;
  int tmp ;

  {
#line 2299
  bvec = bio->bi_io_vec;
#line 2299
  i = 0;
#line 2299
  goto ldv_42068;
  ldv_42067: 
#line 2300
  tmp = _drbd_send_page(mdev, bvec->bv_page, (int )bvec->bv_offset, (size_t )bvec->bv_len);
#line 2300
  if (tmp == 0) {
#line 2302
    return (0);
  } else {

  }
#line 2299
  bvec = bvec + 1;
#line 2299
  i = i + 1;
  ldv_42068: ;
#line 2299
  if ((int )bio->bi_vcnt > i) {
#line 2300
    goto ldv_42067;
  } else {

  }

#line 2305
  return (1);
}
}
#line 2311 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_dblock(struct drbd_conf *mdev , struct drbd_request *req ) 
{ 
  int ok ;
  struct p_data p ;
  unsigned int dp_flags ;
  void *dgb ;
  int dgs ;
  int tmp ;
  unsigned int tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  __u32 tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  bool tmp___7 ;
  bool tmp___8 ;
  bool tmp___9 ;
  __u32 tmp___10 ;
  int tmp___11 ;

  {
#line 2313
  ok = 1;
#line 2315
  dp_flags = 0U;
#line 2319
  tmp = drbd_get_data_sock(mdev);
#line 2319
  if (tmp == 0) {
#line 2320
    return (0);
  } else {

  }
#line 2322
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2322
    tmp___0 = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2322
    dgs = (int )tmp___0;
  } else {
#line 2322
    dgs = 0;
  }
#line 2325
  p.head.magic = 1728214147U;
#line 2326
  p.head.command = 0U;
#line 2327
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )req->size)) + 24U));
#line 2327
  p.head.length = tmp___1;
#line 2330
  tmp___2 = __fswab64((__u64 )req->sector);
#line 2330
  p.sector = tmp___2;
#line 2331
  p.block_id = (u64 )req;
#line 2332
  tmp___3 = atomic_add_return(1, & mdev->packet_seq);
#line 2332
  req->seq_num = tmp___3;
#line 2332
  tmp___4 = __fswab32((__u32 )tmp___3);
#line 2332
  p.seq_num = tmp___4;
#line 2334
  dp_flags = 0U;
#line 2339
  tmp___7 = bio_rw_flagged(req->master_bio, BIO_RW_BARRIER);
#line 2339
  if ((int )tmp___7) {
#line 2340
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2340
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2340
    printk("<3>%s %s: ASSERT FAILED would have set DP_HARDBARRIER\n", tmp___6, tmp___5);
  } else {

  }
#line 2343
  tmp___8 = bio_rw_flagged(req->master_bio, BIO_RW_SYNCIO);
#line 2343
  if ((int )tmp___8) {
#line 2344
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2347
  tmp___9 = bio_rw_flagged(req->master_bio, BIO_RW_UNPLUG);
#line 2347
  if ((int )tmp___9) {
#line 2348
    dp_flags = dp_flags | 2U;
  } else {

  }
#line 2349
  if ((int )mdev->state.ldv_32167.conn > 15 && (int )mdev->state.ldv_32167.conn <= 21) {
#line 2351
    dp_flags = dp_flags | 4U;
  } else {

  }
#line 2353
  tmp___10 = __fswab32(dp_flags);
#line 2353
  p.dp_flags = tmp___10;
#line 2354
  set_bit(5U, (unsigned long volatile   *)(& mdev->flags));
#line 2355
  tmp___11 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2355
  ok = tmp___11 == 32;
#line 2357
  if (ok != 0 && dgs != 0) {
#line 2358
    dgb = mdev->int_dig_out;
#line 2359
    drbd_csum(mdev, mdev->integrity_w_tfm, req->master_bio, dgb);
#line 2360
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2362
  if (ok != 0) {
#line 2363
    if ((mdev->net_conf)->wire_protocol == 1) {
#line 2364
      ok = _drbd_send_bio(mdev, req->master_bio);
    } else {
#line 2366
      ok = _drbd_send_zc_bio(mdev, req->master_bio);
    }
  } else {

  }
#line 2369
  drbd_put_data_sock(mdev);
#line 2370
  return (ok);
}
}
#line 2377 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send_block(struct drbd_conf *mdev , enum drbd_packets cmd , struct drbd_epoch_entry *e ) 
{ 
  int ok ;
  struct p_data p ;
  void *dgb ;
  int dgs ;
  unsigned int tmp ;
  __u16 tmp___0 ;
  __u16 tmp___1 ;
  __u64 tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;

  {
#line 2385
  if (mdev->agreed_pro_version > 86 && (unsigned long )mdev->integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 2385
    tmp = crypto_hash_digestsize(mdev->integrity_w_tfm);
#line 2385
    dgs = (int )tmp;
  } else {
#line 2385
    dgs = 0;
  }
#line 2388
  p.head.magic = 1728214147U;
#line 2389
  tmp___0 = __fswab16((int )((__u16 )cmd));
#line 2389
  p.head.command = tmp___0;
#line 2390
  tmp___1 = __fswab16((int )((unsigned int )((int )((__u16 )dgs) + (int )((__u16 )e->size)) + 24U));
#line 2390
  p.head.length = tmp___1;
#line 2393
  tmp___2 = __fswab64((__u64 )e->sector);
#line 2393
  p.sector = tmp___2;
#line 2394
  p.block_id = e->block_id;
#line 2401
  tmp___3 = drbd_get_data_sock(mdev);
#line 2401
  if (tmp___3 == 0) {
#line 2402
    return (0);
  } else {

  }
#line 2404
  tmp___4 = drbd_send(mdev, mdev->data.socket, (void *)(& p), 32UL, 32768U);
#line 2404
  ok = tmp___4 == 32;
#line 2406
  if (ok != 0 && dgs != 0) {
#line 2407
    dgb = mdev->int_dig_out;
#line 2408
    drbd_csum(mdev, mdev->integrity_w_tfm, e->private_bio, dgb);
#line 2409
    ok = drbd_send(mdev, mdev->data.socket, dgb, (size_t )dgs, 32768U);
  } else {

  }
#line 2411
  if (ok != 0) {
#line 2412
    ok = _drbd_send_zc_bio(mdev, e->private_bio);
  } else {

  }
#line 2414
  drbd_put_data_sock(mdev);
#line 2415
  return (ok);
}
}
#line 2434 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_send(struct drbd_conf *mdev , struct socket *sock , void *buf , size_t size ,
              unsigned int msg_flags ) 
{ 
  struct kvec iov ;
  struct msghdr msg ;
  int rv ;
  int sent ;
  int tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct task_struct *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 2439
  sent = 0;
#line 2441
  if ((unsigned long )sock == (unsigned long )((struct socket *)0)) {
#line 2442
    return (-1000);
  } else {

  }
#line 2446
  iov.iov_base = buf;
#line 2447
  iov.iov_len = size;
#line 2449
  msg.msg_name = 0;
#line 2450
  msg.msg_namelen = 0;
#line 2451
  msg.msg_control = 0;
#line 2452
  msg.msg_controllen = 0UL;
#line 2453
  msg.msg_flags = msg_flags | 16384U;
#line 2455
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2456
    mdev->ko_count = (unsigned int )(mdev->net_conf)->ko_count;
#line 2457
    drbd_update_congested(mdev);
  } else {

  }
  ldv_42101: 
#line 2469
  rv = kernel_sendmsg(sock, & msg, & iov, 1UL, size);
#line 2470
  if (rv == -11) {
#line 2471
    tmp = we_should_drop_the_connection(mdev, sock);
#line 2471
    if (tmp != 0) {
#line 2472
      goto ldv_42099;
    } else {
#line 2474
      goto ldv_42100;
    }
  } else {

  }
#line 2476
  if (rv == 0) {
#line 2476
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2476
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2476
    printk("<3>%s %s: ASSERT( rv != 0 ) in %s:%d\n", tmp___1, tmp___0, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2476);
  } else {

  }
#line 2477
  if (rv == -4) {
#line 2478
    tmp___2 = get_current();
#line 2478
    flush_signals(tmp___2);
#line 2479
    rv = 0;
  } else {

  }
#line 2481
  if (rv < 0) {
#line 2482
    goto ldv_42099;
  } else {

  }
#line 2483
  sent = sent + rv;
#line 2484
  iov.iov_base = iov.iov_base + (unsigned long )rv;
#line 2485
  iov.iov_len = iov.iov_len - (size_t )rv;
  ldv_42100: ;
#line 2486
  if ((size_t )sent < size) {
#line 2487
    goto ldv_42101;
  } else {

  }
  ldv_42099: ;
#line 2488
  if ((unsigned long )mdev->data.socket == (unsigned long )sock) {
#line 2489
    clear_bit(21, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 2491
  if (rv <= 0) {
#line 2492
    if (rv != -11) {
#line 2493
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2493
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2493
      printk("<3>%s %s: %s_sendmsg returned %d\n", tmp___4, tmp___3, (unsigned long )mdev->meta.socket == (unsigned long )sock ? (char *)"msock" : (char *)"sock",
             rv);
#line 2496
      val.i = 0U;
#line 2496
      val.ldv_32167.conn = 4U;
#line 2496
      mask.i = 0U;
#line 2496
      mask.ldv_32167.conn = 31U;
#line 2496
      drbd_force_state(mdev, mask, val);
    } else {
#line 2498
      val___0.i = 0U;
#line 2498
      val___0.ldv_32167.conn = 3U;
#line 2498
      mask___0.i = 0U;
#line 2498
      mask___0.ldv_32167.conn = 31U;
#line 2498
      drbd_force_state(mdev, mask___0, val___0);
    }
  } else {

  }
#line 2501
  return (sent);
}
}
#line 2504 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_open(struct block_device *bdev , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;
  unsigned long flags ;
  int rv ;

  {
#line 2506
  mdev = (struct drbd_conf *)(bdev->bd_disk)->private_data;
#line 2508
  rv = 0;
#line 2510
  flags = _spin_lock_irqsave(& mdev->req_lock);
#line 2514
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2515
    if ((mode & 2U) != 0U) {
#line 2516
      rv = -30;
    } else
#line 2517
    if (allow_oos == 0) {
#line 2518
      rv = -124;
    } else {

    }
  } else {

  }
#line 2521
  if (rv == 0) {
#line 2522
    mdev->open_cnt = mdev->open_cnt + 1;
  } else {

  }
#line 2523
  _spin_unlock_irqrestore(& mdev->req_lock, flags);
#line 2525
  return (rv);
}
}
#line 2528 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_release(struct gendisk *gd , fmode_t mode ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 2530
  mdev = (struct drbd_conf *)gd->private_data;
#line 2531
  mdev->open_cnt = mdev->open_cnt - 1;
#line 2532
  return (0);
}
}
#line 2535 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_unplug_fn(struct request_queue *q ) 
{ 
  struct drbd_conf *mdev ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2537
  mdev = (struct drbd_conf *)q->queuedata;
#line 2540
  _spin_lock_irq(q->queue_lock);
#line 2541
  blk_remove_plug(q);
#line 2542
  _spin_unlock_irq(q->queue_lock);
#line 2545
  _spin_lock_irq(& mdev->req_lock);
#line 2546
  if ((int )mdev->state.ldv_32167.pdsk > 3 && (int )mdev->state.ldv_32167.conn > 9) {
#line 2547
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 2547
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2547
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2547
      printk("<3>%s %s: ASSERT( mdev->state.role == R_PRIMARY ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
             2547);
    } else {

    }
#line 2548
    tmp___2 = test_and_clear_bit(5, (unsigned long volatile   *)(& mdev->flags));
#line 2548
    if (tmp___2 != 0) {
#line 2553
      tmp___1 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2553
      if (tmp___1 != 0) {
#line 2554
        drbd_queue_work(& mdev->data.work, & mdev->unplug_work);
      } else {

      }
    } else {

    }
  } else {

  }
#line 2558
  _spin_unlock_irq(& mdev->req_lock);
#line 2560
  if ((int )mdev->state.ldv_32167.disk > 3) {
#line 2561
    drbd_kick_lo(mdev);
  } else {

  }
#line 2562
  return;
}
}
#line 2564 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_set_defaults(struct drbd_conf *mdev ) 
{ 
  union drbd_state __constr_expr_0 ;

  {
#line 2566
  mdev->sync_conf.after = -1;
#line 2567
  mdev->sync_conf.rate = 250;
#line 2568
  mdev->sync_conf.al_extents = 127;
#line 2569
  __constr_expr_0.ldv_32167.role = 2U;
#line 2569
  __constr_expr_0.ldv_32167.peer = 0U;
#line 2569
  __constr_expr_0.ldv_32167.conn = 0U;
#line 2569
  __constr_expr_0.ldv_32167.disk = 0U;
#line 2569
  __constr_expr_0.ldv_32167.pdsk = 6U;
#line 2569
  __constr_expr_0.ldv_32167.susp = 0U;
#line 2569
  __constr_expr_0.ldv_32167.aftr_isp = (unsigned char)0;
#line 2569
  __constr_expr_0.ldv_32167.peer_isp = (unsigned char)0;
#line 2569
  __constr_expr_0.ldv_32167.user_isp = (unsigned char)0;
#line 2569
  __constr_expr_0.ldv_32167._pad = (unsigned short)0;
#line 2569
  mdev->state = __constr_expr_0;
#line 2570
  return;
}
}
#line 2579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_init_set_defaults(struct drbd_conf *mdev ) 
{ 
  struct lock_class_key __key ;
  struct lock_class_key __key___0 ;
  struct lock_class_key __key___1 ;
  struct lock_class_key __key___2 ;
  struct lock_class_key __key___3 ;
  struct lock_class_key __key___4 ;
  struct lock_class_key __key___5 ;
  struct lock_class_key __key___6 ;
  struct lock_class_key __key___7 ;
  struct lock_class_key __key___8 ;
  struct lock_class_key __key___9 ;
  struct lock_class_key __key___10 ;
  struct lock_class_key __key___11 ;
  struct lock_class_key __key___12 ;
  struct lock_class_key __key___13 ;
  struct lock_class_key __key___14 ;
  struct lock_class_key __key___15 ;

  {
#line 2584
  drbd_set_defaults(mdev);
#line 2589
  set_bit(14U, (unsigned long volatile   *)(& mdev->flags));
#line 2591
  atomic_set(& mdev->ap_bio_cnt, 0);
#line 2592
  atomic_set(& mdev->ap_pending_cnt, 0);
#line 2593
  atomic_set(& mdev->rs_pending_cnt, 0);
#line 2594
  atomic_set(& mdev->unacked_cnt, 0);
#line 2595
  atomic_set(& mdev->local_cnt, 0);
#line 2596
  atomic_set(& mdev->net_cnt, 0);
#line 2597
  atomic_set(& mdev->packet_seq, 0);
#line 2598
  atomic_set(& mdev->pp_in_use, 0);
#line 2600
  __mutex_init(& mdev->md_io_mutex, "&mdev->md_io_mutex", & __key);
#line 2601
  __mutex_init(& mdev->data.mutex, "&mdev->data.mutex", & __key___0);
#line 2602
  __mutex_init(& mdev->meta.mutex, "&mdev->meta.mutex", & __key___1);
#line 2603
  sema_init(& mdev->data.work.s, 0);
#line 2604
  sema_init(& mdev->meta.work.s, 0);
#line 2605
  __mutex_init(& mdev->state_mutex, "&mdev->state_mutex", & __key___2);
#line 2607
  __spin_lock_init(& mdev->data.work.q_lock, "&mdev->data.work.q_lock", & __key___3);
#line 2608
  __spin_lock_init(& mdev->meta.work.q_lock, "&mdev->meta.work.q_lock", & __key___4);
#line 2610
  __spin_lock_init(& mdev->al_lock, "&mdev->al_lock", & __key___5);
#line 2611
  __spin_lock_init(& mdev->req_lock, "&mdev->req_lock", & __key___6);
#line 2612
  __spin_lock_init(& mdev->peer_seq_lock, "&mdev->peer_seq_lock", & __key___7);
#line 2613
  __spin_lock_init(& mdev->epoch_lock, "&mdev->epoch_lock", & __key___8);
#line 2615
  INIT_LIST_HEAD(& mdev->active_ee);
#line 2616
  INIT_LIST_HEAD(& mdev->sync_ee);
#line 2617
  INIT_LIST_HEAD(& mdev->done_ee);
#line 2618
  INIT_LIST_HEAD(& mdev->read_ee);
#line 2619
  INIT_LIST_HEAD(& mdev->net_ee);
#line 2620
  INIT_LIST_HEAD(& mdev->resync_reads);
#line 2621
  INIT_LIST_HEAD(& mdev->data.work.q);
#line 2622
  INIT_LIST_HEAD(& mdev->meta.work.q);
#line 2623
  INIT_LIST_HEAD(& mdev->resync_work.list);
#line 2624
  INIT_LIST_HEAD(& mdev->unplug_work.list);
#line 2625
  INIT_LIST_HEAD(& mdev->md_sync_work.list);
#line 2626
  INIT_LIST_HEAD(& mdev->bm_io_work.w.list);
#line 2627
  mdev->resync_work.cb = & w_resync_inactive;
#line 2628
  mdev->unplug_work.cb = & w_send_write_hint;
#line 2629
  mdev->md_sync_work.cb = & w_md_sync;
#line 2630
  mdev->bm_io_work.w.cb = & w_bitmap_io;
#line 2631
  init_timer_key(& mdev->resync_timer, "&mdev->resync_timer", & __key___9);
#line 2632
  init_timer_key(& mdev->md_sync_timer, "&mdev->md_sync_timer", & __key___10);
#line 2633
  mdev->resync_timer.function = & resync_timer_fn;
#line 2634
  mdev->resync_timer.data = (unsigned long )mdev;
#line 2635
  mdev->md_sync_timer.function = & md_sync_timer_fn;
#line 2636
  mdev->md_sync_timer.data = (unsigned long )mdev;
#line 2638
  __init_waitqueue_head(& mdev->misc_wait, & __key___11);
#line 2639
  __init_waitqueue_head(& mdev->state_wait, & __key___12);
#line 2640
  __init_waitqueue_head(& mdev->ee_wait, & __key___13);
#line 2641
  __init_waitqueue_head(& mdev->al_wait, & __key___14);
#line 2642
  __init_waitqueue_head(& mdev->seq_wait, & __key___15);
#line 2644
  drbd_thread_init(mdev, & mdev->receiver, & drbdd_init);
#line 2645
  drbd_thread_init(mdev, & mdev->worker, & drbd_worker);
#line 2646
  drbd_thread_init(mdev, & mdev->asender, & drbd_asender);
#line 2648
  mdev->agreed_pro_version = 91;
#line 2649
  mdev->write_ordering = WO_bio_barrier;
#line 2650
  mdev->resync_wenr = 4294967295U;
#line 2651
  return;
}
}
#line 2653 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_mdev_cleanup(struct drbd_conf *mdev ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  unsigned int tmp___5 ;
  unsigned int tmp___6 ;
  unsigned int tmp___7 ;
  unsigned int tmp___8 ;
  unsigned int tmp___9 ;
  sector_t tmp___10 ;
  unsigned long tmp___11 ;
  unsigned long tmp___12 ;
  unsigned long tmp___13 ;
  unsigned long tmp___14 ;
  unsigned long tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  char const   *tmp___18 ;
  char const   *tmp___19 ;
  int tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  int tmp___23 ;
  char const   *tmp___24 ;
  char const   *tmp___25 ;
  int tmp___26 ;
  char const   *tmp___27 ;
  char const   *tmp___28 ;
  int tmp___29 ;
  char const   *tmp___30 ;
  char const   *tmp___31 ;
  int tmp___32 ;
  char const   *tmp___33 ;
  char const   *tmp___34 ;
  int tmp___35 ;
  char const   *tmp___36 ;
  char const   *tmp___37 ;
  int tmp___38 ;
  char const   *tmp___39 ;
  char const   *tmp___40 ;
  int tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  int tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;

  {
#line 2655
  if ((unsigned int )mdev->receiver.t_state != 0U) {
#line 2656
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2656
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2656
    printk("<3>%s %s: ASSERT FAILED: receiver t_state == %d expected 0.\n", tmp___0,
           tmp, (unsigned int )mdev->receiver.t_state);
  } else {

  }
#line 2660
  tmp___4 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2660
  if (tmp___4 != 0) {
#line 2661
    tmp___1 = atomic_read((atomic_t const   *)(& (mdev->current_epoch)->epoch_size));
#line 2661
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2661
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2661
    printk("<3>%s %s: epoch_size:%d\n", tmp___3, tmp___2, tmp___1);
  } else {

  }
#line 2662
  tmp___15 = 0UL;
#line 2662
  mdev->rs_mark_time = tmp___15;
#line 2662
  tmp___14 = tmp___15;
#line 2662
  mdev->rs_mark_left = tmp___14;
#line 2662
  tmp___13 = tmp___14;
#line 2662
  mdev->rs_failed = tmp___13;
#line 2662
  tmp___12 = tmp___13;
#line 2662
  mdev->rs_total = tmp___12;
#line 2662
  tmp___11 = tmp___12;
#line 2662
  mdev->rs_start = tmp___11;
#line 2662
  tmp___10 = tmp___11;
#line 2662
  mdev->p_size = tmp___10;
#line 2662
  tmp___9 = (unsigned int )tmp___10;
#line 2662
  mdev->writ_cnt = tmp___9;
#line 2662
  tmp___8 = tmp___9;
#line 2662
  mdev->send_cnt = tmp___8;
#line 2662
  tmp___7 = tmp___8;
#line 2662
  mdev->recv_cnt = tmp___7;
#line 2662
  tmp___6 = tmp___7;
#line 2662
  mdev->read_cnt = tmp___6;
#line 2662
  tmp___5 = tmp___6;
#line 2662
  mdev->bm_writ_cnt = tmp___5;
#line 2662
  mdev->al_writ_cnt = tmp___5;
#line 2674
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 2674
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2674
    printk("<3>%s %s: ASSERT( mdev->net_conf == NULL ) in %s:%d\n", tmp___17, tmp___16,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2674);
  } else {

  }
#line 2676
  drbd_set_my_capacity(mdev, 0UL);
#line 2677
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 2679
    drbd_bm_resize(mdev, 0UL);
#line 2680
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 2683
  drbd_free_resources(mdev);
#line 2689
  tmp___20 = list_empty((struct list_head  const  *)(& mdev->active_ee));
#line 2689
  if (tmp___20 == 0) {
#line 2689
    tmp___18 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2689
    tmp___19 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2689
    printk("<3>%s %s: ASSERT( list_empty(&mdev->active_ee) ) in %s:%d\n", tmp___19,
           tmp___18, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2689);
  } else {

  }
#line 2690
  tmp___23 = list_empty((struct list_head  const  *)(& mdev->sync_ee));
#line 2690
  if (tmp___23 == 0) {
#line 2690
    tmp___21 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2690
    tmp___22 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2690
    printk("<3>%s %s: ASSERT( list_empty(&mdev->sync_ee) ) in %s:%d\n", tmp___22,
           tmp___21, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2690);
  } else {

  }
#line 2691
  tmp___26 = list_empty((struct list_head  const  *)(& mdev->done_ee));
#line 2691
  if (tmp___26 == 0) {
#line 2691
    tmp___24 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2691
    tmp___25 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2691
    printk("<3>%s %s: ASSERT( list_empty(&mdev->done_ee) ) in %s:%d\n", tmp___25,
           tmp___24, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2691);
  } else {

  }
#line 2692
  tmp___29 = list_empty((struct list_head  const  *)(& mdev->read_ee));
#line 2692
  if (tmp___29 == 0) {
#line 2692
    tmp___27 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2692
    tmp___28 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2692
    printk("<3>%s %s: ASSERT( list_empty(&mdev->read_ee) ) in %s:%d\n", tmp___28,
           tmp___27, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2692);
  } else {

  }
#line 2693
  tmp___32 = list_empty((struct list_head  const  *)(& mdev->net_ee));
#line 2693
  if (tmp___32 == 0) {
#line 2693
    tmp___30 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2693
    tmp___31 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2693
    printk("<3>%s %s: ASSERT( list_empty(&mdev->net_ee) ) in %s:%d\n", tmp___31, tmp___30,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2693);
  } else {

  }
#line 2694
  tmp___35 = list_empty((struct list_head  const  *)(& mdev->resync_reads));
#line 2694
  if (tmp___35 == 0) {
#line 2694
    tmp___33 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2694
    tmp___34 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2694
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_reads) ) in %s:%d\n", tmp___34,
           tmp___33, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2694);
  } else {

  }
#line 2695
  tmp___38 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2695
  if (tmp___38 == 0) {
#line 2695
    tmp___36 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2695
    tmp___37 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2695
    printk("<3>%s %s: ASSERT( list_empty(&mdev->data.work.q) ) in %s:%d\n", tmp___37,
           tmp___36, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2695);
  } else {

  }
#line 2696
  tmp___41 = list_empty((struct list_head  const  *)(& mdev->meta.work.q));
#line 2696
  if (tmp___41 == 0) {
#line 2696
    tmp___39 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2696
    tmp___40 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2696
    printk("<3>%s %s: ASSERT( list_empty(&mdev->meta.work.q) ) in %s:%d\n", tmp___40,
           tmp___39, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2696);
  } else {

  }
#line 2697
  tmp___44 = list_empty((struct list_head  const  *)(& mdev->resync_work.list));
#line 2697
  if (tmp___44 == 0) {
#line 2697
    tmp___42 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2697
    tmp___43 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2697
    printk("<3>%s %s: ASSERT( list_empty(&mdev->resync_work.list) ) in %s:%d\n", tmp___43,
           tmp___42, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2697);
  } else {

  }
#line 2698
  tmp___47 = list_empty((struct list_head  const  *)(& mdev->unplug_work.list));
#line 2698
  if (tmp___47 == 0) {
#line 2698
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2698
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2698
    printk("<3>%s %s: ASSERT( list_empty(&mdev->unplug_work.list) ) in %s:%d\n", tmp___46,
           tmp___45, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2698);
  } else {

  }
#line 2699
  return;
}
}
#line 2703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_destroy_mempools(void) 
{ 
  struct page *page ;

  {
#line 2707
  goto ldv_42164;
  ldv_42163: 
#line 2708
  page = drbd_pp_pool;
#line 2709
  drbd_pp_pool = (struct page *)page->ldv_12035.ldv_12031.private;
#line 2710
  __free_pages(page, 0U);
#line 2711
  drbd_pp_vacant = drbd_pp_vacant - 1;
  ldv_42164: ;
#line 2707
  if ((unsigned long )drbd_pp_pool != (unsigned long )((struct page *)0)) {
#line 2708
    goto ldv_42163;
  } else {

  }

#line 2716
  if ((unsigned long )drbd_ee_mempool != (unsigned long )((mempool_t *)0)) {
#line 2717
    mempool_destroy(drbd_ee_mempool);
  } else {

  }
#line 2718
  if ((unsigned long )drbd_request_mempool != (unsigned long )((mempool_t *)0)) {
#line 2719
    mempool_destroy(drbd_request_mempool);
  } else {

  }
#line 2720
  if ((unsigned long )drbd_ee_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2721
    kmem_cache_destroy(drbd_ee_cache);
  } else {

  }
#line 2722
  if ((unsigned long )drbd_request_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2723
    kmem_cache_destroy(drbd_request_cache);
  } else {

  }
#line 2724
  if ((unsigned long )drbd_bm_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2725
    kmem_cache_destroy(drbd_bm_ext_cache);
  } else {

  }
#line 2726
  if ((unsigned long )drbd_al_ext_cache != (unsigned long )((struct kmem_cache *)0)) {
#line 2727
    kmem_cache_destroy(drbd_al_ext_cache);
  } else {

  }
#line 2729
  drbd_ee_mempool = 0;
#line 2730
  drbd_request_mempool = 0;
#line 2731
  drbd_ee_cache = 0;
#line 2732
  drbd_request_cache = 0;
#line 2733
  drbd_bm_ext_cache = 0;
#line 2734
  drbd_al_ext_cache = 0;
#line 2736
  return;
}
}
#line 2739 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_create_mempools(void) 
{ 
  struct page *page ;
  int number ;
  int i ;
  struct lock_class_key __key ;

  {
#line 2742
  number = (int const   )(minor_count * 8U);
#line 2746
  drbd_request_mempool = 0;
#line 2747
  drbd_ee_cache = 0;
#line 2748
  drbd_request_cache = 0;
#line 2749
  drbd_bm_ext_cache = 0;
#line 2750
  drbd_al_ext_cache = 0;
#line 2751
  drbd_pp_pool = 0;
#line 2754
  drbd_request_cache = kmem_cache_create("drbd_req", 120UL, 0UL, 0UL, 0);
#line 2756
  if ((unsigned long )drbd_request_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2757
    goto Enomem;
  } else {

  }
#line 2759
  drbd_ee_cache = kmem_cache_create("drbd_ee", 96UL, 0UL, 0UL, 0);
#line 2761
  if ((unsigned long )drbd_ee_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2762
    goto Enomem;
  } else {

  }
#line 2764
  drbd_bm_ext_cache = kmem_cache_create("drbd_bm", 64UL, 0UL, 0UL, 0);
#line 2766
  if ((unsigned long )drbd_bm_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2767
    goto Enomem;
  } else {

  }
#line 2769
  drbd_al_ext_cache = kmem_cache_create("drbd_al", 48UL, 0UL, 0UL, 0);
#line 2771
  if ((unsigned long )drbd_al_ext_cache == (unsigned long )((struct kmem_cache *)0)) {
#line 2772
    goto Enomem;
  } else {

  }
#line 2775
  drbd_request_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                        (void *)drbd_request_cache);
#line 2777
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2778
    goto Enomem;
  } else {

  }
#line 2780
  drbd_ee_mempool = mempool_create(number, & mempool_alloc_slab, & mempool_free_slab,
                                   (void *)drbd_ee_cache);
#line 2782
  if ((unsigned long )drbd_request_mempool == (unsigned long )((mempool_t *)0)) {
#line 2783
    goto Enomem;
  } else {

  }
#line 2786
  __spin_lock_init(& drbd_pp_lock, "&drbd_pp_lock", & __key);
#line 2788
  i = 0;
#line 2788
  goto ldv_42175;
  ldv_42174: 
#line 2789
  page = alloc_pages(131282U, 0U);
#line 2790
  if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 2791
    goto Enomem;
  } else {

  }
#line 2792
  page->ldv_12035.ldv_12031.private = (unsigned long )drbd_pp_pool;
#line 2793
  drbd_pp_pool = page;
#line 2788
  i = i + 1;
  ldv_42175: ;
#line 2788
  if (i < number) {
#line 2789
    goto ldv_42174;
  } else {

  }
#line 2795
  drbd_pp_vacant = number;
#line 2797
  return (0);
  Enomem: 
#line 2800
  drbd_destroy_mempools();
#line 2801
  return (-12);
}
}
#line 2804 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_notify_sys(struct notifier_block *this , unsigned long code , void *unused ) 
{ 


  {
#line 2811
  return (0);
}
}
#line 2814 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static struct notifier_block drbd_notifier  =    {& drbd_notify_sys, 0, 0};
#line 2818 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_release_ee_lists(struct drbd_conf *mdev ) 
{ 
  int rr ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;

  {
#line 2822
  rr = drbd_release_ee(mdev, & mdev->active_ee);
#line 2823
  if (rr != 0) {
#line 2824
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2824
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2824
    printk("<3>%s %s: %d EEs in active list found!\n", tmp___0, tmp, rr);
  } else {

  }
#line 2826
  rr = drbd_release_ee(mdev, & mdev->sync_ee);
#line 2827
  if (rr != 0) {
#line 2828
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2828
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2828
    printk("<3>%s %s: %d EEs in sync list found!\n", tmp___2, tmp___1, rr);
  } else {

  }
#line 2830
  rr = drbd_release_ee(mdev, & mdev->read_ee);
#line 2831
  if (rr != 0) {
#line 2832
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2832
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2832
    printk("<3>%s %s: %d EEs in read list found!\n", tmp___4, tmp___3, rr);
  } else {

  }
#line 2834
  rr = drbd_release_ee(mdev, & mdev->done_ee);
#line 2835
  if (rr != 0) {
#line 2836
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2836
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2836
    printk("<3>%s %s: %d EEs in done list found!\n", tmp___6, tmp___5, rr);
  } else {

  }
#line 2838
  rr = drbd_release_ee(mdev, & mdev->net_ee);
#line 2839
  if (rr != 0) {
#line 2840
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2840
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2840
    printk("<3>%s %s: %d EEs in net list found!\n", tmp___8, tmp___7, rr);
  } else {

  }
#line 2841
  return;
}
}
#line 2845 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_delete_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct drbd_conf *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  struct list_head *lp ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int _b ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 2847
  tmp = minor_to_mdev(minor);
#line 2847
  mdev = tmp;
#line 2849
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2850
    return;
  } else {

  }
#line 2853
  if (mdev->open_cnt != 0) {
#line 2854
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2854
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2854
    printk("<3>%s %s: open_cnt = %d in %s:%u", tmp___1, tmp___0, mdev->open_cnt, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2855);
  } else {

  }
#line 2857
  tmp___4 = list_empty((struct list_head  const  *)(& mdev->data.work.q));
#line 2857
  _b = tmp___4 == 0;
#line 2857
  if (_b != 0) {
#line 2857
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2857
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2857
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___6, tmp___5, "drbd_delete_device",
           (char *)"!list_empty(&mdev->data.work.q)", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           2857);
  } else {

  }
#line 2857
  if (_b != 0) {
#line 2859
    lp = mdev->data.work.q.next;
#line 2859
    goto ldv_42196;
    ldv_42195: 
#line 2860
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2860
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2860
    printk("<3>%s %s: lp = %p\n", tmp___3, tmp___2, lp);
#line 2859
    lp = lp->next;
    ldv_42196: 
#line 2859
    __builtin_prefetch((void const   *)lp->next);
#line 2859
    if ((unsigned long )(& mdev->data.work.q) != (unsigned long )lp) {
#line 2860
      goto ldv_42195;
    } else {

    }

  } else {

  }
#line 2865
  del_gendisk(mdev->vdisk);
#line 2870
  if ((unsigned long )mdev->this_bdev != (unsigned long )((struct block_device *)0)) {
#line 2871
    bdput(mdev->this_bdev);
  } else {

  }
#line 2873
  drbd_free_resources(mdev);
#line 2875
  drbd_release_ee_lists(mdev);
#line 2878
  kfree((void const   *)mdev->ee_hash);
#line 2884
  lc_destroy(mdev->act_log);
#line 2885
  lc_destroy(mdev->resync);
#line 2887
  kfree((void const   *)mdev->p_uuid);
#line 2890
  kfree((void const   *)mdev->int_dig_out);
#line 2891
  kfree((void const   *)mdev->int_dig_in);
#line 2892
  kfree((void const   *)mdev->int_dig_vv);
#line 2897
  drbd_free_mdev(mdev);
#line 2898
  return;
}
}
#line 2900 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_cleanup(void) 
{ 
  unsigned int i ;
  unsigned int tmp ;

  {
#line 2904
  unregister_reboot_notifier(& drbd_notifier);
#line 2906
  drbd_nl_cleanup();
#line 2908
  if ((unsigned long )minor_table != (unsigned long )((struct drbd_conf **)0)) {
#line 2909
    if ((unsigned long )drbd_proc != (unsigned long )((struct proc_dir_entry *)0)) {
#line 2910
      remove_proc_entry("drbd", 0);
    } else {

    }
#line 2911
    i = minor_count;
#line 2912
    goto ldv_42203;
    ldv_42202: 
#line 2913
    drbd_delete_device(i);
    ldv_42203: 
#line 2912
    tmp = i;
#line 2912
    i = i - 1U;
#line 2912
    if (tmp != 0U) {
#line 2913
      goto ldv_42202;
    } else {

    }
#line 2914
    drbd_destroy_mempools();
  } else {

  }
#line 2917
  kfree((void const   *)minor_table);
#line 2919
  unregister_blkdev(147U, "drbd");
#line 2921
  printk("<6>drbd: module cleanup done.\n");
#line 2922
  return;
}
}
#line 2931 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int drbd_congested(void *congested_data , int bdi_bits ) 
{ 
  struct drbd_conf *mdev ;
  struct request_queue *q ;
  char reason ;
  int r ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2933
  mdev = (struct drbd_conf *)congested_data;
#line 2935
  reason = 45;
#line 2936
  r = 0;
#line 2938
  tmp = __inc_ap_bio_cond___0(mdev);
#line 2938
  if (tmp == 0) {
#line 2940
    r = bdi_bits;
#line 2941
    reason = 100;
#line 2942
    goto out;
  } else {

  }
#line 2945
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2945
  if (tmp___0 != 0) {
#line 2946
    q = bdev_get_queue((mdev->ldev)->backing_bdev);
#line 2947
    r = bdi_congested(& q->backing_dev_info, bdi_bits);
#line 2948
    put_ldev(mdev);
#line 2949
    if (r != 0) {
#line 2950
      reason = 98;
    } else {

    }
  } else {

  }
#line 2953
  if ((bdi_bits & 4) != 0) {
#line 2953
    tmp___1 = constant_test_bit(21U, (unsigned long const volatile   *)(& mdev->flags));
#line 2953
    if (tmp___1 != 0) {
#line 2954
      r = r | 4;
#line 2955
      reason = (int )((signed char )reason) == 98 ? 97 : 110;
    } else {

    }
  } else {

  }
  out: 
#line 2959
  mdev->congestion_reason = reason;
#line 2960
  return (r);
}
}
#line 2963 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
struct drbd_conf *drbd_new_device(unsigned int minor ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;
  struct request_queue *q ;
  void *tmp ;
  bool tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  void *tmp___4 ;
  void *tmp___5 ;

  {
#line 2970
  tmp = kzalloc(3952UL, 208U);
#line 2970
  mdev = (struct drbd_conf *)tmp;
#line 2971
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2972
    return (0);
  } else {

  }
#line 2973
  tmp___0 = zalloc_cpumask_var(& mdev->cpu_mask, 208U);
#line 2973
  if (tmp___0) {
#line 2973
    tmp___1 = 0;
  } else {
#line 2973
    tmp___1 = 1;
  }
#line 2973
  if (tmp___1) {
#line 2974
    goto out_no_cpumask;
  } else {

  }
#line 2976
  mdev->minor = minor;
#line 2978
  drbd_init_set_defaults(mdev);
#line 2980
  q = blk_alloc_queue(208U);
#line 2981
  if ((unsigned long )q == (unsigned long )((struct request_queue *)0)) {
#line 2982
    goto out_no_q;
  } else {

  }
#line 2983
  mdev->rq_queue = q;
#line 2984
  q->queuedata = (void *)mdev;
#line 2985
  blk_queue_max_segment_size(q, 32768U);
#line 2987
  disk = alloc_disk(1);
#line 2988
  if ((unsigned long )disk == (unsigned long )((struct gendisk *)0)) {
#line 2989
    goto out_no_disk;
  } else {

  }
#line 2990
  mdev->vdisk = disk;
#line 2992
  set_disk_ro(disk, 1);
#line 2994
  disk->queue = q;
#line 2995
  disk->major = 147;
#line 2996
  disk->first_minor = (int )minor;
#line 2997
  disk->fops = (struct block_device_operations  const  *)(& drbd_ops);
#line 2998
  sprintf((char *)(& disk->disk_name), "drbd%d", minor);
#line 2999
  disk->private_data = (void *)mdev;
#line 3001
  mdev->this_bdev = bdget(minor | 154140672U);
#line 3003
  (mdev->this_bdev)->bd_contains = mdev->this_bdev;
#line 3005
  q->backing_dev_info.congested_fn = & drbd_congested;
#line 3006
  q->backing_dev_info.congested_data = (void *)mdev;
#line 3008
  blk_queue_make_request(q, & drbd_make_request_26);
#line 3009
  blk_queue_bounce_limit(q, 0xffffffffffffffffULL);
#line 3010
  blk_queue_merge_bvec(q, & drbd_merge_bvec);
#line 3011
  q->queue_lock = & mdev->req_lock;
#line 3013
  q->unplug_fn = & drbd_unplug_fn;
#line 3015
  mdev->md_io_page = alloc_pages(208U, 0U);
#line 3016
  if ((unsigned long )mdev->md_io_page == (unsigned long )((struct page *)0)) {
#line 3017
    goto out_no_io_page;
  } else {

  }
#line 3019
  tmp___2 = drbd_bm_init(mdev);
#line 3019
  if (tmp___2 != 0) {
#line 3020
    goto out_no_bitmap;
  } else {

  }
#line 3022
  tmp___3 = tl_init(mdev);
#line 3022
  if (tmp___3 == 0) {
#line 3023
    goto out_no_tl;
  } else {

  }
#line 3025
  tmp___4 = kzalloc(120UL, 208U);
#line 3025
  mdev->app_reads_hash = (struct hlist_head *)tmp___4;
#line 3026
  if ((unsigned long )mdev->app_reads_hash == (unsigned long )((struct hlist_head *)0)) {
#line 3027
    goto out_no_app_reads;
  } else {

  }
#line 3029
  tmp___5 = kzalloc(40UL, 208U);
#line 3029
  mdev->current_epoch = (struct drbd_epoch *)tmp___5;
#line 3030
  if ((unsigned long )mdev->current_epoch == (unsigned long )((struct drbd_epoch *)0)) {
#line 3031
    goto out_no_epoch;
  } else {

  }
#line 3033
  INIT_LIST_HEAD(& (mdev->current_epoch)->list);
#line 3034
  mdev->epochs = 1U;
#line 3036
  return (mdev);
  out_no_epoch: 
#line 3041
  kfree((void const   *)mdev->app_reads_hash);
  out_no_app_reads: 
#line 3043
  tl_cleanup(mdev);
  out_no_tl: 
#line 3045
  drbd_bm_cleanup(mdev);
  out_no_bitmap: 
#line 3047
  __free_pages(mdev->md_io_page, 0U);
  out_no_io_page: 
#line 3049
  put_disk(disk);
  out_no_disk: 
#line 3051
  blk_cleanup_queue(q);
  out_no_q: 
#line 3053
  free_cpumask_var(mdev->cpu_mask);
  out_no_cpumask: 
#line 3055
  kfree((void const   *)mdev);
#line 3056
  return (0);
}
}
#line 3061 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_mdev(struct drbd_conf *mdev ) 
{ 


  {
#line 3063
  kfree((void const   *)mdev->current_epoch);
#line 3064
  kfree((void const   *)mdev->app_reads_hash);
#line 3065
  tl_cleanup(mdev);
#line 3066
  if ((unsigned long )mdev->bitmap != (unsigned long )((struct drbd_bitmap *)0)) {
#line 3067
    drbd_bm_cleanup(mdev);
  } else {

  }
#line 3068
  __free_pages(mdev->md_io_page, 0U);
#line 3069
  put_disk(mdev->vdisk);
#line 3070
  blk_cleanup_queue(mdev->rq_queue);
#line 3071
  free_cpumask_var(mdev->cpu_mask);
#line 3072
  kfree((void const   *)mdev);
#line 3073
  return;
}
}
#line 3076 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_init(void) 
{ 
  int err ;
  struct lock_class_key __key ;
  void *tmp ;
  struct lock_class_key __key___0 ;
  char const   *tmp___0 ;

  {
#line 3087
  if (minor_count == 0U || minor_count > 255U) {
#line 3088
    printk("<3>drbd: invalid minor_count (%d)\n", minor_count);
#line 3091
    return (-22);
  } else {

  }
#line 3097
  err = drbd_nl_init();
#line 3098
  if (err != 0) {
#line 3099
    return (err);
  } else {

  }
#line 3101
  err = register_blkdev(147U, "drbd");
#line 3102
  if (err != 0) {
#line 3103
    printk("<3>drbd: unable to register block device major %d\n", 147);
#line 3106
    return (err);
  } else {

  }
#line 3109
  register_reboot_notifier(& drbd_notifier);
#line 3114
  err = -12;
#line 3116
  __init_waitqueue_head(& drbd_pp_wait, & __key);
#line 3118
  drbd_proc = 0;
#line 3119
  tmp = kzalloc((unsigned long )minor_count * 8UL, 208U);
#line 3119
  minor_table = (struct drbd_conf **)tmp;
#line 3121
  if ((unsigned long )minor_table == (unsigned long )((struct drbd_conf **)0)) {
#line 3122
    goto Enomem;
  } else {

  }
#line 3124
  err = drbd_create_mempools();
#line 3125
  if (err != 0) {
#line 3126
    goto Enomem;
  } else {

  }
#line 3128
  drbd_proc = proc_create("drbd", 33060U, 0, (struct file_operations  const  *)(& drbd_proc_fops));
#line 3129
  if ((unsigned long )drbd_proc == (unsigned long )((struct proc_dir_entry *)0)) {
#line 3130
    printk("<3>drbd: unable to register proc file\n");
#line 3131
    goto Enomem;
  } else {

  }
#line 3134
  __rwlock_init(& global_state_lock, "&global_state_lock", & __key___0);
#line 3136
  printk("<6>drbd: initialized. Version: 8.3.3rc2 (api:%d/proto:%d-%d)\n", 88, 86,
         91);
#line 3139
  tmp___0 = drbd_buildtag();
#line 3139
  printk("<6>drbd: %s\n", tmp___0);
#line 3140
  printk("<6>drbd: registered as block device major %d\n", 147);
#line 3142
  printk("<6>drbd: minor_table @ 0x%p\n", minor_table);
#line 3144
  return (0);
  Enomem: 
#line 3147
  drbd_cleanup();
#line 3148
  if (err == -12) {
#line 3150
    printk("<3>drbd: ran out of memory\n");
  } else {
#line 3152
    printk("<3>drbd: initialization failure\n");
  }
#line 3153
  return (err);
}
}
#line 3156 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_bc(struct drbd_backing_dev *ldev ) 
{ 


  {
#line 3158
  if ((unsigned long )ldev == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 3159
    return;
  } else {

  }
#line 3161
  bd_release(ldev->backing_bdev);
#line 3162
  bd_release(ldev->md_bdev);
#line 3164
  fput(ldev->lo_file);
#line 3165
  fput(ldev->md_file);
#line 3167
  kfree((void const   *)ldev);
#line 3168
  return;
}
}
#line 3170 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_sock(struct drbd_conf *mdev ) 
{ 


  {
#line 3172
  if ((unsigned long )mdev->data.socket != (unsigned long )((struct socket *)0)) {
#line 3173
    kernel_sock_shutdown(mdev->data.socket, SHUT_RDWR);
#line 3174
    sock_release(mdev->data.socket);
#line 3175
    mdev->data.socket = 0;
  } else {

  }
#line 3177
  if ((unsigned long )mdev->meta.socket != (unsigned long )((struct socket *)0)) {
#line 3178
    kernel_sock_shutdown(mdev->meta.socket, SHUT_RDWR);
#line 3179
    sock_release(mdev->meta.socket);
#line 3180
    mdev->meta.socket = 0;
  } else {

  }
#line 3182
  return;
}
}
#line 3185 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_free_resources(struct drbd_conf *mdev ) 
{ 


  {
#line 3187
  crypto_free_hash(mdev->csums_tfm);
#line 3188
  mdev->csums_tfm = 0;
#line 3189
  crypto_free_hash(mdev->verify_tfm);
#line 3190
  mdev->verify_tfm = 0;
#line 3191
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 3192
  mdev->cram_hmac_tfm = 0;
#line 3193
  crypto_free_hash(mdev->integrity_w_tfm);
#line 3194
  mdev->integrity_w_tfm = 0;
#line 3195
  crypto_free_hash(mdev->integrity_r_tfm);
#line 3196
  mdev->integrity_r_tfm = 0;
#line 3198
  drbd_free_sock(mdev);
#line 3200
  drbd_free_bc(mdev->ldev);
#line 3200
  mdev->ldev = 0;
#line 3201
  return;
}
}
#line 3228 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_sync(struct drbd_conf *mdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  sector_t sector ;
  int i ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  sector_t tmp___2 ;
  __u64 tmp___3 ;
  __u64 tmp___4 ;
  __u32 tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  __u32 tmp___8 ;
  __u64 tmp___9 ;
  __u32 tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;
  sector_t tmp___17 ;

  {
#line 3234
  tmp = test_and_clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
#line 3234
  if (tmp == 0) {
#line 3235
    return;
  } else {

  }
#line 3236
  del_timer(& mdev->md_sync_timer);
#line 3240
  tmp___0 = _get_ldev_if_state(mdev, D_FAILED);
#line 3240
  if (tmp___0 == 0) {
#line 3241
    return;
  } else {

  }
#line 3243
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3244
  tmp___1 = lowmem_page_address(mdev->md_io_page);
#line 3244
  buffer = (struct meta_data_on_disk *)tmp___1;
#line 3245
  memset((void *)buffer, 0, 512UL);
#line 3247
  tmp___2 = drbd_get_capacity(mdev->this_bdev);
#line 3247
  tmp___3 = __fswab64((__u64 )tmp___2);
#line 3247
  buffer->la_size = tmp___3;
#line 3248
  i = 0;
#line 3248
  goto ldv_42267;
  ldv_42266: 
#line 3249
  tmp___4 = __fswab64((mdev->ldev)->md.uuid[i]);
#line 3249
  buffer->uuid[i] = tmp___4;
#line 3248
  i = i + 1;
  ldv_42267: ;
#line 3248
  if (i <= 3) {
#line 3249
    goto ldv_42266;
  } else {

  }
#line 3250
  tmp___5 = __fswab32((mdev->ldev)->md.flags);
#line 3250
  buffer->flags = tmp___5;
#line 3251
  buffer->magic = 1795323011U;
#line 3253
  tmp___6 = __fswab32((mdev->ldev)->md.md_size_sect);
#line 3253
  buffer->md_size_sect = tmp___6;
#line 3254
  tmp___7 = __fswab32((__u32 )(mdev->ldev)->md.al_offset);
#line 3254
  buffer->al_offset = tmp___7;
#line 3255
  tmp___8 = __fswab32((mdev->act_log)->nr_elements);
#line 3255
  buffer->al_nr_extents = tmp___8;
#line 3256
  buffer->bm_bytes_per_bit = 1048576U;
#line 3257
  tmp___9 = __fswab64((mdev->ldev)->md.device_uuid);
#line 3257
  buffer->device_uuid = tmp___9;
#line 3259
  tmp___10 = __fswab32((__u32 )(mdev->ldev)->md.bm_offset);
#line 3259
  buffer->bm_offset = tmp___10;
#line 3261
  tmp___13 = drbd_md_ss__(mdev, mdev->ldev);
#line 3261
  if ((unsigned long long )tmp___13 != (mdev->ldev)->md.md_offset) {
#line 3261
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3261
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3261
    printk("<3>%s %s: ASSERT( drbd_md_ss__(mdev, mdev->ldev) == mdev->ldev->md.md_offset ) in %s:%d\n",
           tmp___12, tmp___11, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3261);
  } else {

  }
#line 3262
  sector = (sector_t )(mdev->ldev)->md.md_offset;
#line 3264
  tmp___16 = drbd_md_sync_page_io(mdev, mdev->ldev, sector, 1);
#line 3264
  if (tmp___16 != 0) {
#line 3265
    clear_bit(6, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 3268
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3268
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3268
    printk("<3>%s %s: meta data update failed!\n", tmp___15, tmp___14);
#line 3270
    drbd_chk_io_error____2(mdev, 1, 1, "drbd_md_sync");
  }
#line 3275
  tmp___17 = drbd_get_capacity(mdev->this_bdev);
#line 3275
  (mdev->ldev)->md.la_size_sect = (u64 )tmp___17;
#line 3277
  mutex_unlock(& mdev->md_io_mutex);
#line 3278
  put_ldev(mdev);
#line 3279
  return;
}
}
#line 3289 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_read(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  struct meta_data_on_disk *buffer ;
  int i ;
  int rv ;
  int tmp ;
  void *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  __u32 tmp___6 ;
  __u32 tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  __u32 tmp___10 ;
  __u32 tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  __u32 tmp___14 ;
  __u32 tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  __u32 tmp___18 ;
  __u32 tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  __u32 tmp___22 ;
  __u64 tmp___23 ;
  __u64 tmp___24 ;
  __u32 tmp___25 ;
  __u32 tmp___26 ;
  __u64 tmp___27 ;

  {
#line 3292
  rv = 101;
#line 3294
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3294
  if (tmp == 0) {
#line 3295
    return (118);
  } else {

  }
#line 3297
  mutex_lock_nested(& mdev->md_io_mutex, 0U);
#line 3298
  tmp___0 = lowmem_page_address(mdev->md_io_page);
#line 3298
  buffer = (struct meta_data_on_disk *)tmp___0;
#line 3300
  tmp___3 = drbd_md_sync_page_io(mdev, bdev, (sector_t )bdev->md.md_offset, 0);
#line 3300
  if (tmp___3 == 0) {
#line 3303
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3303
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3303
    printk("<3>%s %s: Error while reading metadata.\n", tmp___2, tmp___1);
#line 3304
    rv = 118;
#line 3305
    goto err;
  } else {

  }
#line 3308
  tmp___6 = __fswab32(buffer->magic);
#line 3308
  if (tmp___6 != 2205418091U) {
#line 3309
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3309
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3309
    printk("<3>%s %s: Error while reading metadata, magic not found.\n", tmp___5,
           tmp___4);
#line 3310
    rv = 119;
#line 3311
    goto err;
  } else {

  }
#line 3313
  tmp___10 = __fswab32(buffer->al_offset);
#line 3313
  if (tmp___10 != (unsigned int )bdev->md.al_offset) {
#line 3314
    tmp___7 = __fswab32(buffer->al_offset);
#line 3314
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3314
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3314
    printk("<3>%s %s: unexpected al_offset: %d (expected %d)\n", tmp___9, tmp___8,
           tmp___7, bdev->md.al_offset);
#line 3316
    rv = 119;
#line 3317
    goto err;
  } else {

  }
#line 3319
  tmp___14 = __fswab32(buffer->bm_offset);
#line 3319
  if (tmp___14 != (unsigned int )bdev->md.bm_offset) {
#line 3320
    tmp___11 = __fswab32(buffer->bm_offset);
#line 3320
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3320
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3320
    printk("<3>%s %s: unexpected bm_offset: %d (expected %d)\n", tmp___13, tmp___12,
           tmp___11, bdev->md.bm_offset);
#line 3322
    rv = 119;
#line 3323
    goto err;
  } else {

  }
#line 3325
  tmp___18 = __fswab32(buffer->md_size_sect);
#line 3325
  if (tmp___18 != bdev->md.md_size_sect) {
#line 3326
    tmp___15 = __fswab32(buffer->md_size_sect);
#line 3326
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3326
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3326
    printk("<3>%s %s: unexpected md_size: %u (expected %u)\n", tmp___17, tmp___16,
           tmp___15, bdev->md.md_size_sect);
#line 3328
    rv = 119;
#line 3329
    goto err;
  } else {

  }
#line 3332
  tmp___22 = __fswab32(buffer->bm_bytes_per_bit);
#line 3332
  if (tmp___22 != 4096U) {
#line 3333
    tmp___19 = __fswab32(buffer->bm_bytes_per_bit);
#line 3333
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3333
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3333
    printk("<3>%s %s: unexpected bm_bytes_per_bit: %u (expected %u)\n", tmp___21,
           tmp___20, tmp___19, 4096);
#line 3335
    rv = 119;
#line 3336
    goto err;
  } else {

  }
#line 3339
  tmp___23 = __fswab64(buffer->la_size);
#line 3339
  bdev->md.la_size_sect = tmp___23;
#line 3340
  i = 0;
#line 3340
  goto ldv_42279;
  ldv_42278: 
#line 3341
  tmp___24 = __fswab64(buffer->uuid[i]);
#line 3341
  bdev->md.uuid[i] = tmp___24;
#line 3340
  i = i + 1;
  ldv_42279: ;
#line 3340
  if (i <= 3) {
#line 3341
    goto ldv_42278;
  } else {

  }
#line 3342
  tmp___25 = __fswab32(buffer->flags);
#line 3342
  bdev->md.flags = tmp___25;
#line 3343
  tmp___26 = __fswab32(buffer->al_nr_extents);
#line 3343
  mdev->sync_conf.al_extents = (int )tmp___26;
#line 3344
  tmp___27 = __fswab64(buffer->device_uuid);
#line 3344
  bdev->md.device_uuid = tmp___27;
#line 3346
  if (mdev->sync_conf.al_extents <= 6) {
#line 3347
    mdev->sync_conf.al_extents = 127;
  } else {

  }
  err: 
#line 3350
  mutex_unlock(& mdev->md_io_mutex);
#line 3351
  put_ldev(mdev);
#line 3353
  return (rv);
}
}
#line 3364 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_mark_dirty(struct drbd_conf *mdev ) 
{ 


  {
#line 3366
  set_bit(6U, (unsigned long volatile   *)(& mdev->flags));
#line 3367
  mod_timer(& mdev->md_sync_timer, (unsigned long )jiffies + 1250UL);
#line 3368
  return;
}
}
#line 3371 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void drbd_uuid_move_history(struct drbd_conf *mdev ) 
{ 
  int i ;

  {
#line 3375
  i = 2;
#line 3375
  goto ldv_42289;
  ldv_42288: 
#line 3376
  (mdev->ldev)->md.uuid[i + 1] = (mdev->ldev)->md.uuid[i];
#line 3375
  i = i + 1;
  ldv_42289: ;
#line 3375
  if (i <= 2) {
#line 3376
    goto ldv_42288;
  } else {

  }

#line 3380
  return;
}
}
#line 3379 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void _drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3381
  if (idx == 0) {
#line 3382
    if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 3383
      val = val | 1ULL;
    } else {
#line 3385
      val = val & 0xfffffffffffffffeULL;
    }
#line 3387
    drbd_set_ed_uuid(mdev, val);
  } else {

  }
#line 3390
  (mdev->ldev)->md.uuid[idx] = val;
#line 3391
  drbd_md_mark_dirty(mdev);
#line 3392
  return;
}
}
#line 3395 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set(struct drbd_conf *mdev , int idx , u64 val ) 
{ 


  {
#line 3397
  if ((mdev->ldev)->md.uuid[idx] != 0ULL) {
#line 3398
    drbd_uuid_move_history(mdev);
#line 3399
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[idx];
  } else {

  }
#line 3401
  _drbd_uuid_set(mdev, idx, val);
#line 3402
  return;
}
}
#line 3411 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_new_current(struct drbd_conf *mdev ) 
{ 
  u64 val ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 3415
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3415
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3415
  printk("<6>%s %s: Creating new current UUID\n", tmp___0, tmp);
#line 3416
  if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3416
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3416
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3416
    printk("<3>%s %s: ASSERT( mdev->ldev->md.uuid[UI_BITMAP] == 0 ) in %s:%d\n", tmp___2,
           tmp___1, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3416);
  } else {

  }
#line 3417
  (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[0];
#line 3419
  get_random_bytes((void *)(& val), 8);
#line 3420
  _drbd_uuid_set(mdev, 0, val);
#line 3421
  return;
}
}
#line 3423 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_uuid_set_bm(struct drbd_conf *mdev , u64 val ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3425
  if ((mdev->ldev)->md.uuid[1] == 0ULL && val == 0ULL) {
#line 3426
    return;
  } else {

  }
#line 3428
  if (val == 0ULL) {
#line 3429
    drbd_uuid_move_history(mdev);
#line 3430
    (mdev->ldev)->md.uuid[2] = (mdev->ldev)->md.uuid[1];
#line 3431
    (mdev->ldev)->md.uuid[1] = 0ULL;
  } else {
#line 3433
    if ((mdev->ldev)->md.uuid[1] != 0ULL) {
#line 3434
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3434
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3434
      printk("<4>%s %s: bm UUID already set", tmp___0, tmp);
    } else {

    }
#line 3436
    (mdev->ldev)->md.uuid[1] = val;
#line 3437
    (mdev->ldev)->md.uuid[1] = (mdev->ldev)->md.uuid[1] & 0xfffffffffffffffeULL;
  }
#line 3440
  drbd_md_mark_dirty(mdev);
#line 3441
  return;
}
}
#line 3449 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_set_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3451
  rv = -5;
#line 3453
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3453
  if (tmp != 0) {
#line 3454
    drbd_md_set_flag(mdev, 8);
#line 3455
    drbd_md_sync(mdev);
#line 3456
    drbd_bm_set_all(mdev);
#line 3458
    rv = drbd_bm_write(mdev);
#line 3460
    if (rv == 0) {
#line 3461
      drbd_md_clear_flag(mdev, 8);
#line 3462
      drbd_md_sync(mdev);
    } else {

    }
#line 3465
    put_ldev(mdev);
  } else {

  }
#line 3468
  return (rv);
}
}
#line 3477 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bmio_clear_n_write(struct drbd_conf *mdev ) 
{ 
  int rv ;
  int tmp ;

  {
#line 3479
  rv = -5;
#line 3481
  tmp = _get_ldev_if_state(mdev, D_ATTACHING);
#line 3481
  if (tmp != 0) {
#line 3482
    drbd_bm_clear_all(mdev);
#line 3483
    rv = drbd_bm_write(mdev);
#line 3484
    put_ldev(mdev);
  } else {

  }
#line 3487
  return (rv);
}
}
#line 3490 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_bitmap_io(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  struct bm_io_work *work ;
  struct drbd_work  const  *__mptr ;
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  int tmp___1 ;

  {
#line 3492
  __mptr = (struct drbd_work  const  *)w;
#line 3492
  work = (struct bm_io_work *)__mptr;
#line 3495
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3495
  if (tmp___1 != 0) {
#line 3495
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3495
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3495
    printk("<3>%s %s: ASSERT( atomic_read(&mdev->ap_bio_cnt) == 0 ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3495);
  } else {

  }
#line 3497
  drbd_bm_lock(mdev, work->why);
#line 3498
  rv = (*(work->io_fn))(mdev);
#line 3499
  drbd_bm_unlock(mdev);
#line 3501
  clear_bit(18, (unsigned long volatile   *)(& mdev->flags));
#line 3502
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 3504
  if ((unsigned long )work->done != (unsigned long )((void (*)(struct drbd_conf * ,
                                                               int  ))0)) {
#line 3505
    (*(work->done))(mdev, rv);
  } else {

  }
#line 3507
  clear_bit(19, (unsigned long volatile   *)(& mdev->flags));
#line 3508
  work->why = 0;
#line 3510
  return (1);
}
}
#line 3525 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_queue_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) ,
                          void (*done)(struct drbd_conf * , int  ) , char *why ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  int tmp___10 ;
  char const   *tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  char const   *tmp___14 ;
  int tmp___15 ;
  int tmp___16 ;

  {
#line 3530
  tmp___1 = get_current();
#line 3530
  if ((unsigned long )tmp___1 != (unsigned long )mdev->worker.task) {
#line 3530
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3530
    printk("<3>%s %s: ASSERT( current == mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3530);
  } else {

  }
#line 3532
  tmp___4 = constant_test_bit(19U, (unsigned long const volatile   *)(& mdev->flags));
#line 3532
  if (tmp___4 != 0) {
#line 3532
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3532
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3532
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO_QUEUED, &mdev->flags) ) in %s:%d\n",
           tmp___3, tmp___2, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3532);
  } else {

  }
#line 3533
  tmp___7 = constant_test_bit(18U, (unsigned long const volatile   *)(& mdev->flags));
#line 3533
  if (tmp___7 != 0) {
#line 3533
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3533
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3533
    printk("<3>%s %s: ASSERT( !test_bit(BITMAP_IO, &mdev->flags) ) in %s:%d\n", tmp___6,
           tmp___5, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3533);
  } else {

  }
#line 3534
  tmp___10 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3534
  if (tmp___10 == 0) {
#line 3534
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3534
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3534
    printk("<3>%s %s: ASSERT( list_empty(&mdev->bm_io_work.w.list) ) in %s:%d\n",
           tmp___9, tmp___8, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3534);
  } else {

  }
#line 3535
  if ((unsigned long )mdev->bm_io_work.why != (unsigned long )((char *)0)) {
#line 3536
    tmp___11 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3536
    tmp___12 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3536
    printk("<3>%s %s: FIXME going to queue \'%s\' but \'%s\' still pending?\n", tmp___12,
           tmp___11, why, mdev->bm_io_work.why);
  } else {

  }
#line 3539
  mdev->bm_io_work.io_fn = io_fn;
#line 3540
  mdev->bm_io_work.done = done;
#line 3541
  mdev->bm_io_work.why = why;
#line 3543
  set_bit(18U, (unsigned long volatile   *)(& mdev->flags));
#line 3544
  tmp___16 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 3544
  if (tmp___16 == 0) {
#line 3545
    tmp___15 = list_empty((struct list_head  const  *)(& mdev->bm_io_work.w.list));
#line 3545
    if (tmp___15 != 0) {
#line 3546
      set_bit(19U, (unsigned long volatile   *)(& mdev->flags));
#line 3547
      drbd_queue_work(& mdev->data.work, & mdev->bm_io_work.w);
    } else {
#line 3549
      tmp___13 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
      tmp___14 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3549
      printk("<3>%s %s: FIXME avoided double queuing bm_io_work\n", tmp___14, tmp___13);
    }
  } else {

  }
#line 3550
  return;
}
}
#line 3562 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_bitmap_io(struct drbd_conf *mdev , int (*io_fn)(struct drbd_conf * ) , char *why ) 
{ 
  int rv ;
  char const   *tmp ;
  char const   *tmp___0 ;
  struct task_struct *tmp___1 ;

  {
#line 3566
  tmp___1 = get_current();
#line 3566
  if ((unsigned long )tmp___1 == (unsigned long )mdev->worker.task) {
#line 3566
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3566
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3566
    printk("<3>%s %s: ASSERT( current != mdev->worker.task ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared",
           3566);
  } else {

  }
#line 3568
  drbd_suspend_io(mdev);
#line 3570
  drbd_bm_lock(mdev, why);
#line 3571
  rv = (*io_fn)(mdev);
#line 3572
  drbd_bm_unlock(mdev);
#line 3574
  drbd_resume_io(mdev);
#line 3576
  return (rv);
}
}
#line 3579 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_set_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3581
  if (((mdev->ldev)->md.flags & (u32 )flag) != (u32 )flag) {
#line 3582
    drbd_md_mark_dirty(mdev);
#line 3583
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags | (u32 )flag;
  } else {

  }
#line 3585
  return;
}
}
#line 3587 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void drbd_md_clear_flag(struct drbd_conf *mdev , int flag ) 
{ 


  {
#line 3589
  if (((mdev->ldev)->md.flags & (u32 )flag) != 0U) {
#line 3590
    drbd_md_mark_dirty(mdev);
#line 3591
    (mdev->ldev)->md.flags = (mdev->ldev)->md.flags & (u32 )(~ flag);
  } else {

  }
#line 3593
  return;
}
}
#line 3594 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
int drbd_md_test_flag(struct drbd_backing_dev *bdev , int flag ) 
{ 


  {
#line 3596
  return ((bdev->md.flags & (u32 )flag) != 0U);
}
}
#line 3599 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static void md_sync_timer_fn(unsigned long data ) 
{ 
  struct drbd_conf *mdev ;

  {
#line 3601
  mdev = (struct drbd_conf *)data;
#line 3603
  drbd_queue_work_front(& mdev->data.work, & mdev->md_sync_work);
#line 3604
  return;
}
}
#line 3606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static int w_md_sync(struct drbd_conf *mdev , struct drbd_work *w , int unused ) 
{ 
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 3608
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3608
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3608
  printk("<4>%s %s: md_sync_timer expired! Worker calls drbd_md_sync().\n", tmp___0,
         tmp);
#line 3609
  drbd_md_sync(mdev);
#line 3611
  return (1);
}
}
#line 3631 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static unsigned long _drbd_fault_random(struct fault_random_state *rsp ) 
{ 
  __u32 tmp ;

  {
#line 3635
  rsp->count = rsp->count - 1UL;
#line 3640
  rsp->state = rsp->state * 39916801UL + 479001701UL;
#line 3641
  tmp = __fswahw32((__u32 )rsp->state);
#line 3641
  return ((unsigned long )tmp);
}
}
#line 3645 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
static char *_drbd_fault_str(unsigned int type ) 
{ 
  char *_faults[9U] ;

  {
#line 3646
  _faults[0] = (char *)"Meta-data write";
#line 3646
  _faults[1] = (char *)"Meta-data read";
#line 3646
  _faults[2] = (char *)"Resync write";
#line 3646
  _faults[3] = (char *)"Resync read";
#line 3646
  _faults[4] = (char *)"Data write";
#line 3646
  _faults[5] = (char *)"Data read";
#line 3646
  _faults[6] = (char *)"Data read ahead";
#line 3646
  _faults[7] = (char *)"BM allocation";
#line 3646
  _faults[8] = (char *)"EE allocation";
#line 3658
  return (type <= 8U ? _faults[type] : (char *)"**Unknown**");
}
}
#line 3662 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
unsigned int _drbd_insert_fault(struct drbd_conf *mdev , unsigned int type ) 
{ 
  struct fault_random_state rrs ;
  unsigned int ret ;
  unsigned int tmp ;
  unsigned long tmp___0 ;
  int tmp___1 ;
  char *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  int tmp___5 ;

  {
#line 3664
  rrs.state = 0UL;
#line 3664
  rrs.count = 0UL;
#line 3666
  if (fault_devs == 0) {
#line 3666
    goto _L;
  } else {
#line 3666
    tmp = mdev_to_minor(mdev);
#line 3666
    if ((fault_devs >> (int )tmp) & 1) {
      _L: /* CIL Label */ 
#line 3666
      tmp___0 = _drbd_fault_random(& rrs);
#line 3666
      if (tmp___0 % 100UL + 1UL <= (unsigned long )fault_rate) {
#line 3666
        tmp___1 = 1;
      } else {
#line 3666
        tmp___1 = 0;
      }
    } else {
#line 3666
      tmp___1 = 0;
    }
  }
#line 3666
  ret = (unsigned int )tmp___1;
#line 3671
  if (ret != 0U) {
#line 3672
    fault_count = fault_count + 1;
#line 3674
    tmp___5 = printk_ratelimit();
#line 3674
    if (tmp___5 != 0) {
#line 3675
      tmp___2 = _drbd_fault_str(type);
#line 3675
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3675
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 3675
      printk("<4>%s %s: ***Simulating %s failure\n", tmp___4, tmp___3, tmp___2);
    } else {

    }
  } else {

  }
#line 3679
  return (ret);
}
}
#line 3683 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
char const   *drbd_buildtag(void) 
{ 
  char buildtag[38U] ;
  unsigned int tmp ;

  {
#line 3688
  buildtag[0] = '\000';
#line 3688
  tmp = 1U;
#line 3688
  while (1) {
#line 3688
    if (tmp >= 38U) {
#line 3688
      break;
    } else {

    }
#line 3688
    buildtag[tmp] = (char)0;
#line 3688
    tmp = tmp + 1U;
  }
#line 3690
  if ((int )((signed char )buildtag[0]) == 0) {
#line 3692
    if ((unsigned long )(& __this_module) != (unsigned long )((struct module *)0)) {
#line 3693
      sprintf((char *)(& buildtag), "srcversion: %-24s", __this_module.srcversion);
    } else {
#line 3696
      buildtag[0] = 98;
    }
  } else {

  }
#line 3699
  return ((char const   *)(& buildtag));
}
}
#line 3747 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_main6_sequence_infinite_withcheck_stateful(void) 
{ 
  struct block_device *var_group1 ;
  fmode_t var_drbd_open_60_p1 ;
  int res_drbd_open_60 ;
  struct gendisk *var_group2 ;
  fmode_t var_drbd_release_61_p1 ;
  struct notifier_block *var_group3 ;
  unsigned long var_drbd_notify_sys_68_p1 ;
  void *var_drbd_notify_sys_68_p2 ;
  unsigned long var_md_sync_timer_fn_93_p0 ;
  int ldv_s_drbd_ops_block_device_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 3971
  ldv_s_drbd_ops_block_device_operations = 0;
#line 3923
  LDV_IN_INTERRUPT = 1;
#line 3932
  ldv_initialize();
#line 3959
  ldv_handler_precall();
#line 3960
  tmp = drbd_init();
#line 3960
  if (tmp != 0) {
#line 3961
    goto ldv_final;
  } else {

  }
#line 3978
  goto ldv_42449;
  ldv_42448: 
#line 3982
  tmp___0 = nondet_int();
#line 3982
  switch (tmp___0) {
  case 0: ;
#line 3987
  if (ldv_s_drbd_ops_block_device_operations == 0) {
#line 4013
    ldv_handler_precall();
#line 4014
    res_drbd_open_60 = drbd_open(var_group1, var_drbd_open_60_p1);
#line 4015
    ldv_check_return_value(res_drbd_open_60);
#line 4016
    if (res_drbd_open_60 != 0) {
#line 4017
      goto ldv_module_exit;
    } else {

    }
#line 4030
    ldv_s_drbd_ops_block_device_operations = ldv_s_drbd_ops_block_device_operations + 1;
  } else {

  }
#line 4036
  goto ldv_42443;
  case 1: ;
#line 4040
  if (ldv_s_drbd_ops_block_device_operations == 1) {
#line 4066
    ldv_handler_precall();
#line 4067
    drbd_release(var_group2, var_drbd_release_61_p1);
#line 4080
    ldv_s_drbd_ops_block_device_operations = 0;
  } else {

  }
#line 4086
  goto ldv_42443;
  case 2: 
#line 4116
  ldv_handler_precall();
#line 4117
  drbd_notify_sys(var_group3, var_drbd_notify_sys_68_p1, var_drbd_notify_sys_68_p2);
#line 4136
  goto ldv_42443;
  case 3: 
#line 4169
  ldv_handler_precall();
#line 4170
  md_sync_timer_fn(var_md_sync_timer_fn_93_p0);
#line 4186
  goto ldv_42443;
  default: ;
#line 4187
  goto ldv_42443;
  }
  ldv_42443: ;
  ldv_42449: 
#line 3978
  tmp___1 = nondet_int();
#line 3978
  if (tmp___1 != 0 || ldv_s_drbd_ops_block_device_operations != 0) {
#line 3980
    goto ldv_42448;
  } else {

  }

  ldv_module_exit: 
#line 4220
  ldv_handler_precall();
#line 4221
  drbd_cleanup();
  ldv_final: 
#line 4236
  ldv_check_final_state();
#line 4239
  return;
}
}
#line 4243 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_1(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4248
  ldv_module_put(ldv_func_arg1);
#line 4249
  return;
}
}
#line 4251 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
__inline static int ldv_try_module_get_2(struct module *module ) 
{ 
  int tmp ;

  {
#line 4256
  tmp = ldv_try_module_get(module);
#line 4256
  return (tmp);
}
}
#line 4259 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_main.c.prepared"
void ldv_module_put_3(struct module *ldv_func_arg1 ) 
{ 


  {
#line 4264
  ldv_module_put(ldv_func_arg1);
#line 4265
  return;
}
}
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_conn_s_names[22U]  = 
#line 35 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
  {      "StandAlone",      "Disconnecting",      "Unconnected",      "Timeout", 
        "BrokenPipe",      "NetworkFailure",      "ProtocolError",      "TearDown", 
        "WFConnection",      "WFReportParams",      "Connected",      "StartingSyncS", 
        "StartingSyncT",      "WFBitMapS",      "WFBitMapT",      "WFSyncUUID", 
        "SyncSource",      "SyncTarget",      "VerifyS",      "VerifyT", 
        "PausedSyncS",      "PausedSyncT"};
#line 60 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_role_s_names[3U]  = {      "Unknown",      "Primary",      "Secondary"};
#line 66 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_disk_s_names[9U]  = 
#line 66
  {      "Diskless",      "Attaching",      "Failed",      "Negotiating", 
        "Inconsistent",      "Outdated",      "DUnknown",      "Consistent", 
        "UpToDate"};
#line 78 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
static char const   *drbd_state_sw_errors[20U]  = 
#line 78
  {      0,      "Multiple primaries not allowed by config",      "Refusing to be Primary without at least one UpToDate disk",      0, 
        "Can not resync without local disk",      "Can not resync without remote disk",      "Refusing to be Outdated while Connected",      "Refusing to be Primary while peer is not outdated", 
        "Can not start OV/resync since it is already active",      "Can not disconnect a StandAlone device",      "State change was refused by peer node",      "Device is diskless, the requested operation requires a disk", 
        "Device is held open by someone",      "Have no net/connection configuration",      "Need a verify algorithm to start online verify",      "Need a connection to start verify or resync", 
        "Disk state is lower than outdated",      "Peer does not support protocol",      "In transient state, retry after next state change",      "Concurrent state changes detected and aborted"};
#line 99 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_conn_str(enum drbd_conns s ) 
{ 


  {
#line 102
  return ((unsigned int )s <= 21U ? drbd_conn_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 105 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_role_str(enum drbd_role s ) 
{ 


  {
#line 107
  return ((unsigned int )s <= 2U ? drbd_role_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 110 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_disk_str(enum drbd_disk_state s ) 
{ 


  {
#line 112
  return ((unsigned int )s <= 8U ? drbd_disk_s_names[(unsigned int )s] : "TOO_LARGE");
}
}
#line 115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_strings.c.prepared"
char const   *drbd_set_st_err_str(enum drbd_state_ret_codes err ) 
{ 


  {
#line 117
  return ((int )err >= -19 ? ((int )err < 0 ? drbd_state_sw_errors[- ((int )err)] : "TOO_LARGE") : "TOO_SMALL");
}
}
#line 47 "include/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 const   *p ) 
{ 


  {
#line 49
  return ((__u64 )*p);
}
}
#line 55 "include/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 const   *p ) 
{ 


  {
#line 57
  return ((__u32 )*p);
}
}
#line 63 "include/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 const   *p ) 
{ 


  {
#line 65
  return ((__u16 )*p);
}
}
#line 185 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 89 "include/linux/bitmap.h"
extern int __bitmap_equal(unsigned long const   * , unsigned long const   * , int  ) ;
#line 113
extern int __bitmap_parse(char const   * , unsigned int  , int  , unsigned long * ,
                          int  ) ;
#line 163 "include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst , unsigned long const   *src ,
                                 int nbits ) 
{ 
  int len ;
  size_t __len ;
  void *__ret ;

  {
#line 169
  len = (int )((unsigned int )(((unsigned long )nbits + 63UL) / 64UL) * 8U);
#line 170
  __len = (size_t )len;
#line 170
  __ret = __builtin_memcpy((void *)dst, (void const   *)src, __len);
#line 173
  return;
}
}
#line 217 "include/linux/bitmap.h"
__inline static int bitmap_equal(unsigned long const   *src1 , unsigned long const   *src2 ,
                                 int nbits ) 
{ 
  int tmp ;

  {
#line 223
  tmp = __bitmap_equal(src1, src2, nbits);
#line 223
  return (tmp);
}
}
#line 377 "include/linux/cpumask.h"
__inline static bool cpumask_equal(struct cpumask  const  *src1p , struct cpumask  const  *src2p ) 
{ 
  int tmp ;

  {
#line 380
  tmp = bitmap_equal((unsigned long const   *)(& src1p->bits), (unsigned long const   *)(& src2p->bits),
                     nr_cpu_ids);
#line 380
  return (tmp != 0);
}
}
#line 466 "include/linux/cpumask.h"
__inline static void cpumask_copy(struct cpumask *dstp , struct cpumask  const  *srcp ) 
{ 


  {
#line 469
  bitmap_copy((unsigned long *)(& dstp->bits), (unsigned long const   *)(& srcp->bits),
              nr_cpu_ids);
#line 470
  return;
}
}
#line 50 "include/linux/kmod.h"
extern struct subprocess_info *call_usermodehelper_setup(char * , char ** , char ** ,
                                                         gfp_t  ) ;
#line 68
extern int call_usermodehelper_exec(struct subprocess_info * , enum umh_wait  ) ;
#line 75 "include/linux/kmod.h"
__inline static int call_usermodehelper(char *path , char **argv , char **envp , enum umh_wait wait ) 
{ 
  struct subprocess_info *info ;
  gfp_t gfp_mask ;
  int tmp ;

  {
#line 78
  gfp_mask = (int )wait == -1 ? 32U : 208U;
#line 80
  info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
#line 81
  if ((unsigned long )info == (unsigned long )((struct subprocess_info *)0)) {
#line 82
    return (-12);
  } else {

  }
#line 83
  tmp = call_usermodehelper_exec(info, wait);
#line 83
  return (tmp);
}
}
#line 202 "include/linux/kobject.h"
extern int kobject_uevent(struct kobject * , enum kobject_action  ) ;
#line 496 "include/linux/module.h"
__inline static int ldv_try_module_get_2(struct module *module ) ;
#line 502
void ldv_module_put_5(struct module *ldv_func_arg1 ) ;
#line 506
void ldv_module_put_6(struct module *ldv_func_arg1 ) ;
#line 1916 "include/linux/fs.h"
extern struct file *filp_open(char const   * , int  , int  ) ;
#line 1982
extern int bd_claim(struct block_device * , void * ) ;
#line 167 "include/linux/connector.h"
extern int cn_add_callback(struct cb_id * , char * , void (*)(struct cn_msg * , struct netlink_skb_parms * ) ) ;
#line 168
extern void cn_del_callback(struct cb_id * ) ;
#line 169
extern int cn_netlink_send(struct cn_msg * , u32  , gfp_t  ) ;
#line 348 "include/linux/genhd.h"
extern void add_disk(struct gendisk * ) ;
#line 914 "include/linux/blkdev.h"
extern void blk_queue_max_sectors(struct request_queue * , unsigned int  ) ;
#line 916
extern void blk_queue_max_phys_segments(struct request_queue * , unsigned short  ) ;
#line 917
extern void blk_queue_max_hw_segments(struct request_queue * , unsigned short  ) ;
#line 921
extern void blk_queue_logical_block_size(struct request_queue * , unsigned short  ) ;
#line 930
extern int blk_stack_limits(struct queue_limits * , struct queue_limits * , sector_t  ) ;
#line 941
extern void blk_queue_segment_boundary(struct request_queue * , unsigned long  ) ;
#line 1026 "include/linux/blkdev.h"
__inline static unsigned int queue_max_sectors(struct request_queue *q ) 
{ 


  {
#line 1028
  return (q->limits.max_sectors);
}
}
#line 241 "include/linux/lru_cache.h"
extern struct lru_cache *lc_create(char const   * , struct kmem_cache * , unsigned int  ,
                                   size_t  , size_t  ) ;
#line 1723 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/drbd/drbd_int.h"
__inline static sector_t drbd_get_max_capacity___1(struct drbd_backing_dev *bdev ) 
{ 
  sector_t s ;
  sector_t __min1 ;
  sector_t __min2 ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;
  sector_t __min1___0 ;
  sector_t __min2___0 ;
  sector_t tmp___2 ;
  sector_t __min1___1 ;
  sector_t __min2___1 ;
  sector_t __min1___2 ;
  sector_t __min2___2 ;
  sector_t tmp___3 ;

  {
#line 1726
  switch (bdev->dc.meta_dev_idx) {
  case -1: ;
  case -3: 
#line 1730
  tmp___1 = drbd_get_capacity(bdev->backing_bdev);
#line 1730
  if (tmp___1 != 0UL) {
#line 1730
    __min1 = 34359738368UL;
#line 1730
    tmp___0 = drbd_md_first_sector(bdev);
#line 1730
    __min2 = tmp___0;
#line 1730
    s = __min1 < __min2 ? __min1 : __min2;
  } else {
#line 1730
    s = 0UL;
  }
#line 1733
  goto ldv_40211;
  case -2: 
#line 1735
  __min1___0 = 34359738368UL;
#line 1735
  tmp___2 = drbd_get_capacity(bdev->backing_bdev);
#line 1735
  __min2___0 = tmp___2;
#line 1735
  s = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 1738
  __min1___1 = s;
#line 1738
  __min2___1 = (unsigned long )(bdev->md.md_size_sect - (u32 )bdev->md.bm_offset) << 15;
#line 1738
  s = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 1741
  goto ldv_40211;
  default: 
#line 1743
  __min1___2 = 8587575296UL;
#line 1743
  tmp___3 = drbd_get_capacity(bdev->backing_bdev);
#line 1743
  __min2___2 = tmp___3;
#line 1743
  s = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
  }
  ldv_40211: ;
#line 1746
  return (s);
}
}
#line 7 "include/linux/unaligned/access_ok.h"
__inline static u16 get_unaligned_le16(void const   *p ) 
{ 
  __u16 tmp ;

  {
#line 9
  tmp = __le16_to_cpup((__le16 const   *)p);
#line 9
  return (tmp);
}
}
#line 12 "include/linux/unaligned/access_ok.h"
__inline static u32 get_unaligned_le32(void const   *p ) 
{ 
  __u32 tmp ;

  {
#line 14
  tmp = __le32_to_cpup((__le32 const   *)p);
#line 14
  return (tmp);
}
}
#line 17 "include/linux/unaligned/access_ok.h"
__inline static u64 get_unaligned_le64(void const   *p ) 
{ 
  __u64 tmp ;

  {
#line 19
  tmp = __le64_to_cpup((__le64 const   *)p);
#line 19
  return (tmp);
}
}
#line 37 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le16(u16 val , void *p ) 
{ 


  {
#line 39
  *((__le16 *)p) = val;
#line 40
  return;
}
}
#line 42 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le32(u32 val , void *p ) 
{ 


  {
#line 44
  *((__le32 *)p) = val;
#line 45
  return;
}
}
#line 47 "include/linux/unaligned/access_ok.h"
__inline static void put_unaligned_le64(u64 val , void *p ) 
{ 


  {
#line 49
  *((__le64 *)p) = val;
#line 50
  return;
}
}
#line 8 "include/linux/unaligned/generic.h"
extern void __bad_unaligned_access_size(void) ;
#line 75 "include/linux/drbd_tag_magic.h"
static struct tag  const  tag_descriptions[68U]  = 
#line 75 "include/linux/drbd_tag_magic.h"
  {      {0, 0, 0}, 
        {"overwrite_peer", 32768, 4}, 
        {"disk_size", 16384, 8}, 
        {"backing_dev", 57344, 128}, 
        {"meta_dev", 57344, 128}, 
        {"meta_dev_idx", 8192, 4}, 
        {"on_io_error", 0, 4}, 
        {"fencing", 0, 4}, 
        {"my_addr", 57344, 128}, 
        {"peer_addr", 57344, 128}, 
        {"shared_secret", 49152, 64}, 
        {"cram_hmac_alg", 49152, 64}, 
        {0, 0, 0}, 
        {0, 0, 0}, 
        {"timeout", 0, 4}, 
        {"wire_protocol", 8192, 4}, 
        {"try_connect_int", 0, 4}, 
        {"ping_int", 0, 4}, 
        {"max_epoch_size", 0, 4}, 
        {"max_buffers", 0, 4}, 
        {"unplug_watermark", 0, 4}, 
        {"sndbuf_size", 0, 4}, 
        {"ko_count", 0, 4}, 
        {0, 0, 0}, 
        {"after_sb_0p", 0, 4}, 
        {"after_sb_1p", 0, 4}, 
        {"after_sb_2p", 0, 4}, 
        {"want_lose", 32768, 4}, 
        {"two_primaries", 32768, 4}, 
        {"resize_size", 16384, 8}, 
        {"rate", 0, 4}, 
        {"after", 0, 4}, 
        {"al_extents", 0, 4}, 
        {"state_i", 0, 4}, 
        {"uuids", 49152, 32}, 
        {"uuids_flags", 0, 4}, 
        {"use_degraded", 32768, 4}, 
        {"use_bmbv", 32768, 4}, 
        {"helper", 49152, 32}, 
        {"rr_conflict", 0, 4}, 
        {"ping_timeo", 0, 4}, 
        {"always_asbp", 32768, 4}, 
        {0, 0, 0}, 
        {"sync_progress", 0, 4}, 
        {"integrity_alg", 49152, 64}, 
        {"dump_ee_reason", 49152, 32}, 
        {"seen_digest", 49152, 64}, 
        {"calc_digest", 49152, 64}, 
        {"ee_sector", 16384, 8}, 
        {"ee_block_id", 16384, 8}, 
        {"ee_data", 49152, 32768}, 
        {"cpu_mask", 49152, 32}, 
        {"verify_alg", 49152, 64}, 
        {"no_disk_flush", 32768, 4}, 
        {"no_md_flush", 32768, 4}, 
        {0, 0, 0}, 
        {"max_bio_bvecs", 0, 4}, 
        {"no_disk_barrier", 32768, 4}, 
        {"no_disk_drain", 32768, 4}, 
        {0, 0, 0}, 
        {"mind_af", 40960, 4}, 
        {"no_cork", 32768, 4}, 
        {"auto_sndbuf_size", 40960, 4}, 
        {"clear_bm", 40960, 4}, 
        {"csums_alg", 49152, 64}, 
        {"use_rle", 32768, 4}, 
        {"start_sector", 16384, 8}, 
        {"rcvbuf_size", 0, 4}};
#line 48 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) ;
#line 49
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) ;
#line 50
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) ;
#line 53 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static char *drbd_m_holder  =    (char *)"Hands off! this is DRBD\'s meta data device.";
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) ;
#line 16 "include/linux/drbd_nl.h"
static int primary_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct primary *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 14
  goto ldv_40780;
  ldv_40779: 
#line 14
  tmp = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 14
  dlen = (int )tmp___0;
#line 14
  switch (tag & 8191) {
  case 1: 
#line 14
  arg->overwrite_peer = (int )((signed char )*((char *)tags)) != 0;
#line 14
  goto ldv_40777;
  default: ;
#line 14
  if ((tag & 8192) != 0) {
#line 14
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 14
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 14
    return (0);
  } else {

  }
  }
  ldv_40777: 
#line 14
  tags = tags + (unsigned long )dlen;
  ldv_40780: 
#line 14
  tmp___3 = tags;
#line 14
  tags = tags + 1;
#line 14
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 14
  tag = (int )tmp___4;
#line 14
  if (tag != 0) {
#line 15
    goto ldv_40779;
  } else {

  }

#line 14
  return (1);
}
}
#line 34
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) ;
#line 34 "include/linux/drbd_nl.h"
static int disk_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct disk_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  u32 tmp___5 ;
  u32 tmp___6 ;
  u32 tmp___7 ;
  u32 tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  unsigned short *tmp___11 ;
  u16 tmp___12 ;

  {
#line 20
  goto ldv_40841;
  ldv_40840: 
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 20
  dlen = (int )tmp___0;
#line 20
  switch (tag & 8191) {
  case 2: 
#line 20
  arg->disk_size = get_unaligned_le64((void const   *)tags);
#line 20
  goto ldv_40809;
  case 3: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"backing_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->backing_dev_len = dlen;
#line 20
  __min1 = (size_t )dlen;
#line 20
  __min2 = 128UL;
#line 20
  __len = __min1 < __min2 ? __min1 : __min2;
#line 20
  __ret = __builtin_memcpy((void *)(& arg->backing_dev), (void const   *)tags, __len);
#line 20
  goto ldv_40809;
  case 4: ;
#line 20
  if (dlen > 128) {
#line 20
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"meta_dev", dlen, 128U);
#line 20
    return (0);
  } else {

  }
#line 20
  arg->meta_dev_len = dlen;
#line 20
  __min1___0 = (size_t )dlen;
#line 20
  __min2___0 = 128UL;
#line 20
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 20
  __ret___0 = __builtin_memcpy((void *)(& arg->meta_dev), (void const   *)tags, __len___0);
#line 20
  goto ldv_40809;
  case 5: 
#line 20
  tmp___5 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->meta_dev_idx = (int )tmp___5;
#line 20
  goto ldv_40809;
  case 6: 
#line 20
  tmp___6 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->on_io_error = (int )tmp___6;
#line 20
  goto ldv_40809;
  case 7: 
#line 20
  tmp___7 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->fencing = (int )tmp___7;
#line 20
  goto ldv_40809;
  case 37: 
#line 20
  arg->use_bmbv = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_40809;
  case 53: 
#line 20
  arg->no_disk_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_40809;
  case 54: 
#line 20
  arg->no_md_flush = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_40809;
  case 56: 
#line 20
  tmp___8 = get_unaligned_le32((void const   *)tags);
#line 20
  arg->max_bio_bvecs = (int )tmp___8;
#line 20
  goto ldv_40809;
  case 57: 
#line 20
  arg->no_disk_barrier = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_40809;
  case 58: 
#line 20
  arg->no_disk_drain = (int )((signed char )*((char *)tags)) != 0;
#line 20
  goto ldv_40809;
  default: ;
#line 20
  if ((tag & 8192) != 0) {
#line 20
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 20
    printk("<3>%s %s: Unknown tag: %d\n", tmp___10, tmp___9, tag & 8191);
#line 20
    return (0);
  } else {

  }
  }
  ldv_40809: 
#line 20
  tags = tags + (unsigned long )dlen;
  ldv_40841: 
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  tmp___12 = get_unaligned_le16((void const   *)tmp___11);
#line 20
  tag = (int )tmp___12;
#line 20
  if (tag != 0) {
#line 21
    goto ldv_40840;
  } else {

  }

#line 20
  return (1);
}
}
#line 66
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) ;
#line 66 "include/linux/drbd_nl.h"
static int net_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct net_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  size_t __len___2 ;
  size_t __min1___2 ;
  size_t __min2___2 ;
  void *__ret___2 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  size_t __len___3 ;
  size_t __min1___3 ;
  size_t __min2___3 ;
  void *__ret___3 ;
  u32 tmp___11 ;
  u32 tmp___12 ;
  u32 tmp___13 ;
  u32 tmp___14 ;
  u32 tmp___15 ;
  u32 tmp___16 ;
  u32 tmp___17 ;
  u32 tmp___18 ;
  u32 tmp___19 ;
  u32 tmp___20 ;
  u32 tmp___21 ;
  u32 tmp___22 ;
  u32 tmp___23 ;
  u32 tmp___24 ;
  u32 tmp___25 ;
  char const   *tmp___26 ;
  char const   *tmp___27 ;
  unsigned short *tmp___28 ;
  u16 tmp___29 ;

  {
#line 38
  goto ldv_40943;
  ldv_40942: 
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 38
  dlen = (int )tmp___0;
#line 38
  switch (tag & 8191) {
  case 8: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___2,
           tmp___1, (char *)"my_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->my_addr_len = dlen;
#line 38
  __min1 = (size_t )dlen;
#line 38
  __min2 = 128UL;
#line 38
  __len = __min1 < __min2 ? __min1 : __min2;
#line 38
  __ret = __builtin_memcpy((void *)(& arg->my_addr), (void const   *)tags, __len);
#line 38
  goto ldv_40879;
  case 9: ;
#line 38
  if (dlen > 128) {
#line 38
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___4,
           tmp___3, (char *)"peer_addr", dlen, 128U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->peer_addr_len = dlen;
#line 38
  __min1___0 = (size_t )dlen;
#line 38
  __min2___0 = 128UL;
#line 38
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 38
  __ret___0 = __builtin_memcpy((void *)(& arg->peer_addr), (void const   *)tags, __len___0);
#line 38
  goto ldv_40879;
  case 10: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___6,
           tmp___5, (char *)"shared_secret", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->shared_secret_len = dlen;
#line 38
  __min1___1 = (size_t )dlen;
#line 38
  __min2___1 = 64UL;
#line 38
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 38
  __ret___1 = __builtin_memcpy((void *)(& arg->shared_secret), (void const   *)tags,
                               __len___1);
#line 38
  goto ldv_40879;
  case 11: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___7 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___8 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___8,
           tmp___7, (char *)"cram_hmac_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->cram_hmac_alg_len = dlen;
#line 38
  __min1___2 = (size_t )dlen;
#line 38
  __min2___2 = 64UL;
#line 38
  __len___2 = __min1___2 < __min2___2 ? __min1___2 : __min2___2;
#line 38
  __ret___2 = __builtin_memcpy((void *)(& arg->cram_hmac_alg), (void const   *)tags,
                               __len___2);
#line 38
  goto ldv_40879;
  case 44: ;
#line 38
  if (dlen > 64) {
#line 38
    tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___10,
           tmp___9, (char *)"integrity_alg", dlen, 64U);
#line 38
    return (0);
  } else {

  }
#line 38
  arg->integrity_alg_len = dlen;
#line 38
  __min1___3 = (size_t )dlen;
#line 38
  __min2___3 = 64UL;
#line 38
  __len___3 = __min1___3 < __min2___3 ? __min1___3 : __min2___3;
#line 38
  __ret___3 = __builtin_memcpy((void *)(& arg->integrity_alg), (void const   *)tags,
                               __len___3);
#line 38
  goto ldv_40879;
  case 14: 
#line 38
  tmp___11 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->timeout = (int )tmp___11;
#line 38
  goto ldv_40879;
  case 15: 
#line 38
  tmp___12 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->wire_protocol = (int )tmp___12;
#line 38
  goto ldv_40879;
  case 16: 
#line 38
  tmp___13 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->try_connect_int = (int )tmp___13;
#line 38
  goto ldv_40879;
  case 17: 
#line 38
  tmp___14 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_int = (int )tmp___14;
#line 38
  goto ldv_40879;
  case 18: 
#line 38
  tmp___15 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_epoch_size = (int )tmp___15;
#line 38
  goto ldv_40879;
  case 19: 
#line 38
  tmp___16 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->max_buffers = (int )tmp___16;
#line 38
  goto ldv_40879;
  case 20: 
#line 38
  tmp___17 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->unplug_watermark = (int )tmp___17;
#line 38
  goto ldv_40879;
  case 21: 
#line 38
  tmp___18 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->sndbuf_size = (int )tmp___18;
#line 38
  goto ldv_40879;
  case 22: 
#line 38
  tmp___19 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ko_count = (int )tmp___19;
#line 38
  goto ldv_40879;
  case 24: 
#line 38
  tmp___20 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_0p = (int )tmp___20;
#line 38
  goto ldv_40879;
  case 25: 
#line 38
  tmp___21 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_1p = (int )tmp___21;
#line 38
  goto ldv_40879;
  case 26: 
#line 38
  tmp___22 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->after_sb_2p = (int )tmp___22;
#line 38
  goto ldv_40879;
  case 39: 
#line 38
  tmp___23 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rr_conflict = (int )tmp___23;
#line 38
  goto ldv_40879;
  case 40: 
#line 38
  tmp___24 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->ping_timeo = (int )tmp___24;
#line 38
  goto ldv_40879;
  case 67: 
#line 38
  tmp___25 = get_unaligned_le32((void const   *)tags);
#line 38
  arg->rcvbuf_size = (int )tmp___25;
#line 38
  goto ldv_40879;
  case 60: 
#line 38
  arg->mind_af = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  case 27: 
#line 38
  arg->want_lose = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  case 28: 
#line 38
  arg->two_primaries = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  case 41: 
#line 38
  arg->always_asbp = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  case 61: 
#line 38
  arg->no_cork = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  case 62: 
#line 38
  arg->auto_sndbuf_size = (int )((signed char )*((char *)tags)) != 0;
#line 38
  goto ldv_40879;
  default: ;
#line 38
  if ((tag & 8192) != 0) {
#line 38
    tmp___26 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    tmp___27 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 38
    printk("<3>%s %s: Unknown tag: %d\n", tmp___27, tmp___26, tag & 8191);
#line 38
    return (0);
  } else {

  }
  }
  ldv_40879: 
#line 38
  tags = tags + (unsigned long )dlen;
  ldv_40943: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  tmp___29 = get_unaligned_le16((void const   *)tmp___28);
#line 38
  tag = (int )tmp___29;
#line 38
  if (tag != 0) {
#line 39
    goto ldv_40942;
  } else {

  }

#line 38
  return (1);
}
}
#line 72
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) ;
#line 72 "include/linux/drbd_nl.h"
static int resize_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct resize *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 70
  goto ldv_40975;
  ldv_40974: 
#line 70
  tmp = tags;
#line 70
  tags = tags + 1;
#line 70
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 70
  dlen = (int )tmp___0;
#line 70
  switch (tag & 8191) {
  case 29: 
#line 70
  arg->resize_size = get_unaligned_le64((void const   *)tags);
#line 70
  goto ldv_40972;
  default: ;
#line 70
  if ((tag & 8192) != 0) {
#line 70
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 70
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 70
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 70
    return (0);
  } else {

  }
  }
  ldv_40972: 
#line 70
  tags = tags + (unsigned long )dlen;
  ldv_40975: 
#line 70
  tmp___3 = tags;
#line 70
  tags = tags + 1;
#line 70
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 70
  tag = (int )tmp___4;
#line 70
  if (tag != 0) {
#line 71
    goto ldv_40974;
  } else {

  }

#line 70
  return (1);
}
}
#line 82
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) ;
#line 82 "include/linux/drbd_nl.h"
static int syncer_conf_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct syncer_conf *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  u32 tmp___1 ;
  u32 tmp___2 ;
  u32 tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  size_t __len ;
  size_t __min1 ;
  size_t __min2 ;
  void *__ret ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  size_t __len___0 ;
  size_t __min1___0 ;
  size_t __min2___0 ;
  void *__ret___0 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  size_t __len___1 ;
  size_t __min1___1 ;
  size_t __min2___1 ;
  void *__ret___1 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  unsigned short *tmp___12 ;
  u16 tmp___13 ;

  {
#line 74
  goto ldv_41025;
  ldv_41024: 
#line 74
  tmp = tags;
#line 74
  tags = tags + 1;
#line 74
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 74
  dlen = (int )tmp___0;
#line 74
  switch (tag & 8191) {
  case 30: 
#line 74
  tmp___1 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->rate = (int )tmp___1;
#line 74
  goto ldv_40989;
  case 31: 
#line 74
  tmp___2 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->after = (int )tmp___2;
#line 74
  goto ldv_40989;
  case 32: 
#line 74
  tmp___3 = get_unaligned_le32((void const   *)tags);
#line 74
  arg->al_extents = (int )tmp___3;
#line 74
  goto ldv_40989;
  case 52: ;
#line 74
  if (dlen > 64) {
#line 74
    tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___5,
           tmp___4, (char *)"verify_alg", dlen, 64U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->verify_alg_len = dlen;
#line 74
  __min1 = (size_t )dlen;
#line 74
  __min2 = 64UL;
#line 74
  __len = __min1 < __min2 ? __min1 : __min2;
#line 74
  __ret = __builtin_memcpy((void *)(& arg->verify_alg), (void const   *)tags, __len);
#line 74
  goto ldv_40989;
  case 51: ;
#line 74
  if (dlen > 32) {
#line 74
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___7,
           tmp___6, (char *)"cpu_mask", dlen, 32U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->cpu_mask_len = dlen;
#line 74
  __min1___0 = (size_t )dlen;
#line 74
  __min2___0 = 32UL;
#line 74
  __len___0 = __min1___0 < __min2___0 ? __min1___0 : __min2___0;
#line 74
  __ret___0 = __builtin_memcpy((void *)(& arg->cpu_mask), (void const   *)tags, __len___0);
#line 74
  goto ldv_40989;
  case 64: ;
#line 74
  if (dlen > 64) {
#line 74
    tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: arg too long: %s (%u wanted, max len: %u bytes)\n", tmp___9,
           tmp___8, (char *)"csums_alg", dlen, 64U);
#line 74
    return (0);
  } else {

  }
#line 74
  arg->csums_alg_len = dlen;
#line 74
  __min1___1 = (size_t )dlen;
#line 74
  __min2___1 = 64UL;
#line 74
  __len___1 = __min1___1 < __min2___1 ? __min1___1 : __min2___1;
#line 74
  __ret___1 = __builtin_memcpy((void *)(& arg->csums_alg), (void const   *)tags, __len___1);
#line 74
  goto ldv_40989;
  case 65: 
#line 74
  arg->use_rle = (int )((signed char )*((char *)tags)) != 0;
#line 74
  goto ldv_40989;
  default: ;
#line 74
  if ((tag & 8192) != 0) {
#line 74
    tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 74
    printk("<3>%s %s: Unknown tag: %d\n", tmp___11, tmp___10, tag & 8191);
#line 74
    return (0);
  } else {

  }
  }
  ldv_40989: 
#line 74
  tags = tags + (unsigned long )dlen;
  ldv_41025: 
#line 74
  tmp___12 = tags;
#line 74
  tags = tags + 1;
#line 74
  tmp___13 = get_unaligned_le16((void const   *)tmp___12);
#line 74
  tag = (int )tmp___13;
#line 74
  if (tag != 0) {
#line 75
    goto ldv_41024;
  } else {

  }

#line 74
  return (1);
}
}
#line 126
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) ;
#line 126 "include/linux/drbd_nl.h"
static int start_ov_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct start_ov *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 124
  goto ldv_41324;
  ldv_41323: 
#line 124
  tmp = tags;
#line 124
  tags = tags + 1;
#line 124
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 124
  dlen = (int )tmp___0;
#line 124
  switch (tag & 8191) {
  case 66: 
#line 124
  arg->start_sector = get_unaligned_le64((void const   *)tags);
#line 124
  goto ldv_41321;
  default: ;
#line 124
  if ((tag & 8192) != 0) {
#line 124
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 124
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 124
    return (0);
  } else {

  }
  }
  ldv_41321: 
#line 124
  tags = tags + (unsigned long )dlen;
  ldv_41324: 
#line 124
  tmp___3 = tags;
#line 124
  tags = tags + 1;
#line 124
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 124
  tag = (int )tmp___4;
#line 124
  if (tag != 0) {
#line 125
    goto ldv_41323;
  } else {

  }

#line 124
  return (1);
}
}
#line 130
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) ;
#line 130 "include/linux/drbd_nl.h"
static int new_c_uuid_from_tags(struct drbd_conf *mdev , unsigned short *tags , struct new_c_uuid *arg ) 
{ 
  int tag ;
  int dlen ;
  unsigned short *tmp ;
  u16 tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned short *tmp___3 ;
  u16 tmp___4 ;

  {
#line 128
  goto ldv_41341;
  ldv_41340: 
#line 128
  tmp = tags;
#line 128
  tags = tags + 1;
#line 128
  tmp___0 = get_unaligned_le16((void const   *)tmp);
#line 128
  dlen = (int )tmp___0;
#line 128
  switch (tag & 8191) {
  case 63: 
#line 128
  arg->clear_bm = (int )((signed char )*((char *)tags)) != 0;
#line 128
  goto ldv_41338;
  default: ;
#line 128
  if ((tag & 8192) != 0) {
#line 128
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 128
    printk("<3>%s %s: Unknown tag: %d\n", tmp___2, tmp___1, tag & 8191);
#line 128
    return (0);
  } else {

  }
  }
  ldv_41338: 
#line 128
  tags = tags + (unsigned long )dlen;
  ldv_41341: 
#line 128
  tmp___3 = tags;
#line 128
  tags = tags + 1;
#line 128
  tmp___4 = get_unaligned_le16((void const   *)tmp___3);
#line 128
  tag = (int )tmp___4;
#line 128
  if (tag != 0) {
#line 129
    goto ldv_41340;
  } else {

  }

#line 128
  return (1);
}
}
#line 34
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) ;
#line 34 "include/linux/drbd_nl.h"
static unsigned short *disk_conf_to_tags(struct drbd_conf *mdev , struct disk_conf *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___4 ;
  unsigned short *tmp___3 ;
  void *__gu_p___5 ;
  unsigned short *tmp___4 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___6 ;
  unsigned short *tmp___5 ;
  void *__gu_p___7 ;
  unsigned short *tmp___6 ;
  void *__gu_p___8 ;
  void *__gu_p___9 ;
  unsigned short *tmp___7 ;
  void *__gu_p___10 ;
  unsigned short *tmp___8 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___11 ;
  void *__gu_p___16 ;
  unsigned short *tmp___12 ;
  void *__gu_p___17 ;
  unsigned short *tmp___13 ;
  void *__gu_p___18 ;
  unsigned short *tmp___14 ;
  void *__gu_p___19 ;
  unsigned short *tmp___15 ;
  void *__gu_p___20 ;
  unsigned short *tmp___16 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  unsigned short *tmp___21 ;
  void *__gu_p___27 ;
  unsigned short *tmp___22 ;

  {
#line 20
  tmp = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p = (void *)tmp;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p) = 2U;
#line 20
  goto ldv_41386;
  case 2UL: 
#line 20
  put_unaligned_le16(16386, __gu_p);
#line 20
  goto ldv_41386;
  case 4UL: 
#line 20
  put_unaligned_le32(16386U, __gu_p);
#line 20
  goto ldv_41386;
  case 8UL: 
#line 20
  put_unaligned_le64(16386ULL, __gu_p);
#line 20
  goto ldv_41386;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41386;
  }
  ldv_41386: 
#line 20
  tmp___0 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___0 = (void *)tmp___0;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___0) = 8U;
#line 20
  goto ldv_41393;
  case 2UL: 
#line 20
  put_unaligned_le16(8, __gu_p___0);
#line 20
  goto ldv_41393;
  case 4UL: 
#line 20
  put_unaligned_le32(8U, __gu_p___0);
#line 20
  goto ldv_41393;
  case 8UL: 
#line 20
  put_unaligned_le64(8ULL, __gu_p___0);
#line 20
  goto ldv_41393;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41393;
  }
  ldv_41393: 
#line 20
  __gu_p___1 = (void *)tags;
#line 20
  switch (8UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___1) = (unsigned char )arg->disk_size;
#line 20
  goto ldv_41400;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->disk_size), __gu_p___1);
#line 20
  goto ldv_41400;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->disk_size, __gu_p___1);
#line 20
  goto ldv_41400;
  case 8UL: 
#line 20
  put_unaligned_le64(arg->disk_size, __gu_p___1);
#line 20
  goto ldv_41400;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41400;
  }
  ldv_41400: 
#line 20
  tags = tags + 8U;
#line 20
  tmp___1 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___2 = (void *)tmp___1;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___2) = 3U;
#line 20
  goto ldv_41407;
  case 2UL: 
#line 20
  put_unaligned_le16(57347, __gu_p___2);
#line 20
  goto ldv_41407;
  case 4UL: 
#line 20
  put_unaligned_le32(57347U, __gu_p___2);
#line 20
  goto ldv_41407;
  case 8UL: 
#line 20
  put_unaligned_le64(57347ULL, __gu_p___2);
#line 20
  goto ldv_41407;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41407;
  }
  ldv_41407: 
#line 20
  tmp___2 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___3 = (void *)tmp___2;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___3) = (unsigned char )arg->backing_dev_len;
#line 20
  goto ldv_41414;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->backing_dev_len), __gu_p___3);
#line 20
  goto ldv_41414;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_41414;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->backing_dev_len, __gu_p___3);
#line 20
  goto ldv_41414;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41414;
  }
  ldv_41414: 
#line 20
  __len = (size_t )arg->backing_dev_len;
#line 20
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->backing_dev), __len);
#line 20
  tags = tags + (unsigned long )arg->backing_dev_len;
#line 20
  tmp___3 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___4 = (void *)tmp___3;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___4) = 4U;
#line 20
  goto ldv_41424;
  case 2UL: 
#line 20
  put_unaligned_le16(57348, __gu_p___4);
#line 20
  goto ldv_41424;
  case 4UL: 
#line 20
  put_unaligned_le32(57348U, __gu_p___4);
#line 20
  goto ldv_41424;
  case 8UL: 
#line 20
  put_unaligned_le64(57348ULL, __gu_p___4);
#line 20
  goto ldv_41424;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41424;
  }
  ldv_41424: 
#line 20
  tmp___4 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___5 = (void *)tmp___4;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___5) = (unsigned char )arg->meta_dev_len;
#line 20
  goto ldv_41431;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_len), __gu_p___5);
#line 20
  goto ldv_41431;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_41431;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_len, __gu_p___5);
#line 20
  goto ldv_41431;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41431;
  }
  ldv_41431: 
#line 20
  __len___0 = (size_t )arg->meta_dev_len;
#line 20
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->meta_dev), __len___0);
#line 20
  tags = tags + (unsigned long )arg->meta_dev_len;
#line 20
  tmp___5 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___6 = (void *)tmp___5;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___6) = 5U;
#line 20
  goto ldv_41441;
  case 2UL: 
#line 20
  put_unaligned_le16(8197, __gu_p___6);
#line 20
  goto ldv_41441;
  case 4UL: 
#line 20
  put_unaligned_le32(8197U, __gu_p___6);
#line 20
  goto ldv_41441;
  case 8UL: 
#line 20
  put_unaligned_le64(8197ULL, __gu_p___6);
#line 20
  goto ldv_41441;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41441;
  }
  ldv_41441: 
#line 20
  tmp___6 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___7 = (void *)tmp___6;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___7) = 4U;
#line 20
  goto ldv_41448;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___7);
#line 20
  goto ldv_41448;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___7);
#line 20
  goto ldv_41448;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___7);
#line 20
  goto ldv_41448;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41448;
  }
  ldv_41448: 
#line 20
  __gu_p___8 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___8) = (unsigned char )arg->meta_dev_idx;
#line 20
  goto ldv_41455;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->meta_dev_idx), __gu_p___8);
#line 20
  goto ldv_41455;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_41455;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->meta_dev_idx, __gu_p___8);
#line 20
  goto ldv_41455;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41455;
  }
  ldv_41455: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___7 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___9 = (void *)tmp___7;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___9) = 6U;
#line 20
  goto ldv_41462;
  case 2UL: 
#line 20
  put_unaligned_le16(6, __gu_p___9);
#line 20
  goto ldv_41462;
  case 4UL: 
#line 20
  put_unaligned_le32(6U, __gu_p___9);
#line 20
  goto ldv_41462;
  case 8UL: 
#line 20
  put_unaligned_le64(6ULL, __gu_p___9);
#line 20
  goto ldv_41462;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41462;
  }
  ldv_41462: 
#line 20
  tmp___8 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___10 = (void *)tmp___8;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___10) = 4U;
#line 20
  goto ldv_41469;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___10);
#line 20
  goto ldv_41469;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___10);
#line 20
  goto ldv_41469;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___10);
#line 20
  goto ldv_41469;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41469;
  }
  ldv_41469: 
#line 20
  __gu_p___11 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___11) = (unsigned char )arg->on_io_error;
#line 20
  goto ldv_41476;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->on_io_error), __gu_p___11);
#line 20
  goto ldv_41476;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_41476;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->on_io_error, __gu_p___11);
#line 20
  goto ldv_41476;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41476;
  }
  ldv_41476: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___9 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___12 = (void *)tmp___9;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___12) = 7U;
#line 20
  goto ldv_41483;
  case 2UL: 
#line 20
  put_unaligned_le16(7, __gu_p___12);
#line 20
  goto ldv_41483;
  case 4UL: 
#line 20
  put_unaligned_le32(7U, __gu_p___12);
#line 20
  goto ldv_41483;
  case 8UL: 
#line 20
  put_unaligned_le64(7ULL, __gu_p___12);
#line 20
  goto ldv_41483;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41483;
  }
  ldv_41483: 
#line 20
  tmp___10 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___13 = (void *)tmp___10;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___13) = 4U;
#line 20
  goto ldv_41490;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___13);
#line 20
  goto ldv_41490;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___13);
#line 20
  goto ldv_41490;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___13);
#line 20
  goto ldv_41490;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41490;
  }
  ldv_41490: 
#line 20
  __gu_p___14 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___14) = (unsigned char )arg->fencing;
#line 20
  goto ldv_41497;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->fencing), __gu_p___14);
#line 20
  goto ldv_41497;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->fencing, __gu_p___14);
#line 20
  goto ldv_41497;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->fencing, __gu_p___14);
#line 20
  goto ldv_41497;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41497;
  }
  ldv_41497: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___11 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___15 = (void *)tmp___11;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___15) = 37U;
#line 20
  goto ldv_41504;
  case 2UL: 
#line 20
  put_unaligned_le16(32805, __gu_p___15);
#line 20
  goto ldv_41504;
  case 4UL: 
#line 20
  put_unaligned_le32(32805U, __gu_p___15);
#line 20
  goto ldv_41504;
  case 8UL: 
#line 20
  put_unaligned_le64(32805ULL, __gu_p___15);
#line 20
  goto ldv_41504;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41504;
  }
  ldv_41504: 
#line 20
  tmp___12 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___16 = (void *)tmp___12;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___16) = 1U;
#line 20
  goto ldv_41511;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___16);
#line 20
  goto ldv_41511;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___16);
#line 20
  goto ldv_41511;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___16);
#line 20
  goto ldv_41511;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41511;
  }
  ldv_41511: 
#line 20
  *((char *)tags) = (char )arg->use_bmbv;
#line 20
  tags = tags + 1U;
#line 20
  tmp___13 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___17 = (void *)tmp___13;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___17) = 53U;
#line 20
  goto ldv_41518;
  case 2UL: 
#line 20
  put_unaligned_le16(32821, __gu_p___17);
#line 20
  goto ldv_41518;
  case 4UL: 
#line 20
  put_unaligned_le32(32821U, __gu_p___17);
#line 20
  goto ldv_41518;
  case 8UL: 
#line 20
  put_unaligned_le64(32821ULL, __gu_p___17);
#line 20
  goto ldv_41518;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41518;
  }
  ldv_41518: 
#line 20
  tmp___14 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___18 = (void *)tmp___14;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___18) = 1U;
#line 20
  goto ldv_41525;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___18);
#line 20
  goto ldv_41525;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___18);
#line 20
  goto ldv_41525;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___18);
#line 20
  goto ldv_41525;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41525;
  }
  ldv_41525: 
#line 20
  *((char *)tags) = (char )arg->no_disk_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___15 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___19 = (void *)tmp___15;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___19) = 54U;
#line 20
  goto ldv_41532;
  case 2UL: 
#line 20
  put_unaligned_le16(32822, __gu_p___19);
#line 20
  goto ldv_41532;
  case 4UL: 
#line 20
  put_unaligned_le32(32822U, __gu_p___19);
#line 20
  goto ldv_41532;
  case 8UL: 
#line 20
  put_unaligned_le64(32822ULL, __gu_p___19);
#line 20
  goto ldv_41532;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41532;
  }
  ldv_41532: 
#line 20
  tmp___16 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___20 = (void *)tmp___16;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___20) = 1U;
#line 20
  goto ldv_41539;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___20);
#line 20
  goto ldv_41539;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___20);
#line 20
  goto ldv_41539;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___20);
#line 20
  goto ldv_41539;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41539;
  }
  ldv_41539: 
#line 20
  *((char *)tags) = (char )arg->no_md_flush;
#line 20
  tags = tags + 1U;
#line 20
  tmp___17 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___21 = (void *)tmp___17;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___21) = 56U;
#line 20
  goto ldv_41546;
  case 2UL: 
#line 20
  put_unaligned_le16(56, __gu_p___21);
#line 20
  goto ldv_41546;
  case 4UL: 
#line 20
  put_unaligned_le32(56U, __gu_p___21);
#line 20
  goto ldv_41546;
  case 8UL: 
#line 20
  put_unaligned_le64(56ULL, __gu_p___21);
#line 20
  goto ldv_41546;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41546;
  }
  ldv_41546: 
#line 20
  tmp___18 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___22 = (void *)tmp___18;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___22) = 4U;
#line 20
  goto ldv_41553;
  case 2UL: 
#line 20
  put_unaligned_le16(4, __gu_p___22);
#line 20
  goto ldv_41553;
  case 4UL: 
#line 20
  put_unaligned_le32(4U, __gu_p___22);
#line 20
  goto ldv_41553;
  case 8UL: 
#line 20
  put_unaligned_le64(4ULL, __gu_p___22);
#line 20
  goto ldv_41553;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41553;
  }
  ldv_41553: 
#line 20
  __gu_p___23 = (void *)tags;
#line 20
  switch (4UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_bio_bvecs;
#line 20
  goto ldv_41560;
  case 2UL: 
#line 20
  put_unaligned_le16((int )((unsigned short )arg->max_bio_bvecs), __gu_p___23);
#line 20
  goto ldv_41560;
  case 4UL: 
#line 20
  put_unaligned_le32((unsigned int )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_41560;
  case 8UL: 
#line 20
  put_unaligned_le64((unsigned long long )arg->max_bio_bvecs, __gu_p___23);
#line 20
  goto ldv_41560;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41560;
  }
  ldv_41560: 
#line 20
  tags = tags + 4U;
#line 20
  tmp___19 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___24 = (void *)tmp___19;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___24) = 57U;
#line 20
  goto ldv_41567;
  case 2UL: 
#line 20
  put_unaligned_le16(32825, __gu_p___24);
#line 20
  goto ldv_41567;
  case 4UL: 
#line 20
  put_unaligned_le32(32825U, __gu_p___24);
#line 20
  goto ldv_41567;
  case 8UL: 
#line 20
  put_unaligned_le64(32825ULL, __gu_p___24);
#line 20
  goto ldv_41567;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41567;
  }
  ldv_41567: 
#line 20
  tmp___20 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___25 = (void *)tmp___20;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___25) = 1U;
#line 20
  goto ldv_41574;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___25);
#line 20
  goto ldv_41574;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___25);
#line 20
  goto ldv_41574;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___25);
#line 20
  goto ldv_41574;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41574;
  }
  ldv_41574: 
#line 20
  *((char *)tags) = (char )arg->no_disk_barrier;
#line 20
  tags = tags + 1U;
#line 20
  tmp___21 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___26 = (void *)tmp___21;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___26) = 58U;
#line 20
  goto ldv_41581;
  case 2UL: 
#line 20
  put_unaligned_le16(32826, __gu_p___26);
#line 20
  goto ldv_41581;
  case 4UL: 
#line 20
  put_unaligned_le32(32826U, __gu_p___26);
#line 20
  goto ldv_41581;
  case 8UL: 
#line 20
  put_unaligned_le64(32826ULL, __gu_p___26);
#line 20
  goto ldv_41581;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41581;
  }
  ldv_41581: 
#line 20
  tmp___22 = tags;
#line 20
  tags = tags + 1;
#line 20
  __gu_p___27 = (void *)tmp___22;
#line 20
  switch (2UL) {
  case 1UL: 
#line 20
  *((u8 *)__gu_p___27) = 1U;
#line 20
  goto ldv_41588;
  case 2UL: 
#line 20
  put_unaligned_le16(1, __gu_p___27);
#line 20
  goto ldv_41588;
  case 4UL: 
#line 20
  put_unaligned_le32(1U, __gu_p___27);
#line 20
  goto ldv_41588;
  case 8UL: 
#line 20
  put_unaligned_le64(1ULL, __gu_p___27);
#line 20
  goto ldv_41588;
  default: 
#line 20
  __bad_unaligned_access_size();
#line 20
  goto ldv_41588;
  }
  ldv_41588: 
#line 20
  *((char *)tags) = (char )arg->no_disk_drain;
#line 20
  tags = tags + 1U;
#line 20
  return (tags);
}
}
#line 66
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) ;
#line 66 "include/linux/drbd_nl.h"
static unsigned short *net_conf_to_tags(struct drbd_conf *mdev , struct net_conf *arg ,
                                        unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___2 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___3 ;
  unsigned short *tmp___3 ;
  void *__gu_p___4 ;
  unsigned short *tmp___4 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___5 ;
  unsigned short *tmp___5 ;
  void *__gu_p___6 ;
  unsigned short *tmp___6 ;
  size_t __len___2 ;
  void *__ret___2 ;
  void *__gu_p___7 ;
  unsigned short *tmp___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___8 ;
  size_t __len___3 ;
  void *__ret___3 ;
  void *__gu_p___9 ;
  unsigned short *tmp___9 ;
  void *__gu_p___10 ;
  unsigned short *tmp___10 ;
  void *__gu_p___11 ;
  void *__gu_p___12 ;
  unsigned short *tmp___11 ;
  void *__gu_p___13 ;
  unsigned short *tmp___12 ;
  void *__gu_p___14 ;
  void *__gu_p___15 ;
  unsigned short *tmp___13 ;
  void *__gu_p___16 ;
  unsigned short *tmp___14 ;
  void *__gu_p___17 ;
  void *__gu_p___18 ;
  unsigned short *tmp___15 ;
  void *__gu_p___19 ;
  unsigned short *tmp___16 ;
  void *__gu_p___20 ;
  void *__gu_p___21 ;
  unsigned short *tmp___17 ;
  void *__gu_p___22 ;
  unsigned short *tmp___18 ;
  void *__gu_p___23 ;
  void *__gu_p___24 ;
  unsigned short *tmp___19 ;
  void *__gu_p___25 ;
  unsigned short *tmp___20 ;
  void *__gu_p___26 ;
  void *__gu_p___27 ;
  unsigned short *tmp___21 ;
  void *__gu_p___28 ;
  unsigned short *tmp___22 ;
  void *__gu_p___29 ;
  void *__gu_p___30 ;
  unsigned short *tmp___23 ;
  void *__gu_p___31 ;
  unsigned short *tmp___24 ;
  void *__gu_p___32 ;
  void *__gu_p___33 ;
  unsigned short *tmp___25 ;
  void *__gu_p___34 ;
  unsigned short *tmp___26 ;
  void *__gu_p___35 ;
  void *__gu_p___36 ;
  unsigned short *tmp___27 ;
  void *__gu_p___37 ;
  unsigned short *tmp___28 ;
  void *__gu_p___38 ;
  void *__gu_p___39 ;
  unsigned short *tmp___29 ;
  void *__gu_p___40 ;
  unsigned short *tmp___30 ;
  void *__gu_p___41 ;
  void *__gu_p___42 ;
  unsigned short *tmp___31 ;
  void *__gu_p___43 ;
  unsigned short *tmp___32 ;
  void *__gu_p___44 ;
  void *__gu_p___45 ;
  unsigned short *tmp___33 ;
  void *__gu_p___46 ;
  unsigned short *tmp___34 ;
  void *__gu_p___47 ;
  void *__gu_p___48 ;
  unsigned short *tmp___35 ;
  void *__gu_p___49 ;
  unsigned short *tmp___36 ;
  void *__gu_p___50 ;
  void *__gu_p___51 ;
  unsigned short *tmp___37 ;
  void *__gu_p___52 ;
  unsigned short *tmp___38 ;
  void *__gu_p___53 ;
  void *__gu_p___54 ;
  unsigned short *tmp___39 ;
  void *__gu_p___55 ;
  unsigned short *tmp___40 ;
  void *__gu_p___56 ;
  unsigned short *tmp___41 ;
  void *__gu_p___57 ;
  unsigned short *tmp___42 ;
  void *__gu_p___58 ;
  unsigned short *tmp___43 ;
  void *__gu_p___59 ;
  unsigned short *tmp___44 ;
  void *__gu_p___60 ;
  unsigned short *tmp___45 ;
  void *__gu_p___61 ;
  unsigned short *tmp___46 ;
  void *__gu_p___62 ;
  unsigned short *tmp___47 ;
  void *__gu_p___63 ;
  unsigned short *tmp___48 ;
  void *__gu_p___64 ;
  unsigned short *tmp___49 ;
  void *__gu_p___65 ;
  unsigned short *tmp___50 ;

  {
#line 38
  tmp = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p = (void *)tmp;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p) = 8U;
#line 38
  goto ldv_41613;
  case 2UL: 
#line 38
  put_unaligned_le16(57352, __gu_p);
#line 38
  goto ldv_41613;
  case 4UL: 
#line 38
  put_unaligned_le32(57352U, __gu_p);
#line 38
  goto ldv_41613;
  case 8UL: 
#line 38
  put_unaligned_le64(57352ULL, __gu_p);
#line 38
  goto ldv_41613;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41613;
  }
  ldv_41613: 
#line 38
  tmp___0 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___0 = (void *)tmp___0;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___0) = (unsigned char )arg->my_addr_len;
#line 38
  goto ldv_41620;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->my_addr_len), __gu_p___0);
#line 38
  goto ldv_41620;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_41620;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->my_addr_len, __gu_p___0);
#line 38
  goto ldv_41620;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41620;
  }
  ldv_41620: 
#line 38
  __len = (size_t )arg->my_addr_len;
#line 38
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->my_addr), __len);
#line 38
  tags = tags + (unsigned long )arg->my_addr_len;
#line 38
  tmp___1 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___1 = (void *)tmp___1;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___1) = 9U;
#line 38
  goto ldv_41630;
  case 2UL: 
#line 38
  put_unaligned_le16(57353, __gu_p___1);
#line 38
  goto ldv_41630;
  case 4UL: 
#line 38
  put_unaligned_le32(57353U, __gu_p___1);
#line 38
  goto ldv_41630;
  case 8UL: 
#line 38
  put_unaligned_le64(57353ULL, __gu_p___1);
#line 38
  goto ldv_41630;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41630;
  }
  ldv_41630: 
#line 38
  tmp___2 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___2 = (void *)tmp___2;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___2) = (unsigned char )arg->peer_addr_len;
#line 38
  goto ldv_41637;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->peer_addr_len), __gu_p___2);
#line 38
  goto ldv_41637;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_41637;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->peer_addr_len, __gu_p___2);
#line 38
  goto ldv_41637;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41637;
  }
  ldv_41637: 
#line 38
  __len___0 = (size_t )arg->peer_addr_len;
#line 38
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->peer_addr), __len___0);
#line 38
  tags = tags + (unsigned long )arg->peer_addr_len;
#line 38
  tmp___3 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___3 = (void *)tmp___3;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___3) = 10U;
#line 38
  goto ldv_41647;
  case 2UL: 
#line 38
  put_unaligned_le16(49162, __gu_p___3);
#line 38
  goto ldv_41647;
  case 4UL: 
#line 38
  put_unaligned_le32(49162U, __gu_p___3);
#line 38
  goto ldv_41647;
  case 8UL: 
#line 38
  put_unaligned_le64(49162ULL, __gu_p___3);
#line 38
  goto ldv_41647;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41647;
  }
  ldv_41647: 
#line 38
  tmp___4 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___4 = (void *)tmp___4;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___4) = (unsigned char )arg->shared_secret_len;
#line 38
  goto ldv_41654;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->shared_secret_len), __gu_p___4);
#line 38
  goto ldv_41654;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_41654;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->shared_secret_len, __gu_p___4);
#line 38
  goto ldv_41654;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41654;
  }
  ldv_41654: 
#line 38
  __len___1 = (size_t )arg->shared_secret_len;
#line 38
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->shared_secret),
                               __len___1);
#line 38
  tags = tags + (unsigned long )arg->shared_secret_len;
#line 38
  tmp___5 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___5 = (void *)tmp___5;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___5) = 11U;
#line 38
  goto ldv_41664;
  case 2UL: 
#line 38
  put_unaligned_le16(49163, __gu_p___5);
#line 38
  goto ldv_41664;
  case 4UL: 
#line 38
  put_unaligned_le32(49163U, __gu_p___5);
#line 38
  goto ldv_41664;
  case 8UL: 
#line 38
  put_unaligned_le64(49163ULL, __gu_p___5);
#line 38
  goto ldv_41664;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41664;
  }
  ldv_41664: 
#line 38
  tmp___6 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___6 = (void *)tmp___6;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___6) = (unsigned char )arg->cram_hmac_alg_len;
#line 38
  goto ldv_41671;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->cram_hmac_alg_len), __gu_p___6);
#line 38
  goto ldv_41671;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_41671;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->cram_hmac_alg_len, __gu_p___6);
#line 38
  goto ldv_41671;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41671;
  }
  ldv_41671: 
#line 38
  __len___2 = (size_t )arg->cram_hmac_alg_len;
#line 38
  __ret___2 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cram_hmac_alg),
                               __len___2);
#line 38
  tags = tags + (unsigned long )arg->cram_hmac_alg_len;
#line 38
  tmp___7 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___7 = (void *)tmp___7;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___7) = 44U;
#line 38
  goto ldv_41681;
  case 2UL: 
#line 38
  put_unaligned_le16(49196, __gu_p___7);
#line 38
  goto ldv_41681;
  case 4UL: 
#line 38
  put_unaligned_le32(49196U, __gu_p___7);
#line 38
  goto ldv_41681;
  case 8UL: 
#line 38
  put_unaligned_le64(49196ULL, __gu_p___7);
#line 38
  goto ldv_41681;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41681;
  }
  ldv_41681: 
#line 38
  tmp___8 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___8 = (void *)tmp___8;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___8) = (unsigned char )arg->integrity_alg_len;
#line 38
  goto ldv_41688;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->integrity_alg_len), __gu_p___8);
#line 38
  goto ldv_41688;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_41688;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->integrity_alg_len, __gu_p___8);
#line 38
  goto ldv_41688;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41688;
  }
  ldv_41688: 
#line 38
  __len___3 = (size_t )arg->integrity_alg_len;
#line 38
  __ret___3 = __builtin_memcpy((void *)tags, (void const   *)(& arg->integrity_alg),
                               __len___3);
#line 38
  tags = tags + (unsigned long )arg->integrity_alg_len;
#line 38
  tmp___9 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___9 = (void *)tmp___9;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___9) = 14U;
#line 38
  goto ldv_41698;
  case 2UL: 
#line 38
  put_unaligned_le16(14, __gu_p___9);
#line 38
  goto ldv_41698;
  case 4UL: 
#line 38
  put_unaligned_le32(14U, __gu_p___9);
#line 38
  goto ldv_41698;
  case 8UL: 
#line 38
  put_unaligned_le64(14ULL, __gu_p___9);
#line 38
  goto ldv_41698;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41698;
  }
  ldv_41698: 
#line 38
  tmp___10 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___10 = (void *)tmp___10;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___10) = 4U;
#line 38
  goto ldv_41705;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___10);
#line 38
  goto ldv_41705;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___10);
#line 38
  goto ldv_41705;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___10);
#line 38
  goto ldv_41705;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41705;
  }
  ldv_41705: 
#line 38
  __gu_p___11 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___11) = (unsigned char )arg->timeout;
#line 38
  goto ldv_41712;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->timeout), __gu_p___11);
#line 38
  goto ldv_41712;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->timeout, __gu_p___11);
#line 38
  goto ldv_41712;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->timeout, __gu_p___11);
#line 38
  goto ldv_41712;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41712;
  }
  ldv_41712: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___11 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___12 = (void *)tmp___11;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___12) = 15U;
#line 38
  goto ldv_41719;
  case 2UL: 
#line 38
  put_unaligned_le16(8207, __gu_p___12);
#line 38
  goto ldv_41719;
  case 4UL: 
#line 38
  put_unaligned_le32(8207U, __gu_p___12);
#line 38
  goto ldv_41719;
  case 8UL: 
#line 38
  put_unaligned_le64(8207ULL, __gu_p___12);
#line 38
  goto ldv_41719;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41719;
  }
  ldv_41719: 
#line 38
  tmp___12 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___13 = (void *)tmp___12;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___13) = 4U;
#line 38
  goto ldv_41726;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___13);
#line 38
  goto ldv_41726;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___13);
#line 38
  goto ldv_41726;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___13);
#line 38
  goto ldv_41726;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41726;
  }
  ldv_41726: 
#line 38
  __gu_p___14 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___14) = (unsigned char )arg->wire_protocol;
#line 38
  goto ldv_41733;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->wire_protocol), __gu_p___14);
#line 38
  goto ldv_41733;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_41733;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->wire_protocol, __gu_p___14);
#line 38
  goto ldv_41733;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41733;
  }
  ldv_41733: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___13 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___15 = (void *)tmp___13;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___15) = 16U;
#line 38
  goto ldv_41740;
  case 2UL: 
#line 38
  put_unaligned_le16(16, __gu_p___15);
#line 38
  goto ldv_41740;
  case 4UL: 
#line 38
  put_unaligned_le32(16U, __gu_p___15);
#line 38
  goto ldv_41740;
  case 8UL: 
#line 38
  put_unaligned_le64(16ULL, __gu_p___15);
#line 38
  goto ldv_41740;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41740;
  }
  ldv_41740: 
#line 38
  tmp___14 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___16 = (void *)tmp___14;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___16) = 4U;
#line 38
  goto ldv_41747;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___16);
#line 38
  goto ldv_41747;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___16);
#line 38
  goto ldv_41747;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___16);
#line 38
  goto ldv_41747;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41747;
  }
  ldv_41747: 
#line 38
  __gu_p___17 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___17) = (unsigned char )arg->try_connect_int;
#line 38
  goto ldv_41754;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->try_connect_int), __gu_p___17);
#line 38
  goto ldv_41754;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_41754;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->try_connect_int, __gu_p___17);
#line 38
  goto ldv_41754;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41754;
  }
  ldv_41754: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___15 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___18 = (void *)tmp___15;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___18) = 17U;
#line 38
  goto ldv_41761;
  case 2UL: 
#line 38
  put_unaligned_le16(17, __gu_p___18);
#line 38
  goto ldv_41761;
  case 4UL: 
#line 38
  put_unaligned_le32(17U, __gu_p___18);
#line 38
  goto ldv_41761;
  case 8UL: 
#line 38
  put_unaligned_le64(17ULL, __gu_p___18);
#line 38
  goto ldv_41761;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41761;
  }
  ldv_41761: 
#line 38
  tmp___16 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___19 = (void *)tmp___16;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___19) = 4U;
#line 38
  goto ldv_41768;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___19);
#line 38
  goto ldv_41768;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___19);
#line 38
  goto ldv_41768;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___19);
#line 38
  goto ldv_41768;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41768;
  }
  ldv_41768: 
#line 38
  __gu_p___20 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___20) = (unsigned char )arg->ping_int;
#line 38
  goto ldv_41775;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_int), __gu_p___20);
#line 38
  goto ldv_41775;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_41775;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_int, __gu_p___20);
#line 38
  goto ldv_41775;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41775;
  }
  ldv_41775: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___17 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___21 = (void *)tmp___17;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___21) = 18U;
#line 38
  goto ldv_41782;
  case 2UL: 
#line 38
  put_unaligned_le16(18, __gu_p___21);
#line 38
  goto ldv_41782;
  case 4UL: 
#line 38
  put_unaligned_le32(18U, __gu_p___21);
#line 38
  goto ldv_41782;
  case 8UL: 
#line 38
  put_unaligned_le64(18ULL, __gu_p___21);
#line 38
  goto ldv_41782;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41782;
  }
  ldv_41782: 
#line 38
  tmp___18 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___22 = (void *)tmp___18;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___22) = 4U;
#line 38
  goto ldv_41789;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___22);
#line 38
  goto ldv_41789;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___22);
#line 38
  goto ldv_41789;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___22);
#line 38
  goto ldv_41789;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41789;
  }
  ldv_41789: 
#line 38
  __gu_p___23 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___23) = (unsigned char )arg->max_epoch_size;
#line 38
  goto ldv_41796;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_epoch_size), __gu_p___23);
#line 38
  goto ldv_41796;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_41796;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_epoch_size, __gu_p___23);
#line 38
  goto ldv_41796;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41796;
  }
  ldv_41796: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___19 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___24 = (void *)tmp___19;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___24) = 19U;
#line 38
  goto ldv_41803;
  case 2UL: 
#line 38
  put_unaligned_le16(19, __gu_p___24);
#line 38
  goto ldv_41803;
  case 4UL: 
#line 38
  put_unaligned_le32(19U, __gu_p___24);
#line 38
  goto ldv_41803;
  case 8UL: 
#line 38
  put_unaligned_le64(19ULL, __gu_p___24);
#line 38
  goto ldv_41803;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41803;
  }
  ldv_41803: 
#line 38
  tmp___20 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___25 = (void *)tmp___20;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___25) = 4U;
#line 38
  goto ldv_41810;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___25);
#line 38
  goto ldv_41810;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___25);
#line 38
  goto ldv_41810;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___25);
#line 38
  goto ldv_41810;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41810;
  }
  ldv_41810: 
#line 38
  __gu_p___26 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___26) = (unsigned char )arg->max_buffers;
#line 38
  goto ldv_41817;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->max_buffers), __gu_p___26);
#line 38
  goto ldv_41817;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_41817;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->max_buffers, __gu_p___26);
#line 38
  goto ldv_41817;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41817;
  }
  ldv_41817: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___21 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___27 = (void *)tmp___21;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___27) = 20U;
#line 38
  goto ldv_41824;
  case 2UL: 
#line 38
  put_unaligned_le16(20, __gu_p___27);
#line 38
  goto ldv_41824;
  case 4UL: 
#line 38
  put_unaligned_le32(20U, __gu_p___27);
#line 38
  goto ldv_41824;
  case 8UL: 
#line 38
  put_unaligned_le64(20ULL, __gu_p___27);
#line 38
  goto ldv_41824;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41824;
  }
  ldv_41824: 
#line 38
  tmp___22 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___28 = (void *)tmp___22;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___28) = 4U;
#line 38
  goto ldv_41831;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___28);
#line 38
  goto ldv_41831;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___28);
#line 38
  goto ldv_41831;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___28);
#line 38
  goto ldv_41831;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41831;
  }
  ldv_41831: 
#line 38
  __gu_p___29 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___29) = (unsigned char )arg->unplug_watermark;
#line 38
  goto ldv_41838;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->unplug_watermark), __gu_p___29);
#line 38
  goto ldv_41838;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_41838;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->unplug_watermark, __gu_p___29);
#line 38
  goto ldv_41838;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41838;
  }
  ldv_41838: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___23 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___30 = (void *)tmp___23;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___30) = 21U;
#line 38
  goto ldv_41845;
  case 2UL: 
#line 38
  put_unaligned_le16(21, __gu_p___30);
#line 38
  goto ldv_41845;
  case 4UL: 
#line 38
  put_unaligned_le32(21U, __gu_p___30);
#line 38
  goto ldv_41845;
  case 8UL: 
#line 38
  put_unaligned_le64(21ULL, __gu_p___30);
#line 38
  goto ldv_41845;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41845;
  }
  ldv_41845: 
#line 38
  tmp___24 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___31 = (void *)tmp___24;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___31) = 4U;
#line 38
  goto ldv_41852;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___31);
#line 38
  goto ldv_41852;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___31);
#line 38
  goto ldv_41852;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___31);
#line 38
  goto ldv_41852;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41852;
  }
  ldv_41852: 
#line 38
  __gu_p___32 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___32) = (unsigned char )arg->sndbuf_size;
#line 38
  goto ldv_41859;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->sndbuf_size), __gu_p___32);
#line 38
  goto ldv_41859;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_41859;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->sndbuf_size, __gu_p___32);
#line 38
  goto ldv_41859;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41859;
  }
  ldv_41859: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___25 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___33 = (void *)tmp___25;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___33) = 22U;
#line 38
  goto ldv_41866;
  case 2UL: 
#line 38
  put_unaligned_le16(22, __gu_p___33);
#line 38
  goto ldv_41866;
  case 4UL: 
#line 38
  put_unaligned_le32(22U, __gu_p___33);
#line 38
  goto ldv_41866;
  case 8UL: 
#line 38
  put_unaligned_le64(22ULL, __gu_p___33);
#line 38
  goto ldv_41866;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41866;
  }
  ldv_41866: 
#line 38
  tmp___26 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___34 = (void *)tmp___26;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___34) = 4U;
#line 38
  goto ldv_41873;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___34);
#line 38
  goto ldv_41873;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___34);
#line 38
  goto ldv_41873;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___34);
#line 38
  goto ldv_41873;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41873;
  }
  ldv_41873: 
#line 38
  __gu_p___35 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___35) = (unsigned char )arg->ko_count;
#line 38
  goto ldv_41880;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ko_count), __gu_p___35);
#line 38
  goto ldv_41880;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_41880;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ko_count, __gu_p___35);
#line 38
  goto ldv_41880;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41880;
  }
  ldv_41880: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___27 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___36 = (void *)tmp___27;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___36) = 24U;
#line 38
  goto ldv_41887;
  case 2UL: 
#line 38
  put_unaligned_le16(24, __gu_p___36);
#line 38
  goto ldv_41887;
  case 4UL: 
#line 38
  put_unaligned_le32(24U, __gu_p___36);
#line 38
  goto ldv_41887;
  case 8UL: 
#line 38
  put_unaligned_le64(24ULL, __gu_p___36);
#line 38
  goto ldv_41887;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41887;
  }
  ldv_41887: 
#line 38
  tmp___28 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___37 = (void *)tmp___28;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___37) = 4U;
#line 38
  goto ldv_41894;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___37);
#line 38
  goto ldv_41894;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___37);
#line 38
  goto ldv_41894;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___37);
#line 38
  goto ldv_41894;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41894;
  }
  ldv_41894: 
#line 38
  __gu_p___38 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___38) = (unsigned char )arg->after_sb_0p;
#line 38
  goto ldv_41901;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_0p), __gu_p___38);
#line 38
  goto ldv_41901;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_41901;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_0p, __gu_p___38);
#line 38
  goto ldv_41901;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41901;
  }
  ldv_41901: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___29 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___39 = (void *)tmp___29;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___39) = 25U;
#line 38
  goto ldv_41908;
  case 2UL: 
#line 38
  put_unaligned_le16(25, __gu_p___39);
#line 38
  goto ldv_41908;
  case 4UL: 
#line 38
  put_unaligned_le32(25U, __gu_p___39);
#line 38
  goto ldv_41908;
  case 8UL: 
#line 38
  put_unaligned_le64(25ULL, __gu_p___39);
#line 38
  goto ldv_41908;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41908;
  }
  ldv_41908: 
#line 38
  tmp___30 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___40 = (void *)tmp___30;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___40) = 4U;
#line 38
  goto ldv_41915;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___40);
#line 38
  goto ldv_41915;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___40);
#line 38
  goto ldv_41915;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___40);
#line 38
  goto ldv_41915;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41915;
  }
  ldv_41915: 
#line 38
  __gu_p___41 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___41) = (unsigned char )arg->after_sb_1p;
#line 38
  goto ldv_41922;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_1p), __gu_p___41);
#line 38
  goto ldv_41922;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_41922;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_1p, __gu_p___41);
#line 38
  goto ldv_41922;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41922;
  }
  ldv_41922: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___31 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___42 = (void *)tmp___31;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___42) = 26U;
#line 38
  goto ldv_41929;
  case 2UL: 
#line 38
  put_unaligned_le16(26, __gu_p___42);
#line 38
  goto ldv_41929;
  case 4UL: 
#line 38
  put_unaligned_le32(26U, __gu_p___42);
#line 38
  goto ldv_41929;
  case 8UL: 
#line 38
  put_unaligned_le64(26ULL, __gu_p___42);
#line 38
  goto ldv_41929;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41929;
  }
  ldv_41929: 
#line 38
  tmp___32 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___43 = (void *)tmp___32;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___43) = 4U;
#line 38
  goto ldv_41936;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___43);
#line 38
  goto ldv_41936;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___43);
#line 38
  goto ldv_41936;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___43);
#line 38
  goto ldv_41936;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41936;
  }
  ldv_41936: 
#line 38
  __gu_p___44 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___44) = (unsigned char )arg->after_sb_2p;
#line 38
  goto ldv_41943;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->after_sb_2p), __gu_p___44);
#line 38
  goto ldv_41943;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_41943;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->after_sb_2p, __gu_p___44);
#line 38
  goto ldv_41943;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41943;
  }
  ldv_41943: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___33 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___45 = (void *)tmp___33;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___45) = 39U;
#line 38
  goto ldv_41950;
  case 2UL: 
#line 38
  put_unaligned_le16(39, __gu_p___45);
#line 38
  goto ldv_41950;
  case 4UL: 
#line 38
  put_unaligned_le32(39U, __gu_p___45);
#line 38
  goto ldv_41950;
  case 8UL: 
#line 38
  put_unaligned_le64(39ULL, __gu_p___45);
#line 38
  goto ldv_41950;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41950;
  }
  ldv_41950: 
#line 38
  tmp___34 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___46 = (void *)tmp___34;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___46) = 4U;
#line 38
  goto ldv_41957;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___46);
#line 38
  goto ldv_41957;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___46);
#line 38
  goto ldv_41957;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___46);
#line 38
  goto ldv_41957;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41957;
  }
  ldv_41957: 
#line 38
  __gu_p___47 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___47) = (unsigned char )arg->rr_conflict;
#line 38
  goto ldv_41964;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rr_conflict), __gu_p___47);
#line 38
  goto ldv_41964;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_41964;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rr_conflict, __gu_p___47);
#line 38
  goto ldv_41964;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41964;
  }
  ldv_41964: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___35 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___48 = (void *)tmp___35;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___48) = 40U;
#line 38
  goto ldv_41971;
  case 2UL: 
#line 38
  put_unaligned_le16(40, __gu_p___48);
#line 38
  goto ldv_41971;
  case 4UL: 
#line 38
  put_unaligned_le32(40U, __gu_p___48);
#line 38
  goto ldv_41971;
  case 8UL: 
#line 38
  put_unaligned_le64(40ULL, __gu_p___48);
#line 38
  goto ldv_41971;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41971;
  }
  ldv_41971: 
#line 38
  tmp___36 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___49 = (void *)tmp___36;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___49) = 4U;
#line 38
  goto ldv_41978;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___49);
#line 38
  goto ldv_41978;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___49);
#line 38
  goto ldv_41978;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___49);
#line 38
  goto ldv_41978;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41978;
  }
  ldv_41978: 
#line 38
  __gu_p___50 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___50) = (unsigned char )arg->ping_timeo;
#line 38
  goto ldv_41985;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->ping_timeo), __gu_p___50);
#line 38
  goto ldv_41985;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_41985;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->ping_timeo, __gu_p___50);
#line 38
  goto ldv_41985;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41985;
  }
  ldv_41985: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___37 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___51 = (void *)tmp___37;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___51) = 67U;
#line 38
  goto ldv_41992;
  case 2UL: 
#line 38
  put_unaligned_le16(67, __gu_p___51);
#line 38
  goto ldv_41992;
  case 4UL: 
#line 38
  put_unaligned_le32(67U, __gu_p___51);
#line 38
  goto ldv_41992;
  case 8UL: 
#line 38
  put_unaligned_le64(67ULL, __gu_p___51);
#line 38
  goto ldv_41992;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41992;
  }
  ldv_41992: 
#line 38
  tmp___38 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___52 = (void *)tmp___38;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___52) = 4U;
#line 38
  goto ldv_41999;
  case 2UL: 
#line 38
  put_unaligned_le16(4, __gu_p___52);
#line 38
  goto ldv_41999;
  case 4UL: 
#line 38
  put_unaligned_le32(4U, __gu_p___52);
#line 38
  goto ldv_41999;
  case 8UL: 
#line 38
  put_unaligned_le64(4ULL, __gu_p___52);
#line 38
  goto ldv_41999;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_41999;
  }
  ldv_41999: 
#line 38
  __gu_p___53 = (void *)tags;
#line 38
  switch (4UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___53) = (unsigned char )arg->rcvbuf_size;
#line 38
  goto ldv_42006;
  case 2UL: 
#line 38
  put_unaligned_le16((int )((unsigned short )arg->rcvbuf_size), __gu_p___53);
#line 38
  goto ldv_42006;
  case 4UL: 
#line 38
  put_unaligned_le32((unsigned int )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_42006;
  case 8UL: 
#line 38
  put_unaligned_le64((unsigned long long )arg->rcvbuf_size, __gu_p___53);
#line 38
  goto ldv_42006;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42006;
  }
  ldv_42006: 
#line 38
  tags = tags + 4U;
#line 38
  tmp___39 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___54 = (void *)tmp___39;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___54) = 60U;
#line 38
  goto ldv_42013;
  case 2UL: 
#line 38
  put_unaligned_le16(41020, __gu_p___54);
#line 38
  goto ldv_42013;
  case 4UL: 
#line 38
  put_unaligned_le32(41020U, __gu_p___54);
#line 38
  goto ldv_42013;
  case 8UL: 
#line 38
  put_unaligned_le64(41020ULL, __gu_p___54);
#line 38
  goto ldv_42013;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42013;
  }
  ldv_42013: 
#line 38
  tmp___40 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___55 = (void *)tmp___40;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___55) = 1U;
#line 38
  goto ldv_42020;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___55);
#line 38
  goto ldv_42020;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___55);
#line 38
  goto ldv_42020;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___55);
#line 38
  goto ldv_42020;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42020;
  }
  ldv_42020: 
#line 38
  *((char *)tags) = (char )arg->mind_af;
#line 38
  tags = tags + 1U;
#line 38
  tmp___41 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___56 = (void *)tmp___41;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___56) = 27U;
#line 38
  goto ldv_42027;
  case 2UL: 
#line 38
  put_unaligned_le16(32795, __gu_p___56);
#line 38
  goto ldv_42027;
  case 4UL: 
#line 38
  put_unaligned_le32(32795U, __gu_p___56);
#line 38
  goto ldv_42027;
  case 8UL: 
#line 38
  put_unaligned_le64(32795ULL, __gu_p___56);
#line 38
  goto ldv_42027;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42027;
  }
  ldv_42027: 
#line 38
  tmp___42 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___57 = (void *)tmp___42;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___57) = 1U;
#line 38
  goto ldv_42034;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___57);
#line 38
  goto ldv_42034;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___57);
#line 38
  goto ldv_42034;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___57);
#line 38
  goto ldv_42034;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42034;
  }
  ldv_42034: 
#line 38
  *((char *)tags) = (char )arg->want_lose;
#line 38
  tags = tags + 1U;
#line 38
  tmp___43 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___58 = (void *)tmp___43;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___58) = 28U;
#line 38
  goto ldv_42041;
  case 2UL: 
#line 38
  put_unaligned_le16(32796, __gu_p___58);
#line 38
  goto ldv_42041;
  case 4UL: 
#line 38
  put_unaligned_le32(32796U, __gu_p___58);
#line 38
  goto ldv_42041;
  case 8UL: 
#line 38
  put_unaligned_le64(32796ULL, __gu_p___58);
#line 38
  goto ldv_42041;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42041;
  }
  ldv_42041: 
#line 38
  tmp___44 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___59 = (void *)tmp___44;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___59) = 1U;
#line 38
  goto ldv_42048;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___59);
#line 38
  goto ldv_42048;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___59);
#line 38
  goto ldv_42048;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___59);
#line 38
  goto ldv_42048;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42048;
  }
  ldv_42048: 
#line 38
  *((char *)tags) = (char )arg->two_primaries;
#line 38
  tags = tags + 1U;
#line 38
  tmp___45 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___60 = (void *)tmp___45;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___60) = 41U;
#line 38
  goto ldv_42055;
  case 2UL: 
#line 38
  put_unaligned_le16(32809, __gu_p___60);
#line 38
  goto ldv_42055;
  case 4UL: 
#line 38
  put_unaligned_le32(32809U, __gu_p___60);
#line 38
  goto ldv_42055;
  case 8UL: 
#line 38
  put_unaligned_le64(32809ULL, __gu_p___60);
#line 38
  goto ldv_42055;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42055;
  }
  ldv_42055: 
#line 38
  tmp___46 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___61 = (void *)tmp___46;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___61) = 1U;
#line 38
  goto ldv_42062;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___61);
#line 38
  goto ldv_42062;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___61);
#line 38
  goto ldv_42062;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___61);
#line 38
  goto ldv_42062;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42062;
  }
  ldv_42062: 
#line 38
  *((char *)tags) = (char )arg->always_asbp;
#line 38
  tags = tags + 1U;
#line 38
  tmp___47 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___62 = (void *)tmp___47;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___62) = 61U;
#line 38
  goto ldv_42069;
  case 2UL: 
#line 38
  put_unaligned_le16(32829, __gu_p___62);
#line 38
  goto ldv_42069;
  case 4UL: 
#line 38
  put_unaligned_le32(32829U, __gu_p___62);
#line 38
  goto ldv_42069;
  case 8UL: 
#line 38
  put_unaligned_le64(32829ULL, __gu_p___62);
#line 38
  goto ldv_42069;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42069;
  }
  ldv_42069: 
#line 38
  tmp___48 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___63 = (void *)tmp___48;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___63) = 1U;
#line 38
  goto ldv_42076;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___63);
#line 38
  goto ldv_42076;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___63);
#line 38
  goto ldv_42076;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___63);
#line 38
  goto ldv_42076;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42076;
  }
  ldv_42076: 
#line 38
  *((char *)tags) = (char )arg->no_cork;
#line 38
  tags = tags + 1U;
#line 38
  tmp___49 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___64 = (void *)tmp___49;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___64) = 62U;
#line 38
  goto ldv_42083;
  case 2UL: 
#line 38
  put_unaligned_le16(41022, __gu_p___64);
#line 38
  goto ldv_42083;
  case 4UL: 
#line 38
  put_unaligned_le32(41022U, __gu_p___64);
#line 38
  goto ldv_42083;
  case 8UL: 
#line 38
  put_unaligned_le64(41022ULL, __gu_p___64);
#line 38
  goto ldv_42083;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42083;
  }
  ldv_42083: 
#line 38
  tmp___50 = tags;
#line 38
  tags = tags + 1;
#line 38
  __gu_p___65 = (void *)tmp___50;
#line 38
  switch (2UL) {
  case 1UL: 
#line 38
  *((u8 *)__gu_p___65) = 1U;
#line 38
  goto ldv_42090;
  case 2UL: 
#line 38
  put_unaligned_le16(1, __gu_p___65);
#line 38
  goto ldv_42090;
  case 4UL: 
#line 38
  put_unaligned_le32(1U, __gu_p___65);
#line 38
  goto ldv_42090;
  case 8UL: 
#line 38
  put_unaligned_le64(1ULL, __gu_p___65);
#line 38
  goto ldv_42090;
  default: 
#line 38
  __bad_unaligned_access_size();
#line 38
  goto ldv_42090;
  }
  ldv_42090: 
#line 38
  *((char *)tags) = (char )arg->auto_sndbuf_size;
#line 38
  tags = tags + 1U;
#line 38
  return (tags);
}
}
#line 82
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) ;
#line 82 "include/linux/drbd_nl.h"
static unsigned short *syncer_conf_to_tags(struct drbd_conf *mdev , struct syncer_conf *arg ,
                                           unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;
  unsigned short *tmp___2 ;
  void *__gu_p___4 ;
  void *__gu_p___5 ;
  unsigned short *tmp___3 ;
  void *__gu_p___6 ;
  unsigned short *tmp___4 ;
  void *__gu_p___7 ;
  void *__gu_p___8 ;
  unsigned short *tmp___5 ;
  void *__gu_p___9 ;
  unsigned short *tmp___6 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___10 ;
  unsigned short *tmp___7 ;
  void *__gu_p___11 ;
  unsigned short *tmp___8 ;
  size_t __len___0 ;
  void *__ret___0 ;
  void *__gu_p___12 ;
  unsigned short *tmp___9 ;
  void *__gu_p___13 ;
  unsigned short *tmp___10 ;
  size_t __len___1 ;
  void *__ret___1 ;
  void *__gu_p___14 ;
  unsigned short *tmp___11 ;
  void *__gu_p___15 ;
  unsigned short *tmp___12 ;

  {
#line 74
  tmp = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p = (void *)tmp;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p) = 30U;
#line 74
  goto ldv_42145;
  case 2UL: 
#line 74
  put_unaligned_le16(30, __gu_p);
#line 74
  goto ldv_42145;
  case 4UL: 
#line 74
  put_unaligned_le32(30U, __gu_p);
#line 74
  goto ldv_42145;
  case 8UL: 
#line 74
  put_unaligned_le64(30ULL, __gu_p);
#line 74
  goto ldv_42145;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42145;
  }
  ldv_42145: 
#line 74
  tmp___0 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___0 = (void *)tmp___0;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___0) = 4U;
#line 74
  goto ldv_42152;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___0);
#line 74
  goto ldv_42152;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___0);
#line 74
  goto ldv_42152;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___0);
#line 74
  goto ldv_42152;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42152;
  }
  ldv_42152: 
#line 74
  __gu_p___1 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___1) = (unsigned char )arg->rate;
#line 74
  goto ldv_42159;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->rate), __gu_p___1);
#line 74
  goto ldv_42159;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->rate, __gu_p___1);
#line 74
  goto ldv_42159;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->rate, __gu_p___1);
#line 74
  goto ldv_42159;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42159;
  }
  ldv_42159: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___1 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___2 = (void *)tmp___1;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___2) = 31U;
#line 74
  goto ldv_42166;
  case 2UL: 
#line 74
  put_unaligned_le16(31, __gu_p___2);
#line 74
  goto ldv_42166;
  case 4UL: 
#line 74
  put_unaligned_le32(31U, __gu_p___2);
#line 74
  goto ldv_42166;
  case 8UL: 
#line 74
  put_unaligned_le64(31ULL, __gu_p___2);
#line 74
  goto ldv_42166;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42166;
  }
  ldv_42166: 
#line 74
  tmp___2 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___3 = (void *)tmp___2;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___3) = 4U;
#line 74
  goto ldv_42173;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___3);
#line 74
  goto ldv_42173;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___3);
#line 74
  goto ldv_42173;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___3);
#line 74
  goto ldv_42173;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42173;
  }
  ldv_42173: 
#line 74
  __gu_p___4 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___4) = (unsigned char )arg->after;
#line 74
  goto ldv_42180;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->after), __gu_p___4);
#line 74
  goto ldv_42180;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->after, __gu_p___4);
#line 74
  goto ldv_42180;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->after, __gu_p___4);
#line 74
  goto ldv_42180;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42180;
  }
  ldv_42180: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___3 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___5 = (void *)tmp___3;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___5) = 32U;
#line 74
  goto ldv_42187;
  case 2UL: 
#line 74
  put_unaligned_le16(32, __gu_p___5);
#line 74
  goto ldv_42187;
  case 4UL: 
#line 74
  put_unaligned_le32(32U, __gu_p___5);
#line 74
  goto ldv_42187;
  case 8UL: 
#line 74
  put_unaligned_le64(32ULL, __gu_p___5);
#line 74
  goto ldv_42187;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42187;
  }
  ldv_42187: 
#line 74
  tmp___4 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___6 = (void *)tmp___4;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___6) = 4U;
#line 74
  goto ldv_42194;
  case 2UL: 
#line 74
  put_unaligned_le16(4, __gu_p___6);
#line 74
  goto ldv_42194;
  case 4UL: 
#line 74
  put_unaligned_le32(4U, __gu_p___6);
#line 74
  goto ldv_42194;
  case 8UL: 
#line 74
  put_unaligned_le64(4ULL, __gu_p___6);
#line 74
  goto ldv_42194;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42194;
  }
  ldv_42194: 
#line 74
  __gu_p___7 = (void *)tags;
#line 74
  switch (4UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___7) = (unsigned char )arg->al_extents;
#line 74
  goto ldv_42201;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->al_extents), __gu_p___7);
#line 74
  goto ldv_42201;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->al_extents, __gu_p___7);
#line 74
  goto ldv_42201;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->al_extents, __gu_p___7);
#line 74
  goto ldv_42201;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42201;
  }
  ldv_42201: 
#line 74
  tags = tags + 4U;
#line 74
  tmp___5 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___8 = (void *)tmp___5;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___8) = 52U;
#line 74
  goto ldv_42208;
  case 2UL: 
#line 74
  put_unaligned_le16(49204, __gu_p___8);
#line 74
  goto ldv_42208;
  case 4UL: 
#line 74
  put_unaligned_le32(49204U, __gu_p___8);
#line 74
  goto ldv_42208;
  case 8UL: 
#line 74
  put_unaligned_le64(49204ULL, __gu_p___8);
#line 74
  goto ldv_42208;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42208;
  }
  ldv_42208: 
#line 74
  tmp___6 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___9 = (void *)tmp___6;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___9) = (unsigned char )arg->verify_alg_len;
#line 74
  goto ldv_42215;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->verify_alg_len), __gu_p___9);
#line 74
  goto ldv_42215;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->verify_alg_len, __gu_p___9);
#line 74
  goto ldv_42215;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->verify_alg_len, __gu_p___9);
#line 74
  goto ldv_42215;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42215;
  }
  ldv_42215: 
#line 74
  __len = (size_t )arg->verify_alg_len;
#line 74
  __ret = __builtin_memcpy((void *)tags, (void const   *)(& arg->verify_alg), __len);
#line 74
  tags = tags + (unsigned long )arg->verify_alg_len;
#line 74
  tmp___7 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___10 = (void *)tmp___7;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___10) = 51U;
#line 74
  goto ldv_42225;
  case 2UL: 
#line 74
  put_unaligned_le16(49203, __gu_p___10);
#line 74
  goto ldv_42225;
  case 4UL: 
#line 74
  put_unaligned_le32(49203U, __gu_p___10);
#line 74
  goto ldv_42225;
  case 8UL: 
#line 74
  put_unaligned_le64(49203ULL, __gu_p___10);
#line 74
  goto ldv_42225;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42225;
  }
  ldv_42225: 
#line 74
  tmp___8 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___11 = (void *)tmp___8;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___11) = (unsigned char )arg->cpu_mask_len;
#line 74
  goto ldv_42232;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->cpu_mask_len), __gu_p___11);
#line 74
  goto ldv_42232;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->cpu_mask_len, __gu_p___11);
#line 74
  goto ldv_42232;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->cpu_mask_len, __gu_p___11);
#line 74
  goto ldv_42232;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42232;
  }
  ldv_42232: 
#line 74
  __len___0 = (size_t )arg->cpu_mask_len;
#line 74
  __ret___0 = __builtin_memcpy((void *)tags, (void const   *)(& arg->cpu_mask), __len___0);
#line 74
  tags = tags + (unsigned long )arg->cpu_mask_len;
#line 74
  tmp___9 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___12 = (void *)tmp___9;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___12) = 64U;
#line 74
  goto ldv_42242;
  case 2UL: 
#line 74
  put_unaligned_le16(49216, __gu_p___12);
#line 74
  goto ldv_42242;
  case 4UL: 
#line 74
  put_unaligned_le32(49216U, __gu_p___12);
#line 74
  goto ldv_42242;
  case 8UL: 
#line 74
  put_unaligned_le64(49216ULL, __gu_p___12);
#line 74
  goto ldv_42242;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42242;
  }
  ldv_42242: 
#line 74
  tmp___10 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___13 = (void *)tmp___10;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___13) = (unsigned char )arg->csums_alg_len;
#line 74
  goto ldv_42249;
  case 2UL: 
#line 74
  put_unaligned_le16((int )((unsigned short )arg->csums_alg_len), __gu_p___13);
#line 74
  goto ldv_42249;
  case 4UL: 
#line 74
  put_unaligned_le32((unsigned int )arg->csums_alg_len, __gu_p___13);
#line 74
  goto ldv_42249;
  case 8UL: 
#line 74
  put_unaligned_le64((unsigned long long )arg->csums_alg_len, __gu_p___13);
#line 74
  goto ldv_42249;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42249;
  }
  ldv_42249: 
#line 74
  __len___1 = (size_t )arg->csums_alg_len;
#line 74
  __ret___1 = __builtin_memcpy((void *)tags, (void const   *)(& arg->csums_alg), __len___1);
#line 74
  tags = tags + (unsigned long )arg->csums_alg_len;
#line 74
  tmp___11 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___14 = (void *)tmp___11;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___14) = 65U;
#line 74
  goto ldv_42259;
  case 2UL: 
#line 74
  put_unaligned_le16(32833, __gu_p___14);
#line 74
  goto ldv_42259;
  case 4UL: 
#line 74
  put_unaligned_le32(32833U, __gu_p___14);
#line 74
  goto ldv_42259;
  case 8UL: 
#line 74
  put_unaligned_le64(32833ULL, __gu_p___14);
#line 74
  goto ldv_42259;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42259;
  }
  ldv_42259: 
#line 74
  tmp___12 = tags;
#line 74
  tags = tags + 1;
#line 74
  __gu_p___15 = (void *)tmp___12;
#line 74
  switch (2UL) {
  case 1UL: 
#line 74
  *((u8 *)__gu_p___15) = 1U;
#line 74
  goto ldv_42266;
  case 2UL: 
#line 74
  put_unaligned_le16(1, __gu_p___15);
#line 74
  goto ldv_42266;
  case 4UL: 
#line 74
  put_unaligned_le32(1U, __gu_p___15);
#line 74
  goto ldv_42266;
  case 8UL: 
#line 74
  put_unaligned_le64(1ULL, __gu_p___15);
#line 74
  goto ldv_42266;
  default: 
#line 74
  __bad_unaligned_access_size();
#line 74
  goto ldv_42266;
  }
  ldv_42266: 
#line 74
  *((char *)tags) = (char )arg->use_rle;
#line 74
  tags = tags + 1U;
#line 74
  return (tags);
}
}
#line 94
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) ;
#line 94 "include/linux/drbd_nl.h"
static unsigned short *get_state_to_tags(struct drbd_conf *mdev , struct get_state *arg ,
                                         unsigned short *tags ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;

  {
#line 92
  tmp = tags;
#line 92
  tags = tags + 1;
#line 92
  __gu_p = (void *)tmp;
#line 92
  switch (2UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p) = 33U;
#line 92
  goto ldv_42354;
  case 2UL: 
#line 92
  put_unaligned_le16(33, __gu_p);
#line 92
  goto ldv_42354;
  case 4UL: 
#line 92
  put_unaligned_le32(33U, __gu_p);
#line 92
  goto ldv_42354;
  case 8UL: 
#line 92
  put_unaligned_le64(33ULL, __gu_p);
#line 92
  goto ldv_42354;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_42354;
  }
  ldv_42354: 
#line 92
  tmp___0 = tags;
#line 92
  tags = tags + 1;
#line 92
  __gu_p___0 = (void *)tmp___0;
#line 92
  switch (2UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p___0) = 4U;
#line 92
  goto ldv_42361;
  case 2UL: 
#line 92
  put_unaligned_le16(4, __gu_p___0);
#line 92
  goto ldv_42361;
  case 4UL: 
#line 92
  put_unaligned_le32(4U, __gu_p___0);
#line 92
  goto ldv_42361;
  case 8UL: 
#line 92
  put_unaligned_le64(4ULL, __gu_p___0);
#line 92
  goto ldv_42361;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_42361;
  }
  ldv_42361: 
#line 92
  __gu_p___1 = (void *)tags;
#line 92
  switch (4UL) {
  case 1UL: 
#line 92
  *((u8 *)__gu_p___1) = (unsigned char )arg->state_i;
#line 92
  goto ldv_42368;
  case 2UL: 
#line 92
  put_unaligned_le16((int )((unsigned short )arg->state_i), __gu_p___1);
#line 92
  goto ldv_42368;
  case 4UL: 
#line 92
  put_unaligned_le32((unsigned int )arg->state_i, __gu_p___1);
#line 92
  goto ldv_42368;
  case 8UL: 
#line 92
  put_unaligned_le64((unsigned long long )arg->state_i, __gu_p___1);
#line 92
  goto ldv_42368;
  default: 
#line 92
  __bad_unaligned_access_size();
#line 92
  goto ldv_42368;
  }
  ldv_42368: 
#line 92
  tags = tags + 4U;
#line 92
  return (tags);
}
}
#line 138 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) ;
#line 139
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) ;
#line 141 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_khelper(struct drbd_conf *mdev , char *cmd ) 
{ 
  char *envp[6U] ;
  char mb[12U] ;
  char af[20U] ;
  char ad[60U] ;
  char *afs ;
  char *argv[4U] ;
  int ret ;
  unsigned int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 143
  envp[0] = (char *)"HOME=/";
#line 143
  envp[1] = (char *)"TERM=linux";
#line 143
  envp[2] = (char *)"PATH=/sbin:/usr/sbin:/bin:/usr/bin";
#line 143
  envp[3] = 0;
#line 143
  envp[4] = 0;
#line 143
  envp[5] = 0;
#line 151
  argv[0] = (char *)(& usermode_helper);
#line 151
  argv[1] = cmd;
#line 151
  argv[2] = (char *)(& mb);
#line 151
  argv[3] = 0;
#line 154
  tmp = mdev_to_minor(mdev);
#line 154
  snprintf((char *)(& mb), 12UL, "minor-%d", tmp);
#line 156
  tmp___0 = get_net_conf(mdev);
#line 156
  if (tmp___0 != 0) {
#line 157
    switch ((int )((struct sockaddr *)(& (mdev->net_conf)->peer_addr))->sa_family) {
    case 10: 
#line 159
    afs = (char *)"ipv6";
#line 160
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI6", & ((struct sockaddr_in6 *)(& (mdev->net_conf)->peer_addr))->sin6_addr);
#line 162
    goto ldv_42689;
    case 2: 
#line 164
    afs = (char *)"ipv4";
#line 165
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
#line 167
    goto ldv_42689;
    default: 
#line 169
    afs = (char *)"ssocks";
#line 170
    snprintf((char *)(& ad), 60UL, "DRBD_PEER_ADDRESS=%pI4", & ((struct sockaddr_in *)(& (mdev->net_conf)->peer_addr))->sin_addr);
    }
    ldv_42689: 
#line 173
    snprintf((char *)(& af), 20UL, "DRBD_PEER_AF=%s", afs);
#line 174
    envp[3] = (char *)(& af);
#line 175
    envp[4] = (char *)(& ad);
#line 176
    put_net_conf(mdev);
  } else {

  }
#line 179
  tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 179
  printk("<6>%s %s: helper command: %s %s %s\n", tmp___2, tmp___1, (char *)(& usermode_helper),
         cmd, (char *)(& mb));
#line 181
  drbd_bcast_ev_helper(mdev, cmd);
#line 182
  ret = call_usermodehelper((char *)(& usermode_helper), (char **)(& argv), (char **)(& envp),
                            UMH_WAIT_PROC);
#line 183
  if (ret != 0) {
#line 184
    tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 184
    printk("<4>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___4, tmp___3,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  } else {
#line 188
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 188
    printk("<6>%s %s: helper command: %s %s %s exit code %u (0x%x)\n", tmp___6, tmp___5,
           (char *)(& usermode_helper), cmd, (char *)(& mb), (ret >> 8) & 255, ret);
  }
#line 192
  if (ret < 0) {
#line 193
    ret = 0;
  } else {

  }
#line 195
  return (ret);
}
}
#line 198 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum drbd_disk_state drbd_try_outdate_peer(struct drbd_conf *mdev ) 
{ 
  char *ex_to_string ;
  int r ;
  enum drbd_disk_state nps ;
  enum drbd_fencing_p fp ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  int tmp___3 ;
  union drbd_state val ;
  union drbd_state mask ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  char const   *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;

  {
#line 205
  if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 205
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 205
    printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
           tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           205);
  } else {

  }
#line 207
  tmp___3 = _get_ldev_if_state(mdev, D_CONSISTENT);
#line 207
  if (tmp___3 != 0) {
#line 208
    fp = (enum drbd_fencing_p )(mdev->ldev)->dc.fencing;
#line 209
    put_ldev(mdev);
  } else {
#line 211
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 211
    printk("<4>%s %s: Not fencing peer, I\'m not even Consistent myself.\n", tmp___2,
           tmp___1);
#line 212
    return ((enum drbd_disk_state )mdev->state.ldv_32167.pdsk);
  }
#line 215
  if ((unsigned int )fp == 2U) {
#line 216
    val.i = 0U;
#line 216
    val.ldv_32167.susp = 1U;
#line 216
    mask.i = 0U;
#line 216
    mask.ldv_32167.susp = 1U;
#line 216
    _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
  } else {

  }
#line 218
  r = drbd_khelper(mdev, (char *)"fence-peer");
#line 220
  switch ((r >> 8) & 255) {
  case 3: 
#line 222
  ex_to_string = (char *)"peer is inconsistent or worse";
#line 223
  nps = D_INCONSISTENT;
#line 224
  goto ldv_42704;
  case 4: 
#line 226
  ex_to_string = (char *)"peer was fenced";
#line 227
  nps = D_OUTDATED;
#line 228
  goto ldv_42704;
  case 5: ;
#line 230
  if ((unsigned int )*((unsigned char *)mdev + 1805UL) == 16U) {
#line 232
    ex_to_string = (char *)"peer is unreachable, assumed to be dead";
#line 233
    nps = D_OUTDATED;
  } else {
#line 235
    ex_to_string = (char *)"peer unreachable, doing nothing since disk != UpToDate";
#line 236
    nps = (enum drbd_disk_state )mdev->state.ldv_32167.pdsk;
  }
#line 238
  goto ldv_42704;
  case 6: 
#line 242
  ex_to_string = (char *)"peer is active";
#line 243
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 243
  printk("<4>%s %s: Peer is primary, outdating myself.\n", tmp___5, tmp___4);
#line 244
  nps = D_UNKNOWN;
#line 245
  val___0.i = 0U;
#line 245
  val___0.ldv_32167.disk = 5U;
#line 245
  mask___0.i = 0U;
#line 245
  mask___0.ldv_32167.disk = 15U;
#line 245
  _drbd_request_state(mdev, mask___0, val___0, CS_WAIT_COMPLETE);
#line 246
  goto ldv_42704;
  case 7: ;
#line 248
  if ((unsigned int )fp != 2U) {
#line 249
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 249
    printk("<3>%s %s: fence-peer() = 7 && fencing != Stonith !!!\n", tmp___7, tmp___6);
  } else {

  }
#line 250
  ex_to_string = (char *)"peer was stonithed";
#line 251
  nps = D_OUTDATED;
#line 252
  goto ldv_42704;
  default: 
#line 255
  nps = D_UNKNOWN;
#line 256
  tmp___8 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  tmp___9 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 256
  printk("<3>%s %s: fence-peer helper broken, returned %d\n", tmp___9, tmp___8, (r >> 8) & 255);
#line 257
  return (nps);
  }
  ldv_42704: 
#line 260
  tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 260
  printk("<6>%s %s: fence-peer helper returned %d (%s)\n", tmp___11, tmp___10, (r >> 8) & 255,
         ex_to_string);
#line 262
  return (nps);
}
}
#line 266 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_set_role(struct drbd_conf *mdev , enum drbd_role new_role , int force ) 
{ 
  int max_tries ;
  int r ;
  int try ;
  int forced ;
  union drbd_state mask ;
  union drbd_state val ;
  enum drbd_disk_state nps ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  int tmp___7 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  int tmp___11 ;
  int tmp___12 ;
  int tmp___13 ;

  {
#line 268
  max_tries = 4;
#line 269
  r = 0;
#line 270
  try = 0;
#line 271
  forced = 0;
#line 275
  if ((unsigned int )new_role == 1U) {
#line 276
    request_ping(mdev);
  } else {

  }
#line 278
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 280
  mask.i = 0U;
#line 280
  mask.ldv_32167.role = 3U;
#line 281
  val.i = 0U;
#line 281
  val.ldv_32167.role = (unsigned char )new_role;
#line 283
  goto ldv_42726;
  ldv_42729: 
#line 284
  r = _drbd_request_state(mdev, mask, val, CS_WAIT_COMPLETE);
#line 288
  if (r == -10 && *((unsigned int *)(& mask) + 0UL) != 0U) {
#line 289
    val.ldv_32167.pdsk = 0U;
#line 290
    mask.ldv_32167.pdsk = 0U;
#line 291
    goto ldv_42726;
  } else {

  }
#line 294
  if ((r == -2 && force != 0) && ((unsigned int )*((unsigned char *)mdev + 1805UL) == 8U || (unsigned int )*((unsigned char *)mdev + 1805UL) == 10U)) {
#line 297
    mask.ldv_32167.disk = 15U;
#line 298
    val.ldv_32167.disk = 8U;
#line 299
    forced = 1;
#line 300
    goto ldv_42726;
  } else {

  }
#line 303
  if ((r == -2 && (unsigned int )*((unsigned char *)mdev + 1805UL) == 14U) && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 305
    if (*((unsigned int *)mdev + 451UL) != 49152U) {
#line 305
      tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 305
      printk("<3>%s %s: ASSERT( mdev->state.pdsk == D_UNKNOWN ) in %s:%d\n", tmp___0,
             tmp, (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
             305);
    } else {

    }
#line 306
    nps = drbd_try_outdate_peer(mdev);
#line 308
    if ((unsigned int )nps == 5U || (unsigned int )nps == 4U) {
#line 309
      val.ldv_32167.disk = 8U;
#line 310
      mask.ldv_32167.disk = 15U;
    } else {

    }
#line 313
    val.ldv_32167.pdsk = (unsigned char )nps;
#line 314
    mask.ldv_32167.pdsk = 15U;
#line 316
    goto ldv_42726;
  } else {

  }
#line 319
  if (r == 2) {
#line 320
    goto fail;
  } else {

  }
#line 321
  if (r == -7 && *((unsigned int *)(& mask) + 0UL) == 0U) {
#line 322
    nps = drbd_try_outdate_peer(mdev);
#line 324
    if (force != 0 && (unsigned int )nps > 5U) {
#line 325
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 325
      printk("<4>%s %s: Forced into split brain situation!\n", tmp___2, tmp___1);
#line 326
      nps = D_OUTDATED;
    } else {

    }
#line 329
    mask.ldv_32167.pdsk = 15U;
#line 330
    val.ldv_32167.pdsk = (unsigned char )nps;
#line 332
    goto ldv_42726;
  } else {

  }
#line 334
  if (r == -1) {
#line 337
    tmp___3 = get_current();
#line 337
    tmp___3->state = 1L;
#line 338
    schedule_timeout((long )((((mdev->net_conf)->ping_timeo + 1) * 250) / 10));
#line 339
    if (try < max_tries) {
#line 340
      try = max_tries + -1;
    } else {

    }
#line 341
    goto ldv_42726;
  } else {

  }
#line 343
  if (r <= 0) {
#line 344
    r = _drbd_request_state(mdev, mask, val, 6);
#line 346
    if (r <= 0) {
#line 347
      goto fail;
    } else {

    }
  } else {

  }
#line 349
  goto ldv_42728;
  ldv_42726: 
#line 283
  tmp___4 = try;
#line 283
  try = try + 1;
#line 283
  if (tmp___4 < max_tries) {
#line 284
    goto ldv_42729;
  } else {

  }
  ldv_42728: ;
#line 352
  if (r <= 0) {
#line 353
    goto fail;
  } else {

  }
#line 355
  if (forced != 0) {
#line 356
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 356
    printk("<4>%s %s: Forced to consider local data as UpToDate!\n", tmp___6, tmp___5);
  } else {

  }
#line 359
  tmp___7 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___7 == 0) {
#line 359
    goto ldv_42730;
  } else {

  }
#line 359
  tmp___8 = get_current();
#line 359
  __wait.flags = 0U;
#line 359
  __wait.private = (void *)tmp___8;
#line 359
  __wait.func = & autoremove_wake_function;
#line 359
  __wait.task_list.next = & __wait.task_list;
#line 359
  __wait.task_list.prev = & __wait.task_list;
  ldv_42733: 
#line 359
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 359
  tmp___9 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 359
  if (tmp___9 == 0) {
#line 359
    goto ldv_42732;
  } else {

  }
#line 359
  schedule();
#line 359
  goto ldv_42733;
  ldv_42732: 
#line 359
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42730: ;
#line 361
  if ((unsigned int )new_role == 2U) {
#line 362
    set_disk_ro(mdev->vdisk, 1);
#line 363
    tmp___10 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 363
    if (tmp___10 != 0) {
#line 364
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
#line 365
      put_ldev(mdev);
    } else {

    }
  } else {
#line 368
    tmp___11 = get_net_conf(mdev);
#line 368
    if (tmp___11 != 0) {
#line 369
      (mdev->net_conf)->want_lose = 0U;
#line 370
      put_net_conf(mdev);
    } else {

    }
#line 372
    set_disk_ro(mdev->vdisk, 0);
#line 373
    tmp___12 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 373
    if (tmp___12 != 0) {
#line 374
      if ((((int )mdev->state.ldv_32167.conn <= 9 || (int )mdev->state.ldv_32167.pdsk <= 2) && (mdev->ldev)->md.uuid[1] == 0ULL) || forced != 0) {
#line 377
        drbd_uuid_new_current(mdev);
      } else {

      }
#line 379
      (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
#line 380
      put_ldev(mdev);
    } else {

    }
  }
#line 384
  if ((unsigned int )new_role == 2U) {
#line 384
    tmp___13 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 384
    if (tmp___13 != 0) {
#line 385
      drbd_al_to_on_disk_bm(mdev);
#line 386
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 389
  if ((int )mdev->state.ldv_32167.conn > 8) {
#line 391
    if (forced != 0) {
#line 392
      drbd_send_uuids(mdev);
    } else {

    }
#line 393
    drbd_send_state(mdev);
  } else {

  }
#line 396
  drbd_md_sync(mdev);
#line 398
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 400
  mutex_unlock(& mdev->state_mutex);
#line 401
  return (r);
}
}
#line 405 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_primary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  struct primary primary_args ;
  int tmp ;

  {
#line 410
  memset((void *)(& primary_args), 0, 4UL);
#line 411
  tmp = primary_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & primary_args);
#line 411
  if (tmp == 0) {
#line 412
    reply->ret_code = 126;
#line 413
    return (0);
  } else {

  }
#line 416
  reply->ret_code = drbd_set_role(mdev, R_PRIMARY, (int )primary_args.overwrite_peer);
#line 419
  return (0);
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_secondary(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 


  {
#line 425
  reply->ret_code = drbd_set_role(mdev, R_SECONDARY, 0);
#line 427
  return (0);
}
}
#line 432 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_md_set_sector_offsets(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t md_size_sect ;
  sector_t tmp ;
  sector_t tmp___0 ;
  sector_t tmp___1 ;

  {
#line 435
  md_size_sect = 0UL;
#line 436
  switch (bdev->dc.meta_dev_idx) {
  default: 
#line 439
  bdev->md.md_size_sect = 262144U;
#line 440
  tmp = drbd_md_ss__(mdev, bdev);
#line 440
  bdev->md.md_offset = (u64 )tmp;
#line 441
  bdev->md.al_offset = 8;
#line 442
  bdev->md.bm_offset = 72;
#line 443
  goto ldv_42751;
  case -2: 
#line 446
  tmp___0 = drbd_get_capacity(bdev->md_bdev);
#line 446
  bdev->md.md_size_sect = (u32 )tmp___0;
#line 447
  bdev->md.md_offset = 0ULL;
#line 448
  bdev->md.al_offset = 8;
#line 449
  bdev->md.bm_offset = 72;
#line 450
  goto ldv_42751;
  case -1: ;
  case -3: 
#line 453
  tmp___1 = drbd_md_ss__(mdev, bdev);
#line 453
  bdev->md.md_offset = (u64 )tmp___1;
#line 455
  bdev->md.al_offset = -64;
#line 457
  md_size_sect = drbd_get_capacity(bdev->backing_bdev);
#line 458
  md_size_sect = (md_size_sect + 32767UL) & 0xffffffffffff8000UL;
#line 459
  md_size_sect = md_size_sect >> 15;
#line 460
  md_size_sect = (md_size_sect + 7UL) & 0xfffffffffffffff8UL;
#line 464
  md_size_sect = md_size_sect + 72UL;
#line 466
  bdev->md.md_size_sect = (u32 )md_size_sect;
#line 468
  bdev->md.bm_offset = (s32 )(8U - (unsigned int )md_size_sect);
#line 469
  goto ldv_42751;
  }
  ldv_42751: ;
#line 472
  return;
}
}
#line 473 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
char *ppsize(char *buf , unsigned long long size ) 
{ 
  char units[6U] ;
  int base ;

  {
#line 476
  units[0] = 75;
#line 476
  units[1] = 77;
#line 476
  units[2] = 71;
#line 476
  units[3] = 84;
#line 476
  units[4] = 80;
#line 476
  units[5] = 69;
#line 477
  base = 0;
#line 478
  goto ldv_42762;
  ldv_42761: 
#line 480
  size = (size >> 10) + (unsigned long long )((size & 512ULL) != 0ULL);
#line 481
  base = base + 1;
  ldv_42762: ;
#line 478
  if (size > 9999ULL) {
#line 479
    goto ldv_42761;
  } else {

  }
#line 483
  sprintf(buf, "%lu %cB", (long )size, (int )units[base]);
#line 485
  return (buf);
}
}
#line 501 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_suspend_io(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 503
  set_bit(17U, (unsigned long volatile   *)(& mdev->flags));
#line 504
  tmp = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp == 0) {
#line 504
    goto ldv_42767;
  } else {

  }
#line 504
  tmp___0 = get_current();
#line 504
  __wait.flags = 0U;
#line 504
  __wait.private = (void *)tmp___0;
#line 504
  __wait.func = & autoremove_wake_function;
#line 504
  __wait.task_list.next = & __wait.task_list;
#line 504
  __wait.task_list.prev = & __wait.task_list;
  ldv_42770: 
#line 504
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 504
  tmp___1 = atomic_read((atomic_t const   *)(& mdev->ap_bio_cnt));
#line 504
  if (tmp___1 == 0) {
#line 504
    goto ldv_42769;
  } else {

  }
#line 504
  schedule();
#line 504
  goto ldv_42770;
  ldv_42769: 
#line 504
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42767: ;
#line 507
  return;
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_resume_io(struct drbd_conf *mdev ) 
{ 


  {
#line 509
  clear_bit(17, (unsigned long volatile   *)(& mdev->flags));
#line 510
  __wake_up(& mdev->misc_wait, 3U, 1, 0);
#line 511
  return;
}
}
#line 520 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
enum determine_dev_size drbd_determin_dev_size(struct drbd_conf *mdev ) 
{ 
  sector_t prev_first_sect ;
  sector_t prev_size ;
  sector_t la_size ;
  sector_t size ;
  char ppb[10U] ;
  int md_moved ;
  int la_size_changed ;
  enum determine_dev_size rv ;
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int err ;
  sector_t tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  long tmp___7 ;
  char *tmp___8 ;
  char const   *tmp___9 ;
  char const   *tmp___10 ;
  sector_t tmp___11 ;
  sector_t tmp___12 ;
  sector_t tmp___13 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  int tmp___16 ;

  {
#line 528
  rv = 0;
#line 539
  drbd_suspend_io(mdev);
#line 542
  tmp = lc_try_lock(mdev->act_log);
#line 542
  if (tmp != 0) {
#line 542
    goto ldv_42785;
  } else {

  }
#line 542
  tmp___0 = get_current();
#line 542
  __wait.flags = 0U;
#line 542
  __wait.private = (void *)tmp___0;
#line 542
  __wait.func = & autoremove_wake_function;
#line 542
  __wait.task_list.next = & __wait.task_list;
#line 542
  __wait.task_list.prev = & __wait.task_list;
  ldv_42788: 
#line 542
  prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 542
  tmp___1 = lc_try_lock(mdev->act_log);
#line 542
  if (tmp___1 != 0) {
#line 542
    goto ldv_42787;
  } else {

  }
#line 542
  schedule();
#line 542
  goto ldv_42788;
  ldv_42787: 
#line 542
  finish_wait(& mdev->al_wait, & __wait);
  ldv_42785: 
#line 544
  prev_first_sect = drbd_md_first_sector(mdev->ldev);
#line 545
  prev_size = (sector_t )(mdev->ldev)->md.md_size_sect;
#line 546
  la_size = (sector_t )(mdev->ldev)->md.la_size_sect;
#line 549
  drbd_md_set_sector_offsets(mdev, mdev->ldev);
#line 551
  size = drbd_new_dev_size(mdev, mdev->ldev);
#line 553
  tmp___11 = drbd_get_capacity(mdev->this_bdev);
#line 553
  if (tmp___11 != size) {
#line 553
    goto _L;
  } else {
#line 553
    tmp___12 = drbd_bm_capacity(mdev);
#line 553
    if (tmp___12 != size) {
      _L: /* CIL Label */ 
#line 556
      err = drbd_bm_resize(mdev, size);
#line 557
      tmp___7 = __builtin_expect(err != 0, 0L);
#line 557
      if (tmp___7 != 0L) {
#line 559
        tmp___2 = drbd_bm_capacity(mdev);
#line 559
        size = tmp___2 >> 1;
#line 560
        if (size == 0UL) {
#line 561
          tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 561
          printk("<3>%s %s: OUT OF MEMORY! Could not allocate bitmap!\n", tmp___4,
                 tmp___3);
        } else {
#line 564
          tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 564
          printk("<3>%s %s: BM resizing failed. Leaving size unchanged at size = %lu KB\n",
                 tmp___6, tmp___5, size);
        }
#line 568
        rv = dev_size_error;
      } else {

      }
#line 571
      drbd_set_my_capacity(mdev, size);
#line 572
      (mdev->ldev)->md.la_size_sect = (u64 )size;
#line 573
      tmp___8 = ppsize((char *)(& ppb), (unsigned long long )(size >> 1));
#line 573
      tmp___9 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      tmp___10 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 573
      printk("<6>%s %s: size = %s (%llu KB)\n", tmp___10, tmp___9, tmp___8, (unsigned long long )size >> 1);
    } else {

    }
  }
#line 576
  if ((int )rv == -1) {
#line 577
    goto out;
  } else {

  }
#line 579
  la_size_changed = (mdev->ldev)->md.la_size_sect != (unsigned long long )la_size;
#line 581
  tmp___13 = drbd_md_first_sector(mdev->ldev);
#line 581
  md_moved = tmp___13 != prev_first_sect || (sector_t )(mdev->ldev)->md.md_size_sect != prev_size;
#line 584
  if (la_size_changed != 0 || md_moved != 0) {
#line 585
    drbd_al_shrink(mdev);
#line 586
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 586
    printk("<6>%s %s: Writing the whole bitmap, %s\n", tmp___15, tmp___14, la_size_changed == 0 || md_moved == 0 ? (la_size_changed != 0 ? (char *)"size changed" : (char *)"md moved") : (char *)"size changed and md moved");
#line 589
    tmp___16 = drbd_bitmap_io(mdev, & drbd_bm_write, (char *)"size changed");
#line 589
    rv = (enum determine_dev_size )tmp___16;
#line 590
    drbd_md_mark_dirty(mdev);
  } else {

  }
#line 593
  if (size > la_size) {
#line 594
    rv = grew;
  } else {

  }
#line 595
  if (size < la_size) {
#line 596
    rv = shrunk;
  } else {

  }
  out: 
#line 598
  lc_unlock(mdev->act_log);
#line 599
  __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 600
  drbd_resume_io(mdev);
#line 602
  return (rv);
}
}
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
sector_t drbd_new_dev_size(struct drbd_conf *mdev , struct drbd_backing_dev *bdev ) 
{ 
  sector_t p_size ;
  sector_t la_size ;
  sector_t m_size ;
  sector_t u_size ;
  sector_t size ;
  sector_t __min1 ;
  sector_t __min2 ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;

  {
#line 608
  p_size = mdev->p_size;
#line 609
  la_size = (sector_t )bdev->md.la_size_sect;
#line 611
  u_size = (sector_t )bdev->dc.disk_size;
#line 612
  size = 0UL;
#line 614
  m_size = drbd_get_max_capacity___1(bdev);
#line 616
  if (p_size != 0UL && m_size != 0UL) {
#line 617
    __min1 = p_size;
#line 617
    __min2 = m_size;
#line 617
    size = __min1 < __min2 ? __min1 : __min2;
  } else
#line 619
  if (la_size != 0UL) {
#line 620
    size = la_size;
#line 621
    if (m_size != 0UL && m_size < size) {
#line 622
      size = m_size;
    } else {

    }
#line 623
    if (p_size != 0UL && p_size < size) {
#line 624
      size = p_size;
    } else {

    }
  } else {
#line 626
    if (m_size != 0UL) {
#line 627
      size = m_size;
    } else {

    }
#line 628
    if (p_size != 0UL) {
#line 629
      size = p_size;
    } else {

    }
  }
#line 633
  if (size == 0UL) {
#line 634
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 634
    printk("<3>%s %s: Both nodes diskless!\n", tmp___0, tmp);
  } else {

  }
#line 636
  if (u_size != 0UL) {
#line 637
    if (u_size > size) {
#line 638
      tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
      tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 638
      printk("<3>%s %s: Requested disk size is too big (%lu > %lu)\n", tmp___2, tmp___1,
             u_size >> 1, size >> 1);
    } else {
#line 641
      size = u_size;
    }
  } else {

  }
#line 644
  return (size);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_check_al_size(struct drbd_conf *mdev ) 
{ 
  struct lru_cache *n ;
  struct lru_cache *t ;
  struct lc_element *e ;
  unsigned int in_use ;
  int i ;
  int _b ;
  char const   *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;

  {
#line 662
  _b = mdev->sync_conf.al_extents <= 6;
#line 662
  if (_b != 0) {
#line 662
    tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
    tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 662
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___0, tmp, "drbd_check_al_size", (char *)"mdev->sync_conf.al_extents < 7",
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           662);
  } else {

  }
#line 662
  if (_b != 0) {
#line 663
    mdev->sync_conf.al_extents = 127;
  } else {

  }
#line 665
  if ((unsigned long )mdev->act_log != (unsigned long )((struct lru_cache *)0) && (mdev->act_log)->nr_elements == (unsigned int )mdev->sync_conf.al_extents) {
#line 667
    return (0);
  } else {

  }
#line 669
  in_use = 0U;
#line 670
  t = mdev->act_log;
#line 671
  n = lc_create("act_log", drbd_al_ext_cache, (unsigned int )mdev->sync_conf.al_extents,
                48UL, 0UL);
#line 674
  if ((unsigned long )n == (unsigned long )((struct lru_cache *)0)) {
#line 675
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 675
    printk("<3>%s %s: Cannot allocate act_log lru!\n", tmp___2, tmp___1);
#line 676
    return (-12);
  } else {

  }
#line 678
  _spin_lock_irq(& mdev->al_lock);
#line 679
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 680
    i = 0;
#line 680
    goto ldv_42815;
    ldv_42814: 
#line 681
    e = lc_element_by_index(t, (unsigned int )i);
#line 682
    if (e->refcnt != 0U) {
#line 683
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 683
      printk("<3>%s %s: refcnt(%d)==%d\n", tmp___4, tmp___3, e->lc_number, e->refcnt);
    } else {

    }
#line 685
    in_use = e->refcnt + in_use;
#line 680
    i = i + 1;
    ldv_42815: ;
#line 680
    if ((unsigned int )i < t->nr_elements) {
#line 681
      goto ldv_42814;
    } else {

    }

  } else {

  }
#line 688
  if (in_use == 0U) {
#line 689
    mdev->act_log = n;
  } else {

  }
#line 690
  _spin_unlock_irq(& mdev->al_lock);
#line 691
  if (in_use != 0U) {
#line 692
    tmp___5 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
    tmp___6 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 692
    printk("<3>%s %s: Activity log still in use!\n", tmp___6, tmp___5);
#line 693
    lc_destroy(n);
#line 694
    return (-16);
  } else
#line 696
  if ((unsigned long )t != (unsigned long )((struct lru_cache *)0)) {
#line 697
    lc_destroy(t);
  } else {

  }
#line 699
  drbd_md_mark_dirty(mdev);
#line 700
  return (0);
}
}
#line 703 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_setup_queue_param(struct drbd_conf *mdev , unsigned int max_seg_s ) 
{ 
  struct request_queue *q ;
  struct request_queue *b ;
  int max_segments ;
  unsigned int _min1 ;
  unsigned int tmp ;
  unsigned short tmp___0 ;
  unsigned int _min2 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  unsigned int tmp___3 ;
  char const   *tmp___4 ;
  char const   *tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;

  {
#line 705
  q = mdev->rq_queue;
#line 706
  b = (((mdev->ldev)->backing_bdev)->bd_disk)->queue;
#line 707
  max_segments = (mdev->ldev)->dc.max_bio_bvecs;
#line 709
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0) && (unsigned int )*((unsigned char *)mdev->ldev + 388UL) == 0U) {
#line 710
    max_seg_s = 4096U;
  } else {

  }
#line 712
  tmp = queue_max_sectors(b);
#line 712
  tmp___0 = queue_logical_block_size(b);
#line 712
  _min1 = tmp * (unsigned int )tmp___0;
#line 712
  _min2 = max_seg_s;
#line 712
  max_seg_s = _min1 < _min2 ? _min1 : _min2;
#line 714
  blk_queue_max_sectors(q, max_seg_s >> 9);
#line 715
  blk_queue_max_phys_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 716
  blk_queue_max_hw_segments(q, max_segments != 0 ? (int )((unsigned short )max_segments) : 128);
#line 717
  blk_queue_max_segment_size(q, max_seg_s);
#line 718
  blk_queue_logical_block_size(q, 512);
#line 719
  blk_queue_segment_boundary(q, 4095UL);
#line 720
  blk_stack_limits(& q->limits, & b->limits, 0UL);
#line 722
  if ((unsigned long )b->merge_bvec_fn != (unsigned long )((merge_bvec_fn *)0)) {
#line 723
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 723
    printk("<4>%s %s: Backing device\'s merge_bvec_fn() = %p\n", tmp___2, tmp___1,
           b->merge_bvec_fn);
  } else {

  }
#line 725
  tmp___3 = queue_max_segment_size(q);
#line 725
  tmp___4 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 725
  tmp___5 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 725
  printk("<6>%s %s: max_segment_size ( = BIO size ) = %u\n", tmp___5, tmp___4, tmp___3);
#line 727
  if (q->backing_dev_info.ra_pages != b->backing_dev_info.ra_pages) {
#line 728
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 728
    printk("<6>%s %s: Adjusting my ra_pages to backing device\'s (%lu -> %lu)\n",
           tmp___7, tmp___6, q->backing_dev_info.ra_pages, b->backing_dev_info.ra_pages);
#line 731
    q->backing_dev_info.ra_pages = b->backing_dev_info.ra_pages;
  } else {

  }
#line 733
  return;
}
}
#line 741 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_start(struct drbd_conf *mdev ) 
{ 
  int tmp ;
  wait_queue_t __wait ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  wait_queue_t __wait___0 ;
  struct task_struct *tmp___3 ;
  int tmp___4 ;

  {
#line 743
  tmp = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 743
  if (tmp != 0) {
#line 743
    goto ldv_42830;
  } else {

  }
#line 743
  tmp___0 = get_current();
#line 743
  __wait.flags = 0U;
#line 743
  __wait.private = (void *)tmp___0;
#line 743
  __wait.func = & autoremove_wake_function;
#line 743
  __wait.task_list.next = & __wait.task_list;
#line 743
  __wait.task_list.prev = & __wait.task_list;
  ldv_42833: 
#line 743
  prepare_to_wait(& mdev->state_wait, & __wait, 2);
#line 743
  tmp___1 = test_and_set_bit(22, (unsigned long volatile   *)(& mdev->flags));
#line 743
  if (tmp___1 != 0) {
#line 743
    goto ldv_42832;
  } else {

  }
#line 743
  schedule();
#line 743
  goto ldv_42833;
  ldv_42832: 
#line 743
  finish_wait(& mdev->state_wait, & __wait);
  ldv_42830: 
#line 744
  tmp___2 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 744
  if (tmp___2 == 0) {
#line 744
    goto ldv_42834;
  } else {

  }
#line 744
  tmp___3 = get_current();
#line 744
  __wait___0.flags = 0U;
#line 744
  __wait___0.private = (void *)tmp___3;
#line 744
  __wait___0.func = & autoremove_wake_function;
#line 744
  __wait___0.task_list.next = & __wait___0.task_list;
#line 744
  __wait___0.task_list.prev = & __wait___0.task_list;
  ldv_42837: 
#line 744
  prepare_to_wait(& mdev->state_wait, & __wait___0, 2);
#line 744
  tmp___4 = constant_test_bit(23U, (unsigned long const volatile   *)(& mdev->flags));
#line 744
  if (tmp___4 == 0) {
#line 744
    goto ldv_42836;
  } else {

  }
#line 744
  schedule();
#line 744
  goto ldv_42837;
  ldv_42836: 
#line 744
  finish_wait(& mdev->state_wait, & __wait___0);
  ldv_42834: 
#line 745
  drbd_thread_start(& mdev->worker);
#line 746
  return;
}
}
#line 751 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_reconfig_done(struct drbd_conf *mdev ) 
{ 


  {
#line 753
  _spin_lock_irq(& mdev->req_lock);
#line 754
  if (((unsigned int )*((unsigned char *)mdev + 1805UL) == 0U && (unsigned int )*((unsigned short *)mdev + 902UL) == 0U) && (unsigned int )*((unsigned char *)mdev + 1804UL) == 2U) {
#line 757
    set_bit(23U, (unsigned long volatile   *)(& mdev->flags));
#line 758
    drbd_thread_stop_nowait(& mdev->worker);
  } else {
#line 760
    clear_bit(22, (unsigned long volatile   *)(& mdev->flags));
  }
#line 761
  _spin_unlock_irq(& mdev->req_lock);
#line 762
  __wake_up(& mdev->state_wait, 3U, 1, 0);
#line 763
  return;
}
}
#line 767 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disk_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  enum drbd_ret_codes retcode ;
  enum determine_dev_size dd ;
  sector_t max_possible_sectors ;
  sector_t min_md_device_sectors ;
  struct drbd_backing_dev *nbc ;
  struct inode *inode ;
  struct inode *inode2 ;
  struct lru_cache *resync_lru ;
  union drbd_state ns ;
  union drbd_state os ;
  int rv ;
  int cp_discovered ;
  int logical_block_size ;
  void *tmp ;
  int tmp___0 ;
  long tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  long tmp___4 ;
  long tmp___5 ;
  char const   *tmp___6 ;
  char const   *tmp___7 ;
  long tmp___8 ;
  int tmp___9 ;
  int tmp___10 ;
  sector_t tmp___11 ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  sector_t tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  sector_t tmp___17 ;
  sector_t tmp___18 ;
  sector_t tmp___19 ;
  char const   *tmp___20 ;
  char const   *tmp___21 ;
  char const   *tmp___22 ;
  char const   *tmp___23 ;
  int tmp___24 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___25 ;
  int tmp___26 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___27 ;
  int tmp___28 ;
  int tmp___29 ;
  int tmp___30 ;
  char const   *tmp___31 ;
  char const   *tmp___32 ;
  int tmp___33 ;
  char const   *tmp___34 ;
  char const   *tmp___35 ;
  int tmp___36 ;
  sector_t tmp___37 ;
  int tmp___38 ;
  unsigned short tmp___39 ;
  struct page *page ;
  struct page *tmp___40 ;
  char const   *tmp___41 ;
  char const   *tmp___42 ;
  char const   *tmp___43 ;
  char const   *tmp___44 ;
  char const   *tmp___45 ;
  char const   *tmp___46 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  char const   *tmp___51 ;
  char const   *tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  int tmp___55 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;

  {
#line 774
  nbc = 0;
#line 776
  resync_lru = 0;
#line 779
  cp_discovered = 0;
#line 782
  drbd_reconfig_start(mdev);
#line 785
  if ((int )mdev->state.ldv_32167.disk > 0) {
#line 786
    retcode = ERR_DISK_CONFIGURED;
#line 787
    goto fail;
  } else {

  }
#line 791
  tmp = kzalloc(408UL, 208U);
#line 791
  nbc = (struct drbd_backing_dev *)tmp;
#line 792
  if ((unsigned long )nbc == (unsigned long )((struct drbd_backing_dev *)0)) {
#line 793
    retcode = ERR_NOMEM;
#line 794
    goto fail;
  } else {

  }
#line 797
  nbc->dc.disk_size = 0ULL;
#line 798
  nbc->dc.on_io_error = 0;
#line 799
  nbc->dc.fencing = 0;
#line 800
  nbc->dc.max_bio_bvecs = 0;
#line 802
  tmp___0 = disk_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & nbc->dc);
#line 802
  if (tmp___0 == 0) {
#line 803
    retcode = ERR_MANDATORY_TAG;
#line 804
    goto fail;
  } else {

  }
#line 807
  if (nbc->dc.meta_dev_idx < -3) {
#line 808
    retcode = ERR_MD_IDX_INVALID;
#line 809
    goto fail;
  } else {

  }
#line 812
  nbc->lo_file = filp_open((char const   *)(& nbc->dc.backing_dev), 2, 0);
#line 813
  tmp___4 = IS_ERR((void const   *)nbc->lo_file);
#line 813
  if (tmp___4 != 0L) {
#line 814
    tmp___1 = PTR_ERR((void const   *)nbc->lo_file);
#line 814
    tmp___2 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 814
    tmp___3 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 814
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___3, tmp___2, (unsigned char *)(& nbc->dc.backing_dev),
           tmp___1);
#line 816
    nbc->lo_file = 0;
#line 817
    retcode = ERR_OPEN_DISK;
#line 818
    goto fail;
  } else {

  }
#line 821
  inode = ((nbc->lo_file)->f_path.dentry)->d_inode;
#line 823
  if (((int )inode->i_mode & 61440) != 24576) {
#line 824
    retcode = ERR_DISK_NOT_BDEV;
#line 825
    goto fail;
  } else {

  }
#line 828
  nbc->md_file = filp_open((char const   *)(& nbc->dc.meta_dev), 2, 0);
#line 829
  tmp___8 = IS_ERR((void const   *)nbc->md_file);
#line 829
  if (tmp___8 != 0L) {
#line 830
    tmp___5 = PTR_ERR((void const   *)nbc->md_file);
#line 830
    tmp___6 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 830
    tmp___7 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 830
    printk("<3>%s %s: open(\"%s\") failed with %ld\n", tmp___7, tmp___6, (unsigned char *)(& nbc->dc.meta_dev),
           tmp___5);
#line 832
    nbc->md_file = 0;
#line 833
    retcode = ERR_OPEN_MD_DISK;
#line 834
    goto fail;
  } else {

  }
#line 837
  inode2 = ((nbc->md_file)->f_path.dentry)->d_inode;
#line 839
  if (((int )inode2->i_mode & 61440) != 24576) {
#line 840
    retcode = ERR_MD_NOT_BDEV;
#line 841
    goto fail;
  } else {

  }
#line 844
  nbc->backing_bdev = inode->ldv_20854.i_bdev;
#line 845
  tmp___9 = bd_claim(nbc->backing_bdev, (void *)mdev);
#line 845
  if (tmp___9 != 0) {
#line 846
    printk("<3>drbd: bd_claim(%p,%p); failed [%p;%p;%u]\n", nbc->backing_bdev, mdev,
           (nbc->backing_bdev)->bd_holder, ((nbc->backing_bdev)->bd_contains)->bd_holder,
           (nbc->backing_bdev)->bd_holders);
#line 851
    retcode = ERR_BDCLAIM_DISK;
#line 852
    goto fail;
  } else {

  }
#line 855
  resync_lru = lc_create("resync", drbd_bm_ext_cache, 61U, 64UL, 16UL);
#line 858
  if ((unsigned long )resync_lru == (unsigned long )((struct lru_cache *)0)) {
#line 859
    retcode = ERR_NOMEM;
#line 860
    goto release_bdev_fail;
  } else {

  }
#line 870
  nbc->md_bdev = inode2->ldv_20854.i_bdev;
#line 871
  tmp___10 = bd_claim(nbc->md_bdev, nbc->dc.meta_dev_idx < 0 ? (void *)mdev : (void *)drbd_m_holder);
#line 871
  if (tmp___10 != 0) {
#line 873
    retcode = ERR_BDCLAIM_MD_DISK;
#line 874
    goto release_bdev_fail;
  } else {

  }
#line 877
  if (((unsigned long )nbc->backing_bdev == (unsigned long )nbc->md_bdev) ^ (int )((_Bool )(nbc->dc.meta_dev_idx == -1 || nbc->dc.meta_dev_idx == -3))) {
#line 880
    retcode = ERR_MD_IDX_INVALID;
#line 881
    goto release_bdev2_fail;
  } else {

  }
#line 885
  drbd_md_set_sector_offsets(mdev, nbc);
#line 887
  tmp___14 = drbd_get_max_capacity___1(nbc);
#line 887
  if ((unsigned long long )tmp___14 < nbc->dc.disk_size) {
#line 888
    tmp___11 = drbd_get_max_capacity___1(nbc);
#line 888
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 888
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 888
    printk("<3>%s %s: max capacity %llu smaller than disk size %llu\n", tmp___13,
           tmp___12, (unsigned long long )tmp___11, nbc->dc.disk_size);
#line 891
    retcode = ERR_DISK_TO_SMALL;
#line 892
    goto release_bdev2_fail;
  } else {

  }
#line 895
  if (nbc->dc.meta_dev_idx < 0) {
#line 896
    max_possible_sectors = 34359738368UL;
#line 898
    min_md_device_sectors = 2048UL;
  } else {
#line 900
    max_possible_sectors = 8587575296UL;
#line 901
    min_md_device_sectors = (unsigned long )(nbc->dc.meta_dev_idx + 1) * 262144UL;
  }
#line 904
  tmp___17 = drbd_get_capacity(nbc->md_bdev);
#line 904
  if (tmp___17 < min_md_device_sectors) {
#line 905
    retcode = ERR_MD_DISK_TO_SMALL;
#line 906
    tmp___15 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    tmp___16 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 906
    printk("<4>%s %s: refusing attach: md-device too small, at least %llu sectors needed for this meta-disk type\n",
           tmp___16, tmp___15, (unsigned long long )min_md_device_sectors);
#line 909
    goto release_bdev2_fail;
  } else {

  }
#line 914
  tmp___18 = drbd_get_max_capacity___1(nbc);
#line 914
  tmp___19 = drbd_get_capacity(mdev->this_bdev);
#line 914
  if (tmp___18 < tmp___19) {
#line 916
    retcode = ERR_DISK_TO_SMALL;
#line 917
    goto release_bdev2_fail;
  } else {

  }
#line 920
  nbc->known_size = drbd_get_capacity(nbc->backing_bdev);
#line 922
  if (nbc->known_size > max_possible_sectors) {
#line 923
    tmp___20 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
    tmp___21 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 923
    printk("<4>%s %s: ==> truncating very big lower level device to currently maximum possible %llu sectors <==\n",
           tmp___21, tmp___20, (unsigned long long )max_possible_sectors);
#line 926
    if (nbc->dc.meta_dev_idx >= 0) {
#line 927
      tmp___22 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
      tmp___23 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 927
      printk("<4>%s %s: ==>> using internal or flexible meta data may help <<==\n",
             tmp___23, tmp___22);
    } else {

    }
  } else {

  }
#line 931
  drbd_suspend_io(mdev);
#line 933
  tmp___24 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 933
  if (tmp___24 == 0) {
#line 933
    goto ldv_42862;
  } else {

  }
#line 933
  tmp___25 = get_current();
#line 933
  __wait.flags = 0U;
#line 933
  __wait.private = (void *)tmp___25;
#line 933
  __wait.func = & autoremove_wake_function;
#line 933
  __wait.task_list.next = & __wait.task_list;
#line 933
  __wait.task_list.prev = & __wait.task_list;
  ldv_42865: 
#line 933
  prepare_to_wait(& mdev->misc_wait, & __wait, 2);
#line 933
  tmp___26 = atomic_read((atomic_t const   *)(& mdev->ap_pending_cnt));
#line 933
  if (tmp___26 == 0) {
#line 933
    goto ldv_42864;
  } else {

  }
#line 933
  schedule();
#line 933
  goto ldv_42865;
  ldv_42864: 
#line 933
  finish_wait(& mdev->misc_wait, & __wait);
  ldv_42862: 
#line 935
  drbd_flush_workqueue(mdev);
#line 937
  val.i = 0U;
#line 937
  val.ldv_32167.disk = 1U;
#line 937
  mask.i = 0U;
#line 937
  mask.ldv_32167.disk = 15U;
#line 937
  tmp___27 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 937
  retcode = (enum drbd_ret_codes )tmp___27;
#line 938
  drbd_resume_io(mdev);
#line 939
  if ((unsigned int )retcode == 0U) {
#line 940
    goto release_bdev2_fail;
  } else {

  }
#line 942
  tmp___28 = _get_ldev_if_state(mdev, D_ATTACHING);
#line 942
  if (tmp___28 == 0) {
#line 943
    goto force_diskless;
  } else {

  }
#line 945
  drbd_md_set_sector_offsets(mdev, nbc);
#line 947
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 948
    tmp___29 = drbd_bm_init(mdev);
#line 948
    if (tmp___29 != 0) {
#line 949
      retcode = ERR_NOMEM;
#line 950
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 954
  tmp___30 = drbd_md_read(mdev, nbc);
#line 954
  retcode = (enum drbd_ret_codes )tmp___30;
#line 955
  if ((unsigned int )retcode != 101U) {
#line 956
    goto force_diskless_dec;
  } else {

  }
#line 958
  if (((int )mdev->state.ldv_32167.conn <= 9 && (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) && ((mdev->ed_uuid ^ nbc->md.uuid[0]) & 0xfffffffffffffffeULL) != 0ULL) {
#line 961
    tmp___31 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
    tmp___32 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 961
    printk("<3>%s %s: Can only attach to data with current UUID=%016llX\n", tmp___32,
           tmp___31, mdev->ed_uuid);
#line 963
    retcode = ERR_DATA_NOT_CURRENT;
#line 964
    goto force_diskless_dec;
  } else {

  }
#line 968
  tmp___33 = drbd_check_al_size(mdev);
#line 968
  if (tmp___33 != 0) {
#line 969
    retcode = ERR_NOMEM;
#line 970
    goto force_diskless_dec;
  } else {

  }
#line 974
  tmp___36 = drbd_md_test_flag(nbc, 1);
#line 974
  if (tmp___36 != 0) {
#line 974
    tmp___37 = drbd_new_dev_size(mdev, nbc);
#line 974
    if ((unsigned long long )tmp___37 < nbc->md.la_size_sect) {
#line 976
      tmp___34 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 976
      tmp___35 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 976
      printk("<4>%s %s: refusing to truncate a consistent device\n", tmp___35, tmp___34);
#line 977
      retcode = ERR_DISK_TO_SMALL;
#line 978
      goto force_diskless_dec;
    } else {

    }
  } else {

  }
#line 981
  tmp___38 = drbd_al_read_log(mdev, nbc);
#line 981
  if (tmp___38 == 0) {
#line 982
    retcode = ERR_IO_MD_DISK;
#line 983
    goto force_diskless_dec;
  } else {

  }
#line 987
  tmp___39 = bdev_logical_block_size(nbc->md_bdev);
#line 987
  logical_block_size = (int )tmp___39;
#line 988
  if (logical_block_size == 0) {
#line 989
    logical_block_size = 512;
  } else {

  }
#line 991
  if (logical_block_size != 512) {
#line 992
    if ((unsigned long )mdev->md_io_tmpp == (unsigned long )((struct page *)0)) {
#line 993
      tmp___40 = alloc_pages(16U, 0U);
#line 993
      page = tmp___40;
#line 994
      if ((unsigned long )page == (unsigned long )((struct page *)0)) {
#line 995
        goto force_diskless_dec;
      } else {

      }
#line 997
      tmp___41 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 997
      tmp___42 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 997
      printk("<4>%s %s: Meta data\'s bdev logical_block_size = %d != %d\n", tmp___42,
             tmp___41, logical_block_size, 512);
#line 999
      tmp___43 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      tmp___44 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 999
      printk("<4>%s %s: Workaround engaged (has performance impact).\n", tmp___44,
             tmp___43);
#line 1001
      mdev->md_io_tmpp = page;
    } else {

    }
  } else {

  }
#line 1007
  if ((unsigned int )*((unsigned char *)nbc + 388UL) != 0U) {
#line 1008
    set_bit(16U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1010
    clear_bit(16, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1016
  if ((unsigned long )mdev->ldev != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1016
    tmp___45 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    tmp___46 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1016
    printk("<3>%s %s: ASSERT( mdev->ldev == NULL ) in %s:%d\n", tmp___46, tmp___45,
           (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1016);
  } else {

  }
#line 1017
  mdev->ldev = nbc;
#line 1018
  mdev->resync = resync_lru;
#line 1019
  nbc = 0;
#line 1020
  resync_lru = 0;
#line 1022
  mdev->write_ordering = WO_bio_barrier;
#line 1023
  drbd_bump_write_ordering(mdev, WO_bio_barrier);
#line 1025
  tmp___47 = drbd_md_test_flag(mdev->ldev, 64);
#line 1025
  if (tmp___47 != 0) {
#line 1026
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
  } else {
#line 1028
    clear_bit(12, (unsigned long volatile   *)(& mdev->flags));
  }
#line 1030
  tmp___48 = drbd_md_test_flag(mdev->ldev, 2);
#line 1030
  if (tmp___48 != 0) {
#line 1031
    set_bit(12U, (unsigned long volatile   *)(& mdev->flags));
#line 1032
    cp_discovered = 1;
  } else {

  }
#line 1035
  mdev->send_cnt = 0U;
#line 1036
  mdev->recv_cnt = 0U;
#line 1037
  mdev->read_cnt = 0U;
#line 1038
  mdev->writ_cnt = 0U;
#line 1040
  drbd_setup_queue_param(mdev, 32768U);
#line 1056
  clear_bit(8, (unsigned long volatile   *)(& mdev->flags));
#line 1057
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) != 1U) {
#line 1057
    tmp___49 = drbd_md_test_flag(mdev->ldev, 2);
#line 1057
    if (tmp___49 != 0) {
#line 1057
      tmp___50 = drbd_md_test_flag(mdev->ldev, 4);
#line 1057
      if (tmp___50 == 0) {
#line 1060
        set_bit(8U, (unsigned long volatile   *)(& mdev->flags));
      } else {

      }
    } else {

    }
  } else {

  }
#line 1062
  dd = drbd_determin_dev_size(mdev);
#line 1063
  if ((int )dd == -1) {
#line 1064
    retcode = ERR_NOMEM_BITMAP;
#line 1065
    goto force_diskless_dec;
  } else
#line 1066
  if ((int )dd == 2) {
#line 1067
    set_bit(20U, (unsigned long volatile   *)(& mdev->flags));
  } else {

  }
#line 1069
  tmp___55 = drbd_md_test_flag(mdev->ldev, 8);
#line 1069
  if (tmp___55 != 0) {
#line 1070
    tmp___51 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    tmp___52 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1070
    printk("<6>%s %s: Assuming that all blocks are out of sync (aka FullSync)\n",
           tmp___52, tmp___51);
#line 1072
    tmp___53 = drbd_bitmap_io(mdev, & drbd_bmio_set_n_write, (char *)"set_n_write from attaching");
#line 1072
    if (tmp___53 != 0) {
#line 1073
      retcode = ERR_IO_MD_DISK;
#line 1074
      goto force_diskless_dec;
    } else {

    }
  } else {
#line 1077
    tmp___54 = drbd_bitmap_io(mdev, & drbd_bm_read, (char *)"read from attaching");
#line 1077
    if (tmp___54 < 0) {
#line 1078
      retcode = ERR_IO_MD_DISK;
#line 1079
      goto force_diskless_dec;
    } else {

    }
  }
#line 1083
  if (cp_discovered != 0) {
#line 1084
    drbd_al_apply_to_bm(mdev);
#line 1085
    drbd_al_to_on_disk_bm(mdev);
  } else {

  }
#line 1088
  _spin_lock_irq(& mdev->req_lock);
#line 1089
  os = mdev->state;
#line 1090
  ns.i = os.i;
#line 1096
  tmp___57 = drbd_md_test_flag(mdev->ldev, 1);
#line 1096
  if (tmp___57 != 0) {
#line 1097
    tmp___56 = drbd_md_test_flag(mdev->ldev, 16);
#line 1097
    if (tmp___56 != 0) {
#line 1098
      ns.ldv_32167.disk = 7U;
    } else {
#line 1100
      ns.ldv_32167.disk = 5U;
    }
  } else {
#line 1102
    ns.ldv_32167.disk = 4U;
  }
#line 1105
  tmp___58 = drbd_md_test_flag(mdev->ldev, 32);
#line 1105
  if (tmp___58 != 0) {
#line 1106
    ns.ldv_32167.pdsk = 5U;
  } else {

  }
#line 1108
  if ((unsigned int )*((unsigned char *)(& ns) + 1UL) == 14U && (*((unsigned int *)(& ns) + 0UL) == 40960U || (mdev->ldev)->dc.fencing == 0)) {
#line 1110
    ns.ldv_32167.disk = 8U;
  } else {

  }
#line 1119
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U) {
#line 1120
    mdev->new_state_tmp.i = ns.i;
#line 1121
    ns.i = os.i;
#line 1122
    ns.ldv_32167.disk = 3U;
  } else {

  }
#line 1125
  rv = _drbd_set_state(mdev, ns, CS_VERBOSE, 0);
#line 1126
  ns = mdev->state;
#line 1127
  _spin_unlock_irq(& mdev->req_lock);
#line 1129
  if (rv <= 0) {
#line 1130
    goto force_diskless_dec;
  } else {

  }
#line 1132
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U) {
#line 1133
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] | 1ULL;
  } else {
#line 1135
    (mdev->ldev)->md.uuid[0] = (mdev->ldev)->md.uuid[0] & 0xfffffffffffffffeULL;
  }
#line 1137
  drbd_md_mark_dirty(mdev);
#line 1138
  drbd_md_sync(mdev);
#line 1140
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1141
  put_ldev(mdev);
#line 1142
  reply->ret_code = (int )retcode;
#line 1143
  drbd_reconfig_done(mdev);
#line 1144
  return (0);
  force_diskless_dec: 
#line 1147
  put_ldev(mdev);
  force_diskless: 
#line 1149
  val___0.i = 0U;
#line 1149
  val___0.ldv_32167.disk = 0U;
#line 1149
  mask___0.i = 0U;
#line 1149
  mask___0.ldv_32167.disk = 15U;
#line 1149
  drbd_force_state(mdev, mask___0, val___0);
#line 1150
  drbd_md_sync(mdev);
  release_bdev2_fail: ;
#line 1152
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1153
    bd_release(nbc->md_bdev);
  } else {

  }
  release_bdev_fail: ;
#line 1155
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1156
    bd_release(nbc->backing_bdev);
  } else {

  }
  fail: ;
#line 1158
  if ((unsigned long )nbc != (unsigned long )((struct drbd_backing_dev *)0)) {
#line 1159
    if ((unsigned long )nbc->lo_file != (unsigned long )((struct file *)0)) {
#line 1160
      fput(nbc->lo_file);
    } else {

    }
#line 1161
    if ((unsigned long )nbc->md_file != (unsigned long )((struct file *)0)) {
#line 1162
      fput(nbc->md_file);
    } else {

    }
#line 1163
    kfree((void const   *)nbc);
  } else {

  }
#line 1165
  lc_destroy(resync_lru);
#line 1167
  reply->ret_code = (int )retcode;
#line 1168
  drbd_reconfig_done(mdev);
#line 1169
  return (0);
}
}
#line 1172 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_detach(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1175
  val.i = 0U;
#line 1175
  val.ldv_32167.disk = 0U;
#line 1175
  mask.i = 0U;
#line 1175
  mask.ldv_32167.disk = 15U;
#line 1175
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1176
  return (0);
}
}
#line 1179 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_net_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  int i ;
  int ns ;
  enum drbd_ret_codes retcode ;
  struct net_conf *new_conf ;
  struct crypto_hash *tfm ;
  struct crypto_hash *integrity_w_tfm ;
  struct crypto_hash *integrity_r_tfm ;
  struct hlist_head *new_tl_hash ;
  struct hlist_head *new_ee_hash ;
  struct drbd_conf *odev ;
  char hmac_name[64U] ;
  void *int_dig_out ;
  void *int_dig_in ;
  void *int_dig_vv ;
  struct sockaddr *new_my_addr ;
  struct sockaddr *new_peer_addr ;
  struct sockaddr *taken_addr ;
  void *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  long tmp___4 ;
  struct crypto_tfm *tmp___5 ;
  u32 tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  long tmp___10 ;
  void *tmp___11 ;
  void *tmp___12 ;
  unsigned int tmp___13 ;
  int tmp___14 ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp___15 ;

  {
#line 1184
  new_conf = 0;
#line 1185
  tfm = 0;
#line 1186
  integrity_w_tfm = 0;
#line 1187
  integrity_r_tfm = 0;
#line 1188
  new_tl_hash = 0;
#line 1189
  new_ee_hash = 0;
#line 1192
  int_dig_out = 0;
#line 1193
  int_dig_in = 0;
#line 1194
  int_dig_vv = 0;
#line 1197
  drbd_reconfig_start(mdev);
#line 1199
  if ((int )mdev->state.ldv_32167.conn > 0) {
#line 1200
    retcode = ERR_NET_CONFIGURED;
#line 1201
    goto fail;
  } else {

  }
#line 1205
  tmp = kmalloc(532UL, 208U);
#line 1205
  new_conf = (struct net_conf *)tmp;
#line 1206
  if ((unsigned long )new_conf == (unsigned long )((struct net_conf *)0)) {
#line 1207
    retcode = ERR_NOMEM;
#line 1208
    goto fail;
  } else {

  }
#line 1211
  memset((void *)new_conf, 0, 532UL);
#line 1212
  new_conf->timeout = 60;
#line 1213
  new_conf->try_connect_int = 10;
#line 1214
  new_conf->ping_int = 10;
#line 1215
  new_conf->max_epoch_size = 2048;
#line 1216
  new_conf->max_buffers = 2048;
#line 1217
  new_conf->unplug_watermark = 128;
#line 1218
  new_conf->sndbuf_size = 0;
#line 1219
  new_conf->rcvbuf_size = 0;
#line 1220
  new_conf->ko_count = 0;
#line 1221
  new_conf->after_sb_0p = 0;
#line 1222
  new_conf->after_sb_1p = 0;
#line 1223
  new_conf->after_sb_2p = 0;
#line 1224
  new_conf->want_lose = 0U;
#line 1225
  new_conf->two_primaries = 0U;
#line 1226
  new_conf->wire_protocol = 3;
#line 1227
  new_conf->ping_timeo = 5;
#line 1228
  new_conf->rr_conflict = 0;
#line 1230
  tmp___0 = net_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), new_conf);
#line 1230
  if (tmp___0 == 0) {
#line 1231
    retcode = ERR_MANDATORY_TAG;
#line 1232
    goto fail;
  } else {

  }
#line 1235
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && new_conf->wire_protocol != 3) {
#line 1237
    retcode = ERR_NOT_PROTO_C;
#line 1238
    goto fail;
  } else {

  }
#line 1241
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 1U && (unsigned int )*((unsigned char *)new_conf + 528UL) != 0U) {
#line 1242
    retcode = ERR_DISCARD;
#line 1243
    goto fail;
  } else {

  }
#line 1246
  retcode = NO_ERROR;
#line 1248
  new_my_addr = (struct sockaddr *)(& new_conf->my_addr);
#line 1249
  new_peer_addr = (struct sockaddr *)(& new_conf->peer_addr);
#line 1250
  i = 0;
#line 1250
  goto ldv_42911;
  ldv_42910: 
#line 1251
  odev = minor_to_mdev((unsigned int )i);
#line 1252
  if ((unsigned long )odev == (unsigned long )((struct drbd_conf *)0) || (unsigned long )odev == (unsigned long )mdev) {
#line 1253
    goto ldv_42909;
  } else {

  }
#line 1254
  tmp___3 = get_net_conf(odev);
#line 1254
  if (tmp___3 != 0) {
#line 1255
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->my_addr);
#line 1256
    if (new_conf->my_addr_len == (odev->net_conf)->my_addr_len) {
#line 1256
      tmp___1 = memcmp((void const   *)new_my_addr, (void const   *)taken_addr, (size_t )new_conf->my_addr_len);
#line 1256
      if (tmp___1 == 0) {
#line 1258
        retcode = ERR_LOCAL_ADDR;
      } else {

      }
    } else {

    }
#line 1260
    taken_addr = (struct sockaddr *)(& (odev->net_conf)->peer_addr);
#line 1261
    if (new_conf->peer_addr_len == (odev->net_conf)->peer_addr_len) {
#line 1261
      tmp___2 = memcmp((void const   *)new_peer_addr, (void const   *)taken_addr,
                       (size_t )new_conf->peer_addr_len);
#line 1261
      if (tmp___2 == 0) {
#line 1263
        retcode = ERR_PEER_ADDR;
      } else {

      }
    } else {

    }
#line 1265
    put_net_conf(odev);
#line 1266
    if ((unsigned int )retcode != 101U) {
#line 1267
      goto fail;
    } else {

    }
  } else {

  }
  ldv_42909: 
#line 1250
  i = i + 1;
  ldv_42911: ;
#line 1250
  if ((unsigned int )i < minor_count) {
#line 1251
    goto ldv_42910;
  } else {

  }

#line 1271
  if ((unsigned int )new_conf->cram_hmac_alg[0] != 0U) {
#line 1272
    snprintf((char *)(& hmac_name), 64UL, "hmac(%s)", (unsigned char *)(& new_conf->cram_hmac_alg));
#line 1274
    tfm = crypto_alloc_hash((char const   *)(& hmac_name), 0U, 128U);
#line 1275
    tmp___4 = IS_ERR((void const   *)tfm);
#line 1275
    if (tmp___4 != 0L) {
#line 1276
      tfm = 0;
#line 1277
      retcode = ERR_AUTH_ALG;
#line 1278
      goto fail;
    } else {

    }
#line 1281
    tmp___5 = crypto_hash_tfm(tfm);
#line 1281
    tmp___6 = crypto_tfm_alg_type(tmp___5);
#line 1281
    if (tmp___6 != 8U) {
#line 1283
      retcode = ERR_AUTH_ALG_ND;
#line 1284
      goto fail;
    } else {

    }
  } else {

  }
#line 1288
  if ((unsigned int )new_conf->integrity_alg[0] != 0U) {
#line 1289
    integrity_w_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1290
    tmp___7 = IS_ERR((void const   *)integrity_w_tfm);
#line 1290
    if (tmp___7 != 0L) {
#line 1291
      integrity_w_tfm = 0;
#line 1292
      retcode = ERR_INTEGRITY_ALG;
#line 1293
      goto fail;
    } else {

    }
#line 1296
    tmp___8 = crypto_hash_tfm(integrity_w_tfm);
#line 1296
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1296
    if (tmp___9 == 0) {
#line 1297
      retcode = ERR_INTEGRITY_ALG_ND;
#line 1298
      goto fail;
    } else {

    }
#line 1301
    integrity_r_tfm = crypto_alloc_hash((char const   *)(& new_conf->integrity_alg),
                                        0U, 128U);
#line 1302
    tmp___10 = IS_ERR((void const   *)integrity_r_tfm);
#line 1302
    if (tmp___10 != 0L) {
#line 1303
      integrity_r_tfm = 0;
#line 1304
      retcode = ERR_INTEGRITY_ALG;
#line 1305
      goto fail;
    } else {

    }
  } else {

  }
#line 1309
  ns = new_conf->max_epoch_size / 8;
#line 1310
  if (mdev->tl_hash_s != (unsigned int )ns) {
#line 1311
    tmp___11 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1311
    new_tl_hash = (struct hlist_head *)tmp___11;
#line 1312
    if ((unsigned long )new_tl_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1313
      retcode = ERR_NOMEM;
#line 1314
      goto fail;
    } else {

    }
  } else {

  }
#line 1318
  ns = new_conf->max_buffers / 8;
#line 1319
  if ((unsigned int )*((unsigned char *)new_conf + 528UL) != 0U && mdev->ee_hash_s != (unsigned int )ns) {
#line 1320
    tmp___12 = kzalloc((unsigned long )ns * 8UL, 208U);
#line 1320
    new_ee_hash = (struct hlist_head *)tmp___12;
#line 1321
    if ((unsigned long )new_ee_hash == (unsigned long )((struct hlist_head *)0)) {
#line 1322
      retcode = ERR_NOMEM;
#line 1323
      goto fail;
    } else {

    }
  } else {

  }
#line 1327
  *((char *)(& new_conf->shared_secret) + 63UL) = 0;
#line 1329
  if ((unsigned long )integrity_w_tfm != (unsigned long )((struct crypto_hash *)0)) {
#line 1330
    tmp___13 = crypto_hash_digestsize(integrity_w_tfm);
#line 1330
    i = (int )tmp___13;
#line 1331
    int_dig_out = kmalloc((size_t )i, 208U);
#line 1332
    if ((unsigned long )int_dig_out == (unsigned long )((void *)0)) {
#line 1333
      retcode = ERR_NOMEM;
#line 1334
      goto fail;
    } else {

    }
#line 1336
    int_dig_in = kmalloc((size_t )i, 208U);
#line 1337
    if ((unsigned long )int_dig_in == (unsigned long )((void *)0)) {
#line 1338
      retcode = ERR_NOMEM;
#line 1339
      goto fail;
    } else {

    }
#line 1341
    int_dig_vv = kmalloc((size_t )i, 208U);
#line 1342
    if ((unsigned long )int_dig_vv == (unsigned long )((void *)0)) {
#line 1343
      retcode = ERR_NOMEM;
#line 1344
      goto fail;
    } else {

    }
  } else {

  }
#line 1348
  if ((unsigned long )mdev->bitmap == (unsigned long )((struct drbd_bitmap *)0)) {
#line 1349
    tmp___14 = drbd_bm_init(mdev);
#line 1349
    if (tmp___14 != 0) {
#line 1350
      retcode = ERR_NOMEM;
#line 1351
      goto fail;
    } else {

    }
  } else {

  }
#line 1355
  _spin_lock_irq(& mdev->req_lock);
#line 1356
  if ((unsigned long )mdev->net_conf != (unsigned long )((struct net_conf *)0)) {
#line 1357
    retcode = ERR_NET_CONFIGURED;
#line 1358
    _spin_unlock_irq(& mdev->req_lock);
#line 1359
    goto fail;
  } else {

  }
#line 1361
  mdev->net_conf = new_conf;
#line 1363
  mdev->send_cnt = 0U;
#line 1364
  mdev->recv_cnt = 0U;
#line 1366
  if ((unsigned long )new_tl_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1367
    kfree((void const   *)mdev->tl_hash);
#line 1368
    mdev->tl_hash_s = (unsigned int )((mdev->net_conf)->max_epoch_size / 8);
#line 1369
    mdev->tl_hash = new_tl_hash;
  } else {

  }
#line 1372
  if ((unsigned long )new_ee_hash != (unsigned long )((struct hlist_head *)0)) {
#line 1373
    kfree((void const   *)mdev->ee_hash);
#line 1374
    mdev->ee_hash_s = (unsigned int )((mdev->net_conf)->max_buffers / 8);
#line 1375
    mdev->ee_hash = new_ee_hash;
  } else {

  }
#line 1378
  crypto_free_hash(mdev->cram_hmac_tfm);
#line 1379
  mdev->cram_hmac_tfm = tfm;
#line 1381
  crypto_free_hash(mdev->integrity_w_tfm);
#line 1382
  mdev->integrity_w_tfm = integrity_w_tfm;
#line 1384
  crypto_free_hash(mdev->integrity_r_tfm);
#line 1385
  mdev->integrity_r_tfm = integrity_r_tfm;
#line 1387
  kfree((void const   *)mdev->int_dig_out);
#line 1388
  kfree((void const   *)mdev->int_dig_in);
#line 1389
  kfree((void const   *)mdev->int_dig_vv);
#line 1390
  mdev->int_dig_out = int_dig_out;
#line 1391
  mdev->int_dig_in = int_dig_in;
#line 1392
  mdev->int_dig_vv = int_dig_vv;
#line 1393
  _spin_unlock_irq(& mdev->req_lock);
#line 1395
  val.i = 0U;
#line 1395
  val.ldv_32167.conn = 2U;
#line 1395
  mask.i = 0U;
#line 1395
  mask.ldv_32167.conn = 31U;
#line 1395
  tmp___15 = _drbd_request_state(mdev, mask, val, CS_VERBOSE);
#line 1395
  retcode = (enum drbd_ret_codes )tmp___15;
#line 1397
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
#line 1398
  reply->ret_code = (int )retcode;
#line 1399
  drbd_reconfig_done(mdev);
#line 1400
  return (0);
  fail: 
#line 1403
  kfree((void const   *)int_dig_out);
#line 1404
  kfree((void const   *)int_dig_in);
#line 1405
  kfree((void const   *)int_dig_vv);
#line 1406
  crypto_free_hash(tfm);
#line 1407
  crypto_free_hash(integrity_w_tfm);
#line 1408
  crypto_free_hash(integrity_r_tfm);
#line 1409
  kfree((void const   *)new_tl_hash);
#line 1410
  kfree((void const   *)new_ee_hash);
#line 1411
  kfree((void const   *)new_conf);
#line 1413
  reply->ret_code = (int )retcode;
#line 1414
  drbd_reconfig_done(mdev);
#line 1415
  return (0);
}
}
#line 1418 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_disconnect(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;
  union drbd_state val___2 ;
  union drbd_state mask___2 ;
  int __ret ;
  wait_queue_t __wait ;
  struct task_struct *tmp ;
  struct task_struct *tmp___0 ;
  int tmp___1 ;

  {
#line 1423
  val.i = 0U;
#line 1423
  val.ldv_32167.conn = 1U;
#line 1423
  mask.i = 0U;
#line 1423
  mask.ldv_32167.conn = 31U;
#line 1423
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1425
  if (retcode == 2) {
#line 1426
    goto done;
  } else
#line 1427
  if (retcode == -9) {
#line 1428
    goto done;
  } else
#line 1429
  if (retcode == -7) {
#line 1432
    val___0.i = 0U;
#line 1432
    val___0.ldv_32167.conn = 1U;
#line 1432
    val___0.ldv_32167.pdsk = 5U;
#line 1431
    mask___0.i = 0U;
#line 1431
    mask___0.ldv_32167.conn = 31U;
#line 1432
    mask___0.ldv_32167.pdsk = 15U;
#line 1432
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else
#line 1433
  if (retcode == -10) {
#line 1436
    val___1.i = 0U;
#line 1436
    val___1.ldv_32167.conn = 1U;
#line 1436
    val___1.ldv_32167.disk = 5U;
#line 1435
    mask___1.i = 0U;
#line 1435
    mask___1.ldv_32167.conn = 31U;
#line 1436
    mask___1.ldv_32167.disk = 15U;
#line 1436
    retcode = _drbd_request_state(mdev, mask___1, val___1, CS_ORDERED);
#line 1438
    if (retcode == -11 || retcode == -16) {
#line 1439
      val___2.i = 0U;
#line 1439
      val___2.ldv_32167.conn = 1U;
#line 1439
      mask___2.i = 0U;
#line 1439
      mask___2.ldv_32167.conn = 31U;
#line 1439
      drbd_force_state(mdev, mask___2, val___2);
#line 1440
      retcode = 1;
    } else {

    }
  } else {

  }
#line 1444
  if (retcode <= 0) {
#line 1445
    goto fail;
  } else {

  }
#line 1447
  __ret = 0;
#line 1447
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 16U) {
#line 1447
    tmp = get_current();
#line 1447
    __wait.flags = 0U;
#line 1447
    __wait.private = (void *)tmp;
#line 1447
    __wait.func = & autoremove_wake_function;
#line 1447
    __wait.task_list.next = & __wait.task_list;
#line 1447
    __wait.task_list.prev = & __wait.task_list;
    ldv_42945: 
#line 1447
    prepare_to_wait(& mdev->state_wait, & __wait, 1);
#line 1447
    if ((unsigned int )*((unsigned short *)mdev + 902UL) != 16U) {
#line 1447
      goto ldv_42943;
    } else {

    }
#line 1447
    tmp___0 = get_current();
#line 1447
    tmp___1 = signal_pending(tmp___0);
#line 1447
    if (tmp___1 == 0) {
#line 1447
      schedule();
#line 1447
      goto ldv_42944;
    } else {

    }
#line 1447
    __ret = -512;
#line 1447
    goto ldv_42943;
    ldv_42944: ;
#line 1447
    goto ldv_42945;
    ldv_42943: 
#line 1447
    finish_wait(& mdev->state_wait, & __wait);
  } else {

  }
#line 1447
  if (__ret != 0) {
#line 1451
    retcode = 129;
#line 1452
    goto fail;
  } else {

  }
  done: 
#line 1456
  retcode = 101;
  fail: 
#line 1458
  drbd_md_sync(mdev);
#line 1459
  reply->ret_code = retcode;
#line 1460
  return (0);
}
}
#line 1463 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void resync_after_online_grow(struct drbd_conf *mdev ) 
{ 
  int iass ;
  char const   *tmp ;
  char const   *tmp___0 ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1467
  tmp = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1467
  tmp___0 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1467
  printk("<6>%s %s: Resync of new storage after online grow\n", tmp___0, tmp);
#line 1468
  if ((int )mdev->state.ldv_32167.role != (int )mdev->state.ldv_32167.peer) {
#line 1469
    iass = (unsigned int )*((unsigned char *)mdev + 1804UL) == 1U;
  } else {
#line 1471
    iass = constant_test_bit(7U, (unsigned long const volatile   *)(& mdev->flags));
  }
#line 1473
  if (iass != 0) {
#line 1474
    drbd_start_resync(mdev, C_SYNC_SOURCE);
  } else {
#line 1476
    val.i = 0U;
#line 1476
    val.ldv_32167.conn = 15U;
#line 1476
    mask.i = 0U;
#line 1476
    mask.ldv_32167.conn = 31U;
#line 1476
    _drbd_request_state(mdev, mask, val, 10);
  }
#line 1478
  return;
}
}
#line 1479 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resize(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp , struct drbd_nl_cfg_reply *reply ) 
{ 
  struct resize rs ;
  int retcode ;
  int ldsc ;
  enum determine_dev_size dd ;
  int tmp ;
  int tmp___0 ;
  sector_t tmp___1 ;

  {
#line 1483
  retcode = 101;
#line 1484
  ldsc = 0;
#line 1487
  memset((void *)(& rs), 0, 8UL);
#line 1488
  tmp = resize_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & rs);
#line 1488
  if (tmp == 0) {
#line 1489
    retcode = 126;
#line 1490
    goto fail;
  } else {

  }
#line 1493
  if ((int )mdev->state.ldv_32167.conn > 10) {
#line 1494
    retcode = 130;
#line 1495
    goto fail;
  } else {

  }
#line 1498
  if ((unsigned int )*((unsigned char *)mdev + 1804UL) == 2U && (unsigned int )*((unsigned char *)mdev + 1804UL) == 8U) {
#line 1500
    retcode = 131;
#line 1501
    goto fail;
  } else {

  }
#line 1504
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1504
  if (tmp___0 == 0) {
#line 1505
    retcode = 138;
#line 1506
    goto fail;
  } else {

  }
#line 1509
  tmp___1 = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1509
  if ((mdev->ldev)->known_size != tmp___1) {
#line 1510
    (mdev->ldev)->known_size = drbd_get_capacity((mdev->ldev)->backing_bdev);
#line 1511
    ldsc = 1;
  } else {

  }
#line 1514
  (mdev->ldev)->dc.disk_size = rs.resize_size;
#line 1515
  dd = drbd_determin_dev_size(mdev);
#line 1516
  drbd_md_sync(mdev);
#line 1517
  put_ldev(mdev);
#line 1518
  if ((int )dd == -1) {
#line 1519
    retcode = 140;
#line 1520
    goto fail;
  } else {

  }
#line 1523
  if ((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && ((int )dd != 0 || ldsc != 0)) {
#line 1524
    if ((int )dd == 2) {
#line 1525
      set_bit(24U, (unsigned long volatile   *)(& mdev->flags));
    } else {

    }
#line 1527
    drbd_send_uuids(mdev);
#line 1528
    drbd_send_sizes(mdev, 1);
  } else {

  }
  fail: 
#line 1532
  reply->ret_code = retcode;
#line 1533
  return (0);
}
}
#line 1536 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_syncer_conf(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int err ;
  int ovr ;
  int rsr ;
  struct crypto_hash *verify_tfm ;
  struct crypto_hash *csums_tfm ;
  struct syncer_conf sc ;
  cpumask_var_t new_cpu_mask ;
  bool tmp ;
  int tmp___0 ;
  size_t __len ;
  void *__ret ;
  int tmp___1 ;
  int tmp___2 ;
  long tmp___3 ;
  struct crypto_tfm *tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  long tmp___7 ;
  struct crypto_tfm *tmp___8 ;
  int tmp___9 ;
  char const   *tmp___10 ;
  char const   *tmp___11 ;
  int _b ;
  char const   *tmp___12 ;
  char const   *tmp___13 ;
  int _b___0 ;
  char const   *tmp___14 ;
  char const   *tmp___15 ;
  char const   *tmp___16 ;
  char const   *tmp___17 ;
  int tmp___18 ;
  wait_queue_t __wait ;
  struct task_struct *tmp___19 ;
  int tmp___20 ;
  int tmp___21 ;
  bool tmp___22 ;
  int tmp___23 ;

  {
#line 1539
  retcode = 101;
#line 1543
  verify_tfm = 0;
#line 1544
  csums_tfm = 0;
#line 1548
  tmp = zalloc_cpumask_var(& new_cpu_mask, 208U);
#line 1548
  if (tmp) {
#line 1548
    tmp___0 = 0;
  } else {
#line 1548
    tmp___0 = 1;
  }
#line 1548
  if (tmp___0) {
#line 1549
    retcode = 122;
#line 1550
    goto fail;
  } else {

  }
#line 1553
  if ((nlp->flags & 2) != 0) {
#line 1554
    memset((void *)(& sc), 0, 188UL);
#line 1555
    sc.rate = 250;
#line 1556
    sc.after = -1;
#line 1557
    sc.al_extents = 127;
  } else {
#line 1559
    __len = 188UL;
#line 1559
    if (__len > 63UL) {
#line 1559
      __ret = __memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf), __len);
    } else {
#line 1559
      __ret = __builtin_memcpy((void *)(& sc), (void const   *)(& mdev->sync_conf),
                               __len);
    }
  }
#line 1561
  tmp___1 = syncer_conf_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & sc);
#line 1561
  if (tmp___1 == 0) {
#line 1562
    retcode = 126;
#line 1563
    goto fail;
  } else {

  }
#line 1567
  rsr = (((unsigned int )*((unsigned short *)mdev + 902UL) == 256U || (unsigned int )*((unsigned short *)mdev + 902UL) == 272U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 320U) || (unsigned int )*((unsigned short *)mdev + 902UL) == 336U;
#line 1572
  if (rsr != 0) {
#line 1572
    tmp___2 = strcmp((char const   *)(& sc.csums_alg), (char const   *)(& mdev->sync_conf.csums_alg));
#line 1572
    if (tmp___2 != 0) {
#line 1573
      retcode = 148;
#line 1574
      goto fail;
    } else {

    }
  } else {

  }
#line 1577
  if (rsr == 0 && (unsigned int )sc.csums_alg[0] != 0U) {
#line 1578
    csums_tfm = crypto_alloc_hash((char const   *)(& sc.csums_alg), 0U, 128U);
#line 1579
    tmp___3 = IS_ERR((void const   *)csums_tfm);
#line 1579
    if (tmp___3 != 0L) {
#line 1580
      csums_tfm = 0;
#line 1581
      retcode = 144;
#line 1582
      goto fail;
    } else {

    }
#line 1585
    tmp___4 = crypto_hash_tfm(csums_tfm);
#line 1585
    tmp___5 = drbd_crypto_is_hash(tmp___4);
#line 1585
    if (tmp___5 == 0) {
#line 1586
      retcode = 145;
#line 1587
      goto fail;
    } else {

    }
  } else {

  }
#line 1592
  ovr = (unsigned int )*((unsigned short *)mdev + 902UL) == 288U || (unsigned int )*((unsigned short *)mdev + 902UL) == 304U;
#line 1594
  if (ovr != 0) {
#line 1595
    tmp___6 = strcmp((char const   *)(& sc.verify_alg), (char const   *)(& mdev->sync_conf.verify_alg));
#line 1595
    if (tmp___6 != 0) {
#line 1596
      retcode = 149;
#line 1597
      goto fail;
    } else {

    }
  } else {

  }
#line 1601
  if (ovr == 0 && (unsigned int )sc.verify_alg[0] != 0U) {
#line 1602
    verify_tfm = crypto_alloc_hash((char const   *)(& sc.verify_alg), 0U, 128U);
#line 1603
    tmp___7 = IS_ERR((void const   *)verify_tfm);
#line 1603
    if (tmp___7 != 0L) {
#line 1604
      verify_tfm = 0;
#line 1605
      retcode = 146;
#line 1606
      goto fail;
    } else {

    }
#line 1609
    tmp___8 = crypto_hash_tfm(verify_tfm);
#line 1609
    tmp___9 = drbd_crypto_is_hash(tmp___8);
#line 1609
    if (tmp___9 == 0) {
#line 1610
      retcode = 147;
#line 1611
      goto fail;
    } else {

    }
  } else {

  }
#line 1616
  if (nr_cpu_ids > 1 && (unsigned int )sc.cpu_mask[0] != 0U) {
#line 1617
    err = __bitmap_parse((char const   *)(& sc.cpu_mask), 32U, 0, (unsigned long *)(& new_cpu_mask->bits),
                         nr_cpu_ids);
#line 1619
    if (err != 0) {
#line 1620
      tmp___10 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1620
      tmp___11 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1620
      printk("<4>%s %s: __bitmap_parse() failed with %d\n", tmp___11, tmp___10, err);
#line 1621
      retcode = 143;
#line 1622
      goto fail;
    } else {

    }
  } else {

  }
#line 1626
  _b = sc.rate <= 0;
#line 1626
  if (_b != 0) {
#line 1626
    tmp___12 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1626
    tmp___13 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1626
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___13, tmp___12, "drbd_nl_syncer_conf",
           (char *)"sc.rate < 1", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1626);
  } else {

  }
#line 1626
  if (_b != 0) {
#line 1626
    sc.rate = 1;
  } else {

  }
#line 1627
  _b___0 = sc.al_extents <= 6;
#line 1627
  if (_b___0 != 0) {
#line 1627
    tmp___14 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1627
    tmp___15 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1627
    printk("<3>%s %s: %s: (%s) in %s:%d\n", tmp___15, tmp___14, "drbd_nl_syncer_conf",
           (char *)"sc.al_extents < 7", (char *)"/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared",
           1627);
  } else {

  }
#line 1627
  if (_b___0 != 0) {
#line 1627
    sc.al_extents = 127;
  } else {

  }
#line 1629
  if (sc.al_extents > 3843) {
#line 1630
    tmp___16 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1630
    tmp___17 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1630
    printk("<3>%s %s: sc.al_extents > %d\n", tmp___17, tmp___16, 3843);
#line 1631
    sc.al_extents = 3843;
  } else {

  }
#line 1638
  retcode = drbd_alter_sa(mdev, sc.after);
#line 1639
  if (retcode != 101) {
#line 1640
    goto fail;
  } else {

  }
#line 1644
  _spin_lock(& mdev->peer_seq_lock);
#line 1645
  mdev->sync_conf = sc;
#line 1647
  if (rsr == 0) {
#line 1648
    crypto_free_hash(mdev->csums_tfm);
#line 1649
    mdev->csums_tfm = csums_tfm;
#line 1650
    csums_tfm = 0;
  } else {

  }
#line 1653
  if (ovr == 0) {
#line 1654
    crypto_free_hash(mdev->verify_tfm);
#line 1655
    mdev->verify_tfm = verify_tfm;
#line 1656
    verify_tfm = 0;
  } else {

  }
#line 1658
  _spin_unlock(& mdev->peer_seq_lock);
#line 1660
  tmp___21 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1660
  if (tmp___21 != 0) {
#line 1661
    tmp___18 = lc_try_lock(mdev->act_log);
#line 1661
    if (tmp___18 != 0) {
#line 1661
      goto ldv_42987;
    } else {

    }
#line 1661
    tmp___19 = get_current();
#line 1661
    __wait.flags = 0U;
#line 1661
    __wait.private = (void *)tmp___19;
#line 1661
    __wait.func = & autoremove_wake_function;
#line 1661
    __wait.task_list.next = & __wait.task_list;
#line 1661
    __wait.task_list.prev = & __wait.task_list;
    ldv_42990: 
#line 1661
    prepare_to_wait(& mdev->al_wait, & __wait, 2);
#line 1661
    tmp___20 = lc_try_lock(mdev->act_log);
#line 1661
    if (tmp___20 != 0) {
#line 1661
      goto ldv_42989;
    } else {

    }
#line 1661
    schedule();
#line 1661
    goto ldv_42990;
    ldv_42989: 
#line 1661
    finish_wait(& mdev->al_wait, & __wait);
    ldv_42987: 
#line 1662
    drbd_al_shrink(mdev);
#line 1663
    err = drbd_check_al_size(mdev);
#line 1664
    lc_unlock(mdev->act_log);
#line 1665
    __wake_up(& mdev->al_wait, 3U, 1, 0);
#line 1667
    put_ldev(mdev);
#line 1668
    drbd_md_sync(mdev);
#line 1670
    if (err != 0) {
#line 1671
      retcode = 122;
#line 1672
      goto fail;
    } else {

    }
  } else {

  }
#line 1676
  if ((int )mdev->state.ldv_32167.conn > 9) {
#line 1677
    drbd_send_sync_param(mdev, & sc);
  } else {

  }
#line 1679
  tmp___22 = cpumask_equal((struct cpumask  const  *)mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1679
  if (tmp___22) {
#line 1679
    tmp___23 = 0;
  } else {
#line 1679
    tmp___23 = 1;
  }
#line 1679
  if (tmp___23) {
#line 1680
    cpumask_copy(mdev->cpu_mask, (struct cpumask  const  *)new_cpu_mask);
#line 1681
    drbd_calc_cpu_mask(mdev);
#line 1682
    mdev->receiver.reset_cpu_mask = 1;
#line 1683
    mdev->asender.reset_cpu_mask = 1;
#line 1684
    mdev->worker.reset_cpu_mask = 1;
  } else {

  }
#line 1687
  kobject_uevent(& (mdev->vdisk)->part0.__dev.kobj, KOBJ_CHANGE);
  fail: 
#line 1689
  free_cpumask_var(new_cpu_mask);
#line 1690
  crypto_free_hash(csums_tfm);
#line 1691
  crypto_free_hash(verify_tfm);
#line 1692
  reply->ret_code = retcode;
#line 1693
  return (0);
}
}
#line 1696 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  union drbd_state val___0 ;
  union drbd_state mask___0 ;
  union drbd_state __ns ;
  union drbd_state val___1 ;
  union drbd_state mask___1 ;

  {
#line 1701
  val.i = 0U;
#line 1701
  val.ldv_32167.conn = 12U;
#line 1701
  mask.i = 0U;
#line 1701
  mask.ldv_32167.conn = 31U;
#line 1701
  retcode = _drbd_request_state(mdev, mask, val, CS_ORDERED);
#line 1703
  if (retcode <= 0 && retcode != -15) {
#line 1704
    val___0.i = 0U;
#line 1704
    val___0.ldv_32167.conn = 12U;
#line 1704
    mask___0.i = 0U;
#line 1704
    mask___0.ldv_32167.conn = 31U;
#line 1704
    retcode = drbd_request_state(mdev, mask___0, val___0);
  } else {

  }
#line 1706
  goto ldv_43013;
  ldv_43012: 
#line 1707
  _spin_lock_irq(& mdev->req_lock);
#line 1708
  if ((int )mdev->state.ldv_32167.conn <= 9) {
#line 1709
    __ns.i = mdev->state.i;
#line 1709
    __ns.ldv_32167.disk = 4U;
#line 1709
    retcode = _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
  } else {

  }
#line 1710
  _spin_unlock_irq(& mdev->req_lock);
#line 1712
  if (retcode != -15) {
#line 1713
    goto ldv_43007;
  } else {

  }
#line 1715
  val___1.i = 0U;
#line 1715
  val___1.ldv_32167.conn = 12U;
#line 1715
  mask___1.i = 0U;
#line 1715
  mask___1.ldv_32167.conn = 31U;
#line 1715
  retcode = drbd_request_state(mdev, mask___1, val___1);
  ldv_43013: ;
#line 1706
  if (retcode == -15) {
#line 1707
    goto ldv_43012;
  } else {

  }
  ldv_43007: 
#line 1718
  reply->ret_code = retcode;
#line 1719
  return (0);
}
}
#line 1722 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_invalidate_peer(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                   struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1726
  val.i = 0U;
#line 1726
  val.ldv_32167.conn = 11U;
#line 1726
  mask.i = 0U;
#line 1726
  mask.ldv_32167.conn = 31U;
#line 1726
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1728
  return (0);
}
}
#line 1731 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_pause_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1734
  retcode = 101;
#line 1736
  val.i = 0U;
#line 1736
  val.ldv_32167.user_isp = 1U;
#line 1736
  mask.i = 0U;
#line 1736
  mask.ldv_32167.user_isp = 1U;
#line 1736
  tmp = drbd_request_state(mdev, mask, val);
#line 1736
  if (tmp == 2) {
#line 1737
    retcode = 134;
  } else {

  }
#line 1739
  reply->ret_code = retcode;
#line 1740
  return (0);
}
}
#line 1743 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_sync(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                               struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  union drbd_state val ;
  union drbd_state mask ;
  int tmp ;

  {
#line 1746
  retcode = 101;
#line 1748
  val.i = 0U;
#line 1748
  val.ldv_32167.user_isp = 0U;
#line 1748
  mask.i = 0U;
#line 1748
  mask.ldv_32167.user_isp = 1U;
#line 1748
  tmp = drbd_request_state(mdev, mask, val);
#line 1748
  if (tmp == 2) {
#line 1749
    retcode = 135;
  } else {

  }
#line 1751
  reply->ret_code = retcode;
#line 1752
  return (0);
}
}
#line 1755 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_suspend_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1758
  val.i = 0U;
#line 1758
  val.ldv_32167.susp = 1U;
#line 1758
  mask.i = 0U;
#line 1758
  mask.ldv_32167.susp = 1U;
#line 1758
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1760
  return (0);
}
}
#line 1763 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_resume_io(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1766
  val.i = 0U;
#line 1766
  val.ldv_32167.susp = 0U;
#line 1766
  mask.i = 0U;
#line 1766
  mask.ldv_32167.susp = 1U;
#line 1766
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1767
  return (0);
}
}
#line 1770 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_outdate(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                           struct drbd_nl_cfg_reply *reply ) 
{ 
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1773
  val.i = 0U;
#line 1773
  val.ldv_32167.disk = 5U;
#line 1773
  mask.i = 0U;
#line 1773
  mask.ldv_32167.disk = 15U;
#line 1773
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1774
  return (0);
}
}
#line 1777 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_config(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  int tmp___0 ;
  void *__gu_p ;
  unsigned short *tmp___1 ;

  {
#line 1782
  tl = (unsigned short *)(& reply->tag_list);
#line 1784
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1784
  if (tmp != 0) {
#line 1785
    tl = disk_conf_to_tags(mdev, & (mdev->ldev)->dc, tl);
#line 1786
    put_ldev(mdev);
  } else {

  }
#line 1789
  tmp___0 = get_net_conf(mdev);
#line 1789
  if (tmp___0 != 0) {
#line 1790
    tl = net_conf_to_tags(mdev, mdev->net_conf, tl);
#line 1791
    put_net_conf(mdev);
  } else {

  }
#line 1793
  tl = syncer_conf_to_tags(mdev, & mdev->sync_conf, tl);
#line 1795
  tmp___1 = tl;
#line 1795
  tl = tl + 1;
#line 1795
  __gu_p = (void *)tmp___1;
#line 1795
  switch (2UL) {
  case 1UL: 
#line 1795
  *((u8 *)__gu_p) = 0U;
#line 1795
  goto ldv_43078;
  case 2UL: 
#line 1795
  put_unaligned_le16(0, __gu_p);
#line 1795
  goto ldv_43078;
  case 4UL: 
#line 1795
  put_unaligned_le32(0U, __gu_p);
#line 1795
  goto ldv_43078;
  case 8UL: 
#line 1795
  put_unaligned_le64(0ULL, __gu_p);
#line 1795
  goto ldv_43078;
  default: 
#line 1795
  __bad_unaligned_access_size();
#line 1795
  goto ldv_43078;
  }
  ldv_43078: ;
#line 1797
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1800 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_state(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  union drbd_state s ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1803
  tl = (unsigned short *)(& reply->tag_list);
#line 1804
  s = mdev->state;
#line 1808
  tl = get_state_to_tags(mdev, (struct get_state *)(& s), tl);
#line 1811
  if ((int )s.ldv_32167.conn > 15 && (int )s.ldv_32167.conn <= 21) {
#line 1812
    tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1812
    if (tmp != 0) {
#line 1813
      drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 1814
      tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 1815
      put_ldev(mdev);
    } else {

    }
  } else {

  }
#line 1818
  tmp___0 = tl;
#line 1818
  tl = tl + 1;
#line 1818
  __gu_p = (void *)tmp___0;
#line 1818
  switch (2UL) {
  case 1UL: 
#line 1818
  *((u8 *)__gu_p) = 0U;
#line 1818
  goto ldv_43094;
  case 2UL: 
#line 1818
  put_unaligned_le16(0, __gu_p);
#line 1818
  goto ldv_43094;
  case 4UL: 
#line 1818
  put_unaligned_le32(0U, __gu_p);
#line 1818
  goto ldv_43094;
  case 8UL: 
#line 1818
  put_unaligned_le64(0ULL, __gu_p);
#line 1818
  goto ldv_43094;
  default: 
#line 1818
  __bad_unaligned_access_size();
#line 1818
  goto ldv_43094;
  }
  ldv_43094: ;
#line 1820
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1823 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_uuids(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                             struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1828
  tl = (unsigned short *)(& reply->tag_list);
#line 1830
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1830
  if (tmp != 0) {
#line 1831
    tl = tl_add_blob(tl, T_uuids, (void const   *)(& (mdev->ldev)->md.uuid), 32);
#line 1832
    tl = tl_add_int(tl, T_uuids_flags, (void const   *)(& (mdev->ldev)->md.flags));
#line 1833
    put_ldev(mdev);
  } else {

  }
#line 1835
  tmp___0 = tl;
#line 1835
  tl = tl + 1;
#line 1835
  __gu_p = (void *)tmp___0;
#line 1835
  switch (2UL) {
  case 1UL: 
#line 1835
  *((u8 *)__gu_p) = 0U;
#line 1835
  goto ldv_43107;
  case 2UL: 
#line 1835
  put_unaligned_le16(0, __gu_p);
#line 1835
  goto ldv_43107;
  case 4UL: 
#line 1835
  put_unaligned_le32(0U, __gu_p);
#line 1835
  goto ldv_43107;
  case 8UL: 
#line 1835
  put_unaligned_le64(0ULL, __gu_p);
#line 1835
  goto ldv_43107;
  default: 
#line 1835
  __bad_unaligned_access_size();
#line 1835
  goto ldv_43107;
  }
  ldv_43107: ;
#line 1837
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1846 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_get_timeout_flag(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                                    struct drbd_nl_cfg_reply *reply ) 
{ 
  unsigned short *tl ;
  char rv ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;

  {
#line 1852
  tl = (unsigned short *)(& reply->tag_list);
#line 1854
  if (*((unsigned int *)mdev + 451UL) != 40960U) {
#line 1854
    tmp = constant_test_bit(8U, (unsigned long const volatile   *)(& mdev->flags));
#line 1854
    rv = tmp != 0;
  } else {
#line 1854
    rv = 2;
  }
#line 1857
  tl = tl_add_blob(tl, T_use_degraded, (void const   *)(& rv), 1);
#line 1858
  tmp___0 = tl;
#line 1858
  tl = tl + 1;
#line 1858
  __gu_p = (void *)tmp___0;
#line 1858
  switch (2UL) {
  case 1UL: 
#line 1858
  *((u8 *)__gu_p) = 0U;
#line 1858
  goto ldv_43121;
  case 2UL: 
#line 1858
  put_unaligned_le16(0, __gu_p);
#line 1858
  goto ldv_43121;
  case 4UL: 
#line 1858
  put_unaligned_le32(0U, __gu_p);
#line 1858
  goto ldv_43121;
  case 8UL: 
#line 1858
  put_unaligned_le64(0ULL, __gu_p);
#line 1858
  goto ldv_43121;
  default: 
#line 1858
  __bad_unaligned_access_size();
#line 1858
  goto ldv_43121;
  }
  ldv_43121: ;
#line 1860
  return ((int )((unsigned int )((long )tl) - (unsigned int )((long )(& reply->tag_list))));
}
}
#line 1863 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_start_ov(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                            struct drbd_nl_cfg_reply *reply ) 
{ 
  struct start_ov args ;
  int tmp ;
  union drbd_state val ;
  union drbd_state mask ;

  {
#line 1867
  args.start_sector = (unsigned long long )mdev->ov_start_sector;
#line 1870
  tmp = start_ov_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1870
  if (tmp == 0) {
#line 1871
    reply->ret_code = 126;
#line 1872
    return (0);
  } else {

  }
#line 1875
  mdev->ov_start_sector = (sector_t )args.start_sector & 0xfffffffffffffff7UL;
#line 1876
  val.i = 0U;
#line 1876
  val.ldv_32167.conn = 18U;
#line 1876
  mask.i = 0U;
#line 1876
  mask.ldv_32167.conn = 31U;
#line 1876
  reply->ret_code = drbd_request_state(mdev, mask, val);
#line 1877
  return (0);
}
}
#line 1881 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static int drbd_nl_new_c_uuid(struct drbd_conf *mdev , struct drbd_nl_cfg_req *nlp ,
                              struct drbd_nl_cfg_reply *reply ) 
{ 
  int retcode ;
  int skip_initial_sync ;
  int err ;
  struct new_c_uuid args ;
  int tmp ;
  int tmp___0 ;
  char const   *tmp___1 ;
  char const   *tmp___2 ;
  char const   *tmp___3 ;
  char const   *tmp___4 ;
  union drbd_state __ns ;

  {
#line 1884
  retcode = 101;
#line 1885
  skip_initial_sync = 0;
#line 1890
  memset((void *)(& args), 0, 4UL);
#line 1891
  tmp = new_c_uuid_from_tags(mdev, (unsigned short *)(& nlp->tag_list), & args);
#line 1891
  if (tmp == 0) {
#line 1892
    reply->ret_code = 126;
#line 1893
    return (0);
  } else {

  }
#line 1896
  mutex_lock_nested(& mdev->state_mutex, 0U);
#line 1898
  tmp___0 = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 1898
  if (tmp___0 == 0) {
#line 1899
    retcode = 138;
#line 1900
    goto out;
  } else {

  }
#line 1904
  if ((((unsigned int )*((unsigned short *)mdev + 902UL) == 160U && mdev->agreed_pro_version > 89) && (mdev->ldev)->md.uuid[0] == 4ULL) && (unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1906
    tmp___1 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1906
    tmp___2 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1906
    printk("<6>%s %s: Preparing to skip initial sync\n", tmp___2, tmp___1);
#line 1907
    skip_initial_sync = 1;
  } else
#line 1908
  if ((unsigned int )*((unsigned short *)mdev + 902UL) != 0U) {
#line 1909
    retcode = 151;
#line 1910
    goto out_dec;
  } else {

  }
#line 1913
  drbd_uuid_set(mdev, 1, 0ULL);
#line 1914
  drbd_uuid_new_current(mdev);
#line 1916
  if ((unsigned int )*((unsigned char *)(& args) + 0UL) != 0U) {
#line 1917
    err = drbd_bitmap_io(mdev, & drbd_bmio_clear_n_write, (char *)"clear_n_write from new_c_uuid");
#line 1918
    if (err != 0) {
#line 1919
      tmp___3 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1919
      tmp___4 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 1919
      printk("<3>%s %s: Writing bitmap failed with %d\n", tmp___4, tmp___3, err);
#line 1920
      retcode = 118;
    } else {

    }
#line 1922
    if (skip_initial_sync != 0) {
#line 1923
      drbd_send_uuids_skip_initial_sync(mdev);
#line 1924
      _drbd_uuid_set(mdev, 1, 0ULL);
#line 1925
      _spin_lock_irq(& mdev->req_lock);
#line 1926
      __ns.i = mdev->state.i;
#line 1926
      __ns.ldv_32167.disk = 8U;
#line 1926
      __ns.ldv_32167.pdsk = 8U;
#line 1926
      _drbd_set_state(mdev, __ns, CS_VERBOSE, 0);
#line 1928
      _spin_unlock_irq(& mdev->req_lock);
    } else {

    }
  } else {

  }
#line 1932
  drbd_md_sync(mdev);
  out_dec: 
#line 1934
  put_ldev(mdev);
  out: 
#line 1936
  mutex_unlock(& mdev->state_mutex);
#line 1938
  reply->ret_code = retcode;
#line 1939
  return (0);
}
}
#line 1942 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct drbd_conf *ensure_mdev(struct drbd_nl_cfg_req *nlp ) 
{ 
  struct drbd_conf *mdev ;
  struct gendisk *disk ;

  {
#line 1946
  if (nlp->drbd_minor >= minor_count) {
#line 1947
    return (0);
  } else {

  }
#line 1949
  mdev = minor_to_mdev(nlp->drbd_minor);
#line 1951
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0) && nlp->flags & 1) {
#line 1952
    disk = 0;
#line 1953
    mdev = drbd_new_device(nlp->drbd_minor);
#line 1955
    _spin_lock_irq(& drbd_pp_lock);
#line 1956
    if ((unsigned long )*(minor_table + (unsigned long )nlp->drbd_minor) == (unsigned long )((struct drbd_conf *)0)) {
#line 1957
      *(minor_table + (unsigned long )nlp->drbd_minor) = mdev;
#line 1958
      disk = mdev->vdisk;
#line 1959
      mdev = 0;
    } else {

    }
#line 1961
    _spin_unlock_irq(& drbd_pp_lock);
#line 1963
    if ((unsigned long )disk != (unsigned long )((struct gendisk *)0)) {
#line 1966
      add_disk(disk);
    } else {
#line 1968
      drbd_free_mdev(mdev);
    }
#line 1970
    mdev = minor_to_mdev(nlp->drbd_minor);
  } else {

  }
#line 1973
  return (mdev);
}
}
#line 1983 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static struct cn_handler_struct cnd_table[27U]  = 
#line 1983
  {      {0, 0}, 
        {& drbd_nl_primary, 0}, 
        {& drbd_nl_secondary, 0}, 
        {& drbd_nl_disk_conf, 0}, 
        {& drbd_nl_detach, 0}, 
        {& drbd_nl_net_conf, 0}, 
        {& drbd_nl_disconnect, 0}, 
        {& drbd_nl_resize, 0}, 
        {& drbd_nl_syncer_conf, 0}, 
        {& drbd_nl_invalidate, 0}, 
        {& drbd_nl_invalidate_peer, 0}, 
        {& drbd_nl_pause_sync, 0}, 
        {& drbd_nl_resume_sync, 0}, 
        {& drbd_nl_suspend_io, 0}, 
        {& drbd_nl_resume_io, 0}, 
        {& drbd_nl_outdate, 0}, 
        {& drbd_nl_get_config, 1232}, 
        {& drbd_nl_get_state, 16}, 
        {& drbd_nl_get_uuids, 48}, 
        {& drbd_nl_get_timeout_flag, 8}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {0, 0}, 
        {& drbd_nl_start_ov, 0}, 
        {& drbd_nl_new_c_uuid, 0}};
#line 2014 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static void drbd_connector_callback(struct cn_msg *req , struct netlink_skb_parms *nsp ) 
{ 
  struct drbd_nl_cfg_req *nlp ;
  struct cn_handler_struct *cm ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct drbd_conf *mdev ;
  int retcode ;
  int rr ;
  int reply_size ;
  int tmp ;
  void *tmp___0 ;

  {
#line 2016
  nlp = (struct drbd_nl_cfg_req *)(& req->data);
#line 2022
  reply_size = 34;
#line 2026
  tmp = ldv_try_module_get_2(& __this_module);
#line 2026
  if (tmp == 0) {
#line 2027
    printk("<3>drbd: try_module_get() failed!\n");
#line 2028
    return;
  } else {

  }
#line 2031
  if ((nsp->eff_cap.cap[0] & 2097152U) == 0U) {
#line 2032
    retcode = 152;
#line 2033
    goto fail;
  } else {

  }
#line 2036
  mdev = ensure_mdev(nlp);
#line 2037
  if ((unsigned long )mdev == (unsigned long )((struct drbd_conf *)0)) {
#line 2038
    retcode = 127;
#line 2039
    goto fail;
  } else {

  }
#line 2042
  if (nlp->packet_type > 26) {
#line 2043
    retcode = 137;
#line 2044
    goto fail;
  } else {

  }
#line 2047
  cm = (struct cn_handler_struct *)(& cnd_table) + (unsigned long )nlp->packet_type;
#line 2050
  if ((unsigned long )cm->function == (unsigned long )((int (*)(struct drbd_conf * ,
                                                                struct drbd_nl_cfg_req * ,
                                                                struct drbd_nl_cfg_reply * ))0)) {
#line 2051
    retcode = 137;
#line 2052
    goto fail;
  } else {

  }
#line 2055
  reply_size = cm->reply_body_size + reply_size;
#line 2058
  tmp___0 = kmalloc((size_t )reply_size, 208U);
#line 2058
  cn_reply = (struct cn_msg *)tmp___0;
#line 2059
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2060
    retcode = 122;
#line 2061
    goto fail;
  } else {

  }
#line 2063
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2065
  reply->packet_type = cm->reply_body_size != 0 ? nlp->packet_type : 27;
#line 2067
  reply->minor = nlp->drbd_minor;
#line 2068
  reply->ret_code = 101;
#line 2071
  rr = (*(cm->function))(mdev, nlp, reply);
#line 2073
  cn_reply->id = req->id;
#line 2074
  cn_reply->seq = req->seq;
#line 2075
  cn_reply->ack = req->ack + 1U;
#line 2076
  cn_reply->len = (unsigned int )((__u16 )rr) + 12U;
#line 2077
  cn_reply->flags = 0U;
#line 2079
  rr = cn_netlink_send(cn_reply, 4U, 208U);
#line 2080
  if (rr != 0 && rr != -3) {
#line 2081
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2083
  kfree((void const   *)cn_reply);
#line 2084
  ldv_module_put_5(& __this_module);
#line 2085
  return;
  fail: 
#line 2087
  drbd_nl_send_reply(req, retcode);
#line 2088
  ldv_module_put_6(& __this_module);
#line 2089
  return;
}
}
#line 2091 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static atomic_t drbd_nl_seq  =    {2};
#line 2094 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *__tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                     unsigned short len , int nul_terminated ) 
{ 
  unsigned short l ;
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  size_t __len ;
  void *__ret ;

  {
#line 2097
  l = (unsigned short )tag_descriptions[(unsigned int )tag & 8191U].max_len;
#line 2098
  len = (int )len < (int )l ? len : l;
#line 2099
  tmp = tl;
#line 2099
  tl = tl + 1;
#line 2099
  __gu_p = (void *)tmp;
#line 2099
  switch (2UL) {
  case 1UL: 
#line 2099
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2099
  goto ldv_43185;
  case 2UL: 
#line 2099
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2099
  goto ldv_43185;
  case 4UL: 
#line 2099
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2099
  goto ldv_43185;
  case 8UL: 
#line 2099
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2099
  goto ldv_43185;
  default: 
#line 2099
  __bad_unaligned_access_size();
#line 2099
  goto ldv_43185;
  }
  ldv_43185: 
#line 2100
  tmp___0 = tl;
#line 2100
  tl = tl + 1;
#line 2100
  __gu_p___0 = (void *)tmp___0;
#line 2100
  switch (2UL) {
  case 1UL: 
#line 2100
  *((u8 *)__gu_p___0) = (unsigned char )len;
#line 2100
  goto ldv_43192;
  case 2UL: 
#line 2100
  put_unaligned_le16((int )len, __gu_p___0);
#line 2100
  goto ldv_43192;
  case 4UL: 
#line 2100
  put_unaligned_le32((unsigned int )len, __gu_p___0);
#line 2100
  goto ldv_43192;
  case 8UL: 
#line 2100
  put_unaligned_le64((unsigned long long )len, __gu_p___0);
#line 2100
  goto ldv_43192;
  default: 
#line 2100
  __bad_unaligned_access_size();
#line 2100
  goto ldv_43192;
  }
  ldv_43192: 
#line 2101
  __len = (size_t )len;
#line 2101
  __ret = __builtin_memcpy((void *)tl, data, __len);
#line 2102
  tl = tl + (unsigned long )len;
#line 2103
  if (nul_terminated != 0) {
#line 2104
    *((char *)tl + 0xffffffffffffffffUL) = 0;
  } else {

  }
#line 2105
  return (tl);
}
}
#line 2109 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_blob(unsigned short *tl , enum drbd_tags tag , void const   *data ,
                                   int len ) 
{ 
  unsigned short *tmp ;

  {
#line 2111
  tmp = __tl_add_blob(tl, tag, data, (int )((unsigned short )len), 0);
#line 2111
  return (tmp);
}
}
#line 2115 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_str(unsigned short *tl , enum drbd_tags tag , char const   *str ) 
{ 
  size_t tmp ;
  unsigned short *tmp___0 ;

  {
#line 2117
  tmp = strlen(str);
#line 2117
  tmp___0 = __tl_add_blob(tl, tag, (void const   *)str, (int )((unsigned int )((unsigned short )tmp) + 1U),
                          0);
#line 2117
  return (tmp___0);
}
}
#line 2121 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
static unsigned short *tl_add_int(unsigned short *tl , enum drbd_tags tag , void const   *val ) 
{ 
  void *__gu_p ;
  unsigned short *tmp ;
  void *__gu_p___0 ;
  unsigned short *tmp___0 ;
  void *__gu_p___1 ;
  void *__gu_p___2 ;
  unsigned short *tmp___1 ;
  void *__gu_p___3 ;

  {
#line 2123
  tmp = tl;
#line 2123
  tl = tl + 1;
#line 2123
  __gu_p = (void *)tmp;
#line 2123
  switch (2UL) {
  case 1UL: 
#line 2123
  *((u8 *)__gu_p) = (unsigned char )tag;
#line 2123
  goto ldv_43218;
  case 2UL: 
#line 2123
  put_unaligned_le16((int )((unsigned short )tag), __gu_p);
#line 2123
  goto ldv_43218;
  case 4UL: 
#line 2123
  put_unaligned_le32((unsigned int )tag, __gu_p);
#line 2123
  goto ldv_43218;
  case 8UL: 
#line 2123
  put_unaligned_le64((unsigned long long )tag, __gu_p);
#line 2123
  goto ldv_43218;
  default: 
#line 2123
  __bad_unaligned_access_size();
#line 2123
  goto ldv_43218;
  }
  ldv_43218: ;
#line 2124
  switch ((unsigned int )tag & 49152U) {
  case 0U: 
#line 2126
  tmp___0 = tl;
#line 2126
  tl = tl + 1;
#line 2126
  __gu_p___0 = (void *)tmp___0;
#line 2126
  switch (2UL) {
  case 1UL: 
#line 2126
  *((u8 *)__gu_p___0) = 4U;
#line 2126
  goto ldv_43226;
  case 2UL: 
#line 2126
  put_unaligned_le16(4, __gu_p___0);
#line 2126
  goto ldv_43226;
  case 4UL: 
#line 2126
  put_unaligned_le32(4U, __gu_p___0);
#line 2126
  goto ldv_43226;
  case 8UL: 
#line 2126
  put_unaligned_le64(4ULL, __gu_p___0);
#line 2126
  goto ldv_43226;
  default: 
#line 2126
  __bad_unaligned_access_size();
#line 2126
  goto ldv_43226;
  }
  ldv_43226: 
#line 2127
  __gu_p___1 = (void *)tl;
#line 2127
  switch (4UL) {
  case 1UL: 
#line 2127
  *((u8 *)__gu_p___1) = (unsigned char )*((int *)val);
#line 2127
  goto ldv_43233;
  case 2UL: 
#line 2127
  put_unaligned_le16((int )((unsigned short )*((int *)val)), __gu_p___1);
#line 2127
  goto ldv_43233;
  case 4UL: 
#line 2127
  put_unaligned_le32((unsigned int )*((int *)val), __gu_p___1);
#line 2127
  goto ldv_43233;
  case 8UL: 
#line 2127
  put_unaligned_le64((unsigned long long )*((int *)val), __gu_p___1);
#line 2127
  goto ldv_43233;
  default: 
#line 2127
  __bad_unaligned_access_size();
#line 2127
  goto ldv_43233;
  }
  ldv_43233: 
#line 2128
  tl = tl + 4U;
#line 2129
  goto ldv_43238;
  case 16384U: 
#line 2131
  tmp___1 = tl;
#line 2131
  tl = tl + 1;
#line 2131
  __gu_p___2 = (void *)tmp___1;
#line 2131
  switch (2UL) {
  case 1UL: 
#line 2131
  *((u8 *)__gu_p___2) = 8U;
#line 2131
  goto ldv_43242;
  case 2UL: 
#line 2131
  put_unaligned_le16(8, __gu_p___2);
#line 2131
  goto ldv_43242;
  case 4UL: 
#line 2131
  put_unaligned_le32(8U, __gu_p___2);
#line 2131
  goto ldv_43242;
  case 8UL: 
#line 2131
  put_unaligned_le64(8ULL, __gu_p___2);
#line 2131
  goto ldv_43242;
  default: 
#line 2131
  __bad_unaligned_access_size();
#line 2131
  goto ldv_43242;
  }
  ldv_43242: 
#line 2132
  __gu_p___3 = (void *)tl;
#line 2132
  switch (8UL) {
  case 1UL: 
#line 2132
  *((u8 *)__gu_p___3) = (unsigned char )*((u64 *)val);
#line 2132
  goto ldv_43249;
  case 2UL: 
#line 2132
  put_unaligned_le16((int )((unsigned short )*((u64 *)val)), __gu_p___3);
#line 2132
  goto ldv_43249;
  case 4UL: 
#line 2132
  put_unaligned_le32((unsigned int )*((u64 *)val), __gu_p___3);
#line 2132
  goto ldv_43249;
  case 8UL: 
#line 2132
  put_unaligned_le64(*((u64 *)val), __gu_p___3);
#line 2132
  goto ldv_43249;
  default: 
#line 2132
  __bad_unaligned_access_size();
#line 2132
  goto ldv_43249;
  }
  ldv_43249: 
#line 2133
  tl = tl + 8U;
#line 2134
  goto ldv_43238;
  default: ;
  }
  ldv_43238: ;
#line 2139
  return (tl);
}
}
#line 2142 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_state(struct drbd_conf *mdev , union drbd_state state ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2148
  cn_reply = (struct cn_msg *)(& buffer);
#line 2149
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2151
  tl = (unsigned short *)(& reply->tag_list);
#line 2155
  tl = get_state_to_tags(mdev, (struct get_state *)(& state), tl);
#line 2157
  tmp = tl;
#line 2157
  tl = tl + 1;
#line 2157
  __gu_p = (void *)tmp;
#line 2157
  switch (2UL) {
  case 1UL: 
#line 2157
  *((u8 *)__gu_p) = 0U;
#line 2157
  goto ldv_43265;
  case 2UL: 
#line 2157
  put_unaligned_le16(0, __gu_p);
#line 2157
  goto ldv_43265;
  case 4UL: 
#line 2157
  put_unaligned_le32(0U, __gu_p);
#line 2157
  goto ldv_43265;
  case 8UL: 
#line 2157
  put_unaligned_le64(0ULL, __gu_p);
#line 2157
  goto ldv_43265;
  default: 
#line 2157
  __bad_unaligned_access_size();
#line 2157
  goto ldv_43265;
  }
  ldv_43265: 
#line 2159
  cn_reply->id.idx = 4U;
#line 2160
  cn_reply->id.val = 1U;
#line 2162
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2162
  cn_reply->seq = (__u32 )tmp___0;
#line 2163
  cn_reply->ack = 0U;
#line 2164
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2166
  cn_reply->flags = 0U;
#line 2168
  reply->packet_type = 17;
#line 2169
  reply->minor = mdev_to_minor(mdev);
#line 2170
  reply->ret_code = 101;
#line 2172
  cn_netlink_send(cn_reply, 4U, 16U);
#line 2173
  return;
}
}
#line 2175 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ev_helper(struct drbd_conf *mdev , char *helper_name ) 
{ 
  char buffer[74U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  void *__gu_p ;
  unsigned short *tmp ;
  int tmp___0 ;

  {
#line 2181
  cn_reply = (struct cn_msg *)(& buffer);
#line 2182
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2184
  tl = (unsigned short *)(& reply->tag_list);
#line 2188
  tl = tl_add_str(tl, T_helper, (char const   *)helper_name);
#line 2189
  tmp = tl;
#line 2189
  tl = tl + 1;
#line 2189
  __gu_p = (void *)tmp;
#line 2189
  switch (2UL) {
  case 1UL: 
#line 2189
  *((u8 *)__gu_p) = 0U;
#line 2189
  goto ldv_43280;
  case 2UL: 
#line 2189
  put_unaligned_le16(0, __gu_p);
#line 2189
  goto ldv_43280;
  case 4UL: 
#line 2189
  put_unaligned_le32(0U, __gu_p);
#line 2189
  goto ldv_43280;
  case 8UL: 
#line 2189
  put_unaligned_le64(0ULL, __gu_p);
#line 2189
  goto ldv_43280;
  default: 
#line 2189
  __bad_unaligned_access_size();
#line 2189
  goto ldv_43280;
  }
  ldv_43280: 
#line 2191
  cn_reply->id.idx = 4U;
#line 2192
  cn_reply->id.val = 1U;
#line 2194
  tmp___0 = atomic_add_return(1, & drbd_nl_seq);
#line 2194
  cn_reply->seq = (__u32 )tmp___0;
#line 2195
  cn_reply->ack = 0U;
#line 2196
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2198
  cn_reply->flags = 0U;
#line 2200
  reply->packet_type = 20;
#line 2201
  reply->minor = mdev_to_minor(mdev);
#line 2202
  reply->ret_code = 101;
#line 2204
  cn_netlink_send(cn_reply, 4U, 16U);
#line 2205
  return;
}
}
#line 2207 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_ee(struct drbd_conf *mdev , char const   *reason , int const   dgs ,
                   char const   *seen_hash , char const   *calc_hash , struct drbd_epoch_entry  const  *e ) 
{ 
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  struct bio_vec *bvec ;
  unsigned short *tl ;
  int i ;
  void *tmp ;
  char const   *tmp___0 ;
  char const   *tmp___1 ;
  void *__gu_p ;
  unsigned short *tmp___2 ;
  void *__gu_p___0 ;
  unsigned short *tmp___3 ;
  void *d ;
  void *tmp___4 ;
  size_t __len ;
  void *__ret ;
  void *__gu_p___1 ;
  unsigned short *tmp___5 ;
  int tmp___6 ;

  {
#line 2218
  if ((unsigned long )e == (unsigned long )((struct drbd_epoch_entry  const  *)0)) {
#line 2219
    return;
  } else {

  }
#line 2220
  if ((unsigned long )reason == (unsigned long )((char const   *)0) || (int )((signed char )*reason) == 0) {
#line 2221
    return;
  } else {

  }
#line 2229
  tmp = kmalloc(33026UL, 16U);
#line 2229
  cn_reply = (struct cn_msg *)tmp;
#line 2236
  if ((unsigned long )cn_reply == (unsigned long )((struct cn_msg *)0)) {
#line 2237
    tmp___0 = dev_name((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2237
    tmp___1 = dev_driver_string((struct device  const  *)(& (mdev->vdisk)->part0.__dev));
#line 2237
    printk("<3>%s %s: could not kmalloc buffer for drbd_bcast_ee, sector %llu, size %u\n",
           tmp___1, tmp___0, (unsigned long long )e->sector, e->size);
#line 2239
    return;
  } else {

  }
#line 2242
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2243
  tl = (unsigned short *)(& reply->tag_list);
#line 2245
  tl = tl_add_str(tl, T_dump_ee_reason, reason);
#line 2246
  tl = tl_add_blob(tl, T_seen_digest, (void const   *)seen_hash, dgs);
#line 2247
  tl = tl_add_blob(tl, T_calc_digest, (void const   *)calc_hash, dgs);
#line 2248
  tl = tl_add_int(tl, T_ee_sector, (void const   *)(& e->sector));
#line 2249
  tl = tl_add_int(tl, T_ee_block_id, (void const   *)(& e->block_id));
#line 2251
  tmp___2 = tl;
#line 2251
  tl = tl + 1;
#line 2251
  __gu_p = (void *)tmp___2;
#line 2251
  switch (2UL) {
  case 1UL: 
#line 2251
  *((u8 *)__gu_p) = 50U;
#line 2251
  goto ldv_43300;
  case 2UL: 
#line 2251
  put_unaligned_le16(49202, __gu_p);
#line 2251
  goto ldv_43300;
  case 4UL: 
#line 2251
  put_unaligned_le32(49202U, __gu_p);
#line 2251
  goto ldv_43300;
  case 8UL: 
#line 2251
  put_unaligned_le64(49202ULL, __gu_p);
#line 2251
  goto ldv_43300;
  default: 
#line 2251
  __bad_unaligned_access_size();
#line 2251
  goto ldv_43300;
  }
  ldv_43300: 
#line 2252
  tmp___3 = tl;
#line 2252
  tl = tl + 1;
#line 2252
  __gu_p___0 = (void *)tmp___3;
#line 2252
  switch (2UL) {
  case 1UL: 
#line 2252
  *((u8 *)__gu_p___0) = (unsigned char )e->size;
#line 2252
  goto ldv_43307;
  case 2UL: 
#line 2252
  put_unaligned_le16((int )((unsigned short )e->size), __gu_p___0);
#line 2252
  goto ldv_43307;
  case 4UL: 
#line 2252
  put_unaligned_le32(e->size, __gu_p___0);
#line 2252
  goto ldv_43307;
  case 8UL: 
#line 2252
  put_unaligned_le64((unsigned long long )e->size, __gu_p___0);
#line 2252
  goto ldv_43307;
  default: 
#line 2252
  __bad_unaligned_access_size();
#line 2252
  goto ldv_43307;
  }
  ldv_43307: 
#line 2254
  bvec = (e->private_bio)->bi_io_vec;
#line 2254
  i = 0;
#line 2254
  goto ldv_43317;
  ldv_43316: 
#line 2255
  tmp___4 = kmap(bvec->bv_page);
#line 2255
  d = tmp___4;
#line 2256
  __len = (size_t )bvec->bv_len;
#line 2256
  __ret = __builtin_memcpy((void *)tl, (void const   *)d + (unsigned long )bvec->bv_offset,
                           __len);
#line 2257
  kunmap(bvec->bv_page);
#line 2258
  tl = tl + (unsigned long )bvec->bv_len;
#line 2254
  bvec = bvec + 1;
#line 2254
  i = i + 1;
  ldv_43317: ;
#line 2254
  if ((int )(e->private_bio)->bi_vcnt > i) {
#line 2255
    goto ldv_43316;
  } else {

  }
#line 2260
  tmp___5 = tl;
#line 2260
  tl = tl + 1;
#line 2260
  __gu_p___1 = (void *)tmp___5;
#line 2260
  switch (2UL) {
  case 1UL: 
#line 2260
  *((u8 *)__gu_p___1) = 0U;
#line 2260
  goto ldv_43321;
  case 2UL: 
#line 2260
  put_unaligned_le16(0, __gu_p___1);
#line 2260
  goto ldv_43321;
  case 4UL: 
#line 2260
  put_unaligned_le32(0U, __gu_p___1);
#line 2260
  goto ldv_43321;
  case 8UL: 
#line 2260
  put_unaligned_le64(0ULL, __gu_p___1);
#line 2260
  goto ldv_43321;
  default: 
#line 2260
  __bad_unaligned_access_size();
#line 2260
  goto ldv_43321;
  }
  ldv_43321: 
#line 2262
  cn_reply->id.idx = 4U;
#line 2263
  cn_reply->id.val = 1U;
#line 2265
  tmp___6 = atomic_add_return(1, & drbd_nl_seq);
#line 2265
  cn_reply->seq = (__u32 )tmp___6;
#line 2266
  cn_reply->ack = 0U;
#line 2267
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2269
  cn_reply->flags = 0U;
#line 2271
  reply->packet_type = 24;
#line 2272
  reply->minor = mdev_to_minor(mdev);
#line 2273
  reply->ret_code = 101;
#line 2275
  cn_netlink_send(cn_reply, 4U, 16U);
#line 2276
  kfree((void const   *)cn_reply);
#line 2277
  return;
}
}
#line 2279 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_bcast_sync_progress(struct drbd_conf *mdev ) 
{ 
  char buffer[42U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  unsigned short *tl ;
  unsigned long rs_left ;
  unsigned int res ;
  int tmp ;
  void *__gu_p ;
  unsigned short *tmp___0 ;
  int tmp___1 ;

  {
#line 2285
  cn_reply = (struct cn_msg *)(& buffer);
#line 2286
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2288
  tl = (unsigned short *)(& reply->tag_list);
#line 2293
  tmp = _get_ldev_if_state(mdev, D_INCONSISTENT);
#line 2293
  if (tmp == 0) {
#line 2294
    return;
  } else {

  }
#line 2295
  drbd_get_syncer_progress(mdev, & rs_left, & res);
#line 2296
  put_ldev(mdev);
#line 2298
  tl = tl_add_int(tl, T_sync_progress, (void const   *)(& res));
#line 2299
  tmp___0 = tl;
#line 2299
  tl = tl + 1;
#line 2299
  __gu_p = (void *)tmp___0;
#line 2299
  switch (2UL) {
  case 1UL: 
#line 2299
  *((u8 *)__gu_p) = 0U;
#line 2299
  goto ldv_43337;
  case 2UL: 
#line 2299
  put_unaligned_le16(0, __gu_p);
#line 2299
  goto ldv_43337;
  case 4UL: 
#line 2299
  put_unaligned_le32(0U, __gu_p);
#line 2299
  goto ldv_43337;
  case 8UL: 
#line 2299
  put_unaligned_le64(0ULL, __gu_p);
#line 2299
  goto ldv_43337;
  default: 
#line 2299
  __bad_unaligned_access_size();
#line 2299
  goto ldv_43337;
  }
  ldv_43337: 
#line 2301
  cn_reply->id.idx = 4U;
#line 2302
  cn_reply->id.val = 1U;
#line 2304
  tmp___1 = atomic_add_return(1, & drbd_nl_seq);
#line 2304
  cn_reply->seq = (__u32 )tmp___1;
#line 2305
  cn_reply->ack = 0U;
#line 2306
  cn_reply->len = (unsigned int )((int )((__u16 )((long )tl)) - (int )((__u16 )((long )(& reply->tag_list)))) + 12U;
#line 2308
  cn_reply->flags = 0U;
#line 2310
  reply->packet_type = 23;
#line 2311
  reply->minor = mdev_to_minor(mdev);
#line 2312
  reply->ret_code = 101;
#line 2314
  cn_netlink_send(cn_reply, 4U, 16U);
#line 2315
  return;
}
}
#line 2317 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
int drbd_nl_init(void) 
{ 
  struct cb_id cn_id_drbd ;
  int err ;
  int try ;
  int tmp ;

  {
#line 2320
  try = 10;
#line 2322
  cn_id_drbd.val = 1U;
  ldv_43349: 
#line 2324
  cn_id_drbd.idx = cn_idx;
#line 2325
  err = cn_add_callback(& cn_id_drbd, (char *)"cn_drbd", & drbd_connector_callback);
#line 2326
  if (err == 0) {
#line 2327
    goto ldv_43348;
  } else {

  }
#line 2328
  cn_idx = cn_idx + 6977U;
#line 2329
  tmp = try;
#line 2329
  try = try - 1;
#line 2329
  if (tmp != 0) {
#line 2330
    goto ldv_43349;
  } else {

  }
  ldv_43348: ;
#line 2331
  if (err != 0) {
#line 2332
    printk("<3>drbd: cn_drbd failed to register\n");
#line 2333
    return (err);
  } else {

  }
#line 2336
  return (0);
}
}
#line 2339 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_cleanup(void) 
{ 
  struct cb_id cn_id_drbd ;

  {
#line 2343
  cn_id_drbd.idx = cn_idx;
#line 2344
  cn_id_drbd.val = 1U;
#line 2346
  cn_del_callback(& cn_id_drbd);
#line 2347
  return;
}
}
#line 2349 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void drbd_nl_send_reply(struct cn_msg *req , int ret_code ) 
{ 
  char buffer[32U] ;
  struct cn_msg *cn_reply ;
  struct drbd_nl_cfg_reply *reply ;
  int rr ;

  {
#line 2352
  cn_reply = (struct cn_msg *)(& buffer);
#line 2353
  reply = (struct drbd_nl_cfg_reply *)(& cn_reply->data);
#line 2357
  cn_reply->id = req->id;
#line 2359
  cn_reply->seq = req->seq;
#line 2360
  cn_reply->ack = req->ack + 1U;
#line 2361
  cn_reply->len = 12U;
#line 2362
  cn_reply->flags = 0U;
#line 2364
  reply->minor = ((struct drbd_nl_cfg_req *)(& req->data))->drbd_minor;
#line 2365
  reply->ret_code = ret_code;
#line 2367
  rr = cn_netlink_send(cn_reply, 4U, 16U);
#line 2368
  if (rr != 0 && rr != -3) {
#line 2369
    printk("<6>drbd: cn_netlink_send()=%d\n", rr);
  } else {

  }
#line 2370
  return;
}
}
#line 2380 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_5(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2385
  ldv_module_put(ldv_func_arg1);
#line 2386
  return;
}
}
#line 2388 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/dscv/ri/08_1a/drivers/block/drbd/drbd_nl.c.prepared"
void ldv_module_put_6(struct module *ldv_func_arg1 ) 
{ 


  {
#line 2393
  ldv_module_put(ldv_func_arg1);
#line 2394
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: 
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/drbd/drbd.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/19/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
